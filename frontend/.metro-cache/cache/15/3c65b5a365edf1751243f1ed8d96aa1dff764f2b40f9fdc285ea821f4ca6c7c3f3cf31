{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.BackoffTimeout = void 0;\n  const INITIAL_BACKOFF_MS = 1000;\n  const BACKOFF_MULTIPLIER = 1.6;\n  const MAX_BACKOFF_MS = 120000;\n  const BACKOFF_JITTER = 0.2;\n  /**\n   * Get a number uniformly at random in the range [min, max)\n   * @param min\n   * @param max\n   */\n  function uniformRandom(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n  class BackoffTimeout {\n    constructor(callback, options) {\n      this.callback = callback;\n      /**\n       * The delay time at the start, and after each reset.\n       */\n      this.initialDelay = INITIAL_BACKOFF_MS;\n      /**\n       * The exponential backoff multiplier.\n       */\n      this.multiplier = BACKOFF_MULTIPLIER;\n      /**\n       * The maximum delay time\n       */\n      this.maxDelay = MAX_BACKOFF_MS;\n      /**\n       * The maximum fraction by which the delay time can randomly vary after\n       * applying the multiplier.\n       */\n      this.jitter = BACKOFF_JITTER;\n      /**\n       * Indicates whether the timer is currently running.\n       */\n      this.running = false;\n      /**\n       * Indicates whether the timer should keep the Node process running if no\n       * other async operation is doing so.\n       */\n      this.hasRef = true;\n      /**\n       * The time that the currently running timer was started. Only valid if\n       * running is true.\n       */\n      this.startTime = new Date();\n      /**\n       * The approximate time that the currently running timer will end. Only valid\n       * if running is true.\n       */\n      this.endTime = new Date();\n      if (options) {\n        if (options.initialDelay) {\n          this.initialDelay = options.initialDelay;\n        }\n        if (options.multiplier) {\n          this.multiplier = options.multiplier;\n        }\n        if (options.jitter) {\n          this.jitter = options.jitter;\n        }\n        if (options.maxDelay) {\n          this.maxDelay = options.maxDelay;\n        }\n      }\n      this.nextDelay = this.initialDelay;\n      this.timerId = setTimeout(() => {}, 0);\n      clearTimeout(this.timerId);\n    }\n    runTimer(delay) {\n      var _a, _b;\n      this.endTime = this.startTime;\n      this.endTime.setMilliseconds(this.endTime.getMilliseconds() + this.nextDelay);\n      clearTimeout(this.timerId);\n      this.timerId = setTimeout(() => {\n        this.callback();\n        this.running = false;\n      }, delay);\n      if (!this.hasRef) {\n        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    }\n    /**\n     * Call the callback after the current amount of delay time\n     */\n    runOnce() {\n      this.running = true;\n      this.startTime = new Date();\n      this.runTimer(this.nextDelay);\n      const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\n      const jitterMagnitude = nextBackoff * this.jitter;\n      this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\n    }\n    /**\n     * Stop the timer. The callback will not be called until `runOnce` is called\n     * again.\n     */\n    stop() {\n      clearTimeout(this.timerId);\n      this.running = false;\n    }\n    /**\n     * Reset the delay time to its initial value. If the timer is still running,\n     * retroactively apply that reset to the current timer.\n     */\n    reset() {\n      this.nextDelay = this.initialDelay;\n      if (this.running) {\n        const now = new Date();\n        const newEndTime = this.startTime;\n        newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\n        clearTimeout(this.timerId);\n        if (now < newEndTime) {\n          this.runTimer(newEndTime.getTime() - now.getTime());\n        } else {\n          this.running = false;\n        }\n      }\n    }\n    /**\n     * Check whether the timer is currently running.\n     */\n    isRunning() {\n      return this.running;\n    }\n    /**\n     * Set that while the timer is running, it should keep the Node process\n     * running.\n     */\n    ref() {\n      var _a, _b;\n      this.hasRef = true;\n      (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Set that while the timer is running, it should not keep the Node process\n     * running.\n     */\n    unref() {\n      var _a, _b;\n      this.hasRef = false;\n      (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Get the approximate timestamp of when the timer will fire. Only valid if\n     * this.isRunning() is true.\n     */\n    getEndTime() {\n      return this.endTime;\n    }\n  }\n  exports.BackoffTimeout = BackoffTimeout;\n});","lineCount":176,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"BackoffTimeout"],[23,24,19,22],[23,27,19,25],[23,32,19,30],[23,33,19,31],[24,2,20,0],[24,8,20,6,"INITIAL_BACKOFF_MS"],[24,26,20,24],[24,29,20,27],[24,33,20,31],[25,2,21,0],[25,8,21,6,"BACKOFF_MULTIPLIER"],[25,26,21,24],[25,29,21,27],[25,32,21,30],[26,2,22,0],[26,8,22,6,"MAX_BACKOFF_MS"],[26,22,22,20],[26,25,22,23],[26,31,22,29],[27,2,23,0],[27,8,23,6,"BACKOFF_JITTER"],[27,22,23,20],[27,25,23,23],[27,28,23,26],[28,2,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,2,29,0],[33,11,29,9,"uniformRandom"],[33,24,29,22,"uniformRandom"],[33,25,29,23,"min"],[33,28,29,26],[33,30,29,28,"max"],[33,33,29,31],[33,35,29,33],[34,4,30,4],[34,11,30,11,"Math"],[34,15,30,15],[34,16,30,16,"random"],[34,22,30,22],[34,23,30,23],[34,24,30,24],[34,28,30,28,"max"],[34,31,30,31],[34,34,30,34,"min"],[34,37,30,37],[34,38,30,38],[34,41,30,41,"min"],[34,44,30,44],[35,2,31,0],[36,2,32,0],[36,8,32,6,"BackoffTimeout"],[36,22,32,20],[36,23,32,21],[37,4,33,4,"constructor"],[37,15,33,15,"constructor"],[37,16,33,16,"callback"],[37,24,33,24],[37,26,33,26,"options"],[37,33,33,33],[37,35,33,35],[38,6,34,8],[38,10,34,12],[38,11,34,13,"callback"],[38,19,34,21],[38,22,34,24,"callback"],[38,30,34,32],[39,6,35,8],[40,0,36,0],[41,0,37,0],[42,6,38,8],[42,10,38,12],[42,11,38,13,"initialDelay"],[42,23,38,25],[42,26,38,28,"INITIAL_BACKOFF_MS"],[42,44,38,46],[43,6,39,8],[44,0,40,0],[45,0,41,0],[46,6,42,8],[46,10,42,12],[46,11,42,13,"multiplier"],[46,21,42,23],[46,24,42,26,"BACKOFF_MULTIPLIER"],[46,42,42,44],[47,6,43,8],[48,0,44,0],[49,0,45,0],[50,6,46,8],[50,10,46,12],[50,11,46,13,"maxDelay"],[50,19,46,21],[50,22,46,24,"MAX_BACKOFF_MS"],[50,36,46,38],[51,6,47,8],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,6,51,8],[55,10,51,12],[55,11,51,13,"jitter"],[55,17,51,19],[55,20,51,22,"BACKOFF_JITTER"],[55,34,51,36],[56,6,52,8],[57,0,53,0],[58,0,54,0],[59,6,55,8],[59,10,55,12],[59,11,55,13,"running"],[59,18,55,20],[59,21,55,23],[59,26,55,28],[60,6,56,8],[61,0,57,0],[62,0,58,0],[63,0,59,0],[64,6,60,8],[64,10,60,12],[64,11,60,13,"hasRef"],[64,17,60,19],[64,20,60,22],[64,24,60,26],[65,6,61,8],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,6,65,8],[69,10,65,12],[69,11,65,13,"startTime"],[69,20,65,22],[69,23,65,25],[69,27,65,29,"Date"],[69,31,65,33],[69,32,65,34],[69,33,65,35],[70,6,66,8],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,6,70,8],[74,10,70,12],[74,11,70,13,"endTime"],[74,18,70,20],[74,21,70,23],[74,25,70,27,"Date"],[74,29,70,31],[74,30,70,32],[74,31,70,33],[75,6,71,8],[75,10,71,12,"options"],[75,17,71,19],[75,19,71,21],[76,8,72,12],[76,12,72,16,"options"],[76,19,72,23],[76,20,72,24,"initialDelay"],[76,32,72,36],[76,34,72,38],[77,10,73,16],[77,14,73,20],[77,15,73,21,"initialDelay"],[77,27,73,33],[77,30,73,36,"options"],[77,37,73,43],[77,38,73,44,"initialDelay"],[77,50,73,56],[78,8,74,12],[79,8,75,12],[79,12,75,16,"options"],[79,19,75,23],[79,20,75,24,"multiplier"],[79,30,75,34],[79,32,75,36],[80,10,76,16],[80,14,76,20],[80,15,76,21,"multiplier"],[80,25,76,31],[80,28,76,34,"options"],[80,35,76,41],[80,36,76,42,"multiplier"],[80,46,76,52],[81,8,77,12],[82,8,78,12],[82,12,78,16,"options"],[82,19,78,23],[82,20,78,24,"jitter"],[82,26,78,30],[82,28,78,32],[83,10,79,16],[83,14,79,20],[83,15,79,21,"jitter"],[83,21,79,27],[83,24,79,30,"options"],[83,31,79,37],[83,32,79,38,"jitter"],[83,38,79,44],[84,8,80,12],[85,8,81,12],[85,12,81,16,"options"],[85,19,81,23],[85,20,81,24,"maxDelay"],[85,28,81,32],[85,30,81,34],[86,10,82,16],[86,14,82,20],[86,15,82,21,"maxDelay"],[86,23,82,29],[86,26,82,32,"options"],[86,33,82,39],[86,34,82,40,"maxDelay"],[86,42,82,48],[87,8,83,12],[88,6,84,8],[89,6,85,8],[89,10,85,12],[89,11,85,13,"nextDelay"],[89,20,85,22],[89,23,85,25],[89,27,85,29],[89,28,85,30,"initialDelay"],[89,40,85,42],[90,6,86,8],[90,10,86,12],[90,11,86,13,"timerId"],[90,18,86,20],[90,21,86,23,"setTimeout"],[90,31,86,33],[90,32,86,34],[90,38,86,40],[90,39,86,42],[90,40,86,43],[90,42,86,45],[90,43,86,46],[90,44,86,47],[91,6,87,8,"clearTimeout"],[91,18,87,20],[91,19,87,21],[91,23,87,25],[91,24,87,26,"timerId"],[91,31,87,33],[91,32,87,34],[92,4,88,4],[93,4,89,4,"runTimer"],[93,12,89,12,"runTimer"],[93,13,89,13,"delay"],[93,18,89,18],[93,20,89,20],[94,6,90,8],[94,10,90,12,"_a"],[94,12,90,14],[94,14,90,16,"_b"],[94,16,90,18],[95,6,91,8],[95,10,91,12],[95,11,91,13,"endTime"],[95,18,91,20],[95,21,91,23],[95,25,91,27],[95,26,91,28,"startTime"],[95,35,91,37],[96,6,92,8],[96,10,92,12],[96,11,92,13,"endTime"],[96,18,92,20],[96,19,92,21,"setMilliseconds"],[96,34,92,36],[96,35,92,37],[96,39,92,41],[96,40,92,42,"endTime"],[96,47,92,49],[96,48,92,50,"getMilliseconds"],[96,63,92,65],[96,64,92,66],[96,65,92,67],[96,68,92,70],[96,72,92,74],[96,73,92,75,"nextDelay"],[96,82,92,84],[96,83,92,85],[97,6,93,8,"clearTimeout"],[97,18,93,20],[97,19,93,21],[97,23,93,25],[97,24,93,26,"timerId"],[97,31,93,33],[97,32,93,34],[98,6,94,8],[98,10,94,12],[98,11,94,13,"timerId"],[98,18,94,20],[98,21,94,23,"setTimeout"],[98,31,94,33],[98,32,94,34],[98,38,94,40],[99,8,95,12],[99,12,95,16],[99,13,95,17,"callback"],[99,21,95,25],[99,22,95,26],[99,23,95,27],[100,8,96,12],[100,12,96,16],[100,13,96,17,"running"],[100,20,96,24],[100,23,96,27],[100,28,96,32],[101,6,97,8],[101,7,97,9],[101,9,97,11,"delay"],[101,14,97,16],[101,15,97,17],[102,6,98,8],[102,10,98,12],[102,11,98,13],[102,15,98,17],[102,16,98,18,"hasRef"],[102,22,98,24],[102,24,98,26],[103,8,99,12],[103,9,99,13,"_b"],[103,11,99,15],[103,14,99,18],[103,15,99,19,"_a"],[103,17,99,21],[103,20,99,24],[103,24,99,28],[103,25,99,29,"timerId"],[103,32,99,36],[103,34,99,38,"unref"],[103,39,99,43],[103,45,99,49],[103,49,99,53],[103,53,99,57,"_b"],[103,55,99,59],[103,60,99,64],[103,65,99,69],[103,66,99,70],[103,69,99,73],[103,74,99,78],[103,75,99,79],[103,78,99,82,"_b"],[103,80,99,84],[103,81,99,85,"call"],[103,85,99,89],[103,86,99,90,"_a"],[103,88,99,92],[103,89,99,93],[104,6,100,8],[105,4,101,4],[106,4,102,4],[107,0,103,0],[108,0,104,0],[109,4,105,4,"runOnce"],[109,11,105,11,"runOnce"],[109,12,105,11],[109,14,105,14],[110,6,106,8],[110,10,106,12],[110,11,106,13,"running"],[110,18,106,20],[110,21,106,23],[110,25,106,27],[111,6,107,8],[111,10,107,12],[111,11,107,13,"startTime"],[111,20,107,22],[111,23,107,25],[111,27,107,29,"Date"],[111,31,107,33],[111,32,107,34],[111,33,107,35],[112,6,108,8],[112,10,108,12],[112,11,108,13,"runTimer"],[112,19,108,21],[112,20,108,22],[112,24,108,26],[112,25,108,27,"nextDelay"],[112,34,108,36],[112,35,108,37],[113,6,109,8],[113,12,109,14,"nextBackoff"],[113,23,109,25],[113,26,109,28,"Math"],[113,30,109,32],[113,31,109,33,"min"],[113,34,109,36],[113,35,109,37],[113,39,109,41],[113,40,109,42,"nextDelay"],[113,49,109,51],[113,52,109,54],[113,56,109,58],[113,57,109,59,"multiplier"],[113,67,109,69],[113,69,109,71],[113,73,109,75],[113,74,109,76,"maxDelay"],[113,82,109,84],[113,83,109,85],[114,6,110,8],[114,12,110,14,"jitterMagnitude"],[114,27,110,29],[114,30,110,32,"nextBackoff"],[114,41,110,43],[114,44,110,46],[114,48,110,50],[114,49,110,51,"jitter"],[114,55,110,57],[115,6,111,8],[115,10,111,12],[115,11,111,13,"nextDelay"],[115,20,111,22],[115,23,112,12,"nextBackoff"],[115,34,112,23],[115,37,112,26,"uniformRandom"],[115,50,112,39],[115,51,112,40],[115,52,112,41,"jitterMagnitude"],[115,67,112,56],[115,69,112,58,"jitterMagnitude"],[115,84,112,73],[115,85,112,74],[116,4,113,4],[117,4,114,4],[118,0,115,0],[119,0,116,0],[120,0,117,0],[121,4,118,4,"stop"],[121,8,118,8,"stop"],[121,9,118,8],[121,11,118,11],[122,6,119,8,"clearTimeout"],[122,18,119,20],[122,19,119,21],[122,23,119,25],[122,24,119,26,"timerId"],[122,31,119,33],[122,32,119,34],[123,6,120,8],[123,10,120,12],[123,11,120,13,"running"],[123,18,120,20],[123,21,120,23],[123,26,120,28],[124,4,121,4],[125,4,122,4],[126,0,123,0],[127,0,124,0],[128,0,125,0],[129,4,126,4,"reset"],[129,9,126,9,"reset"],[129,10,126,9],[129,12,126,12],[130,6,127,8],[130,10,127,12],[130,11,127,13,"nextDelay"],[130,20,127,22],[130,23,127,25],[130,27,127,29],[130,28,127,30,"initialDelay"],[130,40,127,42],[131,6,128,8],[131,10,128,12],[131,14,128,16],[131,15,128,17,"running"],[131,22,128,24],[131,24,128,26],[132,8,129,12],[132,14,129,18,"now"],[132,17,129,21],[132,20,129,24],[132,24,129,28,"Date"],[132,28,129,32],[132,29,129,33],[132,30,129,34],[133,8,130,12],[133,14,130,18,"newEndTime"],[133,24,130,28],[133,27,130,31],[133,31,130,35],[133,32,130,36,"startTime"],[133,41,130,45],[134,8,131,12,"newEndTime"],[134,18,131,22],[134,19,131,23,"setMilliseconds"],[134,34,131,38],[134,35,131,39,"newEndTime"],[134,45,131,49],[134,46,131,50,"getMilliseconds"],[134,61,131,65],[134,62,131,66],[134,63,131,67],[134,66,131,70],[134,70,131,74],[134,71,131,75,"nextDelay"],[134,80,131,84],[134,81,131,85],[135,8,132,12,"clearTimeout"],[135,20,132,24],[135,21,132,25],[135,25,132,29],[135,26,132,30,"timerId"],[135,33,132,37],[135,34,132,38],[136,8,133,12],[136,12,133,16,"now"],[136,15,133,19],[136,18,133,22,"newEndTime"],[136,28,133,32],[136,30,133,34],[137,10,134,16],[137,14,134,20],[137,15,134,21,"runTimer"],[137,23,134,29],[137,24,134,30,"newEndTime"],[137,34,134,40],[137,35,134,41,"getTime"],[137,42,134,48],[137,43,134,49],[137,44,134,50],[137,47,134,53,"now"],[137,50,134,56],[137,51,134,57,"getTime"],[137,58,134,64],[137,59,134,65],[137,60,134,66],[137,61,134,67],[138,8,135,12],[138,9,135,13],[138,15,136,17],[139,10,137,16],[139,14,137,20],[139,15,137,21,"running"],[139,22,137,28],[139,25,137,31],[139,30,137,36],[140,8,138,12],[141,6,139,8],[142,4,140,4],[143,4,141,4],[144,0,142,0],[145,0,143,0],[146,4,144,4,"isRunning"],[146,13,144,13,"isRunning"],[146,14,144,13],[146,16,144,16],[147,6,145,8],[147,13,145,15],[147,17,145,19],[147,18,145,20,"running"],[147,25,145,27],[148,4,146,4],[149,4,147,4],[150,0,148,0],[151,0,149,0],[152,0,150,0],[153,4,151,4,"ref"],[153,7,151,7,"ref"],[153,8,151,7],[153,10,151,10],[154,6,152,8],[154,10,152,12,"_a"],[154,12,152,14],[154,14,152,16,"_b"],[154,16,152,18],[155,6,153,8],[155,10,153,12],[155,11,153,13,"hasRef"],[155,17,153,19],[155,20,153,22],[155,24,153,26],[156,6,154,8],[156,7,154,9,"_b"],[156,9,154,11],[156,12,154,14],[156,13,154,15,"_a"],[156,15,154,17],[156,18,154,20],[156,22,154,24],[156,23,154,25,"timerId"],[156,30,154,32],[156,32,154,34,"ref"],[156,35,154,37],[156,41,154,43],[156,45,154,47],[156,49,154,51,"_b"],[156,51,154,53],[156,56,154,58],[156,61,154,63],[156,62,154,64],[156,65,154,67],[156,70,154,72],[156,71,154,73],[156,74,154,76,"_b"],[156,76,154,78],[156,77,154,79,"call"],[156,81,154,83],[156,82,154,84,"_a"],[156,84,154,86],[156,85,154,87],[157,4,155,4],[158,4,156,4],[159,0,157,0],[160,0,158,0],[161,0,159,0],[162,4,160,4,"unref"],[162,9,160,9,"unref"],[162,10,160,9],[162,12,160,12],[163,6,161,8],[163,10,161,12,"_a"],[163,12,161,14],[163,14,161,16,"_b"],[163,16,161,18],[164,6,162,8],[164,10,162,12],[164,11,162,13,"hasRef"],[164,17,162,19],[164,20,162,22],[164,25,162,27],[165,6,163,8],[165,7,163,9,"_b"],[165,9,163,11],[165,12,163,14],[165,13,163,15,"_a"],[165,15,163,17],[165,18,163,20],[165,22,163,24],[165,23,163,25,"timerId"],[165,30,163,32],[165,32,163,34,"unref"],[165,37,163,39],[165,43,163,45],[165,47,163,49],[165,51,163,53,"_b"],[165,53,163,55],[165,58,163,60],[165,63,163,65],[165,64,163,66],[165,67,163,69],[165,72,163,74],[165,73,163,75],[165,76,163,78,"_b"],[165,78,163,80],[165,79,163,81,"call"],[165,83,163,85],[165,84,163,86,"_a"],[165,86,163,88],[165,87,163,89],[166,4,164,4],[167,4,165,4],[168,0,166,0],[169,0,167,0],[170,0,168,0],[171,4,169,4,"getEndTime"],[171,14,169,14,"getEndTime"],[171,15,169,14],[171,17,169,17],[172,6,170,8],[172,13,170,15],[172,17,170,19],[172,18,170,20,"endTime"],[172,25,170,27],[173,4,171,4],[174,2,172,0],[175,2,173,0,"exports"],[175,9,173,7],[175,10,173,8,"BackoffTimeout"],[175,24,173,22],[175,27,173,25,"BackoffTimeout"],[175,41,173,39],[176,0,173,40],[176,3]],"functionMap":{"names":["<global>","uniformRandom","BackoffTimeout","BackoffTimeout#constructor","setTimeout$argument_0","BackoffTimeout#runTimer","BackoffTimeout#runOnce","BackoffTimeout#stop","BackoffTimeout#reset","BackoffTimeout#isRunning","BackoffTimeout#ref","BackoffTimeout#unref","BackoffTimeout#getEndTime"],"mappings":"AAA;AC4B;CDE;AEC;ICC;kCCqD,SD;KDE;IGC;kCDK;SCG;KHI;III;KJQ;IKK;KLG;IMK;KNc;IOI;KPE;IQK;KRI;ISK;KTI;IUK;KVE;CFC"}},"type":"js/module"}]}