{"dependencies":[{"name":"events","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":17,"index":867},"end":{"line":20,"column":34,"index":884}}],"key":"JsYPPZbiyTKGtgYi4nFi37XasmQ=","exportNames":["*"]}},{"name":"http2","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":14,"index":900},"end":{"line":21,"column":30,"index":916}}],"key":"WKuN0F718gcZyS964HY1gY6JsO4=","exportNames":["*"]}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":17,"index":935},"end":{"line":22,"column":34,"index":952}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}},{"name":"zlib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":13,"index":967},"end":{"line":23,"column":28,"index":982}}],"key":"7ZGzBJgs2mS8aYt35oOcBHDVVuM=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":20,"index":1004},"end":{"line":24,"column":42,"index":1026}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./metadata","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":25,"column":19,"index":1047},"end":{"line":25,"column":40,"index":1068}}],"key":"6KRjstwF8yWfkztxpqnIypQq1mI=","exportNames":["*"]}},{"name":"./stream-decoder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":26,"column":25,"index":1095},"end":{"line":26,"column":52,"index":1122}}],"key":"QDDUhvuNr0HVtHup4sB+7Geys24=","exportNames":["*"]}},{"name":"./logging","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":16,"index":1140},"end":{"line":27,"column":36,"index":1160}}],"key":"IuCQ7u+XFj9mcNQiMAuOpQn/EDM=","exportNames":["*"]}},{"name":"./error","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":28,"column":16,"index":1178},"end":{"line":28,"column":34,"index":1196}}],"key":"ABL1W5lBwNEqpjG9q/KVa7squiQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Http2ServerCallStream = exports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\n  const events_1 = require(_dependencyMap[0], \"events\");\n  const http2 = require(_dependencyMap[1], \"http2\");\n  const stream_1 = require(_dependencyMap[2], \"stream\");\n  const zlib = require(_dependencyMap[3], \"zlib\");\n  const constants_1 = require(_dependencyMap[4], \"./constants\");\n  const metadata_1 = require(_dependencyMap[5], \"./metadata\");\n  const stream_decoder_1 = require(_dependencyMap[6], \"./stream-decoder\");\n  const logging = require(_dependencyMap[7], \"./logging\");\n  const error_1 = require(_dependencyMap[8], \"./error\");\n  const TRACER_NAME = 'server_call';\n  function trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n  }\n  const GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\n  const GRPC_ENCODING_HEADER = 'grpc-encoding';\n  const GRPC_MESSAGE_HEADER = 'grpc-message';\n  const GRPC_STATUS_HEADER = 'grpc-status';\n  const GRPC_TIMEOUT_HEADER = 'grpc-timeout';\n  const DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\n  const deadlineUnitsToMs = {\n    H: 3600000,\n    M: 60000,\n    S: 1000,\n    m: 1,\n    u: 0.001,\n    n: 0.000001\n  };\n  const defaultCompressionHeaders = {\n    // TODO(cjihrig): Remove these encoding headers from the default response\n    // once compression is integrated.\n    [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\n    [GRPC_ENCODING_HEADER]: 'identity'\n  };\n  const defaultResponseHeaders = {\n    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto'\n  };\n  const defaultResponseOptions = {\n    waitForTrailers: true\n  };\n  class ServerUnaryCallImpl extends events_1.EventEmitter {\n    constructor(call, metadata, request) {\n      super();\n      this.call = call;\n      this.metadata = metadata;\n      this.request = request;\n      this.cancelled = false;\n      this.call.setupSurfaceCall(this);\n    }\n    getPeer() {\n      return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n      this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n      return this.call.getDeadline();\n    }\n    getPath() {\n      return this.call.getPath();\n    }\n  }\n  exports.ServerUnaryCallImpl = ServerUnaryCallImpl;\n  class ServerReadableStreamImpl extends stream_1.Readable {\n    constructor(call, metadata, deserialize, encoding) {\n      super({\n        objectMode: true\n      });\n      this.call = call;\n      this.metadata = metadata;\n      this.deserialize = deserialize;\n      this.cancelled = false;\n      this.call.setupSurfaceCall(this);\n      this.call.setupReadable(this, encoding);\n    }\n    _read(size) {\n      if (!this.call.consumeUnpushedMessages(this)) {\n        return;\n      }\n      this.call.resume();\n    }\n    getPeer() {\n      return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n      this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n      return this.call.getDeadline();\n    }\n    getPath() {\n      return this.call.getPath();\n    }\n  }\n  exports.ServerReadableStreamImpl = ServerReadableStreamImpl;\n  class ServerWritableStreamImpl extends stream_1.Writable {\n    constructor(call, metadata, serialize, request) {\n      super({\n        objectMode: true\n      });\n      this.call = call;\n      this.metadata = metadata;\n      this.serialize = serialize;\n      this.request = request;\n      this.cancelled = false;\n      this.trailingMetadata = new metadata_1.Metadata();\n      this.call.setupSurfaceCall(this);\n      this.on('error', err => {\n        this.call.sendError(err);\n        this.end();\n      });\n    }\n    getPeer() {\n      return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n      this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n      return this.call.getDeadline();\n    }\n    getPath() {\n      return this.call.getPath();\n    }\n    _write(chunk, encoding,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n      try {\n        const response = this.call.serializeMessage(chunk);\n        if (!this.call.write(response)) {\n          this.call.once('drain', callback);\n          return;\n        }\n      } catch (err) {\n        this.emit('error', {\n          details: (0, error_1.getErrorMessage)(err),\n          code: constants_1.Status.INTERNAL\n        });\n      }\n      callback();\n    }\n    _final(callback) {\n      this.call.sendStatus({\n        code: constants_1.Status.OK,\n        details: 'OK',\n        metadata: this.trailingMetadata\n      });\n      callback(null);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n      if (metadata) {\n        this.trailingMetadata = metadata;\n      }\n      return super.end();\n    }\n  }\n  exports.ServerWritableStreamImpl = ServerWritableStreamImpl;\n  class ServerDuplexStreamImpl extends stream_1.Duplex {\n    constructor(call, metadata, serialize, deserialize, encoding) {\n      super({\n        objectMode: true\n      });\n      this.call = call;\n      this.metadata = metadata;\n      this.serialize = serialize;\n      this.deserialize = deserialize;\n      this.cancelled = false;\n      this.trailingMetadata = new metadata_1.Metadata();\n      this.call.setupSurfaceCall(this);\n      this.call.setupReadable(this, encoding);\n      this.on('error', err => {\n        this.call.sendError(err);\n        this.end();\n      });\n    }\n    getPeer() {\n      return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n      this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n      return this.call.getDeadline();\n    }\n    getPath() {\n      return this.call.getPath();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n      if (metadata) {\n        this.trailingMetadata = metadata;\n      }\n      return super.end();\n    }\n  }\n  exports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\n  ServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;\n  ServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;\n  ServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;\n  // Internal class that wraps the HTTP2 request.\n  class Http2ServerCallStream extends events_1.EventEmitter {\n    constructor(stream, handler, options) {\n      super();\n      this.stream = stream;\n      this.handler = handler;\n      this.cancelled = false;\n      this.deadlineTimer = null;\n      this.statusSent = false;\n      this.deadline = Infinity;\n      this.wantTrailers = false;\n      this.metadataSent = false;\n      this.canPush = false;\n      this.isPushPending = false;\n      this.bufferedMessages = [];\n      this.messagesToPush = [];\n      this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n      this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n      this.stream.once('error', err => {\n        /* We need an error handler to avoid uncaught error event exceptions, but\n         * there is nothing we can reasonably do here. Any error event should\n         * have a corresponding close event, which handles emitting the cancelled\n         * event. And the stream is now in a bad state, so we can't reasonably\n         * expect to be able to send an error over it. */\n      });\n      this.stream.once('close', () => {\n        var _a;\n        trace('Request to method ' + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + ' stream closed with rstCode ' + this.stream.rstCode);\n        if (!this.statusSent) {\n          this.cancelled = true;\n          this.emit('cancelled', 'cancelled');\n          this.emit('streamEnd', false);\n          this.sendStatus({\n            code: constants_1.Status.CANCELLED,\n            details: 'Cancelled by client',\n            metadata: null\n          });\n          if (this.deadlineTimer) clearTimeout(this.deadlineTimer);\n        }\n      });\n      this.stream.on('drain', () => {\n        this.emit('drain');\n      });\n      if ('grpc.max_send_message_length' in options) {\n        this.maxSendMessageSize = options['grpc.max_send_message_length'];\n      }\n      if ('grpc.max_receive_message_length' in options) {\n        this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n      }\n    }\n    checkCancelled() {\n      /* In some cases the stream can become destroyed before the close event\n       * fires. That creates a race condition that this check works around */\n      if (this.stream.destroyed || this.stream.closed) {\n        this.cancelled = true;\n      }\n      return this.cancelled;\n    }\n    getDecompressedMessage(message, encoding) {\n      const messageContents = message.subarray(5);\n      if (encoding === 'identity') {\n        return messageContents;\n      } else if (encoding === 'deflate' || encoding === 'gzip') {\n        let decompresser;\n        if (encoding === 'deflate') {\n          decompresser = zlib.createInflate();\n        } else {\n          decompresser = zlib.createGunzip();\n        }\n        return new Promise((resolve, reject) => {\n          let totalLength = 0;\n          const messageParts = [];\n          decompresser.on('data', chunk => {\n            messageParts.push(chunk);\n            totalLength += chunk.byteLength;\n            if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {\n              decompresser.destroy();\n              reject({\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`\n              });\n            }\n          });\n          decompresser.on('end', () => {\n            resolve(Buffer.concat(messageParts));\n          });\n          decompresser.write(messageContents);\n          decompresser.end();\n        });\n      } else {\n        return Promise.reject({\n          code: constants_1.Status.UNIMPLEMENTED,\n          details: `Received message compressed with unsupported encoding \"${encoding}\"`\n        });\n      }\n    }\n    sendMetadata(customMetadata) {\n      if (this.checkCancelled()) {\n        return;\n      }\n      if (this.metadataSent) {\n        return;\n      }\n      this.metadataSent = true;\n      const custom = customMetadata ? customMetadata.toHttp2Headers() : null;\n      // TODO(cjihrig): Include compression headers.\n      const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);\n      this.stream.respond(headers, defaultResponseOptions);\n    }\n    receiveMetadata(headers) {\n      const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n      if (logging.isTracerEnabled(TRACER_NAME)) {\n        trace('Request to ' + this.handler.path + ' received headers ' + JSON.stringify(metadata.toJSON()));\n      }\n      // TODO(cjihrig): Receive compression metadata.\n      const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n      if (timeoutHeader.length > 0) {\n        const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);\n        if (match === null) {\n          const err = new Error('Invalid deadline');\n          err.code = constants_1.Status.OUT_OF_RANGE;\n          this.sendError(err);\n          return metadata;\n        }\n        const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;\n        const now = new Date();\n        this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n        this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);\n        metadata.remove(GRPC_TIMEOUT_HEADER);\n      }\n      // Remove several headers that should not be propagated to the application\n      metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n      metadata.remove(http2.constants.HTTP2_HEADER_TE);\n      metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n      metadata.remove('grpc-accept-encoding');\n      return metadata;\n    }\n    receiveUnaryMessage(encoding) {\n      return new Promise((resolve, reject) => {\n        const {\n          stream\n        } = this;\n        let receivedLength = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const call = this;\n        const body = [];\n        const limit = this.maxReceiveMessageSize;\n        this.stream.on('data', onData);\n        this.stream.on('end', onEnd);\n        this.stream.on('error', onEnd);\n        function onData(chunk) {\n          receivedLength += chunk.byteLength;\n          if (limit !== -1 && receivedLength > limit) {\n            stream.removeListener('data', onData);\n            stream.removeListener('end', onEnd);\n            stream.removeListener('error', onEnd);\n            reject({\n              code: constants_1.Status.RESOURCE_EXHAUSTED,\n              details: `Received message larger than max (${receivedLength} vs. ${limit})`\n            });\n            return;\n          }\n          body.push(chunk);\n        }\n        function onEnd(err) {\n          stream.removeListener('data', onData);\n          stream.removeListener('end', onEnd);\n          stream.removeListener('error', onEnd);\n          if (err !== undefined) {\n            reject({\n              code: constants_1.Status.INTERNAL,\n              details: err.message\n            });\n            return;\n          }\n          if (receivedLength === 0) {\n            reject({\n              code: constants_1.Status.INTERNAL,\n              details: 'received empty unary message'\n            });\n            return;\n          }\n          call.emit('receiveMessage');\n          const requestBytes = Buffer.concat(body, receivedLength);\n          const compressed = requestBytes.readUInt8(0) === 1;\n          const compressedMessageEncoding = compressed ? encoding : 'identity';\n          const decompressedMessage = call.getDecompressedMessage(requestBytes, compressedMessageEncoding);\n          if (Buffer.isBuffer(decompressedMessage)) {\n            resolve(call.deserializeMessageWithInternalError(decompressedMessage));\n            return;\n          }\n          decompressedMessage.then(decompressed => resolve(call.deserializeMessageWithInternalError(decompressed)), err => reject(err.code ? err : {\n            code: constants_1.Status.INTERNAL,\n            details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`\n          }));\n        }\n      });\n    }\n    async deserializeMessageWithInternalError(buffer) {\n      try {\n        return this.deserializeMessage(buffer);\n      } catch (err) {\n        throw {\n          details: (0, error_1.getErrorMessage)(err),\n          code: constants_1.Status.INTERNAL\n        };\n      }\n    }\n    serializeMessage(value) {\n      const messageBuffer = this.handler.serialize(value);\n      // TODO(cjihrig): Call compression aware serializeMessage().\n      const byteLength = messageBuffer.byteLength;\n      const output = Buffer.allocUnsafe(byteLength + 5);\n      output.writeUInt8(0, 0);\n      output.writeUInt32BE(byteLength, 1);\n      messageBuffer.copy(output, 5);\n      return output;\n    }\n    deserializeMessage(bytes) {\n      return this.handler.deserialize(bytes);\n    }\n    async sendUnaryMessage(err, value, metadata, flags) {\n      if (this.checkCancelled()) {\n        return;\n      }\n      if (metadata === undefined) {\n        metadata = null;\n      }\n      if (err) {\n        if (!Object.prototype.hasOwnProperty.call(err, 'metadata') && metadata) {\n          err.metadata = metadata;\n        }\n        this.sendError(err);\n        return;\n      }\n      try {\n        const response = this.serializeMessage(value);\n        this.write(response);\n        this.sendStatus({\n          code: constants_1.Status.OK,\n          details: 'OK',\n          metadata\n        });\n      } catch (err) {\n        this.sendError({\n          details: (0, error_1.getErrorMessage)(err),\n          code: constants_1.Status.INTERNAL\n        });\n      }\n    }\n    sendStatus(statusObj) {\n      var _a, _b;\n      this.emit('callEnd', statusObj.code);\n      this.emit('streamEnd', statusObj.code === constants_1.Status.OK);\n      if (this.checkCancelled()) {\n        return;\n      }\n      trace('Request to method ' + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + ' ended with status code: ' + constants_1.Status[statusObj.code] + ' details: ' + statusObj.details);\n      if (this.deadlineTimer) clearTimeout(this.deadlineTimer);\n      if (this.stream.headersSent) {\n        if (!this.wantTrailers) {\n          this.wantTrailers = true;\n          this.stream.once('wantTrailers', () => {\n            var _a;\n            const trailersToSend = Object.assign({\n              [GRPC_STATUS_HEADER]: statusObj.code,\n              [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)\n            }, (_a = statusObj.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\n            this.stream.sendTrailers(trailersToSend);\n            this.statusSent = true;\n          });\n          this.stream.end();\n        }\n      } else {\n        // Trailers-only response\n        const trailersToSend = Object.assign(Object.assign({\n          [GRPC_STATUS_HEADER]: statusObj.code,\n          [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)\n        }, defaultResponseHeaders), (_b = statusObj.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());\n        this.stream.respond(trailersToSend, {\n          endStream: true\n        });\n        this.statusSent = true;\n      }\n    }\n    sendError(error) {\n      const status = {\n        code: constants_1.Status.UNKNOWN,\n        details: 'message' in error ? error.message : 'Unknown Error',\n        metadata: 'metadata' in error && error.metadata !== undefined ? error.metadata : null\n      };\n      if ('code' in error && typeof error.code === 'number' && Number.isInteger(error.code)) {\n        status.code = error.code;\n        if ('details' in error && typeof error.details === 'string') {\n          status.details = error.details;\n        }\n      }\n      this.sendStatus(status);\n    }\n    write(chunk) {\n      if (this.checkCancelled()) {\n        return;\n      }\n      if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {\n        this.sendError({\n          code: constants_1.Status.RESOURCE_EXHAUSTED,\n          details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`\n        });\n        return;\n      }\n      this.sendMetadata();\n      this.emit('sendMessage');\n      return this.stream.write(chunk);\n    }\n    resume() {\n      this.stream.resume();\n    }\n    setupSurfaceCall(call) {\n      this.once('cancelled', reason => {\n        call.cancelled = true;\n        call.emit('cancelled', reason);\n      });\n      this.once('callEnd', status => call.emit('callEnd', status));\n    }\n    setupReadable(readable, encoding) {\n      const decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);\n      let readsDone = false;\n      let pendingMessageProcessing = false;\n      let pushedEnd = false;\n      const maybePushEnd = async () => {\n        if (!pushedEnd && readsDone && !pendingMessageProcessing) {\n          pushedEnd = true;\n          await this.pushOrBufferMessage(readable, null);\n        }\n      };\n      this.stream.on('data', async data => {\n        let messages;\n        try {\n          messages = decoder.write(data);\n        } catch (e) {\n          this.sendError({\n            code: constants_1.Status.RESOURCE_EXHAUSTED,\n            details: e.message\n          });\n          return;\n        }\n        pendingMessageProcessing = true;\n        this.stream.pause();\n        for (const message of messages) {\n          this.emit('receiveMessage');\n          const compressed = message.readUInt8(0) === 1;\n          const compressedMessageEncoding = compressed ? encoding : 'identity';\n          let decompressedMessage;\n          try {\n            decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding);\n          } catch (e) {\n            this.sendError(e);\n            return;\n          }\n          // Encountered an error with decompression; it'll already have been propogated back\n          // Just return early\n          if (!decompressedMessage) return;\n          await this.pushOrBufferMessage(readable, decompressedMessage);\n        }\n        pendingMessageProcessing = false;\n        this.stream.resume();\n        await maybePushEnd();\n      });\n      this.stream.once('end', async () => {\n        readsDone = true;\n        await maybePushEnd();\n      });\n    }\n    consumeUnpushedMessages(readable) {\n      this.canPush = true;\n      while (this.messagesToPush.length > 0) {\n        const nextMessage = this.messagesToPush.shift();\n        const canPush = readable.push(nextMessage);\n        if (nextMessage === null || canPush === false) {\n          this.canPush = false;\n          break;\n        }\n      }\n      return this.canPush;\n    }\n    async pushOrBufferMessage(readable, messageBytes) {\n      if (this.isPushPending) {\n        this.bufferedMessages.push(messageBytes);\n      } else {\n        await this.pushMessage(readable, messageBytes);\n      }\n    }\n    async pushMessage(readable, messageBytes) {\n      if (messageBytes === null) {\n        trace('Received end of stream');\n        if (this.canPush) {\n          readable.push(null);\n        } else {\n          this.messagesToPush.push(null);\n        }\n        return;\n      }\n      trace('Received message of length ' + messageBytes.length);\n      this.isPushPending = true;\n      try {\n        const deserialized = await this.deserializeMessage(messageBytes);\n        if (this.canPush) {\n          if (!readable.push(deserialized)) {\n            this.canPush = false;\n            this.stream.pause();\n          }\n        } else {\n          this.messagesToPush.push(deserialized);\n        }\n      } catch (error) {\n        // Ignore any remaining messages when errors occur.\n        this.bufferedMessages.length = 0;\n        let code = (0, error_1.getErrorCode)(error);\n        if (code === null || code < constants_1.Status.OK || code > constants_1.Status.UNAUTHENTICATED) {\n          code = constants_1.Status.INTERNAL;\n        }\n        readable.emit('error', {\n          details: (0, error_1.getErrorMessage)(error),\n          code: code\n        });\n      }\n      this.isPushPending = false;\n      if (this.bufferedMessages.length > 0) {\n        await this.pushMessage(readable, this.bufferedMessages.shift());\n      }\n    }\n    getPeer() {\n      var _a;\n      const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;\n      if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {\n        if (socket.remotePort) {\n          return `${socket.remoteAddress}:${socket.remotePort}`;\n        } else {\n          return socket.remoteAddress;\n        }\n      } else {\n        return 'unknown';\n      }\n    }\n    getDeadline() {\n      return this.deadline;\n    }\n    getPath() {\n      return this.handler.path;\n    }\n  }\n  exports.Http2ServerCallStream = Http2ServerCallStream;\n  function handleExpiredDeadline(call) {\n    const err = new Error('Deadline exceeded');\n    err.code = constants_1.Status.DEADLINE_EXCEEDED;\n    call.sendError(err);\n    call.cancelled = true;\n    call.emit('cancelled', 'deadline');\n  }\n});","lineCount":683,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"Http2ServerCallStream"],[23,31,19,29],[23,34,19,32,"exports"],[23,41,19,39],[23,42,19,40,"ServerDuplexStreamImpl"],[23,64,19,62],[23,67,19,65,"exports"],[23,74,19,72],[23,75,19,73,"ServerWritableStreamImpl"],[23,99,19,97],[23,102,19,100,"exports"],[23,109,19,107],[23,110,19,108,"ServerReadableStreamImpl"],[23,134,19,132],[23,137,19,135,"exports"],[23,144,19,142],[23,145,19,143,"ServerUnaryCallImpl"],[23,164,19,162],[23,167,19,165],[23,172,19,170],[23,173,19,171],[24,2,20,0],[24,8,20,6,"events_1"],[24,16,20,14],[24,19,20,17,"require"],[24,26,20,24],[24,27,20,24,"_dependencyMap"],[24,41,20,24],[24,54,20,33],[24,55,20,34],[25,2,21,0],[25,8,21,6,"http2"],[25,13,21,11],[25,16,21,14,"require"],[25,23,21,21],[25,24,21,21,"_dependencyMap"],[25,38,21,21],[25,50,21,29],[25,51,21,30],[26,2,22,0],[26,8,22,6,"stream_1"],[26,16,22,14],[26,19,22,17,"require"],[26,26,22,24],[26,27,22,24,"_dependencyMap"],[26,41,22,24],[26,54,22,33],[26,55,22,34],[27,2,23,0],[27,8,23,6,"zlib"],[27,12,23,10],[27,15,23,13,"require"],[27,22,23,20],[27,23,23,20,"_dependencyMap"],[27,37,23,20],[27,48,23,27],[27,49,23,28],[28,2,24,0],[28,8,24,6,"constants_1"],[28,19,24,17],[28,22,24,20,"require"],[28,29,24,27],[28,30,24,27,"_dependencyMap"],[28,44,24,27],[28,62,24,41],[28,63,24,42],[29,2,25,0],[29,8,25,6,"metadata_1"],[29,18,25,16],[29,21,25,19,"require"],[29,28,25,26],[29,29,25,26,"_dependencyMap"],[29,43,25,26],[29,60,25,39],[29,61,25,40],[30,2,26,0],[30,8,26,6,"stream_decoder_1"],[30,24,26,22],[30,27,26,25,"require"],[30,34,26,32],[30,35,26,32,"_dependencyMap"],[30,49,26,32],[30,72,26,51],[30,73,26,52],[31,2,27,0],[31,8,27,6,"logging"],[31,15,27,13],[31,18,27,16,"require"],[31,25,27,23],[31,26,27,23,"_dependencyMap"],[31,40,27,23],[31,56,27,35],[31,57,27,36],[32,2,28,0],[32,8,28,6,"error_1"],[32,15,28,13],[32,18,28,16,"require"],[32,25,28,23],[32,26,28,23,"_dependencyMap"],[32,40,28,23],[32,54,28,33],[32,55,28,34],[33,2,29,0],[33,8,29,6,"TRACER_NAME"],[33,19,29,17],[33,22,29,20],[33,35,29,33],[34,2,30,0],[34,11,30,9,"trace"],[34,16,30,14,"trace"],[34,17,30,15,"text"],[34,21,30,19],[34,23,30,21],[35,4,31,4,"logging"],[35,11,31,11],[35,12,31,12,"trace"],[35,17,31,17],[35,18,31,18,"constants_1"],[35,29,31,29],[35,30,31,30,"LogVerbosity"],[35,42,31,42],[35,43,31,43,"DEBUG"],[35,48,31,48],[35,50,31,50,"TRACER_NAME"],[35,61,31,61],[35,63,31,63,"text"],[35,67,31,67],[35,68,31,68],[36,2,32,0],[37,2,33,0],[37,8,33,6,"GRPC_ACCEPT_ENCODING_HEADER"],[37,35,33,33],[37,38,33,36],[37,60,33,58],[38,2,34,0],[38,8,34,6,"GRPC_ENCODING_HEADER"],[38,28,34,26],[38,31,34,29],[38,46,34,44],[39,2,35,0],[39,8,35,6,"GRPC_MESSAGE_HEADER"],[39,27,35,25],[39,30,35,28],[39,44,35,42],[40,2,36,0],[40,8,36,6,"GRPC_STATUS_HEADER"],[40,26,36,24],[40,29,36,27],[40,42,36,40],[41,2,37,0],[41,8,37,6,"GRPC_TIMEOUT_HEADER"],[41,27,37,25],[41,30,37,28],[41,44,37,42],[42,2,38,0],[42,8,38,6,"DEADLINE_REGEX"],[42,22,38,20],[42,25,38,23],[42,49,38,47],[43,2,39,0],[43,8,39,6,"deadlineUnitsToMs"],[43,25,39,23],[43,28,39,26],[44,4,40,4,"H"],[44,5,40,5],[44,7,40,7],[44,14,40,14],[45,4,41,4,"M"],[45,5,41,5],[45,7,41,7],[45,12,41,12],[46,4,42,4,"S"],[46,5,42,5],[46,7,42,7],[46,11,42,11],[47,4,43,4,"m"],[47,5,43,5],[47,7,43,7],[47,8,43,8],[48,4,44,4,"u"],[48,5,44,5],[48,7,44,7],[48,12,44,12],[49,4,45,4,"n"],[49,5,45,5],[49,7,45,7],[50,2,46,0],[50,3,46,1],[51,2,47,0],[51,8,47,6,"defaultCompressionHeaders"],[51,33,47,31],[51,36,47,34],[52,4,48,4],[53,4,49,4],[54,4,50,4],[54,5,50,5,"GRPC_ACCEPT_ENCODING_HEADER"],[54,32,50,32],[54,35,50,35],[54,58,50,58],[55,4,51,4],[55,5,51,5,"GRPC_ENCODING_HEADER"],[55,25,51,25],[55,28,51,28],[56,2,52,0],[56,3,52,1],[57,2,53,0],[57,8,53,6,"defaultResponseHeaders"],[57,30,53,28],[57,33,53,31],[58,4,54,4],[58,5,54,5,"http2"],[58,10,54,10],[58,11,54,11,"constants"],[58,20,54,20],[58,21,54,21,"HTTP2_HEADER_STATUS"],[58,40,54,40],[58,43,54,43,"http2"],[58,48,54,48],[58,49,54,49,"constants"],[58,58,54,58],[58,59,54,59,"HTTP_STATUS_OK"],[58,73,54,73],[59,4,55,4],[59,5,55,5,"http2"],[59,10,55,10],[59,11,55,11,"constants"],[59,20,55,20],[59,21,55,21,"HTTP2_HEADER_CONTENT_TYPE"],[59,46,55,46],[59,49,55,49],[60,2,56,0],[60,3,56,1],[61,2,57,0],[61,8,57,6,"defaultResponseOptions"],[61,30,57,28],[61,33,57,31],[62,4,58,4,"waitForTrailers"],[62,19,58,19],[62,21,58,21],[63,2,59,0],[63,3,59,1],[64,2,60,0],[64,8,60,6,"ServerUnaryCallImpl"],[64,27,60,25],[64,36,60,34,"events_1"],[64,44,60,42],[64,45,60,43,"EventEmitter"],[64,57,60,55],[64,58,60,56],[65,4,61,4,"constructor"],[65,15,61,15,"constructor"],[65,16,61,16,"call"],[65,20,61,20],[65,22,61,22,"metadata"],[65,30,61,30],[65,32,61,32,"request"],[65,39,61,39],[65,41,61,41],[66,6,62,8],[66,11,62,13],[66,12,62,14],[66,13,62,15],[67,6,63,8],[67,10,63,12],[67,11,63,13,"call"],[67,15,63,17],[67,18,63,20,"call"],[67,22,63,24],[68,6,64,8],[68,10,64,12],[68,11,64,13,"metadata"],[68,19,64,21],[68,22,64,24,"metadata"],[68,30,64,32],[69,6,65,8],[69,10,65,12],[69,11,65,13,"request"],[69,18,65,20],[69,21,65,23,"request"],[69,28,65,30],[70,6,66,8],[70,10,66,12],[70,11,66,13,"cancelled"],[70,20,66,22],[70,23,66,25],[70,28,66,30],[71,6,67,8],[71,10,67,12],[71,11,67,13,"call"],[71,15,67,17],[71,16,67,18,"setupSurfaceCall"],[71,32,67,34],[71,33,67,35],[71,37,67,39],[71,38,67,40],[72,4,68,4],[73,4,69,4,"getPeer"],[73,11,69,11,"getPeer"],[73,12,69,11],[73,14,69,14],[74,6,70,8],[74,13,70,15],[74,17,70,19],[74,18,70,20,"call"],[74,22,70,24],[74,23,70,25,"getPeer"],[74,30,70,32],[74,31,70,33],[74,32,70,34],[75,4,71,4],[76,4,72,4,"sendMetadata"],[76,16,72,16,"sendMetadata"],[76,17,72,17,"responseMetadata"],[76,33,72,33],[76,35,72,35],[77,6,73,8],[77,10,73,12],[77,11,73,13,"call"],[77,15,73,17],[77,16,73,18,"sendMetadata"],[77,28,73,30],[77,29,73,31,"responseMetadata"],[77,45,73,47],[77,46,73,48],[78,4,74,4],[79,4,75,4,"getDeadline"],[79,15,75,15,"getDeadline"],[79,16,75,15],[79,18,75,18],[80,6,76,8],[80,13,76,15],[80,17,76,19],[80,18,76,20,"call"],[80,22,76,24],[80,23,76,25,"getDeadline"],[80,34,76,36],[80,35,76,37],[80,36,76,38],[81,4,77,4],[82,4,78,4,"getPath"],[82,11,78,11,"getPath"],[82,12,78,11],[82,14,78,14],[83,6,79,8],[83,13,79,15],[83,17,79,19],[83,18,79,20,"call"],[83,22,79,24],[83,23,79,25,"getPath"],[83,30,79,32],[83,31,79,33],[83,32,79,34],[84,4,80,4],[85,2,81,0],[86,2,82,0,"exports"],[86,9,82,7],[86,10,82,8,"ServerUnaryCallImpl"],[86,29,82,27],[86,32,82,30,"ServerUnaryCallImpl"],[86,51,82,49],[87,2,83,0],[87,8,83,6,"ServerReadableStreamImpl"],[87,32,83,30],[87,41,83,39,"stream_1"],[87,49,83,47],[87,50,83,48,"Readable"],[87,58,83,56],[87,59,83,57],[88,4,84,4,"constructor"],[88,15,84,15,"constructor"],[88,16,84,16,"call"],[88,20,84,20],[88,22,84,22,"metadata"],[88,30,84,30],[88,32,84,32,"deserialize"],[88,43,84,43],[88,45,84,45,"encoding"],[88,53,84,53],[88,55,84,55],[89,6,85,8],[89,11,85,13],[89,12,85,14],[90,8,85,16,"objectMode"],[90,18,85,26],[90,20,85,28],[91,6,85,33],[91,7,85,34],[91,8,85,35],[92,6,86,8],[92,10,86,12],[92,11,86,13,"call"],[92,15,86,17],[92,18,86,20,"call"],[92,22,86,24],[93,6,87,8],[93,10,87,12],[93,11,87,13,"metadata"],[93,19,87,21],[93,22,87,24,"metadata"],[93,30,87,32],[94,6,88,8],[94,10,88,12],[94,11,88,13,"deserialize"],[94,22,88,24],[94,25,88,27,"deserialize"],[94,36,88,38],[95,6,89,8],[95,10,89,12],[95,11,89,13,"cancelled"],[95,20,89,22],[95,23,89,25],[95,28,89,30],[96,6,90,8],[96,10,90,12],[96,11,90,13,"call"],[96,15,90,17],[96,16,90,18,"setupSurfaceCall"],[96,32,90,34],[96,33,90,35],[96,37,90,39],[96,38,90,40],[97,6,91,8],[97,10,91,12],[97,11,91,13,"call"],[97,15,91,17],[97,16,91,18,"setupReadable"],[97,29,91,31],[97,30,91,32],[97,34,91,36],[97,36,91,38,"encoding"],[97,44,91,46],[97,45,91,47],[98,4,92,4],[99,4,93,4,"_read"],[99,9,93,9,"_read"],[99,10,93,10,"size"],[99,14,93,14],[99,16,93,16],[100,6,94,8],[100,10,94,12],[100,11,94,13],[100,15,94,17],[100,16,94,18,"call"],[100,20,94,22],[100,21,94,23,"consumeUnpushedMessages"],[100,44,94,46],[100,45,94,47],[100,49,94,51],[100,50,94,52],[100,52,94,54],[101,8,95,12],[102,6,96,8],[103,6,97,8],[103,10,97,12],[103,11,97,13,"call"],[103,15,97,17],[103,16,97,18,"resume"],[103,22,97,24],[103,23,97,25],[103,24,97,26],[104,4,98,4],[105,4,99,4,"getPeer"],[105,11,99,11,"getPeer"],[105,12,99,11],[105,14,99,14],[106,6,100,8],[106,13,100,15],[106,17,100,19],[106,18,100,20,"call"],[106,22,100,24],[106,23,100,25,"getPeer"],[106,30,100,32],[106,31,100,33],[106,32,100,34],[107,4,101,4],[108,4,102,4,"sendMetadata"],[108,16,102,16,"sendMetadata"],[108,17,102,17,"responseMetadata"],[108,33,102,33],[108,35,102,35],[109,6,103,8],[109,10,103,12],[109,11,103,13,"call"],[109,15,103,17],[109,16,103,18,"sendMetadata"],[109,28,103,30],[109,29,103,31,"responseMetadata"],[109,45,103,47],[109,46,103,48],[110,4,104,4],[111,4,105,4,"getDeadline"],[111,15,105,15,"getDeadline"],[111,16,105,15],[111,18,105,18],[112,6,106,8],[112,13,106,15],[112,17,106,19],[112,18,106,20,"call"],[112,22,106,24],[112,23,106,25,"getDeadline"],[112,34,106,36],[112,35,106,37],[112,36,106,38],[113,4,107,4],[114,4,108,4,"getPath"],[114,11,108,11,"getPath"],[114,12,108,11],[114,14,108,14],[115,6,109,8],[115,13,109,15],[115,17,109,19],[115,18,109,20,"call"],[115,22,109,24],[115,23,109,25,"getPath"],[115,30,109,32],[115,31,109,33],[115,32,109,34],[116,4,110,4],[117,2,111,0],[118,2,112,0,"exports"],[118,9,112,7],[118,10,112,8,"ServerReadableStreamImpl"],[118,34,112,32],[118,37,112,35,"ServerReadableStreamImpl"],[118,61,112,59],[119,2,113,0],[119,8,113,6,"ServerWritableStreamImpl"],[119,32,113,30],[119,41,113,39,"stream_1"],[119,49,113,47],[119,50,113,48,"Writable"],[119,58,113,56],[119,59,113,57],[120,4,114,4,"constructor"],[120,15,114,15,"constructor"],[120,16,114,16,"call"],[120,20,114,20],[120,22,114,22,"metadata"],[120,30,114,30],[120,32,114,32,"serialize"],[120,41,114,41],[120,43,114,43,"request"],[120,50,114,50],[120,52,114,52],[121,6,115,8],[121,11,115,13],[121,12,115,14],[122,8,115,16,"objectMode"],[122,18,115,26],[122,20,115,28],[123,6,115,33],[123,7,115,34],[123,8,115,35],[124,6,116,8],[124,10,116,12],[124,11,116,13,"call"],[124,15,116,17],[124,18,116,20,"call"],[124,22,116,24],[125,6,117,8],[125,10,117,12],[125,11,117,13,"metadata"],[125,19,117,21],[125,22,117,24,"metadata"],[125,30,117,32],[126,6,118,8],[126,10,118,12],[126,11,118,13,"serialize"],[126,20,118,22],[126,23,118,25,"serialize"],[126,32,118,34],[127,6,119,8],[127,10,119,12],[127,11,119,13,"request"],[127,18,119,20],[127,21,119,23,"request"],[127,28,119,30],[128,6,120,8],[128,10,120,12],[128,11,120,13,"cancelled"],[128,20,120,22],[128,23,120,25],[128,28,120,30],[129,6,121,8],[129,10,121,12],[129,11,121,13,"trailingMetadata"],[129,27,121,29],[129,30,121,32],[129,34,121,36,"metadata_1"],[129,44,121,46],[129,45,121,47,"Metadata"],[129,53,121,55],[129,54,121,56],[129,55,121,57],[130,6,122,8],[130,10,122,12],[130,11,122,13,"call"],[130,15,122,17],[130,16,122,18,"setupSurfaceCall"],[130,32,122,34],[130,33,122,35],[130,37,122,39],[130,38,122,40],[131,6,123,8],[131,10,123,12],[131,11,123,13,"on"],[131,13,123,15],[131,14,123,16],[131,21,123,23],[131,23,123,25,"err"],[131,26,123,28],[131,30,123,32],[132,8,124,12],[132,12,124,16],[132,13,124,17,"call"],[132,17,124,21],[132,18,124,22,"sendError"],[132,27,124,31],[132,28,124,32,"err"],[132,31,124,35],[132,32,124,36],[133,8,125,12],[133,12,125,16],[133,13,125,17,"end"],[133,16,125,20],[133,17,125,21],[133,18,125,22],[134,6,126,8],[134,7,126,9],[134,8,126,10],[135,4,127,4],[136,4,128,4,"getPeer"],[136,11,128,11,"getPeer"],[136,12,128,11],[136,14,128,14],[137,6,129,8],[137,13,129,15],[137,17,129,19],[137,18,129,20,"call"],[137,22,129,24],[137,23,129,25,"getPeer"],[137,30,129,32],[137,31,129,33],[137,32,129,34],[138,4,130,4],[139,4,131,4,"sendMetadata"],[139,16,131,16,"sendMetadata"],[139,17,131,17,"responseMetadata"],[139,33,131,33],[139,35,131,35],[140,6,132,8],[140,10,132,12],[140,11,132,13,"call"],[140,15,132,17],[140,16,132,18,"sendMetadata"],[140,28,132,30],[140,29,132,31,"responseMetadata"],[140,45,132,47],[140,46,132,48],[141,4,133,4],[142,4,134,4,"getDeadline"],[142,15,134,15,"getDeadline"],[142,16,134,15],[142,18,134,18],[143,6,135,8],[143,13,135,15],[143,17,135,19],[143,18,135,20,"call"],[143,22,135,24],[143,23,135,25,"getDeadline"],[143,34,135,36],[143,35,135,37],[143,36,135,38],[144,4,136,4],[145,4,137,4,"getPath"],[145,11,137,11,"getPath"],[145,12,137,11],[145,14,137,14],[146,6,138,8],[146,13,138,15],[146,17,138,19],[146,18,138,20,"call"],[146,22,138,24],[146,23,138,25,"getPath"],[146,30,138,32],[146,31,138,33],[146,32,138,34],[147,4,139,4],[148,4,140,4,"_write"],[148,10,140,10,"_write"],[148,11,140,11,"chunk"],[148,16,140,16],[148,18,140,18,"encoding"],[148,26,140,26],[149,4,141,4],[150,4,142,4,"callback"],[150,12,142,12],[150,14,142,14],[151,6,143,8],[151,10,143,12],[152,8,144,12],[152,14,144,18,"response"],[152,22,144,26],[152,25,144,29],[152,29,144,33],[152,30,144,34,"call"],[152,34,144,38],[152,35,144,39,"serializeMessage"],[152,51,144,55],[152,52,144,56,"chunk"],[152,57,144,61],[152,58,144,62],[153,8,145,12],[153,12,145,16],[153,13,145,17],[153,17,145,21],[153,18,145,22,"call"],[153,22,145,26],[153,23,145,27,"write"],[153,28,145,32],[153,29,145,33,"response"],[153,37,145,41],[153,38,145,42],[153,40,145,44],[154,10,146,16],[154,14,146,20],[154,15,146,21,"call"],[154,19,146,25],[154,20,146,26,"once"],[154,24,146,30],[154,25,146,31],[154,32,146,38],[154,34,146,40,"callback"],[154,42,146,48],[154,43,146,49],[155,10,147,16],[156,8,148,12],[157,6,149,8],[157,7,149,9],[157,8,150,8],[157,15,150,15,"err"],[157,18,150,18],[157,20,150,20],[158,8,151,12],[158,12,151,16],[158,13,151,17,"emit"],[158,17,151,21],[158,18,151,22],[158,25,151,29],[158,27,151,31],[159,10,152,16,"details"],[159,17,152,23],[159,19,152,25],[159,20,152,26],[159,21,152,27],[159,23,152,29,"error_1"],[159,30,152,36],[159,31,152,37,"getErrorMessage"],[159,46,152,52],[159,48,152,54,"err"],[159,51,152,57],[159,52,152,58],[160,10,153,16,"code"],[160,14,153,20],[160,16,153,22,"constants_1"],[160,27,153,33],[160,28,153,34,"Status"],[160,34,153,40],[160,35,153,41,"INTERNAL"],[161,8,154,12],[161,9,154,13],[161,10,154,14],[162,6,155,8],[163,6,156,8,"callback"],[163,14,156,16],[163,15,156,17],[163,16,156,18],[164,4,157,4],[165,4,158,4,"_final"],[165,10,158,10,"_final"],[165,11,158,11,"callback"],[165,19,158,19],[165,21,158,21],[166,6,159,8],[166,10,159,12],[166,11,159,13,"call"],[166,15,159,17],[166,16,159,18,"sendStatus"],[166,26,159,28],[166,27,159,29],[167,8,160,12,"code"],[167,12,160,16],[167,14,160,18,"constants_1"],[167,25,160,29],[167,26,160,30,"Status"],[167,32,160,36],[167,33,160,37,"OK"],[167,35,160,39],[168,8,161,12,"details"],[168,15,161,19],[168,17,161,21],[168,21,161,25],[169,8,162,12,"metadata"],[169,16,162,20],[169,18,162,22],[169,22,162,26],[169,23,162,27,"trailingMetadata"],[170,6,163,8],[170,7,163,9],[170,8,163,10],[171,6,164,8,"callback"],[171,14,164,16],[171,15,164,17],[171,19,164,21],[171,20,164,22],[172,4,165,4],[173,4,166,4],[174,4,167,4,"end"],[174,7,167,7,"end"],[174,8,167,8,"metadata"],[174,16,167,16],[174,18,167,18],[175,6,168,8],[175,10,168,12,"metadata"],[175,18,168,20],[175,20,168,22],[176,8,169,12],[176,12,169,16],[176,13,169,17,"trailingMetadata"],[176,29,169,33],[176,32,169,36,"metadata"],[176,40,169,44],[177,6,170,8],[178,6,171,8],[178,13,171,15],[178,18,171,20],[178,19,171,21,"end"],[178,22,171,24],[178,23,171,25],[178,24,171,26],[179,4,172,4],[180,2,173,0],[181,2,174,0,"exports"],[181,9,174,7],[181,10,174,8,"ServerWritableStreamImpl"],[181,34,174,32],[181,37,174,35,"ServerWritableStreamImpl"],[181,61,174,59],[182,2,175,0],[182,8,175,6,"ServerDuplexStreamImpl"],[182,30,175,28],[182,39,175,37,"stream_1"],[182,47,175,45],[182,48,175,46,"Duplex"],[182,54,175,52],[182,55,175,53],[183,4,176,4,"constructor"],[183,15,176,15,"constructor"],[183,16,176,16,"call"],[183,20,176,20],[183,22,176,22,"metadata"],[183,30,176,30],[183,32,176,32,"serialize"],[183,41,176,41],[183,43,176,43,"deserialize"],[183,54,176,54],[183,56,176,56,"encoding"],[183,64,176,64],[183,66,176,66],[184,6,177,8],[184,11,177,13],[184,12,177,14],[185,8,177,16,"objectMode"],[185,18,177,26],[185,20,177,28],[186,6,177,33],[186,7,177,34],[186,8,177,35],[187,6,178,8],[187,10,178,12],[187,11,178,13,"call"],[187,15,178,17],[187,18,178,20,"call"],[187,22,178,24],[188,6,179,8],[188,10,179,12],[188,11,179,13,"metadata"],[188,19,179,21],[188,22,179,24,"metadata"],[188,30,179,32],[189,6,180,8],[189,10,180,12],[189,11,180,13,"serialize"],[189,20,180,22],[189,23,180,25,"serialize"],[189,32,180,34],[190,6,181,8],[190,10,181,12],[190,11,181,13,"deserialize"],[190,22,181,24],[190,25,181,27,"deserialize"],[190,36,181,38],[191,6,182,8],[191,10,182,12],[191,11,182,13,"cancelled"],[191,20,182,22],[191,23,182,25],[191,28,182,30],[192,6,183,8],[192,10,183,12],[192,11,183,13,"trailingMetadata"],[192,27,183,29],[192,30,183,32],[192,34,183,36,"metadata_1"],[192,44,183,46],[192,45,183,47,"Metadata"],[192,53,183,55],[192,54,183,56],[192,55,183,57],[193,6,184,8],[193,10,184,12],[193,11,184,13,"call"],[193,15,184,17],[193,16,184,18,"setupSurfaceCall"],[193,32,184,34],[193,33,184,35],[193,37,184,39],[193,38,184,40],[194,6,185,8],[194,10,185,12],[194,11,185,13,"call"],[194,15,185,17],[194,16,185,18,"setupReadable"],[194,29,185,31],[194,30,185,32],[194,34,185,36],[194,36,185,38,"encoding"],[194,44,185,46],[194,45,185,47],[195,6,186,8],[195,10,186,12],[195,11,186,13,"on"],[195,13,186,15],[195,14,186,16],[195,21,186,23],[195,23,186,25,"err"],[195,26,186,28],[195,30,186,32],[196,8,187,12],[196,12,187,16],[196,13,187,17,"call"],[196,17,187,21],[196,18,187,22,"sendError"],[196,27,187,31],[196,28,187,32,"err"],[196,31,187,35],[196,32,187,36],[197,8,188,12],[197,12,188,16],[197,13,188,17,"end"],[197,16,188,20],[197,17,188,21],[197,18,188,22],[198,6,189,8],[198,7,189,9],[198,8,189,10],[199,4,190,4],[200,4,191,4,"getPeer"],[200,11,191,11,"getPeer"],[200,12,191,11],[200,14,191,14],[201,6,192,8],[201,13,192,15],[201,17,192,19],[201,18,192,20,"call"],[201,22,192,24],[201,23,192,25,"getPeer"],[201,30,192,32],[201,31,192,33],[201,32,192,34],[202,4,193,4],[203,4,194,4,"sendMetadata"],[203,16,194,16,"sendMetadata"],[203,17,194,17,"responseMetadata"],[203,33,194,33],[203,35,194,35],[204,6,195,8],[204,10,195,12],[204,11,195,13,"call"],[204,15,195,17],[204,16,195,18,"sendMetadata"],[204,28,195,30],[204,29,195,31,"responseMetadata"],[204,45,195,47],[204,46,195,48],[205,4,196,4],[206,4,197,4,"getDeadline"],[206,15,197,15,"getDeadline"],[206,16,197,15],[206,18,197,18],[207,6,198,8],[207,13,198,15],[207,17,198,19],[207,18,198,20,"call"],[207,22,198,24],[207,23,198,25,"getDeadline"],[207,34,198,36],[207,35,198,37],[207,36,198,38],[208,4,199,4],[209,4,200,4,"getPath"],[209,11,200,11,"getPath"],[209,12,200,11],[209,14,200,14],[210,6,201,8],[210,13,201,15],[210,17,201,19],[210,18,201,20,"call"],[210,22,201,24],[210,23,201,25,"getPath"],[210,30,201,32],[210,31,201,33],[210,32,201,34],[211,4,202,4],[212,4,203,4],[213,4,204,4,"end"],[213,7,204,7,"end"],[213,8,204,8,"metadata"],[213,16,204,16],[213,18,204,18],[214,6,205,8],[214,10,205,12,"metadata"],[214,18,205,20],[214,20,205,22],[215,8,206,12],[215,12,206,16],[215,13,206,17,"trailingMetadata"],[215,29,206,33],[215,32,206,36,"metadata"],[215,40,206,44],[216,6,207,8],[217,6,208,8],[217,13,208,15],[217,18,208,20],[217,19,208,21,"end"],[217,22,208,24],[217,23,208,25],[217,24,208,26],[218,4,209,4],[219,2,210,0],[220,2,211,0,"exports"],[220,9,211,7],[220,10,211,8,"ServerDuplexStreamImpl"],[220,32,211,30],[220,35,211,33,"ServerDuplexStreamImpl"],[220,57,211,55],[221,2,212,0,"ServerDuplexStreamImpl"],[221,24,212,22],[221,25,212,23,"prototype"],[221,34,212,32],[221,35,212,33,"_read"],[221,40,212,38],[221,43,213,4,"ServerReadableStreamImpl"],[221,67,213,28],[221,68,213,29,"prototype"],[221,77,213,38],[221,78,213,39,"_read"],[221,83,213,44],[222,2,214,0,"ServerDuplexStreamImpl"],[222,24,214,22],[222,25,214,23,"prototype"],[222,34,214,32],[222,35,214,33,"_write"],[222,41,214,39],[222,44,215,4,"ServerWritableStreamImpl"],[222,68,215,28],[222,69,215,29,"prototype"],[222,78,215,38],[222,79,215,39,"_write"],[222,85,215,45],[223,2,216,0,"ServerDuplexStreamImpl"],[223,24,216,22],[223,25,216,23,"prototype"],[223,34,216,32],[223,35,216,33,"_final"],[223,41,216,39],[223,44,217,4,"ServerWritableStreamImpl"],[223,68,217,28],[223,69,217,29,"prototype"],[223,78,217,38],[223,79,217,39,"_final"],[223,85,217,45],[224,2,218,0],[225,2,219,0],[225,8,219,6,"Http2ServerCallStream"],[225,29,219,27],[225,38,219,36,"events_1"],[225,46,219,44],[225,47,219,45,"EventEmitter"],[225,59,219,57],[225,60,219,58],[226,4,220,4,"constructor"],[226,15,220,15,"constructor"],[226,16,220,16,"stream"],[226,22,220,22],[226,24,220,24,"handler"],[226,31,220,31],[226,33,220,33,"options"],[226,40,220,40],[226,42,220,42],[227,6,221,8],[227,11,221,13],[227,12,221,14],[227,13,221,15],[228,6,222,8],[228,10,222,12],[228,11,222,13,"stream"],[228,17,222,19],[228,20,222,22,"stream"],[228,26,222,28],[229,6,223,8],[229,10,223,12],[229,11,223,13,"handler"],[229,18,223,20],[229,21,223,23,"handler"],[229,28,223,30],[230,6,224,8],[230,10,224,12],[230,11,224,13,"cancelled"],[230,20,224,22],[230,23,224,25],[230,28,224,30],[231,6,225,8],[231,10,225,12],[231,11,225,13,"deadlineTimer"],[231,24,225,26],[231,27,225,29],[231,31,225,33],[232,6,226,8],[232,10,226,12],[232,11,226,13,"statusSent"],[232,21,226,23],[232,24,226,26],[232,29,226,31],[233,6,227,8],[233,10,227,12],[233,11,227,13,"deadline"],[233,19,227,21],[233,22,227,24,"Infinity"],[233,30,227,32],[234,6,228,8],[234,10,228,12],[234,11,228,13,"wantTrailers"],[234,23,228,25],[234,26,228,28],[234,31,228,33],[235,6,229,8],[235,10,229,12],[235,11,229,13,"metadataSent"],[235,23,229,25],[235,26,229,28],[235,31,229,33],[236,6,230,8],[236,10,230,12],[236,11,230,13,"canPush"],[236,18,230,20],[236,21,230,23],[236,26,230,28],[237,6,231,8],[237,10,231,12],[237,11,231,13,"isPushPending"],[237,24,231,26],[237,27,231,29],[237,32,231,34],[238,6,232,8],[238,10,232,12],[238,11,232,13,"bufferedMessages"],[238,27,232,29],[238,30,232,32],[238,32,232,34],[239,6,233,8],[239,10,233,12],[239,11,233,13,"messagesToPush"],[239,25,233,27],[239,28,233,30],[239,30,233,32],[240,6,234,8],[240,10,234,12],[240,11,234,13,"maxSendMessageSize"],[240,29,234,31],[240,32,234,34,"constants_1"],[240,43,234,45],[240,44,234,46,"DEFAULT_MAX_SEND_MESSAGE_LENGTH"],[240,75,234,77],[241,6,235,8],[241,10,235,12],[241,11,235,13,"maxReceiveMessageSize"],[241,32,235,34],[241,35,235,37,"constants_1"],[241,46,235,48],[241,47,235,49,"DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH"],[241,81,235,83],[242,6,236,8],[242,10,236,12],[242,11,236,13,"stream"],[242,17,236,19],[242,18,236,20,"once"],[242,22,236,24],[242,23,236,25],[242,30,236,32],[242,32,236,35,"err"],[242,35,236,38],[242,39,236,43],[243,8,237,12],[244,0,238,0],[245,0,239,0],[246,0,240,0],[247,0,241,0],[248,6,237,12],[248,7,242,9],[248,8,242,10],[249,6,243,8],[249,10,243,12],[249,11,243,13,"stream"],[249,17,243,19],[249,18,243,20,"once"],[249,22,243,24],[249,23,243,25],[249,30,243,32],[249,32,243,34],[249,38,243,40],[250,8,244,12],[250,12,244,16,"_a"],[250,14,244,18],[251,8,245,12,"trace"],[251,13,245,17],[251,14,245,18],[251,34,245,38],[251,38,246,17],[251,39,246,18,"_a"],[251,41,246,20],[251,44,246,23],[251,48,246,27],[251,49,246,28,"handler"],[251,56,246,35],[251,62,246,41],[251,66,246,45],[251,70,246,49,"_a"],[251,72,246,51],[251,77,246,56],[251,82,246,61],[251,83,246,62],[251,86,246,65],[251,91,246,70],[251,92,246,71],[251,95,246,74,"_a"],[251,97,246,76],[251,98,246,77,"path"],[251,102,246,81],[251,103,246,82],[251,106,247,16],[251,136,247,46],[251,139,248,16],[251,143,248,20],[251,144,248,21,"stream"],[251,150,248,27],[251,151,248,28,"rstCode"],[251,158,248,35],[251,159,248,36],[252,8,249,12],[252,12,249,16],[252,13,249,17],[252,17,249,21],[252,18,249,22,"statusSent"],[252,28,249,32],[252,30,249,34],[253,10,250,16],[253,14,250,20],[253,15,250,21,"cancelled"],[253,24,250,30],[253,27,250,33],[253,31,250,37],[254,10,251,16],[254,14,251,20],[254,15,251,21,"emit"],[254,19,251,25],[254,20,251,26],[254,31,251,37],[254,33,251,39],[254,44,251,50],[254,45,251,51],[255,10,252,16],[255,14,252,20],[255,15,252,21,"emit"],[255,19,252,25],[255,20,252,26],[255,31,252,37],[255,33,252,39],[255,38,252,44],[255,39,252,45],[256,10,253,16],[256,14,253,20],[256,15,253,21,"sendStatus"],[256,25,253,31],[256,26,253,32],[257,12,254,20,"code"],[257,16,254,24],[257,18,254,26,"constants_1"],[257,29,254,37],[257,30,254,38,"Status"],[257,36,254,44],[257,37,254,45,"CANCELLED"],[257,46,254,54],[258,12,255,20,"details"],[258,19,255,27],[258,21,255,29],[258,42,255,50],[259,12,256,20,"metadata"],[259,20,256,28],[259,22,256,30],[260,10,257,16],[260,11,257,17],[260,12,257,18],[261,10,258,16],[261,14,258,20],[261,18,258,24],[261,19,258,25,"deadlineTimer"],[261,32,258,38],[261,34,259,20,"clearTimeout"],[261,46,259,32],[261,47,259,33],[261,51,259,37],[261,52,259,38,"deadlineTimer"],[261,65,259,51],[261,66,259,52],[262,8,260,12],[263,6,261,8],[263,7,261,9],[263,8,261,10],[264,6,262,8],[264,10,262,12],[264,11,262,13,"stream"],[264,17,262,19],[264,18,262,20,"on"],[264,20,262,22],[264,21,262,23],[264,28,262,30],[264,30,262,32],[264,36,262,38],[265,8,263,12],[265,12,263,16],[265,13,263,17,"emit"],[265,17,263,21],[265,18,263,22],[265,25,263,29],[265,26,263,30],[266,6,264,8],[266,7,264,9],[266,8,264,10],[267,6,265,8],[267,10,265,12],[267,40,265,42],[267,44,265,46,"options"],[267,51,265,53],[267,53,265,55],[268,8,266,12],[268,12,266,16],[268,13,266,17,"maxSendMessageSize"],[268,31,266,35],[268,34,266,38,"options"],[268,41,266,45],[268,42,266,46],[268,72,266,76],[268,73,266,77],[269,6,267,8],[270,6,268,8],[270,10,268,12],[270,43,268,45],[270,47,268,49,"options"],[270,54,268,56],[270,56,268,58],[271,8,269,12],[271,12,269,16],[271,13,269,17,"maxReceiveMessageSize"],[271,34,269,38],[271,37,269,41,"options"],[271,44,269,48],[271,45,269,49],[271,78,269,82],[271,79,269,83],[272,6,270,8],[273,4,271,4],[274,4,272,4,"checkCancelled"],[274,18,272,18,"checkCancelled"],[274,19,272,18],[274,21,272,21],[275,6,273,8],[276,0,274,0],[277,6,275,8],[277,10,275,12],[277,14,275,16],[277,15,275,17,"stream"],[277,21,275,23],[277,22,275,24,"destroyed"],[277,31,275,33],[277,35,275,37],[277,39,275,41],[277,40,275,42,"stream"],[277,46,275,48],[277,47,275,49,"closed"],[277,53,275,55],[277,55,275,57],[278,8,276,12],[278,12,276,16],[278,13,276,17,"cancelled"],[278,22,276,26],[278,25,276,29],[278,29,276,33],[279,6,277,8],[280,6,278,8],[280,13,278,15],[280,17,278,19],[280,18,278,20,"cancelled"],[280,27,278,29],[281,4,279,4],[282,4,280,4,"getDecompressedMessage"],[282,26,280,26,"getDecompressedMessage"],[282,27,280,27,"message"],[282,34,280,34],[282,36,280,36,"encoding"],[282,44,280,44],[282,46,280,46],[283,6,281,8],[283,12,281,14,"messageContents"],[283,27,281,29],[283,30,281,32,"message"],[283,37,281,39],[283,38,281,40,"subarray"],[283,46,281,48],[283,47,281,49],[283,48,281,50],[283,49,281,51],[284,6,282,8],[284,10,282,12,"encoding"],[284,18,282,20],[284,23,282,25],[284,33,282,35],[284,35,282,37],[285,8,283,12],[285,15,283,19,"messageContents"],[285,30,283,34],[286,6,284,8],[286,7,284,9],[286,13,285,13],[286,17,285,17,"encoding"],[286,25,285,25],[286,30,285,30],[286,39,285,39],[286,43,285,43,"encoding"],[286,51,285,51],[286,56,285,56],[286,62,285,62],[286,64,285,64],[287,8,286,12],[287,12,286,16,"decompresser"],[287,24,286,28],[288,8,287,12],[288,12,287,16,"encoding"],[288,20,287,24],[288,25,287,29],[288,34,287,38],[288,36,287,40],[289,10,288,16,"decompresser"],[289,22,288,28],[289,25,288,31,"zlib"],[289,29,288,35],[289,30,288,36,"createInflate"],[289,43,288,49],[289,44,288,50],[289,45,288,51],[290,8,289,12],[290,9,289,13],[290,15,290,17],[291,10,291,16,"decompresser"],[291,22,291,28],[291,25,291,31,"zlib"],[291,29,291,35],[291,30,291,36,"createGunzip"],[291,42,291,48],[291,43,291,49],[291,44,291,50],[292,8,292,12],[293,8,293,12],[293,15,293,19],[293,19,293,23,"Promise"],[293,26,293,30],[293,27,293,31],[293,28,293,32,"resolve"],[293,35,293,39],[293,37,293,41,"reject"],[293,43,293,47],[293,48,293,52],[294,10,294,16],[294,14,294,20,"totalLength"],[294,25,294,31],[294,28,294,34],[294,29,294,35],[295,10,295,16],[295,16,295,22,"messageParts"],[295,28,295,34],[295,31,295,37],[295,33,295,39],[296,10,296,16,"decompresser"],[296,22,296,28],[296,23,296,29,"on"],[296,25,296,31],[296,26,296,32],[296,32,296,38],[296,34,296,41,"chunk"],[296,39,296,46],[296,43,296,51],[297,12,297,20,"messageParts"],[297,24,297,32],[297,25,297,33,"push"],[297,29,297,37],[297,30,297,38,"chunk"],[297,35,297,43],[297,36,297,44],[298,12,298,20,"totalLength"],[298,23,298,31],[298,27,298,35,"chunk"],[298,32,298,40],[298,33,298,41,"byteLength"],[298,43,298,51],[299,12,299,20],[299,16,299,24],[299,20,299,28],[299,21,299,29,"maxReceiveMessageSize"],[299,42,299,50],[299,47,299,55],[299,48,299,56],[299,49,299,57],[299,53,299,61,"totalLength"],[299,64,299,72],[299,67,299,75],[299,71,299,79],[299,72,299,80,"maxReceiveMessageSize"],[299,93,299,101],[299,95,299,103],[300,14,300,24,"decompresser"],[300,26,300,36],[300,27,300,37,"destroy"],[300,34,300,44],[300,35,300,45],[300,36,300,46],[301,14,301,24,"reject"],[301,20,301,30],[301,21,301,31],[302,16,302,28,"code"],[302,20,302,32],[302,22,302,34,"constants_1"],[302,33,302,45],[302,34,302,46,"Status"],[302,40,302,52],[302,41,302,53,"RESOURCE_EXHAUSTED"],[302,59,302,71],[303,16,303,28,"details"],[303,23,303,35],[303,25,303,37],[303,85,303,97],[303,89,303,101],[303,90,303,102,"maxReceiveMessageSize"],[303,111,303,123],[304,14,304,24],[304,15,304,25],[304,16,304,26],[305,12,305,20],[306,10,306,16],[306,11,306,17],[306,12,306,18],[307,10,307,16,"decompresser"],[307,22,307,28],[307,23,307,29,"on"],[307,25,307,31],[307,26,307,32],[307,31,307,37],[307,33,307,39],[307,39,307,45],[308,12,308,20,"resolve"],[308,19,308,27],[308,20,308,28,"Buffer"],[308,26,308,34],[308,27,308,35,"concat"],[308,33,308,41],[308,34,308,42,"messageParts"],[308,46,308,54],[308,47,308,55],[308,48,308,56],[309,10,309,16],[309,11,309,17],[309,12,309,18],[310,10,310,16,"decompresser"],[310,22,310,28],[310,23,310,29,"write"],[310,28,310,34],[310,29,310,35,"messageContents"],[310,44,310,50],[310,45,310,51],[311,10,311,16,"decompresser"],[311,22,311,28],[311,23,311,29,"end"],[311,26,311,32],[311,27,311,33],[311,28,311,34],[312,8,312,12],[312,9,312,13],[312,10,312,14],[313,6,313,8],[313,7,313,9],[313,13,314,13],[314,8,315,12],[314,15,315,19,"Promise"],[314,22,315,26],[314,23,315,27,"reject"],[314,29,315,33],[314,30,315,34],[315,10,316,16,"code"],[315,14,316,20],[315,16,316,22,"constants_1"],[315,27,316,33],[315,28,316,34,"Status"],[315,34,316,40],[315,35,316,41,"UNIMPLEMENTED"],[315,48,316,54],[316,10,317,16,"details"],[316,17,317,23],[316,19,317,25],[316,77,317,83,"encoding"],[316,85,317,91],[317,8,318,12],[317,9,318,13],[317,10,318,14],[318,6,319,8],[319,4,320,4],[320,4,321,4,"sendMetadata"],[320,16,321,16,"sendMetadata"],[320,17,321,17,"customMetadata"],[320,31,321,31],[320,33,321,33],[321,6,322,8],[321,10,322,12],[321,14,322,16],[321,15,322,17,"checkCancelled"],[321,29,322,31],[321,30,322,32],[321,31,322,33],[321,33,322,35],[322,8,323,12],[323,6,324,8],[324,6,325,8],[324,10,325,12],[324,14,325,16],[324,15,325,17,"metadataSent"],[324,27,325,29],[324,29,325,31],[325,8,326,12],[326,6,327,8],[327,6,328,8],[327,10,328,12],[327,11,328,13,"metadataSent"],[327,23,328,25],[327,26,328,28],[327,30,328,32],[328,6,329,8],[328,12,329,14,"custom"],[328,18,329,20],[328,21,329,23,"customMetadata"],[328,35,329,37],[328,38,329,40,"customMetadata"],[328,52,329,54],[328,53,329,55,"toHttp2Headers"],[328,67,329,69],[328,68,329,70],[328,69,329,71],[328,72,329,74],[328,76,329,78],[329,6,330,8],[330,6,331,8],[330,12,331,14,"headers"],[330,19,331,21],[330,22,331,24,"Object"],[330,28,331,30],[330,29,331,31,"assign"],[330,35,331,37],[330,36,331,38,"Object"],[330,42,331,44],[330,43,331,45,"assign"],[330,49,331,51],[330,50,331,52,"Object"],[330,56,331,58],[330,57,331,59,"assign"],[330,63,331,65],[330,64,331,66],[330,65,331,67],[330,66,331,68],[330,68,331,70,"defaultResponseHeaders"],[330,90,331,92],[330,91,331,93],[330,93,331,95,"defaultCompressionHeaders"],[330,118,331,120],[330,119,331,121],[330,121,331,123,"custom"],[330,127,331,129],[330,128,331,130],[331,6,332,8],[331,10,332,12],[331,11,332,13,"stream"],[331,17,332,19],[331,18,332,20,"respond"],[331,25,332,27],[331,26,332,28,"headers"],[331,33,332,35],[331,35,332,37,"defaultResponseOptions"],[331,57,332,59],[331,58,332,60],[332,4,333,4],[333,4,334,4,"receiveMetadata"],[333,19,334,19,"receiveMetadata"],[333,20,334,20,"headers"],[333,27,334,27],[333,29,334,29],[334,6,335,8],[334,12,335,14,"metadata"],[334,20,335,22],[334,23,335,25,"metadata_1"],[334,33,335,35],[334,34,335,36,"Metadata"],[334,42,335,44],[334,43,335,45,"fromHttp2Headers"],[334,59,335,61],[334,60,335,62,"headers"],[334,67,335,69],[334,68,335,70],[335,6,336,8],[335,10,336,12,"logging"],[335,17,336,19],[335,18,336,20,"isTracerEnabled"],[335,33,336,35],[335,34,336,36,"TRACER_NAME"],[335,45,336,47],[335,46,336,48],[335,48,336,50],[336,8,337,12,"trace"],[336,13,337,17],[336,14,337,18],[336,27,337,31],[336,30,338,16],[336,34,338,20],[336,35,338,21,"handler"],[336,42,338,28],[336,43,338,29,"path"],[336,47,338,33],[336,50,339,16],[336,70,339,36],[336,73,340,16,"JSON"],[336,77,340,20],[336,78,340,21,"stringify"],[336,87,340,30],[336,88,340,31,"metadata"],[336,96,340,39],[336,97,340,40,"toJSON"],[336,103,340,46],[336,104,340,47],[336,105,340,48],[336,106,340,49],[336,107,340,50],[337,6,341,8],[338,6,342,8],[339,6,343,8],[339,12,343,14,"timeoutHeader"],[339,25,343,27],[339,28,343,30,"metadata"],[339,36,343,38],[339,37,343,39,"get"],[339,40,343,42],[339,41,343,43,"GRPC_TIMEOUT_HEADER"],[339,60,343,62],[339,61,343,63],[340,6,344,8],[340,10,344,12,"timeoutHeader"],[340,23,344,25],[340,24,344,26,"length"],[340,30,344,32],[340,33,344,35],[340,34,344,36],[340,36,344,38],[341,8,345,12],[341,14,345,18,"match"],[341,19,345,23],[341,22,345,26,"timeoutHeader"],[341,35,345,39],[341,36,345,40],[341,37,345,41],[341,38,345,42],[341,39,345,43,"toString"],[341,47,345,51],[341,48,345,52],[341,49,345,53],[341,50,345,54,"match"],[341,55,345,59],[341,56,345,60,"DEADLINE_REGEX"],[341,70,345,74],[341,71,345,75],[342,8,346,12],[342,12,346,16,"match"],[342,17,346,21],[342,22,346,26],[342,26,346,30],[342,28,346,32],[343,10,347,16],[343,16,347,22,"err"],[343,19,347,25],[343,22,347,28],[343,26,347,32,"Error"],[343,31,347,37],[343,32,347,38],[343,50,347,56],[343,51,347,57],[344,10,348,16,"err"],[344,13,348,19],[344,14,348,20,"code"],[344,18,348,24],[344,21,348,27,"constants_1"],[344,32,348,38],[344,33,348,39,"Status"],[344,39,348,45],[344,40,348,46,"OUT_OF_RANGE"],[344,52,348,58],[345,10,349,16],[345,14,349,20],[345,15,349,21,"sendError"],[345,24,349,30],[345,25,349,31,"err"],[345,28,349,34],[345,29,349,35],[346,10,350,16],[346,17,350,23,"metadata"],[346,25,350,31],[347,8,351,12],[348,8,352,12],[348,14,352,18,"timeout"],[348,21,352,25],[348,24,352,29],[348,25,352,30,"match"],[348,30,352,35],[348,31,352,36],[348,32,352,37],[348,33,352,38],[348,36,352,41,"deadlineUnitsToMs"],[348,53,352,58],[348,54,352,59,"match"],[348,59,352,64],[348,60,352,65],[348,61,352,66],[348,62,352,67],[348,63,352,68],[348,66,352,72],[348,67,352,73],[349,8,353,12],[349,14,353,18,"now"],[349,17,353,21],[349,20,353,24],[349,24,353,28,"Date"],[349,28,353,32],[349,29,353,33],[349,30,353,34],[350,8,354,12],[350,12,354,16],[350,13,354,17,"deadline"],[350,21,354,25],[350,24,354,28,"now"],[350,27,354,31],[350,28,354,32,"setMilliseconds"],[350,43,354,47],[350,44,354,48,"now"],[350,47,354,51],[350,48,354,52,"getMilliseconds"],[350,63,354,67],[350,64,354,68],[350,65,354,69],[350,68,354,72,"timeout"],[350,75,354,79],[350,76,354,80],[351,8,355,12],[351,12,355,16],[351,13,355,17,"deadlineTimer"],[351,26,355,30],[351,29,355,33,"setTimeout"],[351,39,355,43],[351,40,355,44,"handleExpiredDeadline"],[351,61,355,65],[351,63,355,67,"timeout"],[351,70,355,74],[351,72,355,76],[351,76,355,80],[351,77,355,81],[352,8,356,12,"metadata"],[352,16,356,20],[352,17,356,21,"remove"],[352,23,356,27],[352,24,356,28,"GRPC_TIMEOUT_HEADER"],[352,43,356,47],[352,44,356,48],[353,6,357,8],[354,6,358,8],[355,6,359,8,"metadata"],[355,14,359,16],[355,15,359,17,"remove"],[355,21,359,23],[355,22,359,24,"http2"],[355,27,359,29],[355,28,359,30,"constants"],[355,37,359,39],[355,38,359,40,"HTTP2_HEADER_ACCEPT_ENCODING"],[355,66,359,68],[355,67,359,69],[356,6,360,8,"metadata"],[356,14,360,16],[356,15,360,17,"remove"],[356,21,360,23],[356,22,360,24,"http2"],[356,27,360,29],[356,28,360,30,"constants"],[356,37,360,39],[356,38,360,40,"HTTP2_HEADER_TE"],[356,53,360,55],[356,54,360,56],[357,6,361,8,"metadata"],[357,14,361,16],[357,15,361,17,"remove"],[357,21,361,23],[357,22,361,24,"http2"],[357,27,361,29],[357,28,361,30,"constants"],[357,37,361,39],[357,38,361,40,"HTTP2_HEADER_CONTENT_TYPE"],[357,63,361,65],[357,64,361,66],[358,6,362,8,"metadata"],[358,14,362,16],[358,15,362,17,"remove"],[358,21,362,23],[358,22,362,24],[358,44,362,46],[358,45,362,47],[359,6,363,8],[359,13,363,15,"metadata"],[359,21,363,23],[360,4,364,4],[361,4,365,4,"receiveUnaryMessage"],[361,23,365,23,"receiveUnaryMessage"],[361,24,365,24,"encoding"],[361,32,365,32],[361,34,365,34],[362,6,366,8],[362,13,366,15],[362,17,366,19,"Promise"],[362,24,366,26],[362,25,366,27],[362,26,366,28,"resolve"],[362,33,366,35],[362,35,366,37,"reject"],[362,41,366,43],[362,46,366,48],[363,8,367,12],[363,14,367,18],[364,10,367,20,"stream"],[365,8,367,27],[365,9,367,28],[365,12,367,31],[365,16,367,35],[366,8,368,12],[366,12,368,16,"receivedLength"],[366,26,368,30],[366,29,368,33],[366,30,368,34],[367,8,369,12],[368,8,370,12],[368,14,370,18,"call"],[368,18,370,22],[368,21,370,25],[368,25,370,29],[369,8,371,12],[369,14,371,18,"body"],[369,18,371,22],[369,21,371,25],[369,23,371,27],[370,8,372,12],[370,14,372,18,"limit"],[370,19,372,23],[370,22,372,26],[370,26,372,30],[370,27,372,31,"maxReceiveMessageSize"],[370,48,372,52],[371,8,373,12],[371,12,373,16],[371,13,373,17,"stream"],[371,19,373,23],[371,20,373,24,"on"],[371,22,373,26],[371,23,373,27],[371,29,373,33],[371,31,373,35,"onData"],[371,37,373,41],[371,38,373,42],[372,8,374,12],[372,12,374,16],[372,13,374,17,"stream"],[372,19,374,23],[372,20,374,24,"on"],[372,22,374,26],[372,23,374,27],[372,28,374,32],[372,30,374,34,"onEnd"],[372,35,374,39],[372,36,374,40],[373,8,375,12],[373,12,375,16],[373,13,375,17,"stream"],[373,19,375,23],[373,20,375,24,"on"],[373,22,375,26],[373,23,375,27],[373,30,375,34],[373,32,375,36,"onEnd"],[373,37,375,41],[373,38,375,42],[374,8,376,12],[374,17,376,21,"onData"],[374,23,376,27,"onData"],[374,24,376,28,"chunk"],[374,29,376,33],[374,31,376,35],[375,10,377,16,"receivedLength"],[375,24,377,30],[375,28,377,34,"chunk"],[375,33,377,39],[375,34,377,40,"byteLength"],[375,44,377,50],[376,10,378,16],[376,14,378,20,"limit"],[376,19,378,25],[376,24,378,30],[376,25,378,31],[376,26,378,32],[376,30,378,36,"receivedLength"],[376,44,378,50],[376,47,378,53,"limit"],[376,52,378,58],[376,54,378,60],[377,12,379,20,"stream"],[377,18,379,26],[377,19,379,27,"removeListener"],[377,33,379,41],[377,34,379,42],[377,40,379,48],[377,42,379,50,"onData"],[377,48,379,56],[377,49,379,57],[378,12,380,20,"stream"],[378,18,380,26],[378,19,380,27,"removeListener"],[378,33,380,41],[378,34,380,42],[378,39,380,47],[378,41,380,49,"onEnd"],[378,46,380,54],[378,47,380,55],[379,12,381,20,"stream"],[379,18,381,26],[379,19,381,27,"removeListener"],[379,33,381,41],[379,34,381,42],[379,41,381,49],[379,43,381,51,"onEnd"],[379,48,381,56],[379,49,381,57],[380,12,382,20,"reject"],[380,18,382,26],[380,19,382,27],[381,14,383,24,"code"],[381,18,383,28],[381,20,383,30,"constants_1"],[381,31,383,41],[381,32,383,42,"Status"],[381,38,383,48],[381,39,383,49,"RESOURCE_EXHAUSTED"],[381,57,383,67],[382,14,384,24,"details"],[382,21,384,31],[382,23,384,33],[382,60,384,70,"receivedLength"],[382,74,384,84],[382,82,384,92,"limit"],[382,87,384,97],[383,12,385,20],[383,13,385,21],[383,14,385,22],[384,12,386,20],[385,10,387,16],[386,10,388,16,"body"],[386,14,388,20],[386,15,388,21,"push"],[386,19,388,25],[386,20,388,26,"chunk"],[386,25,388,31],[386,26,388,32],[387,8,389,12],[388,8,390,12],[388,17,390,21,"onEnd"],[388,22,390,26,"onEnd"],[388,23,390,27,"err"],[388,26,390,30],[388,28,390,32],[389,10,391,16,"stream"],[389,16,391,22],[389,17,391,23,"removeListener"],[389,31,391,37],[389,32,391,38],[389,38,391,44],[389,40,391,46,"onData"],[389,46,391,52],[389,47,391,53],[390,10,392,16,"stream"],[390,16,392,22],[390,17,392,23,"removeListener"],[390,31,392,37],[390,32,392,38],[390,37,392,43],[390,39,392,45,"onEnd"],[390,44,392,50],[390,45,392,51],[391,10,393,16,"stream"],[391,16,393,22],[391,17,393,23,"removeListener"],[391,31,393,37],[391,32,393,38],[391,39,393,45],[391,41,393,47,"onEnd"],[391,46,393,52],[391,47,393,53],[392,10,394,16],[392,14,394,20,"err"],[392,17,394,23],[392,22,394,28,"undefined"],[392,31,394,37],[392,33,394,39],[393,12,395,20,"reject"],[393,18,395,26],[393,19,395,27],[394,14,395,29,"code"],[394,18,395,33],[394,20,395,35,"constants_1"],[394,31,395,46],[394,32,395,47,"Status"],[394,38,395,53],[394,39,395,54,"INTERNAL"],[394,47,395,62],[395,14,395,64,"details"],[395,21,395,71],[395,23,395,73,"err"],[395,26,395,76],[395,27,395,77,"message"],[396,12,395,85],[396,13,395,86],[396,14,395,87],[397,12,396,20],[398,10,397,16],[399,10,398,16],[399,14,398,20,"receivedLength"],[399,28,398,34],[399,33,398,39],[399,34,398,40],[399,36,398,42],[400,12,399,20,"reject"],[400,18,399,26],[400,19,399,27],[401,14,400,24,"code"],[401,18,400,28],[401,20,400,30,"constants_1"],[401,31,400,41],[401,32,400,42,"Status"],[401,38,400,48],[401,39,400,49,"INTERNAL"],[401,47,400,57],[402,14,401,24,"details"],[402,21,401,31],[402,23,401,33],[403,12,402,20],[403,13,402,21],[403,14,402,22],[404,12,403,20],[405,10,404,16],[406,10,405,16,"call"],[406,14,405,20],[406,15,405,21,"emit"],[406,19,405,25],[406,20,405,26],[406,36,405,42],[406,37,405,43],[407,10,406,16],[407,16,406,22,"requestBytes"],[407,28,406,34],[407,31,406,37,"Buffer"],[407,37,406,43],[407,38,406,44,"concat"],[407,44,406,50],[407,45,406,51,"body"],[407,49,406,55],[407,51,406,57,"receivedLength"],[407,65,406,71],[407,66,406,72],[408,10,407,16],[408,16,407,22,"compressed"],[408,26,407,32],[408,29,407,35,"requestBytes"],[408,41,407,47],[408,42,407,48,"readUInt8"],[408,51,407,57],[408,52,407,58],[408,53,407,59],[408,54,407,60],[408,59,407,65],[408,60,407,66],[409,10,408,16],[409,16,408,22,"compressedMessageEncoding"],[409,41,408,47],[409,44,408,50,"compressed"],[409,54,408,60],[409,57,408,63,"encoding"],[409,65,408,71],[409,68,408,74],[409,78,408,84],[410,10,409,16],[410,16,409,22,"decompressedMessage"],[410,35,409,41],[410,38,409,44,"call"],[410,42,409,48],[410,43,409,49,"getDecompressedMessage"],[410,65,409,71],[410,66,409,72,"requestBytes"],[410,78,409,84],[410,80,409,86,"compressedMessageEncoding"],[410,105,409,111],[410,106,409,112],[411,10,410,16],[411,14,410,20,"Buffer"],[411,20,410,26],[411,21,410,27,"isBuffer"],[411,29,410,35],[411,30,410,36,"decompressedMessage"],[411,49,410,55],[411,50,410,56],[411,52,410,58],[412,12,411,20,"resolve"],[412,19,411,27],[412,20,411,28,"call"],[412,24,411,32],[412,25,411,33,"deserializeMessageWithInternalError"],[412,60,411,68],[412,61,411,69,"decompressedMessage"],[412,80,411,88],[412,81,411,89],[412,82,411,90],[413,12,412,20],[414,10,413,16],[415,10,414,16,"decompressedMessage"],[415,29,414,35],[415,30,414,36,"then"],[415,34,414,40],[415,35,414,41,"decompressed"],[415,47,414,53],[415,51,414,57,"resolve"],[415,58,414,64],[415,59,414,65,"call"],[415,63,414,69],[415,64,414,70,"deserializeMessageWithInternalError"],[415,99,414,105],[415,100,414,106,"decompressed"],[415,112,414,118],[415,113,414,119],[415,114,414,120],[415,116,414,123,"err"],[415,119,414,126],[415,123,414,131,"reject"],[415,129,414,137],[415,130,414,138,"err"],[415,133,414,141],[415,134,414,142,"code"],[415,138,414,146],[415,141,415,22,"err"],[415,144,415,25],[415,147,416,22],[416,12,417,24,"code"],[416,16,417,28],[416,18,417,30,"constants_1"],[416,29,417,41],[416,30,417,42,"Status"],[416,36,417,48],[416,37,417,49,"INTERNAL"],[416,45,417,57],[417,12,418,24,"details"],[417,19,418,31],[417,21,418,33],[417,57,418,69,"encoding"],[417,65,418,77],[417,74,418,86,"encoding"],[417,82,418,94],[418,10,419,20],[418,11,419,21],[418,12,419,22],[418,13,419,23],[419,8,420,12],[420,6,421,8],[420,7,421,9],[420,8,421,10],[421,4,422,4],[422,4,423,4],[422,10,423,10,"deserializeMessageWithInternalError"],[422,45,423,45,"deserializeMessageWithInternalError"],[422,46,423,46,"buffer"],[422,52,423,52],[422,54,423,54],[423,6,424,8],[423,10,424,12],[424,8,425,12],[424,15,425,19],[424,19,425,23],[424,20,425,24,"deserializeMessage"],[424,38,425,42],[424,39,425,43,"buffer"],[424,45,425,49],[424,46,425,50],[425,6,426,8],[425,7,426,9],[425,8,427,8],[425,15,427,15,"err"],[425,18,427,18],[425,20,427,20],[426,8,428,12],[426,14,428,18],[427,10,429,16,"details"],[427,17,429,23],[427,19,429,25],[427,20,429,26],[427,21,429,27],[427,23,429,29,"error_1"],[427,30,429,36],[427,31,429,37,"getErrorMessage"],[427,46,429,52],[427,48,429,54,"err"],[427,51,429,57],[427,52,429,58],[428,10,430,16,"code"],[428,14,430,20],[428,16,430,22,"constants_1"],[428,27,430,33],[428,28,430,34,"Status"],[428,34,430,40],[428,35,430,41,"INTERNAL"],[429,8,431,12],[429,9,431,13],[430,6,432,8],[431,4,433,4],[432,4,434,4,"serializeMessage"],[432,20,434,20,"serializeMessage"],[432,21,434,21,"value"],[432,26,434,26],[432,28,434,28],[433,6,435,8],[433,12,435,14,"messageBuffer"],[433,25,435,27],[433,28,435,30],[433,32,435,34],[433,33,435,35,"handler"],[433,40,435,42],[433,41,435,43,"serialize"],[433,50,435,52],[433,51,435,53,"value"],[433,56,435,58],[433,57,435,59],[434,6,436,8],[435,6,437,8],[435,12,437,14,"byteLength"],[435,22,437,24],[435,25,437,27,"messageBuffer"],[435,38,437,40],[435,39,437,41,"byteLength"],[435,49,437,51],[436,6,438,8],[436,12,438,14,"output"],[436,18,438,20],[436,21,438,23,"Buffer"],[436,27,438,29],[436,28,438,30,"allocUnsafe"],[436,39,438,41],[436,40,438,42,"byteLength"],[436,50,438,52],[436,53,438,55],[436,54,438,56],[436,55,438,57],[437,6,439,8,"output"],[437,12,439,14],[437,13,439,15,"writeUInt8"],[437,23,439,25],[437,24,439,26],[437,25,439,27],[437,27,439,29],[437,28,439,30],[437,29,439,31],[438,6,440,8,"output"],[438,12,440,14],[438,13,440,15,"writeUInt32BE"],[438,26,440,28],[438,27,440,29,"byteLength"],[438,37,440,39],[438,39,440,41],[438,40,440,42],[438,41,440,43],[439,6,441,8,"messageBuffer"],[439,19,441,21],[439,20,441,22,"copy"],[439,24,441,26],[439,25,441,27,"output"],[439,31,441,33],[439,33,441,35],[439,34,441,36],[439,35,441,37],[440,6,442,8],[440,13,442,15,"output"],[440,19,442,21],[441,4,443,4],[442,4,444,4,"deserializeMessage"],[442,22,444,22,"deserializeMessage"],[442,23,444,23,"bytes"],[442,28,444,28],[442,30,444,30],[443,6,445,8],[443,13,445,15],[443,17,445,19],[443,18,445,20,"handler"],[443,25,445,27],[443,26,445,28,"deserialize"],[443,37,445,39],[443,38,445,40,"bytes"],[443,43,445,45],[443,44,445,46],[444,4,446,4],[445,4,447,4],[445,10,447,10,"sendUnaryMessage"],[445,26,447,26,"sendUnaryMessage"],[445,27,447,27,"err"],[445,30,447,30],[445,32,447,32,"value"],[445,37,447,37],[445,39,447,39,"metadata"],[445,47,447,47],[445,49,447,49,"flags"],[445,54,447,54],[445,56,447,56],[446,6,448,8],[446,10,448,12],[446,14,448,16],[446,15,448,17,"checkCancelled"],[446,29,448,31],[446,30,448,32],[446,31,448,33],[446,33,448,35],[447,8,449,12],[448,6,450,8],[449,6,451,8],[449,10,451,12,"metadata"],[449,18,451,20],[449,23,451,25,"undefined"],[449,32,451,34],[449,34,451,36],[450,8,452,12,"metadata"],[450,16,452,20],[450,19,452,23],[450,23,452,27],[451,6,453,8],[452,6,454,8],[452,10,454,12,"err"],[452,13,454,15],[452,15,454,17],[453,8,455,12],[453,12,455,16],[453,13,455,17,"Object"],[453,19,455,23],[453,20,455,24,"prototype"],[453,29,455,33],[453,30,455,34,"hasOwnProperty"],[453,44,455,48],[453,45,455,49,"call"],[453,49,455,53],[453,50,455,54,"err"],[453,53,455,57],[453,55,455,59],[453,65,455,69],[453,66,455,70],[453,70,455,74,"metadata"],[453,78,455,82],[453,80,455,84],[454,10,456,16,"err"],[454,13,456,19],[454,14,456,20,"metadata"],[454,22,456,28],[454,25,456,31,"metadata"],[454,33,456,39],[455,8,457,12],[456,8,458,12],[456,12,458,16],[456,13,458,17,"sendError"],[456,22,458,26],[456,23,458,27,"err"],[456,26,458,30],[456,27,458,31],[457,8,459,12],[458,6,460,8],[459,6,461,8],[459,10,461,12],[460,8,462,12],[460,14,462,18,"response"],[460,22,462,26],[460,25,462,29],[460,29,462,33],[460,30,462,34,"serializeMessage"],[460,46,462,50],[460,47,462,51,"value"],[460,52,462,56],[460,53,462,57],[461,8,463,12],[461,12,463,16],[461,13,463,17,"write"],[461,18,463,22],[461,19,463,23,"response"],[461,27,463,31],[461,28,463,32],[462,8,464,12],[462,12,464,16],[462,13,464,17,"sendStatus"],[462,23,464,27],[462,24,464,28],[463,10,464,30,"code"],[463,14,464,34],[463,16,464,36,"constants_1"],[463,27,464,47],[463,28,464,48,"Status"],[463,34,464,54],[463,35,464,55,"OK"],[463,37,464,57],[464,10,464,59,"details"],[464,17,464,66],[464,19,464,68],[464,23,464,72],[465,10,464,74,"metadata"],[466,8,464,83],[466,9,464,84],[466,10,464,85],[467,6,465,8],[467,7,465,9],[467,8,466,8],[467,15,466,15,"err"],[467,18,466,18],[467,20,466,20],[468,8,467,12],[468,12,467,16],[468,13,467,17,"sendError"],[468,22,467,26],[468,23,467,27],[469,10,468,16,"details"],[469,17,468,23],[469,19,468,25],[469,20,468,26],[469,21,468,27],[469,23,468,29,"error_1"],[469,30,468,36],[469,31,468,37,"getErrorMessage"],[469,46,468,52],[469,48,468,54,"err"],[469,51,468,57],[469,52,468,58],[470,10,469,16,"code"],[470,14,469,20],[470,16,469,22,"constants_1"],[470,27,469,33],[470,28,469,34,"Status"],[470,34,469,40],[470,35,469,41,"INTERNAL"],[471,8,470,12],[471,9,470,13],[471,10,470,14],[472,6,471,8],[473,4,472,4],[474,4,473,4,"sendStatus"],[474,14,473,14,"sendStatus"],[474,15,473,15,"statusObj"],[474,24,473,24],[474,26,473,26],[475,6,474,8],[475,10,474,12,"_a"],[475,12,474,14],[475,14,474,16,"_b"],[475,16,474,18],[476,6,475,8],[476,10,475,12],[476,11,475,13,"emit"],[476,15,475,17],[476,16,475,18],[476,25,475,27],[476,27,475,29,"statusObj"],[476,36,475,38],[476,37,475,39,"code"],[476,41,475,43],[476,42,475,44],[477,6,476,8],[477,10,476,12],[477,11,476,13,"emit"],[477,15,476,17],[477,16,476,18],[477,27,476,29],[477,29,476,31,"statusObj"],[477,38,476,40],[477,39,476,41,"code"],[477,43,476,45],[477,48,476,50,"constants_1"],[477,59,476,61],[477,60,476,62,"Status"],[477,66,476,68],[477,67,476,69,"OK"],[477,69,476,71],[477,70,476,72],[478,6,477,8],[478,10,477,12],[478,14,477,16],[478,15,477,17,"checkCancelled"],[478,29,477,31],[478,30,477,32],[478,31,477,33],[478,33,477,35],[479,8,478,12],[480,6,479,8],[481,6,480,8,"trace"],[481,11,480,13],[481,12,480,14],[481,32,480,34],[481,36,481,13],[481,37,481,14,"_a"],[481,39,481,16],[481,42,481,19],[481,46,481,23],[481,47,481,24,"handler"],[481,54,481,31],[481,60,481,37],[481,64,481,41],[481,68,481,45,"_a"],[481,70,481,47],[481,75,481,52],[481,80,481,57],[481,81,481,58],[481,84,481,61],[481,89,481,66],[481,90,481,67],[481,93,481,70,"_a"],[481,95,481,72],[481,96,481,73,"path"],[481,100,481,77],[481,101,481,78],[481,104,482,12],[481,131,482,39],[481,134,483,12,"constants_1"],[481,145,483,23],[481,146,483,24,"Status"],[481,152,483,30],[481,153,483,31,"statusObj"],[481,162,483,40],[481,163,483,41,"code"],[481,167,483,45],[481,168,483,46],[481,171,484,12],[481,183,484,24],[481,186,485,12,"statusObj"],[481,195,485,21],[481,196,485,22,"details"],[481,203,485,29],[481,204,485,30],[482,6,486,8],[482,10,486,12],[482,14,486,16],[482,15,486,17,"deadlineTimer"],[482,28,486,30],[482,30,487,12,"clearTimeout"],[482,42,487,24],[482,43,487,25],[482,47,487,29],[482,48,487,30,"deadlineTimer"],[482,61,487,43],[482,62,487,44],[483,6,488,8],[483,10,488,12],[483,14,488,16],[483,15,488,17,"stream"],[483,21,488,23],[483,22,488,24,"headersSent"],[483,33,488,35],[483,35,488,37],[484,8,489,12],[484,12,489,16],[484,13,489,17],[484,17,489,21],[484,18,489,22,"wantTrailers"],[484,30,489,34],[484,32,489,36],[485,10,490,16],[485,14,490,20],[485,15,490,21,"wantTrailers"],[485,27,490,33],[485,30,490,36],[485,34,490,40],[486,10,491,16],[486,14,491,20],[486,15,491,21,"stream"],[486,21,491,27],[486,22,491,28,"once"],[486,26,491,32],[486,27,491,33],[486,41,491,47],[486,43,491,49],[486,49,491,55],[487,12,492,20],[487,16,492,24,"_a"],[487,18,492,26],[488,12,493,20],[488,18,493,26,"trailersToSend"],[488,32,493,40],[488,35,493,43,"Object"],[488,41,493,49],[488,42,493,50,"assign"],[488,48,493,56],[488,49,493,57],[489,14,493,59],[489,15,493,60,"GRPC_STATUS_HEADER"],[489,33,493,78],[489,36,493,81,"statusObj"],[489,45,493,90],[489,46,493,91,"code"],[489,50,493,95],[490,14,493,97],[490,15,493,98,"GRPC_MESSAGE_HEADER"],[490,34,493,117],[490,37,493,120,"encodeURI"],[490,46,493,129],[490,47,493,130,"statusObj"],[490,56,493,139],[490,57,493,140,"details"],[490,64,493,147],[491,12,493,149],[491,13,493,150],[491,15,493,152],[491,16,493,153,"_a"],[491,18,493,155],[491,21,493,158,"statusObj"],[491,30,493,167],[491,31,493,168,"metadata"],[491,39,493,176],[491,45,493,182],[491,49,493,186],[491,53,493,190,"_a"],[491,55,493,192],[491,60,493,197],[491,65,493,202],[491,66,493,203],[491,69,493,206],[491,74,493,211],[491,75,493,212],[491,78,493,215,"_a"],[491,80,493,217],[491,81,493,218,"toHttp2Headers"],[491,95,493,232],[491,96,493,233],[491,97,493,234],[491,98,493,235],[492,12,494,20],[492,16,494,24],[492,17,494,25,"stream"],[492,23,494,31],[492,24,494,32,"sendTrailers"],[492,36,494,44],[492,37,494,45,"trailersToSend"],[492,51,494,59],[492,52,494,60],[493,12,495,20],[493,16,495,24],[493,17,495,25,"statusSent"],[493,27,495,35],[493,30,495,38],[493,34,495,42],[494,10,496,16],[494,11,496,17],[494,12,496,18],[495,10,497,16],[495,14,497,20],[495,15,497,21,"stream"],[495,21,497,27],[495,22,497,28,"end"],[495,25,497,31],[495,26,497,32],[495,27,497,33],[496,8,498,12],[497,6,499,8],[497,7,499,9],[497,13,500,13],[498,8,501,12],[499,8,502,12],[499,14,502,18,"trailersToSend"],[499,28,502,32],[499,31,502,35,"Object"],[499,37,502,41],[499,38,502,42,"assign"],[499,44,502,48],[499,45,502,49,"Object"],[499,51,502,55],[499,52,502,56,"assign"],[499,58,502,62],[499,59,502,63],[500,10,502,65],[500,11,502,66,"GRPC_STATUS_HEADER"],[500,29,502,84],[500,32,502,87,"statusObj"],[500,41,502,96],[500,42,502,97,"code"],[500,46,502,101],[501,10,502,103],[501,11,502,104,"GRPC_MESSAGE_HEADER"],[501,30,502,123],[501,33,502,126,"encodeURI"],[501,42,502,135],[501,43,502,136,"statusObj"],[501,52,502,145],[501,53,502,146,"details"],[501,60,502,153],[502,8,502,155],[502,9,502,156],[502,11,502,158,"defaultResponseHeaders"],[502,33,502,180],[502,34,502,181],[502,36,502,183],[502,37,502,184,"_b"],[502,39,502,186],[502,42,502,189,"statusObj"],[502,51,502,198],[502,52,502,199,"metadata"],[502,60,502,207],[502,66,502,213],[502,70,502,217],[502,74,502,221,"_b"],[502,76,502,223],[502,81,502,228],[502,86,502,233],[502,87,502,234],[502,90,502,237],[502,95,502,242],[502,96,502,243],[502,99,502,246,"_b"],[502,101,502,248],[502,102,502,249,"toHttp2Headers"],[502,116,502,263],[502,117,502,264],[502,118,502,265],[502,119,502,266],[503,8,503,12],[503,12,503,16],[503,13,503,17,"stream"],[503,19,503,23],[503,20,503,24,"respond"],[503,27,503,31],[503,28,503,32,"trailersToSend"],[503,42,503,46],[503,44,503,48],[504,10,503,50,"endStream"],[504,19,503,59],[504,21,503,61],[505,8,503,66],[505,9,503,67],[505,10,503,68],[506,8,504,12],[506,12,504,16],[506,13,504,17,"statusSent"],[506,23,504,27],[506,26,504,30],[506,30,504,34],[507,6,505,8],[508,4,506,4],[509,4,507,4,"sendError"],[509,13,507,13,"sendError"],[509,14,507,14,"error"],[509,19,507,19],[509,21,507,21],[510,6,508,8],[510,12,508,14,"status"],[510,18,508,20],[510,21,508,23],[511,8,509,12,"code"],[511,12,509,16],[511,14,509,18,"constants_1"],[511,25,509,29],[511,26,509,30,"Status"],[511,32,509,36],[511,33,509,37,"UNKNOWN"],[511,40,509,44],[512,8,510,12,"details"],[512,15,510,19],[512,17,510,21],[512,26,510,30],[512,30,510,34,"error"],[512,35,510,39],[512,38,510,42,"error"],[512,43,510,47],[512,44,510,48,"message"],[512,51,510,55],[512,54,510,58],[512,69,510,73],[513,8,511,12,"metadata"],[513,16,511,20],[513,18,511,22],[513,28,511,32],[513,32,511,36,"error"],[513,37,511,41],[513,41,511,45,"error"],[513,46,511,50],[513,47,511,51,"metadata"],[513,55,511,59],[513,60,511,64,"undefined"],[513,69,511,73],[513,72,512,18,"error"],[513,77,512,23],[513,78,512,24,"metadata"],[513,86,512,32],[513,89,513,18],[514,6,514,8],[514,7,514,9],[515,6,515,8],[515,10,515,12],[515,16,515,18],[515,20,515,22,"error"],[515,25,515,27],[515,29,516,12],[515,36,516,19,"error"],[515,41,516,24],[515,42,516,25,"code"],[515,46,516,29],[515,51,516,34],[515,59,516,42],[515,63,517,12,"Number"],[515,69,517,18],[515,70,517,19,"isInteger"],[515,79,517,28],[515,80,517,29,"error"],[515,85,517,34],[515,86,517,35,"code"],[515,90,517,39],[515,91,517,40],[515,93,517,42],[516,8,518,12,"status"],[516,14,518,18],[516,15,518,19,"code"],[516,19,518,23],[516,22,518,26,"error"],[516,27,518,31],[516,28,518,32,"code"],[516,32,518,36],[517,8,519,12],[517,12,519,16],[517,21,519,25],[517,25,519,29,"error"],[517,30,519,34],[517,34,519,38],[517,41,519,45,"error"],[517,46,519,50],[517,47,519,51,"details"],[517,54,519,58],[517,59,519,63],[517,67,519,71],[517,69,519,73],[518,10,520,16,"status"],[518,16,520,22],[518,17,520,23,"details"],[518,24,520,30],[518,27,520,33,"error"],[518,32,520,38],[518,33,520,39,"details"],[518,40,520,46],[519,8,521,12],[520,6,522,8],[521,6,523,8],[521,10,523,12],[521,11,523,13,"sendStatus"],[521,21,523,23],[521,22,523,24,"status"],[521,28,523,30],[521,29,523,31],[522,4,524,4],[523,4,525,4,"write"],[523,9,525,9,"write"],[523,10,525,10,"chunk"],[523,15,525,15],[523,17,525,17],[524,6,526,8],[524,10,526,12],[524,14,526,16],[524,15,526,17,"checkCancelled"],[524,29,526,31],[524,30,526,32],[524,31,526,33],[524,33,526,35],[525,8,527,12],[526,6,528,8],[527,6,529,8],[527,10,529,12],[527,14,529,16],[527,15,529,17,"maxSendMessageSize"],[527,33,529,35],[527,38,529,40],[527,39,529,41],[527,40,529,42],[527,44,530,12,"chunk"],[527,49,530,17],[527,50,530,18,"length"],[527,56,530,24],[527,59,530,27],[527,63,530,31],[527,64,530,32,"maxSendMessageSize"],[527,82,530,50],[527,84,530,52],[528,8,531,12],[528,12,531,16],[528,13,531,17,"sendError"],[528,22,531,26],[528,23,531,27],[529,10,532,16,"code"],[529,14,532,20],[529,16,532,22,"constants_1"],[529,27,532,33],[529,28,532,34,"Status"],[529,34,532,40],[529,35,532,41,"RESOURCE_EXHAUSTED"],[529,53,532,59],[530,10,533,16,"details"],[530,17,533,23],[530,19,533,25],[530,52,533,58,"chunk"],[530,57,533,63],[530,58,533,64,"length"],[530,64,533,70],[530,72,533,78],[530,76,533,82],[530,77,533,83,"maxSendMessageSize"],[530,95,533,101],[531,8,534,12],[531,9,534,13],[531,10,534,14],[532,8,535,12],[533,6,536,8],[534,6,537,8],[534,10,537,12],[534,11,537,13,"sendMetadata"],[534,23,537,25],[534,24,537,26],[534,25,537,27],[535,6,538,8],[535,10,538,12],[535,11,538,13,"emit"],[535,15,538,17],[535,16,538,18],[535,29,538,31],[535,30,538,32],[536,6,539,8],[536,13,539,15],[536,17,539,19],[536,18,539,20,"stream"],[536,24,539,26],[536,25,539,27,"write"],[536,30,539,32],[536,31,539,33,"chunk"],[536,36,539,38],[536,37,539,39],[537,4,540,4],[538,4,541,4,"resume"],[538,10,541,10,"resume"],[538,11,541,10],[538,13,541,13],[539,6,542,8],[539,10,542,12],[539,11,542,13,"stream"],[539,17,542,19],[539,18,542,20,"resume"],[539,24,542,26],[539,25,542,27],[539,26,542,28],[540,4,543,4],[541,4,544,4,"setupSurfaceCall"],[541,20,544,20,"setupSurfaceCall"],[541,21,544,21,"call"],[541,25,544,25],[541,27,544,27],[542,6,545,8],[542,10,545,12],[542,11,545,13,"once"],[542,15,545,17],[542,16,545,18],[542,27,545,29],[542,29,545,31,"reason"],[542,35,545,37],[542,39,545,41],[543,8,546,12,"call"],[543,12,546,16],[543,13,546,17,"cancelled"],[543,22,546,26],[543,25,546,29],[543,29,546,33],[544,8,547,12,"call"],[544,12,547,16],[544,13,547,17,"emit"],[544,17,547,21],[544,18,547,22],[544,29,547,33],[544,31,547,35,"reason"],[544,37,547,41],[544,38,547,42],[545,6,548,8],[545,7,548,9],[545,8,548,10],[546,6,549,8],[546,10,549,12],[546,11,549,13,"once"],[546,15,549,17],[546,16,549,18],[546,25,549,27],[546,27,549,29,"status"],[546,33,549,35],[546,37,549,39,"call"],[546,41,549,43],[546,42,549,44,"emit"],[546,46,549,48],[546,47,549,49],[546,56,549,58],[546,58,549,60,"status"],[546,64,549,66],[546,65,549,67],[546,66,549,68],[547,4,550,4],[548,4,551,4,"setupReadable"],[548,17,551,17,"setupReadable"],[548,18,551,18,"readable"],[548,26,551,26],[548,28,551,28,"encoding"],[548,36,551,36],[548,38,551,38],[549,6,552,8],[549,12,552,14,"decoder"],[549,19,552,21],[549,22,552,24],[549,26,552,28,"stream_decoder_1"],[549,42,552,44],[549,43,552,45,"StreamDecoder"],[549,56,552,58],[549,57,552,59],[549,61,552,63],[549,62,552,64,"maxReceiveMessageSize"],[549,83,552,85],[549,84,552,86],[550,6,553,8],[550,10,553,12,"readsDone"],[550,19,553,21],[550,22,553,24],[550,27,553,29],[551,6,554,8],[551,10,554,12,"pendingMessageProcessing"],[551,34,554,36],[551,37,554,39],[551,42,554,44],[552,6,555,8],[552,10,555,12,"pushedEnd"],[552,19,555,21],[552,22,555,24],[552,27,555,29],[553,6,556,8],[553,12,556,14,"maybePushEnd"],[553,24,556,26],[553,27,556,29],[553,33,556,29,"maybePushEnd"],[553,34,556,29],[553,39,556,41],[554,8,557,12],[554,12,557,16],[554,13,557,17,"pushedEnd"],[554,22,557,26],[554,26,557,30,"readsDone"],[554,35,557,39],[554,39,557,43],[554,40,557,44,"pendingMessageProcessing"],[554,64,557,68],[554,66,557,70],[555,10,558,16,"pushedEnd"],[555,19,558,25],[555,22,558,28],[555,26,558,32],[556,10,559,16],[556,16,559,22],[556,20,559,26],[556,21,559,27,"pushOrBufferMessage"],[556,40,559,46],[556,41,559,47,"readable"],[556,49,559,55],[556,51,559,57],[556,55,559,61],[556,56,559,62],[557,8,560,12],[558,6,561,8],[558,7,561,9],[559,6,562,8],[559,10,562,12],[559,11,562,13,"stream"],[559,17,562,19],[559,18,562,20,"on"],[559,20,562,22],[559,21,562,23],[559,27,562,29],[559,29,562,31],[559,35,562,38,"data"],[559,39,562,42],[559,43,562,47],[560,8,563,12],[560,12,563,16,"messages"],[560,20,563,24],[561,8,564,12],[561,12,564,16],[562,10,565,16,"messages"],[562,18,565,24],[562,21,565,27,"decoder"],[562,28,565,34],[562,29,565,35,"write"],[562,34,565,40],[562,35,565,41,"data"],[562,39,565,45],[562,40,565,46],[563,8,566,12],[563,9,566,13],[563,10,567,12],[563,17,567,19,"e"],[563,18,567,20],[563,20,567,22],[564,10,568,16],[564,14,568,20],[564,15,568,21,"sendError"],[564,24,568,30],[564,25,568,31],[565,12,569,20,"code"],[565,16,569,24],[565,18,569,26,"constants_1"],[565,29,569,37],[565,30,569,38,"Status"],[565,36,569,44],[565,37,569,45,"RESOURCE_EXHAUSTED"],[565,55,569,63],[566,12,570,20,"details"],[566,19,570,27],[566,21,570,29,"e"],[566,22,570,30],[566,23,570,31,"message"],[567,10,571,16],[567,11,571,17],[567,12,571,18],[568,10,572,16],[569,8,573,12],[570,8,574,12,"pendingMessageProcessing"],[570,32,574,36],[570,35,574,39],[570,39,574,43],[571,8,575,12],[571,12,575,16],[571,13,575,17,"stream"],[571,19,575,23],[571,20,575,24,"pause"],[571,25,575,29],[571,26,575,30],[571,27,575,31],[572,8,576,12],[572,13,576,17],[572,19,576,23,"message"],[572,26,576,30],[572,30,576,34,"messages"],[572,38,576,42],[572,40,576,44],[573,10,577,16],[573,14,577,20],[573,15,577,21,"emit"],[573,19,577,25],[573,20,577,26],[573,36,577,42],[573,37,577,43],[574,10,578,16],[574,16,578,22,"compressed"],[574,26,578,32],[574,29,578,35,"message"],[574,36,578,42],[574,37,578,43,"readUInt8"],[574,46,578,52],[574,47,578,53],[574,48,578,54],[574,49,578,55],[574,54,578,60],[574,55,578,61],[575,10,579,16],[575,16,579,22,"compressedMessageEncoding"],[575,41,579,47],[575,44,579,50,"compressed"],[575,54,579,60],[575,57,579,63,"encoding"],[575,65,579,71],[575,68,579,74],[575,78,579,84],[576,10,580,16],[576,14,580,20,"decompressedMessage"],[576,33,580,39],[577,10,581,16],[577,14,581,20],[578,12,582,20,"decompressedMessage"],[578,31,582,39],[578,34,582,42],[578,40,582,48],[578,44,582,52],[578,45,582,53,"getDecompressedMessage"],[578,67,582,75],[578,68,582,76,"message"],[578,75,582,83],[578,77,582,85,"compressedMessageEncoding"],[578,102,582,110],[578,103,582,111],[579,10,583,16],[579,11,583,17],[579,12,584,16],[579,19,584,23,"e"],[579,20,584,24],[579,22,584,26],[580,12,585,20],[580,16,585,24],[580,17,585,25,"sendError"],[580,26,585,34],[580,27,585,35,"e"],[580,28,585,36],[580,29,585,37],[581,12,586,20],[582,10,587,16],[583,10,588,16],[584,10,589,16],[585,10,590,16],[585,14,590,20],[585,15,590,21,"decompressedMessage"],[585,34,590,40],[585,36,591,20],[586,10,592,16],[586,16,592,22],[586,20,592,26],[586,21,592,27,"pushOrBufferMessage"],[586,40,592,46],[586,41,592,47,"readable"],[586,49,592,55],[586,51,592,57,"decompressedMessage"],[586,70,592,76],[586,71,592,77],[587,8,593,12],[588,8,594,12,"pendingMessageProcessing"],[588,32,594,36],[588,35,594,39],[588,40,594,44],[589,8,595,12],[589,12,595,16],[589,13,595,17,"stream"],[589,19,595,23],[589,20,595,24,"resume"],[589,26,595,30],[589,27,595,31],[589,28,595,32],[590,8,596,12],[590,14,596,18,"maybePushEnd"],[590,26,596,30],[590,27,596,31],[590,28,596,32],[591,6,597,8],[591,7,597,9],[591,8,597,10],[592,6,598,8],[592,10,598,12],[592,11,598,13,"stream"],[592,17,598,19],[592,18,598,20,"once"],[592,22,598,24],[592,23,598,25],[592,28,598,30],[592,30,598,32],[592,42,598,44],[593,8,599,12,"readsDone"],[593,17,599,21],[593,20,599,24],[593,24,599,28],[594,8,600,12],[594,14,600,18,"maybePushEnd"],[594,26,600,30],[594,27,600,31],[594,28,600,32],[595,6,601,8],[595,7,601,9],[595,8,601,10],[596,4,602,4],[597,4,603,4,"consumeUnpushedMessages"],[597,27,603,27,"consumeUnpushedMessages"],[597,28,603,28,"readable"],[597,36,603,36],[597,38,603,38],[598,6,604,8],[598,10,604,12],[598,11,604,13,"canPush"],[598,18,604,20],[598,21,604,23],[598,25,604,27],[599,6,605,8],[599,13,605,15],[599,17,605,19],[599,18,605,20,"messagesToPush"],[599,32,605,34],[599,33,605,35,"length"],[599,39,605,41],[599,42,605,44],[599,43,605,45],[599,45,605,47],[600,8,606,12],[600,14,606,18,"nextMessage"],[600,25,606,29],[600,28,606,32],[600,32,606,36],[600,33,606,37,"messagesToPush"],[600,47,606,51],[600,48,606,52,"shift"],[600,53,606,57],[600,54,606,58],[600,55,606,59],[601,8,607,12],[601,14,607,18,"canPush"],[601,21,607,25],[601,24,607,28,"readable"],[601,32,607,36],[601,33,607,37,"push"],[601,37,607,41],[601,38,607,42,"nextMessage"],[601,49,607,53],[601,50,607,54],[602,8,608,12],[602,12,608,16,"nextMessage"],[602,23,608,27],[602,28,608,32],[602,32,608,36],[602,36,608,40,"canPush"],[602,43,608,47],[602,48,608,52],[602,53,608,57],[602,55,608,59],[603,10,609,16],[603,14,609,20],[603,15,609,21,"canPush"],[603,22,609,28],[603,25,609,31],[603,30,609,36],[604,10,610,16],[605,8,611,12],[606,6,612,8],[607,6,613,8],[607,13,613,15],[607,17,613,19],[607,18,613,20,"canPush"],[607,25,613,27],[608,4,614,4],[609,4,615,4],[609,10,615,10,"pushOrBufferMessage"],[609,29,615,29,"pushOrBufferMessage"],[609,30,615,30,"readable"],[609,38,615,38],[609,40,615,40,"messageBytes"],[609,52,615,52],[609,54,615,54],[610,6,616,8],[610,10,616,12],[610,14,616,16],[610,15,616,17,"isPushPending"],[610,28,616,30],[610,30,616,32],[611,8,617,12],[611,12,617,16],[611,13,617,17,"bufferedMessages"],[611,29,617,33],[611,30,617,34,"push"],[611,34,617,38],[611,35,617,39,"messageBytes"],[611,47,617,51],[611,48,617,52],[612,6,618,8],[612,7,618,9],[612,13,619,13],[613,8,620,12],[613,14,620,18],[613,18,620,22],[613,19,620,23,"pushMessage"],[613,30,620,34],[613,31,620,35,"readable"],[613,39,620,43],[613,41,620,45,"messageBytes"],[613,53,620,57],[613,54,620,58],[614,6,621,8],[615,4,622,4],[616,4,623,4],[616,10,623,10,"pushMessage"],[616,21,623,21,"pushMessage"],[616,22,623,22,"readable"],[616,30,623,30],[616,32,623,32,"messageBytes"],[616,44,623,44],[616,46,623,46],[617,6,624,8],[617,10,624,12,"messageBytes"],[617,22,624,24],[617,27,624,29],[617,31,624,33],[617,33,624,35],[618,8,625,12,"trace"],[618,13,625,17],[618,14,625,18],[618,38,625,42],[618,39,625,43],[619,8,626,12],[619,12,626,16],[619,16,626,20],[619,17,626,21,"canPush"],[619,24,626,28],[619,26,626,30],[620,10,627,16,"readable"],[620,18,627,24],[620,19,627,25,"push"],[620,23,627,29],[620,24,627,30],[620,28,627,34],[620,29,627,35],[621,8,628,12],[621,9,628,13],[621,15,629,17],[622,10,630,16],[622,14,630,20],[622,15,630,21,"messagesToPush"],[622,29,630,35],[622,30,630,36,"push"],[622,34,630,40],[622,35,630,41],[622,39,630,45],[622,40,630,46],[623,8,631,12],[624,8,632,12],[625,6,633,8],[626,6,634,8,"trace"],[626,11,634,13],[626,12,634,14],[626,41,634,43],[626,44,634,46,"messageBytes"],[626,56,634,58],[626,57,634,59,"length"],[626,63,634,65],[626,64,634,66],[627,6,635,8],[627,10,635,12],[627,11,635,13,"isPushPending"],[627,24,635,26],[627,27,635,29],[627,31,635,33],[628,6,636,8],[628,10,636,12],[629,8,637,12],[629,14,637,18,"deserialized"],[629,26,637,30],[629,29,637,33],[629,35,637,39],[629,39,637,43],[629,40,637,44,"deserializeMessage"],[629,58,637,62],[629,59,637,63,"messageBytes"],[629,71,637,75],[629,72,637,76],[630,8,638,12],[630,12,638,16],[630,16,638,20],[630,17,638,21,"canPush"],[630,24,638,28],[630,26,638,30],[631,10,639,16],[631,14,639,20],[631,15,639,21,"readable"],[631,23,639,29],[631,24,639,30,"push"],[631,28,639,34],[631,29,639,35,"deserialized"],[631,41,639,47],[631,42,639,48],[631,44,639,50],[632,12,640,20],[632,16,640,24],[632,17,640,25,"canPush"],[632,24,640,32],[632,27,640,35],[632,32,640,40],[633,12,641,20],[633,16,641,24],[633,17,641,25,"stream"],[633,23,641,31],[633,24,641,32,"pause"],[633,29,641,37],[633,30,641,38],[633,31,641,39],[634,10,642,16],[635,8,643,12],[635,9,643,13],[635,15,644,17],[636,10,645,16],[636,14,645,20],[636,15,645,21,"messagesToPush"],[636,29,645,35],[636,30,645,36,"push"],[636,34,645,40],[636,35,645,41,"deserialized"],[636,47,645,53],[636,48,645,54],[637,8,646,12],[638,6,647,8],[638,7,647,9],[638,8,648,8],[638,15,648,15,"error"],[638,20,648,20],[638,22,648,22],[639,8,649,12],[640,8,650,12],[640,12,650,16],[640,13,650,17,"bufferedMessages"],[640,29,650,33],[640,30,650,34,"length"],[640,36,650,40],[640,39,650,43],[640,40,650,44],[641,8,651,12],[641,12,651,16,"code"],[641,16,651,20],[641,19,651,23],[641,20,651,24],[641,21,651,25],[641,23,651,27,"error_1"],[641,30,651,34],[641,31,651,35,"getErrorCode"],[641,43,651,47],[641,45,651,49,"error"],[641,50,651,54],[641,51,651,55],[642,8,652,12],[642,12,652,16,"code"],[642,16,652,20],[642,21,652,25],[642,25,652,29],[642,29,652,33,"code"],[642,33,652,37],[642,36,652,40,"constants_1"],[642,47,652,51],[642,48,652,52,"Status"],[642,54,652,58],[642,55,652,59,"OK"],[642,57,652,61],[642,61,652,65,"code"],[642,65,652,69],[642,68,652,72,"constants_1"],[642,79,652,83],[642,80,652,84,"Status"],[642,86,652,90],[642,87,652,91,"UNAUTHENTICATED"],[642,102,652,106],[642,104,652,108],[643,10,653,16,"code"],[643,14,653,20],[643,17,653,23,"constants_1"],[643,28,653,34],[643,29,653,35,"Status"],[643,35,653,41],[643,36,653,42,"INTERNAL"],[643,44,653,50],[644,8,654,12],[645,8,655,12,"readable"],[645,16,655,20],[645,17,655,21,"emit"],[645,21,655,25],[645,22,655,26],[645,29,655,33],[645,31,655,35],[646,10,656,16,"details"],[646,17,656,23],[646,19,656,25],[646,20,656,26],[646,21,656,27],[646,23,656,29,"error_1"],[646,30,656,36],[646,31,656,37,"getErrorMessage"],[646,46,656,52],[646,48,656,54,"error"],[646,53,656,59],[646,54,656,60],[647,10,657,16,"code"],[647,14,657,20],[647,16,657,22,"code"],[648,8,658,12],[648,9,658,13],[648,10,658,14],[649,6,659,8],[650,6,660,8],[650,10,660,12],[650,11,660,13,"isPushPending"],[650,24,660,26],[650,27,660,29],[650,32,660,34],[651,6,661,8],[651,10,661,12],[651,14,661,16],[651,15,661,17,"bufferedMessages"],[651,31,661,33],[651,32,661,34,"length"],[651,38,661,40],[651,41,661,43],[651,42,661,44],[651,44,661,46],[652,8,662,12],[652,14,662,18],[652,18,662,22],[652,19,662,23,"pushMessage"],[652,30,662,34],[652,31,662,35,"readable"],[652,39,662,43],[652,41,662,45],[652,45,662,49],[652,46,662,50,"bufferedMessages"],[652,62,662,66],[652,63,662,67,"shift"],[652,68,662,72],[652,69,662,73],[652,70,662,74],[652,71,662,75],[653,6,663,8],[654,4,664,4],[655,4,665,4,"getPeer"],[655,11,665,11,"getPeer"],[655,12,665,11],[655,14,665,14],[656,6,666,8],[656,10,666,12,"_a"],[656,12,666,14],[657,6,667,8],[657,12,667,14,"socket"],[657,18,667,20],[657,21,667,23],[657,22,667,24,"_a"],[657,24,667,26],[657,27,667,29],[657,31,667,33],[657,32,667,34,"stream"],[657,38,667,40],[657,39,667,41,"session"],[657,46,667,48],[657,52,667,54],[657,56,667,58],[657,60,667,62,"_a"],[657,62,667,64],[657,67,667,69],[657,72,667,74],[657,73,667,75],[657,76,667,78],[657,81,667,83],[657,82,667,84],[657,85,667,87,"_a"],[657,87,667,89],[657,88,667,90,"socket"],[657,94,667,96],[658,6,668,8],[658,10,668,12,"socket"],[658,16,668,18],[658,21,668,23],[658,25,668,27],[658,29,668,31,"socket"],[658,35,668,37],[658,40,668,42],[658,45,668,47],[658,46,668,48],[658,49,668,51],[658,54,668,56],[658,55,668,57],[658,58,668,60,"socket"],[658,64,668,66],[658,65,668,67,"remoteAddress"],[658,78,668,80],[658,80,668,82],[659,8,669,12],[659,12,669,16,"socket"],[659,18,669,22],[659,19,669,23,"remotePort"],[659,29,669,33],[659,31,669,35],[660,10,670,16],[660,17,670,23],[660,20,670,26,"socket"],[660,26,670,32],[660,27,670,33,"remoteAddress"],[660,40,670,46],[660,44,670,50,"socket"],[660,50,670,56],[660,51,670,57,"remotePort"],[660,61,670,67],[660,63,670,69],[661,8,671,12],[661,9,671,13],[661,15,672,17],[662,10,673,16],[662,17,673,23,"socket"],[662,23,673,29],[662,24,673,30,"remoteAddress"],[662,37,673,43],[663,8,674,12],[664,6,675,8],[664,7,675,9],[664,13,676,13],[665,8,677,12],[665,15,677,19],[665,24,677,28],[666,6,678,8],[667,4,679,4],[668,4,680,4,"getDeadline"],[668,15,680,15,"getDeadline"],[668,16,680,15],[668,18,680,18],[669,6,681,8],[669,13,681,15],[669,17,681,19],[669,18,681,20,"deadline"],[669,26,681,28],[670,4,682,4],[671,4,683,4,"getPath"],[671,11,683,11,"getPath"],[671,12,683,11],[671,14,683,14],[672,6,684,8],[672,13,684,15],[672,17,684,19],[672,18,684,20,"handler"],[672,25,684,27],[672,26,684,28,"path"],[672,30,684,32],[673,4,685,4],[674,2,686,0],[675,2,687,0,"exports"],[675,9,687,7],[675,10,687,8,"Http2ServerCallStream"],[675,31,687,29],[675,34,687,32,"Http2ServerCallStream"],[675,55,687,53],[676,2,688,0],[676,11,688,9,"handleExpiredDeadline"],[676,32,688,30,"handleExpiredDeadline"],[676,33,688,31,"call"],[676,37,688,35],[676,39,688,37],[677,4,689,4],[677,10,689,10,"err"],[677,13,689,13],[677,16,689,16],[677,20,689,20,"Error"],[677,25,689,25],[677,26,689,26],[677,45,689,45],[677,46,689,46],[678,4,690,4,"err"],[678,7,690,7],[678,8,690,8,"code"],[678,12,690,12],[678,15,690,15,"constants_1"],[678,26,690,26],[678,27,690,27,"Status"],[678,33,690,33],[678,34,690,34,"DEADLINE_EXCEEDED"],[678,51,690,51],[679,4,691,4,"call"],[679,8,691,8],[679,9,691,9,"sendError"],[679,18,691,18],[679,19,691,19,"err"],[679,22,691,22],[679,23,691,23],[680,4,692,4,"call"],[680,8,692,8],[680,9,692,9,"cancelled"],[680,18,692,18],[680,21,692,21],[680,25,692,25],[681,4,693,4,"call"],[681,8,693,8],[681,9,693,9,"emit"],[681,13,693,13],[681,14,693,14],[681,25,693,25],[681,27,693,27],[681,37,693,37],[681,38,693,38],[682,2,694,0],[683,0,694,1],[683,3]],"functionMap":{"names":["<global>","trace","ServerUnaryCallImpl","ServerUnaryCallImpl#constructor","ServerUnaryCallImpl#getPeer","ServerUnaryCallImpl#sendMetadata","ServerUnaryCallImpl#getDeadline","ServerUnaryCallImpl#getPath","ServerReadableStreamImpl","ServerReadableStreamImpl#constructor","ServerReadableStreamImpl#_read","ServerReadableStreamImpl#getPeer","ServerReadableStreamImpl#sendMetadata","ServerReadableStreamImpl#getDeadline","ServerReadableStreamImpl#getPath","ServerWritableStreamImpl","ServerWritableStreamImpl#constructor","on$argument_1","ServerWritableStreamImpl#getPeer","ServerWritableStreamImpl#sendMetadata","ServerWritableStreamImpl#getDeadline","ServerWritableStreamImpl#getPath","ServerWritableStreamImpl#_write","ServerWritableStreamImpl#_final","ServerWritableStreamImpl#end","ServerDuplexStreamImpl","ServerDuplexStreamImpl#constructor","ServerDuplexStreamImpl#getPeer","ServerDuplexStreamImpl#sendMetadata","ServerDuplexStreamImpl#getDeadline","ServerDuplexStreamImpl#getPath","ServerDuplexStreamImpl#end","Http2ServerCallStream","Http2ServerCallStream#constructor","stream.once$argument_1","stream.on$argument_1","Http2ServerCallStream#checkCancelled","Http2ServerCallStream#getDecompressedMessage","Promise$argument_0","decompresser.on$argument_1","Http2ServerCallStream#sendMetadata","Http2ServerCallStream#receiveMetadata","Http2ServerCallStream#receiveUnaryMessage","onData","onEnd","decompressedMessage.then$argument_0","decompressedMessage.then$argument_1","Http2ServerCallStream#deserializeMessageWithInternalError","Http2ServerCallStream#serializeMessage","Http2ServerCallStream#deserializeMessage","Http2ServerCallStream#sendUnaryMessage","Http2ServerCallStream#sendStatus","Http2ServerCallStream#sendError","Http2ServerCallStream#write","Http2ServerCallStream#resume","Http2ServerCallStream#setupSurfaceCall","once$argument_1","Http2ServerCallStream#setupReadable","maybePushEnd","Http2ServerCallStream#consumeUnpushedMessages","Http2ServerCallStream#pushOrBufferMessage","Http2ServerCallStream#pushMessage","Http2ServerCallStream#getPeer","Http2ServerCallStream#getDeadline","Http2ServerCallStream#getPath","handleExpiredDeadline"],"mappings":"AAA;AC6B;CDE;AE4B;ICC;KDO;IEC;KFE;IGC;KHE;IIC;KJE;IKC;KLE;CFC;AQE;ICC;KDQ;IEC;KFK;IGC;KHE;IIC;KJE;IKC;KLE;IMC;KNE;CRC;AeE;ICC;yBCS;SDG;KDC;IGC;KHE;IIC;KJE;IKC;KLE;IMC;KNE;IOC;KPiB;IQC;KRO;ISE;KTK;CfC;AyBE;ICC;yBTU;SSG;KDC;IEC;KFE;IGC;KHE;IIC;KJE;IKC;KLE;IME;KNK;CzBC;AgCS;ICC;kCCgB;SDM;kCCC;SDkB;gCEC;SFE;KDO;IIC;KJO;IKC;+BCa;wCCG;iBDU;uCCC;iBDE;aDG;KLQ;IQC;KRY;ISC;KT8B;IUC;2BJC;YKU;aLa;YMC;yCCwB,+ED,EE;sBFK;aNC;SIC;KVC;IeC;KfU;IgBC;KhBS;IiBC;KjBE;IkBC;KlByB;ImBC;iDjBkB;iBiBK;KnBU;IoBC;KpBiB;IqBC;KrBe;IsBC;KtBE;IuBC;+BCC;SDG;6BCC,sCD;KvBC;IyBC;6BCK;SDK;+BtBC;SsBmC;gCvBC;SuBG;KzBC;I2BC;K3BW;I4BC;K5BO;I6BC;K7ByC;I8BC;K9Bc;I+BC;K/BE;IgCC;KhCE;ChCC;AiEE;CjEM"}},"type":"js/module"}]}