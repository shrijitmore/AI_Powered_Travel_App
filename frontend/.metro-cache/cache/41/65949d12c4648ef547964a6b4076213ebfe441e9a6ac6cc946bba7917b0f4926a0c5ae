{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = pool;\n\n  /**\r\n   * An allocator as used by {@link util.pool}.\r\n   * @typedef PoolAllocator\r\n   * @type {function}\r\n   * @param {number} size Buffer size\r\n   * @returns {Uint8Array} Buffer\r\n   */\n\n  /**\r\n   * A slicer as used by {@link util.pool}.\r\n   * @typedef PoolSlicer\r\n   * @type {function}\r\n   * @param {number} start Start offset\r\n   * @param {number} end End offset\r\n   * @returns {Uint8Array} Buffer slice\r\n   * @this {Uint8Array}\r\n   */\n\n  /**\r\n   * A general purpose buffer pool.\r\n   * @memberof util\r\n   * @function\r\n   * @param {PoolAllocator} alloc Allocator\r\n   * @param {PoolSlicer} slice Slicer\r\n   * @param {number} [size=8192] Slab size\r\n   * @returns {PoolAllocator} Pooled allocator\r\n   */\n  function pool(alloc, slice, size) {\n    var SIZE = size || 8192;\n    var MAX = SIZE >>> 1;\n    var slab = null;\n    var offset = SIZE;\n    return function pool_alloc(size) {\n      if (size < 1 || size > MAX) return alloc(size);\n      if (offset + size > SIZE) {\n        slab = alloc(SIZE);\n        offset = 0;\n      }\n      var buf = slice.call(slab, offset, offset += size);\n      if (offset & 7)\n        // align to 32 bit\n        offset = (offset | 7) + 1;\n      return buf;\n    };\n  }\n});","lineCount":51,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"pool"],[4,23,2,21],[6,2,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[14,2,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[24,2,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,2,31,0],[33,11,31,9,"pool"],[33,15,31,13,"pool"],[33,16,31,14,"alloc"],[33,21,31,19],[33,23,31,21,"slice"],[33,28,31,26],[33,30,31,28,"size"],[33,34,31,32],[33,36,31,34],[34,4,32,4],[34,8,32,8,"SIZE"],[34,12,32,12],[34,15,32,17,"size"],[34,19,32,21],[34,23,32,25],[34,27,32,29],[35,4,33,4],[35,8,33,8,"MAX"],[35,11,33,11],[35,14,33,17,"SIZE"],[35,18,33,21],[35,23,33,26],[35,24,33,27],[36,4,34,4],[36,8,34,8,"slab"],[36,12,34,12],[36,15,34,17],[36,19,34,21],[37,4,35,4],[37,8,35,8,"offset"],[37,14,35,14],[37,17,35,17,"SIZE"],[37,21,35,21],[38,4,36,4],[38,11,36,11],[38,20,36,20,"pool_alloc"],[38,30,36,30,"pool_alloc"],[38,31,36,31,"size"],[38,35,36,35],[38,37,36,37],[39,6,37,8],[39,10,37,12,"size"],[39,14,37,16],[39,17,37,19],[39,18,37,20],[39,22,37,24,"size"],[39,26,37,28],[39,29,37,31,"MAX"],[39,32,37,34],[39,34,38,12],[39,41,38,19,"alloc"],[39,46,38,24],[39,47,38,25,"size"],[39,51,38,29],[39,52,38,30],[40,6,39,8],[40,10,39,12,"offset"],[40,16,39,18],[40,19,39,21,"size"],[40,23,39,25],[40,26,39,28,"SIZE"],[40,30,39,32],[40,32,39,34],[41,8,40,12,"slab"],[41,12,40,16],[41,15,40,19,"alloc"],[41,20,40,24],[41,21,40,25,"SIZE"],[41,25,40,29],[41,26,40,30],[42,8,41,12,"offset"],[42,14,41,18],[42,17,41,21],[42,18,41,22],[43,6,42,8],[44,6,43,8],[44,10,43,12,"buf"],[44,13,43,15],[44,16,43,18,"slice"],[44,21,43,23],[44,22,43,24,"call"],[44,26,43,28],[44,27,43,29,"slab"],[44,31,43,33],[44,33,43,35,"offset"],[44,39,43,41],[44,41,43,43,"offset"],[44,47,43,49],[44,51,43,53,"size"],[44,55,43,57],[44,56,43,58],[45,6,44,8],[45,10,44,12,"offset"],[45,16,44,18],[45,19,44,21],[45,20,44,22],[46,8,44,24],[47,8,45,12,"offset"],[47,14,45,18],[47,17,45,21],[47,18,45,22,"offset"],[47,24,45,28],[47,27,45,31],[47,28,45,32],[47,32,45,36],[47,33,45,37],[48,6,46,8],[48,13,46,15,"buf"],[48,16,46,18],[49,4,47,4],[49,5,47,5],[50,2,48,0],[51,0,48,1],[51,3]],"functionMap":{"names":["<global>","pool","pool_alloc"],"mappings":"AAA;AC8B;WCK;KDW;CDC"}},"type":"js/module"}]}