{"dependencies":[{"name":"./enum","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":58},"end":{"line":4,"column":33,"index":75}}],"key":"gyum9HaiytxYUYAerYZvNHG09ko=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":93},"end":{"line":5,"column":33,"index":110}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = verifier;\n  var Enum = require(_dependencyMap[0], \"./enum\"),\n    util = require(_dependencyMap[1], \"./util\");\n  function invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n  }\n\n  /**\n   * Generates a partial value verifier.\n   * @param {Codegen} gen Codegen instance\n   * @param {Field} field Reflected field\n   * @param {number} fieldIndex Field index\n   * @param {string} ref Variable reference\n   * @returns {Codegen} Codegen instance\n   * @ignore\n   */\n  function genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n      if (field.resolvedType instanceof Enum) {\n        gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n        for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n        gen(\"break\")(\"}\");\n      } else {\n        gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n      }\n    } else {\n      switch (field.type) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\":\n          gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n          break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\":\n          gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n          break;\n        case \"float\":\n        case \"double\":\n          gen(\"if(typeof %s!==\\\"number\\\")\", ref)(\"return%j\", invalid(field, \"number\"));\n          break;\n        case \"bool\":\n          gen(\"if(typeof %s!==\\\"boolean\\\")\", ref)(\"return%j\", invalid(field, \"boolean\"));\n          break;\n        case \"string\":\n          gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n          break;\n        case \"bytes\":\n          gen(\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n          break;\n      }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n  }\n\n  /**\n   * Generates a partial key verifier.\n   * @param {Codegen} gen Codegen instance\n   * @param {Field} field Reflected field\n   * @param {string} ref Variable reference\n   * @returns {Codegen} Codegen instance\n   * @ignore\n   */\n  function genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n      case \"int32\":\n      case \"uint32\":\n      case \"sint32\":\n      case \"fixed32\":\n      case \"sfixed32\":\n        gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n        break;\n      case \"int64\":\n      case \"uint64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n        (\"return%j\", invalid(field, \"integer|Long key\"));\n        break;\n      case \"bool\":\n        gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n        break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n  }\n\n  /**\n   * Generates a verifier specific to the specified message type.\n   * @param {Type} mtype Message type\n   * @returns {Codegen} Codegen instance\n   */\n  function verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")(\"if(typeof m!==\\\"object\\\"||m===null)\")(\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n      seenFirstField = {};\n    if (oneofs.length) gen(\"var p={}\");\n    for (var i = 0; i < /* initializes */mtype.fieldsArray.length; ++i) {\n      var field = mtype._fieldsArray[i].resolve(),\n        ref = \"m\" + util.safeProp(field.name);\n      if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n      // map fields\n      if (field.map) {\n        gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n        genVerifyKey(gen, field, \"k[i]\");\n        genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n\n        // repeated fields\n      } else if (field.repeated) {\n        gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n        genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n\n        // required or present fields\n      } else {\n        if (field.partOf) {\n          var oneofProp = util.safeProp(field.partOf.name);\n          if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n          seenFirstField[field.partOf.name] = 1;\n          gen(\"p%s=1\", oneofProp);\n        }\n        genVerifyValue(gen, field, i, ref);\n      }\n      if (field.optional) gen(\"}\");\n    }\n    return gen(\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n  }\n});","lineCount":142,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"verifier"],[4,27,2,25],[5,2,4,0],[5,6,4,4,"Enum"],[5,10,4,8],[5,13,4,16,"require"],[5,20,4,23],[5,21,4,23,"_dependencyMap"],[5,35,4,23],[5,48,4,32],[5,49,4,33],[6,4,5,4,"util"],[6,8,5,8],[6,11,5,16,"require"],[6,18,5,23],[6,19,5,23,"_dependencyMap"],[6,33,5,23],[6,46,5,32],[6,47,5,33],[7,2,7,0],[7,11,7,9,"invalid"],[7,18,7,16,"invalid"],[7,19,7,17,"field"],[7,24,7,22],[7,26,7,24,"expected"],[7,34,7,32],[7,36,7,34],[8,4,8,4],[8,11,8,11,"field"],[8,16,8,16],[8,17,8,17,"name"],[8,21,8,21],[8,24,8,24],[8,28,8,28],[8,31,8,31,"expected"],[8,39,8,39],[8,43,8,43,"field"],[8,48,8,48],[8,49,8,49,"repeated"],[8,57,8,57],[8,61,8,61,"expected"],[8,69,8,69],[8,74,8,74],[8,81,8,81],[8,84,8,84],[8,88,8,88],[8,91,8,91,"field"],[8,96,8,96],[8,97,8,97,"map"],[8,100,8,100],[8,104,8,104,"expected"],[8,112,8,112],[8,117,8,117],[8,125,8,125],[8,128,8,128],[8,133,8,133],[8,136,8,134,"field"],[8,141,8,139],[8,142,8,140,"keyType"],[8,149,8,147],[8,152,8,148],[8,155,8,151],[8,158,8,154],[8,160,8,156],[8,161,8,157],[8,164,8,160],[8,175,8,171],[9,2,9,0],[11,2,11,0],[12,0,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,2,20,0],[20,11,20,9,"genVerifyValue"],[20,25,20,23,"genVerifyValue"],[20,26,20,24,"gen"],[20,29,20,27],[20,31,20,29,"field"],[20,36,20,34],[20,38,20,36,"fieldIndex"],[20,48,20,46],[20,50,20,48,"ref"],[20,53,20,51],[20,55,20,53],[21,4,21,4],[22,4,22,4],[22,8,22,8,"field"],[22,13,22,13],[22,14,22,14,"resolvedType"],[22,26,22,26],[22,28,22,28],[23,6,23,8],[23,10,23,12,"field"],[23,15,23,17],[23,16,23,18,"resolvedType"],[23,28,23,30],[23,40,23,42,"Enum"],[23,44,23,46],[23,46,23,48],[24,8,23,50,"gen"],[24,11,23,53],[24,12,24,13],[24,25,24,26],[24,27,24,28,"ref"],[24,30,24,31],[24,31,24,32],[24,32,25,17],[24,42,25,27],[24,43,25,28],[24,44,26,21],[24,54,26,31],[24,56,26,33,"invalid"],[24,63,26,40],[24,64,26,41,"field"],[24,69,26,46],[24,71,26,48],[24,83,26,60],[24,84,26,61],[24,85,26,62],[25,8,27,12],[25,13,27,17],[25,17,27,21,"keys"],[25,21,27,25],[25,24,27,28,"Object"],[25,30,27,34],[25,31,27,35,"keys"],[25,35,27,39],[25,36,27,40,"field"],[25,41,27,45],[25,42,27,46,"resolvedType"],[25,54,27,58],[25,55,27,59,"values"],[25,61,27,65],[25,62,27,66],[25,64,27,68,"j"],[25,65,27,69],[25,68,27,72],[25,69,27,73],[25,71,27,75,"j"],[25,72,27,76],[25,75,27,79,"keys"],[25,79,27,83],[25,80,27,84,"length"],[25,86,27,90],[25,88,27,92],[25,90,27,94,"j"],[25,91,27,95],[25,93,27,97,"gen"],[25,96,27,100],[25,97,28,17],[25,107,28,27],[25,109,28,29,"field"],[25,114,28,34],[25,115,28,35,"resolvedType"],[25,127,28,47],[25,128,28,48,"values"],[25,134,28,54],[25,135,28,55,"keys"],[25,139,28,59],[25,140,28,60,"j"],[25,141,28,61],[25,142,28,62],[25,143,28,63],[25,144,28,64],[26,8,29,12,"gen"],[26,11,29,15],[26,12,30,21],[26,19,30,28],[26,20,30,29],[26,21,31,13],[26,24,31,16],[26,25,31,17],[27,6,32,8],[27,7,32,9],[27,13,32,15],[28,8,33,12,"gen"],[28,11,33,15],[28,12,34,13],[28,15,34,16],[28,16,34,17],[28,17,35,17],[28,46,35,46],[28,48,35,48,"fieldIndex"],[28,58,35,58],[28,60,35,60,"ref"],[28,63,35,63],[28,64,35,64],[28,65,36,17],[28,72,36,24],[28,73,36,25],[28,74,37,21],[28,86,37,33],[28,88,37,35,"field"],[28,93,37,40],[28,94,37,41,"name"],[28,98,37,45],[28,101,37,48],[28,104,37,51],[28,105,37,52],[28,106,38,13],[28,109,38,16],[28,110,38,17],[29,6,39,8],[30,4,40,4],[30,5,40,5],[30,11,40,11],[31,6,41,8],[31,14,41,16,"field"],[31,19,41,21],[31,20,41,22,"type"],[31,24,41,26],[32,8,42,12],[32,13,42,17],[32,20,42,24],[33,8,43,12],[33,13,43,17],[33,21,43,25],[34,8,44,12],[34,13,44,17],[34,21,44,25],[35,8,45,12],[35,13,45,17],[35,22,45,26],[36,8,46,12],[36,13,46,17],[36,23,46,27],[37,10,46,29,"gen"],[37,13,46,32],[37,14,47,17],[37,39,47,42],[37,41,47,44,"ref"],[37,44,47,47],[37,45,47,48],[37,46,48,21],[37,56,48,31],[37,58,48,33,"invalid"],[37,65,48,40],[37,66,48,41,"field"],[37,71,48,46],[37,73,48,48],[37,82,48,57],[37,83,48,58],[37,84,48,59],[38,10,49,16],[39,8,50,12],[39,13,50,17],[39,20,50,24],[40,8,51,12],[40,13,51,17],[40,21,51,25],[41,8,52,12],[41,13,52,17],[41,21,52,25],[42,8,53,12],[42,13,53,17],[42,22,53,26],[43,8,54,12],[43,13,54,17],[43,23,54,27],[44,10,54,29,"gen"],[44,13,54,32],[44,14,55,17],[44,95,55,98],[44,97,55,100,"ref"],[44,100,55,103],[44,102,55,105,"ref"],[44,105,55,108],[44,107,55,110,"ref"],[44,110,55,113],[44,112,55,115,"ref"],[44,115,55,118],[44,116,55,119],[44,117,56,21],[44,127,56,31],[44,129,56,33,"invalid"],[44,136,56,40],[44,137,56,41,"field"],[44,142,56,46],[44,144,56,48],[44,158,56,62],[44,159,56,63],[44,160,56,64],[45,10,57,16],[46,8,58,12],[46,13,58,17],[46,20,58,24],[47,8,59,12],[47,13,59,17],[47,21,59,25],[48,10,59,27,"gen"],[48,13,59,30],[48,14,60,17],[48,42,60,45],[48,44,60,47,"ref"],[48,47,60,50],[48,48,60,51],[48,49,61,21],[48,59,61,31],[48,61,61,33,"invalid"],[48,68,61,40],[48,69,61,41,"field"],[48,74,61,46],[48,76,61,48],[48,84,61,56],[48,85,61,57],[48,86,61,58],[49,10,62,16],[50,8,63,12],[50,13,63,17],[50,19,63,23],[51,10,63,25,"gen"],[51,13,63,28],[51,14,64,17],[51,43,64,46],[51,45,64,48,"ref"],[51,48,64,51],[51,49,64,52],[51,50,65,21],[51,60,65,31],[51,62,65,33,"invalid"],[51,69,65,40],[51,70,65,41,"field"],[51,75,65,46],[51,77,65,48],[51,86,65,57],[51,87,65,58],[51,88,65,59],[52,10,66,16],[53,8,67,12],[53,13,67,17],[53,21,67,25],[54,10,67,27,"gen"],[54,13,67,30],[54,14,68,17],[54,38,68,41],[54,40,68,43,"ref"],[54,43,68,46],[54,44,68,47],[54,45,69,21],[54,55,69,31],[54,57,69,33,"invalid"],[54,64,69,40],[54,65,69,41,"field"],[54,70,69,46],[54,72,69,48],[54,80,69,56],[54,81,69,57],[54,82,69,58],[55,10,70,16],[56,8,71,12],[56,13,71,17],[56,20,71,24],[57,10,71,26,"gen"],[57,13,71,29],[57,14,72,17],[57,75,72,78],[57,77,72,80,"ref"],[57,80,72,83],[57,82,72,85,"ref"],[57,85,72,88],[57,87,72,90,"ref"],[57,90,72,93],[57,91,72,94],[57,92,73,21],[57,102,73,31],[57,104,73,33,"invalid"],[57,111,73,40],[57,112,73,41,"field"],[57,117,73,46],[57,119,73,48],[57,127,73,56],[57,128,73,57],[57,129,73,58],[58,10,74,16],[59,6,75,8],[60,4,76,4],[61,4,77,4],[61,11,77,11,"gen"],[61,14,77,14],[62,4,78,4],[63,2,79,0],[65,2,81,0],[66,0,82,0],[67,0,83,0],[68,0,84,0],[69,0,85,0],[70,0,86,0],[71,0,87,0],[72,0,88,0],[73,2,89,0],[73,11,89,9,"genVerifyKey"],[73,23,89,21,"genVerifyKey"],[73,24,89,22,"gen"],[73,27,89,25],[73,29,89,27,"field"],[73,34,89,32],[73,36,89,34,"ref"],[73,39,89,37],[73,41,89,39],[74,4,90,4],[75,4,91,4],[75,12,91,12,"field"],[75,17,91,17],[75,18,91,18,"keyType"],[75,25,91,25],[76,6,92,8],[76,11,92,13],[76,18,92,20],[77,6,93,8],[77,11,93,13],[77,19,93,21],[78,6,94,8],[78,11,94,13],[78,19,94,21],[79,6,95,8],[79,11,95,13],[79,20,95,22],[80,6,96,8],[80,11,96,13],[80,21,96,23],[81,8,96,25,"gen"],[81,11,96,28],[81,12,97,13],[81,40,97,41],[81,42,97,43,"ref"],[81,45,97,46],[81,46,97,47],[81,47,98,17],[81,57,98,27],[81,59,98,29,"invalid"],[81,66,98,36],[81,67,98,37,"field"],[81,72,98,42],[81,74,98,44],[81,87,98,57],[81,88,98,58],[81,89,98,59],[82,8,99,12],[83,6,100,8],[83,11,100,13],[83,18,100,20],[84,6,101,8],[84,11,101,13],[84,19,101,21],[85,6,102,8],[85,11,102,13],[85,19,102,21],[86,6,103,8],[86,11,103,13],[86,20,103,22],[87,6,104,8],[87,11,104,13],[87,21,104,23],[88,8,104,25,"gen"],[88,11,104,28],[88,12,105,13],[88,40,105,41],[88,42,105,43,"ref"],[88,45,105,46],[88,46,105,47],[88,47,105,48],[89,8,105,48],[89,9,106,17],[89,19,106,27],[89,21,106,29,"invalid"],[89,28,106,36],[89,29,106,37,"field"],[89,34,106,42],[89,36,106,44],[89,54,106,62],[89,55,106,63],[89,56,106,64],[90,8,107,12],[91,6,108,8],[91,11,108,13],[91,17,108,19],[92,8,108,21,"gen"],[92,11,108,24],[92,12,109,13],[92,39,109,40],[92,41,109,42,"ref"],[92,44,109,45],[92,45,109,46],[92,46,110,17],[92,56,110,27],[92,58,110,29,"invalid"],[92,65,110,36],[92,66,110,37,"field"],[92,71,110,42],[92,73,110,44],[92,86,110,57],[92,87,110,58],[92,88,110,59],[93,8,111,12],[94,4,112,4],[95,4,113,4],[95,11,113,11,"gen"],[95,14,113,14],[96,4,114,4],[97,2,115,0],[99,2,117,0],[100,0,118,0],[101,0,119,0],[102,0,120,0],[103,0,121,0],[104,2,122,0],[104,11,122,9,"verifier"],[104,19,122,17,"verifier"],[104,20,122,18,"mtype"],[104,25,122,23],[104,27,122,25],[105,4,123,4],[107,4,125,4],[107,8,125,8,"gen"],[107,11,125,11],[107,14,125,14,"util"],[107,18,125,18],[107,19,125,19,"codegen"],[107,26,125,26],[107,27,125,27],[107,28,125,28],[107,31,125,31],[107,32,125,32],[107,34,125,34,"mtype"],[107,39,125,39],[107,40,125,40,"name"],[107,44,125,44],[107,47,125,47],[107,56,125,56],[107,57,125,57],[107,58,126,5],[107,95,126,42],[107,96,126,43],[107,97,127,9],[107,107,127,19],[107,109,127,21],[107,126,127,38],[107,127,127,39],[108,4,128,4],[108,8,128,8,"oneofs"],[108,14,128,14],[108,17,128,17,"mtype"],[108,22,128,22],[108,23,128,23,"oneofsArray"],[108,34,128,34],[109,6,129,8,"seenFirstField"],[109,20,129,22],[109,23,129,25],[109,24,129,26],[109,25,129,27],[110,4,130,4],[110,8,130,8,"oneofs"],[110,14,130,14],[110,15,130,15,"length"],[110,21,130,21],[110,23,130,23,"gen"],[110,26,130,26],[110,27,131,5],[110,37,131,15],[110,38,131,16],[111,4,133,4],[111,9,133,9],[111,13,133,13,"i"],[111,14,133,14],[111,17,133,17],[111,18,133,18],[111,20,133,20,"i"],[111,21,133,21],[111,24,133,24],[111,41,133,42,"mtype"],[111,46,133,47],[111,47,133,48,"fieldsArray"],[111,58,133,59],[111,59,133,60,"length"],[111,65,133,66],[111,67,133,68],[111,69,133,70,"i"],[111,70,133,71],[111,72,133,73],[112,6,134,8],[112,10,134,12,"field"],[112,15,134,17],[112,18,134,20,"mtype"],[112,23,134,25],[112,24,134,26,"_fieldsArray"],[112,36,134,38],[112,37,134,39,"i"],[112,38,134,40],[112,39,134,41],[112,40,134,42,"resolve"],[112,47,134,49],[112,48,134,50],[112,49,134,51],[113,8,135,12,"ref"],[113,11,135,15],[113,14,135,20],[113,17,135,23],[113,20,135,26,"util"],[113,24,135,30],[113,25,135,31,"safeProp"],[113,33,135,39],[113,34,135,40,"field"],[113,39,135,45],[113,40,135,46,"name"],[113,44,135,50],[113,45,135,51],[114,6,137,8],[114,10,137,12,"field"],[114,15,137,17],[114,16,137,18,"optional"],[114,24,137,26],[114,26,137,28,"gen"],[114,29,137,31],[114,30,138,9],[114,67,138,46],[114,69,138,48,"ref"],[114,72,138,51],[114,74,138,53,"field"],[114,79,138,58],[114,80,138,59,"name"],[114,84,138,63],[114,85,138,64],[114,86,138,65],[114,87,138,66],[116,6,140,8],[117,6,141,8],[117,10,141,12,"field"],[117,15,141,17],[117,16,141,18,"map"],[117,19,141,21],[117,21,141,23],[118,8,141,25,"gen"],[118,11,141,28],[118,12,142,13],[118,36,142,37],[118,38,142,39,"ref"],[118,41,142,42],[118,42,142,43],[118,43,143,17],[118,53,143,27],[118,55,143,29,"invalid"],[118,62,143,36],[118,63,143,37,"field"],[118,68,143,42],[118,70,143,44],[118,78,143,52],[118,79,143,53],[118,80,143,54],[118,81,144,13],[118,104,144,36],[118,106,144,38,"ref"],[118,109,144,41],[118,110,144,42],[118,111,145,13],[118,141,145,43],[118,142,145,44],[119,8,146,16,"genVerifyKey"],[119,20,146,28],[119,21,146,29,"gen"],[119,24,146,32],[119,26,146,34,"field"],[119,31,146,39],[119,33,146,41],[119,39,146,47],[119,40,146,48],[120,8,147,16,"genVerifyValue"],[120,22,147,30],[120,23,147,31,"gen"],[120,26,147,34],[120,28,147,36,"field"],[120,33,147,41],[120,35,147,43,"i"],[120,36,147,44],[120,38,147,46,"ref"],[120,41,147,49],[120,44,147,52],[120,52,147,60],[120,53,147,61],[120,54,148,13],[120,57,148,16],[120,58,148,17],[122,8,150,8],[123,6,151,8],[123,7,151,9],[123,13,151,15],[123,17,151,19,"field"],[123,22,151,24],[123,23,151,25,"repeated"],[123,31,151,33],[123,33,151,35],[124,8,151,37,"gen"],[124,11,151,40],[124,12,152,13],[124,36,152,37],[124,38,152,39,"ref"],[124,41,152,42],[124,42,152,43],[124,43,153,17],[124,53,153,27],[124,55,153,29,"invalid"],[124,62,153,36],[124,63,153,37,"field"],[124,68,153,42],[124,70,153,44],[124,77,153,51],[124,78,153,52],[124,79,153,53],[124,80,154,13],[124,111,154,44],[124,113,154,46,"ref"],[124,116,154,49],[124,117,154,50],[125,8,155,16,"genVerifyValue"],[125,22,155,30],[125,23,155,31,"gen"],[125,26,155,34],[125,28,155,36,"field"],[125,33,155,41],[125,35,155,43,"i"],[125,36,155,44],[125,38,155,46,"ref"],[125,41,155,49],[125,44,155,52],[125,49,155,57],[125,50,155,58],[125,51,156,13],[125,54,156,16],[125,55,156,17],[127,8,158,8],[128,6,159,8],[128,7,159,9],[128,13,159,15],[129,8,160,12],[129,12,160,16,"field"],[129,17,160,21],[129,18,160,22,"partOf"],[129,24,160,28],[129,26,160,30],[130,10,161,16],[130,14,161,20,"oneofProp"],[130,23,161,29],[130,26,161,32,"util"],[130,30,161,36],[130,31,161,37,"safeProp"],[130,39,161,45],[130,40,161,46,"field"],[130,45,161,51],[130,46,161,52,"partOf"],[130,52,161,58],[130,53,161,59,"name"],[130,57,161,63],[130,58,161,64],[131,10,162,16],[131,14,162,20,"seenFirstField"],[131,28,162,34],[131,29,162,35,"field"],[131,34,162,40],[131,35,162,41,"partOf"],[131,41,162,47],[131,42,162,48,"name"],[131,46,162,52],[131,47,162,53],[131,52,162,58],[131,53,162,59],[131,55,162,61,"gen"],[131,58,162,64],[131,59,163,13],[131,72,163,26],[131,74,163,28,"oneofProp"],[131,83,163,37],[131,84,163,38],[131,85,164,17],[131,95,164,27],[131,97,164,29,"field"],[131,102,164,34],[131,103,164,35,"partOf"],[131,109,164,41],[131,110,164,42,"name"],[131,114,164,46],[131,117,164,49],[131,136,164,68],[131,137,164,69],[132,10,165,16,"seenFirstField"],[132,24,165,30],[132,25,165,31,"field"],[132,30,165,36],[132,31,165,37,"partOf"],[132,37,165,43],[132,38,165,44,"name"],[132,42,165,48],[132,43,165,49],[132,46,165,52],[132,47,165,53],[133,10,166,16,"gen"],[133,13,166,19],[133,14,167,13],[133,21,167,20],[133,23,167,22,"oneofProp"],[133,32,167,31],[133,33,167,32],[134,8,168,12],[135,8,169,12,"genVerifyValue"],[135,22,169,26],[135,23,169,27,"gen"],[135,26,169,30],[135,28,169,32,"field"],[135,33,169,37],[135,35,169,39,"i"],[135,36,169,40],[135,38,169,42,"ref"],[135,41,169,45],[135,42,169,46],[136,6,170,8],[137,6,171,8],[137,10,171,12,"field"],[137,15,171,17],[137,16,171,18,"optional"],[137,24,171,26],[137,26,171,28,"gen"],[137,29,171,31],[137,30,172,9],[137,33,172,12],[137,34,172,13],[138,4,173,4],[139,4,174,4],[139,11,174,11,"gen"],[139,14,174,14],[139,15,175,5],[139,28,175,18],[139,29,175,19],[140,4,176,4],[141,2,177,0],[142,0,177,1],[142,3]],"functionMap":{"names":["<global>","invalid","genVerifyValue","genVerifyKey","verifier"],"mappings":"AAA;ACM;CDE;AEW;CF2D;AGU;CH0B;AIO"}},"type":"js/module"}]}