{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = tokenize;\n  var delimRe = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n  var setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n  var unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n  };\n\n  /**\n   * Unescapes a string.\n   * @param {string} str String to unescape\n   * @returns {string} Unescaped string\n   * @property {Object.<string,string>} map Special characters map\n   * @memberof tokenize\n   */\n  function unescape(str) {\n    return str.replace(unescapeRe, function ($0, $1) {\n      switch ($1) {\n        case \"\\\\\":\n        case \"\":\n          return $1;\n        default:\n          return unescapeMap[$1] || \"\";\n      }\n    });\n  }\n  tokenize.unescape = unescape;\n\n  /**\n   * Gets the next token and advances.\n   * @typedef TokenizerHandleNext\n   * @type {function}\n   * @returns {string|null} Next token or `null` on eof\n   */\n\n  /**\n   * Peeks for the next token.\n   * @typedef TokenizerHandlePeek\n   * @type {function}\n   * @returns {string|null} Next token or `null` on eof\n   */\n\n  /**\n   * Pushes a token back to the stack.\n   * @typedef TokenizerHandlePush\n   * @type {function}\n   * @param {string} token Token\n   * @returns {undefined}\n   */\n\n  /**\n   * Skips the next token.\n   * @typedef TokenizerHandleSkip\n   * @type {function}\n   * @param {string} expected Expected token\n   * @param {boolean} [optional=false] If optional\n   * @returns {boolean} Whether the token matched\n   * @throws {Error} If the token didn't match and is not optional\n   */\n\n  /**\n   * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n   * @typedef TokenizerHandleCmnt\n   * @type {function}\n   * @param {number} [line] Line number\n   * @returns {string|null} Comment text or `null` if none\n   */\n\n  /**\n   * Handle object returned from {@link tokenize}.\n   * @interface ITokenizerHandle\n   * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n   * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n   * @property {TokenizerHandlePush} push Pushes a token back to the stack\n   * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n   * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n   * @property {number} line Current line number\n   */\n\n  /**\n   * Tokenizes the given .proto source and returns an object with useful utility functions.\n   * @param {string} source Source contents\n   * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n   * @returns {ITokenizerHandle} Tokenizer handle\n   */\n  function tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n    var offset = 0,\n      length = source.length,\n      line = 1,\n      lastCommentLine = 0,\n      comments = {};\n    var stack = [];\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n      return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n      var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n      re.lastIndex = offset - 1;\n      var match = re.exec(source);\n      if (!match) throw illegal(\"string\");\n      offset = re.lastIndex;\n      push(stringDelim);\n      stringDelim = null;\n      return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n      return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n      var comment = {\n        type: source.charAt(start++),\n        lineEmpty: false,\n        leading: isLeading\n      };\n      var lookback;\n      if (alternateCommentMode) {\n        lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n      } else {\n        lookback = 3; // \"///\" or \"/**\"\n      }\n      var commentOffset = start - lookback,\n        c;\n      do {\n        if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n          comment.lineEmpty = true;\n          break;\n        }\n      } while (c === \" \" || c === \"\\t\");\n      var lines = source.substring(start, end).split(setCommentSplitRe);\n      for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n      comment.text = lines.join(\"\\n\").trim();\n      comments[line] = comment;\n      lastCommentLine = line;\n    }\n    function isDoubleSlashCommentLine(startOffset) {\n      var endOffset = findEndOfLine(startOffset);\n\n      // see if remaining line matches comment pattern\n      var lineText = source.substring(startOffset, endOffset);\n      var isComment = /^\\s*\\/\\//.test(lineText);\n      return isComment;\n    }\n    function findEndOfLine(cursor) {\n      // find end of cursor's line\n      var endOffset = cursor;\n      while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n        endOffset++;\n      }\n      return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n      if (stack.length > 0) return stack.shift();\n      if (stringDelim) return readString();\n      var repeat,\n        prev,\n        curr,\n        start,\n        isDoc,\n        isLeadingComment = offset === 0;\n      do {\n        if (offset === length) return null;\n        repeat = false;\n        while (whitespaceRe.test(curr = charAt(offset))) {\n          if (curr === \"\\n\") {\n            isLeadingComment = true;\n            ++line;\n          }\n          if (++offset === length) return null;\n        }\n        if (charAt(offset) === \"/\") {\n          if (++offset === length) {\n            throw illegal(\"comment\");\n          }\n          if (charAt(offset) === \"/\") {\n            // Line\n            if (!alternateCommentMode) {\n              // check for triple-slash comment\n              isDoc = charAt(start = offset + 1) === \"/\";\n              while (charAt(++offset) !== \"\\n\") {\n                if (offset === length) {\n                  return null;\n                }\n              }\n              ++offset;\n              if (isDoc) {\n                setComment(start, offset - 1, isLeadingComment);\n                // Trailing comment cannot not be multi-line,\n                // so leading comment state should be reset to handle potential next comments\n                isLeadingComment = true;\n              }\n              ++line;\n              repeat = true;\n            } else {\n              // check for double-slash comments, consolidating consecutive lines\n              start = offset;\n              isDoc = false;\n              if (isDoubleSlashCommentLine(offset - 1)) {\n                isDoc = true;\n                do {\n                  offset = findEndOfLine(offset);\n                  if (offset === length) {\n                    break;\n                  }\n                  offset++;\n                  if (!isLeadingComment) {\n                    // Trailing comment cannot not be multi-line\n                    break;\n                  }\n                } while (isDoubleSlashCommentLine(offset));\n              } else {\n                offset = Math.min(length, findEndOfLine(offset) + 1);\n              }\n              if (isDoc) {\n                setComment(start, offset, isLeadingComment);\n                isLeadingComment = true;\n              }\n              line++;\n              repeat = true;\n            }\n          } else if ((curr = charAt(offset)) === \"*\") {\n            /* Block */\n            // check for /** (regular comment mode) or /* (alternate comment mode)\n            start = offset + 1;\n            isDoc = alternateCommentMode || charAt(start) === \"*\";\n            do {\n              if (curr === \"\\n\") {\n                ++line;\n              }\n              if (++offset === length) {\n                throw illegal(\"comment\");\n              }\n              prev = curr;\n              curr = charAt(offset);\n            } while (prev !== \"*\" || curr !== \"/\");\n            ++offset;\n            if (isDoc) {\n              setComment(start, offset - 2, isLeadingComment);\n              isLeadingComment = true;\n            }\n            repeat = true;\n          } else {\n            return \"/\";\n          }\n        }\n      } while (repeat);\n\n      // offset !== length if we got here\n\n      var end = offset;\n      delimRe.lastIndex = 0;\n      var delim = delimRe.test(charAt(end++));\n      if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;\n      var token = source.substring(offset, offset = end);\n      if (token === \"\\\"\" || token === \"'\") stringDelim = token;\n      return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n      stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n      if (!stack.length) {\n        var token = next();\n        if (token === null) return null;\n        push(token);\n      }\n      return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n      var actual = peek(),\n        equals = actual === expected;\n      if (equals) {\n        next();\n        return true;\n      }\n      if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n      return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n      var ret = null;\n      var comment;\n      if (trailingLine === undefined) {\n        comment = comments[line - 1];\n        delete comments[line - 1];\n        if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n          ret = comment.leading ? comment.text : null;\n        }\n      } else {\n        /* istanbul ignore else */\n        if (lastCommentLine < trailingLine) {\n          peek();\n        }\n        comment = comments[trailingLine];\n        delete comments[trailingLine];\n        if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n          ret = comment.leading ? null : comment.text;\n        }\n      }\n      return ret;\n    }\n    return Object.defineProperty({\n      next: next,\n      peek: peek,\n      push: push,\n      skip: skip,\n      cmnt: cmnt\n    }, \"line\", {\n      get: function () {\n        return line;\n      }\n    });\n    /* eslint-enable callback-return */\n  }\n});","lineCount":392,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"tokenize"],[4,27,2,25],[5,2,4,0],[5,6,4,4,"delimRe"],[5,13,4,11],[5,16,4,21],[5,38,4,43],[6,4,5,4,"stringDoubleRe"],[6,18,5,18],[6,21,5,21],[6,54,5,54],[7,4,6,4,"stringSingleRe"],[7,18,6,18],[7,21,6,21],[7,54,6,54],[8,2,8,0],[8,6,8,4,"setCommentRe"],[8,18,8,16],[8,21,8,19],[8,33,8,31],[9,4,9,4,"setCommentAltRe"],[9,19,9,19],[9,22,9,22],[9,34,9,34],[10,4,10,4,"setCommentSplitRe"],[10,21,10,21],[10,24,10,24],[10,29,10,29],[11,4,11,4,"whitespaceRe"],[11,16,11,16],[11,19,11,19],[11,23,11,23],[12,4,12,4,"unescapeRe"],[12,14,12,14],[12,17,12,17],[12,26,12,26],[13,2,14,0],[13,6,14,4,"unescapeMap"],[13,17,14,15],[13,20,14,18],[14,4,15,4],[14,7,15,7],[14,9,15,9],[14,13,15,13],[15,4,16,4],[15,7,16,7],[15,9,16,9],[15,13,16,13],[16,4,17,4],[16,7,17,7],[16,9,17,9],[16,13,17,13],[17,4,18,4],[17,7,18,7],[17,9,18,9],[18,2,19,0],[18,3,19,1],[20,2,21,0],[21,0,22,0],[22,0,23,0],[23,0,24,0],[24,0,25,0],[25,0,26,0],[26,0,27,0],[27,2,28,0],[27,11,28,9,"unescape"],[27,19,28,17,"unescape"],[27,20,28,18,"str"],[27,23,28,21],[27,25,28,23],[28,4,29,4],[28,11,29,11,"str"],[28,14,29,14],[28,15,29,15,"replace"],[28,22,29,22],[28,23,29,23,"unescapeRe"],[28,33,29,33],[28,35,29,35],[28,45,29,44,"$0"],[28,47,29,46],[28,49,29,48,"$1"],[28,51,29,50],[28,53,29,52],[29,6,30,8],[29,14,30,16,"$1"],[29,16,30,18],[30,8,31,12],[30,13,31,17],[30,17,31,21],[31,8,32,12],[31,13,32,17],[31,15,32,19],[32,10,33,16],[32,17,33,23,"$1"],[32,19,33,25],[33,8,34,12],[34,10,35,16],[34,17,35,23,"unescapeMap"],[34,28,35,34],[34,29,35,35,"$1"],[34,31,35,37],[34,32,35,38],[34,36,35,42],[34,38,35,44],[35,6,36,8],[36,4,37,4],[36,5,37,5],[36,6,37,6],[37,2,38,0],[38,2,40,0,"tokenize"],[38,10,40,8],[38,11,40,9,"unescape"],[38,19,40,17],[38,22,40,20,"unescape"],[38,30,40,28],[40,2,42,0],[41,0,43,0],[42,0,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[47,2,49,0],[48,0,50,0],[49,0,51,0],[50,0,52,0],[51,0,53,0],[52,0,54,0],[54,2,56,0],[55,0,57,0],[56,0,58,0],[57,0,59,0],[58,0,60,0],[59,0,61,0],[60,0,62,0],[62,2,64,0],[63,0,65,0],[64,0,66,0],[65,0,67,0],[66,0,68,0],[67,0,69,0],[68,0,70,0],[69,0,71,0],[70,0,72,0],[72,2,74,0],[73,0,75,0],[74,0,76,0],[75,0,77,0],[76,0,78,0],[77,0,79,0],[78,0,80,0],[80,2,82,0],[81,0,83,0],[82,0,84,0],[83,0,85,0],[84,0,86,0],[85,0,87,0],[86,0,88,0],[87,0,89,0],[88,0,90,0],[89,0,91,0],[91,2,93,0],[92,0,94,0],[93,0,95,0],[94,0,96,0],[95,0,97,0],[96,0,98,0],[97,2,99,0],[97,11,99,9,"tokenize"],[97,19,99,17,"tokenize"],[97,20,99,18,"source"],[97,26,99,24],[97,28,99,26,"alternateCommentMode"],[97,48,99,46],[97,50,99,48],[98,4,100,4],[99,4,101,4,"source"],[99,10,101,10],[99,13,101,13,"source"],[99,19,101,19],[99,20,101,20,"toString"],[99,28,101,28],[99,29,101,29],[99,30,101,30],[100,4,103,4],[100,8,103,8,"offset"],[100,14,103,14],[100,17,103,17],[100,18,103,18],[101,6,104,8,"length"],[101,12,104,14],[101,15,104,17,"source"],[101,21,104,23],[101,22,104,24,"length"],[101,28,104,30],[102,6,105,8,"line"],[102,10,105,12],[102,13,105,15],[102,14,105,16],[103,6,106,8,"lastCommentLine"],[103,21,106,23],[103,24,106,26],[103,25,106,27],[104,6,107,8,"comments"],[104,14,107,16],[104,17,107,19],[104,18,107,20],[104,19,107,21],[105,4,109,4],[105,8,109,8,"stack"],[105,13,109,13],[105,16,109,16],[105,18,109,18],[106,4,111,4],[106,8,111,8,"stringDelim"],[106,19,111,19],[106,22,111,22],[106,26,111,26],[108,4,113,4],[109,4,114,4],[110,0,115,0],[111,0,116,0],[112,0,117,0],[113,0,118,0],[114,0,119,0],[115,4,120,4],[115,13,120,13,"illegal"],[115,20,120,20,"illegal"],[115,21,120,21,"subject"],[115,28,120,28],[115,30,120,30],[116,6,121,8],[116,13,121,15,"Error"],[116,18,121,20],[116,19,121,21],[116,29,121,31],[116,32,121,34,"subject"],[116,39,121,41],[116,42,121,44],[116,51,121,53],[116,54,121,56,"line"],[116,58,121,60],[116,61,121,63],[116,64,121,66],[116,65,121,67],[117,4,122,4],[119,4,124,4],[120,0,125,0],[121,0,126,0],[122,0,127,0],[123,0,128,0],[124,4,129,4],[124,13,129,13,"readString"],[124,23,129,23,"readString"],[124,24,129,23],[124,26,129,26],[125,6,130,8],[125,10,130,12,"re"],[125,12,130,14],[125,15,130,17,"stringDelim"],[125,26,130,28],[125,31,130,33],[125,34,130,36],[125,37,130,39,"stringSingleRe"],[125,51,130,53],[125,54,130,56,"stringDoubleRe"],[125,68,130,70],[126,6,131,8,"re"],[126,8,131,10],[126,9,131,11,"lastIndex"],[126,18,131,20],[126,21,131,23,"offset"],[126,27,131,29],[126,30,131,32],[126,31,131,33],[127,6,132,8],[127,10,132,12,"match"],[127,15,132,17],[127,18,132,20,"re"],[127,20,132,22],[127,21,132,23,"exec"],[127,25,132,27],[127,26,132,28,"source"],[127,32,132,34],[127,33,132,35],[128,6,133,8],[128,10,133,12],[128,11,133,13,"match"],[128,16,133,18],[128,18,134,12],[128,24,134,18,"illegal"],[128,31,134,25],[128,32,134,26],[128,40,134,34],[128,41,134,35],[129,6,135,8,"offset"],[129,12,135,14],[129,15,135,17,"re"],[129,17,135,19],[129,18,135,20,"lastIndex"],[129,27,135,29],[130,6,136,8,"push"],[130,10,136,12],[130,11,136,13,"stringDelim"],[130,22,136,24],[130,23,136,25],[131,6,137,8,"stringDelim"],[131,17,137,19],[131,20,137,22],[131,24,137,26],[132,6,138,8],[132,13,138,15,"unescape"],[132,21,138,23],[132,22,138,24,"match"],[132,27,138,29],[132,28,138,30],[132,29,138,31],[132,30,138,32],[132,31,138,33],[133,4,139,4],[135,4,141,4],[136,0,142,0],[137,0,143,0],[138,0,144,0],[139,0,145,0],[140,0,146,0],[141,4,147,4],[141,13,147,13,"charAt"],[141,19,147,19,"charAt"],[141,20,147,20,"pos"],[141,23,147,23],[141,25,147,25],[142,6,148,8],[142,13,148,15,"source"],[142,19,148,21],[142,20,148,22,"charAt"],[142,26,148,28],[142,27,148,29,"pos"],[142,30,148,32],[142,31,148,33],[143,4,149,4],[145,4,151,4],[146,0,152,0],[147,0,153,0],[148,0,154,0],[149,0,155,0],[150,0,156,0],[151,0,157,0],[152,0,158,0],[153,4,159,4],[153,13,159,13,"setComment"],[153,23,159,23,"setComment"],[153,24,159,24,"start"],[153,29,159,29],[153,31,159,31,"end"],[153,34,159,34],[153,36,159,36,"isLeading"],[153,45,159,45],[153,47,159,47],[154,6,160,8],[154,10,160,12,"comment"],[154,17,160,19],[154,20,160,22],[155,8,161,12,"type"],[155,12,161,16],[155,14,161,18,"source"],[155,20,161,24],[155,21,161,25,"charAt"],[155,27,161,31],[155,28,161,32,"start"],[155,33,161,37],[155,35,161,39],[155,36,161,40],[156,8,162,12,"lineEmpty"],[156,17,162,21],[156,19,162,23],[156,24,162,28],[157,8,163,12,"leading"],[157,15,163,19],[157,17,163,21,"isLeading"],[158,6,164,8],[158,7,164,9],[159,6,165,8],[159,10,165,12,"lookback"],[159,18,165,20],[160,6,166,8],[160,10,166,12,"alternateCommentMode"],[160,30,166,32],[160,32,166,34],[161,8,167,12,"lookback"],[161,16,167,20],[161,19,167,23],[161,20,167,24],[161,21,167,25],[161,22,167,27],[162,6,168,8],[162,7,168,9],[162,13,168,15],[163,8,169,12,"lookback"],[163,16,169,20],[163,19,169,23],[163,20,169,24],[163,21,169,25],[163,22,169,27],[164,6,170,8],[165,6,171,8],[165,10,171,12,"commentOffset"],[165,23,171,25],[165,26,171,28,"start"],[165,31,171,33],[165,34,171,36,"lookback"],[165,42,171,44],[166,8,172,12,"c"],[166,9,172,13],[167,6,173,8],[167,9,173,11],[168,8,174,12],[168,12,174,16],[168,14,174,18,"commentOffset"],[168,27,174,31],[168,30,174,34],[168,31,174,35],[168,35,175,20],[168,36,175,21,"c"],[168,37,175,22],[168,40,175,25,"source"],[168,46,175,31],[168,47,175,32,"charAt"],[168,53,175,38],[168,54,175,39,"commentOffset"],[168,67,175,52],[168,68,175,53],[168,74,175,59],[168,78,175,63],[168,80,175,65],[169,10,176,16,"comment"],[169,17,176,23],[169,18,176,24,"lineEmpty"],[169,27,176,33],[169,30,176,36],[169,34,176,40],[170,10,177,16],[171,8,178,12],[172,6,179,8],[172,7,179,9],[172,15,179,17,"c"],[172,16,179,18],[172,21,179,23],[172,24,179,26],[172,28,179,30,"c"],[172,29,179,31],[172,34,179,36],[172,38,179,40],[173,6,180,8],[173,10,180,12,"lines"],[173,15,180,17],[173,18,180,20,"source"],[173,24,180,26],[173,25,181,13,"substring"],[173,34,181,22],[173,35,181,23,"start"],[173,40,181,28],[173,42,181,30,"end"],[173,45,181,33],[173,46,181,34],[173,47,182,13,"split"],[173,52,182,18],[173,53,182,19,"setCommentSplitRe"],[173,70,182,36],[173,71,182,37],[174,6,183,8],[174,11,183,13],[174,15,183,17,"i"],[174,16,183,18],[174,19,183,21],[174,20,183,22],[174,22,183,24,"i"],[174,23,183,25],[174,26,183,28,"lines"],[174,31,183,33],[174,32,183,34,"length"],[174,38,183,40],[174,40,183,42],[174,42,183,44,"i"],[174,43,183,45],[174,45,184,12,"lines"],[174,50,184,17],[174,51,184,18,"i"],[174,52,184,19],[174,53,184,20],[174,56,184,23,"lines"],[174,61,184,28],[174,62,184,29,"i"],[174,63,184,30],[174,64,184,31],[174,65,185,17,"replace"],[174,72,185,24],[174,73,185,25,"alternateCommentMode"],[174,93,185,45],[174,96,185,48,"setCommentAltRe"],[174,111,185,63],[174,114,185,66,"setCommentRe"],[174,126,185,78],[174,128,185,80],[174,130,185,82],[174,131,185,83],[174,132,186,17,"trim"],[174,136,186,21],[174,137,186,22],[174,138,186,23],[175,6,187,8,"comment"],[175,13,187,15],[175,14,187,16,"text"],[175,18,187,20],[175,21,187,23,"lines"],[175,26,187,28],[175,27,188,13,"join"],[175,31,188,17],[175,32,188,18],[175,36,188,22],[175,37,188,23],[175,38,189,13,"trim"],[175,42,189,17],[175,43,189,18],[175,44,189,19],[176,6,191,8,"comments"],[176,14,191,16],[176,15,191,17,"line"],[176,19,191,21],[176,20,191,22],[176,23,191,25,"comment"],[176,30,191,32],[177,6,192,8,"lastCommentLine"],[177,21,192,23],[177,24,192,26,"line"],[177,28,192,30],[178,4,193,4],[179,4,195,4],[179,13,195,13,"isDoubleSlashCommentLine"],[179,37,195,37,"isDoubleSlashCommentLine"],[179,38,195,38,"startOffset"],[179,49,195,49],[179,51,195,51],[180,6,196,8],[180,10,196,12,"endOffset"],[180,19,196,21],[180,22,196,24,"findEndOfLine"],[180,35,196,37],[180,36,196,38,"startOffset"],[180,47,196,49],[180,48,196,50],[182,6,198,8],[183,6,199,8],[183,10,199,12,"lineText"],[183,18,199,20],[183,21,199,23,"source"],[183,27,199,29],[183,28,199,30,"substring"],[183,37,199,39],[183,38,199,40,"startOffset"],[183,49,199,51],[183,51,199,53,"endOffset"],[183,60,199,62],[183,61,199,63],[184,6,200,8],[184,10,200,12,"isComment"],[184,19,200,21],[184,22,200,24],[184,32,200,34],[184,33,200,35,"test"],[184,37,200,39],[184,38,200,40,"lineText"],[184,46,200,48],[184,47,200,49],[185,6,201,8],[185,13,201,15,"isComment"],[185,22,201,24],[186,4,202,4],[187,4,204,4],[187,13,204,13,"findEndOfLine"],[187,26,204,26,"findEndOfLine"],[187,27,204,27,"cursor"],[187,33,204,33],[187,35,204,35],[188,6,205,8],[189,6,206,8],[189,10,206,12,"endOffset"],[189,19,206,21],[189,22,206,24,"cursor"],[189,28,206,30],[190,6,207,8],[190,13,207,15,"endOffset"],[190,22,207,24],[190,25,207,27,"length"],[190,31,207,33],[190,35,207,37,"charAt"],[190,41,207,43],[190,42,207,44,"endOffset"],[190,51,207,53],[190,52,207,54],[190,57,207,59],[190,61,207,63],[190,63,207,65],[191,8,208,12,"endOffset"],[191,17,208,21],[191,19,208,23],[192,6,209,8],[193,6,210,8],[193,13,210,15,"endOffset"],[193,22,210,24],[194,4,211,4],[196,4,213,4],[197,0,214,0],[198,0,215,0],[199,0,216,0],[200,0,217,0],[201,4,218,4],[201,13,218,13,"next"],[201,17,218,17,"next"],[201,18,218,17],[201,20,218,20],[202,6,219,8],[202,10,219,12,"stack"],[202,15,219,17],[202,16,219,18,"length"],[202,22,219,24],[202,25,219,27],[202,26,219,28],[202,28,220,12],[202,35,220,19,"stack"],[202,40,220,24],[202,41,220,25,"shift"],[202,46,220,30],[202,47,220,31],[202,48,220,32],[203,6,221,8],[203,10,221,12,"stringDelim"],[203,21,221,23],[203,23,222,12],[203,30,222,19,"readString"],[203,40,222,29],[203,41,222,30],[203,42,222,31],[204,6,223,8],[204,10,223,12,"repeat"],[204,16,223,18],[205,8,224,12,"prev"],[205,12,224,16],[206,8,225,12,"curr"],[206,12,225,16],[207,8,226,12,"start"],[207,13,226,17],[208,8,227,12,"isDoc"],[208,13,227,17],[209,8,228,12,"isLeadingComment"],[209,24,228,28],[209,27,228,31,"offset"],[209,33,228,37],[209,38,228,42],[209,39,228,43],[210,6,229,8],[210,9,229,11],[211,8,230,12],[211,12,230,16,"offset"],[211,18,230,22],[211,23,230,27,"length"],[211,29,230,33],[211,31,231,16],[211,38,231,23],[211,42,231,27],[212,8,232,12,"repeat"],[212,14,232,18],[212,17,232,21],[212,22,232,26],[213,8,233,12],[213,15,233,19,"whitespaceRe"],[213,27,233,31],[213,28,233,32,"test"],[213,32,233,36],[213,33,233,37,"curr"],[213,37,233,41],[213,40,233,44,"charAt"],[213,46,233,50],[213,47,233,51,"offset"],[213,53,233,57],[213,54,233,58],[213,55,233,59],[213,57,233,61],[214,10,234,16],[214,14,234,20,"curr"],[214,18,234,24],[214,23,234,29],[214,27,234,33],[214,29,234,35],[215,12,235,20,"isLeadingComment"],[215,28,235,36],[215,31,235,39],[215,35,235,43],[216,12,236,20],[216,14,236,22,"line"],[216,18,236,26],[217,10,237,16],[218,10,238,16],[218,14,238,20],[218,16,238,22,"offset"],[218,22,238,28],[218,27,238,33,"length"],[218,33,238,39],[218,35,239,20],[218,42,239,27],[218,46,239,31],[219,8,240,12],[220,8,242,12],[220,12,242,16,"charAt"],[220,18,242,22],[220,19,242,23,"offset"],[220,25,242,29],[220,26,242,30],[220,31,242,35],[220,34,242,38],[220,36,242,40],[221,10,243,16],[221,14,243,20],[221,16,243,22,"offset"],[221,22,243,28],[221,27,243,33,"length"],[221,33,243,39],[221,35,243,41],[222,12,244,20],[222,18,244,26,"illegal"],[222,25,244,33],[222,26,244,34],[222,35,244,43],[222,36,244,44],[223,10,245,16],[224,10,246,16],[224,14,246,20,"charAt"],[224,20,246,26],[224,21,246,27,"offset"],[224,27,246,33],[224,28,246,34],[224,33,246,39],[224,36,246,42],[224,38,246,44],[225,12,246,46],[226,12,247,20],[226,16,247,24],[226,17,247,25,"alternateCommentMode"],[226,37,247,45],[226,39,247,47],[227,14,248,24],[228,14,249,24,"isDoc"],[228,19,249,29],[228,22,249,32,"charAt"],[228,28,249,38],[228,29,249,39,"start"],[228,34,249,44],[228,37,249,47,"offset"],[228,43,249,53],[228,46,249,56],[228,47,249,57],[228,48,249,58],[228,53,249,63],[228,56,249,66],[229,14,251,24],[229,21,251,31,"charAt"],[229,27,251,37],[229,28,251,38],[229,30,251,40,"offset"],[229,36,251,46],[229,37,251,47],[229,42,251,52],[229,46,251,56],[229,48,251,58],[230,16,252,28],[230,20,252,32,"offset"],[230,26,252,38],[230,31,252,43,"length"],[230,37,252,49],[230,39,252,51],[231,18,253,32],[231,25,253,39],[231,29,253,43],[232,16,254,28],[233,14,255,24],[234,14,256,24],[234,16,256,26,"offset"],[234,22,256,32],[235,14,257,24],[235,18,257,28,"isDoc"],[235,23,257,33],[235,25,257,35],[236,16,258,28,"setComment"],[236,26,258,38],[236,27,258,39,"start"],[236,32,258,44],[236,34,258,46,"offset"],[236,40,258,52],[236,43,258,55],[236,44,258,56],[236,46,258,58,"isLeadingComment"],[236,62,258,74],[236,63,258,75],[237,16,259,28],[238,16,260,28],[239,16,261,28,"isLeadingComment"],[239,32,261,44],[239,35,261,47],[239,39,261,51],[240,14,262,24],[241,14,263,24],[241,16,263,26,"line"],[241,20,263,30],[242,14,264,24,"repeat"],[242,20,264,30],[242,23,264,33],[242,27,264,37],[243,12,265,20],[243,13,265,21],[243,19,265,27],[244,14,266,24],[245,14,267,24,"start"],[245,19,267,29],[245,22,267,32,"offset"],[245,28,267,38],[246,14,268,24,"isDoc"],[246,19,268,29],[246,22,268,32],[246,27,268,37],[247,14,269,24],[247,18,269,28,"isDoubleSlashCommentLine"],[247,42,269,52],[247,43,269,53,"offset"],[247,49,269,59],[247,52,269,62],[247,53,269,63],[247,54,269,64],[247,56,269,66],[248,16,270,28,"isDoc"],[248,21,270,33],[248,24,270,36],[248,28,270,40],[249,16,271,28],[249,19,271,31],[250,18,272,32,"offset"],[250,24,272,38],[250,27,272,41,"findEndOfLine"],[250,40,272,54],[250,41,272,55,"offset"],[250,47,272,61],[250,48,272,62],[251,18,273,32],[251,22,273,36,"offset"],[251,28,273,42],[251,33,273,47,"length"],[251,39,273,53],[251,41,273,55],[252,20,274,36],[253,18,275,32],[254,18,276,32,"offset"],[254,24,276,38],[254,26,276,40],[255,18,277,32],[255,22,277,36],[255,23,277,37,"isLeadingComment"],[255,39,277,53],[255,41,277,55],[256,20,278,36],[257,20,279,36],[258,18,280,32],[259,16,281,28],[259,17,281,29],[259,25,281,37,"isDoubleSlashCommentLine"],[259,49,281,61],[259,50,281,62,"offset"],[259,56,281,68],[259,57,281,69],[260,14,282,24],[260,15,282,25],[260,21,282,31],[261,16,283,28,"offset"],[261,22,283,34],[261,25,283,37,"Math"],[261,29,283,41],[261,30,283,42,"min"],[261,33,283,45],[261,34,283,46,"length"],[261,40,283,52],[261,42,283,54,"findEndOfLine"],[261,55,283,67],[261,56,283,68,"offset"],[261,62,283,74],[261,63,283,75],[261,66,283,78],[261,67,283,79],[261,68,283,80],[262,14,284,24],[263,14,285,24],[263,18,285,28,"isDoc"],[263,23,285,33],[263,25,285,35],[264,16,286,28,"setComment"],[264,26,286,38],[264,27,286,39,"start"],[264,32,286,44],[264,34,286,46,"offset"],[264,40,286,52],[264,42,286,54,"isLeadingComment"],[264,58,286,70],[264,59,286,71],[265,16,287,28,"isLeadingComment"],[265,32,287,44],[265,35,287,47],[265,39,287,51],[266,14,288,24],[267,14,289,24,"line"],[267,18,289,28],[267,20,289,30],[268,14,290,24,"repeat"],[268,20,290,30],[268,23,290,33],[268,27,290,37],[269,12,291,20],[270,10,292,16],[270,11,292,17],[270,17,292,23],[270,21,292,27],[270,22,292,28,"curr"],[270,26,292,32],[270,29,292,35,"charAt"],[270,35,292,41],[270,36,292,42,"offset"],[270,42,292,48],[270,43,292,49],[270,49,292,55],[270,52,292,58],[270,54,292,60],[271,12,292,62],[272,12,293,20],[273,12,294,20,"start"],[273,17,294,25],[273,20,294,28,"offset"],[273,26,294,34],[273,29,294,37],[273,30,294,38],[274,12,295,20,"isDoc"],[274,17,295,25],[274,20,295,28,"alternateCommentMode"],[274,40,295,48],[274,44,295,52,"charAt"],[274,50,295,58],[274,51,295,59,"start"],[274,56,295,64],[274,57,295,65],[274,62,295,70],[274,65,295,73],[275,12,296,20],[275,15,296,23],[276,14,297,24],[276,18,297,28,"curr"],[276,22,297,32],[276,27,297,37],[276,31,297,41],[276,33,297,43],[277,16,298,28],[277,18,298,30,"line"],[277,22,298,34],[278,14,299,24],[279,14,300,24],[279,18,300,28],[279,20,300,30,"offset"],[279,26,300,36],[279,31,300,41,"length"],[279,37,300,47],[279,39,300,49],[280,16,301,28],[280,22,301,34,"illegal"],[280,29,301,41],[280,30,301,42],[280,39,301,51],[280,40,301,52],[281,14,302,24],[282,14,303,24,"prev"],[282,18,303,28],[282,21,303,31,"curr"],[282,25,303,35],[283,14,304,24,"curr"],[283,18,304,28],[283,21,304,31,"charAt"],[283,27,304,37],[283,28,304,38,"offset"],[283,34,304,44],[283,35,304,45],[284,12,305,20],[284,13,305,21],[284,21,305,29,"prev"],[284,25,305,33],[284,30,305,38],[284,33,305,41],[284,37,305,45,"curr"],[284,41,305,49],[284,46,305,54],[284,49,305,57],[285,12,306,20],[285,14,306,22,"offset"],[285,20,306,28],[286,12,307,20],[286,16,307,24,"isDoc"],[286,21,307,29],[286,23,307,31],[287,14,308,24,"setComment"],[287,24,308,34],[287,25,308,35,"start"],[287,30,308,40],[287,32,308,42,"offset"],[287,38,308,48],[287,41,308,51],[287,42,308,52],[287,44,308,54,"isLeadingComment"],[287,60,308,70],[287,61,308,71],[288,14,309,24,"isLeadingComment"],[288,30,309,40],[288,33,309,43],[288,37,309,47],[289,12,310,20],[290,12,311,20,"repeat"],[290,18,311,26],[290,21,311,29],[290,25,311,33],[291,10,312,16],[291,11,312,17],[291,17,312,23],[292,12,313,20],[292,19,313,27],[292,22,313,30],[293,10,314,16],[294,8,315,12],[295,6,316,8],[295,7,316,9],[295,15,316,17,"repeat"],[295,21,316,23],[297,6,318,8],[299,6,320,8],[299,10,320,12,"end"],[299,13,320,15],[299,16,320,18,"offset"],[299,22,320,24],[300,6,321,8,"delimRe"],[300,13,321,15],[300,14,321,16,"lastIndex"],[300,23,321,25],[300,26,321,28],[300,27,321,29],[301,6,322,8],[301,10,322,12,"delim"],[301,15,322,17],[301,18,322,20,"delimRe"],[301,25,322,27],[301,26,322,28,"test"],[301,30,322,32],[301,31,322,33,"charAt"],[301,37,322,39],[301,38,322,40,"end"],[301,41,322,43],[301,43,322,45],[301,44,322,46],[301,45,322,47],[302,6,323,8],[302,10,323,12],[302,11,323,13,"delim"],[302,16,323,18],[302,18,324,12],[302,25,324,19,"end"],[302,28,324,22],[302,31,324,25,"length"],[302,37,324,31],[302,41,324,35],[302,42,324,36,"delimRe"],[302,49,324,43],[302,50,324,44,"test"],[302,54,324,48],[302,55,324,49,"charAt"],[302,61,324,55],[302,62,324,56,"end"],[302,65,324,59],[302,66,324,60],[302,67,324,61],[302,69,325,16],[302,71,325,18,"end"],[302,74,325,21],[303,6,326,8],[303,10,326,12,"token"],[303,15,326,17],[303,18,326,20,"source"],[303,24,326,26],[303,25,326,27,"substring"],[303,34,326,36],[303,35,326,37,"offset"],[303,41,326,43],[303,43,326,45,"offset"],[303,49,326,51],[303,52,326,54,"end"],[303,55,326,57],[303,56,326,58],[304,6,327,8],[304,10,327,12,"token"],[304,15,327,17],[304,20,327,22],[304,24,327,26],[304,28,327,30,"token"],[304,33,327,35],[304,38,327,40],[304,41,327,43],[304,43,328,12,"stringDelim"],[304,54,328,23],[304,57,328,26,"token"],[304,62,328,31],[305,6,329,8],[305,13,329,15,"token"],[305,18,329,20],[306,4,330,4],[308,4,332,4],[309,0,333,0],[310,0,334,0],[311,0,335,0],[312,0,336,0],[313,0,337,0],[314,4,338,4],[314,13,338,13,"push"],[314,17,338,17,"push"],[314,18,338,18,"token"],[314,23,338,23],[314,25,338,25],[315,6,339,8,"stack"],[315,11,339,13],[315,12,339,14,"push"],[315,16,339,18],[315,17,339,19,"token"],[315,22,339,24],[315,23,339,25],[316,4,340,4],[318,4,342,4],[319,0,343,0],[320,0,344,0],[321,0,345,0],[322,0,346,0],[323,4,347,4],[323,13,347,13,"peek"],[323,17,347,17,"peek"],[323,18,347,17],[323,20,347,20],[324,6,348,8],[324,10,348,12],[324,11,348,13,"stack"],[324,16,348,18],[324,17,348,19,"length"],[324,23,348,25],[324,25,348,27],[325,8,349,12],[325,12,349,16,"token"],[325,17,349,21],[325,20,349,24,"next"],[325,24,349,28],[325,25,349,29],[325,26,349,30],[326,8,350,12],[326,12,350,16,"token"],[326,17,350,21],[326,22,350,26],[326,26,350,30],[326,28,351,16],[326,35,351,23],[326,39,351,27],[327,8,352,12,"push"],[327,12,352,16],[327,13,352,17,"token"],[327,18,352,22],[327,19,352,23],[328,6,353,8],[329,6,354,8],[329,13,354,15,"stack"],[329,18,354,20],[329,19,354,21],[329,20,354,22],[329,21,354,23],[330,4,355,4],[332,4,357,4],[333,0,358,0],[334,0,359,0],[335,0,360,0],[336,0,361,0],[337,0,362,0],[338,0,363,0],[339,0,364,0],[340,4,365,4],[340,13,365,13,"skip"],[340,17,365,17,"skip"],[340,18,365,18,"expected"],[340,26,365,26],[340,28,365,28,"optional"],[340,36,365,36],[340,38,365,38],[341,6,366,8],[341,10,366,12,"actual"],[341,16,366,18],[341,19,366,21,"peek"],[341,23,366,25],[341,24,366,26],[341,25,366,27],[342,8,367,12,"equals"],[342,14,367,18],[342,17,367,21,"actual"],[342,23,367,27],[342,28,367,32,"expected"],[342,36,367,40],[343,6,368,8],[343,10,368,12,"equals"],[343,16,368,18],[343,18,368,20],[344,8,369,12,"next"],[344,12,369,16],[344,13,369,17],[344,14,369,18],[345,8,370,12],[345,15,370,19],[345,19,370,23],[346,6,371,8],[347,6,372,8],[347,10,372,12],[347,11,372,13,"optional"],[347,19,372,21],[347,21,373,12],[347,27,373,18,"illegal"],[347,34,373,25],[347,35,373,26],[347,44,373,35],[347,47,373,38,"actual"],[347,53,373,44],[347,56,373,47],[347,62,373,53],[347,65,373,56,"expected"],[347,73,373,64],[347,76,373,67],[347,88,373,79],[347,89,373,80],[348,6,374,8],[348,13,374,15],[348,18,374,20],[349,4,375,4],[351,4,377,4],[352,0,378,0],[353,0,379,0],[354,0,380,0],[355,0,381,0],[356,0,382,0],[357,4,383,4],[357,13,383,13,"cmnt"],[357,17,383,17,"cmnt"],[357,18,383,18,"trailingLine"],[357,30,383,30],[357,32,383,32],[358,6,384,8],[358,10,384,12,"ret"],[358,13,384,15],[358,16,384,18],[358,20,384,22],[359,6,385,8],[359,10,385,12,"comment"],[359,17,385,19],[360,6,386,8],[360,10,386,12,"trailingLine"],[360,22,386,24],[360,27,386,29,"undefined"],[360,36,386,38],[360,38,386,40],[361,8,387,12,"comment"],[361,15,387,19],[361,18,387,22,"comments"],[361,26,387,30],[361,27,387,31,"line"],[361,31,387,35],[361,34,387,38],[361,35,387,39],[361,36,387,40],[362,8,388,12],[362,15,388,19,"comments"],[362,23,388,27],[362,24,388,28,"line"],[362,28,388,32],[362,31,388,35],[362,32,388,36],[362,33,388,37],[363,8,389,12],[363,12,389,16,"comment"],[363,19,389,23],[363,24,389,28,"alternateCommentMode"],[363,44,389,48],[363,48,389,52,"comment"],[363,55,389,59],[363,56,389,60,"type"],[363,60,389,64],[363,65,389,69],[363,68,389,72],[363,72,389,76,"comment"],[363,79,389,83],[363,80,389,84,"lineEmpty"],[363,89,389,93],[363,90,389,94],[363,92,389,96],[364,10,390,16,"ret"],[364,13,390,19],[364,16,390,22,"comment"],[364,23,390,29],[364,24,390,30,"leading"],[364,31,390,37],[364,34,390,40,"comment"],[364,41,390,47],[364,42,390,48,"text"],[364,46,390,52],[364,49,390,55],[364,53,390,59],[365,8,391,12],[366,6,392,8],[366,7,392,9],[366,13,392,15],[367,8,393,12],[368,8,394,12],[368,12,394,16,"lastCommentLine"],[368,27,394,31],[368,30,394,34,"trailingLine"],[368,42,394,46],[368,44,394,48],[369,10,395,16,"peek"],[369,14,395,20],[369,15,395,21],[369,16,395,22],[370,8,396,12],[371,8,397,12,"comment"],[371,15,397,19],[371,18,397,22,"comments"],[371,26,397,30],[371,27,397,31,"trailingLine"],[371,39,397,43],[371,40,397,44],[372,8,398,12],[372,15,398,19,"comments"],[372,23,398,27],[372,24,398,28,"trailingLine"],[372,36,398,40],[372,37,398,41],[373,8,399,12],[373,12,399,16,"comment"],[373,19,399,23],[373,23,399,27],[373,24,399,28,"comment"],[373,31,399,35],[373,32,399,36,"lineEmpty"],[373,41,399,45],[373,46,399,50,"alternateCommentMode"],[373,66,399,70],[373,70,399,74,"comment"],[373,77,399,81],[373,78,399,82,"type"],[373,82,399,86],[373,87,399,91],[373,90,399,94],[373,91,399,95],[373,93,399,97],[374,10,400,16,"ret"],[374,13,400,19],[374,16,400,22,"comment"],[374,23,400,29],[374,24,400,30,"leading"],[374,31,400,37],[374,34,400,40],[374,38,400,44],[374,41,400,47,"comment"],[374,48,400,54],[374,49,400,55,"text"],[374,53,400,59],[375,8,401,12],[376,6,402,8],[377,6,403,8],[377,13,403,15,"ret"],[377,16,403,18],[378,4,404,4],[379,4,406,4],[379,11,406,11,"Object"],[379,17,406,17],[379,18,406,18,"defineProperty"],[379,32,406,32],[379,33,406,33],[380,6,407,8,"next"],[380,10,407,12],[380,12,407,14,"next"],[380,16,407,18],[381,6,408,8,"peek"],[381,10,408,12],[381,12,408,14,"peek"],[381,16,408,18],[382,6,409,8,"push"],[382,10,409,12],[382,12,409,14,"push"],[382,16,409,18],[383,6,410,8,"skip"],[383,10,410,12],[383,12,410,14,"skip"],[383,16,410,18],[384,6,411,8,"cmnt"],[384,10,411,12],[384,12,411,14,"cmnt"],[385,4,412,4],[385,5,412,5],[385,7,412,7],[385,13,412,13],[385,15,412,15],[386,6,413,8,"get"],[386,9,413,11],[386,11,413,13],[386,20,413,13,"get"],[386,21,413,13],[386,23,413,24],[387,8,413,26],[387,15,413,33,"line"],[387,19,413,37],[388,6,413,39],[389,4,414,4],[389,5,414,5],[389,6,414,6],[390,4,415,4],[391,2,416,0],[392,0,416,1],[392,3]],"functionMap":{"names":["<global>","unescape","str.replace$argument_1","tokenize","illegal","readString","charAt","setComment","isDoubleSlashCommentLine","findEndOfLine","next","push","peek","skip","cmnt","Object.defineProperty$argument_2.get"],"mappings":"AAA;AC2B;mCCC;KDQ;CDC;AG6D;ICqB;KDE;IEO;KFU;IGQ;KHE;IIU;KJkC;IKE;KLO;IME;KNO;IOO;KPgH;IQQ;KRE;ISO;KTQ;IUU;KVU;IWQ;KXqB;aYS,2BZ;CHG"}},"type":"js/module"}]}