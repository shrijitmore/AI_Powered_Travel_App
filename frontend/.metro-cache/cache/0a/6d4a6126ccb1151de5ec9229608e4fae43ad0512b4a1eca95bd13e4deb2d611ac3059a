{"dependencies":[{"name":"./enum","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":56},"end":{"line":4,"column":32,"index":73}}],"key":"gyum9HaiytxYUYAerYZvNHG09ko=","exportNames":["*"]}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":15,"index":90},"end":{"line":5,"column":33,"index":108}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":15,"index":125},"end":{"line":6,"column":32,"index":142}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = encoder;\n  var Enum = require(_dependencyMap[0], \"./enum\"),\n    types = require(_dependencyMap[1], \"./types\"),\n    util = require(_dependencyMap[2], \"./util\");\n\n  /**\n   * Generates a partial message type encoder.\n   * @param {Codegen} gen Codegen instance\n   * @param {Field} field Reflected field\n   * @param {number} fieldIndex Field index\n   * @param {string} ref Variable reference\n   * @returns {Codegen} Codegen instance\n   * @ignore\n   */\n  function genTypePartial(gen, field, fieldIndex, ref) {\n    return field.delimited ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n  }\n\n  /**\n   * Generates an encoder specific to the specified message type.\n   * @param {Type} mtype Message type\n   * @returns {Codegen} Codegen instance\n   */\n  function encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")(\"if(!w)\")(\"w=Writer.create()\");\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    for (var i = 0; i < fields.length; ++i) {\n      var field = fields[i].resolve(),\n        index = mtype._fieldsArray.indexOf(field),\n        type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n        wireType = types.basic[type];\n      ref = \"m\" + util.safeProp(field.name);\n\n      // Map fields\n      if (field.map) {\n        gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n        if (wireType === undefined) gen(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n        else gen(\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n        gen(\"}\")(\"}\");\n\n        // Repeated fields\n      } else if (field.repeated) {\n        gen(\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n        // Packed repeated\n        if (field.packed && types.packed[type] !== undefined) {\n          gen(\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)(\"for(var i=0;i<%s.length;++i)\", ref)(\"w.%s(%s[i])\", type, ref)(\"w.ldelim()\");\n\n          // Non-packed\n        } else {\n          gen(\"for(var i=0;i<%s.length;++i)\", ref);\n          if (wireType === undefined) genTypePartial(gen, field, index, ref + \"[i]\");else gen(\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n        }\n        gen(\"}\");\n\n        // Non-repeated\n      } else {\n        if (field.optional) gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n        if (wireType === undefined) genTypePartial(gen, field, index, ref);else gen(\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n      }\n    }\n    return gen(\"return w\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  }\n});","lineCount":74,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"encoder"],[4,26,2,24],[5,2,4,0],[5,6,4,4,"Enum"],[5,10,4,8],[5,13,4,15,"require"],[5,20,4,22],[5,21,4,22,"_dependencyMap"],[5,35,4,22],[5,48,4,31],[5,49,4,32],[6,4,5,4,"types"],[6,9,5,9],[6,12,5,15,"require"],[6,19,5,22],[6,20,5,22,"_dependencyMap"],[6,34,5,22],[6,48,5,32],[6,49,5,33],[7,4,6,4,"util"],[7,8,6,8],[7,11,6,15,"require"],[7,18,6,22],[7,19,6,22,"_dependencyMap"],[7,33,6,22],[7,46,6,31],[7,47,6,32],[9,2,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,2,17,0],[18,11,17,9,"genTypePartial"],[18,25,17,23,"genTypePartial"],[18,26,17,24,"gen"],[18,29,17,27],[18,31,17,29,"field"],[18,36,17,34],[18,38,17,36,"fieldIndex"],[18,48,17,46],[18,50,17,48,"ref"],[18,53,17,51],[18,55,17,53],[19,4,18,4],[19,11,18,11,"field"],[19,16,18,16],[19,17,18,17,"delimited"],[19,26,18,26],[19,29,19,10,"gen"],[19,32,19,13],[19,33,19,14],[19,79,19,60],[19,81,19,62,"fieldIndex"],[19,91,19,72],[19,93,19,74,"ref"],[19,96,19,77],[19,98,19,79],[19,99,19,80,"field"],[19,104,19,85],[19,105,19,86,"id"],[19,107,19,88],[19,111,19,92],[19,112,19,93],[19,115,19,96],[19,116,19,97],[19,122,19,103],[19,123,19,104],[19,125,19,106],[19,126,19,107,"field"],[19,131,19,112],[19,132,19,113,"id"],[19,134,19,115],[19,138,19,119],[19,139,19,120],[19,142,19,123],[19,143,19,124],[19,149,19,130],[19,150,19,131],[19,151,19,132],[19,154,20,10,"gen"],[19,157,20,13],[19,158,20,14],[19,209,20,65],[19,211,20,67,"fieldIndex"],[19,221,20,77],[19,223,20,79,"ref"],[19,226,20,82],[19,228,20,84],[19,229,20,85,"field"],[19,234,20,90],[19,235,20,91,"id"],[19,237,20,93],[19,241,20,97],[19,242,20,98],[19,245,20,101],[19,246,20,102],[19,252,20,108],[19,253,20,109],[19,254,20,110],[20,2,21,0],[22,2,23,0],[23,0,24,0],[24,0,25,0],[25,0,26,0],[26,0,27,0],[27,2,28,0],[27,11,28,9,"encoder"],[27,18,28,16,"encoder"],[27,19,28,17,"mtype"],[27,24,28,22],[27,26,28,24],[28,4,29,4],[29,4,30,4],[29,8,30,8,"gen"],[29,11,30,11],[29,14,30,14,"util"],[29,18,30,18],[29,19,30,19,"codegen"],[29,26,30,26],[29,27,30,27],[29,28,30,28],[29,31,30,31],[29,33,30,33],[29,36,30,36],[29,37,30,37],[29,39,30,39,"mtype"],[29,44,30,44],[29,45,30,45,"name"],[29,49,30,49],[29,52,30,52],[29,61,30,61],[29,62,30,62],[29,63,31,5],[29,71,31,13],[29,72,31,14],[29,73,32,9],[29,92,32,28],[29,93,32,29],[30,4,34,4],[30,8,34,8,"i"],[30,9,34,9],[30,11,34,11,"ref"],[30,14,34,14],[32,4,36,4],[33,4,37,4],[33,8,37,8,"fields"],[33,14,37,14],[33,17,37,17],[33,34,37,35,"mtype"],[33,39,37,40],[33,40,37,41,"fieldsArray"],[33,51,37,52],[33,52,37,53,"slice"],[33,57,37,58],[33,58,37,59],[33,59,37,60],[33,60,37,61,"sort"],[33,64,37,65],[33,65,37,66,"util"],[33,69,37,70],[33,70,37,71,"compareFieldsById"],[33,87,37,88],[33,88,37,89],[34,4,39,4],[34,9,39,9],[34,13,39,13,"i"],[34,14,39,14],[34,17,39,17],[34,18,39,18],[34,20,39,20,"i"],[34,21,39,21],[34,24,39,24,"fields"],[34,30,39,30],[34,31,39,31,"length"],[34,37,39,37],[34,39,39,39],[34,41,39,41,"i"],[34,42,39,42],[34,44,39,44],[35,6,40,8],[35,10,40,12,"field"],[35,15,40,17],[35,18,40,23,"fields"],[35,24,40,29],[35,25,40,30,"i"],[35,26,40,31],[35,27,40,32],[35,28,40,33,"resolve"],[35,35,40,40],[35,36,40,41],[35,37,40,42],[36,8,41,12,"index"],[36,13,41,17],[36,16,41,23,"mtype"],[36,21,41,28],[36,22,41,29,"_fieldsArray"],[36,34,41,41],[36,35,41,42,"indexOf"],[36,42,41,49],[36,43,41,50,"field"],[36,48,41,55],[36,49,41,56],[37,8,42,12,"type"],[37,12,42,16],[37,15,42,23,"field"],[37,20,42,28],[37,21,42,29,"resolvedType"],[37,33,42,41],[37,45,42,53,"Enum"],[37,49,42,57],[37,52,42,60],[37,59,42,67],[37,62,42,70,"field"],[37,67,42,75],[37,68,42,76,"type"],[37,72,42,80],[38,8,43,12,"wireType"],[38,16,43,20],[38,19,43,23,"types"],[38,24,43,28],[38,25,43,29,"basic"],[38,30,43,34],[38,31,43,35,"type"],[38,35,43,39],[38,36,43,40],[39,6,44,12,"ref"],[39,9,44,15],[39,12,44,23],[39,15,44,26],[39,18,44,29,"util"],[39,22,44,33],[39,23,44,34,"safeProp"],[39,31,44,42],[39,32,44,43,"field"],[39,37,44,48],[39,38,44,49,"name"],[39,42,44,53],[39,43,44,54],[41,6,46,8],[42,6,47,8],[42,10,47,12,"field"],[42,15,47,17],[42,16,47,18,"map"],[42,19,47,21],[42,21,47,23],[43,8,48,12,"gen"],[43,11,48,15],[43,12,49,5],[43,61,49,54],[43,63,49,56,"ref"],[43,66,49,59],[43,68,49,61,"field"],[43,73,49,66],[43,74,49,67,"name"],[43,78,49,71],[43,79,49,72],[43,80,49,73],[44,8,49,73],[44,9,50,9],[44,59,50,59],[44,61,50,61,"ref"],[44,64,50,64],[44,65,50,65],[44,66,51,13],[44,108,51,55],[44,110,51,57],[44,111,51,58,"field"],[44,116,51,63],[44,117,51,64,"id"],[44,119,51,66],[44,123,51,70],[44,124,51,71],[44,127,51,74],[44,128,51,75],[44,134,51,81],[44,135,51,82],[44,137,51,84],[44,138,51,85],[44,141,51,88,"types"],[44,146,51,93],[44,147,51,94,"mapKey"],[44,153,51,100],[44,154,51,101,"field"],[44,159,51,106],[44,160,51,107,"keyType"],[44,167,51,114],[44,168,51,115],[44,170,51,117,"field"],[44,175,51,122],[44,176,51,123,"keyType"],[44,183,51,130],[44,184,51,131],[45,8,52,12],[45,12,52,16,"wireType"],[45,20,52,24],[45,25,52,29,"undefined"],[45,34,52,38],[45,36,52,40,"gen"],[45,39,52,43],[45,40,53,13],[45,107,53,80],[45,109,53,82,"index"],[45,114,53,87],[45,116,53,89,"ref"],[45,119,53,92],[45,120,53,93],[45,121,53,94],[45,122,53,95],[46,8,53,95],[46,13,54,17,"gen"],[46,16,54,20],[46,17,55,13],[46,53,55,49],[46,55,55,51],[46,57,55,53],[46,60,55,56,"wireType"],[46,68,55,64],[46,70,55,66,"type"],[46,74,55,70],[46,76,55,72,"ref"],[46,79,55,75],[46,80,55,76],[47,8,56,12,"gen"],[47,11,56,15],[47,12,57,9],[47,15,57,12],[47,16,57,13],[47,17,58,5],[47,20,58,8],[47,21,58,9],[49,8,60,12],[50,6,61,8],[50,7,61,9],[50,13,61,15],[50,17,61,19,"field"],[50,22,61,24],[50,23,61,25,"repeated"],[50,31,61,33],[50,33,61,35],[51,8,61,37,"gen"],[51,11,61,40],[51,12,62,5],[51,38,62,31],[51,40,62,33,"ref"],[51,43,62,36],[51,45,62,38,"ref"],[51,48,62,41],[51,49,62,42],[51,50,62,43],[51,51,62,44],[53,8,64,12],[54,8,65,12],[54,12,65,16,"field"],[54,17,65,21],[54,18,65,22,"packed"],[54,24,65,28],[54,28,65,32,"types"],[54,33,65,37],[54,34,65,38,"packed"],[54,40,65,44],[54,41,65,45,"type"],[54,45,65,49],[54,46,65,50],[54,51,65,55,"undefined"],[54,60,65,64],[54,62,65,66],[55,10,65,68,"gen"],[55,13,65,71],[55,14,67,9],[55,35,67,30],[55,37,67,32],[55,38,67,33,"field"],[55,43,67,38],[55,44,67,39,"id"],[55,46,67,41],[55,50,67,45],[55,51,67,46],[55,54,67,49],[55,55,67,50],[55,61,67,56],[55,62,67,57],[55,63,67,58],[55,64,68,9],[55,94,68,39],[55,96,68,41,"ref"],[55,99,68,44],[55,100,68,45],[55,101,69,13],[55,114,69,26],[55,116,69,28,"type"],[55,120,69,32],[55,122,69,34,"ref"],[55,125,69,37],[55,126,69,38],[55,127,70,9],[55,139,70,21],[55,140,70,22],[57,10,72,12],[58,8,73,12],[58,9,73,13],[58,15,73,19],[59,10,73,21,"gen"],[59,13,73,24],[59,14,75,9],[59,44,75,39],[59,46,75,41,"ref"],[59,49,75,44],[59,50,75,45],[60,10,76,16],[60,14,76,20,"wireType"],[60,22,76,28],[60,27,76,33,"undefined"],[60,36,76,42],[60,38,77,12,"genTypePartial"],[60,52,77,26],[60,53,77,27,"gen"],[60,56,77,30],[60,58,77,32,"field"],[60,63,77,37],[60,65,77,39,"index"],[60,70,77,44],[60,72,77,46,"ref"],[60,75,77,49],[60,78,77,52],[60,83,77,57],[60,84,77,58],[60,85,77,59],[60,90,78,21,"gen"],[60,93,78,24],[60,94,79,13],[60,118,79,37],[60,120,79,39],[60,121,79,40,"field"],[60,126,79,45],[60,127,79,46,"id"],[60,129,79,48],[60,133,79,52],[60,134,79,53],[60,137,79,56,"wireType"],[60,145,79,64],[60,151,79,70],[60,152,79,71],[60,154,79,73,"type"],[60,158,79,77],[60,160,79,79,"ref"],[60,163,79,82],[60,164,79,83],[61,8,81,12],[62,8,81,14,"gen"],[62,11,81,17],[62,12,82,5],[62,15,82,8],[62,16,82,9],[64,8,84,8],[65,6,85,8],[65,7,85,9],[65,13,85,15],[66,8,86,12],[66,12,86,16,"field"],[66,17,86,21],[66,18,86,22,"optional"],[66,26,86,30],[66,28,86,32,"gen"],[66,31,86,35],[66,32,87,5],[66,80,87,53],[66,82,87,55,"ref"],[66,85,87,58],[66,87,87,60,"field"],[66,92,87,65],[66,93,87,66,"name"],[66,97,87,70],[66,98,87,71],[66,99,87,72],[66,100,87,73],[68,8,89,12],[68,12,89,16,"wireType"],[68,20,89,24],[68,25,89,29,"undefined"],[68,34,89,38],[68,36,90,8,"genTypePartial"],[68,50,90,22],[68,51,90,23,"gen"],[68,54,90,26],[68,56,90,28,"field"],[68,61,90,33],[68,63,90,35,"index"],[68,68,90,40],[68,70,90,42,"ref"],[68,73,90,45],[68,74,90,46],[68,75,90,47],[68,80,91,17,"gen"],[68,83,91,20],[68,84,92,9],[68,105,92,30],[68,107,92,32],[68,108,92,33,"field"],[68,113,92,38],[68,114,92,39,"id"],[68,116,92,41],[68,120,92,45],[68,121,92,46],[68,124,92,49,"wireType"],[68,132,92,57],[68,138,92,63],[68,139,92,64],[68,141,92,66,"type"],[68,145,92,70],[68,147,92,72,"ref"],[68,150,92,75],[68,151,92,76],[69,6,94,8],[70,4,95,4],[71,4,97,4],[71,11,97,11,"gen"],[71,14,97,14],[71,15,98,5],[71,25,98,15],[71,26,98,16],[72,4,99,4],[73,2,100,0],[74,0,100,1],[74,3]],"functionMap":{"names":["<global>","genTypePartial","encoder"],"mappings":"AAA;ACgB;CDI;AEO;CFwE"}},"type":"js/module"}]}