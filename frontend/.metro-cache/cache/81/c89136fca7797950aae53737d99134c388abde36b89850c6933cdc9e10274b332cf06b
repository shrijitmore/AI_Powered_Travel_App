{"dependencies":[{"name":"../util/minimal","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":11,"index":52},"end":{"line":4,"column":37,"index":78}}],"key":"G3cbM6U36uV+KIwbCEZbD3nflWA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = Service;\n  var util = require(_dependencyMap[0], \"../util/minimal\");\n\n  // Extends EventEmitter\n  (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n  /**\n   * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n   *\n   * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n   * @typedef rpc.ServiceMethodCallback\n   * @template TRes extends Message<TRes>\n   * @type {function}\n   * @param {Error|null} error Error, if any\n   * @param {TRes} [response] Response message\n   * @returns {undefined}\n   */\n\n  /**\n   * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n   * @typedef rpc.ServiceMethod\n   * @template TReq extends Message<TReq>\n   * @template TRes extends Message<TRes>\n   * @type {function}\n   * @param {TReq|Properties<TReq>} request Request message or plain object\n   * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n   * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n   */\n\n  /**\n   * Constructs a new RPC service instance.\n   * @classdesc An RPC service as returned by {@link Service#create}.\n   * @exports rpc.Service\n   * @extends util.EventEmitter\n   * @constructor\n   * @param {RPCImpl} rpcImpl RPC implementation\n   * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n   * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n   */\n  function Service(rpcImpl, requestDelimited, responseDelimited) {\n    if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n  }\n\n  /**\n   * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n   * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n   * @param {Constructor<TReq>} requestCtor Request constructor\n   * @param {Constructor<TRes>} responseCtor Response constructor\n   * @param {TReq|Properties<TReq>} request Request message or plain object\n   * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n   * @returns {undefined}\n   * @template TReq extends Message<TReq>\n   * @template TRes extends Message<TRes>\n   */\n  Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n    if (!request) throw TypeError(\"request must be specified\");\n    var self = this;\n    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n    if (!self.rpcImpl) {\n      setTimeout(function () {\n        callback(Error(\"already ended\"));\n      }, 0);\n      return undefined;\n    }\n    try {\n      return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n        if (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n        if (response === null) {\n          self.end(/* endedByRPC */true);\n          return undefined;\n        }\n        if (!(response instanceof responseCtor)) {\n          try {\n            response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n          } catch (err) {\n            self.emit(\"error\", err, method);\n            return callback(err);\n          }\n        }\n        self.emit(\"data\", response, method);\n        return callback(null, response);\n      });\n    } catch (err) {\n      self.emit(\"error\", err, method);\n      setTimeout(function () {\n        callback(err);\n      }, 0);\n      return undefined;\n    }\n  };\n\n  /**\n   * Ends this service and emits the `end` event.\n   * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n   * @returns {rpc.Service} `this`\n   */\n  Service.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n      if (!endedByRPC)\n        // signal end to rpcImpl\n        this.rpcImpl(null, null, null);\n      this.rpcImpl = null;\n      this.emit(\"end\").off();\n    }\n    return this;\n  };\n});","lineCount":132,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"Service"],[4,26,2,24],[5,2,4,0],[5,6,4,4,"util"],[5,10,4,8],[5,13,4,11,"require"],[5,20,4,18],[5,21,4,18,"_dependencyMap"],[5,35,4,18],[5,57,4,36],[5,58,4,37],[7,2,6,0],[8,2,7,0],[8,3,7,1,"Service"],[8,10,7,8],[8,11,7,9,"prototype"],[8,20,7,18],[8,23,7,21,"Object"],[8,29,7,27],[8,30,7,28,"create"],[8,36,7,34],[8,37,7,35,"util"],[8,41,7,39],[8,42,7,40,"EventEmitter"],[8,54,7,52],[8,55,7,53,"prototype"],[8,64,7,62],[8,65,7,63],[8,67,7,65,"constructor"],[8,78,7,76],[8,81,7,79,"Service"],[8,88,7,86],[10,2,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[22,2,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[33,2,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,2,42,0],[43,11,42,9,"Service"],[43,18,42,16,"Service"],[43,19,42,17,"rpcImpl"],[43,26,42,24],[43,28,42,26,"requestDelimited"],[43,44,42,42],[43,46,42,44,"responseDelimited"],[43,63,42,61],[43,65,42,63],[44,4,44,4],[44,8,44,8],[44,15,44,15,"rpcImpl"],[44,22,44,22],[44,27,44,27],[44,37,44,37],[44,39,45,8],[44,45,45,14,"TypeError"],[44,54,45,23],[44,55,45,24],[44,83,45,52],[44,84,45,53],[45,4,47,4,"util"],[45,8,47,8],[45,9,47,9,"EventEmitter"],[45,21,47,21],[45,22,47,22,"call"],[45,26,47,26],[45,27,47,27],[45,31,47,31],[45,32,47,32],[47,4,49,4],[48,0,50,0],[49,0,51,0],[50,0,52,0],[51,4,53,4],[51,8,53,8],[51,9,53,9,"rpcImpl"],[51,16,53,16],[51,19,53,19,"rpcImpl"],[51,26,53,26],[53,4,55,4],[54,0,56,0],[55,0,57,0],[56,0,58,0],[57,4,59,4],[57,8,59,8],[57,9,59,9,"requestDelimited"],[57,25,59,25],[57,28,59,28,"Boolean"],[57,35,59,35],[57,36,59,36,"requestDelimited"],[57,52,59,52],[57,53,59,53],[59,4,61,4],[60,0,62,0],[61,0,63,0],[62,0,64,0],[63,4,65,4],[63,8,65,8],[63,9,65,9,"responseDelimited"],[63,26,65,26],[63,29,65,29,"Boolean"],[63,36,65,36],[63,37,65,37,"responseDelimited"],[63,54,65,54],[63,55,65,55],[64,2,66,0],[66,2,68,0],[67,0,69,0],[68,0,70,0],[69,0,71,0],[70,0,72,0],[71,0,73,0],[72,0,74,0],[73,0,75,0],[74,0,76,0],[75,0,77,0],[76,0,78,0],[77,2,79,0,"Service"],[77,9,79,7],[77,10,79,8,"prototype"],[77,19,79,17],[77,20,79,18,"rpcCall"],[77,27,79,25],[77,30,79,28],[77,39,79,37,"rpcCall"],[77,46,79,44,"rpcCall"],[77,47,79,45,"method"],[77,53,79,51],[77,55,79,53,"requestCtor"],[77,66,79,64],[77,68,79,66,"responseCtor"],[77,80,79,78],[77,82,79,80,"request"],[77,89,79,87],[77,91,79,89,"callback"],[77,99,79,97],[77,101,79,99],[78,4,81,4],[78,8,81,8],[78,9,81,9,"request"],[78,16,81,16],[78,18,82,8],[78,24,82,14,"TypeError"],[78,33,82,23],[78,34,82,24],[78,61,82,51],[78,62,82,52],[79,4,84,4],[79,8,84,8,"self"],[79,12,84,12],[79,15,84,15],[79,19,84,19],[80,4,85,4],[80,8,85,8],[80,9,85,9,"callback"],[80,17,85,17],[80,19,86,8],[80,26,86,15,"util"],[80,30,86,19],[80,31,86,20,"asPromise"],[80,40,86,29],[80,41,86,30,"rpcCall"],[80,48,86,37],[80,50,86,39,"self"],[80,54,86,43],[80,56,86,45,"method"],[80,62,86,51],[80,64,86,53,"requestCtor"],[80,75,86,64],[80,77,86,66,"responseCtor"],[80,89,86,78],[80,91,86,80,"request"],[80,98,86,87],[80,99,86,88],[81,4,88,4],[81,8,88,8],[81,9,88,9,"self"],[81,13,88,13],[81,14,88,14,"rpcImpl"],[81,21,88,21],[81,23,88,23],[82,6,89,8,"setTimeout"],[82,16,89,18],[82,17,89,19],[82,29,89,30],[83,8,89,32,"callback"],[83,16,89,40],[83,17,89,41,"Error"],[83,22,89,46],[83,23,89,47],[83,38,89,62],[83,39,89,63],[83,40,89,64],[84,6,89,66],[84,7,89,67],[84,9,89,69],[84,10,89,70],[84,11,89,71],[85,6,90,8],[85,13,90,15,"undefined"],[85,22,90,24],[86,4,91,4],[87,4,93,4],[87,8,93,8],[88,6,94,8],[88,13,94,15,"self"],[88,17,94,19],[88,18,94,20,"rpcImpl"],[88,25,94,27],[88,26,95,12,"method"],[88,32,95,18],[88,34,96,12,"requestCtor"],[88,45,96,23],[88,46,96,24,"self"],[88,50,96,28],[88,51,96,29,"requestDelimited"],[88,67,96,45],[88,70,96,48],[88,87,96,65],[88,90,96,68],[88,98,96,76],[88,99,96,77],[88,100,96,78,"request"],[88,107,96,85],[88,108,96,86],[88,109,96,87,"finish"],[88,115,96,93],[88,116,96,94],[88,117,96,95],[88,119,97,12],[88,128,97,21,"rpcCallback"],[88,139,97,32,"rpcCallback"],[88,140,97,33,"err"],[88,143,97,36],[88,145,97,38,"response"],[88,153,97,46],[88,155,97,48],[89,8,99,16],[89,12,99,20,"err"],[89,15,99,23],[89,17,99,25],[90,10,100,20,"self"],[90,14,100,24],[90,15,100,25,"emit"],[90,19,100,29],[90,20,100,30],[90,27,100,37],[90,29,100,39,"err"],[90,32,100,42],[90,34,100,44,"method"],[90,40,100,50],[90,41,100,51],[91,10,101,20],[91,17,101,27,"callback"],[91,25,101,35],[91,26,101,36,"err"],[91,29,101,39],[91,30,101,40],[92,8,102,16],[93,8,104,16],[93,12,104,20,"response"],[93,20,104,28],[93,25,104,33],[93,29,104,37],[93,31,104,39],[94,10,105,20,"self"],[94,14,105,24],[94,15,105,25,"end"],[94,18,105,28],[94,19,105,29],[94,35,105,46],[94,39,105,50],[94,40,105,51],[95,10,106,20],[95,17,106,27,"undefined"],[95,26,106,36],[96,8,107,16],[97,8,109,16],[97,12,109,20],[97,14,109,22,"response"],[97,22,109,30],[97,34,109,42,"responseCtor"],[97,46,109,54],[97,47,109,55],[97,49,109,57],[98,10,110,20],[98,14,110,24],[99,12,111,24,"response"],[99,20,111,32],[99,23,111,35,"responseCtor"],[99,35,111,47],[99,36,111,48,"self"],[99,40,111,52],[99,41,111,53,"responseDelimited"],[99,58,111,70],[99,61,111,73],[99,78,111,90],[99,81,111,93],[99,89,111,101],[99,90,111,102],[99,91,111,103,"response"],[99,99,111,111],[99,100,111,112],[100,10,112,20],[100,11,112,21],[100,12,112,22],[100,19,112,29,"err"],[100,22,112,32],[100,24,112,34],[101,12,113,24,"self"],[101,16,113,28],[101,17,113,29,"emit"],[101,21,113,33],[101,22,113,34],[101,29,113,41],[101,31,113,43,"err"],[101,34,113,46],[101,36,113,48,"method"],[101,42,113,54],[101,43,113,55],[102,12,114,24],[102,19,114,31,"callback"],[102,27,114,39],[102,28,114,40,"err"],[102,31,114,43],[102,32,114,44],[103,10,115,20],[104,8,116,16],[105,8,118,16,"self"],[105,12,118,20],[105,13,118,21,"emit"],[105,17,118,25],[105,18,118,26],[105,24,118,32],[105,26,118,34,"response"],[105,34,118,42],[105,36,118,44,"method"],[105,42,118,50],[105,43,118,51],[106,8,119,16],[106,15,119,23,"callback"],[106,23,119,31],[106,24,119,32],[106,28,119,36],[106,30,119,38,"response"],[106,38,119,46],[106,39,119,47],[107,6,120,12],[107,7,121,8],[107,8,121,9],[108,4,122,4],[108,5,122,5],[108,6,122,6],[108,13,122,13,"err"],[108,16,122,16],[108,18,122,18],[109,6,123,8,"self"],[109,10,123,12],[109,11,123,13,"emit"],[109,15,123,17],[109,16,123,18],[109,23,123,25],[109,25,123,27,"err"],[109,28,123,30],[109,30,123,32,"method"],[109,36,123,38],[109,37,123,39],[110,6,124,8,"setTimeout"],[110,16,124,18],[110,17,124,19],[110,29,124,30],[111,8,124,32,"callback"],[111,16,124,40],[111,17,124,41,"err"],[111,20,124,44],[111,21,124,45],[112,6,124,47],[112,7,124,48],[112,9,124,50],[112,10,124,51],[112,11,124,52],[113,6,125,8],[113,13,125,15,"undefined"],[113,22,125,24],[114,4,126,4],[115,2,127,0],[115,3,127,1],[117,2,129,0],[118,0,130,0],[119,0,131,0],[120,0,132,0],[121,0,133,0],[122,2,134,0,"Service"],[122,9,134,7],[122,10,134,8,"prototype"],[122,19,134,17],[122,20,134,18,"end"],[122,23,134,21],[122,26,134,24],[122,35,134,33,"end"],[122,38,134,36,"end"],[122,39,134,37,"endedByRPC"],[122,49,134,47],[122,51,134,49],[123,4,135,4],[123,8,135,8],[123,12,135,12],[123,13,135,13,"rpcImpl"],[123,20,135,20],[123,22,135,22],[124,6,136,8],[124,10,136,12],[124,11,136,13,"endedByRPC"],[124,21,136,23],[125,8,136,25],[126,8,137,12],[126,12,137,16],[126,13,137,17,"rpcImpl"],[126,20,137,24],[126,21,137,25],[126,25,137,29],[126,27,137,31],[126,31,137,35],[126,33,137,37],[126,37,137,41],[126,38,137,42],[127,6,138,8],[127,10,138,12],[127,11,138,13,"rpcImpl"],[127,18,138,20],[127,21,138,23],[127,25,138,27],[128,6,139,8],[128,10,139,12],[128,11,139,13,"emit"],[128,15,139,17],[128,16,139,18],[128,21,139,23],[128,22,139,24],[128,23,139,25,"off"],[128,26,139,28],[128,27,139,29],[128,28,139,30],[129,4,140,4],[130,4,141,4],[130,11,141,11],[130,15,141,15],[131,2,142,0],[131,3,142,1],[132,0,142,2],[132,3]],"functionMap":{"names":["<global>","Service","rpcCall","setTimeout$argument_0","rpcCallback","end"],"mappings":"AAA;ACyC;CDwB;4BEa;mBCU,gDD;YEQ;aFuB;mBCI,6BD;CFG;wBKO;CLQ"}},"type":"js/module"}]}