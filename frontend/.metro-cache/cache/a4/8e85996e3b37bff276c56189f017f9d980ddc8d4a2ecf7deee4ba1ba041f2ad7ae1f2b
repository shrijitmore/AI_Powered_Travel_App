{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StreamDecoder = void 0;\n  var ReadState;\n  (function (ReadState) {\n    ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n    ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n    ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n  })(ReadState || (ReadState = {}));\n  class StreamDecoder {\n    constructor(maxReadMessageLength) {\n      this.maxReadMessageLength = maxReadMessageLength;\n      this.readState = ReadState.NO_DATA;\n      this.readCompressFlag = Buffer.alloc(1);\n      this.readPartialSize = Buffer.alloc(4);\n      this.readSizeRemaining = 4;\n      this.readMessageSize = 0;\n      this.readPartialMessage = [];\n      this.readMessageRemaining = 0;\n    }\n    write(data) {\n      let readHead = 0;\n      let toRead;\n      const result = [];\n      while (readHead < data.length) {\n        switch (this.readState) {\n          case ReadState.NO_DATA:\n            this.readCompressFlag = data.slice(readHead, readHead + 1);\n            readHead += 1;\n            this.readState = ReadState.READING_SIZE;\n            this.readPartialSize.fill(0);\n            this.readSizeRemaining = 4;\n            this.readMessageSize = 0;\n            this.readMessageRemaining = 0;\n            this.readPartialMessage = [];\n            break;\n          case ReadState.READING_SIZE:\n            toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n            data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n            this.readSizeRemaining -= toRead;\n            readHead += toRead;\n            // readSizeRemaining >=0 here\n            if (this.readSizeRemaining === 0) {\n              this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n              if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {\n                throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);\n              }\n              this.readMessageRemaining = this.readMessageSize;\n              if (this.readMessageRemaining > 0) {\n                this.readState = ReadState.READING_MESSAGE;\n              } else {\n                const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\n                this.readState = ReadState.NO_DATA;\n                result.push(message);\n              }\n            }\n            break;\n          case ReadState.READING_MESSAGE:\n            toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n            this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n            this.readMessageRemaining -= toRead;\n            readHead += toRead;\n            // readMessageRemaining >=0 here\n            if (this.readMessageRemaining === 0) {\n              // At this point, we have read a full message\n              const framedMessageBuffers = [this.readCompressFlag, this.readPartialSize].concat(this.readPartialMessage);\n              const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n              this.readState = ReadState.NO_DATA;\n              result.push(framedMessage);\n            }\n            break;\n          default:\n            throw new Error('Unexpected read state');\n        }\n      }\n      return result;\n    }\n  }\n  exports.StreamDecoder = StreamDecoder;\n});","lineCount":100,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"StreamDecoder"],[23,23,19,21],[23,26,19,24],[23,31,19,29],[23,32,19,30],[24,2,20,0],[24,6,20,4,"ReadState"],[24,15,20,13],[25,2,21,0],[25,3,21,1],[25,13,21,11,"ReadState"],[25,22,21,20],[25,24,21,22],[26,4,22,4,"ReadState"],[26,13,22,13],[26,14,22,14,"ReadState"],[26,23,22,23],[26,24,22,24],[26,33,22,33],[26,34,22,34],[26,37,22,37],[26,38,22,38],[26,39,22,39],[26,42,22,42],[26,51,22,51],[27,4,23,4,"ReadState"],[27,13,23,13],[27,14,23,14,"ReadState"],[27,23,23,23],[27,24,23,24],[27,38,23,38],[27,39,23,39],[27,42,23,42],[27,43,23,43],[27,44,23,44],[27,47,23,47],[27,61,23,61],[28,4,24,4,"ReadState"],[28,13,24,13],[28,14,24,14,"ReadState"],[28,23,24,23],[28,24,24,24],[28,41,24,41],[28,42,24,42],[28,45,24,45],[28,46,24,46],[28,47,24,47],[28,50,24,50],[28,67,24,67],[29,2,25,0],[29,3,25,1],[29,5,25,3,"ReadState"],[29,14,25,12],[29,19,25,17,"ReadState"],[29,28,25,26],[29,31,25,29],[29,32,25,30],[29,33,25,31],[29,34,25,32],[29,35,25,33],[30,2,26,0],[30,8,26,6,"StreamDecoder"],[30,21,26,19],[30,22,26,20],[31,4,27,4,"constructor"],[31,15,27,15,"constructor"],[31,16,27,16,"maxReadMessageLength"],[31,36,27,36],[31,38,27,38],[32,6,28,8],[32,10,28,12],[32,11,28,13,"maxReadMessageLength"],[32,31,28,33],[32,34,28,36,"maxReadMessageLength"],[32,54,28,56],[33,6,29,8],[33,10,29,12],[33,11,29,13,"readState"],[33,20,29,22],[33,23,29,25,"ReadState"],[33,32,29,34],[33,33,29,35,"NO_DATA"],[33,40,29,42],[34,6,30,8],[34,10,30,12],[34,11,30,13,"readCompressFlag"],[34,27,30,29],[34,30,30,32,"Buffer"],[34,36,30,38],[34,37,30,39,"alloc"],[34,42,30,44],[34,43,30,45],[34,44,30,46],[34,45,30,47],[35,6,31,8],[35,10,31,12],[35,11,31,13,"readPartialSize"],[35,26,31,28],[35,29,31,31,"Buffer"],[35,35,31,37],[35,36,31,38,"alloc"],[35,41,31,43],[35,42,31,44],[35,43,31,45],[35,44,31,46],[36,6,32,8],[36,10,32,12],[36,11,32,13,"readSizeRemaining"],[36,28,32,30],[36,31,32,33],[36,32,32,34],[37,6,33,8],[37,10,33,12],[37,11,33,13,"readMessageSize"],[37,26,33,28],[37,29,33,31],[37,30,33,32],[38,6,34,8],[38,10,34,12],[38,11,34,13,"readPartialMessage"],[38,29,34,31],[38,32,34,34],[38,34,34,36],[39,6,35,8],[39,10,35,12],[39,11,35,13,"readMessageRemaining"],[39,31,35,33],[39,34,35,36],[39,35,35,37],[40,4,36,4],[41,4,37,4,"write"],[41,9,37,9,"write"],[41,10,37,10,"data"],[41,14,37,14],[41,16,37,16],[42,6,38,8],[42,10,38,12,"readHead"],[42,18,38,20],[42,21,38,23],[42,22,38,24],[43,6,39,8],[43,10,39,12,"toRead"],[43,16,39,18],[44,6,40,8],[44,12,40,14,"result"],[44,18,40,20],[44,21,40,23],[44,23,40,25],[45,6,41,8],[45,13,41,15,"readHead"],[45,21,41,23],[45,24,41,26,"data"],[45,28,41,30],[45,29,41,31,"length"],[45,35,41,37],[45,37,41,39],[46,8,42,12],[46,16,42,20],[46,20,42,24],[46,21,42,25,"readState"],[46,30,42,34],[47,10,43,16],[47,15,43,21,"ReadState"],[47,24,43,30],[47,25,43,31,"NO_DATA"],[47,32,43,38],[48,12,44,20],[48,16,44,24],[48,17,44,25,"readCompressFlag"],[48,33,44,41],[48,36,44,44,"data"],[48,40,44,48],[48,41,44,49,"slice"],[48,46,44,54],[48,47,44,55,"readHead"],[48,55,44,63],[48,57,44,65,"readHead"],[48,65,44,73],[48,68,44,76],[48,69,44,77],[48,70,44,78],[49,12,45,20,"readHead"],[49,20,45,28],[49,24,45,32],[49,25,45,33],[50,12,46,20],[50,16,46,24],[50,17,46,25,"readState"],[50,26,46,34],[50,29,46,37,"ReadState"],[50,38,46,46],[50,39,46,47,"READING_SIZE"],[50,51,46,59],[51,12,47,20],[51,16,47,24],[51,17,47,25,"readPartialSize"],[51,32,47,40],[51,33,47,41,"fill"],[51,37,47,45],[51,38,47,46],[51,39,47,47],[51,40,47,48],[52,12,48,20],[52,16,48,24],[52,17,48,25,"readSizeRemaining"],[52,34,48,42],[52,37,48,45],[52,38,48,46],[53,12,49,20],[53,16,49,24],[53,17,49,25,"readMessageSize"],[53,32,49,40],[53,35,49,43],[53,36,49,44],[54,12,50,20],[54,16,50,24],[54,17,50,25,"readMessageRemaining"],[54,37,50,45],[54,40,50,48],[54,41,50,49],[55,12,51,20],[55,16,51,24],[55,17,51,25,"readPartialMessage"],[55,35,51,43],[55,38,51,46],[55,40,51,48],[56,12,52,20],[57,10,53,16],[57,15,53,21,"ReadState"],[57,24,53,30],[57,25,53,31,"READING_SIZE"],[57,37,53,43],[58,12,54,20,"toRead"],[58,18,54,26],[58,21,54,29,"Math"],[58,25,54,33],[58,26,54,34,"min"],[58,29,54,37],[58,30,54,38,"data"],[58,34,54,42],[58,35,54,43,"length"],[58,41,54,49],[58,44,54,52,"readHead"],[58,52,54,60],[58,54,54,62],[58,58,54,66],[58,59,54,67,"readSizeRemaining"],[58,76,54,84],[58,77,54,85],[59,12,55,20,"data"],[59,16,55,24],[59,17,55,25,"copy"],[59,21,55,29],[59,22,55,30],[59,26,55,34],[59,27,55,35,"readPartialSize"],[59,42,55,50],[59,44,55,52],[59,45,55,53],[59,48,55,56],[59,52,55,60],[59,53,55,61,"readSizeRemaining"],[59,70,55,78],[59,72,55,80,"readHead"],[59,80,55,88],[59,82,55,90,"readHead"],[59,90,55,98],[59,93,55,101,"toRead"],[59,99,55,107],[59,100,55,108],[60,12,56,20],[60,16,56,24],[60,17,56,25,"readSizeRemaining"],[60,34,56,42],[60,38,56,46,"toRead"],[60,44,56,52],[61,12,57,20,"readHead"],[61,20,57,28],[61,24,57,32,"toRead"],[61,30,57,38],[62,12,58,20],[63,12,59,20],[63,16,59,24],[63,20,59,28],[63,21,59,29,"readSizeRemaining"],[63,38,59,46],[63,43,59,51],[63,44,59,52],[63,46,59,54],[64,14,60,24],[64,18,60,28],[64,19,60,29,"readMessageSize"],[64,34,60,44],[64,37,60,47],[64,41,60,51],[64,42,60,52,"readPartialSize"],[64,57,60,67],[64,58,60,68,"readUInt32BE"],[64,70,60,80],[64,71,60,81],[64,72,60,82],[64,73,60,83],[65,14,61,24],[65,18,61,28],[65,22,61,32],[65,23,61,33,"maxReadMessageLength"],[65,43,61,53],[65,48,61,58],[65,49,61,59],[65,50,61,60],[65,54,61,64],[65,58,61,68],[65,59,61,69,"readMessageSize"],[65,74,61,84],[65,77,61,87],[65,81,61,91],[65,82,61,92,"maxReadMessageLength"],[65,102,61,112],[65,104,61,114],[66,16,62,28],[66,22,62,34],[66,26,62,38,"Error"],[66,31,62,43],[66,32,62,44],[66,69,62,81],[66,73,62,85],[66,74,62,86,"readMessageSize"],[66,89,62,101],[66,96,62,108],[66,100,62,112],[66,101,62,113,"maxReadMessageLength"],[66,121,62,133],[66,124,62,136],[66,125,62,137],[67,14,63,24],[68,14,64,24],[68,18,64,28],[68,19,64,29,"readMessageRemaining"],[68,39,64,49],[68,42,64,52],[68,46,64,56],[68,47,64,57,"readMessageSize"],[68,62,64,72],[69,14,65,24],[69,18,65,28],[69,22,65,32],[69,23,65,33,"readMessageRemaining"],[69,43,65,53],[69,46,65,56],[69,47,65,57],[69,49,65,59],[70,16,66,28],[70,20,66,32],[70,21,66,33,"readState"],[70,30,66,42],[70,33,66,45,"ReadState"],[70,42,66,54],[70,43,66,55,"READING_MESSAGE"],[70,58,66,70],[71,14,67,24],[71,15,67,25],[71,21,68,29],[72,16,69,28],[72,22,69,34,"message"],[72,29,69,41],[72,32,69,44,"Buffer"],[72,38,69,50],[72,39,69,51,"concat"],[72,45,69,57],[72,46,69,58],[72,47,69,59],[72,51,69,63],[72,52,69,64,"readCompressFlag"],[72,68,69,80],[72,70,69,82],[72,74,69,86],[72,75,69,87,"readPartialSize"],[72,90,69,102],[72,91,69,103],[72,93,69,105],[72,94,69,106],[72,95,69,107],[73,16,70,28],[73,20,70,32],[73,21,70,33,"readState"],[73,30,70,42],[73,33,70,45,"ReadState"],[73,42,70,54],[73,43,70,55,"NO_DATA"],[73,50,70,62],[74,16,71,28,"result"],[74,22,71,34],[74,23,71,35,"push"],[74,27,71,39],[74,28,71,40,"message"],[74,35,71,47],[74,36,71,48],[75,14,72,24],[76,12,73,20],[77,12,74,20],[78,10,75,16],[78,15,75,21,"ReadState"],[78,24,75,30],[78,25,75,31,"READING_MESSAGE"],[78,40,75,46],[79,12,76,20,"toRead"],[79,18,76,26],[79,21,76,29,"Math"],[79,25,76,33],[79,26,76,34,"min"],[79,29,76,37],[79,30,76,38,"data"],[79,34,76,42],[79,35,76,43,"length"],[79,41,76,49],[79,44,76,52,"readHead"],[79,52,76,60],[79,54,76,62],[79,58,76,66],[79,59,76,67,"readMessageRemaining"],[79,79,76,87],[79,80,76,88],[80,12,77,20],[80,16,77,24],[80,17,77,25,"readPartialMessage"],[80,35,77,43],[80,36,77,44,"push"],[80,40,77,48],[80,41,77,49,"data"],[80,45,77,53],[80,46,77,54,"slice"],[80,51,77,59],[80,52,77,60,"readHead"],[80,60,77,68],[80,62,77,70,"readHead"],[80,70,77,78],[80,73,77,81,"toRead"],[80,79,77,87],[80,80,77,88],[80,81,77,89],[81,12,78,20],[81,16,78,24],[81,17,78,25,"readMessageRemaining"],[81,37,78,45],[81,41,78,49,"toRead"],[81,47,78,55],[82,12,79,20,"readHead"],[82,20,79,28],[82,24,79,32,"toRead"],[82,30,79,38],[83,12,80,20],[84,12,81,20],[84,16,81,24],[84,20,81,28],[84,21,81,29,"readMessageRemaining"],[84,41,81,49],[84,46,81,54],[84,47,81,55],[84,49,81,57],[85,14,82,24],[86,14,83,24],[86,20,83,30,"framedMessageBuffers"],[86,40,83,50],[86,43,83,53],[86,44,84,28],[86,48,84,32],[86,49,84,33,"readCompressFlag"],[86,65,84,49],[86,67,85,28],[86,71,85,32],[86,72,85,33,"readPartialSize"],[86,87,85,48],[86,88,86,25],[86,89,86,26,"concat"],[86,95,86,32],[86,96,86,33],[86,100,86,37],[86,101,86,38,"readPartialMessage"],[86,119,86,56],[86,120,86,57],[87,14,87,24],[87,20,87,30,"framedMessage"],[87,33,87,43],[87,36,87,46,"Buffer"],[87,42,87,52],[87,43,87,53,"concat"],[87,49,87,59],[87,50,87,60,"framedMessageBuffers"],[87,70,87,80],[87,72,87,82],[87,76,87,86],[87,77,87,87,"readMessageSize"],[87,92,87,102],[87,95,87,105],[87,96,87,106],[87,97,87,107],[88,14,88,24],[88,18,88,28],[88,19,88,29,"readState"],[88,28,88,38],[88,31,88,41,"ReadState"],[88,40,88,50],[88,41,88,51,"NO_DATA"],[88,48,88,58],[89,14,89,24,"result"],[89,20,89,30],[89,21,89,31,"push"],[89,25,89,35],[89,26,89,36,"framedMessage"],[89,39,89,49],[89,40,89,50],[90,12,90,20],[91,12,91,20],[92,10,92,16],[93,12,93,20],[93,18,93,26],[93,22,93,30,"Error"],[93,27,93,35],[93,28,93,36],[93,51,93,59],[93,52,93,60],[94,8,94,12],[95,6,95,8],[96,6,96,8],[96,13,96,15,"result"],[96,19,96,21],[97,4,97,4],[98,2,98,0],[99,2,99,0,"exports"],[99,9,99,7],[99,10,99,8,"StreamDecoder"],[99,23,99,21],[99,26,99,24,"StreamDecoder"],[99,39,99,37],[100,0,99,38],[100,3]],"functionMap":{"names":["<global>","<anonymous>","StreamDecoder","StreamDecoder#constructor","StreamDecoder#write"],"mappings":"AAA;CCoB;CDI;AEC;ICC;KDS;IEC;KF4D;CFC"}},"type":"js/module"}]}