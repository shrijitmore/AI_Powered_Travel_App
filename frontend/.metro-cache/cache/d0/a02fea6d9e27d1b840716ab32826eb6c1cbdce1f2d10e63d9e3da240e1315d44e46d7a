{"dependencies":[{"name":"./util/minimal","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":56},"end":{"line":4,"column":41,"index":81}}],"key":"lbVPmRyLj/Ai/u8LmEyLBVy/L2I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = Writer;\n  var util = require(_dependencyMap[0], \"./util/minimal\");\n  var BufferWriter; // cyclic\n\n  var LongBits = util.LongBits,\n    base64 = util.base64,\n    utf8 = util.utf8;\n\n  /**\n   * Constructs a new writer operation instance.\n   * @classdesc Scheduled writer operation.\n   * @constructor\n   * @param {function(*, Uint8Array, number)} fn Function to call\n   * @param {number} len Value byte length\n   * @param {*} val Value to write\n   * @ignore\n   */\n  function Op(fn, len, val) {\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n  }\n\n  /* istanbul ignore next */\n  function noop() {} // eslint-disable-line no-empty-function\n\n  /**\n   * Constructs a new writer state instance.\n   * @classdesc Copied writer state.\n   * @memberof Writer\n   * @constructor\n   * @param {Writer} writer Writer to copy state from\n   * @ignore\n   */\n  function State(writer) {\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n  }\n\n  /**\n   * Constructs a new writer instance.\n   * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n   * @constructor\n   */\n  function Writer() {\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n  }\n  var create = function create() {\n    return util.Buffer ? function create_buffer_setup() {\n      return (Writer.create = function create_buffer() {\n        return new BufferWriter();\n      })();\n    }\n    /* istanbul ignore next */ : function create_array() {\n      return new Writer();\n    };\n  };\n\n  /**\n   * Creates a new writer.\n   * @function\n   * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n   */\n  Writer.create = create();\n\n  /**\n   * Allocates a buffer of the specified size.\n   * @param {number} size Buffer size\n   * @returns {Uint8Array} Buffer\n   */\n  Writer.alloc = function alloc(size) {\n    return new util.Array(size);\n  };\n\n  // Use Uint8Array buffer pool in the browser, just like node does with buffers\n  /* istanbul ignore else */\n  if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n  /**\n   * Pushes a new operation to the queue.\n   * @param {function(Uint8Array, number, *)} fn Function to call\n   * @param {number} len Value byte length\n   * @param {number} val Value to write\n   * @returns {Writer} `this`\n   * @private\n   */\n  Writer.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n  };\n  function writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n  }\n  function writeVarint32(val, buf, pos) {\n    while (val > 127) {\n      buf[pos++] = val & 127 | 128;\n      val >>>= 7;\n    }\n    buf[pos] = val;\n  }\n\n  /**\n   * Constructs a new varint writer operation instance.\n   * @classdesc Scheduled varint writer operation.\n   * @extends Op\n   * @constructor\n   * @param {number} len Value byte length\n   * @param {number} val Value to write\n   * @ignore\n   */\n  function VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n  }\n  VarintOp.prototype = Object.create(Op.prototype);\n  VarintOp.prototype.fn = writeVarint32;\n\n  /**\n   * Writes an unsigned 32 bit value as a varint.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n    return this;\n  };\n\n  /**\n   * Writes a signed 32 bit value as a varint.\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.int32 = function write_int32(value) {\n    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n    : this.uint32(value);\n  };\n\n  /**\n   * Writes a 32 bit value as a varint, zig-zag encoded.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n  };\n  function writeVarint64(val, buf, pos) {\n    while (val.hi) {\n      buf[pos++] = val.lo & 127 | 128;\n      val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n      val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n      buf[pos++] = val.lo & 127 | 128;\n      val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n  };\n\n  /**\n   * Writes a signed 64 bit value as a varint.\n   * @function\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.int64 = Writer.prototype.uint64;\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n  };\n\n  /**\n   * Writes a boolish value as a varint.\n   * @param {boolean} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n  };\n  function writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as fixed 32 bits.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n  };\n\n  /**\n   * Writes a signed 32 bit value as fixed 32 bits.\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.sfixed32 = Writer.prototype.fixed32;\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n  };\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits.\n   * @function\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.sfixed64 = Writer.prototype.fixed64;\n\n  /**\n   * Writes a float (32 bit).\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n  };\n\n  /**\n   * Writes a double (64 bit float).\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n  };\n  var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n    buf.set(val, pos); // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n    for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n  };\n\n  /**\n   * Writes a sequence of bytes.\n   * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len) return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n      var buf = Writer.alloc(len = base64.length(value));\n      base64.decode(value, buf, 0);\n      value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n  };\n\n  /**\n   * Writes a string.\n   * @param {string} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n  };\n\n  /**\n   * Forks this writer's state by pushing it to a stack.\n   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n  };\n\n  /**\n   * Resets this instance to the last state.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.reset = function reset() {\n    if (this.states) {\n      this.head = this.states.head;\n      this.tail = this.states.tail;\n      this.len = this.states.len;\n      this.states = this.states.next;\n    } else {\n      this.head = this.tail = new Op(noop, 0, 0);\n      this.len = 0;\n    }\n    return this;\n  };\n\n  /**\n   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.ldelim = function ldelim() {\n    var head = this.head,\n      tail = this.tail,\n      len = this.len;\n    this.reset().uint32(len);\n    if (len) {\n      this.tail.next = head.next; // skip noop\n      this.tail = tail;\n      this.len += len;\n    }\n    return this;\n  };\n\n  /**\n   * Finishes the write operation.\n   * @returns {Uint8Array} Finished buffer\n   */\n  Writer.prototype.finish = function finish() {\n    var head = this.head.next,\n      // skip noop\n      buf = this.constructor.alloc(this.len),\n      pos = 0;\n    while (head) {\n      head.fn(head.val, buf, pos);\n      pos += head.len;\n      head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n  };\n  Writer._configure = function (BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n  };\n});","lineCount":439,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"Writer"],[4,25,2,23],[5,2,4,0],[5,6,4,4,"util"],[5,10,4,8],[5,13,4,16,"require"],[5,20,4,23],[5,21,4,23,"_dependencyMap"],[5,35,4,23],[5,56,4,40],[5,57,4,41],[6,2,6,0],[6,6,6,4,"BufferWriter"],[6,18,6,16],[6,19,6,17],[6,20,6,18],[8,2,8,0],[8,6,8,4,"LongBits"],[8,14,8,12],[8,17,8,16,"util"],[8,21,8,20],[8,22,8,21,"LongBits"],[8,30,8,29],[9,4,9,4,"base64"],[9,10,9,10],[9,13,9,16,"util"],[9,17,9,20],[9,18,9,21,"base64"],[9,24,9,27],[10,4,10,4,"utf8"],[10,8,10,8],[10,11,10,16,"util"],[10,15,10,20],[10,16,10,21,"utf8"],[10,20,10,25],[12,2,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,0,20,0],[21,2,21,0],[21,11,21,9,"Op"],[21,13,21,11,"Op"],[21,14,21,12,"fn"],[21,16,21,14],[21,18,21,16,"len"],[21,21,21,19],[21,23,21,21,"val"],[21,26,21,24],[21,28,21,26],[22,4,23,4],[23,0,24,0],[24,0,25,0],[25,0,26,0],[26,4,27,4],[26,8,27,8],[26,9,27,9,"fn"],[26,11,27,11],[26,14,27,14,"fn"],[26,16,27,16],[28,4,29,4],[29,0,30,0],[30,0,31,0],[31,0,32,0],[32,4,33,4],[32,8,33,8],[32,9,33,9,"len"],[32,12,33,12],[32,15,33,15,"len"],[32,18,33,18],[34,4,35,4],[35,0,36,0],[36,0,37,0],[37,0,38,0],[38,4,39,4],[38,8,39,8],[38,9,39,9,"next"],[38,13,39,13],[38,16,39,16,"undefined"],[38,25,39,25],[40,4,41,4],[41,0,42,0],[42,0,43,0],[43,0,44,0],[44,4,45,4],[44,8,45,8],[44,9,45,9,"val"],[44,12,45,12],[44,15,45,15,"val"],[44,18,45,18],[44,19,45,19],[44,20,45,20],[45,2,46,0],[47,2,48,0],[48,2,49,0],[48,11,49,9,"noop"],[48,15,49,13,"noop"],[48,16,49,13],[48,18,49,16],[48,19,49,17],[48,20,49,18],[48,21,49,19],[50,2,51,0],[51,0,52,0],[52,0,53,0],[53,0,54,0],[54,0,55,0],[55,0,56,0],[56,0,57,0],[57,0,58,0],[58,2,59,0],[58,11,59,9,"State"],[58,16,59,14,"State"],[58,17,59,15,"writer"],[58,23,59,21],[58,25,59,23],[59,4,61,4],[60,0,62,0],[61,0,63,0],[62,0,64,0],[63,4,65,4],[63,8,65,8],[63,9,65,9,"head"],[63,13,65,13],[63,16,65,16,"writer"],[63,22,65,22],[63,23,65,23,"head"],[63,27,65,27],[65,4,67,4],[66,0,68,0],[67,0,69,0],[68,0,70,0],[69,4,71,4],[69,8,71,8],[69,9,71,9,"tail"],[69,13,71,13],[69,16,71,16,"writer"],[69,22,71,22],[69,23,71,23,"tail"],[69,27,71,27],[71,4,73,4],[72,0,74,0],[73,0,75,0],[74,0,76,0],[75,4,77,4],[75,8,77,8],[75,9,77,9,"len"],[75,12,77,12],[75,15,77,15,"writer"],[75,21,77,21],[75,22,77,22,"len"],[75,25,77,25],[77,4,79,4],[78,0,80,0],[79,0,81,0],[80,0,82,0],[81,4,83,4],[81,8,83,8],[81,9,83,9,"next"],[81,13,83,13],[81,16,83,16,"writer"],[81,22,83,22],[81,23,83,23,"states"],[81,29,83,29],[82,2,84,0],[84,2,86,0],[85,0,87,0],[86,0,88,0],[87,0,89,0],[88,0,90,0],[89,2,91,0],[89,11,91,9,"Writer"],[89,17,91,15,"Writer"],[89,18,91,15],[89,20,91,18],[90,4,93,4],[91,0,94,0],[92,0,95,0],[93,0,96,0],[94,4,97,4],[94,8,97,8],[94,9,97,9,"len"],[94,12,97,12],[94,15,97,15],[94,16,97,16],[96,4,99,4],[97,0,100,0],[98,0,101,0],[99,0,102,0],[100,4,103,4],[100,8,103,8],[100,9,103,9,"head"],[100,13,103,13],[100,16,103,16],[100,20,103,20,"Op"],[100,22,103,22],[100,23,103,23,"noop"],[100,27,103,27],[100,29,103,29],[100,30,103,30],[100,32,103,32],[100,33,103,33],[100,34,103,34],[102,4,105,4],[103,0,106,0],[104,0,107,0],[105,0,108,0],[106,4,109,4],[106,8,109,8],[106,9,109,9,"tail"],[106,13,109,13],[106,16,109,16],[106,20,109,20],[106,21,109,21,"head"],[106,25,109,25],[108,4,111,4],[109,0,112,0],[110,0,113,0],[111,0,114,0],[112,4,115,4],[112,8,115,8],[112,9,115,9,"states"],[112,15,115,15],[112,18,115,18],[112,22,115,22],[114,4,117,4],[115,4,118,4],[116,4,119,4],[117,4,120,4],[118,4,121,4],[119,2,122,0],[120,2,124,0],[120,6,124,4,"create"],[120,12,124,10],[120,15,124,13],[120,24,124,22,"create"],[120,30,124,28,"create"],[120,31,124,28],[120,33,124,31],[121,4,125,4],[121,11,125,11,"util"],[121,15,125,15],[121,16,125,16,"Buffer"],[121,22,125,22],[121,25,126,10],[121,34,126,19,"create_buffer_setup"],[121,53,126,38,"create_buffer_setup"],[121,54,126,38],[121,56,126,41],[122,6,127,12],[122,13,127,19],[122,14,127,20,"Writer"],[122,20,127,26],[122,21,127,27,"create"],[122,27,127,33],[122,30,127,36],[122,39,127,45,"create_buffer"],[122,52,127,58,"create_buffer"],[122,53,127,58],[122,55,127,61],[123,8,128,16],[123,15,128,23],[123,19,128,27,"BufferWriter"],[123,31,128,39],[123,32,128,40],[123,33,128,41],[124,6,129,12],[124,7,129,13],[124,9,129,15],[124,10,129,16],[125,4,130,8],[126,4,131,8],[126,33,132,10],[126,42,132,19,"create_array"],[126,54,132,31,"create_array"],[126,55,132,31],[126,57,132,34],[127,6,133,12],[127,13,133,19],[127,17,133,23,"Writer"],[127,23,133,29],[127,24,133,30],[127,25,133,31],[128,4,134,8],[128,5,134,9],[129,2,135,0],[129,3,135,1],[131,2,137,0],[132,0,138,0],[133,0,139,0],[134,0,140,0],[135,0,141,0],[136,2,142,0,"Writer"],[136,8,142,6],[136,9,142,7,"create"],[136,15,142,13],[136,18,142,16,"create"],[136,24,142,22],[136,25,142,23],[136,26,142,24],[138,2,144,0],[139,0,145,0],[140,0,146,0],[141,0,147,0],[142,0,148,0],[143,2,149,0,"Writer"],[143,8,149,6],[143,9,149,7,"alloc"],[143,14,149,12],[143,17,149,15],[143,26,149,24,"alloc"],[143,31,149,29,"alloc"],[143,32,149,30,"size"],[143,36,149,34],[143,38,149,36],[144,4,150,4],[144,11,150,11],[144,15,150,15,"util"],[144,19,150,19],[144,20,150,20,"Array"],[144,25,150,25],[144,26,150,26,"size"],[144,30,150,30],[144,31,150,31],[145,2,151,0],[145,3,151,1],[147,2,153,0],[148,2,154,0],[149,2,155,0],[149,6,155,4,"util"],[149,10,155,8],[149,11,155,9,"Array"],[149,16,155,14],[149,21,155,19,"Array"],[149,26,155,24],[149,28,156,4,"Writer"],[149,34,156,10],[149,35,156,11,"alloc"],[149,40,156,16],[149,43,156,19,"util"],[149,47,156,23],[149,48,156,24,"pool"],[149,52,156,28],[149,53,156,29,"Writer"],[149,59,156,35],[149,60,156,36,"alloc"],[149,65,156,41],[149,67,156,43,"util"],[149,71,156,47],[149,72,156,48,"Array"],[149,77,156,53],[149,78,156,54,"prototype"],[149,87,156,63],[149,88,156,64,"subarray"],[149,96,156,72],[149,97,156,73],[151,2,158,0],[152,0,159,0],[153,0,160,0],[154,0,161,0],[155,0,162,0],[156,0,163,0],[157,0,164,0],[158,0,165,0],[159,2,166,0,"Writer"],[159,8,166,6],[159,9,166,7,"prototype"],[159,18,166,16],[159,19,166,17,"_push"],[159,24,166,22],[159,27,166,25],[159,36,166,34,"push"],[159,40,166,38,"push"],[159,41,166,39,"fn"],[159,43,166,41],[159,45,166,43,"len"],[159,48,166,46],[159,50,166,48,"val"],[159,53,166,51],[159,55,166,53],[160,4,167,4],[160,8,167,8],[160,9,167,9,"tail"],[160,13,167,13],[160,16,167,16],[160,20,167,20],[160,21,167,21,"tail"],[160,25,167,25],[160,26,167,26,"next"],[160,30,167,30],[160,33,167,33],[160,37,167,37,"Op"],[160,39,167,39],[160,40,167,40,"fn"],[160,42,167,42],[160,44,167,44,"len"],[160,47,167,47],[160,49,167,49,"val"],[160,52,167,52],[160,53,167,53],[161,4,168,4],[161,8,168,8],[161,9,168,9,"len"],[161,12,168,12],[161,16,168,16,"len"],[161,19,168,19],[162,4,169,4],[162,11,169,11],[162,15,169,15],[163,2,170,0],[163,3,170,1],[164,2,172,0],[164,11,172,9,"writeByte"],[164,20,172,18,"writeByte"],[164,21,172,19,"val"],[164,24,172,22],[164,26,172,24,"buf"],[164,29,172,27],[164,31,172,29,"pos"],[164,34,172,32],[164,36,172,34],[165,4,173,4,"buf"],[165,7,173,7],[165,8,173,8,"pos"],[165,11,173,11],[165,12,173,12],[165,15,173,15,"val"],[165,18,173,18],[165,21,173,21],[165,24,173,24],[166,2,174,0],[167,2,176,0],[167,11,176,9,"writeVarint32"],[167,24,176,22,"writeVarint32"],[167,25,176,23,"val"],[167,28,176,26],[167,30,176,28,"buf"],[167,33,176,31],[167,35,176,33,"pos"],[167,38,176,36],[167,40,176,38],[168,4,177,4],[168,11,177,11,"val"],[168,14,177,14],[168,17,177,17],[168,20,177,20],[168,22,177,22],[169,6,178,8,"buf"],[169,9,178,11],[169,10,178,12,"pos"],[169,13,178,15],[169,15,178,17],[169,16,178,18],[169,19,178,21,"val"],[169,22,178,24],[169,25,178,27],[169,28,178,30],[169,31,178,33],[169,34,178,36],[170,6,179,8,"val"],[170,9,179,11],[170,15,179,17],[170,16,179,18],[171,4,180,4],[172,4,181,4,"buf"],[172,7,181,7],[172,8,181,8,"pos"],[172,11,181,11],[172,12,181,12],[172,15,181,15,"val"],[172,18,181,18],[173,2,182,0],[175,2,184,0],[176,0,185,0],[177,0,186,0],[178,0,187,0],[179,0,188,0],[180,0,189,0],[181,0,190,0],[182,0,191,0],[183,0,192,0],[184,2,193,0],[184,11,193,9,"VarintOp"],[184,19,193,17,"VarintOp"],[184,20,193,18,"len"],[184,23,193,21],[184,25,193,23,"val"],[184,28,193,26],[184,30,193,28],[185,4,194,4],[185,8,194,8],[185,9,194,9,"len"],[185,12,194,12],[185,15,194,15,"len"],[185,18,194,18],[186,4,195,4],[186,8,195,8],[186,9,195,9,"next"],[186,13,195,13],[186,16,195,16,"undefined"],[186,25,195,25],[187,4,196,4],[187,8,196,8],[187,9,196,9,"val"],[187,12,196,12],[187,15,196,15,"val"],[187,18,196,18],[188,2,197,0],[189,2,199,0,"VarintOp"],[189,10,199,8],[189,11,199,9,"prototype"],[189,20,199,18],[189,23,199,21,"Object"],[189,29,199,27],[189,30,199,28,"create"],[189,36,199,34],[189,37,199,35,"Op"],[189,39,199,37],[189,40,199,38,"prototype"],[189,49,199,47],[189,50,199,48],[190,2,200,0,"VarintOp"],[190,10,200,8],[190,11,200,9,"prototype"],[190,20,200,18],[190,21,200,19,"fn"],[190,23,200,21],[190,26,200,24,"writeVarint32"],[190,39,200,37],[192,2,202,0],[193,0,203,0],[194,0,204,0],[195,0,205,0],[196,0,206,0],[197,2,207,0,"Writer"],[197,8,207,6],[197,9,207,7,"prototype"],[197,18,207,16],[197,19,207,17,"uint32"],[197,25,207,23],[197,28,207,26],[197,37,207,35,"write_uint32"],[197,49,207,47,"write_uint32"],[197,50,207,48,"value"],[197,55,207,53],[197,57,207,55],[198,4,208,4],[199,4,209,4],[200,4,210,4],[200,8,210,8],[200,9,210,9,"len"],[200,12,210,12],[200,16,210,16],[200,17,210,17],[200,21,210,21],[200,22,210,22,"tail"],[200,26,210,26],[200,29,210,29],[200,33,210,33],[200,34,210,34,"tail"],[200,38,210,38],[200,39,210,39,"next"],[200,43,210,43],[200,46,210,46],[200,50,210,50,"VarintOp"],[200,58,210,58],[200,59,211,8],[200,60,211,9,"value"],[200,65,211,14],[200,68,211,17,"value"],[200,73,211,22],[200,78,211,27],[200,79,211,28],[200,83,212,18],[200,86,212,21],[200,89,212,30],[200,90,212,31],[200,93,213,10,"value"],[200,98,213,15],[200,101,213,18],[200,106,213,23],[200,109,213,30],[200,110,213,31],[200,113,214,10,"value"],[200,118,214,15],[200,121,214,18],[200,128,214,25],[200,131,214,30],[200,132,214,31],[200,135,215,10,"value"],[200,140,215,15],[200,143,215,18],[200,152,215,27],[200,155,215,30],[200,156,215,31],[200,159,216,30],[200,160,216,31],[200,162,217,4,"value"],[200,167,217,9],[200,168,217,10],[200,170,217,12,"len"],[200,173,217,15],[201,4,218,4],[201,11,218,11],[201,15,218,15],[202,2,219,0],[202,3,219,1],[204,2,221,0],[205,0,222,0],[206,0,223,0],[207,0,224,0],[208,0,225,0],[209,0,226,0],[210,2,227,0,"Writer"],[210,8,227,6],[210,9,227,7,"prototype"],[210,18,227,16],[210,19,227,17,"int32"],[210,24,227,22],[210,27,227,25],[210,36,227,34,"write_int32"],[210,47,227,45,"write_int32"],[210,48,227,46,"value"],[210,53,227,51],[210,55,227,53],[211,4,228,4],[211,11,228,11,"value"],[211,16,228,16],[211,19,228,19],[211,20,228,20],[211,23,229,10],[211,27,229,14],[211,28,229,15,"_push"],[211,33,229,20],[211,34,229,21,"writeVarint64"],[211,47,229,34],[211,49,229,36],[211,51,229,38],[211,53,229,40,"LongBits"],[211,61,229,48],[211,62,229,49,"fromNumber"],[211,72,229,59],[211,73,229,60,"value"],[211,78,229,65],[211,79,229,66],[211,80,229,67],[211,81,229,68],[212,4,229,68],[212,6,230,10],[212,10,230,14],[212,11,230,15,"uint32"],[212,17,230,21],[212,18,230,22,"value"],[212,23,230,27],[212,24,230,28],[213,2,231,0],[213,3,231,1],[215,2,233,0],[216,0,234,0],[217,0,235,0],[218,0,236,0],[219,0,237,0],[220,2,238,0,"Writer"],[220,8,238,6],[220,9,238,7,"prototype"],[220,18,238,16],[220,19,238,17,"sint32"],[220,25,238,23],[220,28,238,26],[220,37,238,35,"write_sint32"],[220,49,238,47,"write_sint32"],[220,50,238,48,"value"],[220,55,238,53],[220,57,238,55],[221,4,239,4],[221,11,239,11],[221,15,239,15],[221,16,239,16,"uint32"],[221,22,239,22],[221,23,239,23],[221,24,239,24,"value"],[221,29,239,29],[221,33,239,33],[221,34,239,34],[221,37,239,37,"value"],[221,42,239,42],[221,46,239,46],[221,48,239,48],[221,54,239,54],[221,55,239,55],[221,56,239,56],[222,2,240,0],[222,3,240,1],[223,2,242,0],[223,11,242,9,"writeVarint64"],[223,24,242,22,"writeVarint64"],[223,25,242,23,"val"],[223,28,242,26],[223,30,242,28,"buf"],[223,33,242,31],[223,35,242,33,"pos"],[223,38,242,36],[223,40,242,38],[224,4,243,4],[224,11,243,11,"val"],[224,14,243,14],[224,15,243,15,"hi"],[224,17,243,17],[224,19,243,19],[225,6,244,8,"buf"],[225,9,244,11],[225,10,244,12,"pos"],[225,13,244,15],[225,15,244,17],[225,16,244,18],[225,19,244,21,"val"],[225,22,244,24],[225,23,244,25,"lo"],[225,25,244,27],[225,28,244,30],[225,31,244,33],[225,34,244,36],[225,37,244,39],[226,6,245,8,"val"],[226,9,245,11],[226,10,245,12,"lo"],[226,12,245,14],[226,15,245,17],[226,16,245,18,"val"],[226,19,245,21],[226,20,245,22,"lo"],[226,22,245,24],[226,27,245,29],[226,28,245,30],[226,31,245,33,"val"],[226,34,245,36],[226,35,245,37,"hi"],[226,37,245,39],[226,41,245,43],[226,43,245,45],[226,49,245,51],[226,50,245,52],[227,6,246,8,"val"],[227,9,246,11],[227,10,246,12,"hi"],[227,12,246,14],[227,18,246,20],[227,19,246,21],[228,4,247,4],[229,4,248,4],[229,11,248,11,"val"],[229,14,248,14],[229,15,248,15,"lo"],[229,17,248,17],[229,20,248,20],[229,23,248,23],[229,25,248,25],[230,6,249,8,"buf"],[230,9,249,11],[230,10,249,12,"pos"],[230,13,249,15],[230,15,249,17],[230,16,249,18],[230,19,249,21,"val"],[230,22,249,24],[230,23,249,25,"lo"],[230,25,249,27],[230,28,249,30],[230,31,249,33],[230,34,249,36],[230,37,249,39],[231,6,250,8,"val"],[231,9,250,11],[231,10,250,12,"lo"],[231,12,250,14],[231,15,250,17,"val"],[231,18,250,20],[231,19,250,21,"lo"],[231,21,250,23],[231,26,250,28],[231,27,250,29],[232,4,251,4],[233,4,252,4,"buf"],[233,7,252,7],[233,8,252,8,"pos"],[233,11,252,11],[233,13,252,13],[233,14,252,14],[233,17,252,17,"val"],[233,20,252,20],[233,21,252,21,"lo"],[233,23,252,23],[234,2,253,0],[236,2,255,0],[237,0,256,0],[238,0,257,0],[239,0,258,0],[240,0,259,0],[241,0,260,0],[242,2,261,0,"Writer"],[242,8,261,6],[242,9,261,7,"prototype"],[242,18,261,16],[242,19,261,17,"uint64"],[242,25,261,23],[242,28,261,26],[242,37,261,35,"write_uint64"],[242,49,261,47,"write_uint64"],[242,50,261,48,"value"],[242,55,261,53],[242,57,261,55],[243,4,262,4],[243,8,262,8,"bits"],[243,12,262,12],[243,15,262,15,"LongBits"],[243,23,262,23],[243,24,262,24,"from"],[243,28,262,28],[243,29,262,29,"value"],[243,34,262,34],[243,35,262,35],[244,4,263,4],[244,11,263,11],[244,15,263,15],[244,16,263,16,"_push"],[244,21,263,21],[244,22,263,22,"writeVarint64"],[244,35,263,35],[244,37,263,37,"bits"],[244,41,263,41],[244,42,263,42,"length"],[244,48,263,48],[244,49,263,49],[244,50,263,50],[244,52,263,52,"bits"],[244,56,263,56],[244,57,263,57],[245,2,264,0],[245,3,264,1],[247,2,266,0],[248,0,267,0],[249,0,268,0],[250,0,269,0],[251,0,270,0],[252,0,271,0],[253,0,272,0],[254,2,273,0,"Writer"],[254,8,273,6],[254,9,273,7,"prototype"],[254,18,273,16],[254,19,273,17,"int64"],[254,24,273,22],[254,27,273,25,"Writer"],[254,33,273,31],[254,34,273,32,"prototype"],[254,43,273,41],[254,44,273,42,"uint64"],[254,50,273,48],[256,2,275,0],[257,0,276,0],[258,0,277,0],[259,0,278,0],[260,0,279,0],[261,0,280,0],[262,2,281,0,"Writer"],[262,8,281,6],[262,9,281,7,"prototype"],[262,18,281,16],[262,19,281,17,"sint64"],[262,25,281,23],[262,28,281,26],[262,37,281,35,"write_sint64"],[262,49,281,47,"write_sint64"],[262,50,281,48,"value"],[262,55,281,53],[262,57,281,55],[263,4,282,4],[263,8,282,8,"bits"],[263,12,282,12],[263,15,282,15,"LongBits"],[263,23,282,23],[263,24,282,24,"from"],[263,28,282,28],[263,29,282,29,"value"],[263,34,282,34],[263,35,282,35],[263,36,282,36,"zzEncode"],[263,44,282,44],[263,45,282,45],[263,46,282,46],[264,4,283,4],[264,11,283,11],[264,15,283,15],[264,16,283,16,"_push"],[264,21,283,21],[264,22,283,22,"writeVarint64"],[264,35,283,35],[264,37,283,37,"bits"],[264,41,283,41],[264,42,283,42,"length"],[264,48,283,48],[264,49,283,49],[264,50,283,50],[264,52,283,52,"bits"],[264,56,283,56],[264,57,283,57],[265,2,284,0],[265,3,284,1],[267,2,286,0],[268,0,287,0],[269,0,288,0],[270,0,289,0],[271,0,290,0],[272,2,291,0,"Writer"],[272,8,291,6],[272,9,291,7,"prototype"],[272,18,291,16],[272,19,291,17,"bool"],[272,23,291,21],[272,26,291,24],[272,35,291,33,"write_bool"],[272,45,291,43,"write_bool"],[272,46,291,44,"value"],[272,51,291,49],[272,53,291,51],[273,4,292,4],[273,11,292,11],[273,15,292,15],[273,16,292,16,"_push"],[273,21,292,21],[273,22,292,22,"writeByte"],[273,31,292,31],[273,33,292,33],[273,34,292,34],[273,36,292,36,"value"],[273,41,292,41],[273,44,292,44],[273,45,292,45],[273,48,292,48],[273,49,292,49],[273,50,292,50],[274,2,293,0],[274,3,293,1],[275,2,295,0],[275,11,295,9,"writeFixed32"],[275,23,295,21,"writeFixed32"],[275,24,295,22,"val"],[275,27,295,25],[275,29,295,27,"buf"],[275,32,295,30],[275,34,295,32,"pos"],[275,37,295,35],[275,39,295,37],[276,4,296,4,"buf"],[276,7,296,7],[276,8,296,8,"pos"],[276,11,296,11],[276,12,296,16],[276,15,296,20,"val"],[276,18,296,23],[276,21,296,34],[276,24,296,37],[277,4,297,4,"buf"],[277,7,297,7],[277,8,297,8,"pos"],[277,11,297,11],[277,14,297,14],[277,15,297,15],[277,16,297,16],[277,19,297,20,"val"],[277,22,297,23],[277,27,297,28],[277,28,297,29],[277,31,297,34],[277,34,297,37],[278,4,298,4,"buf"],[278,7,298,7],[278,8,298,8,"pos"],[278,11,298,11],[278,14,298,14],[278,15,298,15],[278,16,298,16],[278,19,298,20,"val"],[278,22,298,23],[278,27,298,28],[278,29,298,30],[278,32,298,34],[278,35,298,37],[279,4,299,4,"buf"],[279,7,299,7],[279,8,299,8,"pos"],[279,11,299,11],[279,14,299,14],[279,15,299,15],[279,16,299,16],[279,19,299,20,"val"],[279,22,299,23],[279,27,299,28],[279,29,299,30],[280,2,300,0],[282,2,302,0],[283,0,303,0],[284,0,304,0],[285,0,305,0],[286,0,306,0],[287,2,307,0,"Writer"],[287,8,307,6],[287,9,307,7,"prototype"],[287,18,307,16],[287,19,307,17,"fixed32"],[287,26,307,24],[287,29,307,27],[287,38,307,36,"write_fixed32"],[287,51,307,49,"write_fixed32"],[287,52,307,50,"value"],[287,57,307,55],[287,59,307,57],[288,4,308,4],[288,11,308,11],[288,15,308,15],[288,16,308,16,"_push"],[288,21,308,21],[288,22,308,22,"writeFixed32"],[288,34,308,34],[288,36,308,36],[288,37,308,37],[288,39,308,39,"value"],[288,44,308,44],[288,49,308,49],[288,50,308,50],[288,51,308,51],[289,2,309,0],[289,3,309,1],[291,2,311,0],[292,0,312,0],[293,0,313,0],[294,0,314,0],[295,0,315,0],[296,0,316,0],[297,2,317,0,"Writer"],[297,8,317,6],[297,9,317,7,"prototype"],[297,18,317,16],[297,19,317,17,"sfixed32"],[297,27,317,25],[297,30,317,28,"Writer"],[297,36,317,34],[297,37,317,35,"prototype"],[297,46,317,44],[297,47,317,45,"fixed32"],[297,54,317,52],[299,2,319,0],[300,0,320,0],[301,0,321,0],[302,0,322,0],[303,0,323,0],[304,0,324,0],[305,2,325,0,"Writer"],[305,8,325,6],[305,9,325,7,"prototype"],[305,18,325,16],[305,19,325,17,"fixed64"],[305,26,325,24],[305,29,325,27],[305,38,325,36,"write_fixed64"],[305,51,325,49,"write_fixed64"],[305,52,325,50,"value"],[305,57,325,55],[305,59,325,57],[306,4,326,4],[306,8,326,8,"bits"],[306,12,326,12],[306,15,326,15,"LongBits"],[306,23,326,23],[306,24,326,24,"from"],[306,28,326,28],[306,29,326,29,"value"],[306,34,326,34],[306,35,326,35],[307,4,327,4],[307,11,327,11],[307,15,327,15],[307,16,327,16,"_push"],[307,21,327,21],[307,22,327,22,"writeFixed32"],[307,34,327,34],[307,36,327,36],[307,37,327,37],[307,39,327,39,"bits"],[307,43,327,43],[307,44,327,44,"lo"],[307,46,327,46],[307,47,327,47],[307,48,327,48,"_push"],[307,53,327,53],[307,54,327,54,"writeFixed32"],[307,66,327,66],[307,68,327,68],[307,69,327,69],[307,71,327,71,"bits"],[307,75,327,75],[307,76,327,76,"hi"],[307,78,327,78],[307,79,327,79],[308,2,328,0],[308,3,328,1],[310,2,330,0],[311,0,331,0],[312,0,332,0],[313,0,333,0],[314,0,334,0],[315,0,335,0],[316,0,336,0],[317,2,337,0,"Writer"],[317,8,337,6],[317,9,337,7,"prototype"],[317,18,337,16],[317,19,337,17,"sfixed64"],[317,27,337,25],[317,30,337,28,"Writer"],[317,36,337,34],[317,37,337,35,"prototype"],[317,46,337,44],[317,47,337,45,"fixed64"],[317,54,337,52],[319,2,339,0],[320,0,340,0],[321,0,341,0],[322,0,342,0],[323,0,343,0],[324,0,344,0],[325,2,345,0,"Writer"],[325,8,345,6],[325,9,345,7,"prototype"],[325,18,345,16],[325,19,345,17,"float"],[325,24,345,22],[325,27,345,25],[325,36,345,34,"write_float"],[325,47,345,45,"write_float"],[325,48,345,46,"value"],[325,53,345,51],[325,55,345,53],[326,4,346,4],[326,11,346,11],[326,15,346,15],[326,16,346,16,"_push"],[326,21,346,21],[326,22,346,22,"util"],[326,26,346,26],[326,27,346,27,"float"],[326,32,346,32],[326,33,346,33,"writeFloatLE"],[326,45,346,45],[326,47,346,47],[326,48,346,48],[326,50,346,50,"value"],[326,55,346,55],[326,56,346,56],[327,2,347,0],[327,3,347,1],[329,2,349,0],[330,0,350,0],[331,0,351,0],[332,0,352,0],[333,0,353,0],[334,0,354,0],[335,2,355,0,"Writer"],[335,8,355,6],[335,9,355,7,"prototype"],[335,18,355,16],[335,19,355,17,"double"],[335,25,355,23],[335,28,355,26],[335,37,355,35,"write_double"],[335,49,355,47,"write_double"],[335,50,355,48,"value"],[335,55,355,53],[335,57,355,55],[336,4,356,4],[336,11,356,11],[336,15,356,15],[336,16,356,16,"_push"],[336,21,356,21],[336,22,356,22,"util"],[336,26,356,26],[336,27,356,27,"float"],[336,32,356,32],[336,33,356,33,"writeDoubleLE"],[336,46,356,46],[336,48,356,48],[336,49,356,49],[336,51,356,51,"value"],[336,56,356,56],[336,57,356,57],[337,2,357,0],[337,3,357,1],[338,2,359,0],[338,6,359,4,"writeBytes"],[338,16,359,14],[338,19,359,17,"util"],[338,23,359,21],[338,24,359,22,"Array"],[338,29,359,27],[338,30,359,28,"prototype"],[338,39,359,37],[338,40,359,38,"set"],[338,43,359,41],[338,46,360,6],[338,55,360,15,"writeBytes_set"],[338,69,360,29,"writeBytes_set"],[338,70,360,30,"val"],[338,73,360,33],[338,75,360,35,"buf"],[338,78,360,38],[338,80,360,40,"pos"],[338,83,360,43],[338,85,360,45],[339,4,361,8,"buf"],[339,7,361,11],[339,8,361,12,"set"],[339,11,361,15],[339,12,361,16,"val"],[339,15,361,19],[339,17,361,21,"pos"],[339,20,361,24],[339,21,361,25],[339,22,361,26],[339,23,361,27],[340,2,362,4],[341,2,363,4],[341,31,364,6],[341,40,364,15,"writeBytes_for"],[341,54,364,29,"writeBytes_for"],[341,55,364,30,"val"],[341,58,364,33],[341,60,364,35,"buf"],[341,63,364,38],[341,65,364,40,"pos"],[341,68,364,43],[341,70,364,45],[342,4,365,8],[342,9,365,13],[342,13,365,17,"i"],[342,14,365,18],[342,17,365,21],[342,18,365,22],[342,20,365,24,"i"],[342,21,365,25],[342,24,365,28,"val"],[342,27,365,31],[342,28,365,32,"length"],[342,34,365,38],[342,36,365,40],[342,38,365,42,"i"],[342,39,365,43],[342,41,366,12,"buf"],[342,44,366,15],[342,45,366,16,"pos"],[342,48,366,19],[342,51,366,22,"i"],[342,52,366,23],[342,53,366,24],[342,56,366,27,"val"],[342,59,366,30],[342,60,366,31,"i"],[342,61,366,32],[342,62,366,33],[343,2,367,4],[343,3,367,5],[345,2,369,0],[346,0,370,0],[347,0,371,0],[348,0,372,0],[349,0,373,0],[350,2,374,0,"Writer"],[350,8,374,6],[350,9,374,7,"prototype"],[350,18,374,16],[350,19,374,17,"bytes"],[350,24,374,22],[350,27,374,25],[350,36,374,34,"write_bytes"],[350,47,374,45,"write_bytes"],[350,48,374,46,"value"],[350,53,374,51],[350,55,374,53],[351,4,375,4],[351,8,375,8,"len"],[351,11,375,11],[351,14,375,14,"value"],[351,19,375,19],[351,20,375,20,"length"],[351,26,375,26],[351,31,375,31],[351,32,375,32],[352,4,376,4],[352,8,376,8],[352,9,376,9,"len"],[352,12,376,12],[352,14,377,8],[352,21,377,15],[352,25,377,19],[352,26,377,20,"_push"],[352,31,377,25],[352,32,377,26,"writeByte"],[352,41,377,35],[352,43,377,37],[352,44,377,38],[352,46,377,40],[352,47,377,41],[352,48,377,42],[353,4,378,4],[353,8,378,8,"util"],[353,12,378,12],[353,13,378,13,"isString"],[353,21,378,21],[353,22,378,22,"value"],[353,27,378,27],[353,28,378,28],[353,30,378,30],[354,6,379,8],[354,10,379,12,"buf"],[354,13,379,15],[354,16,379,18,"Writer"],[354,22,379,24],[354,23,379,25,"alloc"],[354,28,379,30],[354,29,379,31,"len"],[354,32,379,34],[354,35,379,37,"base64"],[354,41,379,43],[354,42,379,44,"length"],[354,48,379,50],[354,49,379,51,"value"],[354,54,379,56],[354,55,379,57],[354,56,379,58],[355,6,380,8,"base64"],[355,12,380,14],[355,13,380,15,"decode"],[355,19,380,21],[355,20,380,22,"value"],[355,25,380,27],[355,27,380,29,"buf"],[355,30,380,32],[355,32,380,34],[355,33,380,35],[355,34,380,36],[356,6,381,8,"value"],[356,11,381,13],[356,14,381,16,"buf"],[356,17,381,19],[357,4,382,4],[358,4,383,4],[358,11,383,11],[358,15,383,15],[358,16,383,16,"uint32"],[358,22,383,22],[358,23,383,23,"len"],[358,26,383,26],[358,27,383,27],[358,28,383,28,"_push"],[358,33,383,33],[358,34,383,34,"writeBytes"],[358,44,383,44],[358,46,383,46,"len"],[358,49,383,49],[358,51,383,51,"value"],[358,56,383,56],[358,57,383,57],[359,2,384,0],[359,3,384,1],[361,2,386,0],[362,0,387,0],[363,0,388,0],[364,0,389,0],[365,0,390,0],[366,2,391,0,"Writer"],[366,8,391,6],[366,9,391,7,"prototype"],[366,18,391,16],[366,19,391,17,"string"],[366,25,391,23],[366,28,391,26],[366,37,391,35,"write_string"],[366,49,391,47,"write_string"],[366,50,391,48,"value"],[366,55,391,53],[366,57,391,55],[367,4,392,4],[367,8,392,8,"len"],[367,11,392,11],[367,14,392,14,"utf8"],[367,18,392,18],[367,19,392,19,"length"],[367,25,392,25],[367,26,392,26,"value"],[367,31,392,31],[367,32,392,32],[368,4,393,4],[368,11,393,11,"len"],[368,14,393,14],[368,17,394,10],[368,21,394,14],[368,22,394,15,"uint32"],[368,28,394,21],[368,29,394,22,"len"],[368,32,394,25],[368,33,394,26],[368,34,394,27,"_push"],[368,39,394,32],[368,40,394,33,"utf8"],[368,44,394,37],[368,45,394,38,"write"],[368,50,394,43],[368,52,394,45,"len"],[368,55,394,48],[368,57,394,50,"value"],[368,62,394,55],[368,63,394,56],[368,66,395,10],[368,70,395,14],[368,71,395,15,"_push"],[368,76,395,20],[368,77,395,21,"writeByte"],[368,86,395,30],[368,88,395,32],[368,89,395,33],[368,91,395,35],[368,92,395,36],[368,93,395,37],[369,2,396,0],[369,3,396,1],[371,2,398,0],[372,0,399,0],[373,0,400,0],[374,0,401,0],[375,0,402,0],[376,2,403,0,"Writer"],[376,8,403,6],[376,9,403,7,"prototype"],[376,18,403,16],[376,19,403,17,"fork"],[376,23,403,21],[376,26,403,24],[376,35,403,33,"fork"],[376,39,403,37,"fork"],[376,40,403,37],[376,42,403,40],[377,4,404,4],[377,8,404,8],[377,9,404,9,"states"],[377,15,404,15],[377,18,404,18],[377,22,404,22,"State"],[377,27,404,27],[377,28,404,28],[377,32,404,32],[377,33,404,33],[378,4,405,4],[378,8,405,8],[378,9,405,9,"head"],[378,13,405,13],[378,16,405,16],[378,20,405,20],[378,21,405,21,"tail"],[378,25,405,25],[378,28,405,28],[378,32,405,32,"Op"],[378,34,405,34],[378,35,405,35,"noop"],[378,39,405,39],[378,41,405,41],[378,42,405,42],[378,44,405,44],[378,45,405,45],[378,46,405,46],[379,4,406,4],[379,8,406,8],[379,9,406,9,"len"],[379,12,406,12],[379,15,406,15],[379,16,406,16],[380,4,407,4],[380,11,407,11],[380,15,407,15],[381,2,408,0],[381,3,408,1],[383,2,410,0],[384,0,411,0],[385,0,412,0],[386,0,413,0],[387,2,414,0,"Writer"],[387,8,414,6],[387,9,414,7,"prototype"],[387,18,414,16],[387,19,414,17,"reset"],[387,24,414,22],[387,27,414,25],[387,36,414,34,"reset"],[387,41,414,39,"reset"],[387,42,414,39],[387,44,414,42],[388,4,415,4],[388,8,415,8],[388,12,415,12],[388,13,415,13,"states"],[388,19,415,19],[388,21,415,21],[389,6,416,8],[389,10,416,12],[389,11,416,13,"head"],[389,15,416,17],[389,18,416,22],[389,22,416,26],[389,23,416,27,"states"],[389,29,416,33],[389,30,416,34,"head"],[389,34,416,38],[390,6,417,8],[390,10,417,12],[390,11,417,13,"tail"],[390,15,417,17],[390,18,417,22],[390,22,417,26],[390,23,417,27,"states"],[390,29,417,33],[390,30,417,34,"tail"],[390,34,417,38],[391,6,418,8],[391,10,418,12],[391,11,418,13,"len"],[391,14,418,16],[391,17,418,22],[391,21,418,26],[391,22,418,27,"states"],[391,28,418,33],[391,29,418,34,"len"],[391,32,418,37],[392,6,419,8],[392,10,419,12],[392,11,419,13,"states"],[392,17,419,19],[392,20,419,22],[392,24,419,26],[392,25,419,27,"states"],[392,31,419,33],[392,32,419,34,"next"],[392,36,419,38],[393,4,420,4],[393,5,420,5],[393,11,420,11],[394,6,421,8],[394,10,421,12],[394,11,421,13,"head"],[394,15,421,17],[394,18,421,20],[394,22,421,24],[394,23,421,25,"tail"],[394,27,421,29],[394,30,421,32],[394,34,421,36,"Op"],[394,36,421,38],[394,37,421,39,"noop"],[394,41,421,43],[394,43,421,45],[394,44,421,46],[394,46,421,48],[394,47,421,49],[394,48,421,50],[395,6,422,8],[395,10,422,12],[395,11,422,13,"len"],[395,14,422,16],[395,17,422,20],[395,18,422,21],[396,4,423,4],[397,4,424,4],[397,11,424,11],[397,15,424,15],[398,2,425,0],[398,3,425,1],[400,2,427,0],[401,0,428,0],[402,0,429,0],[403,0,430,0],[404,2,431,0,"Writer"],[404,8,431,6],[404,9,431,7,"prototype"],[404,18,431,16],[404,19,431,17,"ldelim"],[404,25,431,23],[404,28,431,26],[404,37,431,35,"ldelim"],[404,43,431,41,"ldelim"],[404,44,431,41],[404,46,431,44],[405,4,432,4],[405,8,432,8,"head"],[405,12,432,12],[405,15,432,15],[405,19,432,19],[405,20,432,20,"head"],[405,24,432,24],[406,6,433,8,"tail"],[406,10,433,12],[406,13,433,15],[406,17,433,19],[406,18,433,20,"tail"],[406,22,433,24],[407,6,434,8,"len"],[407,9,434,11],[407,12,434,15],[407,16,434,19],[407,17,434,20,"len"],[407,20,434,23],[408,4,435,4],[408,8,435,8],[408,9,435,9,"reset"],[408,14,435,14],[408,15,435,15],[408,16,435,16],[408,17,435,17,"uint32"],[408,23,435,23],[408,24,435,24,"len"],[408,27,435,27],[408,28,435,28],[409,4,436,4],[409,8,436,8,"len"],[409,11,436,11],[409,13,436,13],[410,6,437,8],[410,10,437,12],[410,11,437,13,"tail"],[410,15,437,17],[410,16,437,18,"next"],[410,20,437,22],[410,23,437,25,"head"],[410,27,437,29],[410,28,437,30,"next"],[410,32,437,34],[410,33,437,35],[410,34,437,36],[411,6,438,8],[411,10,438,12],[411,11,438,13,"tail"],[411,15,438,17],[411,18,438,20,"tail"],[411,22,438,24],[412,6,439,8],[412,10,439,12],[412,11,439,13,"len"],[412,14,439,16],[412,18,439,20,"len"],[412,21,439,23],[413,4,440,4],[414,4,441,4],[414,11,441,11],[414,15,441,15],[415,2,442,0],[415,3,442,1],[417,2,444,0],[418,0,445,0],[419,0,446,0],[420,0,447,0],[421,2,448,0,"Writer"],[421,8,448,6],[421,9,448,7,"prototype"],[421,18,448,16],[421,19,448,17,"finish"],[421,25,448,23],[421,28,448,26],[421,37,448,35,"finish"],[421,43,448,41,"finish"],[421,44,448,41],[421,46,448,44],[422,4,449,4],[422,8,449,8,"head"],[422,12,449,12],[422,15,449,15],[422,19,449,19],[422,20,449,20,"head"],[422,24,449,24],[422,25,449,25,"next"],[422,29,449,29],[423,6,449,31],[424,6,450,8,"buf"],[424,9,450,11],[424,12,450,15],[424,16,450,19],[424,17,450,20,"constructor"],[424,28,450,31],[424,29,450,32,"alloc"],[424,34,450,37],[424,35,450,38],[424,39,450,42],[424,40,450,43,"len"],[424,43,450,46],[424,44,450,47],[425,6,451,8,"pos"],[425,9,451,11],[425,12,451,15],[425,13,451,16],[426,4,452,4],[426,11,452,11,"head"],[426,15,452,15],[426,17,452,17],[427,6,453,8,"head"],[427,10,453,12],[427,11,453,13,"fn"],[427,13,453,15],[427,14,453,16,"head"],[427,18,453,20],[427,19,453,21,"val"],[427,22,453,24],[427,24,453,26,"buf"],[427,27,453,29],[427,29,453,31,"pos"],[427,32,453,34],[427,33,453,35],[428,6,454,8,"pos"],[428,9,454,11],[428,13,454,15,"head"],[428,17,454,19],[428,18,454,20,"len"],[428,21,454,23],[429,6,455,8,"head"],[429,10,455,12],[429,13,455,15,"head"],[429,17,455,19],[429,18,455,20,"next"],[429,22,455,24],[430,4,456,4],[431,4,457,4],[432,4,458,4],[432,11,458,11,"buf"],[432,14,458,14],[433,2,459,0],[433,3,459,1],[434,2,461,0,"Writer"],[434,8,461,6],[434,9,461,7,"_configure"],[434,19,461,17],[434,22,461,20],[434,32,461,29,"BufferWriter_"],[434,45,461,42],[434,47,461,44],[435,4,462,4,"BufferWriter"],[435,16,462,16],[435,19,462,19,"BufferWriter_"],[435,32,462,32],[436,4,463,4,"Writer"],[436,10,463,10],[436,11,463,11,"create"],[436,17,463,17],[436,20,463,20,"create"],[436,26,463,26],[436,27,463,27],[436,28,463,28],[437,4,464,4,"BufferWriter"],[437,16,464,16],[437,17,464,17,"_configure"],[437,27,464,27],[437,28,464,28],[437,29,464,29],[438,2,465,0],[438,3,465,1],[439,0,465,2],[439,3]],"functionMap":{"names":["<global>","Op","noop","State","Writer","create","create_buffer_setup","create_buffer","create_array","alloc","push","writeByte","writeVarint32","VarintOp","write_uint32","write_int32","write_sint32","writeVarint64","write_uint64","write_sint64","write_bool","writeFixed32","write_fixed32","write_fixed64","write_float","write_double","writeBytes_set","writeBytes_for","write_bytes","write_string","fork","reset","ldelim","finish","Writer._configure"],"mappings":"AAA;ACoB;CDyB;AEG,kBF;AGU;CHyB;AIO;CJ+B;aKE;UCE;oCCC;aDE;SDC;UGE;SHE;CLC;eSc;CTE;yBUe;CVI;AWE;CXE;AYE;CZM;AaW;CbI;0BcU;CdY;yBeQ;CfI;0BgBO;ChBE;AiBE;CjBW;0BkBQ;ClBG;0BmBiB;CnBG;wBoBO;CpBE;AqBE;CrBK;2BsBO;CtBE;2BuBgB;CvBG;yBwBiB;CxBE;0ByBQ;CzBE;M0BG;K1BE;M2BE;K3BG;yB4BO;C5BU;0B6BO;C7BK;wB8BO;C9BK;yB+BM;C/BW;0BgCM;ChCW;0BiCM;CjCW;oBkCE;ClCI"}},"type":"js/module"}]}