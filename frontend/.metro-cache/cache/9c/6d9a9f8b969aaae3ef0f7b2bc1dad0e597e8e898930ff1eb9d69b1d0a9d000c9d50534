{"dependencies":[{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":125,"index":125}}],"key":"yqoiliQRTUQ9dvZxqpPLznnKsQ4=","exportNames":["*"]}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":126},"end":{"line":2,"column":371,"index":497}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"]}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":498},"end":{"line":3,"column":52,"index":550}}],"key":"ORGtDHPxrSEUSLP9WZfOMGsHx5g=","exportNames":["*"]}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":551},"end":{"line":4,"column":48,"index":599}}],"key":"Us9erpYucP7UHYJWKKSJ2tNZDvI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.A = exports.$ = void 0;\n  exports.B = useDeviceLanguage;\n  exports.C = updateCurrentUser;\n  exports.D = signOut;\n  exports.E = revokeAccessToken;\n  exports.F = void 0;\n  exports.G = deleteUser;\n  exports.J = exports.I = exports.H = void 0;\n  exports.K = initializeAuth;\n  exports.L = connectAuthEmulator;\n  exports.a0 = exports.a = exports._ = exports.Z = exports.Y = exports.X = exports.W = exports.V = exports.U = exports.T = exports.S = exports.R = exports.Q = exports.P = exports.O = exports.N = exports.M = void 0;\n  exports.a1 = signInAnonymously;\n  exports.a2 = signInWithCredential;\n  exports.a3 = linkWithCredential;\n  exports.a4 = reauthenticateWithCredential;\n  exports.a5 = signInWithCustomToken;\n  exports.a6 = sendPasswordResetEmail;\n  exports.a7 = confirmPasswordReset;\n  exports.a8 = applyActionCode;\n  exports.a9 = checkActionCode;\n  exports.aA = _getProjectConfig;\n  exports.aB = _isIOS7Or8;\n  exports.aC = _createError;\n  exports.aD = _assert;\n  exports.aE = void 0;\n  exports.aF = _getInstance;\n  exports.aG = _persistenceKeyName;\n  exports.aH = _getRedirectResult;\n  exports.aI = _overrideRedirectResult;\n  exports.aJ = _clearRedirectOutcomes;\n  exports.aK = _castAuth;\n  exports.aM = exports.aL = void 0;\n  exports.aN = _getClientVersion;\n  exports.aO = _generateEventId;\n  exports.aR = exports.aQ = exports.aP = void 0;\n  exports.aa = verifyPasswordResetCode;\n  exports.ab = createUserWithEmailAndPassword;\n  exports.ac = signInWithEmailAndPassword;\n  exports.ad = sendSignInLinkToEmail;\n  exports.ae = isSignInWithEmailLink;\n  exports.af = signInWithEmailLink;\n  exports.ag = fetchSignInMethodsForEmail;\n  exports.ah = sendEmailVerification;\n  exports.ai = verifyBeforeUpdateEmail;\n  exports.aj = void 0;\n  exports.ak = parseActionCodeURL;\n  exports.al = updateProfile;\n  exports.am = updateEmail;\n  exports.an = updatePassword;\n  exports.ao = getIdToken;\n  exports.ap = getIdTokenResult;\n  exports.aq = unlink;\n  exports.ar = getAdditionalUserInfo;\n  exports.as = reload;\n  exports.at = getMultiFactorResolver;\n  exports.au = multiFactor;\n  exports.av = debugAssert;\n  exports.aw = _isIOS;\n  exports.ax = _isAndroid;\n  exports.ay = _fail;\n  exports.az = _getRedirectUrl;\n  exports.c = exports.b = void 0;\n  exports.d = signInWithPopup;\n  exports.e = linkWithPopup;\n  exports.f = reauthenticateWithPopup;\n  exports.g = signInWithRedirect;\n  exports.h = linkWithRedirect;\n  exports.i = void 0;\n  exports.j = reauthenticateWithRedirect;\n  exports.k = getRedirectResult;\n  exports.l = linkWithPhoneNumber;\n  exports.o = exports.n = exports.m = void 0;\n  exports.p = getAuth;\n  exports.q = void 0;\n  exports.r = reauthenticateWithPhoneNumber;\n  exports.s = signInWithPhoneNumber;\n  exports.t = setPersistence;\n  exports.u = updatePhoneNumber;\n  exports.v = initializeRecaptchaConfig;\n  exports.w = validatePassword;\n  exports.x = onIdTokenChanged;\n  exports.y = beforeAuthStateChanged;\n  exports.z = onAuthStateChanged;\n  var _app = require(_dependencyMap[0], \"@firebase/app\");\n  var _util = require(_dependencyMap[1], \"@firebase/util\");\n  var _logger = require(_dependencyMap[2], \"@firebase/logger\");\n  var _component = require(_dependencyMap[3], \"@firebase/component\");\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  const FactorId = exports.F = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  const ProviderId = exports.q = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  const SignInMethod = exports.S = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  const OperationType = exports.O = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  const ActionCodeOperation = exports.A = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const debugErrorMap = exports.H = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const prodErrorMap = exports.I = _prodErrorMap;\n  const _DEFAULT_AUTH_ERROR_FACTORY = new _util.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = exports.J = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const logClient = new _logger.Logger('@firebase/auth');\n  function _logWarn(msg, ...args) {\n    if (logClient.logLevel <= _logger.LogLevel.WARN) {\n      logClient.warn(`Auth (${_app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg, ...args) {\n    if (logClient.logLevel <= _logger.LogLevel.ERROR) {\n      logClient.error(`Auth (${_app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode, ...rest) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode, ...rest) {\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    const errorMap = {\n      ...prodErrorMap(),\n      [code]: message\n    };\n    const factory = new _util.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function _assertInstanceOf(auth, object, instance) {\n    const constructorInstance = instance;\n    if (!(object instanceof constructorInstance)) {\n      if (constructorInstance.name !== object.constructor.name) {\n        _fail(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      throw _errorWithCustomMessage(auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);\n    }\n  }\n  function createErrorInternal(authOrCode, ...rest) {\n    if (typeof authOrCode !== 'string') {\n      const code = rest[0];\n      const fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode, ...rest) {\n    if (!assertion) {\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || (0, _util.isBrowserExtension)() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    const navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  class Delay {\n    constructor(shortDelay, longDelay) {\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = (0, _util.isMobileCordova)() || (0, _util.isReactNative)();\n    }\n    get() {\n      if (!_isOnline()) {\n        // Pick the shorter timeout.\n        return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n      }\n      // If running in a mobile environment, return the long delay, otherwise\n      // return the short delay.\n      // This could be improved in the future to dynamically change based on other\n      // variables instead of just reading the current environment.\n      return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    const {\n      url\n    } = config.emulator;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class FetchProvider {\n    static initialize(fetchImpl, headersImpl, responseImpl) {\n      this.fetchImpl = fetchImpl;\n      if (headersImpl) {\n        this.headersImpl = headersImpl;\n      }\n      if (responseImpl) {\n        this.responseImpl = responseImpl;\n      }\n    }\n    static fetch() {\n      if (this.fetchImpl) {\n        return this.fetchImpl;\n      }\n      if (typeof self !== 'undefined' && 'fetch' in self) {\n        return self.fetch;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n        return globalThis.fetch;\n      }\n      if (typeof fetch !== 'undefined') {\n        return fetch;\n      }\n      debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static headers() {\n      if (this.headersImpl) {\n        return this.headersImpl;\n      }\n      if (typeof self !== 'undefined' && 'Headers' in self) {\n        return self.Headers;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n        return globalThis.Headers;\n      }\n      if (typeof Headers !== 'undefined') {\n        return Headers;\n      }\n      debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static response() {\n      if (this.responseImpl) {\n        return this.responseImpl;\n      }\n      if (typeof self !== 'undefined' && 'Response' in self) {\n        return self.Response;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Response) {\n        return globalThis.Response;\n      }\n      if (typeof Response !== 'undefined') {\n        return Response;\n      }\n      debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  exports.aQ = FetchProvider;\n  const SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return {\n        ...request,\n        tenantId: auth.tenantId\n      };\n    }\n    return request;\n  }\n  async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n      let body = {};\n      let params = {};\n      if (request) {\n        if (method === \"GET\" /* HttpMethod.GET */) {\n          params = request;\n        } else {\n          body = {\n            body: JSON.stringify(request)\n          };\n        }\n      }\n      const query = (0, _util.querystring)({\n        key: auth.config.apiKey,\n        ...params\n      }).slice(1);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n      if (auth.languageCode) {\n        headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n      }\n      const fetchArgs = {\n        method,\n        headers,\n        ...body\n      };\n      /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n         problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n         'RequestInitializerDict' is not implemented.\"\n         https://github.com/cloudflare/next-on-pages/issues/487 */\n      if (!(0, _util.isCloudflareWorker)()) {\n        fetchArgs.referrerPolicy = 'no-referrer';\n      }\n      if (auth.emulatorConfig && (0, _util.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        fetchArgs.credentials = 'include';\n      }\n      return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n    });\n  }\n  async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    auth._canInitEmulator = false;\n    const errorMap = {\n      ...SERVER_ERROR_MAP,\n      ...customErrorMap\n    };\n    try {\n      const networkTimeout = new NetworkTimeout(auth);\n      const response = await Promise.race([fetchFn(), networkTimeout.promise]);\n      // If we've reached this point, the fetch succeeded and the networkTimeout\n      // didn't throw; clear the network timeout delay so that Node won't hang\n      networkTimeout.clearNetworkTimeout();\n      const json = await response.json();\n      if ('needConfirmation' in json) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n      }\n      if (response.ok && !('errorMessage' in json)) {\n        return json;\n      } else {\n        const errorMessage = response.ok ? json.errorMessage : json.error.message;\n        const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n          throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n        } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n          throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n        } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n          throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n        }\n        const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n        if (serverErrorMessage) {\n          throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n        } else {\n          _fail(auth, authError);\n        }\n      }\n    } catch (e) {\n      if (e instanceof _util.FirebaseError) {\n        throw e;\n      }\n      // Changing this to a different error code will log user out when there is a network error\n      // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n      // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n      _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n        'message': String(e)\n      });\n    }\n  }\n  async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n    if ('mfaPendingCredential' in serverResponse) {\n      _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n        _serverResponse: serverResponse\n      });\n    }\n    return serverResponse;\n  }\n  async function _getFinalTarget(auth, host, path, query) {\n    const base = `${host}${path}?${query}`;\n    const authInternal = auth;\n    const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n    // from the response\n    if (CookieAuthProxiedEndpoints.includes(path)) {\n      // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n      // here since auth initialization calls this function.\n      await authInternal._persistenceManagerAvailable;\n      if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n        const cookiePersistence = authInternal._getPersistence();\n        return cookiePersistence._getFinalTarget(finalTarget).toString();\n      }\n    }\n    return finalTarget;\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  class NetworkTimeout {\n    clearNetworkTimeout() {\n      clearTimeout(this.timer);\n    }\n    constructor(auth) {\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n  }\n  function _makeTaggedError(auth, code, response) {\n    const errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    const error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isV2(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;\n  }\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  class RecaptchaConfig {\n    constructor(response) {\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    getProviderEnforcementState(providerStr) {\n      if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n        return null;\n      }\n      for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n        if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n          return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n        }\n      }\n      return null;\n    }\n    /**\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n     *\n     * @param providerStr - The provider whose enablement state is to be returned.\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n     */\n    isProviderEnabled(providerStr) {\n      return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n    }\n    /**\n     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n     * returns false.\n     *\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n     */\n    isAnyProviderEnabled() {\n      return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function getRecaptchaParams(auth) {\n    return (await _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/recaptchaParams\" /* Endpoint.GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '';\n  }\n  async function getRecaptchaConfig(auth, request) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function deleteAccount(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n  }\n  async function deleteLinkedAccounts(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  async function getAccountInfo(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      const date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user, forceRefresh = false) {\n    return (0, _util.getModularInstance)(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  async function getIdTokenResult(user, forceRefresh = false) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    const token = await userInternal.getIdToken(forceRefresh);\n    const claims = _parseToken(token);\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n    const signInProvider = firebase?.['sign_in_provider'];\n    return {\n      claims,\n      token,\n      authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n      issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n      expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n      signInProvider: signInProvider || null,\n      signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n    };\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    const [algorithm, payload, signature] = token.split('.');\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      const decoded = (0, _util.base64Decode)(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    const parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n    if (bypassAuthState) {\n      return promise;\n    }\n    try {\n      return await promise;\n    } catch (e) {\n      if (e instanceof _util.FirebaseError && isUserInvalidated(e)) {\n        if (user.auth.currentUser === user) {\n          await user.auth.signOut();\n        }\n      }\n      throw e;\n    }\n  }\n  function isUserInvalidated({\n    code\n  }) {\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ProactiveRefresh {\n    constructor(user) {\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    _start() {\n      if (this.isRunning) {\n        return;\n      }\n      this.isRunning = true;\n      this.schedule();\n    }\n    _stop() {\n      if (!this.isRunning) {\n        return;\n      }\n      this.isRunning = false;\n      if (this.timerId !== null) {\n        clearTimeout(this.timerId);\n      }\n    }\n    getInterval(wasError) {\n      if (wasError) {\n        const interval = this.errorBackoff;\n        this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n        return interval;\n      } else {\n        // Reset the error backoff\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n        const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n        const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n        return Math.max(0, interval);\n      }\n    }\n    schedule(wasError = false) {\n      if (!this.isRunning) {\n        // Just in case...\n        return;\n      }\n      const interval = this.getInterval(wasError);\n      this.timerId = setTimeout(async () => {\n        await this.iteration();\n      }, interval);\n    }\n    async iteration() {\n      try {\n        await this.user.getIdToken(true);\n      } catch (e) {\n        // Only retry on network errors\n        if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          this.schedule(/* wasError */true);\n        }\n        return;\n      }\n      this.schedule();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserMetadata {\n    constructor(createdAt, lastLoginAt) {\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    _initializeTime() {\n      this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n      this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n    _copy(metadata) {\n      this.createdAt = metadata.createdAt;\n      this.lastLoginAt = metadata.lastLoginAt;\n      this._initializeTime();\n    }\n    toJSON() {\n      return {\n        createdAt: this.createdAt,\n        lastLoginAt: this.lastLoginAt\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reloadWithoutSaving(user) {\n    const auth = user.auth;\n    const idToken = await user.getIdToken();\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {\n      idToken\n    }));\n    _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const coreAccount = response.users[0];\n    user._notifyReloadListener(coreAccount);\n    const newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n    const providerData = mergeProviderData(user.providerData, newProviderData);\n    // Preserves the non-nonymous status of the stored user, even if no more\n    // credentials (federated or email/password) are linked to the user. If\n    // the user was previously anonymous, then use provider data to update.\n    // On the other hand, if it was not anonymous before, it should never be\n    // considered anonymous now.\n    const oldIsAnonymous = user.isAnonymous;\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n    const updates = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n      isAnonymous\n    };\n    Object.assign(user, updates);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function reload(user) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _reloadWithoutSaving(userInternal);\n    // Even though the current user hasn't changed, update\n    // current user will trigger a persistence update w/ the\n    // new info.\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\n  }\n  function mergeProviderData(original, newData) {\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(({\n      providerId,\n      ...provider\n    }) => {\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function requestStsToken(auth, refreshToken) {\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n      const body = (0, _util.querystring)({\n        'grant_type': 'refresh_token',\n        'refresh_token': refreshToken\n      }).slice(1);\n      const {\n        tokenApiHost,\n        apiKey\n      } = auth.config;\n      const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n      const options = {\n        method: \"POST\" /* HttpMethod.POST */,\n        headers,\n        body\n      };\n      if (auth.emulatorConfig && (0, _util.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        options.credentials = 'include';\n      }\n      return FetchProvider.fetch()(url, options);\n    });\n    // The response comes back in snake_case. Convert to camel:\n    return {\n      accessToken: response.access_token,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token\n    };\n  }\n  async function revokeToken(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  class StsTokenManager {\n    constructor() {\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    get isExpired() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    }\n    updateFromServerResponse(response) {\n      _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n      this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n    updateFromIdToken(idToken) {\n      _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = _tokenExpiresIn(idToken);\n      this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n    async getToken(auth, forceRefresh = false) {\n      if (!forceRefresh && this.accessToken && !this.isExpired) {\n        return this.accessToken;\n      }\n      _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n      if (this.refreshToken) {\n        await this.refresh(auth, this.refreshToken);\n        return this.accessToken;\n      }\n      return null;\n    }\n    clearRefreshToken() {\n      this.refreshToken = null;\n    }\n    async refresh(auth, oldToken) {\n      const {\n        accessToken,\n        refreshToken,\n        expiresIn\n      } = await requestStsToken(auth, oldToken);\n      this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n    }\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n      this.refreshToken = refreshToken || null;\n      this.accessToken = accessToken || null;\n      this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n    static fromJSON(appName, object) {\n      const {\n        refreshToken,\n        accessToken,\n        expirationTime\n      } = object;\n      const manager = new StsTokenManager();\n      if (refreshToken) {\n        _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.refreshToken = refreshToken;\n      }\n      if (accessToken) {\n        _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.accessToken = accessToken;\n      }\n      if (expirationTime) {\n        _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.expirationTime = expirationTime;\n      }\n      return manager;\n    }\n    toJSON() {\n      return {\n        refreshToken: this.refreshToken,\n        accessToken: this.accessToken,\n        expirationTime: this.expirationTime\n      };\n    }\n    _assign(stsTokenManager) {\n      this.accessToken = stsTokenManager.accessToken;\n      this.refreshToken = stsTokenManager.refreshToken;\n      this.expirationTime = stsTokenManager.expirationTime;\n    }\n    _clone() {\n      return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n    _performRefresh() {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  class UserImpl {\n    constructor({\n      uid,\n      auth,\n      stsTokenManager,\n      ...opt\n    }) {\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    async getIdToken(forceRefresh) {\n      const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n      _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      if (this.accessToken !== accessToken) {\n        this.accessToken = accessToken;\n        await this.auth._persistUserIfCurrent(this);\n        this.auth._notifyListenersIfCurrent(this);\n      }\n      return accessToken;\n    }\n    getIdTokenResult(forceRefresh) {\n      return getIdTokenResult(this, forceRefresh);\n    }\n    reload() {\n      return reload(this);\n    }\n    _assign(user) {\n      if (this === user) {\n        return;\n      }\n      _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.displayName = user.displayName;\n      this.photoURL = user.photoURL;\n      this.email = user.email;\n      this.emailVerified = user.emailVerified;\n      this.phoneNumber = user.phoneNumber;\n      this.isAnonymous = user.isAnonymous;\n      this.tenantId = user.tenantId;\n      this.providerData = user.providerData.map(userInfo => ({\n        ...userInfo\n      }));\n      this.metadata._copy(user.metadata);\n      this.stsTokenManager._assign(user.stsTokenManager);\n    }\n    _clone(auth) {\n      const newUser = new UserImpl({\n        ...this,\n        auth,\n        stsTokenManager: this.stsTokenManager._clone()\n      });\n      newUser.metadata._copy(this.metadata);\n      return newUser;\n    }\n    _onReload(callback) {\n      // There should only ever be one listener, and that is a single instance of MultiFactorUser\n      _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.reloadListener = callback;\n      if (this.reloadUserInfo) {\n        this._notifyReloadListener(this.reloadUserInfo);\n        this.reloadUserInfo = null;\n      }\n    }\n    _notifyReloadListener(userInfo) {\n      if (this.reloadListener) {\n        this.reloadListener(userInfo);\n      } else {\n        // If no listener is subscribed yet, save the result so it's available when they do subscribe\n        this.reloadUserInfo = userInfo;\n      }\n    }\n    _startProactiveRefresh() {\n      this.proactiveRefresh._start();\n    }\n    _stopProactiveRefresh() {\n      this.proactiveRefresh._stop();\n    }\n    async _updateTokensIfNecessary(response, reload = false) {\n      let tokensRefreshed = false;\n      if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n        this.stsTokenManager.updateFromServerResponse(response);\n        tokensRefreshed = true;\n      }\n      if (reload) {\n        await _reloadWithoutSaving(this);\n      }\n      await this.auth._persistUserIfCurrent(this);\n      if (tokensRefreshed) {\n        this.auth._notifyListenersIfCurrent(this);\n      }\n    }\n    async delete() {\n      if ((0, _app._isFirebaseServerApp)(this.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n      }\n      const idToken = await this.getIdToken();\n      await _logoutIfInvalidated(this, deleteAccount(this.auth, {\n        idToken\n      }));\n      this.stsTokenManager.clearRefreshToken();\n      // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n      //       cancels pending actions...\n      return this.auth.signOut();\n    }\n    toJSON() {\n      return {\n        uid: this.uid,\n        email: this.email || undefined,\n        emailVerified: this.emailVerified,\n        displayName: this.displayName || undefined,\n        isAnonymous: this.isAnonymous,\n        photoURL: this.photoURL || undefined,\n        phoneNumber: this.phoneNumber || undefined,\n        tenantId: this.tenantId || undefined,\n        providerData: this.providerData.map(userInfo => ({\n          ...userInfo\n        })),\n        stsTokenManager: this.stsTokenManager.toJSON(),\n        // Redirect event ID must be maintained in case there is a pending\n        // redirect event.\n        _redirectEventId: this._redirectEventId,\n        ...this.metadata.toJSON(),\n        // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n        apiKey: this.auth.config.apiKey,\n        appName: this.auth.name\n        // Missing authDomain will be tolerated by the legacy SDK.\n        // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n      };\n    }\n    get refreshToken() {\n      return this.stsTokenManager.refreshToken || '';\n    }\n    static _fromJSON(auth, object) {\n      const displayName = object.displayName ?? undefined;\n      const email = object.email ?? undefined;\n      const phoneNumber = object.phoneNumber ?? undefined;\n      const photoURL = object.photoURL ?? undefined;\n      const tenantId = object.tenantId ?? undefined;\n      const _redirectEventId = object._redirectEventId ?? undefined;\n      const createdAt = object.createdAt ?? undefined;\n      const lastLoginAt = object.lastLoginAt ?? undefined;\n      const {\n        uid,\n        emailVerified,\n        isAnonymous,\n        providerData,\n        stsTokenManager: plainObjectTokenManager\n      } = object;\n      _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n      _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(displayName, auth.name);\n      assertStringOrUndefined(email, auth.name);\n      _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(phoneNumber, auth.name);\n      assertStringOrUndefined(photoURL, auth.name);\n      assertStringOrUndefined(tenantId, auth.name);\n      assertStringOrUndefined(_redirectEventId, auth.name);\n      assertStringOrUndefined(createdAt, auth.name);\n      assertStringOrUndefined(lastLoginAt, auth.name);\n      const user = new UserImpl({\n        uid,\n        auth,\n        email,\n        emailVerified,\n        displayName,\n        isAnonymous,\n        photoURL,\n        phoneNumber,\n        tenantId,\n        stsTokenManager,\n        createdAt,\n        lastLoginAt\n      });\n      if (providerData && Array.isArray(providerData)) {\n        user.providerData = providerData.map(userInfo => ({\n          ...userInfo\n        }));\n      }\n      if (_redirectEventId) {\n        user._redirectEventId = _redirectEventId;\n      }\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromServerResponse(idTokenResponse);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: idTokenResponse.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // Updates the user info and data and resolves with a user instance.\n      await _reloadWithoutSaving(user);\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromGetAccountInfoResponse(auth, response, idToken) {\n      const coreAccount = response.users[0];\n      _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n      const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromIdToken(idToken);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: coreAccount.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // update the user with data from the GetAccountInfo response.\n      const updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n      };\n      Object.assign(user, updates);\n      return user;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.aL = UserImpl;\n  const instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    let instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class InMemoryPersistence {\n    constructor() {\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    async _isAvailable() {\n      return true;\n    }\n    async _set(key, value) {\n      this.storage[key] = value;\n    }\n    async _get(key) {\n      const value = this.storage[key];\n      return value === undefined ? null : value;\n    }\n    async _remove(key) {\n      delete this.storage[key];\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  const inMemoryPersistence = exports.V = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  class PersistenceUserManager {\n    constructor(persistence, auth, userKey) {\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      const {\n        config,\n        name\n      } = this.auth;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    setCurrentUser(user) {\n      return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n    async getCurrentUser() {\n      const blob = await this.persistence._get(this.fullUserKey);\n      if (!blob) {\n        return null;\n      }\n      if (typeof blob === 'string') {\n        const response = await getAccountInfo(this.auth, {\n          idToken: blob\n        }).catch(() => undefined);\n        if (!response) {\n          return null;\n        }\n        return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n      }\n      return UserImpl._fromJSON(this.auth, blob);\n    }\n    removeCurrentUser() {\n      return this.persistence._remove(this.fullUserKey);\n    }\n    savePersistenceForRedirect() {\n      return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n    async setPersistence(newPersistence) {\n      if (this.persistence === newPersistence) {\n        return;\n      }\n      const currentUser = await this.getCurrentUser();\n      await this.removeCurrentUser();\n      this.persistence = newPersistence;\n      if (currentUser) {\n        return this.setCurrentUser(currentUser);\n      }\n    }\n    delete() {\n      this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n      if (!persistenceHierarchy.length) {\n        return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n      }\n      // Eliminate any persistences that are not available\n      const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (await persistence._isAvailable()) {\n          return persistence;\n        }\n        return undefined;\n      }))).filter(persistence => persistence);\n      // Fall back to the first persistence listed, or in memory if none available\n      let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n      const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n      // Pull out the existing user, setting the chosen persistence to that\n      // persistence if the user exists.\n      let userToMigrate = null;\n      // Note, here we check for a user in _all_ persistences, not just the\n      // ones deemed available. If we can migrate a user out of a broken\n      // persistence, we will (but only if that persistence supports migration).\n      for (const persistence of persistenceHierarchy) {\n        try {\n          const blob = await persistence._get(key);\n          if (blob) {\n            let user;\n            if (typeof blob === 'string') {\n              const response = await getAccountInfo(auth, {\n                idToken: blob\n              }).catch(() => undefined);\n              if (!response) {\n                break;\n              }\n              user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n            } else {\n              user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n            }\n            if (persistence !== selectedPersistence) {\n              userToMigrate = user;\n            }\n            selectedPersistence = persistence;\n            break;\n          }\n        } catch {}\n      }\n      // If we find the user in a persistence that does support migration, use\n      // that migration path (of only persistences that support migration)\n      const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n      // If the persistence does _not_ allow migration, just finish off here\n      if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\n      }\n      selectedPersistence = migrationHierarchy[0];\n      if (userToMigrate) {\n        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n        // we'll just let it bubble to surface the error.\n        await selectedPersistence._set(key, userToMigrate.toJSON());\n      }\n      // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n      // such as users getting stuck with a previous account after signing out and refreshing the tab.\n      await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      }));\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    const ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      const matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox(ua = (0, _util.getUA)()) {\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari(userAgent = (0, _util.getUA)()) {\n    const ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS(ua = (0, _util.getUA)()) {\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile(ua = (0, _util.getUA)()) {\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid(ua = (0, _util.getUA)()) {\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry(ua = (0, _util.getUA)()) {\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS(ua = (0, _util.getUA)()) {\n    return /webos/i.test(ua);\n  }\n  function _isIOS(ua = (0, _util.getUA)()) {\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8(ua = (0, _util.getUA)()) {\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIOSStandalone(ua = (0, _util.getUA)()) {\n    return _isIOS(ua) && !!window.navigator?.standalone;\n  }\n  function _isIE10() {\n    return (0, _util.isIE)() && document.documentMode === 10;\n  }\n  function _isMobileBrowser(ua = (0, _util.getUA)()) {\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform, frameworks = []) {\n    let reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName((0, _util.getUA)());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName((0, _util.getUA)())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${_app.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthMiddlewareQueue {\n    constructor(auth) {\n      this.auth = auth;\n      this.queue = [];\n    }\n    pushCallback(callback, onAbort) {\n      // The callback could be sync or async. Wrap it into a\n      // function that is always async.\n      const wrappedCallback = user => new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n      // Attach the onAbort if present\n      wrappedCallback.onAbort = onAbort;\n      this.queue.push(wrappedCallback);\n      const index = this.queue.length - 1;\n      return () => {\n        // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n        // indexing of other elements.\n        this.queue[index] = () => Promise.resolve();\n      };\n    }\n    async runMiddleware(nextUser) {\n      if (this.auth.currentUser === nextUser) {\n        return;\n      }\n      // While running the middleware, build a temporary stack of onAbort\n      // callbacks to call if one middleware callback rejects.\n      const onAbortStack = [];\n      try {\n        for (const beforeStateCallback of this.queue) {\n          await beforeStateCallback(nextUser);\n          // Only push the onAbort if the callback succeeds\n          if (beforeStateCallback.onAbort) {\n            onAbortStack.push(beforeStateCallback.onAbort);\n          }\n        }\n      } catch (e) {\n        // Run all onAbort, with separate try/catch to ignore any errors and\n        // continue\n        onAbortStack.reverse();\n        for (const onAbort of onAbortStack) {\n          try {\n            onAbort();\n          } catch (_) {\n            /* swallow error */\n          }\n        }\n        throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n          originalMessage: e?.message\n        });\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  async function _getPasswordPolicy(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  const MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  class PasswordPolicyImpl {\n    constructor(response) {\n      // Only include custom strength options defined in the response.\n      const responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    validatePassword(password) {\n      const status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      // Check the password length and character options.\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      // Combine the status into single isValid property.\n      status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n      status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n      status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n      status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n      return status;\n    }\n    /**\n     * Validates that the password meets the length options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordLengthOptions(password, status) {\n      const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n    /**\n     * Validates that the password meets the character options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordCharacterOptions(password, status) {\n      // Assign statuses for requirements even if the password is an empty string.\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n      let passwordChar;\n      for (let i = 0; i < password.length; i++) {\n        passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n    /**\n     * Updates the running validation status with the statuses for the character options.\n     * Expected to be called each time a character is processed to update each option status\n     * based on the current character.\n     *\n     * @param status Validation status.\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n     * @param containsNumericCharacter Whether the character is a numeric character.\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n     */\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthImpl {\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n      if (popupRedirectResolver) {\n        this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n      }\n      // Have to check for app deletion throughout initialization (after each\n      // promise resolution)\n      this._initializationPromise = this.queue(async () => {\n        if (this._deleted) {\n          return;\n        }\n        this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n        this._resolvePersistenceManagerAvailable?.();\n        if (this._deleted) {\n          return;\n        }\n        // Initialize the resolver early if necessary (only applicable to web:\n        // this will cause the iframe to load immediately in certain cases)\n        if (this._popupRedirectResolver?._shouldInitProactively) {\n          // If this fails, don't halt auth loading\n          try {\n            await this._popupRedirectResolver._initialize(this);\n          } catch (e) {\n            /* Ignore the error */\n          }\n        }\n        await this.initializeCurrentUser(popupRedirectResolver);\n        this.lastNotifiedUid = this.currentUser?.uid || null;\n        if (this._deleted) {\n          return;\n        }\n        this._isInitialized = true;\n      });\n      return this._initializationPromise;\n    }\n    /**\n     * If the persistence is changed in another window, the user manager will let us know\n     */\n    async _onStorageEvent() {\n      if (this._deleted) {\n        return;\n      }\n      const user = await this.assertedPersistence.getCurrentUser();\n      if (!this.currentUser && !user) {\n        // No change, do nothing (was signed out and remained signed out).\n        return;\n      }\n      // If the same user is to be synchronized.\n      if (this.currentUser && user && this.currentUser.uid === user.uid) {\n        // Data update, simply copy data changes.\n        this._currentUser._assign(user);\n        // If tokens changed from previous user tokens, this will trigger\n        // notifyAuthListeners_.\n        await this.currentUser.getIdToken();\n        return;\n      }\n      // Update current Auth state. Either a new login or logout.\n      // Skip blocking callbacks, they should not apply to a change in another tab.\n      await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n    }\n    async initializeCurrentUserFromIdToken(idToken) {\n      try {\n        const response = await getAccountInfo(this, {\n          idToken\n        });\n        const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n        await this.directlySetCurrentUser(user);\n      } catch (err) {\n        console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n        await this.directlySetCurrentUser(null);\n      }\n    }\n    async initializeCurrentUser(popupRedirectResolver) {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        const idToken = this.app.settings.authIdToken;\n        if (idToken) {\n          // Start the auth operation in the next tick to allow a moment for the customer's app to\n          // attach an emulator, if desired.\n          return new Promise(resolve => {\n            setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n          });\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      // First check to see if we have a pending redirect event.\n      const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n      let futureCurrentUser = previouslyStoredUser;\n      let needsTocheckMiddleware = false;\n      if (popupRedirectResolver && this.config.authDomain) {\n        await this.getOrInitRedirectPersistenceManager();\n        const redirectUserEventId = this.redirectUser?._redirectEventId;\n        const storedUserEventId = futureCurrentUser?._redirectEventId;\n        const result = await this.tryRedirectSignIn(popupRedirectResolver);\n        // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n        // matches the redirect user, then we want to initially sign in with the\n        // new user object from result.\n        // TODO(samgho): More thoroughly test all of this\n        if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n          futureCurrentUser = result.user;\n          needsTocheckMiddleware = true;\n        }\n      }\n      // If no user in persistence, there is no current user. Set to null.\n      if (!futureCurrentUser) {\n        return this.directlySetCurrentUser(null);\n      }\n      if (!futureCurrentUser._redirectEventId) {\n        // This isn't a redirect link operation, we can reload and bail.\n        // First though, ensure that we check the middleware is happy.\n        if (needsTocheckMiddleware) {\n          try {\n            await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n          } catch (e) {\n            futureCurrentUser = previouslyStoredUser;\n            // We know this is available since the bit is only set when the\n            // resolver is available\n            this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n          }\n        }\n        if (futureCurrentUser) {\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      await this.getOrInitRedirectPersistenceManager();\n      // If the redirect user's event ID matches the current user's event ID,\n      // DO NOT reload the current user, otherwise they'll be cleared from storage.\n      // This is important for the reauthenticateWithRedirect() flow.\n      if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n        return this.directlySetCurrentUser(futureCurrentUser);\n      }\n      return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n    }\n    async tryRedirectSignIn(redirectResolver) {\n      // The redirect user needs to be checked (and signed in if available)\n      // during auth initialization. All of the normal sign in and link/reauth\n      // flows call back into auth and push things onto the promise queue. We\n      // need to await the result of the redirect sign in *inside the promise\n      // queue*. This presents a problem: we run into deadlock. See:\n      //    ┌> [Initialization] ─────┐\n      //    ┌> [<other queue tasks>] │\n      //    └─ [getRedirectResult] <─┘\n      //    where [] are tasks on the queue and arrows denote awaits\n      // Initialization will never complete because it's waiting on something\n      // that's waiting for initialization to complete!\n      //\n      // Instead, this method calls getRedirectResult() (stored in\n      // _completeRedirectFn) with an optional parameter that instructs all of\n      // the underlying auth operations to skip anything that mutates auth state.\n      let result = null;\n      try {\n        // We know this._popupRedirectResolver is set since redirectResolver\n        // is passed in. The _completeRedirectFn expects the unwrapped extern.\n        result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n      } catch (e) {\n        // Swallow any errors here; the code can retrieve them in\n        // getRedirectResult().\n        await this._setRedirectUser(null);\n      }\n      return result;\n    }\n    async reloadAndSetCurrentUserOrClear(user) {\n      try {\n        await _reloadWithoutSaving(user);\n      } catch (e) {\n        if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          // Something's wrong with the user's token. Log them out and remove\n          // them from storage\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      return this.directlySetCurrentUser(user);\n    }\n    useDeviceLanguage() {\n      this.languageCode = _getUserLanguage();\n    }\n    async _delete() {\n      this._deleted = true;\n    }\n    async updateCurrentUser(userExtern) {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // The public updateCurrentUser method needs to make a copy of the user,\n      // and also check that the project matches\n      const user = userExtern ? (0, _util.getModularInstance)(userExtern) : null;\n      if (user) {\n        _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n      }\n      return this._updateCurrentUser(user && user._clone(this));\n    }\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n      if (this._deleted) {\n        return;\n      }\n      if (user) {\n        _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      }\n      if (!skipBeforeStateCallbacks) {\n        await this.beforeStateQueue.runMiddleware(user);\n      }\n      return this.queue(async () => {\n        await this.directlySetCurrentUser(user);\n        this.notifyAuthListeners();\n      });\n    }\n    async signOut() {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // Run first, to block _setRedirectUser() if any callbacks fail.\n      await this.beforeStateQueue.runMiddleware(null);\n      // Clear the redirect user when signOut is called\n      if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n        await this._setRedirectUser(null);\n      }\n      // Prevent callbacks from being called again in _updateCurrentUser, as\n      // they were already called in the first line.\n      return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n    }\n    setPersistence(persistence) {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      return this.queue(async () => {\n        await this.assertedPersistence.setPersistence(_getInstance(persistence));\n      });\n    }\n    _getRecaptchaConfig() {\n      if (this.tenantId == null) {\n        return this._agentRecaptchaConfig;\n      } else {\n        return this._tenantRecaptchaConfigs[this.tenantId];\n      }\n    }\n    async validatePassword(password) {\n      if (!this._getPasswordPolicyInternal()) {\n        await this._updatePasswordPolicy();\n      }\n      // Password policy will be defined after fetching.\n      const passwordPolicy = this._getPasswordPolicyInternal();\n      // Check that the policy schema version is supported by the SDK.\n      // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n      if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n        return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n      }\n      return passwordPolicy.validatePassword(password);\n    }\n    _getPasswordPolicyInternal() {\n      if (this.tenantId === null) {\n        return this._projectPasswordPolicy;\n      } else {\n        return this._tenantPasswordPolicies[this.tenantId];\n      }\n    }\n    async _updatePasswordPolicy() {\n      const response = await _getPasswordPolicy(this);\n      const passwordPolicy = new PasswordPolicyImpl(response);\n      if (this.tenantId === null) {\n        this._projectPasswordPolicy = passwordPolicy;\n      } else {\n        this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n      }\n    }\n    _getPersistenceType() {\n      return this.assertedPersistence.persistence.type;\n    }\n    _getPersistence() {\n      return this.assertedPersistence.persistence;\n    }\n    _updateErrorMap(errorMap) {\n      this._errorFactory = new _util.ErrorFactory('auth', 'Firebase', errorMap());\n    }\n    onAuthStateChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n    beforeAuthStateChanged(callback, onAbort) {\n      return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n    onIdTokenChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n    authStateReady() {\n      return new Promise((resolve, reject) => {\n        if (this.currentUser) {\n          resolve();\n        } else {\n          const unsubscribe = this.onAuthStateChanged(() => {\n            unsubscribe();\n            resolve();\n          }, reject);\n        }\n      });\n    }\n    /**\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n     */\n    async revokeAccessToken(token) {\n      if (this.currentUser) {\n        const idToken = await this.currentUser.getIdToken();\n        // Generalize this to accept other providers once supported.\n        const request = {\n          providerId: 'apple.com',\n          tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n          token,\n          idToken\n        };\n        if (this.tenantId != null) {\n          request.tenantId = this.tenantId;\n        }\n        await revokeToken(this, request);\n      }\n    }\n    toJSON() {\n      return {\n        apiKey: this.config.apiKey,\n        authDomain: this.config.authDomain,\n        appName: this.name,\n        currentUser: this._currentUser?.toJSON()\n      };\n    }\n    async _setRedirectUser(user, popupRedirectResolver) {\n      const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n      return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n    }\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n      if (!this.redirectPersistenceManager) {\n        const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n        _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n        this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n      }\n      return this.redirectPersistenceManager;\n    }\n    async _redirectUserForId(id) {\n      // Make sure we've cleared any pending persistence actions if we're not in\n      // the initializer\n      if (this._isInitialized) {\n        await this.queue(async () => {});\n      }\n      if (this._currentUser?._redirectEventId === id) {\n        return this._currentUser;\n      }\n      if (this.redirectUser?._redirectEventId === id) {\n        return this.redirectUser;\n      }\n      return null;\n    }\n    async _persistUserIfCurrent(user) {\n      if (user === this.currentUser) {\n        return this.queue(async () => this.directlySetCurrentUser(user));\n      }\n    }\n    /** Notifies listeners only if the user is current */\n    _notifyListenersIfCurrent(user) {\n      if (user === this.currentUser) {\n        this.notifyAuthListeners();\n      }\n    }\n    _key() {\n      return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n    }\n    _startProactiveRefresh() {\n      this.isProactiveRefreshEnabled = true;\n      if (this.currentUser) {\n        this._currentUser._startProactiveRefresh();\n      }\n    }\n    _stopProactiveRefresh() {\n      this.isProactiveRefreshEnabled = false;\n      if (this.currentUser) {\n        this._currentUser._stopProactiveRefresh();\n      }\n    }\n    /** Returns the current user cast as the internal type */\n    get _currentUser() {\n      return this.currentUser;\n    }\n    notifyAuthListeners() {\n      if (!this._isInitialized) {\n        return;\n      }\n      this.idTokenSubscription.next(this.currentUser);\n      const currentUid = this.currentUser?.uid ?? null;\n      if (this.lastNotifiedUid !== currentUid) {\n        this.lastNotifiedUid = currentUid;\n        this.authStateSubscription.next(this.currentUser);\n      }\n    }\n    registerStateListener(subscription, nextOrObserver, error, completed) {\n      if (this._deleted) {\n        return () => {};\n      }\n      const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n      let isUnsubscribed = false;\n      const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n      _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // The callback needs to be called asynchronously per the spec.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      promise.then(() => {\n        if (isUnsubscribed) {\n          return;\n        }\n        cb(this.currentUser);\n      });\n      if (typeof nextOrObserver === 'function') {\n        const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      } else {\n        const unsubscribe = subscription.addObserver(nextOrObserver);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      }\n    }\n    /**\n     * Unprotected (from race conditions) method to set the current user. This\n     * should only be called from within a queued callback. This is necessary\n     * because the queue shouldn't rely on another queued callback.\n     */\n    async directlySetCurrentUser(user) {\n      if (this.currentUser && this.currentUser !== user) {\n        this._currentUser._stopProactiveRefresh();\n      }\n      if (user && this.isProactiveRefreshEnabled) {\n        user._startProactiveRefresh();\n      }\n      this.currentUser = user;\n      if (user) {\n        await this.assertedPersistence.setCurrentUser(user);\n      } else {\n        await this.assertedPersistence.removeCurrentUser();\n      }\n    }\n    queue(action) {\n      // In case something errors, the callback still should be called in order\n      // to keep the promise chain alive\n      this.operations = this.operations.then(action, action);\n      return this.operations;\n    }\n    get assertedPersistence() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    }\n    _logFramework(framework) {\n      if (!framework || this.frameworks.includes(framework)) {\n        return;\n      }\n      this.frameworks.push(framework);\n      // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n      // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n      this.frameworks.sort();\n      this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n    _getFrameworks() {\n      return this.frameworks;\n    }\n    async _getAdditionalHeaders() {\n      // Additional headers on every request\n      const headers = {\n        [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n      };\n      if (this.app.options.appId) {\n        headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n      }\n      // If the heartbeat service exists, add the heartbeat string\n      const heartbeatsHeader = await this.heartbeatServiceProvider.getImmediate({\n        optional: true\n      })?.getHeartbeatsHeader();\n      if (heartbeatsHeader) {\n        headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n      }\n      // If the App Check service exists, add the App Check token in the headers\n      const appCheckToken = await this._getAppCheckToken();\n      if (appCheckToken) {\n        headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n      }\n      return headers;\n    }\n    async _getAppCheckToken() {\n      if ((0, _app._isFirebaseServerApp)(this.app) && this.app.settings.appCheckToken) {\n        return this.app.settings.appCheckToken;\n      }\n      const appCheckTokenResult = await this.appCheckServiceProvider.getImmediate({\n        optional: true\n      })?.getToken();\n      if (appCheckTokenResult?.error) {\n        // Context: appCheck.getToken() will never throw even if an error happened.\n        // In the error case, a dummy token will be returned along with an error field describing\n        // the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n        _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n      }\n      return appCheckTokenResult?.token;\n    }\n  }\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  exports.aM = AuthImpl;\n  function _castAuth(auth) {\n    return (0, _util.getModularInstance)(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  class Subscription {\n    constructor(auth) {\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = (0, _util.createSubscribe)(observer => this.observer = observer);\n    }\n    get next() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  let externalJSProvider = {\n    async loadJS() {\n      throw new Error('Unable to load external scripts');\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _setExternalJSProvider(p) {\n    externalJSProvider = p;\n  }\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaV2ScriptUrl() {\n    return externalJSProvider.recaptchaV2Script;\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n  function _gapiScriptUrl() {\n    return externalJSProvider.gapiScript;\n  }\n  function _generateCallbackName(prefix) {\n    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const _SOLVE_TIME_MS = 500;\n  const _EXPIRATION_TIME_MS = 60000;\n  const _WIDGET_ID_START = 1000000000000;\n  class MockReCaptcha {\n    constructor(auth) {\n      this.auth = auth;\n      this.counter = _WIDGET_ID_START;\n      this._widgets = new Map();\n    }\n    render(container, parameters) {\n      const id = this.counter;\n      this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));\n      this.counter++;\n      return id;\n    }\n    reset(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      void this._widgets.get(id)?.delete();\n      this._widgets.delete(id);\n    }\n    getResponse(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      return this._widgets.get(id)?.getResponse() || '';\n    }\n    async execute(optWidgetId) {\n      const id = optWidgetId || _WIDGET_ID_START;\n      void this._widgets.get(id)?.execute();\n      return '';\n    }\n  }\n  class MockGreCAPTCHATopLevel {\n    constructor() {\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockGreCAPTCHA {\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockWidget {\n    constructor(containerOrId, appName, params) {\n      this.params = params;\n      this.timerId = null;\n      this.deleted = false;\n      this.responseToken = null;\n      this.clickHandler = () => {\n        this.execute();\n      };\n      const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, {\n        appName\n      });\n      this.container = container;\n      this.isVisible = this.params.size !== 'invisible';\n      if (this.isVisible) {\n        this.execute();\n      } else {\n        this.container.addEventListener('click', this.clickHandler);\n      }\n    }\n    getResponse() {\n      this.checkIfDeleted();\n      return this.responseToken;\n    }\n    delete() {\n      this.checkIfDeleted();\n      this.deleted = true;\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n        this.timerId = null;\n      }\n      this.container.removeEventListener('click', this.clickHandler);\n    }\n    execute() {\n      this.checkIfDeleted();\n      if (this.timerId) {\n        return;\n      }\n      this.timerId = window.setTimeout(() => {\n        this.responseToken = generateRandomAlphaNumericString(50);\n        const {\n          callback,\n          'expired-callback': expiredCallback\n        } = this.params;\n        if (callback) {\n          try {\n            callback(this.responseToken);\n          } catch (e) {}\n        }\n        this.timerId = window.setTimeout(() => {\n          this.timerId = null;\n          this.responseToken = null;\n          if (expiredCallback) {\n            try {\n              expiredCallback();\n            } catch (e) {}\n          }\n          if (this.isVisible) {\n            this.execute();\n          }\n        }, _EXPIRATION_TIME_MS);\n      }, _SOLVE_TIME_MS);\n    }\n    checkIfDeleted() {\n      if (this.deleted) {\n        throw new Error('reCAPTCHA mock was already deleted!');\n      }\n    }\n  }\n  function generateRandomAlphaNumericString(len) {\n    const chars = [];\n    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    for (let i = 0; i < len; i++) {\n      chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));\n    }\n    return chars.join('');\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  const FAKE_TOKEN = 'NO_RECAPTCHA';\n  class RecaptchaEnterpriseVerifier {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    constructor(authExtern) {\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    async verify(action = 'verify', forceRefresh = false) {\n      async function retrieveSiteKey(auth) {\n        if (!forceRefresh) {\n          if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n            return auth._agentRecaptchaConfig.siteKey;\n          }\n          if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n            return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n          }\n        }\n        return new Promise(async (resolve, reject) => {\n          getRecaptchaConfig(auth, {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }).then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          }).catch(error => {\n            reject(error);\n          });\n        });\n      }\n      function retrieveRecaptchaToken(siteKey, resolve, reject) {\n        const grecaptcha = window.grecaptcha;\n        if (isEnterprise(grecaptcha)) {\n          grecaptcha.enterprise.ready(() => {\n            grecaptcha.enterprise.execute(siteKey, {\n              action\n            }).then(token => {\n              resolve(token);\n            }).catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n          });\n        } else {\n          reject(Error('No reCAPTCHA enterprise script loaded.'));\n        }\n      }\n      // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n      if (this.auth.settings.appVerificationDisabledForTesting) {\n        const mockRecaptcha = new MockGreCAPTCHATopLevel();\n        return mockRecaptcha.execute('siteKey', {\n          action: 'verify'\n        });\n      }\n      return new Promise((resolve, reject) => {\n        retrieveSiteKey(this.auth).then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(new Error('RecaptchaVerifier is only supported in browser'));\n              return;\n            }\n            let url = _recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            _loadJS(url).then(() => {\n              retrieveRecaptchaToken(siteKey, resolve, reject);\n            }).catch(error => {\n              reject(error);\n            });\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n  async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\n    let captchaResponse;\n    if (isFakeToken) {\n      captchaResponse = FAKE_TOKEN;\n    } else {\n      try {\n        captchaResponse = await verifier.verify(action);\n      } catch (error) {\n        captchaResponse = await verifier.verify(action, true);\n      }\n    }\n    const newRequest = {\n      ...request\n    };\n    if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n      if ('phoneEnrollmentInfo' in newRequest) {\n        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      } else if ('phoneSignInInfo' in newRequest) {\n        const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      }\n      return newRequest;\n    }\n    if (!isCaptchaResp) {\n      Object.assign(newRequest, {\n        captchaResponse\n      });\n    } else {\n      Object.assign(newRequest, {\n        'captchaResp': captchaResponse\n      });\n    }\n    Object.assign(newRequest, {\n      'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    });\n    Object.assign(newRequest, {\n      'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    return newRequest;\n  }\n  async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n    if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return actionMethod(authInstance, request).catch(async error => {\n          if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n            console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n            return actionMethod(authInstance, requestWithRecaptcha);\n          } else {\n            return Promise.reject(error);\n          }\n        });\n      }\n    } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n        return actionMethod(authInstance, requestWithRecaptcha).catch(async error => {\n          if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n            // AUDIT mode\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n              console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n              // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n              // check fails.\n              // Fallback to reCAPTCHA v2 flow.\n              const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n              // isCaptchaResp\n              true // isFakeToken\n              );\n              // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n              return actionMethod(authInstance, requestWithRecaptchaFields);\n            }\n          }\n          // ENFORCE mode or AUDIT mode with any other error.\n          return Promise.reject(error);\n        });\n      } else {\n        // Do reCAPTCHA v2 flow.\n        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n        // isCaptchaResp\n        true // isFakeToken\n        );\n        // This will call the PhoneApiCaller to fetch and inject v2 token.\n        return actionMethod(authInstance, requestWithRecaptchaFields);\n      }\n    } else {\n      return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n    }\n  }\n  async function _initializeRecaptchaConfig(auth) {\n    const authInternal = _castAuth(auth);\n    const response = await getRecaptchaConfig(authInternal, {\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n      version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    const config = new RecaptchaConfig(response);\n    if (authInternal.tenantId == null) {\n      authInternal._agentRecaptchaConfig = config;\n    } else {\n      authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n    }\n    if (config.isAnyProviderEnabled()) {\n      const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n      void verifier.verify();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function initializeAuth(app, deps) {\n    const provider = (0, _app._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      const auth = provider.getImmediate();\n      const initialOptions = provider.getOptions();\n      if ((0, _util.deepEqual)(initialOptions, deps ?? {})) {\n        return auth;\n      } else {\n        _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    const auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    const persistence = deps?.persistence || [];\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    const authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    const disableWarnings = !!options?.disableWarnings;\n    const protocol = extractProtocol(url);\n    const {\n      host,\n      port\n    } = extractHostAndPort(url);\n    const portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    const emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    const emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert((0, _util.deepEqual)(emulator, authInternal.config.emulator) && (0, _util.deepEqual)(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if ((0, _util.isCloudWorkstation)(host)) {\n      void (0, _util.pingServer)(`${protocol}//${host}${portStr}`);\n      (0, _util.updateEmulatorBanner)('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    const protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    const protocol = extractProtocol(url);\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      const host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      const [host, port] = hostAndPort.split(':');\n      return {\n        host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    const port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      const el = document.createElement('p');\n      const sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class AuthCredential {\n    /** @internal */\n    constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getIdTokenResponse(_auth) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _linkToIdToken(_auth, _idToken) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getReauthenticationResolver(_auth) {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.M = AuthCredential;\n  async function resetPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function updateEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  async function linkEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n  }\n  async function applyActionCode$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithPassword(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function sendOobCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function sendEmailVerification$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendPasswordResetEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendSignInLinkToEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function verifyAndChangeEmail(auth, request) {\n    return sendOobCode(auth, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithEmailLink$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithEmailLinkForLinking(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  class EmailAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod, /** @internal */\n    _tenantId = null) {\n      super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n      this._email = _email;\n      this._password = _password;\n      this._tenantId = _tenantId;\n    }\n    /** @internal */\n    static _fromEmailAndPassword(email, password) {\n      return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\n      return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      return {\n        email: this._email,\n        password: this._password,\n        signInMethod: this.signInMethod,\n        tenantId: this._tenantId\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n     *\n     * @param json - Either `object` or the stringified representation of the object. When string is\n     * provided, `JSON.parse` would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      if (obj?.email && obj?.password) {\n        if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n          return this._fromEmailAndPassword(obj.email, obj.password);\n        } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n          return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n        }\n      }\n      return null;\n    }\n    /** @internal */\n    async _getIdTokenResponse(auth) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLink$1(auth, {\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    async _linkToIdToken(auth, idToken) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            idToken,\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLinkForLinking(auth, {\n            idToken,\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return this._getIdTokenResponse(auth);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.N = EmailAuthCredential;\n  async function signInWithIdp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class OAuthCredential extends AuthCredential {\n    constructor() {\n      super(...arguments);\n      this.pendingToken = null;\n    }\n    /** @internal */\n    static _fromParams(params) {\n      const cred = new OAuthCredential(params.providerId, params.signInMethod);\n      if (params.idToken || params.accessToken) {\n        // OAuth 2 and either ID token or access token.\n        if (params.idToken) {\n          cred.idToken = params.idToken;\n        }\n        if (params.accessToken) {\n          cred.accessToken = params.accessToken;\n        }\n        // Add nonce if available and no pendingToken is present.\n        if (params.nonce && !params.pendingToken) {\n          cred.nonce = params.nonce;\n        }\n        if (params.pendingToken) {\n          cred.pendingToken = params.pendingToken;\n        }\n      } else if (params.oauthToken && params.oauthTokenSecret) {\n        // OAuth 1 and OAuth token with token secret\n        cred.accessToken = params.oauthToken;\n        cred.secret = params.oauthTokenSecret;\n      } else {\n        _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      return cred;\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        idToken: this.idToken,\n        accessToken: this.accessToken,\n        secret: this.secret,\n        nonce: this.nonce,\n        pendingToken: this.pendingToken,\n        providerId: this.providerId,\n        signInMethod: this.signInMethod\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        ...rest\n      } = obj;\n      if (!providerId || !signInMethod) {\n        return null;\n      }\n      const cred = new OAuthCredential(providerId, signInMethod);\n      cred.idToken = rest.idToken || undefined;\n      cred.accessToken = rest.accessToken || undefined;\n      cred.secret = rest.secret;\n      cred.nonce = rest.nonce;\n      cred.pendingToken = rest.pendingToken || null;\n      return cred;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    buildRequest() {\n      const request = {\n        requestUri: IDP_REQUEST_URI$1,\n        returnSecureToken: true\n      };\n      if (this.pendingToken) {\n        request.pendingToken = this.pendingToken;\n      } else {\n        const postBody = {};\n        if (this.idToken) {\n          postBody['id_token'] = this.idToken;\n        }\n        if (this.accessToken) {\n          postBody['access_token'] = this.accessToken;\n        }\n        if (this.secret) {\n          postBody['oauth_token_secret'] = this.secret;\n        }\n        postBody['providerId'] = this.providerId;\n        if (this.nonce && !this.pendingToken) {\n          postBody['nonce'] = this.nonce;\n        }\n        request.postBody = (0, _util.querystring)(postBody);\n      }\n      return request;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.Q = OAuthCredential;\n  async function sendPhoneVerificationCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendVerificationCode\" /* Endpoint.SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithPhoneNumber$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n  }\n  async function linkWithPhoneNumber$1(auth, request) {\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    if (response.temporaryProof) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n    }\n    return response;\n  }\n  const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  async function verifyPhoneNumberForExisting(auth, request) {\n    const apiRequest = {\n      ...request,\n      operation: 'REAUTH'\n    };\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  class PhoneAuthCredential extends AuthCredential {\n    constructor(params) {\n      super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n      this.params = params;\n    }\n    /** @internal */\n    static _fromVerification(verificationId, verificationCode) {\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode\n      });\n    }\n    /** @internal */\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\n      return new PhoneAuthCredential({\n        phoneNumber,\n        temporaryProof\n      });\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      return linkWithPhoneNumber$1(auth, {\n        idToken,\n        ...this._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _makeVerificationRequest() {\n      const {\n        temporaryProof,\n        phoneNumber,\n        verificationId,\n        verificationCode\n      } = this.params;\n      if (temporaryProof && phoneNumber) {\n        return {\n          temporaryProof,\n          phoneNumber\n        };\n      }\n      return {\n        sessionInfo: verificationId,\n        code: verificationCode\n      };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      const obj = {\n        providerId: this.providerId\n      };\n      if (this.params.phoneNumber) {\n        obj.phoneNumber = this.params.phoneNumber;\n      }\n      if (this.params.temporaryProof) {\n        obj.temporaryProof = this.params.temporaryProof;\n      }\n      if (this.params.verificationCode) {\n        obj.verificationCode = this.params.verificationCode;\n      }\n      if (this.params.verificationId) {\n        obj.verificationId = this.params.verificationId;\n      }\n      return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n    static fromJSON(json) {\n      if (typeof json === 'string') {\n        json = JSON.parse(json);\n      }\n      const {\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      } = json;\n      if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n        return null;\n      }\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  exports.U = PhoneAuthCredential;\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    const link = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['link'];\n    // Double link case (automatic redirect).\n    const doubleDeepLink = link ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    const iOSDeepLink = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['deep_link_id'];\n    const iOSDoubleDeepLink = iOSDeepLink ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  class ActionCodeURL {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    constructor(actionLink) {\n      const searchParams = (0, _util.querystringDecode)((0, _util.extractQuerystring)(actionLink));\n      const apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      const code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      const operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    static parseLink(link) {\n      const actionLink = parseDeepLink(link);\n      try {\n        return new ActionCodeURL(actionLink);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  exports.aj = ActionCodeURL;\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  class EmailAuthProvider {\n    constructor() {\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    static credential(email, password) {\n      return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n     * email link operation.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * await sendSignInLinkToEmail(auth, email);\n     * // Obtain emailLink from user.\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n     * ```\n     *\n     * @param auth - The {@link Auth} instance used to verify the link.\n     * @param email - Email address.\n     * @param emailLink - Sign-in email link.\n     * @returns - The auth provider credential.\n     */\n    static credentialWithLink(email, emailLink) {\n      const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n      _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n  }\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  exports.W = EmailAuthProvider;\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  class FederatedAuthProvider {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    constructor(providerId) {\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    setDefaultLanguage(languageCode) {\n      this.defaultLanguageCode = languageCode;\n    }\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n     * operations.\n     *\n     * @remarks\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n     *\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n     */\n    setCustomParameters(customOAuthParameters) {\n      this.customParameters = customOAuthParameters;\n      return this;\n    }\n    /**\n     * Retrieve the current list of {@link CustomParameters}.\n     */\n    getCustomParameters() {\n      return this.customParameters;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  class BaseOAuthProvider extends FederatedAuthProvider {\n    constructor() {\n      super(...arguments);\n      /** @internal */\n      this.scopes = [];\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    addScope(scope) {\n      // If not already added, add scope to list.\n      if (!this.scopes.includes(scope)) {\n        this.scopes.push(scope);\n      }\n      return this;\n    }\n    /**\n     * Retrieve the current list of OAuth scopes.\n     */\n    getScopes() {\n      return [...this.scopes];\n    }\n  }\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class OAuthProvider extends BaseOAuthProvider {\n    /**\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return OAuthCredential._fromParams(obj);\n    }\n    /**\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n     *\n     * @remarks\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n     * the raw nonce must match the nonce field in the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * const provider = new OAuthProvider('google.com');\n     * const credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param params - Either the options object containing the ID token, access token and raw nonce\n     * or the ID token string.\n     */\n    credential(params) {\n      return this._credential({\n        ...params,\n        nonce: params.rawNonce\n      });\n    }\n    /** An internal credential method that accepts more permissive options */\n    _credential(params) {\n      _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      // For OAuthCredential, sign in method is same as providerId.\n      return OAuthCredential._fromParams({\n        ...params,\n        providerId: this.providerId,\n        signInMethod: this.providerId\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n    }\n    static oauthCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce,\n        providerId\n      } = tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      if (!providerId) {\n        return null;\n      }\n      try {\n        return new OAuthProvider(providerId)._credential({\n          idToken: oauthIdToken,\n          accessToken: oauthAccessToken,\n          nonce,\n          pendingToken\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  exports._ = OAuthProvider;\n  class FacebookAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: FacebookAuthProvider.PROVIDER_ID,\n        signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  exports.X = FacebookAuthProvider;\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class GoogleAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"google.com\" /* ProviderId.GOOGLE */);\n      this.addScope('profile');\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    static credential(idToken, accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GoogleAuthProvider.PROVIDER_ID,\n        signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n        idToken,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken\n      } = tokenResponse;\n      if (!oauthIdToken && !oauthAccessToken) {\n        // This could be an oauth 1 credential or a phone credential\n        return null;\n      }\n      try {\n        return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  exports.Y = GoogleAuthProvider;\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class GithubAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"github.com\" /* ProviderId.GITHUB */);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GithubAuthProvider.PROVIDER_ID,\n        signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  exports.Z = GithubAuthProvider;\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  class SAMLAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(providerId, pendingToken) {\n      super(providerId, providerId);\n      this.pendingToken = pendingToken;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        signInMethod: this.signInMethod,\n        providerId: this.providerId,\n        pendingToken: this.pendingToken\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        pendingToken\n      } = obj;\n      if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n        return null;\n      }\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\n     * Helper static method to avoid exposing the constructor to end users.\n     *\n     * @internal\n     */\n    static _create(providerId, pendingToken) {\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    buildRequest() {\n      return {\n        requestUri: IDP_REQUEST_URI,\n        returnSecureToken: true,\n        pendingToken: this.pendingToken\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.aR = SAMLAuthCredential;\n  const SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  class SAMLAuthProvider extends FederatedAuthProvider {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    constructor(providerId) {\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      super(providerId);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n    }\n    /**\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const credential = SAMLAuthCredential.fromJSON(json);\n      _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return credential;\n    }\n    static samlCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        pendingToken,\n        providerId\n      } = tokenResponse;\n      if (!pendingToken || !providerId) {\n        return null;\n      }\n      try {\n        return SAMLAuthCredential._create(providerId, pendingToken);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  exports.$ = SAMLAuthProvider;\n  class TwitterAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"twitter.com\" /* ProviderId.TWITTER */);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    static credential(token, secret) {\n      return OAuthCredential._fromParams({\n        providerId: TwitterAuthProvider.PROVIDER_ID,\n        signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n        oauthToken: token,\n        oauthTokenSecret: secret\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthAccessToken,\n        oauthTokenSecret\n      } = tokenResponse;\n      if (!oauthAccessToken || !oauthTokenSecret) {\n        return null;\n      }\n      try {\n        return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  exports.a0 = TwitterAuthProvider;\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signUp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserCredentialImpl {\n    constructor(params) {\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n      const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n      const providerId = providerIdForResponse(idTokenResponse);\n      const userCred = new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: idTokenResponse,\n        operationType\n      });\n      return userCred;\n    }\n    static async _forOperation(user, operationType, response) {\n      await user._updateTokensIfNecessary(response, /* reload */true);\n      const providerId = providerIdForResponse(response);\n      return new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: response,\n        operationType\n      });\n    }\n  }\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  async function signInAnonymously(auth) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    await authInternal._initializationPromise;\n    if (authInternal.currentUser?.isAnonymous) {\n      // If an anonymous user is already signed in, no need to sign them in again.\n      return new UserCredentialImpl({\n        user: authInternal.currentUser,\n        providerId: null,\n        operationType: \"signIn\" /* OperationType.SIGN_IN */\n      });\n    }\n    const response = await signUp(authInternal, {\n      returnSecureToken: true\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorError extends _util.FirebaseError {\n    constructor(auth, error, operationType, user) {\n      super(error.code, error.message);\n      this.operationType = operationType;\n      this.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, MultiFactorError.prototype);\n      this.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n    }\n    static _fromErrorAndOperation(auth, error, operationType, user) {\n      return new MultiFactorError(auth, error, operationType, user);\n    }\n  }\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(({\n      providerId\n    }) => providerId).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  async function unlink(user, providerId) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _assertLinkedStatus(true, userInternal, providerId);\n    const {\n      providerUserInfo\n    } = await deleteLinkedAccounts(userInternal.auth, {\n      idToken: await userInternal.getIdToken(),\n      deleteProvider: [providerId]\n    });\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n      userInternal.phoneNumber = null;\n    }\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    return userInternal;\n  }\n  async function _link$1(user, credential, bypassAuthState = false) {\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n  }\n  async function _assertLinkedStatus(expected, user, provider) {\n    await _reloadWithoutSaving(user);\n    const providerIds = providerDataAsNames(user.providerData);\n    const code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n    _assert(providerIds.has(provider) === expected, user.auth, code);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reauthenticate(user, credential, bypassAuthState = false) {\n    const {\n      auth\n    } = user;\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n    try {\n      const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n      _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const parsed = _parseToken(response.idToken);\n      _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const {\n        sub: localId\n      } = parsed;\n      _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      return UserCredentialImpl._forOperation(user, operationType, response);\n    } catch (e) {\n      // Convert user deleted error into user mismatch\n      if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n        _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _signInWithCredential(auth, credential, bypassAuthState = false) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n    if (!bypassAuthState) {\n      await auth._updateCurrentUser(userCredential.user);\n    }\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function signInWithCredential(auth, credential) {\n    return _signInWithCredential(_castAuth(auth), credential);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function linkWithCredential(user, credential) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\n    return _link$1(userInternal, credential);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function reauthenticateWithCredential(user, credential) {\n    return _reauthenticate((0, _util.getModularInstance)(user), credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithCustomToken$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  async function signInWithCustomToken(auth, customToken) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const response = await signInWithCustomToken$1(authInternal, {\n      token: customToken,\n      returnSecureToken: true\n    });\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(cred.user);\n    return cred;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorInfoImpl {\n    constructor(factorId, response) {\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    static _fromServerResponse(auth, enrollment) {\n      if ('phoneInfo' in enrollment) {\n        return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      } else if ('totpInfo' in enrollment) {\n        return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      }\n      return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"phone\" /* FactorId.PHONE */, response);\n      this.phoneNumber = response.phoneInfo;\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n  }\n  class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"totp\" /* FactorId.TOTP */, response);\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new TotpMultiFactorInfoImpl(enrollment);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  async function recachePasswordPolicy(auth) {\n    const authInternal = _castAuth(auth);\n    if (authInternal._getPasswordPolicyInternal()) {\n      await authInternal._updatePasswordPolicy();\n    }\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  async function confirmPasswordReset(auth, oobCode, newPassword) {\n    await resetPassword((0, _util.getModularInstance)(auth), {\n      oobCode,\n      newPassword\n    }).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    // Do not return the email.\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function applyActionCode(auth, oobCode) {\n    await applyActionCode$1((0, _util.getModularInstance)(auth), {\n      oobCode\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function checkActionCode(auth, oobCode) {\n    const authModular = (0, _util.getModularInstance)(auth);\n    const response = await resetPassword(authModular, {\n      oobCode\n    });\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\n    // VERIFY_AND_CHANGE_EMAIL.\n    // New email should not be empty if the request type is\n    // VERIFY_AND_CHANGE_EMAIL.\n    // Multi-factor info could not be empty if the request type is\n    // REVERT_SECOND_FACTOR_ADDITION.\n    const operation = response.requestType;\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    switch (operation) {\n      case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n        break;\n      case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n        _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        break;\n      case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n        _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // fall through\n      default:\n        _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    // The multi-factor info for revert second factor addition\n    let multiFactorInfo = null;\n    if (response.mfaInfo) {\n      multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n    }\n    return {\n      data: {\n        email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n        previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n        multiFactorInfo\n      },\n      operation\n    };\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function verifyPasswordResetCode(auth, code) {\n    const {\n      data\n    } = await checkActionCode((0, _util.getModularInstance)(auth), code);\n    // Email should always be present since a code was sent to it\n    return data.email;\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  async function createUserWithEmailAndPassword(auth, email, password) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const request = {\n      returnSecureToken: true,\n      email,\n      password,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    const response = await signUpResponse.catch(error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function signInWithEmailAndPassword(auth, email, password) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential((0, _util.getModularInstance)(auth), EmailAuthProvider.credential(email, password)).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    function setActionCodeSettings(request, actionCodeSettings) {\n      _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n    }\n    setActionCodeSettings(request, actionCodeSettings);\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function isSignInWithEmailLink(auth, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  async function signInWithEmailLink(auth, email, emailLink) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authModular = (0, _util.getModularInstance)(auth);\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\n    // instance.\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    return signInWithCredential(authModular, credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function createAuthUri(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  async function fetchSignInMethodsForEmail(auth, email) {\n    // createAuthUri returns an error if continue URI is not http or https.\n    // For environments like Cordova, Chrome extensions, native frameworks, file\n    // systems, etc, use http://localhost as continue URL.\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n    const request = {\n      identifier: email,\n      continueUri\n    };\n    const {\n      signinMethods\n    } = await createAuthUri((0, _util.getModularInstance)(auth), request);\n    return signinMethods || [];\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendEmailVerification(user, actionCodeSettings) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n      idToken\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await sendEmailVerification$1(userInternal.auth, request);\n    if (email !== user.email) {\n      await user.reload();\n    }\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n      idToken,\n      newEmail\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await verifyAndChangeEmail(userInternal.auth, request);\n    if (email !== user.email) {\n      // If the local copy of the email on user is outdated, reload the\n      // user.\n      await user.reload();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function updateProfile$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  async function updateProfile(user, {\n    displayName,\n    photoURL: photoUrl\n  }) {\n    if (displayName === undefined && photoUrl === undefined) {\n      return;\n    }\n    const userInternal = (0, _util.getModularInstance)(user);\n    const idToken = await userInternal.getIdToken();\n    const profileRequest = {\n      idToken,\n      displayName,\n      photoUrl,\n      returnSecureToken: true\n    };\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n    userInternal.displayName = response.displayName || null;\n    userInternal.photoURL = response.photoUrl || null;\n    // Update the password provider as well\n    const passwordProvider = userInternal.providerData.find(({\n      providerId\n    }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n    if (passwordProvider) {\n      passwordProvider.displayName = userInternal.displayName;\n      passwordProvider.photoURL = userInternal.photoURL;\n    }\n    await userInternal._updateTokensIfNecessary(response);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function updateEmail(user, newEmail) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword((0, _util.getModularInstance)(user), null, newPassword);\n  }\n  async function updateEmailOrPassword(user, email, password) {\n    const {\n      auth\n    } = user;\n    const idToken = await user.getIdToken();\n    const request = {\n      idToken,\n      returnSecureToken: true\n    };\n    if (email) {\n      request.email = email;\n    }\n    if (password) {\n      request.password = password;\n    }\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n    await user._updateTokensIfNecessary(response, /* reload */true);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    const {\n      providerId\n    } = idTokenResponse;\n    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  class GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile = {}) {\n      this.isNewUser = isNewUser;\n      this.providerId = providerId;\n      this.profile = profile;\n    }\n  }\n  class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile, username) {\n      super(isNewUser, providerId, profile);\n      this.username = username;\n    }\n  }\n  class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n    }\n  }\n  class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null);\n    }\n  }\n  class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n    }\n  }\n  class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile, screenName) {\n      super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n    }\n  }\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    const {\n      user,\n      _tokenResponse\n    } = userCredential;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return (0, _util.getModularInstance)(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  async function validatePassword(auth, password) {\n    const authInternal = _castAuth(auth);\n    return authInternal.validatePassword(password);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return (0, _util.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return (0, _util.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return (0, _util.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    (0, _util.getModularInstance)(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return (0, _util.getModularInstance)(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return (0, _util.getModularInstance)(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    const authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function deleteUser(user) {\n    return (0, _util.getModularInstance)(user).delete();\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorSessionImpl {\n    constructor(type, credential, user) {\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    static _fromIdtoken(idToken, user) {\n      return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n    static _fromMfaPendingCredential(mfaPendingCredential) {\n      return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n    toJSON() {\n      const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n      return {\n        multiFactorSession: {\n          [key]: this.credential\n        }\n      };\n    }\n    static fromJSON(obj) {\n      if (obj?.multiFactorSession) {\n        if (obj.multiFactorSession?.pendingCredential) {\n          return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n        } else if (obj.multiFactorSession?.idToken) {\n          return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n        }\n      }\n      return null;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorResolverImpl {\n    constructor(session, hints, signInResolver) {\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    static _fromError(authExtern, error) {\n      const auth = _castAuth(authExtern);\n      const serverResponse = error.customData._serverResponse;\n      const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n      _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n      return new MultiFactorResolverImpl(session, hints, async assertion => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case \"signIn\" /* OperationType.SIGN_IN */:\n            const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n            _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n      });\n    }\n    async resolveSignIn(assertionExtern) {\n      const assertion = assertionExtern;\n      return this.signInResolver(assertion);\n    }\n  }\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    const authModular = (0, _util.getModularInstance)(auth);\n    const errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorUserImpl {\n    constructor(user) {\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    static _fromUser(user) {\n      return new MultiFactorUserImpl(user);\n    }\n    async getSession() {\n      return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n    }\n    async enroll(assertionExtern, displayName) {\n      const assertion = assertionExtern;\n      const session = await this.getSession();\n      const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n      // New tokens will be issued after enrollment of the new second factors.\n      // They need to be updated on the user.\n      await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n      // The user needs to be reloaded to get the new multi-factor information\n      // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n      // will be updated.\n      return this.user.reload();\n    }\n    async unenroll(infoOrUid) {\n      const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n      const idToken = await this.user.getIdToken();\n      try {\n        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        }));\n        // Remove the second factor from the user's list.\n        this.enrolledFactors = this.enrolledFactors.filter(({\n          uid\n        }) => uid !== mfaEnrollmentId);\n        // Depending on whether the backend decided to revoke the user's session,\n        // the tokenResponse may be empty. If the tokens were not updated (and they\n        // are now invalid), reloading the user will discover this and invalidate\n        // the user's state accordingly.\n        await this.user._updateTokensIfNecessary(idTokenResponse);\n        await this.user.reload();\n      } catch (e) {\n        throw e;\n      }\n    }\n  }\n  const multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    const userModular = (0, _util.getModularInstance)(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  const STORAGE_AVAILABLE_KEY = '__sak';\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // There are two different browser persistence types: local and session.\n  // Both have the same implementation but use a different underlying storage\n  // object.\n  class BrowserPersistenceClass {\n    constructor(storageRetriever, type) {\n      this.storageRetriever = storageRetriever;\n      this.type = type;\n    }\n    _isAvailable() {\n      try {\n        if (!this.storage) {\n          return Promise.resolve(false);\n        }\n        this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n        this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n        return Promise.resolve(true);\n      } catch {\n        return Promise.resolve(false);\n      }\n    }\n    _set(key, value) {\n      this.storage.setItem(key, JSON.stringify(value));\n      return Promise.resolve();\n    }\n    _get(key) {\n      const json = this.storage.getItem(key);\n      return Promise.resolve(json ? JSON.parse(json) : null);\n    }\n    _remove(key) {\n      this.storage.removeItem(key);\n      return Promise.resolve();\n    }\n    get storage() {\n      return this.storageRetriever();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // The polling period in case events are not supported\n  const _POLLING_INTERVAL_MS$1 = 1000;\n  // The IE 10 localStorage cross tab synchronization delay in milliseconds\n  const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n  class BrowserLocalPersistence extends BrowserPersistenceClass {\n    constructor() {\n      super(() => window.localStorage, \"LOCAL\" /* PersistenceType.LOCAL */);\n      this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);\n      this.listeners = {};\n      this.localCache = {};\n      // setTimeout return value is platform specific\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.pollTimer = null;\n      // Whether to use polling instead of depending on window events\n      this.fallbackToPolling = _isMobileBrowser();\n      this._shouldAllowMigration = true;\n    }\n    forAllChangedKeys(cb) {\n      // Check all keys with listeners on them.\n      for (const key of Object.keys(this.listeners)) {\n        // Get value from localStorage.\n        const newValue = this.storage.getItem(key);\n        const oldValue = this.localCache[key];\n        // If local map value does not match, trigger listener with storage event.\n        // Differentiate this simulated event from the real storage event.\n        if (newValue !== oldValue) {\n          cb(key, oldValue, newValue);\n        }\n      }\n    }\n    onStorageEvent(event, poll = false) {\n      // Key would be null in some situations, like when localStorage is cleared\n      if (!event.key) {\n        this.forAllChangedKeys((key, _oldValue, newValue) => {\n          this.notifyListeners(key, newValue);\n        });\n        return;\n      }\n      const key = event.key;\n      // Check the mechanism how this event was detected.\n      // The first event will dictate the mechanism to be used.\n      if (poll) {\n        // Environment detects storage changes via polling.\n        // Remove storage event listener to prevent possible event duplication.\n        this.detachListener();\n      } else {\n        // Environment detects storage changes via storage event listener.\n        // Remove polling listener to prevent possible event duplication.\n        this.stopPolling();\n      }\n      const triggerListeners = () => {\n        // Keep local map up to date in case storage event is triggered before\n        // poll.\n        const storedValue = this.storage.getItem(key);\n        if (!poll && this.localCache[key] === storedValue) {\n          // Real storage event which has already been detected, do nothing.\n          // This seems to trigger in some IE browsers for some reason.\n          return;\n        }\n        this.notifyListeners(key, storedValue);\n      };\n      const storedValue = this.storage.getItem(key);\n      if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {\n        // IE 10 has this weird bug where a storage event would trigger with the\n        // correct key, oldValue and newValue but localStorage.getItem(key) does\n        // not yield the updated value until a few milliseconds. This ensures\n        // this recovers from that situation.\n        setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n      } else {\n        triggerListeners();\n      }\n    }\n    notifyListeners(key, value) {\n      this.localCache[key] = value;\n      const listeners = this.listeners[key];\n      if (listeners) {\n        for (const listener of Array.from(listeners)) {\n          listener(value ? JSON.parse(value) : value);\n        }\n      }\n    }\n    startPolling() {\n      this.stopPolling();\n      this.pollTimer = setInterval(() => {\n        this.forAllChangedKeys((key, oldValue, newValue) => {\n          this.onStorageEvent(new StorageEvent('storage', {\n            key,\n            oldValue,\n            newValue\n          }), /* poll */true);\n        });\n      }, _POLLING_INTERVAL_MS$1);\n    }\n    stopPolling() {\n      if (this.pollTimer) {\n        clearInterval(this.pollTimer);\n        this.pollTimer = null;\n      }\n    }\n    attachListener() {\n      window.addEventListener('storage', this.boundEventHandler);\n    }\n    detachListener() {\n      window.removeEventListener('storage', this.boundEventHandler);\n    }\n    _addListener(key, listener) {\n      if (Object.keys(this.listeners).length === 0) {\n        // Whether browser can detect storage event when it had already been pushed to the background.\n        // This may happen in some mobile browsers. A localStorage change in the foreground window\n        // will not be detected in the background window via the storage event.\n        // This was detected in iOS 7.x mobile browsers\n        if (this.fallbackToPolling) {\n          this.startPolling();\n        } else {\n          this.attachListener();\n        }\n      }\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set();\n        // Populate the cache to avoid spuriously triggering on first poll.\n        this.localCache[key] = this.storage.getItem(key);\n      }\n      this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n      if (this.listeners[key]) {\n        this.listeners[key].delete(listener);\n        if (this.listeners[key].size === 0) {\n          delete this.listeners[key];\n        }\n      }\n      if (Object.keys(this.listeners).length === 0) {\n        this.detachListener();\n        this.stopPolling();\n      }\n    }\n    // Update local cache on base operations:\n    async _set(key, value) {\n      await super._set(key, value);\n      this.localCache[key] = JSON.stringify(value);\n    }\n    async _get(key) {\n      const value = await super._get(key);\n      this.localCache[key] = JSON.stringify(value);\n      return value;\n    }\n    async _remove(key) {\n      await super._remove(key);\n      delete this.localCache[key];\n    }\n  }\n  BrowserLocalPersistence.type = 'LOCAL';\n  /**\n   * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const browserLocalPersistence = exports.b = BrowserLocalPersistence;\n\n  /**\n   * @license\n   * Copyright 2025 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const POLLING_INTERVAL_MS = 1000;\n  // Pull a cookie value from document.cookie\n  function getDocumentCookie(name) {\n    const escapedName = name.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&');\n    const matcher = RegExp(`${escapedName}=([^;]+)`);\n    return document.cookie.match(matcher)?.[1] ?? null;\n  }\n  // Produce a sanitized cookie name from the persistence key\n  function getCookieName(key) {\n    // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has\n    // desirable security properties, so lets use a different cookie name while in dev-mode.\n    // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.\n    const isDevMode = window.location.protocol === 'http:';\n    return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;\n  }\n  class CookiePersistence {\n    constructor() {\n      this.type = \"COOKIE\" /* PersistenceType.COOKIE */;\n      this.listenerUnsubscribes = new Map();\n    }\n    // used to get the URL to the backend to proxy to\n    _getFinalTarget(originalUrl) {\n      if (typeof window === undefined) {\n        return originalUrl;\n      }\n      const url = new URL(`${window.location.origin}/__cookies__`);\n      url.searchParams.set('finalTarget', originalUrl);\n      return url;\n    }\n    // To be a usable persistence method in a chain browserCookiePersistence ensures that\n    // prerequisites have been met, namely that we're in a secureContext, navigator and document are\n    // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.\n    async _isAvailable() {\n      if (typeof isSecureContext === 'boolean' && !isSecureContext) {\n        return false;\n      }\n      if (typeof navigator === 'undefined' || typeof document === 'undefined') {\n        return false;\n      }\n      return navigator.cookieEnabled ?? true;\n    }\n    // Set should be a noop as we expect middleware to handle this\n    async _set(_key, _value) {\n      return;\n    }\n    // Attempt to get the cookie from cookieStore, fallback to document.cookie\n    async _get(key) {\n      if (!this._isAvailable()) {\n        return null;\n      }\n      const name = getCookieName(key);\n      if (window.cookieStore) {\n        const cookie = await window.cookieStore.get(name);\n        return cookie?.value;\n      }\n      return getDocumentCookie(name);\n    }\n    // Log out by overriding the idToken with a sentinel value of \"\"\n    async _remove(key) {\n      if (!this._isAvailable()) {\n        return;\n      }\n      // To make sure we don't hit signout over and over again, only do this operation if we need to\n      // with the logout sentinel value of \"\" this can cause race conditions. Unnecessary set-cookie\n      // headers will reduce CDN hit rates too.\n      const existingValue = await this._get(key);\n      if (!existingValue) {\n        return;\n      }\n      const name = getCookieName(key);\n      document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;\n      await fetch(`/__cookies__`, {\n        method: 'DELETE'\n      }).catch(() => undefined);\n    }\n    // Listen for cookie changes, both cookieStore and fallback to polling document.cookie\n    _addListener(key, listener) {\n      if (!this._isAvailable()) {\n        return;\n      }\n      const name = getCookieName(key);\n      if (window.cookieStore) {\n        const cb = event => {\n          const changedCookie = event.changed.find(change => change.name === name);\n          if (changedCookie) {\n            listener(changedCookie.value);\n          }\n          const deletedCookie = event.deleted.find(change => change.name === name);\n          if (deletedCookie) {\n            listener(null);\n          }\n        };\n        const unsubscribe = () => window.cookieStore.removeEventListener('change', cb);\n        this.listenerUnsubscribes.set(listener, unsubscribe);\n        return window.cookieStore.addEventListener('change', cb);\n      }\n      let lastValue = getDocumentCookie(name);\n      const interval = setInterval(() => {\n        const currentValue = getDocumentCookie(name);\n        if (currentValue !== lastValue) {\n          listener(currentValue);\n          lastValue = currentValue;\n        }\n      }, POLLING_INTERVAL_MS);\n      const unsubscribe = () => clearInterval(interval);\n      this.listenerUnsubscribes.set(listener, unsubscribe);\n    }\n    _removeListener(_key, listener) {\n      const unsubscribe = this.listenerUnsubscribes.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      unsubscribe();\n      this.listenerUnsubscribes.delete(listener);\n    }\n  }\n  CookiePersistence.type = 'COOKIE';\n  /**\n   * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in\n   * applications leveraging hybrid rendering and middleware.\n   *\n   * @remarks This persistence method requires companion middleware to function, such as that provided\n   * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for\n   * NextJS.\n   * @beta\n   */\n  const browserCookiePersistence = exports.a = CookiePersistence;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class BrowserSessionPersistence extends BrowserPersistenceClass {\n    constructor() {\n      super(() => window.sessionStorage, \"SESSION\" /* PersistenceType.SESSION */);\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for session storage since it cannot be shared across windows\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for session storage since it cannot be shared across windows\n      return;\n    }\n  }\n  BrowserSessionPersistence.type = 'SESSION';\n  /**\n   * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const browserSessionPersistence = exports.c = BrowserSessionPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n   *\n   * @param promises - Array of promises to wait on.\n   */\n  function _allSettled(promises) {\n    return Promise.all(promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        };\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        };\n      }\n    }));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface class for receiving messages.\n   *\n   */\n  class Receiver {\n    constructor(eventTarget) {\n      this.eventTarget = eventTarget;\n      this.handlersMap = {};\n      this.boundEventHandler = this.handleEvent.bind(this);\n    }\n    /**\n     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n     *\n     * @param eventTarget - An event target (such as window or self) through which the underlying\n     * messages will be received.\n     */\n    static _getInstance(eventTarget) {\n      // The results are stored in an array since objects can't be keys for other\n      // objects. In addition, setting a unique property on an event target as a\n      // hash map key may not be allowed due to CORS restrictions.\n      const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));\n      if (existingInstance) {\n        return existingInstance;\n      }\n      const newInstance = new Receiver(eventTarget);\n      this.receivers.push(newInstance);\n      return newInstance;\n    }\n    isListeningto(eventTarget) {\n      return this.eventTarget === eventTarget;\n    }\n    /**\n     * Fans out a MessageEvent to the appropriate listeners.\n     *\n     * @remarks\n     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n     * finished processing.\n     *\n     * @param event - The MessageEvent.\n     *\n     */\n    async handleEvent(event) {\n      const messageEvent = event;\n      const {\n        eventId,\n        eventType,\n        data\n      } = messageEvent.data;\n      const handlers = this.handlersMap[eventType];\n      if (!handlers?.size) {\n        return;\n      }\n      messageEvent.ports[0].postMessage({\n        status: \"ack\" /* _Status.ACK */,\n        eventId,\n        eventType\n      });\n      const promises = Array.from(handlers).map(async handler => handler(messageEvent.origin, data));\n      const response = await _allSettled(promises);\n      messageEvent.ports[0].postMessage({\n        status: \"done\" /* _Status.DONE */,\n        eventId,\n        eventType,\n        response\n      });\n    }\n    /**\n     * Subscribe an event handler for a particular event.\n     *\n     * @param eventType - Event name to subscribe to.\n     * @param eventHandler - The event handler which should receive the events.\n     *\n     */\n    _subscribe(eventType, eventHandler) {\n      if (Object.keys(this.handlersMap).length === 0) {\n        this.eventTarget.addEventListener('message', this.boundEventHandler);\n      }\n      if (!this.handlersMap[eventType]) {\n        this.handlersMap[eventType] = new Set();\n      }\n      this.handlersMap[eventType].add(eventHandler);\n    }\n    /**\n     * Unsubscribe an event handler from a particular event.\n     *\n     * @param eventType - Event name to unsubscribe from.\n     * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n     *\n     */\n    _unsubscribe(eventType, eventHandler) {\n      if (this.handlersMap[eventType] && eventHandler) {\n        this.handlersMap[eventType].delete(eventHandler);\n      }\n      if (!eventHandler || this.handlersMap[eventType].size === 0) {\n        delete this.handlersMap[eventType];\n      }\n      if (Object.keys(this.handlersMap).length === 0) {\n        this.eventTarget.removeEventListener('message', this.boundEventHandler);\n      }\n    }\n  }\n  Receiver.receivers = [];\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _generateEventId(prefix = '', digits = 10) {\n    let random = '';\n    for (let i = 0; i < digits; i++) {\n      random += Math.floor(Math.random() * 10);\n    }\n    return prefix + random;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface for sending messages and waiting for a completion response.\n   *\n   */\n  class Sender {\n    constructor(target) {\n      this.target = target;\n      this.handlers = new Set();\n    }\n    /**\n     * Unsubscribe the handler and remove it from our tracking Set.\n     *\n     * @param handler - The handler to unsubscribe.\n     */\n    removeMessageHandler(handler) {\n      if (handler.messageChannel) {\n        handler.messageChannel.port1.removeEventListener('message', handler.onMessage);\n        handler.messageChannel.port1.close();\n      }\n      this.handlers.delete(handler);\n    }\n    /**\n     * Send a message to the Receiver located at {@link target}.\n     *\n     * @remarks\n     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n     * receiver has had a chance to fully process the event.\n     *\n     * @param eventType - Type of event to send.\n     * @param data - The payload of the event.\n     * @param timeout - Timeout for waiting on an ACK from the receiver.\n     *\n     * @returns An array of settled promises from all the handlers that were listening on the receiver.\n     */\n    async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {\n      const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n      if (!messageChannel) {\n        throw new Error(\"connection_unavailable\" /* _MessageError.CONNECTION_UNAVAILABLE */);\n      }\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let completionTimer;\n      let handler;\n      return new Promise((resolve, reject) => {\n        const eventId = _generateEventId('', 20);\n        messageChannel.port1.start();\n        const ackTimer = setTimeout(() => {\n          reject(new Error(\"unsupported_event\" /* _MessageError.UNSUPPORTED_EVENT */));\n        }, timeout);\n        handler = {\n          messageChannel,\n          onMessage(event) {\n            const messageEvent = event;\n            if (messageEvent.data.eventId !== eventId) {\n              return;\n            }\n            switch (messageEvent.data.status) {\n              case \"ack\" /* _Status.ACK */:\n                // The receiver should ACK first.\n                clearTimeout(ackTimer);\n                completionTimer = setTimeout(() => {\n                  reject(new Error(\"timeout\" /* _MessageError.TIMEOUT */));\n                }, 3000 /* _TimeoutDuration.COMPLETION */);\n                break;\n              case \"done\" /* _Status.DONE */:\n                // Once the receiver's handlers are finished we will get the results.\n                clearTimeout(completionTimer);\n                resolve(messageEvent.data.response);\n                break;\n              default:\n                clearTimeout(ackTimer);\n                clearTimeout(completionTimer);\n                reject(new Error(\"invalid_response\" /* _MessageError.INVALID_RESPONSE */));\n                break;\n            }\n          }\n        };\n        this.handlers.add(handler);\n        messageChannel.port1.addEventListener('message', handler.onMessage);\n        this.target.postMessage({\n          eventType,\n          eventId,\n          data\n        }, [messageChannel.port2]);\n      }).finally(() => {\n        if (handler) {\n          this.removeMessageHandler(handler);\n        }\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Lazy accessor for window, since the compat layer won't tree shake this out,\n   * we need to make sure not to mess with window unless we have to\n   */\n  function _window() {\n    return window;\n  }\n  function _setWindowLocation(url) {\n    _window().location.href = url;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _isWorker() {\n    return typeof _window()['WorkerGlobalScope'] !== 'undefined' && typeof _window()['importScripts'] === 'function';\n  }\n  async function _getActiveServiceWorker() {\n    if (!navigator?.serviceWorker) {\n      return null;\n    }\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      return registration.active;\n    } catch {\n      return null;\n    }\n  }\n  function _getServiceWorkerController() {\n    return navigator?.serviceWorker?.controller || null;\n  }\n  function _getWorkerGlobalScope() {\n    return _isWorker() ? self : null;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DB_NAME = 'firebaseLocalStorageDb';\n  const DB_VERSION = 1;\n  const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\n  const DB_DATA_KEYPATH = 'fbase_key';\n  /**\n   * Promise wrapper for IDBRequest\n   *\n   * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n   *\n   */\n  class DBPromise {\n    constructor(request) {\n      this.request = request;\n    }\n    toPromise() {\n      return new Promise((resolve, reject) => {\n        this.request.addEventListener('success', () => {\n          resolve(this.request.result);\n        });\n        this.request.addEventListener('error', () => {\n          reject(this.request.error);\n        });\n      });\n    }\n  }\n  function getObjectStore(db, isReadWrite) {\n    return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly').objectStore(DB_OBJECTSTORE_NAME);\n  }\n  function _deleteDatabase() {\n    const request = indexedDB.deleteDatabase(DB_NAME);\n    return new DBPromise(request).toPromise();\n  }\n  function _openDatabase() {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    return new Promise((resolve, reject) => {\n      request.addEventListener('error', () => {\n        reject(request.error);\n      });\n      request.addEventListener('upgradeneeded', () => {\n        const db = request.result;\n        try {\n          db.createObjectStore(DB_OBJECTSTORE_NAME, {\n            keyPath: DB_DATA_KEYPATH\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n      request.addEventListener('success', async () => {\n        const db = request.result;\n        // Strange bug that occurs in Firefox when multiple tabs are opened at the\n        // same time. The only way to recover seems to be deleting the database\n        // and re-initializing it.\n        // https://github.com/firebase/firebase-js-sdk/issues/634\n        if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n          // Need to close the database or else you get a `blocked` event\n          db.close();\n          await _deleteDatabase();\n          resolve(await _openDatabase());\n        } else {\n          resolve(db);\n        }\n      });\n    });\n  }\n  async function _putObject(db, key, value) {\n    const request = getObjectStore(db, true).put({\n      [DB_DATA_KEYPATH]: key,\n      value\n    });\n    return new DBPromise(request).toPromise();\n  }\n  async function getObject(db, key) {\n    const request = getObjectStore(db, false).get(key);\n    const data = await new DBPromise(request).toPromise();\n    return data === undefined ? null : data.value;\n  }\n  function _deleteObject(db, key) {\n    const request = getObjectStore(db, true).delete(key);\n    return new DBPromise(request).toPromise();\n  }\n  const _POLLING_INTERVAL_MS = 800;\n  const _TRANSACTION_RETRY_COUNT = 3;\n  class IndexedDBLocalPersistence {\n    constructor() {\n      this.type = \"LOCAL\" /* PersistenceType.LOCAL */;\n      this._shouldAllowMigration = true;\n      this.listeners = {};\n      this.localCache = {};\n      // setTimeout return value is platform specific\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.pollTimer = null;\n      this.pendingWrites = 0;\n      this.receiver = null;\n      this.sender = null;\n      this.serviceWorkerReceiverAvailable = false;\n      this.activeServiceWorker = null;\n      // Fire & forget the service worker registration as it may never resolve\n      this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {}, () => {});\n    }\n    async _openDb() {\n      if (this.db) {\n        return this.db;\n      }\n      this.db = await _openDatabase();\n      return this.db;\n    }\n    async _withRetries(op) {\n      let numAttempts = 0;\n      while (true) {\n        try {\n          const db = await this._openDb();\n          return await op(db);\n        } catch (e) {\n          if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n            throw e;\n          }\n          if (this.db) {\n            this.db.close();\n            this.db = undefined;\n          }\n          // TODO: consider adding exponential backoff\n        }\n      }\n    }\n    /**\n     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n     * postMessage interface to send these events to the worker ourselves.\n     */\n    async initializeServiceWorkerMessaging() {\n      return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n    }\n    /**\n     * As the worker we should listen to events from the main window.\n     */\n    async initializeReceiver() {\n      this.receiver = Receiver._getInstance(_getWorkerGlobalScope());\n      // Refresh from persistence if we receive a KeyChanged message.\n      this.receiver._subscribe(\"keyChanged\" /* _EventType.KEY_CHANGED */, async (_origin, data) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      });\n      // Let the sender know that we are listening so they give us more timeout.\n      this.receiver._subscribe(\"ping\" /* _EventType.PING */, async (_origin, _data) => {\n        return [\"keyChanged\" /* _EventType.KEY_CHANGED */];\n      });\n    }\n    /**\n     * As the main window, we should let the worker know when keys change (set and remove).\n     *\n     * @remarks\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n     * may not resolve.\n     */\n    async initializeSender() {\n      // Check to see if there's an active service worker.\n      this.activeServiceWorker = await _getActiveServiceWorker();\n      if (!this.activeServiceWorker) {\n        return;\n      }\n      this.sender = new Sender(this.activeServiceWorker);\n      // Ping the service worker to check what events they can handle.\n      const results = await this.sender._send(\"ping\" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);\n      if (!results) {\n        return;\n      }\n      if (results[0]?.fulfilled && results[0]?.value.includes(\"keyChanged\" /* _EventType.KEY_CHANGED */)) {\n        this.serviceWorkerReceiverAvailable = true;\n      }\n    }\n    /**\n     * Let the worker know about a changed key, the exact key doesn't technically matter since the\n     * worker will just trigger a full sync anyway.\n     *\n     * @remarks\n     * For now, we only support one service worker per page.\n     *\n     * @param key - Storage key which changed.\n     */\n    async notifyServiceWorker(key) {\n      if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {\n        return;\n      }\n      try {\n        await this.sender._send(\"keyChanged\" /* _EventType.KEY_CHANGED */, {\n          key\n        },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */ : 50 /* _TimeoutDuration.ACK */);\n      } catch {\n        // This is a best effort approach. Ignore errors.\n      }\n    }\n    async _isAvailable() {\n      try {\n        if (!indexedDB) {\n          return false;\n        }\n        const db = await _openDatabase();\n        await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n        await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n        return true;\n      } catch {}\n      return false;\n    }\n    async _withPendingWrite(write) {\n      this.pendingWrites++;\n      try {\n        await write();\n      } finally {\n        this.pendingWrites--;\n      }\n    }\n    async _set(key, value) {\n      return this._withPendingWrite(async () => {\n        await this._withRetries(db => _putObject(db, key, value));\n        this.localCache[key] = value;\n        return this.notifyServiceWorker(key);\n      });\n    }\n    async _get(key) {\n      const obj = await this._withRetries(db => getObject(db, key));\n      this.localCache[key] = obj;\n      return obj;\n    }\n    async _remove(key) {\n      return this._withPendingWrite(async () => {\n        await this._withRetries(db => _deleteObject(db, key));\n        delete this.localCache[key];\n        return this.notifyServiceWorker(key);\n      });\n    }\n    async _poll() {\n      // TODO: check if we need to fallback if getAll is not supported\n      const result = await this._withRetries(db => {\n        const getAllRequest = getObjectStore(db, false).getAll();\n        return new DBPromise(getAllRequest).toPromise();\n      });\n      if (!result) {\n        return [];\n      }\n      // If we have pending writes in progress abort, we'll get picked up on the next poll\n      if (this.pendingWrites !== 0) {\n        return [];\n      }\n      const keys = [];\n      const keysInResult = new Set();\n      if (result.length !== 0) {\n        for (const {\n          fbase_key: key,\n          value\n        } of result) {\n          keysInResult.add(key);\n          if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n            this.notifyListeners(key, value);\n            keys.push(key);\n          }\n        }\n      }\n      for (const localKey of Object.keys(this.localCache)) {\n        if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n          // Deleted\n          this.notifyListeners(localKey, null);\n          keys.push(localKey);\n        }\n      }\n      return keys;\n    }\n    notifyListeners(key, newValue) {\n      this.localCache[key] = newValue;\n      const listeners = this.listeners[key];\n      if (listeners) {\n        for (const listener of Array.from(listeners)) {\n          listener(newValue);\n        }\n      }\n    }\n    startPolling() {\n      this.stopPolling();\n      this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);\n    }\n    stopPolling() {\n      if (this.pollTimer) {\n        clearInterval(this.pollTimer);\n        this.pollTimer = null;\n      }\n    }\n    _addListener(key, listener) {\n      if (Object.keys(this.listeners).length === 0) {\n        this.startPolling();\n      }\n      if (!this.listeners[key]) {\n        this.listeners[key] = new Set();\n        // Populate the cache to avoid spuriously triggering on first poll.\n        void this._get(key); // This can happen in the background async and we can return immediately.\n      }\n      this.listeners[key].add(listener);\n    }\n    _removeListener(key, listener) {\n      if (this.listeners[key]) {\n        this.listeners[key].delete(listener);\n        if (this.listeners[key].size === 0) {\n          delete this.listeners[key];\n        }\n      }\n      if (Object.keys(this.listeners).length === 0) {\n        this.stopPolling();\n      }\n    }\n  }\n  IndexedDBLocalPersistence.type = 'LOCAL';\n  /**\n   * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n   * for the underlying storage.\n   *\n   * @public\n   */\n  const indexedDBLocalPersistence = exports.i = IndexedDBLocalPersistence;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:start\" /* Endpoint.START_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInPhoneMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // ReCaptcha will load using the same callback, so the callback function needs\n  // to be kept around\n  const _JSLOAD_CALLBACK = _generateCallbackName('rcb');\n  const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n  /**\n   * Loader for the GReCaptcha library. There should only ever be one of this.\n   */\n  class ReCaptchaLoaderImpl {\n    constructor() {\n      this.hostLanguage = '';\n      this.counter = 0;\n      /**\n       * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n       * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n       * `window.grecaptcha.render()` will not. Another load will add it.\n       */\n      this.librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n    }\n    load(auth, hl = '') {\n      _assert(isHostLanguageValid(hl), auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n        return Promise.resolve(_window().grecaptcha);\n      }\n      return new Promise((resolve, reject) => {\n        const networkTimeout = _window().setTimeout(() => {\n          reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, NETWORK_TIMEOUT_DELAY.get());\n        _window()[_JSLOAD_CALLBACK] = () => {\n          _window().clearTimeout(networkTimeout);\n          delete _window()[_JSLOAD_CALLBACK];\n          const recaptcha = _window().grecaptcha;\n          if (!recaptcha || !isV2(recaptcha)) {\n            reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n            return;\n          }\n          // Wrap the recaptcha render function so that we know if the developer has\n          // called it separately\n          const render = recaptcha.render;\n          recaptcha.render = (container, params) => {\n            const widgetId = render(container, params);\n            this.counter++;\n            return widgetId;\n          };\n          this.hostLanguage = hl;\n          resolve(recaptcha);\n        };\n        const url = `${_recaptchaV2ScriptUrl()}?${(0, _util.querystring)({\n          onload: _JSLOAD_CALLBACK,\n          render: 'explicit',\n          hl\n        })}`;\n        _loadJS(url).catch(() => {\n          clearTimeout(networkTimeout);\n          reject(_createError(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */));\n        });\n      });\n    }\n    clearedOneInstance() {\n      this.counter--;\n    }\n    shouldResolveImmediately(hl) {\n      // We can resolve immediately if:\n      //   • grecaptcha is already defined AND (\n      //     1. the requested language codes are the same OR\n      //     2. there exists already a ReCaptcha on the page\n      //     3. the library was already loaded by the app\n      // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n      // that are already in the page\n      return !!_window().grecaptcha?.render && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);\n    }\n  }\n  function isHostLanguageValid(hl) {\n    return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n  }\n  class MockReCaptchaLoaderImpl {\n    async load(auth) {\n      return new MockReCaptcha(auth);\n    }\n    clearedOneInstance() {}\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n  const DEFAULT_PARAMS = {\n    theme: 'light',\n    type: 'image'\n  };\n  /**\n   * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n   *\n   * @remarks\n   * `RecaptchaVerifier` does not work in a Node.js environment.\n   *\n   * @public\n   */\n  class RecaptchaVerifier {\n    /**\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     * @param containerOrId - The reCAPTCHA container parameter.\n     *\n     * @remarks\n     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n     * an element ID. The corresponding element must also must be in the DOM at the time of\n     * initialization.\n     *\n     * @param parameters - The optional reCAPTCHA parameters.\n     *\n     * @remarks\n     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n     * 'invisible'.\n     */\n    constructor(authExtern, containerOrId, parameters = {\n      ...DEFAULT_PARAMS\n    }) {\n      this.parameters = parameters;\n      /**\n       * The application verifier type.\n       *\n       * @remarks\n       * For a reCAPTCHA verifier, this is 'recaptcha'.\n       */\n      this.type = RECAPTCHA_VERIFIER_TYPE;\n      this.destroyed = false;\n      this.widgetId = null;\n      this.tokenChangeListeners = new Set();\n      this.renderPromise = null;\n      this.recaptcha = null;\n      this.auth = _castAuth(authExtern);\n      this.isInvisible = this.parameters.size === 'invisible';\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n      const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;\n      _assert(container, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.container = container;\n      this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n      this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();\n      this.validateStartingState();\n      // TODO: Figure out if sdk version is needed\n    }\n    /**\n     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n     *\n     * @returns A Promise for the reCAPTCHA token.\n     */\n    async verify() {\n      this.assertNotDestroyed();\n      const id = await this.render();\n      const recaptcha = this.getAssertedRecaptcha();\n      const response = recaptcha.getResponse(id);\n      if (response) {\n        return response;\n      }\n      return new Promise(resolve => {\n        const tokenChange = token => {\n          if (!token) {\n            return; // Ignore token expirations.\n          }\n          this.tokenChangeListeners.delete(tokenChange);\n          resolve(token);\n        };\n        this.tokenChangeListeners.add(tokenChange);\n        if (this.isInvisible) {\n          recaptcha.execute(id);\n        }\n      });\n    }\n    /**\n     * Renders the reCAPTCHA widget on the page.\n     *\n     * @returns A Promise that resolves with the reCAPTCHA widget ID.\n     */\n    render() {\n      try {\n        this.assertNotDestroyed();\n      } catch (e) {\n        // This method returns a promise. Since it's not async (we want to return the\n        // _same_ promise if rendering is still occurring), the API surface should\n        // reject with the error rather than just throw\n        return Promise.reject(e);\n      }\n      if (this.renderPromise) {\n        return this.renderPromise;\n      }\n      this.renderPromise = this.makeRenderPromise().catch(e => {\n        this.renderPromise = null;\n        throw e;\n      });\n      return this.renderPromise;\n    }\n    /** @internal */\n    _reset() {\n      this.assertNotDestroyed();\n      if (this.widgetId !== null) {\n        this.getAssertedRecaptcha().reset(this.widgetId);\n      }\n    }\n    /**\n     * Clears the reCAPTCHA widget from the page and destroys the instance.\n     */\n    clear() {\n      this.assertNotDestroyed();\n      this.destroyed = true;\n      this._recaptchaLoader.clearedOneInstance();\n      if (!this.isInvisible) {\n        this.container.childNodes.forEach(node => {\n          this.container.removeChild(node);\n        });\n      }\n    }\n    validateStartingState() {\n      _assert(!this.parameters.sitekey, this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      _assert(typeof document !== 'undefined', this.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    }\n    makeTokenCallback(existing) {\n      return token => {\n        this.tokenChangeListeners.forEach(listener => listener(token));\n        if (typeof existing === 'function') {\n          existing(token);\n        } else if (typeof existing === 'string') {\n          const globalFunc = _window()[existing];\n          if (typeof globalFunc === 'function') {\n            globalFunc(token);\n          }\n        }\n      };\n    }\n    assertNotDestroyed() {\n      _assert(!this.destroyed, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    async makeRenderPromise() {\n      await this.init();\n      if (!this.widgetId) {\n        let container = this.container;\n        if (!this.isInvisible) {\n          const guaranteedEmpty = document.createElement('div');\n          container.appendChild(guaranteedEmpty);\n          container = guaranteedEmpty;\n        }\n        this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);\n      }\n      return this.widgetId;\n    }\n    async init() {\n      _assert(_isHttpOrHttps() && !_isWorker(), this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      await domReady();\n      this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);\n      const siteKey = await getRecaptchaParams(this.auth);\n      _assert(siteKey, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.parameters.sitekey = siteKey;\n    }\n    getAssertedRecaptcha() {\n      _assert(this.recaptcha, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.recaptcha;\n    }\n  }\n  exports.R = RecaptchaVerifier;\n  function domReady() {\n    let resolver = null;\n    return new Promise(resolve => {\n      if (document.readyState === 'complete') {\n        resolve();\n        return;\n      }\n      // Document not ready, wait for load before resolving.\n      // Save resolver, so we can remove listener in case it was externally\n      // cancelled.\n      resolver = () => resolve();\n      window.addEventListener('load', resolver);\n    }).catch(e => {\n      if (resolver) {\n        window.removeEventListener('load', resolver);\n      }\n      throw e;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ConfirmationResultImpl {\n    constructor(verificationId, onConfirmation) {\n      this.verificationId = verificationId;\n      this.onConfirmation = onConfirmation;\n    }\n    confirm(verificationCode) {\n      const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);\n      return this.onConfirmation(authCredential);\n    }\n  }\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   * @remarks\n   * This method sends a code via SMS to the given\n   * phone number, and returns a {@link ConfirmationResult}. After the user\n   * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n   * with the code to sign the user in.\n   *\n   * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n   * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n   * This function can work on other platforms that do not support the\n   * {@link RecaptchaVerifier} (like React Native), but you need to use a\n   * third-party {@link ApplicationVerifier} implementation.\n   *\n   * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n   * Enforce mode, you can omit the {@link ApplicationVerifier}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain a verificationCode from the user.\n   * const credential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0, _util.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));\n  }\n  /**\n   * Links the user account with the given phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, \"phone\" /* ProviderId.PHONE */);\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));\n  }\n  /**\n   * Re-authenticates a user using a fresh phone credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n   * @param appVerifier - The {@link ApplicationVerifier}.\n   *\n   * @public\n   */\n  async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));\n    return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));\n  }\n  /**\n   * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n   *\n   */\n  async function _verifyPhoneNumber(auth, options, verifier) {\n    if (!auth._getRecaptchaConfig()) {\n      try {\n        await _initializeRecaptchaConfig(auth);\n      } catch (error) {\n        // If an error occurs while fetching the config, there is no way to know the enablement state\n        // of Phone provider, so we proceed with recaptcha V2 verification.\n        // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n        // enabled for any provider.\n        console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');\n      }\n    }\n    try {\n      let phoneInfoOptions;\n      if (typeof options === 'string') {\n        phoneInfoOptions = {\n          phoneNumber: options\n        };\n      } else {\n        phoneInfoOptions = options;\n      }\n      if ('session' in phoneInfoOptions) {\n        const session = phoneInfoOptions.session;\n        if ('phoneNumber' in phoneInfoOptions) {\n          _assert(session.type === \"enroll\" /* MultiFactorSessionType.ENROLL */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          const startPhoneMfaEnrollmentRequest = {\n            idToken: session.credential,\n            phoneEnrollmentInfo: {\n              phoneNumber: phoneInfoOptions.phoneNumber,\n              clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            }\n          };\n          const startEnrollPhoneMfaActionCallback = async (authInstance, request) => {\n            // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n            if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n              _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n              return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n            }\n            return startEnrollPhoneMfa(authInstance, request);\n          };\n          const startPhoneMfaEnrollmentResponse = handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */, startEnrollPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          const response = await startPhoneMfaEnrollmentResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return response.phoneSessionInfo.sessionInfo;\n        } else {\n          _assert(session.type === \"signin\" /* MultiFactorSessionType.SIGN_IN */, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          const mfaEnrollmentId = phoneInfoOptions.multiFactorHint?.uid || phoneInfoOptions.multiFactorUid;\n          _assert(mfaEnrollmentId, auth, \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */);\n          const startPhoneMfaSignInRequest = {\n            mfaPendingCredential: session.credential,\n            mfaEnrollmentId,\n            phoneSignInInfo: {\n              clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n            }\n          };\n          const startSignInPhoneMfaActionCallback = async (authInstance, request) => {\n            // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n            if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n              _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n              return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n            }\n            return startSignInPhoneMfa(authInstance, request);\n          };\n          const startPhoneMfaSignInResponse = handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */, startSignInPhoneMfaActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n          const response = await startPhoneMfaSignInResponse.catch(error => {\n            return Promise.reject(error);\n          });\n          return response.phoneResponseInfo.sessionInfo;\n        }\n      } else {\n        const sendPhoneVerificationCodeRequest = {\n          phoneNumber: phoneInfoOptions.phoneNumber,\n          clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n        };\n        const sendPhoneVerificationCodeActionCallback = async (authInstance, request) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.captchaResponse === FAKE_TOKEN) {\n            _assert(verifier?.type === RECAPTCHA_VERIFIER_TYPE, authInstance, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(authInstance, request, verifier);\n            return sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);\n          }\n          return sendPhoneVerificationCode(authInstance, request);\n        };\n        const sendPhoneVerificationCodeResponse = handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, \"sendVerificationCode\" /* RecaptchaActionName.SEND_VERIFICATION_CODE */, sendPhoneVerificationCodeActionCallback, \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n        const response = await sendPhoneVerificationCodeResponse.catch(error => {\n          return Promise.reject(error);\n        });\n        return response.sessionInfo;\n      }\n    } finally {\n      verifier?._reset();\n    }\n  }\n  /**\n   * Updates the user's phone number.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * await updatePhoneNumber(user, phoneCredential);\n   * ```\n   *\n   * @param user - The user.\n   * @param credential - A credential authenticating the new phone number.\n   *\n   * @public\n   */\n  async function updatePhoneNumber(user, credential) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    await _link$1(userInternal, credential);\n  }\n  // Helper function that fetches and injects a reCAPTCHA v2 token into the request.\n  async function injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {\n    _assert(recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const recaptchaV2Token = await recaptchaV2Verifier.verify();\n    _assert(typeof recaptchaV2Token === 'string', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    const newRequest = {\n      ...request\n    };\n    if ('phoneEnrollmentInfo' in newRequest) {\n      const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n      const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;\n      const clientType = newRequest.phoneEnrollmentInfo.clientType;\n      const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;\n      Object.assign(newRequest, {\n        'phoneEnrollmentInfo': {\n          phoneNumber,\n          recaptchaToken: recaptchaV2Token,\n          captchaResponse,\n          clientType,\n          recaptchaVersion\n        }\n      });\n      return newRequest;\n    } else if ('phoneSignInInfo' in newRequest) {\n      const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;\n      const clientType = newRequest.phoneSignInInfo.clientType;\n      const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;\n      Object.assign(newRequest, {\n        'phoneSignInInfo': {\n          recaptchaToken: recaptchaV2Token,\n          captchaResponse,\n          clientType,\n          recaptchaVersion\n        }\n      });\n      return newRequest;\n    } else {\n      Object.assign(newRequest, {\n        'recaptchaToken': recaptchaV2Token\n      });\n      return newRequest;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link PhoneAuthCredential}.\n   *\n   * @remarks\n   * `PhoneAuthProvider` does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // 'recaptcha-container' is the ID of an element in the DOM.\n   * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n   * // Obtain the verificationCode from the user.\n   * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, phoneCredential);\n   * ```\n   *\n   * @public\n   */\n  class PhoneAuthProvider {\n    /**\n     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n     *\n     */\n    constructor(auth) {\n      /** Always set to {@link ProviderId}.PHONE. */\n      this.providerId = PhoneAuthProvider.PROVIDER_ID;\n      this.auth = _castAuth(auth);\n    }\n    /**\n     *\n     * Starts a phone number authentication flow by sending a verification code to the given phone\n     * number.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n     * E.164 format (e.g. +16505550101).\n     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n     * requests from unauthorized clients. This SDK includes an implementation\n     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n     * optional; in all other configurations, the parameter is required.\n     *\n     * @returns A Promise for a verification ID that can be passed to\n     * {@link PhoneAuthProvider.credential} to identify this flow.\n     */\n    verifyPhoneNumber(phoneOptions, applicationVerifier) {\n      return _verifyPhoneNumber(this.auth, phoneOptions, (0, _util.getModularInstance)(applicationVerifier));\n    }\n    /**\n     * Creates a phone auth credential, given the verification ID from\n     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n     * mobile device.\n     *\n     * @example\n     * ```javascript\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n     * const userCredential = signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * An alternative flow is provided using the `signInWithPhoneNumber` method.\n     * ```javascript\n     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n     * // Obtain verificationCode from the user.\n     * const userCredential = await confirmationResult.confirm(verificationCode);\n     * ```\n     *\n     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n     * @param verificationCode - The verification code sent to the user's mobile device.\n     *\n     * @returns The auth provider credential.\n     */\n    static credential(verificationId, verificationCode) {\n      return PhoneAuthCredential._fromVerification(verificationId, verificationCode);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential}.\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      const credential = userCredential;\n      return PhoneAuthProvider.credentialFromTaggedObject(credential);\n    }\n    /**\n     * Returns an {@link AuthCredential} when passed an error.\n     *\n     * @remarks\n     *\n     * This method works for errors like\n     * `auth/account-exists-with-different-credentials`. This is useful for\n     * recovering when attempting to set a user's phone number but the number\n     * in question is already tied to another account. For example, the following\n     * code tries to update the current user's phone number, and if that\n     * fails, links the user with the account associated with that number:\n     *\n     * ```js\n     * const provider = new PhoneAuthProvider(auth);\n     * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n     * try {\n     *   const code = ''; // Prompt the user for the verification code\n     *   await updatePhoneNumber(\n     *       auth.currentUser,\n     *       PhoneAuthProvider.credential(verificationId, code));\n     * } catch (e) {\n     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n     *     const cred = PhoneAuthProvider.credentialFromError(e);\n     *     await linkWithCredential(auth.currentUser, cred);\n     *   }\n     * }\n     *\n     * // At this point, auth.currentUser.phoneNumber === number.\n     * ```\n     *\n     * @param error - The error to generate a credential from.\n     */\n    static credentialFromError(error) {\n      return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        phoneNumber,\n        temporaryProof\n      } = tokenResponse;\n      if (phoneNumber && temporaryProof) {\n        return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);\n      }\n      return null;\n    }\n  }\n  /** Always set to {@link ProviderId}.PHONE. */\n  exports.P = PhoneAuthProvider;\n  PhoneAuthProvider.PROVIDER_ID = \"phone\" /* ProviderId.PHONE */;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  PhoneAuthProvider.PHONE_SIGN_IN_METHOD = \"phone\" /* SignInMethod.PHONE */;\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Chooses a popup/redirect resolver to use. This prefers the override (which\n   * is directly passed in), and falls back to the property set on the auth\n   * object. If neither are available, this function errors w/ an argument error.\n   */\n  function _withDefaultResolver(auth, resolverOverride) {\n    if (resolverOverride) {\n      return _getInstance(resolverOverride);\n    }\n    _assert(auth._popupRedirectResolver, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return auth._popupRedirectResolver;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class IdpCredential extends AuthCredential {\n    constructor(params) {\n      super(\"custom\" /* ProviderId.CUSTOM */, \"custom\" /* ProviderId.CUSTOM */);\n      this.params = params;\n    }\n    _getIdTokenResponse(auth) {\n      return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _linkToIdToken(auth, idToken) {\n      return signInWithIdp(auth, this._buildIdpRequest(idToken));\n    }\n    _getReauthenticationResolver(auth) {\n      return signInWithIdp(auth, this._buildIdpRequest());\n    }\n    _buildIdpRequest(idToken) {\n      const request = {\n        requestUri: this.params.requestUri,\n        sessionId: this.params.sessionId,\n        postBody: this.params.postBody,\n        tenantId: this.params.tenantId,\n        pendingToken: this.params.pendingToken,\n        returnSecureToken: true,\n        returnIdpCredential: true\n      };\n      if (idToken) {\n        request.idToken = idToken;\n      }\n      return request;\n    }\n  }\n  function _signIn(params) {\n    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);\n  }\n  function _reauth(params) {\n    const {\n      auth,\n      user\n    } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);\n  }\n  async function _link(params) {\n    const {\n      auth,\n      user\n    } = params;\n    _assert(user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return _link$1(user, new IdpCredential(params), params.bypassAuthState);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n   * events\n   */\n  class AbstractPopupRedirectOperation {\n    constructor(auth, filter, resolver, user, bypassAuthState = false) {\n      this.auth = auth;\n      this.resolver = resolver;\n      this.user = user;\n      this.bypassAuthState = bypassAuthState;\n      this.pendingPromise = null;\n      this.eventManager = null;\n      this.filter = Array.isArray(filter) ? filter : [filter];\n    }\n    execute() {\n      return new Promise(async (resolve, reject) => {\n        this.pendingPromise = {\n          resolve,\n          reject\n        };\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e);\n        }\n      });\n    }\n    async onAuthEvent(event) {\n      const {\n        urlResponse,\n        sessionId,\n        postBody,\n        tenantId,\n        error,\n        type\n      } = event;\n      if (error) {\n        this.reject(error);\n        return;\n      }\n      const params = {\n        auth: this.auth,\n        requestUri: urlResponse,\n        sessionId: sessionId,\n        tenantId: tenantId || undefined,\n        postBody: postBody || undefined,\n        user: this.user,\n        bypassAuthState: this.bypassAuthState\n      };\n      try {\n        this.resolve(await this.getIdpTask(type)(params));\n      } catch (e) {\n        this.reject(e);\n      }\n    }\n    onError(error) {\n      this.reject(error);\n    }\n    getIdpTask(type) {\n      switch (type) {\n        case \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */:\n        case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n          return _signIn;\n        case \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */:\n        case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n          return _link;\n        case \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */:\n        case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n          return _reauth;\n        default:\n          _fail(this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    resolve(cred) {\n      debugAssert(this.pendingPromise, 'Pending promise was never set');\n      this.pendingPromise.resolve(cred);\n      this.unregisterAndCleanUp();\n    }\n    reject(error) {\n      debugAssert(this.pendingPromise, 'Pending promise was never set');\n      this.pendingPromise.reject(error);\n      this.unregisterAndCleanUp();\n    }\n    unregisterAndCleanUp() {\n      if (this.eventManager) {\n        this.eventManager.unregisterConsumer(this);\n      }\n      this.pendingPromise = null;\n      this.cleanUp();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n  /**\n   * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n   *\n   * @remarks\n   * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n   * unsuccessful, returns an error object containing additional information about the error.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function signInWithPopup(auth, provider, resolver) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_createError(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    const action = new PopupOperation(authInternal, \"signInViaPopup\" /* AuthEventType.SIGN_IN_VIA_POPUP */, provider, resolverInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n   * OAuth flow.\n   *\n   * @remarks\n   * If the reauthentication is successful, the returned result will contain the user and the\n   * provider's credential.\n   *\n   * This method does not work in a Node.js environment or on any {@link User} signed in by\n   * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   * // Reauthenticate using a popup.\n   * await reauthenticateWithPopup(result.user, provider);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function reauthenticateWithPopup(user, provider, resolver) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_createError(userInternal.auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */));\n    }\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"reauthViaPopup\" /* AuthEventType.REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n   *\n   * @remarks\n   * If the linking is successful, the returned result will contain the user and the provider's credential.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using some other provider.\n   * const result = await signInWithEmailAndPassword(auth, email, password);\n   * // Link using a popup.\n   * const provider = new FacebookAuthProvider();\n   * await linkWithPopup(result.user, provider);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function linkWithPopup(user, provider, resolver) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    const action = new PopupOperation(userInternal.auth, \"linkViaPopup\" /* AuthEventType.LINK_VIA_POPUP */, provider, resolverInternal, userInternal);\n    return action.executeNotNull();\n  }\n  /**\n   * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n   * events\n   *\n   */\n  class PopupOperation extends AbstractPopupRedirectOperation {\n    constructor(auth, filter, provider, resolver, user) {\n      super(auth, filter, resolver, user);\n      this.provider = provider;\n      this.authWindow = null;\n      this.pollId = null;\n      if (PopupOperation.currentPopupAction) {\n        PopupOperation.currentPopupAction.cancel();\n      }\n      PopupOperation.currentPopupAction = this;\n    }\n    async executeNotNull() {\n      const result = await this.execute();\n      _assert(result, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return result;\n    }\n    async onExecution() {\n      debugAssert(this.filter.length === 1, 'Popup operations only handle one event');\n      const eventId = _generateEventId();\n      this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0],\n      // There's always one, see constructor\n      eventId);\n      this.authWindow.associatedEvent = eventId;\n      // Check for web storage support and origin validation _after_ the popup is\n      // loaded. These operations are slow (~1 second or so) Rather than\n      // waiting on them before opening the window, optimistically open the popup\n      // and check for storage support at the same time. If storage support is\n      // not available, this will cause the whole thing to reject properly. It\n      // will also close the popup, but since the promise has already rejected,\n      // the popup closed by user poll will reject into the void.\n      this.resolver._originValidation(this.auth).catch(e => {\n        this.reject(e);\n      });\n      this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n        if (!isSupported) {\n          this.reject(_createError(this.auth, \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));\n        }\n      });\n      // Handle user closure. Notice this does *not* use await\n      this.pollUserCancellation();\n    }\n    get eventId() {\n      return this.authWindow?.associatedEvent || null;\n    }\n    cancel() {\n      this.reject(_createError(this.auth, \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));\n    }\n    cleanUp() {\n      if (this.authWindow) {\n        this.authWindow.close();\n      }\n      if (this.pollId) {\n        window.clearTimeout(this.pollId);\n      }\n      this.authWindow = null;\n      this.pollId = null;\n      PopupOperation.currentPopupAction = null;\n    }\n    pollUserCancellation() {\n      const poll = () => {\n        if (this.authWindow?.window?.closed) {\n          // Make sure that there is sufficient time for whatever action to\n          // complete. The window could have closed but the sign in network\n          // call could still be in flight. This is specifically true for\n          // Firefox or if the opener is in an iframe, in which case the oauth\n          // helper closes the popup.\n          this.pollId = window.setTimeout(() => {\n            this.pollId = null;\n            this.reject(_createError(this.auth, \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));\n          }, 8000 /* _Timeout.AUTH_EVENT */);\n          return;\n        }\n        this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n      };\n      poll();\n    }\n  }\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  PopupOperation.currentPopupAction = null;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const PENDING_REDIRECT_KEY = 'pendingRedirect';\n  // We only get one redirect outcome for any one auth, so just store it\n  // in here.\n  const redirectOutcomeMap = new Map();\n  class RedirectAction extends AbstractPopupRedirectOperation {\n    constructor(auth, resolver, bypassAuthState = false) {\n      super(auth, [\"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, \"unknown\" /* AuthEventType.UNKNOWN */], resolver, undefined, bypassAuthState);\n      this.eventId = null;\n    }\n    /**\n     * Override the execute function; if we already have a redirect result, then\n     * just return it.\n     */\n    async execute() {\n      let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n      if (!readyOutcome) {\n        try {\n          const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);\n          const result = hasPendingRedirect ? await super.execute() : null;\n          readyOutcome = () => Promise.resolve(result);\n        } catch (e) {\n          readyOutcome = () => Promise.reject(e);\n        }\n        redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n      }\n      // If we're not bypassing auth state, the ready outcome should be set to\n      // null.\n      if (!this.bypassAuthState) {\n        redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n      }\n      return readyOutcome();\n    }\n    async onAuthEvent(event) {\n      if (event.type === \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {\n        return super.onAuthEvent(event);\n      } else if (event.type === \"unknown\" /* AuthEventType.UNKNOWN */) {\n        // This is a sentinel value indicating there's no pending redirect\n        this.resolve(null);\n        return;\n      }\n      if (event.eventId) {\n        const user = await this.auth._redirectUserForId(event.eventId);\n        if (user) {\n          this.user = user;\n          return super.onAuthEvent(event);\n        } else {\n          this.resolve(null);\n        }\n      }\n    }\n    async onExecution() {}\n    cleanUp() {}\n  }\n  async function _getAndClearPendingRedirectStatus(resolver, auth) {\n    const key = pendingRedirectKey(auth);\n    const persistence = resolverPersistence(resolver);\n    if (!(await persistence._isAvailable())) {\n      return false;\n    }\n    const hasPendingRedirect = (await persistence._get(key)) === 'true';\n    await persistence._remove(key);\n    return hasPendingRedirect;\n  }\n  async function _setPendingRedirectStatus(resolver, auth) {\n    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n  }\n  function _clearRedirectOutcomes() {\n    redirectOutcomeMap.clear();\n  }\n  function _overrideRedirectResult(auth, result) {\n    redirectOutcomeMap.set(auth._key(), result);\n  }\n  function resolverPersistence(resolver) {\n    return _getInstance(resolver._redirectPersistence);\n  }\n  function pendingRedirectKey(auth) {\n    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Authenticates a Firebase client using a full-page redirect flow.\n   *\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link signInWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // You can add additional scopes to the provider:\n   * provider.addScope('user_birthday');\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * // As this API can be used for sign-in, linking and reauthentication,\n   * // check the operationType to determine what triggered this redirect\n   * // operation.\n   * const operationType = result.operationType;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function signInWithRedirect(auth, provider, resolver) {\n    return _signInWithRedirect(auth, provider, resolver);\n  }\n  async function _signInWithRedirect(auth, provider, resolver) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    _assertInstanceOf(auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await authInternal._initializationPromise;\n    const resolverInternal = _withDefaultResolver(authInternal, resolver);\n    await _setPendingRedirectStatus(resolverInternal, authInternal);\n    return resolverInternal._openRedirect(authInternal, provider, \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */);\n  }\n  /**\n   * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link reauthenticateWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * const result = await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * // Reauthenticate using a redirect.\n   * await reauthenticateWithRedirect(result.user, provider);\n   * // This will again trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function reauthenticateWithRedirect(user, provider, resolver) {\n    return _reauthenticateWithRedirect(user, provider, resolver);\n  }\n  async function _reauthenticateWithRedirect(user, provider, resolver) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */, eventId);\n  }\n  /**\n   * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n   * @remarks\n   * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n   * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n   * | best practices} when using {@link linkWithRedirect}.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using some other provider.\n   * const result = await signInWithEmailAndPassword(auth, email, password);\n   * // Link using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * await linkWithRedirect(result.user, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * ```\n   *\n   * @param user - The user.\n   * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n   * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  function linkWithRedirect(user, provider, resolver) {\n    return _linkWithRedirect(user, provider, resolver);\n  }\n  async function _linkWithRedirect(user, provider, resolver) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n    // Wait for auth initialization to complete, this will process pending redirects and clear the\n    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n    // redirect and creating a PENDING_REDIRECT_KEY entry.\n    await userInternal.auth._initializationPromise;\n    // Allow the resolver to error before persisting the redirect user\n    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n    await _assertLinkedStatus(false, userInternal, provider.providerId);\n    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n    const eventId = await prepareUserForRedirect(userInternal);\n    return resolverInternal._openRedirect(userInternal.auth, provider, \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */, eventId);\n  }\n  /**\n   * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n   *\n   * @remarks\n   * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n   * error. If no redirect operation was called, returns `null`.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // You can add additional scopes to the provider:\n   * provider.addScope('user_birthday');\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * // As this API can be used for sign-in, linking and reauthentication,\n   * // check the operationType to determine what triggered this redirect\n   * // operation.\n   * const operationType = result.operationType;\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n   * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n   *\n   * @public\n   */\n  async function getRedirectResult(auth, resolver) {\n    await _castAuth(auth)._initializationPromise;\n    return _getRedirectResult(auth, resolver, false);\n  }\n  async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const resolver = _withDefaultResolver(authInternal, resolverExtern);\n    const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n    const result = await action.execute();\n    if (result && !bypassAuthState) {\n      delete result.user._redirectEventId;\n      await authInternal._persistUserIfCurrent(result.user);\n      await authInternal._setRedirectUser(null, resolverExtern);\n    }\n    return result;\n  }\n  async function prepareUserForRedirect(user) {\n    const eventId = _generateEventId(`${user.uid}:::`);\n    user._redirectEventId = eventId;\n    await user.auth._setRedirectUser(user);\n    await user.auth._persistUserIfCurrent(user);\n    return eventId;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // The amount of time to store the UIDs of seen events; this is\n  // set to 10 min by default\n  const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n  class AuthEventManager {\n    constructor(auth) {\n      this.auth = auth;\n      this.cachedEventUids = new Set();\n      this.consumers = new Set();\n      this.queuedRedirectEvent = null;\n      this.hasHandledPotentialRedirect = false;\n      this.lastProcessedEventTime = Date.now();\n    }\n    registerConsumer(authEventConsumer) {\n      this.consumers.add(authEventConsumer);\n      if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {\n        this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n        this.saveEventToCache(this.queuedRedirectEvent);\n        this.queuedRedirectEvent = null;\n      }\n    }\n    unregisterConsumer(authEventConsumer) {\n      this.consumers.delete(authEventConsumer);\n    }\n    onEvent(event) {\n      // Check if the event has already been handled\n      if (this.hasEventBeenHandled(event)) {\n        return false;\n      }\n      let handled = false;\n      this.consumers.forEach(consumer => {\n        if (this.isEventForConsumer(event, consumer)) {\n          handled = true;\n          this.sendToConsumer(event, consumer);\n          this.saveEventToCache(event);\n        }\n      });\n      if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n        // If we've already seen a redirect before, or this is a popup event,\n        // bail now\n        return handled;\n      }\n      this.hasHandledPotentialRedirect = true;\n      // If the redirect wasn't handled, hang on to it\n      if (!handled) {\n        this.queuedRedirectEvent = event;\n        handled = true;\n      }\n      return handled;\n    }\n    sendToConsumer(event, consumer) {\n      if (event.error && !isNullRedirectEvent(event)) {\n        const code = event.error.code?.split('auth/')[1] || \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */;\n        consumer.onError(_createError(this.auth, code));\n      } else {\n        consumer.onAuthEvent(event);\n      }\n    }\n    isEventForConsumer(event, consumer) {\n      const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;\n      return consumer.filter.includes(event.type) && eventIdMatches;\n    }\n    hasEventBeenHandled(event) {\n      if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {\n        this.cachedEventUids.clear();\n      }\n      return this.cachedEventUids.has(eventUid(event));\n    }\n    saveEventToCache(event) {\n      this.cachedEventUids.add(eventUid(event));\n      this.lastProcessedEventTime = Date.now();\n    }\n  }\n  exports.aE = AuthEventManager;\n  function eventUid(e) {\n    return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n  }\n  function isNullRedirectEvent({\n    type,\n    error\n  }) {\n    return type === \"unknown\" /* AuthEventType.UNKNOWN */ && error?.code === `auth/${\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */}`;\n  }\n  function isRedirectEvent(event) {\n    switch (event.type) {\n      case \"signInViaRedirect\" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:\n      case \"linkViaRedirect\" /* AuthEventType.LINK_VIA_REDIRECT */:\n      case \"reauthViaRedirect\" /* AuthEventType.REAUTH_VIA_REDIRECT */:\n        return true;\n      case \"unknown\" /* AuthEventType.UNKNOWN */:\n        return isNullRedirectEvent(event);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _getProjectConfig(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v1/projects\" /* Endpoint.GET_PROJECT_CONFIG */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n  const HTTP_REGEX = /^https?/;\n  async function _validateOrigin(auth) {\n    // Skip origin validation if we are in an emulated environment\n    if (auth.config.emulator) {\n      return;\n    }\n    const {\n      authorizedDomains\n    } = await _getProjectConfig(auth);\n    for (const domain of authorizedDomains) {\n      try {\n        if (matchDomain(domain)) {\n          return;\n        }\n      } catch {\n        // Do nothing if there's a URL error; just continue searching\n      }\n    }\n    // In the old SDK, this error also provides helpful messages.\n    _fail(auth, \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */);\n  }\n  function matchDomain(expected) {\n    const currentUrl = _getCurrentUrl();\n    const {\n      protocol,\n      hostname\n    } = new URL(currentUrl);\n    if (expected.startsWith('chrome-extension://')) {\n      const ceUrl = new URL(expected);\n      if (ceUrl.hostname === '' && hostname === '') {\n        // For some reason we're not parsing chrome URLs properly\n        return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');\n      }\n      return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n    }\n    if (!HTTP_REGEX.test(protocol)) {\n      return false;\n    }\n    if (IP_ADDRESS_REGEX.test(expected)) {\n      // The domain has to be exactly equal to the pattern, as an IP domain will\n      // only contain the IP, no extra character.\n      return hostname === expected;\n    }\n    // Dots in pattern should be escaped.\n    const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n    // Non ip address domains.\n    // domain.com = *.domain.com OR domain.com\n    const re = new RegExp('^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');\n    return re.test(hostname);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const NETWORK_TIMEOUT = new Delay(30000, 60000);\n  /**\n   * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n   * it will stop working after a retrial. This is a hack to fix this issue.\n   */\n  function resetUnloadedGapiModules() {\n    // Clear last failed gapi.load state to force next gapi.load to first\n    // load the failed gapi.iframes module.\n    // Get gapix.beacon context.\n    const beacon = _window().___jsl;\n    // Get current hint.\n    if (beacon?.H) {\n      // Get gapi hint.\n      for (const hint of Object.keys(beacon.H)) {\n        // Requested modules.\n        beacon.H[hint].r = beacon.H[hint].r || [];\n        // Loaded modules.\n        beacon.H[hint].L = beacon.H[hint].L || [];\n        // Set requested modules to a copy of the loaded modules.\n        beacon.H[hint].r = [...beacon.H[hint].L];\n        // Clear pending callbacks.\n        if (beacon.CP) {\n          for (let i = 0; i < beacon.CP.length; i++) {\n            // Remove all failed pending callbacks.\n            beacon.CP[i] = null;\n          }\n        }\n      }\n    }\n  }\n  function loadGapi(auth) {\n    return new Promise((resolve, reject) => {\n      // Function to run when gapi.load is ready.\n      function loadGapiIframe() {\n        // The developer may have tried to previously run gapi.load and failed.\n        // Run this to fix that.\n        resetUnloadedGapiModules();\n        gapi.load('gapi.iframes', {\n          callback: () => {\n            resolve(gapi.iframes.getContext());\n          },\n          ontimeout: () => {\n            // The above reset may be sufficient, but having this reset after\n            // failure ensures that if the developer calls gapi.load after the\n            // connection is re-established and before another attempt to embed\n            // the iframe, it would work and would not be broken because of our\n            // failed attempt.\n            // Timeout when gapi.iframes.Iframe not loaded.\n            resetUnloadedGapiModules();\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          },\n          timeout: NETWORK_TIMEOUT.get()\n        });\n      }\n      if (_window().gapi?.iframes?.Iframe) {\n        // If gapi.iframes.Iframe available, resolve.\n        resolve(gapi.iframes.getContext());\n      } else if (!!_window().gapi?.load) {\n        // Gapi loader ready, load gapi.iframes.\n        loadGapiIframe();\n      } else {\n        // Create a new iframe callback when this is called so as not to overwrite\n        // any previous defined callback. This happens if this method is called\n        // multiple times in parallel and could result in the later callback\n        // overwriting the previous one. This would end up with a iframe\n        // timeout.\n        const cbName = _generateCallbackName('iframefcb');\n        // GApi loader not available, dynamically load platform.js.\n        _window()[cbName] = () => {\n          // GApi loader should be ready.\n          if (!!gapi.load) {\n            loadGapiIframe();\n          } else {\n            // Gapi loader failed, throw error.\n            reject(_createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n          }\n        };\n        // Load GApi loader.\n        return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`).catch(e => reject(e));\n      }\n    }).catch(error => {\n      // Reset cached promise to allow for retrial.\n      cachedGApiLoader = null;\n      throw error;\n    });\n  }\n  let cachedGApiLoader = null;\n  function _loadGapi(auth) {\n    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n    return cachedGApiLoader;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const PING_TIMEOUT = new Delay(5000, 15000);\n  const IFRAME_PATH = '__/auth/iframe';\n  const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n  const IFRAME_ATTRIBUTES = {\n    style: {\n      position: 'absolute',\n      top: '-100px',\n      width: '1px',\n      height: '1px'\n    },\n    'aria-hidden': 'true',\n    tabindex: '-1'\n  };\n  // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n  // anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\n  const EID_FROM_APIHOST = new Map([[\"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */, 'p'],\n  // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'],\n  // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n  ]);\n  function getIframeUrl(auth) {\n    const config = auth.config;\n    _assert(config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n    const params = {\n      apiKey: config.apiKey,\n      appName: auth.name,\n      v: _app.SDK_VERSION\n    };\n    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n    if (eid) {\n      params.eid = eid;\n    }\n    const frameworks = auth._getFrameworks();\n    if (frameworks.length) {\n      params.fw = frameworks.join(',');\n    }\n    return `${url}?${(0, _util.querystring)(params).slice(1)}`;\n  }\n  async function _openIframe(auth) {\n    const context = await _loadGapi(auth);\n    const gapi = _window().gapi;\n    _assert(gapi, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return context.open({\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    }, iframe => new Promise(async (resolve, reject) => {\n      await iframe.restyle({\n        // Prevent iframe from closing on mouse out.\n        setHideOnLeave: false\n      });\n      const networkError = _createError(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);\n      // Confirm iframe is correctly loaded.\n      // To fallback on failure, set a timeout.\n      const networkErrorTimer = _window().setTimeout(() => {\n        reject(networkError);\n      }, PING_TIMEOUT.get());\n      // Clear timer and resolve pending iframe ready promise.\n      function clearTimerAndResolve() {\n        _window().clearTimeout(networkErrorTimer);\n        resolve(iframe);\n      }\n      // This returns an IThenable. However the reject part does not call\n      // when the iframe is not loaded.\n      iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n        reject(networkError);\n      });\n    }));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const BASE_POPUP_OPTIONS = {\n    location: 'yes',\n    resizable: 'yes',\n    statusbar: 'yes',\n    toolbar: 'no'\n  };\n  const DEFAULT_WIDTH = 500;\n  const DEFAULT_HEIGHT = 600;\n  const TARGET_BLANK = '_blank';\n  const FIREFOX_EMPTY_URL = 'http://localhost';\n  class AuthPopup {\n    constructor(window) {\n      this.window = window;\n      this.associatedEvent = null;\n    }\n    close() {\n      if (this.window) {\n        try {\n          this.window.close();\n        } catch (e) {}\n      }\n    }\n  }\n  exports.aP = AuthPopup;\n  function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n    let target = '';\n    const options = {\n      ...BASE_POPUP_OPTIONS,\n      width: width.toString(),\n      height: height.toString(),\n      top,\n      left\n    };\n    // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n    // specified, even though the popup is not necessarily blocked.\n    const ua = (0, _util.getUA)().toLowerCase();\n    if (name) {\n      target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n    }\n    if (_isFirefox(ua)) {\n      // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n      url = url || FIREFOX_EMPTY_URL;\n      // Firefox disables by default scrolling on popup windows, which can create\n      // issues when the user has many Google accounts, for instance.\n      options.scrollbars = 'yes';\n    }\n    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');\n    if (_isIOSStandalone(ua) && target !== '_self') {\n      openAsNewWindowIOS(url || '', target);\n      return new AuthPopup(null);\n    }\n    // about:blank getting sanitized causing browsers like IE/Edge to display\n    // brief error message before redirecting to handler.\n    const newWin = window.open(url || '', target, optionsString);\n    _assert(newWin, auth, \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */);\n    // Flaky on IE edge, encapsulate with a try and catch.\n    try {\n      newWin.focus();\n    } catch (e) {}\n    return new AuthPopup(newWin);\n  }\n  function openAsNewWindowIOS(url, target) {\n    const el = document.createElement('a');\n    el.href = url;\n    el.target = target;\n    const click = document.createEvent('MouseEvent');\n    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);\n    el.dispatchEvent(click);\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * URL for Authentication widget which will initiate the OAuth handshake\n   *\n   * @internal\n   */\n  const WIDGET_PATH = '__/auth/handler';\n  /**\n   * URL for emulated environment\n   *\n   * @internal\n   */\n  const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n  /**\n   * Fragment name for the App Check token that gets passed to the widget\n   *\n   * @internal\n   */\n  const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n  async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {\n    _assert(auth.config.authDomain, auth, \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);\n    _assert(auth.config.apiKey, auth, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */);\n    const params = {\n      apiKey: auth.config.apiKey,\n      appName: auth.name,\n      authType,\n      redirectUrl,\n      v: _app.SDK_VERSION,\n      eventId\n    };\n    if (provider instanceof FederatedAuthProvider) {\n      provider.setDefaultLanguage(auth.languageCode);\n      params.providerId = provider.providerId || '';\n      if (!(0, _util.isEmpty)(provider.getCustomParameters())) {\n        params.customParameters = JSON.stringify(provider.getCustomParameters());\n      }\n      // TODO set additionalParams from the provider as well?\n      for (const [key, value] of Object.entries(additionalParams || {})) {\n        params[key] = value;\n      }\n    }\n    if (provider instanceof BaseOAuthProvider) {\n      const scopes = provider.getScopes().filter(scope => scope !== '');\n      if (scopes.length > 0) {\n        params.scopes = scopes.join(',');\n      }\n    }\n    if (auth.tenantId) {\n      params.tid = auth.tenantId;\n    }\n    // TODO: maybe set eid as endpointId\n    // TODO: maybe set fw as Frameworks.join(\",\")\n    const paramsDict = params;\n    for (const key of Object.keys(paramsDict)) {\n      if (paramsDict[key] === undefined) {\n        delete paramsDict[key];\n      }\n    }\n    // Sets the App Check token to pass to the widget\n    const appCheckToken = await auth._getAppCheckToken();\n    const appCheckTokenFragment = appCheckToken ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';\n    // Start at index 1 to skip the leading '&' in the query string\n    return `${getHandlerBase(auth)}?${(0, _util.querystring)(paramsDict).slice(1)}${appCheckTokenFragment}`;\n  }\n  function getHandlerBase({\n    config\n  }) {\n    if (!config.emulator) {\n      return `https://${config.authDomain}/${WIDGET_PATH}`;\n    }\n    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The special web storage event\n   *\n   */\n  const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n  class BrowserPopupRedirectResolver {\n    constructor() {\n      this.eventManagers = {};\n      this.iframes = {};\n      this.originValidationPromises = {};\n      this._redirectPersistence = browserSessionPersistence;\n      this._completeRedirectFn = _getRedirectResult;\n      this._overrideRedirectResult = _overrideRedirectResult;\n    }\n    // Wrapping in async even though we don't await anywhere in order\n    // to make sure errors are raised as promise rejections\n    async _openPopup(auth, provider, authType, eventId) {\n      debugAssert(this.eventManagers[auth._key()]?.manager, '_initialize() not called before _openPopup()');\n      const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n      return _open(auth, url, _generateEventId());\n    }\n    async _openRedirect(auth, provider, authType, eventId) {\n      await this._originValidation(auth);\n      const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);\n      _setWindowLocation(url);\n      return new Promise(() => {});\n    }\n    _initialize(auth) {\n      const key = auth._key();\n      if (this.eventManagers[key]) {\n        const {\n          manager,\n          promise\n        } = this.eventManagers[key];\n        if (manager) {\n          return Promise.resolve(manager);\n        } else {\n          debugAssert(promise, 'If manager is not set, promise should be');\n          return promise;\n        }\n      }\n      const promise = this.initAndGetManager(auth);\n      this.eventManagers[key] = {\n        promise\n      };\n      // If the promise is rejected, the key should be removed so that the\n      // operation can be retried later.\n      promise.catch(() => {\n        delete this.eventManagers[key];\n      });\n      return promise;\n    }\n    async initAndGetManager(auth) {\n      const iframe = await _openIframe(auth);\n      const manager = new AuthEventManager(auth);\n      iframe.register('authEvent', iframeEvent => {\n        _assert(iframeEvent?.authEvent, auth, \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */);\n        // TODO: Consider splitting redirect and popup events earlier on\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return {\n          status: handled ? \"ACK\" /* GapiOutcome.ACK */ : \"ERROR\" /* GapiOutcome.ERROR */\n        };\n      }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n      this.eventManagers[auth._key()] = {\n        manager\n      };\n      this.iframes[auth._key()] = iframe;\n      return manager;\n    }\n    _isIframeWebStorageSupported(auth, cb) {\n      const iframe = this.iframes[auth._key()];\n      iframe.send(WEB_STORAGE_SUPPORT_KEY, {\n        type: WEB_STORAGE_SUPPORT_KEY\n      }, result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n        _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);\n    }\n    _originValidation(auth) {\n      const key = auth._key();\n      if (!this.originValidationPromises[key]) {\n        this.originValidationPromises[key] = _validateOrigin(auth);\n      }\n      return this.originValidationPromises[key];\n    }\n    get _shouldInitProactively() {\n      // Mobile browsers and Safari need to optimistically initialize\n      return _isMobileBrowser() || _isSafari() || _isIOS();\n    }\n  }\n  /**\n   * An implementation of {@link PopupRedirectResolver} suitable for browser\n   * based applications.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @public\n   */\n  const browserPopupRedirectResolver = exports.m = BrowserPopupRedirectResolver;\n  class MultiFactorAssertionImpl {\n    constructor(factorId) {\n      this.factorId = factorId;\n    }\n    _process(auth, session, displayName) {\n      switch (session.type) {\n        case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n          return this._finalizeEnroll(auth, session.credential, displayName);\n        case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n          return this._finalizeSignIn(auth, session.credential);\n        default:\n          return debugFail('unexpected MultiFactorSessionType');\n      }\n    }\n  }\n\n  /**\n   * {@inheritdoc PhoneMultiFactorAssertion}\n   *\n   * @public\n   */\n  class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(credential) {\n      super(\"phone\" /* FactorId.PHONE */);\n      this.credential = credential;\n    }\n    /** @internal */\n    static _fromCredential(credential) {\n      return new PhoneMultiFactorAssertionImpl(credential);\n    }\n    /** @internal */\n    _finalizeEnroll(auth, idToken, displayName) {\n      return finalizeEnrollPhoneMfa(auth, {\n        idToken,\n        displayName,\n        phoneVerificationInfo: this.credential._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _finalizeSignIn(auth, mfaPendingCredential) {\n      return finalizeSignInPhoneMfa(auth, {\n        mfaPendingCredential,\n        phoneVerificationInfo: this.credential._makeVerificationRequest()\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link PhoneMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class PhoneMultiFactorGenerator {\n    constructor() {}\n    /**\n     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n     *\n     * @remarks\n     * This method does not work in a Node.js environment.\n     *\n     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n     * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}\n     */\n    static assertion(credential) {\n      return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n    }\n  }\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  exports.n = PhoneMultiFactorGenerator;\n  PhoneMultiFactorGenerator.FACTOR_ID = 'phone';\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class TotpMultiFactorGenerator {\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n     * the TOTP (time-based one-time password) second factor.\n     * This assertion is used to complete enrollment in TOTP second factor.\n     *\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorUser.enroll}.\n     */\n    static assertionForEnrollment(secret, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n     * This assertion is used to complete signIn with TOTP as the second factor.\n     *\n     * @param enrollmentId identifies the enrolled TOTP second factor.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}.\n     */\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\n     * Used for generating a QR code URL or inputting into a TOTP app.\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\n     *\n     * @param session The {@link MultiFactorSession} that the user is part of.\n     * @returns A promise to {@link TotpSecret}.\n     */\n    static async generateSecret(session) {\n      const mfaSession = session;\n      _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n        idToken: mfaSession.credential,\n        totpEnrollmentInfo: {}\n      });\n      return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n    }\n  }\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  exports.T = TotpMultiFactorGenerator;\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(otp, enrollmentId, secret) {\n      super(\"totp\" /* FactorId.TOTP */);\n      this.otp = otp;\n      this.enrollmentId = enrollmentId;\n      this.secret = secret;\n    }\n    /** @internal */\n    static _fromSecret(secret, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n    static _fromEnrollmentId(enrollmentId, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n    /** @internal */\n    async _finalizeEnroll(auth, idToken, displayName) {\n      _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return finalizeEnrollTotpMfa(auth, {\n        idToken,\n        displayName,\n        totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n      });\n    }\n    /** @internal */\n    async _finalizeSignIn(auth, mfaPendingCredential) {\n      _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      const totpVerificationInfo = {\n        verificationCode: this.otp\n      };\n      return finalizeSignInTotpMfa(auth, {\n        mfaPendingCredential,\n        mfaEnrollmentId: this.enrollmentId,\n        totpVerificationInfo\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  class TotpSecret {\n    // The public members are declared outside the constructor so the docs can be generated.\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n      return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n    /** @internal */\n    _makeTotpVerificationInfo(otp) {\n      return {\n        sessionInfo: this.sessionInfo,\n        verificationCode: otp\n      };\n    }\n    /**\n     * Returns a QR code URL as described in\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n     *\n     * @param accountName the name of the account/app along with a user identifier.\n     * @param issuer issuer of the TOTP (likely the app name).\n     * @returns A QR code URL string.\n     */\n    generateQrCodeUrl(accountName, issuer) {\n      let useDefaults = false;\n      if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n        useDefaults = true;\n      }\n      if (useDefaults) {\n        if (_isEmptyString(accountName)) {\n          accountName = this.auth.currentUser?.email || 'unknownuser';\n        }\n        if (_isEmptyString(issuer)) {\n          issuer = this.auth.name;\n        }\n      }\n      return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n    }\n  }\n  /** @internal */\n  exports.o = TotpSecret;\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthInterop {\n    constructor(auth) {\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    getUid() {\n      this.assertAuthConfigured();\n      return this.auth.currentUser?.uid || null;\n    }\n    async getToken(forceRefresh) {\n      this.assertAuthConfigured();\n      await this.auth._initializationPromise;\n      if (!this.auth.currentUser) {\n        return null;\n      }\n      const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n      return {\n        accessToken\n      };\n    }\n    addAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      if (this.internalListeners.has(listener)) {\n        return;\n      }\n      const unsubscribe = this.auth.onIdTokenChanged(user => {\n        listener(user?.stsTokenManager.accessToken || null);\n      });\n      this.internalListeners.set(listener, unsubscribe);\n      this.updateProactiveRefresh();\n    }\n    removeAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      const unsubscribe = this.internalListeners.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      this.internalListeners.delete(listener);\n      unsubscribe();\n      this.updateProactiveRefresh();\n    }\n    assertAuthConfigured() {\n      _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n    updateProactiveRefresh() {\n      if (this.internalListeners.size > 0) {\n        this.auth._startProactiveRefresh();\n      } else {\n        this.auth._stopProactiveRefresh();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    (0, _app._registerComponent)(new _component.Component(\"auth\" /* _ComponentName.AUTH */, (container, {\n      options: deps\n    }) => {\n      const app = container.getProvider('app').getImmediate();\n      const heartbeatServiceProvider = container.getProvider('heartbeat');\n      const appCheckServiceProvider = container.getProvider('app-check-internal');\n      const {\n        apiKey,\n        authDomain\n      } = app.options;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    (0, _app._registerComponent)(new _component.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    (0, _app.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    (0, _app.registerVersion)(name, version, 'esm2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\n  const authIdTokenMaxAge = (0, _util.getExperimentalSetting)('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n  let lastPostedIdToken = null;\n  const mintCookieFactory = url => async user => {\n    const idTokenResult = user && (await user.getIdTokenResult());\n    const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;\n    if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n      return;\n    }\n    // Specifically trip null => undefined when logged out, to delete any existing cookie\n    const idToken = idTokenResult?.token;\n    if (lastPostedIdToken === idToken) {\n      return;\n    }\n    lastPostedIdToken = idToken;\n    await fetch(url, {\n      method: idToken ? 'POST' : 'DELETE',\n      headers: idToken ? {\n        'Authorization': `Bearer ${idToken}`\n      } : {}\n    });\n  };\n  /**\n   * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n   * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n   *\n   * @param app - The Firebase App.\n   *\n   * @public\n   */\n  function getAuth(app = (0, _app.getApp)()) {\n    const provider = (0, _app._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      return provider.getImmediate();\n    }\n    const auth = initializeAuth(app, {\n      popupRedirectResolver: browserPopupRedirectResolver,\n      persistence: [indexedDBLocalPersistence, browserLocalPersistence, browserSessionPersistence]\n    });\n    const authTokenSyncPath = (0, _util.getExperimentalSetting)('authTokenSyncURL');\n    // Only do the Cookie exchange in a secure context\n    if (authTokenSyncPath && typeof isSecureContext === 'boolean' && isSecureContext) {\n      // Don't allow urls (XSS possibility), only paths on the same domain\n      const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n      if (location.origin === authTokenSyncUrl.origin) {\n        const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n        beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));\n        onIdTokenChanged(auth, user => mintCookie(user));\n      }\n    }\n    const authEmulatorHost = (0, _util.getDefaultEmulatorHost)('auth');\n    if (authEmulatorHost) {\n      connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n    }\n    return auth;\n  }\n  function getScriptParentElement() {\n    return document.getElementsByTagName('head')?.[0] ?? document;\n  }\n  _setExternalJSProvider({\n    loadJS(url) {\n      // TODO: consider adding timeout support & cancellation\n      return new Promise((resolve, reject) => {\n        const el = document.createElement('script');\n        el.setAttribute('src', url);\n        el.onload = resolve;\n        el.onerror = e => {\n          const error = _createError(\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          error.customData = e;\n          reject(error);\n        };\n        el.type = 'text/javascript';\n        el.charset = 'UTF-8';\n        getScriptParentElement().appendChild(el);\n      });\n    },\n    gapiScript: 'https://apis.google.com/js/api.js',\n    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='\n  });\n  registerAuth(\"Browser\" /* ClientPlatform.BROWSER */);\n});","lineCount":11172,"map":[[88,2,1,0],[88,6,1,0,"_app"],[88,10,1,0],[88,13,1,0,"require"],[88,20,1,0],[88,21,1,0,"_dependencyMap"],[88,35,1,0],[89,2,2,0],[89,6,2,0,"_util"],[89,11,2,0],[89,14,2,0,"require"],[89,21,2,0],[89,22,2,0,"_dependencyMap"],[89,36,2,0],[90,2,3,0],[90,6,3,0,"_logger"],[90,13,3,0],[90,16,3,0,"require"],[90,23,3,0],[90,24,3,0,"_dependencyMap"],[90,38,3,0],[91,2,4,0],[91,6,4,0,"_component"],[91,16,4,0],[91,19,4,0,"require"],[91,26,4,0],[91,27,4,0,"_dependencyMap"],[91,41,4,0],[92,2,6,0],[93,0,7,0],[94,0,8,0],[95,0,9,0],[96,0,10,0],[97,0,11,0],[98,0,12,0],[99,0,13,0],[100,0,14,0],[101,0,15,0],[102,0,16,0],[103,0,17,0],[104,0,18,0],[105,0,19,0],[106,0,20,0],[107,0,21,0],[108,2,22,0],[109,0,23,0],[110,0,24,0],[111,0,25,0],[112,0,26,0],[113,2,27,0],[113,8,27,6,"FactorId"],[113,16,27,14],[113,19,27,14,"exports"],[113,26,27,14],[113,27,27,14,"F"],[113,28,27,14],[113,31,27,17],[114,4,28,4],[115,4,29,4,"PHONE"],[115,9,29,9],[115,11,29,11],[115,18,29,18],[116,4,30,4,"TOTP"],[116,8,30,8],[116,10,30,10],[117,2,31,0],[117,3,31,1],[118,2,32,0],[119,0,33,0],[120,0,34,0],[121,0,35,0],[122,0,36,0],[123,2,37,0],[123,8,37,6,"ProviderId"],[123,18,37,16],[123,21,37,16,"exports"],[123,28,37,16],[123,29,37,16,"q"],[123,30,37,16],[123,33,37,19],[124,4,38,4],[125,4,39,4,"FACEBOOK"],[125,12,39,12],[125,14,39,14],[125,28,39,28],[126,4,40,4],[127,4,41,4,"GITHUB"],[127,10,41,10],[127,12,41,12],[127,24,41,24],[128,4,42,4],[129,4,43,4,"GOOGLE"],[129,10,43,10],[129,12,43,12],[129,24,43,24],[130,4,44,4],[131,4,45,4,"PASSWORD"],[131,12,45,12],[131,14,45,14],[131,24,45,24],[132,4,46,4],[133,4,47,4,"PHONE"],[133,9,47,9],[133,11,47,11],[133,18,47,18],[134,4,48,4],[135,4,49,4,"TWITTER"],[135,11,49,11],[135,13,49,13],[136,2,50,0],[136,3,50,1],[137,2,51,0],[138,0,52,0],[139,0,53,0],[140,0,54,0],[141,0,55,0],[142,2,56,0],[142,8,56,6,"SignInMethod"],[142,20,56,18],[142,23,56,18,"exports"],[142,30,56,18],[142,31,56,18,"S"],[142,32,56,18],[142,35,56,21],[143,4,57,4],[144,4,58,4,"EMAIL_LINK"],[144,14,58,14],[144,16,58,16],[144,27,58,27],[145,4,59,4],[146,4,60,4,"EMAIL_PASSWORD"],[146,18,60,18],[146,20,60,20],[146,30,60,30],[147,4,61,4],[148,4,62,4,"FACEBOOK"],[148,12,62,12],[148,14,62,14],[148,28,62,28],[149,4,63,4],[150,4,64,4,"GITHUB"],[150,10,64,10],[150,12,64,12],[150,24,64,24],[151,4,65,4],[152,4,66,4,"GOOGLE"],[152,10,66,10],[152,12,66,12],[152,24,66,24],[153,4,67,4],[154,4,68,4,"PHONE"],[154,9,68,9],[154,11,68,11],[154,18,68,18],[155,4,69,4],[156,4,70,4,"TWITTER"],[156,11,70,11],[156,13,70,13],[157,2,71,0],[157,3,71,1],[158,2,72,0],[159,0,73,0],[160,0,74,0],[161,0,75,0],[162,0,76,0],[163,2,77,0],[163,8,77,6,"OperationType"],[163,21,77,19],[163,24,77,19,"exports"],[163,31,77,19],[163,32,77,19,"O"],[163,33,77,19],[163,36,77,22],[164,4,78,4],[165,4,79,4,"LINK"],[165,8,79,8],[165,10,79,10],[165,16,79,16],[166,4,80,4],[167,4,81,4,"REAUTHENTICATE"],[167,18,81,18],[167,20,81,20],[167,36,81,36],[168,4,82,4],[169,4,83,4,"SIGN_IN"],[169,11,83,11],[169,13,83,13],[170,2,84,0],[170,3,84,1],[171,2,85,0],[172,0,86,0],[173,0,87,0],[174,0,88,0],[175,0,89,0],[176,2,90,0],[176,8,90,6,"ActionCodeOperation"],[176,27,90,25],[176,30,90,25,"exports"],[176,37,90,25],[176,38,90,25,"A"],[176,39,90,25],[176,42,90,28],[177,4,91,4],[178,4,92,4,"EMAIL_SIGNIN"],[178,16,92,16],[178,18,92,18],[178,32,92,32],[179,4,93,4],[180,4,94,4,"PASSWORD_RESET"],[180,18,94,18],[180,20,94,20],[180,36,94,36],[181,4,95,4],[182,4,96,4,"RECOVER_EMAIL"],[182,17,96,17],[182,19,96,19],[182,34,96,34],[183,4,97,4],[184,4,98,4,"REVERT_SECOND_FACTOR_ADDITION"],[184,33,98,33],[184,35,98,35],[184,66,98,66],[185,4,99,4],[186,4,100,4,"VERIFY_AND_CHANGE_EMAIL"],[186,27,100,27],[186,29,100,29],[186,54,100,54],[187,4,101,4],[188,4,102,4,"VERIFY_EMAIL"],[188,16,102,16],[188,18,102,18],[189,2,103,0],[189,3,103,1],[191,2,105,0],[192,0,106,0],[193,0,107,0],[194,0,108,0],[195,0,109,0],[196,0,110,0],[197,0,111,0],[198,0,112,0],[199,0,113,0],[200,0,114,0],[201,0,115,0],[202,0,116,0],[203,0,117,0],[204,0,118,0],[205,0,119,0],[206,0,120,0],[207,2,121,0],[207,11,121,9,"_debugErrorMap"],[207,25,121,23,"_debugErrorMap"],[207,26,121,23],[207,28,121,26],[208,4,122,4],[208,11,122,11],[209,6,123,8],[209,7,123,9],[209,35,123,37],[209,36,123,38],[209,79,123,81],[209,133,123,135],[210,6,124,8],[210,7,124,9],[210,23,124,25],[210,24,124,26],[210,61,124,63],[210,63,124,65],[211,6,125,8],[211,7,125,9],[211,27,125,29],[211,28,125,30],[211,69,125,71],[211,132,125,134],[211,135,126,12],[211,206,126,83],[211,209,127,12],[211,267,127,70],[212,6,128,8],[212,7,128,9],[212,26,128,28],[212,27,128,29],[212,67,128,69],[212,135,128,137],[212,138,129,12],[212,208,129,82],[212,211,130,12],[212,225,130,26],[213,6,131,8],[213,7,131,9],[213,29,131,31],[213,30,131,32],[213,73,131,75],[213,141,131,143],[213,144,132,12],[213,216,132,84],[213,219,133,12],[213,244,133,37],[214,6,134,8],[214,7,134,9],[214,21,134,23],[214,22,134,24],[214,57,134,59],[214,129,134,131],[214,132,135,12],[214,140,135,20],[215,6,136,8],[215,7,136,9],[215,26,136,28],[215,27,136,29],[215,67,136,69],[215,100,136,102],[216,6,137,8],[216,7,137,9],[216,25,137,27],[216,26,137,28],[216,65,137,67],[216,97,137,99],[217,6,138,8],[217,7,138,9],[217,34,138,36],[217,35,138,37],[217,83,138,85],[217,153,138,155],[218,6,139,8],[218,7,139,9],[218,30,139,32],[218,31,139,33],[218,73,139,75],[218,128,139,130],[219,6,140,8],[219,7,140,9],[219,30,140,32],[219,31,140,33],[219,84,140,86],[219,157,140,159],[219,160,141,12],[219,197,141,49],[220,6,142,8],[220,7,142,9],[220,46,142,48],[220,47,142,49],[220,100,142,102],[220,180,142,182],[220,183,143,12],[220,258,143,87],[220,261,144,12],[220,295,144,46],[221,6,145,8],[221,7,145,9],[221,35,145,37],[221,36,145,38],[221,85,145,87],[221,168,145,170],[221,171,146,12],[221,184,146,25],[222,6,147,8],[222,7,147,9],[222,40,147,42],[222,41,147,43],[222,95,147,97],[222,150,147,152],[223,6,148,8],[223,7,148,9],[223,29,148,31],[223,30,148,32],[223,65,148,67],[223,122,148,124],[224,6,149,8],[224,7,149,9],[224,31,149,33],[224,32,149,34],[224,77,149,79],[224,148,149,150],[224,151,150,12],[224,210,150,71],[224,213,151,12],[224,246,151,45],[225,6,152,8],[225,7,152,9],[225,28,152,30],[225,29,152,31],[225,68,152,70],[225,98,152,100],[226,6,153,8],[226,7,153,9],[226,32,153,34],[226,33,153,35],[226,77,153,79],[226,159,153,161],[227,6,154,8],[227,7,154,9],[227,23,154,25],[227,24,154,26],[227,61,154,63],[227,98,154,100],[228,6,155,8],[228,7,155,9],[228,31,155,33],[228,32,155,34],[228,77,155,79],[228,151,155,153],[228,154,156,12],[228,215,156,73],[229,6,157,8],[229,7,157,9],[229,23,157,25],[229,24,157,26],[229,61,157,63],[229,131,157,133],[230,6,158,8],[230,7,158,9],[230,27,158,29],[230,28,158,30],[230,63,158,65],[230,134,158,136],[230,137,159,12],[230,208,159,83],[230,211,160,12],[230,254,160,55],[231,6,161,8],[231,7,161,9],[231,27,161,29],[231,28,161,30],[231,69,161,71],[231,106,161,108],[232,6,162,8],[232,7,162,9],[232,34,162,36],[232,35,162,37],[232,70,162,72],[232,142,162,144],[232,145,163,12],[232,219,163,86],[232,222,164,12],[232,263,164,53],[233,6,165,8],[233,7,165,9],[233,29,165,31],[233,30,165,32],[233,73,165,75],[233,127,165,129],[234,6,166,8],[234,7,166,9],[234,38,166,40],[234,39,166,41],[234,91,166,93],[234,166,166,168],[234,169,167,12],[234,229,167,72],[234,232,168,12],[234,293,168,73],[234,296,169,12],[234,329,169,45],[235,6,170,8],[235,7,170,9],[235,29,170,31],[235,30,170,32],[235,73,170,75],[235,144,170,146],[236,6,171,8],[236,7,171,9],[236,36,171,38],[236,37,171,39],[236,87,171,89],[236,178,171,180],[237,6,172,8],[237,7,172,9],[237,22,172,24],[237,23,172,25],[237,59,172,61],[237,98,172,100],[238,6,173,8],[238,7,173,9],[238,32,173,34],[238,33,173,35],[238,79,173,81],[238,147,173,149],[239,6,174,8],[239,7,174,9],[239,24,174,26],[239,25,174,27],[239,63,174,65],[239,132,174,134],[240,6,175,8],[240,7,175,9],[240,26,175,28],[240,27,175,29],[240,67,175,69],[240,116,175,118],[241,6,176,8],[241,7,176,9],[241,27,176,29],[241,28,176,30],[241,69,176,71],[241,139,176,141],[242,6,177,8],[242,7,177,9],[242,32,177,34],[242,33,177,35],[242,79,177,81],[242,173,177,175],[242,176,178,12],[242,258,178,94],[243,6,179,8],[243,7,179,9],[243,37,179,39],[243,38,179,40],[243,80,179,82],[243,160,179,162],[244,6,180,8],[244,7,180,9],[244,31,180,33],[244,32,180,34],[244,77,180,79],[244,149,180,151],[244,152,181,12],[244,184,181,44],[245,6,182,8],[245,7,182,9],[245,32,182,34],[245,33,182,35],[245,79,182,81],[245,150,182,152],[245,153,183,12],[245,173,183,32],[246,6,184,8],[246,7,184,9],[246,28,184,30],[246,29,184,31],[246,66,184,68],[246,137,184,139],[246,140,185,12],[246,213,185,85],[247,6,186,8],[247,7,186,9],[247,28,186,30],[247,29,186,31],[247,68,186,70],[247,140,186,142],[247,143,187,12],[247,179,187,48],[248,6,188,8],[248,7,188,9],[248,23,188,25],[248,24,188,26],[248,63,188,65],[248,126,188,128],[249,6,189,8],[249,7,189,9],[249,33,189,35],[249,34,189,36],[249,76,189,78],[249,159,189,161],[250,6,190,8],[250,7,190,9],[250,29,190,31],[250,30,190,32],[250,73,190,75],[250,146,190,148],[250,149,191,12],[250,220,191,83],[250,223,192,12],[250,294,192,83],[250,297,193,12],[250,327,193,42],[251,6,194,8],[251,7,194,9],[251,28,194,30],[251,29,194,31],[251,71,194,73],[251,110,194,112],[252,6,195,8],[252,7,195,9],[252,32,195,34],[252,33,195,35],[252,79,195,81],[252,151,195,153],[252,154,196,12],[252,191,196,49],[253,6,197,8],[253,7,197,9],[253,23,197,25],[253,24,197,26],[253,61,197,63],[253,153,197,155],[253,156,198,12],[253,238,198,94],[254,6,199,8],[254,7,199,9],[254,32,199,34],[254,33,199,35],[254,76,199,78],[254,150,199,152],[255,6,200,8],[255,7,200,9],[255,26,200,28],[255,27,200,29],[255,67,200,69],[255,110,200,112],[256,6,201,8],[256,7,201,9],[256,22,201,24],[256,23,201,25],[256,59,201,61],[256,118,201,120],[257,6,202,8],[257,7,202,9],[257,33,202,35],[257,34,202,36],[257,85,202,87],[257,175,202,177],[258,6,203,8],[258,7,203,9],[258,36,203,38],[258,37,203,39],[258,79,203,81],[258,150,203,152],[258,153,204,12],[258,209,204,68],[259,6,205,8],[259,7,205,9],[259,31,205,33],[259,32,205,34],[259,77,205,79],[259,145,205,147],[259,148,206,12],[259,209,206,73],[260,6,207,8],[260,7,207,9],[260,34,207,36],[260,35,207,37],[260,70,207,72],[260,146,207,148],[261,6,208,8],[261,7,208,9],[261,29,208,31],[261,30,208,32],[261,73,208,75],[261,122,208,124],[262,6,209,8],[262,7,209,9],[262,29,209,31],[262,30,209,32],[262,73,209,75],[262,110,209,112],[263,6,210,8],[263,7,210,9],[263,30,210,32],[263,31,210,33],[263,75,210,77],[263,142,210,144],[264,6,211,8],[264,7,211,9],[264,33,211,35],[264,34,211,36],[264,81,211,83],[264,149,211,151],[264,152,212,12],[264,225,212,85],[264,228,213,12],[264,254,213,38],[265,6,214,8],[265,7,214,9],[265,25,214,27],[265,26,214,28],[265,65,214,67],[265,104,214,106],[266,6,215,8],[266,7,215,9],[266,34,215,36],[266,35,215,37],[266,74,215,76],[266,116,215,118],[267,6,216,8],[267,7,216,9],[267,37,216,39],[267,38,216,40],[267,80,216,82],[267,146,216,148],[268,6,217,8],[268,7,217,9],[268,29,217,31],[268,30,217,32],[268,73,217,75],[268,144,217,146],[269,6,218,8],[269,7,218,9],[269,32,218,34],[269,33,218,35],[269,76,218,78],[269,146,218,148],[270,6,219,8],[270,7,219,9],[270,20,219,22],[270,21,219,23],[270,60,219,62],[270,108,219,110],[271,6,220,8],[271,7,220,9],[271,36,220,38],[271,37,220,39],[271,78,220,80],[271,152,220,154],[272,6,221,8],[272,7,221,9],[272,35,221,37],[272,36,221,38],[272,71,221,73],[272,143,221,145],[273,6,222,8],[273,7,222,9],[273,49,222,51],[273,50,222,52],[273,90,222,92],[273,160,222,162],[273,163,223,12],[273,232,223,81],[273,235,224,12],[273,251,224,28],[274,6,225,8],[274,7,225,9],[274,31,225,33],[274,32,225,34],[274,77,225,79],[274,174,225,176],[275,6,226,8],[275,7,226,9],[275,22,226,24],[275,23,226,25],[275,59,226,61],[275,96,226,98],[276,6,227,8],[276,7,227,9],[276,25,227,27],[276,26,227,28],[276,65,227,67],[276,125,227,127],[277,6,228,8],[277,7,228,9],[277,18,228,20],[277,19,228,21],[277,51,228,53],[277,124,228,126],[277,127,229,12],[277,161,229,46],[278,6,230,8],[278,7,230,9],[278,30,230,32],[278,31,230,33],[278,75,230,77],[278,143,230,145],[278,146,231,12],[278,219,231,85],[278,222,232,12],[278,237,232,27],[279,6,233,8],[279,7,233,9],[279,52,233,54],[279,53,233,55],[279,99,233,101],[279,172,233,174],[279,175,234,12],[279,248,234,85],[279,251,235,12],[279,286,235,47],[280,6,236,8],[280,7,236,9],[280,22,236,24],[280,23,236,25],[280,59,236,61],[280,150,236,152],[281,6,237,8],[281,7,237,9],[281,29,237,31],[281,30,237,32],[281,73,237,75],[281,145,237,147],[282,6,238,8],[282,7,238,9],[282,32,238,34],[282,33,238,35],[282,79,238,81],[282,144,238,146],[283,6,239,8],[283,7,239,9],[283,23,239,25],[283,24,239,26],[283,61,239,63],[283,120,239,122],[284,6,240,8],[284,7,240,9],[284,35,240,37],[284,36,240,38],[284,85,240,87],[284,159,240,161],[285,6,241,8],[285,7,241,9],[285,35,241,37],[285,36,241,38],[285,85,241,87],[285,135,241,137],[286,6,242,8],[286,7,242,9],[286,28,242,30],[286,29,242,31],[286,71,242,73],[286,131,242,133],[287,6,243,8],[287,7,243,9],[287,37,243,39],[287,38,243,40],[287,91,243,93],[287,147,243,149],[288,6,244,8],[288,7,244,9],[288,45,244,47],[288,46,244,48],[288,97,244,99],[288,172,244,174],[289,6,245,8],[289,7,245,9],[289,27,245,29],[289,28,245,30],[289,69,245,71],[289,138,245,140],[290,6,246,8],[290,7,246,9],[290,16,246,18],[290,17,246,19],[290,47,246,49],[290,77,246,79],[291,6,247,8],[291,7,247,9],[291,27,247,29],[291,28,247,30],[291,64,247,66],[291,136,247,138],[292,6,248,8],[292,7,248,9],[292,26,248,28],[292,27,248,29],[292,77,248,79],[292,150,248,152],[292,153,249,12],[292,171,249,30],[293,6,250,8],[293,7,250,9],[293,34,250,36],[293,35,250,37],[293,77,250,79],[293,148,250,150],[293,151,251,12],[293,188,251,49],[294,6,252,8],[294,7,252,9],[294,33,252,35],[294,34,252,36],[294,81,252,83],[294,198,252,200],[295,6,253,8],[295,7,253,9],[295,37,253,39],[295,38,253,40],[295,84,253,86],[295,158,253,160],[296,6,254,8],[296,7,254,9],[296,37,254,39],[296,38,254,40],[296,89,254,91],[296,149,254,151],[297,6,255,8],[297,7,255,9],[297,25,255,27],[297,26,255,28],[297,65,255,67],[297,107,255,109],[298,6,256,8],[298,7,256,9],[298,23,256,25],[298,24,256,26],[298,61,256,63],[298,132,256,134],[299,6,257,8],[299,7,257,9],[299,23,257,25],[299,24,257,26],[299,59,257,61],[299,132,257,134],[299,135,258,12],[299,155,258,32],[300,6,259,8],[300,7,259,9],[300,22,259,24],[300,23,259,25],[300,59,259,61],[300,116,259,118],[301,6,260,8],[301,7,260,9],[301,22,260,24],[301,23,260,25],[301,59,260,61],[301,137,260,139],[302,6,261,8],[302,7,261,9],[302,24,261,26],[302,25,261,27],[302,63,261,65],[302,65,261,67],[303,6,262,8],[303,7,262,9],[303,22,262,24],[303,23,262,25],[303,59,262,61],[303,108,262,110],[304,6,263,8],[304,7,263,9],[304,32,263,34],[304,33,263,35],[304,79,263,81],[304,157,263,159],[305,6,264,8],[305,7,264,9],[305,28,264,30],[305,29,264,31],[305,71,264,73],[305,119,264,121],[305,122,265,12],[305,195,265,85],[305,198,266,12],[305,278,266,92],[305,281,267,12],[305,313,267,44],[306,6,268,8],[306,7,268,9],[306,32,268,34],[306,33,268,35],[306,79,268,81],[306,148,268,150],[307,6,269,8],[307,7,269,9],[307,32,269,34],[307,33,269,35],[307,79,269,81],[307,148,269,150],[308,6,270,8],[308,7,270,9],[308,33,270,35],[308,34,270,36],[308,81,270,83],[308,151,270,153],[309,6,271,8],[309,7,271,9],[309,30,271,32],[309,31,271,33],[309,75,271,77],[309,142,271,144],[310,6,272,8],[310,7,272,9],[310,28,272,30],[310,29,272,31],[310,71,272,73],[310,146,272,148],[311,6,273,8],[311,7,273,9],[311,34,273,36],[311,35,273,37],[311,83,273,85],[311,154,273,156],[312,6,274,8],[312,7,274,9],[312,25,274,27],[312,26,274,28],[312,65,274,67],[312,94,274,96],[313,6,275,8],[313,7,275,9],[313,34,275,36],[313,35,275,37],[313,83,275,85],[313,154,275,156],[314,6,276,8],[314,7,276,9],[314,51,276,53],[314,52,276,54],[314,117,276,119],[314,245,276,247],[315,6,277,8],[315,7,277,9],[315,44,277,46],[315,45,277,47],[315,103,277,105],[315,149,277,151],[316,6,278,8],[316,7,278,9],[316,36,278,38],[316,37,278,39],[316,87,278,89],[316,179,278,181],[316,182,279,12],[317,4,280,4],[317,5,280,5],[318,2,281,0],[319,2,282,0],[319,11,282,9,"_prodErrorMap"],[319,24,282,22,"_prodErrorMap"],[319,25,282,22],[319,27,282,25],[320,4,283,4],[321,4,284,4],[322,4,285,4],[323,4,286,4],[323,11,286,11],[324,6,287,8],[324,7,287,9],[324,46,287,48],[324,47,287,49],[324,100,287,102],[324,180,287,182],[324,183,288,12],[324,258,288,87],[324,261,289,12],[325,4,290,4],[325,5,290,5],[326,2,291,0],[327,2,292,0],[328,0,293,0],[329,0,294,0],[330,0,295,0],[331,0,296,0],[332,0,297,0],[333,0,298,0],[334,2,299,0],[334,8,299,6,"debugErrorMap"],[334,21,299,19],[334,24,299,19,"exports"],[334,31,299,19],[334,32,299,19,"H"],[334,33,299,19],[334,36,299,22,"_debugErrorMap"],[334,50,299,36],[335,2,300,0],[336,0,301,0],[337,0,302,0],[338,0,303,0],[339,0,304,0],[340,0,305,0],[341,0,306,0],[342,2,307,0],[342,8,307,6,"prodErrorMap"],[342,20,307,18],[342,23,307,18,"exports"],[342,30,307,18],[342,31,307,18,"I"],[342,32,307,18],[342,35,307,21,"_prodErrorMap"],[342,48,307,34],[343,2,308,0],[343,8,308,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[343,35,308,33],[343,38,308,36],[343,42,308,40,"ErrorFactory"],[343,60,308,52],[343,61,308,53],[343,67,308,59],[343,69,308,61],[343,79,308,71],[343,81,308,73,"_prodErrorMap"],[343,94,308,86],[343,95,308,87],[343,96,308,88],[343,97,308,89],[344,2,309,0],[345,0,310,0],[346,0,311,0],[347,0,312,0],[348,0,313,0],[349,0,314,0],[350,0,315,0],[351,0,316,0],[352,0,317,0],[353,0,318,0],[354,0,319,0],[355,2,320,0],[355,8,320,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[355,50,320,48],[355,53,320,48,"exports"],[355,60,320,48],[355,61,320,48,"J"],[355,62,320,48],[355,65,320,51],[356,4,321,4,"ADMIN_ONLY_OPERATION"],[356,24,321,24],[356,26,321,26],[356,59,321,59],[357,4,322,4,"ARGUMENT_ERROR"],[357,18,322,18],[357,20,322,20],[357,41,322,41],[358,4,323,4,"APP_NOT_AUTHORIZED"],[358,22,323,22],[358,24,323,24],[358,49,323,49],[359,4,324,4,"APP_NOT_INSTALLED"],[359,21,324,21],[359,23,324,23],[359,47,324,47],[360,4,325,4,"CAPTCHA_CHECK_FAILED"],[360,24,325,24],[360,26,325,26],[360,53,325,53],[361,4,326,4,"CODE_EXPIRED"],[361,16,326,16],[361,18,326,18],[361,37,326,37],[362,4,327,4,"CORDOVA_NOT_READY"],[362,21,327,21],[362,23,327,23],[362,47,327,47],[363,4,328,4,"CORS_UNSUPPORTED"],[363,20,328,20],[363,22,328,22],[363,45,328,45],[364,4,329,4,"CREDENTIAL_ALREADY_IN_USE"],[364,29,329,29],[364,31,329,31],[364,63,329,63],[365,4,330,4,"CREDENTIAL_MISMATCH"],[365,23,330,23],[365,25,330,25],[365,53,330,53],[366,4,331,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[366,34,331,34],[366,36,331,36],[366,64,331,64],[367,4,332,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[367,34,332,34],[367,36,332,36],[367,80,332,80],[368,4,333,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[368,30,333,30],[368,32,333,32],[368,65,333,65],[369,4,334,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[369,35,334,35],[369,37,334,37],[369,75,334,75],[370,4,335,4,"EMAIL_EXISTS"],[370,16,335,16],[370,18,335,18],[370,45,335,45],[371,4,336,4,"EMULATOR_CONFIG_FAILED"],[371,26,336,26],[371,28,336,28],[371,57,336,57],[372,4,337,4,"EXPIRED_OOB_CODE"],[372,20,337,20],[372,22,337,22],[372,48,337,48],[373,4,338,4,"EXPIRED_POPUP_REQUEST"],[373,25,338,25],[373,27,338,27],[373,57,338,57],[374,4,339,4,"INTERNAL_ERROR"],[374,18,339,18],[374,20,339,20],[374,41,339,41],[375,4,340,4,"INVALID_API_KEY"],[375,19,340,19],[375,21,340,21],[375,43,340,43],[376,4,341,4,"INVALID_APP_CREDENTIAL"],[376,26,341,26],[376,28,341,28],[376,57,341,57],[377,4,342,4,"INVALID_APP_ID"],[377,18,342,18],[377,20,342,20],[377,41,342,41],[378,4,343,4,"INVALID_AUTH"],[378,16,343,16],[378,18,343,18],[378,43,343,43],[379,4,344,4,"INVALID_AUTH_EVENT"],[379,22,344,22],[379,24,344,24],[379,49,344,49],[380,4,345,4,"INVALID_CERT_HASH"],[380,21,345,21],[380,23,345,23],[380,47,345,47],[381,4,346,4,"INVALID_CODE"],[381,16,346,16],[381,18,346,18],[381,50,346,50],[382,4,347,4,"INVALID_CONTINUE_URI"],[382,24,347,24],[382,26,347,26],[382,53,347,53],[383,4,348,4,"INVALID_CORDOVA_CONFIGURATION"],[383,33,348,33],[383,35,348,35],[383,71,348,71],[384,4,349,4,"INVALID_CUSTOM_TOKEN"],[384,24,349,24],[384,26,349,26],[384,53,349,53],[385,4,350,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[385,31,350,31],[385,33,350,33],[385,67,350,67],[386,4,351,4,"INVALID_EMAIL"],[386,17,351,17],[386,19,351,19],[386,39,351,39],[387,4,352,4,"INVALID_EMULATOR_SCHEME"],[387,27,352,27],[387,29,352,29],[387,59,352,59],[388,4,353,4,"INVALID_IDP_RESPONSE"],[388,24,353,24],[388,26,353,26],[388,51,353,51],[389,4,354,4,"INVALID_LOGIN_CREDENTIALS"],[389,29,354,29],[389,31,354,31],[389,56,354,56],[390,4,355,4,"INVALID_MESSAGE_PAYLOAD"],[390,27,355,27],[390,29,355,29],[390,59,355,59],[391,4,356,4,"INVALID_MFA_SESSION"],[391,23,356,23],[391,25,356,25],[391,60,356,60],[392,4,357,4,"INVALID_OAUTH_CLIENT_ID"],[392,27,357,27],[392,29,357,29],[392,59,357,59],[393,4,358,4,"INVALID_OAUTH_PROVIDER"],[393,26,358,26],[393,28,358,28],[393,57,358,57],[394,4,359,4,"INVALID_OOB_CODE"],[394,20,359,20],[394,22,359,22],[394,48,359,48],[395,4,360,4,"INVALID_ORIGIN"],[395,18,360,18],[395,20,360,20],[395,46,360,46],[396,4,361,4,"INVALID_PASSWORD"],[396,20,361,20],[396,22,361,22],[396,43,361,43],[397,4,362,4,"INVALID_PERSISTENCE"],[397,23,362,23],[397,25,362,25],[397,56,362,56],[398,4,363,4,"INVALID_PHONE_NUMBER"],[398,24,363,24],[398,26,363,26],[398,53,363,53],[399,4,364,4,"INVALID_PROVIDER_ID"],[399,23,364,23],[399,25,364,25],[399,51,364,51],[400,4,365,4,"INVALID_RECIPIENT_EMAIL"],[400,27,365,27],[400,29,365,29],[400,59,365,59],[401,4,366,4,"INVALID_SENDER"],[401,18,366,18],[401,20,366,20],[401,41,366,41],[402,4,367,4,"INVALID_SESSION_INFO"],[402,24,367,24],[402,26,367,26],[402,56,367,56],[403,4,368,4,"INVALID_TENANT_ID"],[403,21,368,21],[403,23,368,23],[403,47,368,47],[404,4,369,4,"MFA_INFO_NOT_FOUND"],[404,22,369,22],[404,24,369,24],[404,58,369,58],[405,4,370,4,"MFA_REQUIRED"],[405,16,370,16],[405,18,370,18],[405,51,370,51],[406,4,371,4,"MISSING_ANDROID_PACKAGE_NAME"],[406,32,371,32],[406,34,371,34],[406,65,371,65],[407,4,372,4,"MISSING_APP_CREDENTIAL"],[407,26,372,26],[407,28,372,28],[407,57,372,57],[408,4,373,4,"MISSING_AUTH_DOMAIN"],[408,23,373,23],[408,25,373,25],[408,59,373,59],[409,4,374,4,"MISSING_CODE"],[409,16,374,16],[409,18,374,18],[409,50,374,50],[410,4,375,4,"MISSING_CONTINUE_URI"],[410,24,375,24],[410,26,375,26],[410,53,375,53],[411,4,376,4,"MISSING_IFRAME_START"],[411,24,376,24],[411,26,376,26],[411,53,376,53],[412,4,377,4,"MISSING_IOS_BUNDLE_ID"],[412,25,377,25],[412,27,377,27],[412,55,377,55],[413,4,378,4,"MISSING_OR_INVALID_NONCE"],[413,28,378,28],[413,30,378,30],[413,61,378,61],[414,4,379,4,"MISSING_MFA_INFO"],[414,20,379,20],[414,22,379,22],[414,54,379,54],[415,4,380,4,"MISSING_MFA_SESSION"],[415,23,380,23],[415,25,380,25],[415,60,380,60],[416,4,381,4,"MISSING_PHONE_NUMBER"],[416,24,381,24],[416,26,381,26],[416,53,381,53],[417,4,382,4,"MISSING_SESSION_INFO"],[417,24,382,24],[417,26,382,26],[417,56,382,56],[418,4,383,4,"MODULE_DESTROYED"],[418,20,383,20],[418,22,383,22],[418,40,383,40],[419,4,384,4,"NEED_CONFIRMATION"],[419,21,384,21],[419,23,384,23],[419,70,384,70],[420,4,385,4,"NETWORK_REQUEST_FAILED"],[420,26,385,26],[420,28,385,28],[420,57,385,57],[421,4,386,4,"NULL_USER"],[421,13,386,13],[421,15,386,15],[421,31,386,31],[422,4,387,4,"NO_AUTH_EVENT"],[422,17,387,17],[422,19,387,19],[422,39,387,39],[423,4,388,4,"NO_SUCH_PROVIDER"],[423,20,388,20],[423,22,388,22],[423,45,388,45],[424,4,389,4,"OPERATION_NOT_ALLOWED"],[424,25,389,25],[424,27,389,27],[424,55,389,55],[425,4,390,4,"OPERATION_NOT_SUPPORTED"],[425,27,390,27],[425,29,390,29],[425,79,390,79],[426,4,391,4,"POPUP_BLOCKED"],[426,17,391,17],[426,19,391,19],[426,39,391,39],[427,4,392,4,"POPUP_CLOSED_BY_USER"],[427,24,392,24],[427,26,392,26],[427,53,392,53],[428,4,393,4,"PROVIDER_ALREADY_LINKED"],[428,27,393,27],[428,29,393,29],[428,59,393,59],[429,4,394,4,"QUOTA_EXCEEDED"],[429,18,394,18],[429,20,394,20],[429,41,394,41],[430,4,395,4,"REDIRECT_CANCELLED_BY_USER"],[430,30,395,30],[430,32,395,32],[430,65,395,65],[431,4,396,4,"REDIRECT_OPERATION_PENDING"],[431,30,396,30],[431,32,396,32],[431,65,396,65],[432,4,397,4,"REJECTED_CREDENTIAL"],[432,23,397,23],[432,25,397,25],[432,51,397,51],[433,4,398,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[433,34,398,34],[433,36,398,36],[433,71,398,71],[434,4,399,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[434,32,399,32],[434,34,399,34],[434,77,399,77],[435,4,400,4,"TENANT_ID_MISMATCH"],[435,22,400,22],[435,24,400,24],[435,49,400,49],[436,4,401,4,"TIMEOUT"],[436,11,401,11],[436,13,401,13],[436,27,401,27],[437,4,402,4,"TOKEN_EXPIRED"],[437,17,402,17],[437,19,402,19],[437,44,402,44],[438,4,403,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[438,31,403,31],[438,33,403,33],[438,57,403,57],[439,4,404,4,"UNAUTHORIZED_DOMAIN"],[439,23,404,23],[439,25,404,25],[439,57,404,57],[440,4,405,4,"UNSUPPORTED_FIRST_FACTOR"],[440,28,405,28],[440,30,405,30],[440,61,405,61],[441,4,406,4,"UNSUPPORTED_PERSISTENCE"],[441,27,406,27],[441,29,406,29],[441,64,406,64],[442,4,407,4,"UNSUPPORTED_TENANT_OPERATION"],[442,32,407,32],[442,34,407,34],[442,69,407,69],[443,4,408,4,"UNVERIFIED_EMAIL"],[443,20,408,20],[443,22,408,22],[443,45,408,45],[444,4,409,4,"USER_CANCELLED"],[444,18,409,18],[444,20,409,20],[444,41,409,41],[445,4,410,4,"USER_DELETED"],[445,16,410,16],[445,18,410,18],[445,39,410,39],[446,4,411,4,"USER_DISABLED"],[446,17,411,17],[446,19,411,19],[446,39,411,39],[447,4,412,4,"USER_MISMATCH"],[447,17,412,17],[447,19,412,19],[447,39,412,39],[448,4,413,4,"USER_SIGNED_OUT"],[448,19,413,19],[448,21,413,21],[448,43,413,43],[449,4,414,4,"WEAK_PASSWORD"],[449,17,414,17],[449,19,414,19],[449,39,414,39],[450,4,415,4,"WEB_STORAGE_UNSUPPORTED"],[450,27,415,27],[450,29,415,29],[450,59,415,59],[451,4,416,4,"ALREADY_INITIALIZED"],[451,23,416,23],[451,25,416,25],[451,51,416,51],[452,4,417,4,"RECAPTCHA_NOT_ENABLED"],[452,25,417,25],[452,27,417,27],[452,55,417,55],[453,4,418,4,"MISSING_RECAPTCHA_TOKEN"],[453,27,418,27],[453,29,418,29],[453,59,418,59],[454,4,419,4,"INVALID_RECAPTCHA_TOKEN"],[454,27,419,27],[454,29,419,29],[454,59,419,59],[455,4,420,4,"INVALID_RECAPTCHA_ACTION"],[455,28,420,28],[455,30,420,30],[455,61,420,61],[456,4,421,4,"MISSING_CLIENT_TYPE"],[456,23,421,23],[456,25,421,25],[456,51,421,51],[457,4,422,4,"MISSING_RECAPTCHA_VERSION"],[457,29,422,29],[457,31,422,31],[457,63,422,63],[458,4,423,4,"INVALID_RECAPTCHA_VERSION"],[458,29,423,29],[458,31,423,31],[458,63,423,63],[459,4,424,4,"INVALID_REQ_TYPE"],[459,20,424,20],[459,22,424,22],[459,45,424,45],[460,4,425,4,"INVALID_HOSTING_LINK_DOMAIN"],[460,31,425,31],[460,33,425,33],[461,2,426,0],[461,3,426,1],[463,2,428,0],[464,0,429,0],[465,0,430,0],[466,0,431,0],[467,0,432,0],[468,0,433,0],[469,0,434,0],[470,0,435,0],[471,0,436,0],[472,0,437,0],[473,0,438,0],[474,0,439,0],[475,0,440,0],[476,0,441,0],[477,0,442,0],[478,0,443,0],[479,2,444,0],[479,8,444,6,"logClient"],[479,17,444,15],[479,20,444,18],[479,24,444,22,"Logger"],[479,38,444,28],[479,39,444,29],[479,55,444,45],[479,56,444,46],[480,2,445,0],[480,11,445,9,"_logWarn"],[480,19,445,17,"_logWarn"],[480,20,445,18,"msg"],[480,23,445,21],[480,25,445,23],[480,28,445,26,"args"],[480,32,445,30],[480,34,445,32],[481,4,446,4],[481,8,446,8,"logClient"],[481,17,446,17],[481,18,446,18,"logLevel"],[481,26,446,26],[481,30,446,30,"LogLevel"],[481,46,446,38],[481,47,446,39,"WARN"],[481,51,446,43],[481,53,446,45],[482,6,447,8,"logClient"],[482,15,447,17],[482,16,447,18,"warn"],[482,20,447,22],[482,21,447,23],[482,30,447,32,"SDK_VERSION"],[482,46,447,43],[482,52,447,49,"msg"],[482,55,447,52],[482,57,447,54],[482,59,447,56],[482,62,447,59,"args"],[482,66,447,63],[482,67,447,64],[483,4,448,4],[484,2,449,0],[485,2,450,0],[485,11,450,9,"_logError"],[485,20,450,18,"_logError"],[485,21,450,19,"msg"],[485,24,450,22],[485,26,450,24],[485,29,450,27,"args"],[485,33,450,31],[485,35,450,33],[486,4,451,4],[486,8,451,8,"logClient"],[486,17,451,17],[486,18,451,18,"logLevel"],[486,26,451,26],[486,30,451,30,"LogLevel"],[486,46,451,38],[486,47,451,39,"ERROR"],[486,52,451,44],[486,54,451,46],[487,6,452,8,"logClient"],[487,15,452,17],[487,16,452,18,"error"],[487,21,452,23],[487,22,452,24],[487,31,452,33,"SDK_VERSION"],[487,47,452,44],[487,53,452,50,"msg"],[487,56,452,53],[487,58,452,55],[487,60,452,57],[487,63,452,60,"args"],[487,67,452,64],[487,68,452,65],[488,4,453,4],[489,2,454,0],[491,2,456,0],[492,0,457,0],[493,0,458,0],[494,0,459,0],[495,0,460,0],[496,0,461,0],[497,0,462,0],[498,0,463,0],[499,0,464,0],[500,0,465,0],[501,0,466,0],[502,0,467,0],[503,0,468,0],[504,0,469,0],[505,0,470,0],[506,0,471,0],[507,2,472,0],[507,11,472,9,"_fail"],[507,16,472,14,"_fail"],[507,17,472,15,"authOrCode"],[507,27,472,25],[507,29,472,27],[507,32,472,30,"rest"],[507,36,472,34],[507,38,472,36],[508,4,473,4],[508,10,473,10,"createErrorInternal"],[508,29,473,29],[508,30,473,30,"authOrCode"],[508,40,473,40],[508,42,473,42],[508,45,473,45,"rest"],[508,49,473,49],[508,50,473,50],[509,2,474,0],[510,2,475,0],[510,11,475,9,"_createError"],[510,23,475,21,"_createError"],[510,24,475,22,"authOrCode"],[510,34,475,32],[510,36,475,34],[510,39,475,37,"rest"],[510,43,475,41],[510,45,475,43],[511,4,476,4],[511,11,476,11,"createErrorInternal"],[511,30,476,30],[511,31,476,31,"authOrCode"],[511,41,476,41],[511,43,476,43],[511,46,476,46,"rest"],[511,50,476,50],[511,51,476,51],[512,2,477,0],[513,2,478,0],[513,11,478,9,"_errorWithCustomMessage"],[513,34,478,32,"_errorWithCustomMessage"],[513,35,478,33,"auth"],[513,39,478,37],[513,41,478,39,"code"],[513,45,478,43],[513,47,478,45,"message"],[513,54,478,52],[513,56,478,54],[514,4,479,4],[514,10,479,10,"errorMap"],[514,18,479,18],[514,21,479,21],[515,6,480,8],[515,9,480,11,"prodErrorMap"],[515,21,480,23],[515,22,480,24],[515,23,480,25],[516,6,481,8],[516,7,481,9,"code"],[516,11,481,13],[516,14,481,16,"message"],[517,4,482,4],[517,5,482,5],[518,4,483,4],[518,10,483,10,"factory"],[518,17,483,17],[518,20,483,20],[518,24,483,24,"ErrorFactory"],[518,42,483,36],[518,43,483,37],[518,49,483,43],[518,51,483,45],[518,61,483,55],[518,63,483,57,"errorMap"],[518,71,483,65],[518,72,483,66],[519,4,484,4],[519,11,484,11,"factory"],[519,18,484,18],[519,19,484,19,"create"],[519,25,484,25],[519,26,484,26,"code"],[519,30,484,30],[519,32,484,32],[520,6,485,8,"appName"],[520,13,485,15],[520,15,485,17,"auth"],[520,19,485,21],[520,20,485,22,"name"],[521,4,486,4],[521,5,486,5],[521,6,486,6],[522,2,487,0],[523,2,488,0],[523,11,488,9,"_serverAppCurrentUserOperationNotSupportedError"],[523,58,488,56,"_serverAppCurrentUserOperationNotSupportedError"],[523,59,488,57,"auth"],[523,63,488,61],[523,65,488,63],[524,4,489,4],[524,11,489,11,"_errorWithCustomMessage"],[524,34,489,34],[524,35,489,35,"auth"],[524,39,489,39],[524,41,489,41],[524,86,489,86],[524,87,489,87],[524,132,489,132],[524,228,489,228],[524,229,489,229],[525,2,490,0],[526,2,491,0],[526,11,491,9,"_assertInstanceOf"],[526,28,491,26,"_assertInstanceOf"],[526,29,491,27,"auth"],[526,33,491,31],[526,35,491,33,"object"],[526,41,491,39],[526,43,491,41,"instance"],[526,51,491,49],[526,53,491,51],[527,4,492,4],[527,10,492,10,"constructorInstance"],[527,29,492,29],[527,32,492,32,"instance"],[527,40,492,40],[528,4,493,4],[528,8,493,8],[528,10,493,10,"object"],[528,16,493,16],[528,28,493,28,"constructorInstance"],[528,47,493,47],[528,48,493,48],[528,50,493,50],[529,6,494,8],[529,10,494,12,"constructorInstance"],[529,29,494,31],[529,30,494,32,"name"],[529,34,494,36],[529,39,494,41,"object"],[529,45,494,47],[529,46,494,48,"constructor"],[529,57,494,59],[529,58,494,60,"name"],[529,62,494,64],[529,64,494,66],[530,8,495,12,"_fail"],[530,13,495,17],[530,14,495,18,"auth"],[530,18,495,22],[530,20,495,24],[530,36,495,40],[530,37,495,41],[530,71,495,75],[530,72,495,76],[531,6,496,8],[532,6,497,8],[532,12,497,14,"_errorWithCustomMessage"],[532,35,497,37],[532,36,497,38,"auth"],[532,40,497,42],[532,42,497,44],[532,58,497,60],[532,59,497,61],[532,95,497,97],[532,106,497,108,"object"],[532,112,497,114],[532,113,497,115,"constructor"],[532,124,497,126],[532,125,497,127,"name"],[532,129,497,131],[532,165,497,167],[532,168,498,12],[532,221,498,65],[532,222,498,66],[533,4,499,4],[534,2,500,0],[535,2,501,0],[535,11,501,9,"createErrorInternal"],[535,30,501,28,"createErrorInternal"],[535,31,501,29,"authOrCode"],[535,41,501,39],[535,43,501,41],[535,46,501,44,"rest"],[535,50,501,48],[535,52,501,50],[536,4,502,4],[536,8,502,8],[536,15,502,15,"authOrCode"],[536,25,502,25],[536,30,502,30],[536,38,502,38],[536,40,502,40],[537,6,503,8],[537,12,503,14,"code"],[537,16,503,18],[537,19,503,21,"rest"],[537,23,503,25],[537,24,503,26],[537,25,503,27],[537,26,503,28],[538,6,504,8],[538,12,504,14,"fullParams"],[538,22,504,24],[538,25,504,27],[538,26,504,28],[538,29,504,31,"rest"],[538,33,504,35],[538,34,504,36,"slice"],[538,39,504,41],[538,40,504,42],[538,41,504,43],[538,42,504,44],[538,43,504,45],[539,6,505,8],[539,10,505,12,"fullParams"],[539,20,505,22],[539,21,505,23],[539,22,505,24],[539,23,505,25],[539,25,505,27],[540,8,506,12,"fullParams"],[540,18,506,22],[540,19,506,23],[540,20,506,24],[540,21,506,25],[540,22,506,26,"appName"],[540,29,506,33],[540,32,506,36,"authOrCode"],[540,42,506,46],[540,43,506,47,"name"],[540,47,506,51],[541,6,507,8],[542,6,508,8],[542,13,508,15,"authOrCode"],[542,23,508,25],[542,24,508,26,"_errorFactory"],[542,37,508,39],[542,38,508,40,"create"],[542,44,508,46],[542,45,508,47,"code"],[542,49,508,51],[542,51,508,53],[542,54,508,56,"fullParams"],[542,64,508,66],[542,65,508,67],[543,4,509,4],[544,4,510,4],[544,11,510,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[544,38,510,38],[544,39,510,39,"create"],[544,45,510,45],[544,46,510,46,"authOrCode"],[544,56,510,56],[544,58,510,58],[544,61,510,61,"rest"],[544,65,510,65],[544,66,510,66],[545,2,511,0],[546,2,512,0],[546,11,512,9,"_assert"],[546,18,512,16,"_assert"],[546,19,512,17,"assertion"],[546,28,512,26],[546,30,512,28,"authOrCode"],[546,40,512,38],[546,42,512,40],[546,45,512,43,"rest"],[546,49,512,47],[546,51,512,49],[547,4,513,4],[547,8,513,8],[547,9,513,9,"assertion"],[547,18,513,18],[547,20,513,20],[548,6,514,8],[548,12,514,14,"createErrorInternal"],[548,31,514,33],[548,32,514,34,"authOrCode"],[548,42,514,44],[548,44,514,46],[548,47,514,49,"rest"],[548,51,514,53],[548,52,514,54],[549,4,515,4],[550,2,516,0],[551,2,517,0],[552,0,518,0],[553,0,519,0],[554,0,520,0],[555,0,521,0],[556,0,522,0],[557,2,523,0],[557,11,523,9,"debugFail"],[557,20,523,18,"debugFail"],[557,21,523,19,"failure"],[557,28,523,26],[557,30,523,28],[558,4,524,4],[559,4,525,4],[560,4,526,4],[560,10,526,10,"message"],[560,17,526,17],[560,20,526,20],[560,49,526,49],[560,52,526,52,"failure"],[560,59,526,59],[561,4,527,4,"_logError"],[561,13,527,13],[561,14,527,14,"message"],[561,21,527,21],[561,22,527,22],[562,4,528,4],[563,4,529,4],[564,4,530,4],[565,4,531,4],[565,10,531,10],[565,14,531,14,"Error"],[565,19,531,19],[565,20,531,20,"message"],[565,27,531,27],[565,28,531,28],[566,2,532,0],[567,2,533,0],[568,0,534,0],[569,0,535,0],[570,0,536,0],[571,0,537,0],[572,0,538,0],[573,0,539,0],[574,2,540,0],[574,11,540,9,"debugAssert"],[574,22,540,20,"debugAssert"],[574,23,540,21,"assertion"],[574,32,540,30],[574,34,540,32,"message"],[574,41,540,39],[574,43,540,41],[575,4,541,4],[575,8,541,8],[575,9,541,9,"assertion"],[575,18,541,18],[575,20,541,20],[576,6,542,8,"debugFail"],[576,15,542,17],[576,16,542,18,"message"],[576,23,542,25],[576,24,542,26],[577,4,543,4],[578,2,544,0],[580,2,546,0],[581,0,547,0],[582,0,548,0],[583,0,549,0],[584,0,550,0],[585,0,551,0],[586,0,552,0],[587,0,553,0],[588,0,554,0],[589,0,555,0],[590,0,556,0],[591,0,557,0],[592,0,558,0],[593,0,559,0],[594,0,560,0],[595,0,561,0],[596,2,562,0],[596,11,562,9,"_getCurrentUrl"],[596,25,562,23,"_getCurrentUrl"],[596,26,562,23],[596,28,562,26],[597,4,563,4],[597,11,563,12],[597,18,563,19,"self"],[597,22,563,23],[597,27,563,28],[597,38,563,39],[597,42,563,43,"self"],[597,46,563,47],[597,47,563,48,"location"],[597,55,563,56],[597,57,563,58,"href"],[597,61,563,62],[597,65,563,67],[597,67,563,69],[598,2,564,0],[599,2,565,0],[599,11,565,9,"_isHttpOrHttps"],[599,25,565,23,"_isHttpOrHttps"],[599,26,565,23],[599,28,565,26],[600,4,566,4],[600,11,566,11,"_getCurrentScheme"],[600,28,566,28],[600,29,566,29],[600,30,566,30],[600,35,566,35],[600,42,566,42],[600,46,566,46,"_getCurrentScheme"],[600,63,566,63],[600,64,566,64],[600,65,566,65],[600,70,566,70],[600,78,566,78],[601,2,567,0],[602,2,568,0],[602,11,568,9,"_getCurrentScheme"],[602,28,568,26,"_getCurrentScheme"],[602,29,568,26],[602,31,568,29],[603,4,569,4],[603,11,569,12],[603,18,569,19,"self"],[603,22,569,23],[603,27,569,28],[603,38,569,39],[603,42,569,43,"self"],[603,46,569,47],[603,47,569,48,"location"],[603,55,569,56],[603,57,569,58,"protocol"],[603,65,569,66],[603,69,569,71],[603,73,569,75],[604,2,570,0],[606,2,572,0],[607,0,573,0],[608,0,574,0],[609,0,575,0],[610,0,576,0],[611,0,577,0],[612,0,578,0],[613,0,579,0],[614,0,580,0],[615,0,581,0],[616,0,582,0],[617,0,583,0],[618,0,584,0],[619,0,585,0],[620,0,586,0],[621,0,587,0],[622,2,588,0],[623,0,589,0],[624,0,590,0],[625,2,591,0],[625,11,591,9,"_isOnline"],[625,20,591,18,"_isOnline"],[625,21,591,18],[625,23,591,21],[626,4,592,4],[626,8,592,8],[626,15,592,15,"navigator"],[626,24,592,24],[626,29,592,29],[626,40,592,40],[626,44,593,8,"navigator"],[626,53,593,17],[626,57,594,8],[626,65,594,16],[626,69,594,20,"navigator"],[626,78,594,29],[626,82,595,8],[626,89,595,15,"navigator"],[626,98,595,24],[626,99,595,25,"onLine"],[626,105,595,31],[626,110,595,36],[626,119,595,45],[627,4,596,8],[628,4,597,8],[629,4,598,8],[630,4,599,8],[631,4,600,8],[632,4,601,9,"_isHttpOrHttps"],[632,18,601,23],[632,19,601,24],[632,20,601,25],[632,24,601,29],[632,28,601,29,"isBrowserExtension"],[632,52,601,47],[632,54,601,48],[632,55,601,49],[632,59,601,53],[632,71,601,65],[632,75,601,69,"navigator"],[632,84,601,78],[632,85,601,79],[632,87,601,81],[633,6,602,8],[633,13,602,15,"navigator"],[633,22,602,24],[633,23,602,25,"onLine"],[633,29,602,31],[634,4,603,4],[635,4,604,4],[636,4,605,4],[636,11,605,11],[636,15,605,15],[637,2,606,0],[638,2,607,0],[638,11,607,9,"_getUserLanguage"],[638,27,607,25,"_getUserLanguage"],[638,28,607,25],[638,30,607,28],[639,4,608,4],[639,8,608,8],[639,15,608,15,"navigator"],[639,24,608,24],[639,29,608,29],[639,40,608,40],[639,42,608,42],[640,6,609,8],[640,13,609,15],[640,17,609,19],[641,4,610,4],[642,4,611,4],[642,10,611,10,"navigatorLanguage"],[642,27,611,27],[642,30,611,30,"navigator"],[642,39,611,39],[643,4,612,4],[644,6,613,4],[645,6,614,5,"navigatorLanguage"],[645,23,614,22],[645,24,614,23,"languages"],[645,33,614,32],[645,37,614,36,"navigatorLanguage"],[645,54,614,53],[645,55,614,54,"languages"],[645,64,614,63],[645,65,614,64],[645,66,614,65],[645,67,614,66],[646,6,615,8],[647,6,616,8],[648,6,617,8,"navigatorLanguage"],[648,23,617,25],[648,24,617,26,"language"],[648,32,617,34],[649,6,618,8],[650,6,619,8],[651,4,619,12],[652,2,620,0],[654,2,622,0],[655,0,623,0],[656,0,624,0],[657,0,625,0],[658,0,626,0],[659,0,627,0],[660,0,628,0],[661,0,629,0],[662,0,630,0],[663,0,631,0],[664,0,632,0],[665,0,633,0],[666,0,634,0],[667,0,635,0],[668,0,636,0],[669,0,637,0],[670,2,638,0],[671,0,639,0],[672,0,640,0],[673,0,641,0],[674,0,642,0],[675,2,643,0],[675,8,643,6,"Delay"],[675,13,643,11],[675,14,643,12],[676,4,644,4,"constructor"],[676,15,644,15,"constructor"],[676,16,644,16,"shortDelay"],[676,26,644,26],[676,28,644,28,"longDelay"],[676,37,644,37],[676,39,644,39],[677,6,645,8],[677,10,645,12],[677,11,645,13,"shortDelay"],[677,21,645,23],[677,24,645,26,"shortDelay"],[677,34,645,36],[678,6,646,8],[678,10,646,12],[678,11,646,13,"longDelay"],[678,20,646,22],[678,23,646,25,"longDelay"],[678,32,646,34],[679,6,647,8],[680,6,648,8,"debugAssert"],[680,17,648,19],[680,18,648,20,"longDelay"],[680,27,648,29],[680,30,648,32,"shortDelay"],[680,40,648,42],[680,42,648,44],[680,87,648,89],[680,88,648,90],[681,6,649,8],[681,10,649,12],[681,11,649,13,"isMobile"],[681,19,649,21],[681,22,649,24],[681,26,649,24,"isMobileCordova"],[681,47,649,39],[681,49,649,40],[681,50,649,41],[681,54,649,45],[681,58,649,45,"isReactNative"],[681,77,649,58],[681,79,649,59],[681,80,649,60],[682,4,650,4],[683,4,651,4,"get"],[683,7,651,7,"get"],[683,8,651,7],[683,10,651,10],[684,6,652,8],[684,10,652,12],[684,11,652,13,"_isOnline"],[684,20,652,22],[684,21,652,23],[684,22,652,24],[684,24,652,26],[685,8,653,12],[686,8,654,12],[686,15,654,19,"Math"],[686,19,654,23],[686,20,654,24,"min"],[686,23,654,27],[686,24,654,28],[686,28,654,32],[686,29,654,33],[686,53,654,57],[686,57,654,61],[686,58,654,62,"shortDelay"],[686,68,654,72],[686,69,654,73],[687,6,655,8],[688,6,656,8],[689,6,657,8],[690,6,658,8],[691,6,659,8],[692,6,660,8],[692,13,660,15],[692,17,660,19],[692,18,660,20,"isMobile"],[692,26,660,28],[692,29,660,31],[692,33,660,35],[692,34,660,36,"longDelay"],[692,43,660,45],[692,46,660,48],[692,50,660,52],[692,51,660,53,"shortDelay"],[692,61,660,63],[693,4,661,4],[694,2,662,0],[696,2,664,0],[697,0,665,0],[698,0,666,0],[699,0,667,0],[700,0,668,0],[701,0,669,0],[702,0,670,0],[703,0,671,0],[704,0,672,0],[705,0,673,0],[706,0,674,0],[707,0,675,0],[708,0,676,0],[709,0,677,0],[710,0,678,0],[711,0,679,0],[712,2,680,0],[712,11,680,9,"_emulatorUrl"],[712,23,680,21,"_emulatorUrl"],[712,24,680,22,"config"],[712,30,680,28],[712,32,680,30,"path"],[712,36,680,34],[712,38,680,36],[713,4,681,4,"debugAssert"],[713,15,681,15],[713,16,681,16,"config"],[713,22,681,22],[713,23,681,23,"emulator"],[713,31,681,31],[713,33,681,33],[713,69,681,69],[713,70,681,70],[714,4,682,4],[714,10,682,10],[715,6,682,12,"url"],[716,4,682,16],[716,5,682,17],[716,8,682,20,"config"],[716,14,682,26],[716,15,682,27,"emulator"],[716,23,682,35],[717,4,683,4],[717,8,683,8],[717,9,683,9,"path"],[717,13,683,13],[717,15,683,15],[718,6,684,8],[718,13,684,15,"url"],[718,16,684,18],[719,4,685,4],[720,4,686,4],[720,11,686,11],[720,14,686,14,"url"],[720,17,686,17],[720,20,686,20,"path"],[720,24,686,24],[720,25,686,25,"startsWith"],[720,35,686,35],[720,36,686,36],[720,39,686,39],[720,40,686,40],[720,43,686,43,"path"],[720,47,686,47],[720,48,686,48,"slice"],[720,53,686,53],[720,54,686,54],[720,55,686,55],[720,56,686,56],[720,59,686,59,"path"],[720,63,686,63],[720,65,686,65],[721,2,687,0],[723,2,689,0],[724,0,690,0],[725,0,691,0],[726,0,692,0],[727,0,693,0],[728,0,694,0],[729,0,695,0],[730,0,696,0],[731,0,697,0],[732,0,698,0],[733,0,699,0],[734,0,700,0],[735,0,701,0],[736,0,702,0],[737,0,703,0],[738,0,704,0],[739,2,705,0],[739,8,705,6,"FetchProvider"],[739,21,705,19],[739,22,705,20],[740,4,706,4],[740,11,706,11,"initialize"],[740,21,706,21,"initialize"],[740,22,706,22,"fetchImpl"],[740,31,706,31],[740,33,706,33,"headersImpl"],[740,44,706,44],[740,46,706,46,"responseImpl"],[740,58,706,58],[740,60,706,60],[741,6,707,8],[741,10,707,12],[741,11,707,13,"fetchImpl"],[741,20,707,22],[741,23,707,25,"fetchImpl"],[741,32,707,34],[742,6,708,8],[742,10,708,12,"headersImpl"],[742,21,708,23],[742,23,708,25],[743,8,709,12],[743,12,709,16],[743,13,709,17,"headersImpl"],[743,24,709,28],[743,27,709,31,"headersImpl"],[743,38,709,42],[744,6,710,8],[745,6,711,8],[745,10,711,12,"responseImpl"],[745,22,711,24],[745,24,711,26],[746,8,712,12],[746,12,712,16],[746,13,712,17,"responseImpl"],[746,25,712,29],[746,28,712,32,"responseImpl"],[746,40,712,44],[747,6,713,8],[748,4,714,4],[749,4,715,4],[749,11,715,11,"fetch"],[749,16,715,16,"fetch"],[749,17,715,16],[749,19,715,19],[750,6,716,8],[750,10,716,12],[750,14,716,16],[750,15,716,17,"fetchImpl"],[750,24,716,26],[750,26,716,28],[751,8,717,12],[751,15,717,19],[751,19,717,23],[751,20,717,24,"fetchImpl"],[751,29,717,33],[752,6,718,8],[753,6,719,8],[753,10,719,12],[753,17,719,19,"self"],[753,21,719,23],[753,26,719,28],[753,37,719,39],[753,41,719,43],[753,48,719,50],[753,52,719,54,"self"],[753,56,719,58],[753,58,719,60],[754,8,720,12],[754,15,720,19,"self"],[754,19,720,23],[754,20,720,24,"fetch"],[754,25,720,29],[755,6,721,8],[756,6,722,8],[756,10,722,12],[756,17,722,19,"globalThis"],[756,27,722,29],[756,32,722,34],[756,43,722,45],[756,47,722,49,"globalThis"],[756,57,722,59],[756,58,722,60,"fetch"],[756,63,722,65],[756,65,722,67],[757,8,723,12],[757,15,723,19,"globalThis"],[757,25,723,29],[757,26,723,30,"fetch"],[757,31,723,35],[758,6,724,8],[759,6,725,8],[759,10,725,12],[759,17,725,19,"fetch"],[759,22,725,24],[759,27,725,29],[759,38,725,40],[759,40,725,42],[760,8,726,12],[760,15,726,19,"fetch"],[760,20,726,24],[761,6,727,8],[762,6,728,8,"debugFail"],[762,15,728,17],[762,16,728,18],[762,129,728,131],[762,130,728,132],[763,4,729,4],[764,4,730,4],[764,11,730,11,"headers"],[764,18,730,18,"headers"],[764,19,730,18],[764,21,730,21],[765,6,731,8],[765,10,731,12],[765,14,731,16],[765,15,731,17,"headersImpl"],[765,26,731,28],[765,28,731,30],[766,8,732,12],[766,15,732,19],[766,19,732,23],[766,20,732,24,"headersImpl"],[766,31,732,35],[767,6,733,8],[768,6,734,8],[768,10,734,12],[768,17,734,19,"self"],[768,21,734,23],[768,26,734,28],[768,37,734,39],[768,41,734,43],[768,50,734,52],[768,54,734,56,"self"],[768,58,734,60],[768,60,734,62],[769,8,735,12],[769,15,735,19,"self"],[769,19,735,23],[769,20,735,24,"Headers"],[769,27,735,31],[770,6,736,8],[771,6,737,8],[771,10,737,12],[771,17,737,19,"globalThis"],[771,27,737,29],[771,32,737,34],[771,43,737,45],[771,47,737,49,"globalThis"],[771,57,737,59],[771,58,737,60,"Headers"],[771,65,737,67],[771,67,737,69],[772,8,738,12],[772,15,738,19,"globalThis"],[772,25,738,29],[772,26,738,30,"Headers"],[772,33,738,37],[773,6,739,8],[774,6,740,8],[774,10,740,12],[774,17,740,19,"Headers"],[774,24,740,26],[774,29,740,31],[774,40,740,42],[774,42,740,44],[775,8,741,12],[775,15,741,19,"Headers"],[775,22,741,26],[776,6,742,8],[777,6,743,8,"debugFail"],[777,15,743,17],[777,16,743,18],[777,131,743,133],[777,132,743,134],[778,4,744,4],[779,4,745,4],[779,11,745,11,"response"],[779,19,745,19,"response"],[779,20,745,19],[779,22,745,22],[780,6,746,8],[780,10,746,12],[780,14,746,16],[780,15,746,17,"responseImpl"],[780,27,746,29],[780,29,746,31],[781,8,747,12],[781,15,747,19],[781,19,747,23],[781,20,747,24,"responseImpl"],[781,32,747,36],[782,6,748,8],[783,6,749,8],[783,10,749,12],[783,17,749,19,"self"],[783,21,749,23],[783,26,749,28],[783,37,749,39],[783,41,749,43],[783,51,749,53],[783,55,749,57,"self"],[783,59,749,61],[783,61,749,63],[784,8,750,12],[784,15,750,19,"self"],[784,19,750,23],[784,20,750,24,"Response"],[784,28,750,32],[785,6,751,8],[786,6,752,8],[786,10,752,12],[786,17,752,19,"globalThis"],[786,27,752,29],[786,32,752,34],[786,43,752,45],[786,47,752,49,"globalThis"],[786,57,752,59],[786,58,752,60,"Response"],[786,66,752,68],[786,68,752,70],[787,8,753,12],[787,15,753,19,"globalThis"],[787,25,753,29],[787,26,753,30,"Response"],[787,34,753,38],[788,6,754,8],[789,6,755,8],[789,10,755,12],[789,17,755,19,"Response"],[789,25,755,27],[789,30,755,32],[789,41,755,43],[789,43,755,45],[790,8,756,12],[790,15,756,19,"Response"],[790,23,756,27],[791,6,757,8],[792,6,758,8,"debugFail"],[792,15,758,17],[792,16,758,18],[792,132,758,134],[792,133,758,135],[793,4,759,4],[794,2,760,0],[796,2,762,0],[797,0,763,0],[798,0,764,0],[799,0,765,0],[800,0,766,0],[801,0,767,0],[802,0,768,0],[803,0,769,0],[804,0,770,0],[805,0,771,0],[806,0,772,0],[807,0,773,0],[808,0,774,0],[809,0,775,0],[810,0,776,0],[811,0,777,0],[812,2,778,0],[813,0,779,0],[814,0,780,0],[815,2,778,0,"exports"],[815,9,778,0],[815,10,778,0,"aQ"],[815,12,778,0],[815,15,778,0,"FetchProvider"],[815,28,778,0],[816,2,781,0],[816,8,781,6,"SERVER_ERROR_MAP"],[816,24,781,22],[816,27,781,25],[817,4,782,4],[818,4,783,4],[818,5,783,5],[818,26,783,26],[818,27,783,27],[818,67,783,67],[818,90,783,90],[818,91,783,91],[820,4,784,4],[821,4,785,4],[821,5,785,5],[821,27,785,27],[821,28,785,28],[821,69,785,69],[821,85,785,85],[821,86,785,86],[823,4,786,4],[824,4,787,4],[824,5,787,5],[824,25,787,25],[824,26,787,26],[824,65,787,65],[824,80,787,80],[824,81,787,81],[826,4,788,4],[827,4,789,4],[827,5,789,5],[827,27,789,27],[827,28,789,28],[827,69,789,69],[827,85,789,85],[827,86,789,86],[829,4,790,4],[830,4,791,4],[830,5,791,5],[830,23,791,23],[830,24,791,24],[830,61,791,61],[830,77,791,77],[830,78,791,78],[832,4,792,4],[833,4,793,4],[833,5,793,5],[833,23,793,23],[833,24,793,24],[833,61,793,61],[833,79,793,79],[833,80,793,80],[835,4,794,4],[836,4,795,4],[837,4,796,4],[837,5,796,5],[837,32,796,32],[837,33,796,33],[837,79,796,79],[837,99,796,99],[837,100,796,100],[839,4,797,4],[840,4,798,4],[840,5,798,5],[840,19,798,19],[840,20,798,20],[840,53,798,53],[840,75,798,75],[840,76,798,76],[841,4,799,4],[841,5,799,5],[841,30,799,30],[841,31,799,31],[841,75,799,75],[841,98,799,98],[841,99,799,99],[843,4,800,4],[844,4,801,4],[844,5,801,5],[844,27,801,27],[844,28,801,28],[844,69,801,69],[844,89,801,89],[844,90,801,90],[845,4,802,4],[845,5,802,5],[845,28,802,28],[845,29,802,29],[845,71,802,71],[845,91,802,91],[845,92,802,92],[846,4,803,4],[846,5,803,5],[846,39,803,39],[846,40,803,40],[846,93,803,93],[846,120,803,120],[846,121,803,121],[848,4,804,4],[849,4,805,4],[849,5,805,5],[849,23,805,23],[849,24,805,24],[849,61,805,61],[849,77,805,77],[849,78,805,78],[851,4,806,4],[852,4,807,4],[852,5,807,5],[852,22,807,22],[852,23,807,23],[852,59,807,59],[852,75,807,75],[852,76,807,76],[853,4,808,4],[853,5,808,5],[853,34,808,34],[853,35,808,35],[853,83,808,83],[853,102,808,102],[853,103,808,103],[854,4,809,4],[854,5,809,5],[854,23,809,23],[854,24,809,24],[854,61,809,61],[854,82,809,82],[854,83,809,83],[855,4,810,4],[855,5,810,5],[855,23,810,23],[855,24,810,24],[855,61,810,61],[855,82,810,82],[855,83,810,83],[857,4,811,4],[858,4,812,4],[858,5,812,5],[858,23,812,23],[858,24,812,24],[858,61,812,61],[858,77,812,77],[858,78,812,78],[860,4,813,4],[861,4,814,4],[861,5,814,5],[861,37,814,37],[861,38,814,38],[861,89,814,89],[861,112,814,112],[861,113,814,113],[862,4,815,4],[862,5,815,5],[862,23,815,23],[862,24,815,24],[862,61,815,61],[862,81,815,81],[862,82,815,82],[863,4,816,4],[863,5,816,5],[863,20,816,20],[863,21,816,21],[863,55,816,55],[863,75,816,75],[863,76,816,76],[864,4,817,4],[864,5,817,5],[864,21,817,21],[864,22,817,22],[864,57,817,57],[864,77,817,77],[864,78,817,78],[866,4,818,4],[867,4,819,4],[867,5,819,5],[867,34,819,34],[867,35,819,35],[867,83,819,83],[867,102,819,102],[867,103,819,103],[868,4,820,4],[868,5,820,5],[868,42,820,42],[868,43,820,43],[868,99,820,99],[868,136,820,136],[868,137,820,137],[870,4,821,4],[871,4,822,4],[871,5,822,5],[871,19,822,19],[871,20,822,20],[871,53,822,53],[871,80,822,80],[871,81,822,81],[872,4,823,4],[872,5,823,5],[872,27,823,27],[872,28,823,28],[872,69,823,69],[872,94,823,94],[872,95,823,95],[873,4,824,4],[873,5,824,5],[873,30,824,30],[873,31,824,31],[873,75,824,75],[873,95,824,95],[873,96,824,96],[874,4,825,4],[874,5,825,5],[874,27,825,27],[874,28,825,28],[874,69,825,69],[874,94,825,94],[874,95,825,95],[875,4,826,4],[875,5,826,5],[875,22,826,22],[875,23,826,23],[875,59,826,59],[875,73,826,73],[875,74,826,74],[877,4,827,4],[878,4,828,4],[879,4,829,4],[880,4,830,4],[880,5,830,5],[880,35,830,35],[880,36,830,36],[880,85,830,85],[880,111,830,111],[880,112,830,112],[881,4,831,4],[881,5,831,5],[881,26,831,26],[881,27,831,27],[881,67,831,67],[881,94,831,94],[881,95,831,95],[883,4,832,4],[884,4,833,4],[884,5,833,5],[884,30,833,30],[884,31,833,31],[884,75,833,75],[884,100,833,100],[884,101,833,101],[886,4,834,4],[887,4,835,4],[887,5,835,5],[887,27,835,27],[887,28,835,28],[887,69,835,69],[887,97,835,97],[887,98,835,98],[889,4,836,4],[890,4,837,4],[890,5,837,5],[890,37,837,37],[890,38,837,38],[890,89,837,89],[890,119,837,119],[890,120,837,120],[891,4,838,4],[891,5,838,5],[891,31,838,31],[891,32,838,32],[891,77,838,77],[891,106,838,106],[891,107,838,107],[892,4,839,4],[892,5,839,5],[892,32,839,32],[892,33,839,33],[892,79,839,79],[892,106,839,106],[892,107,839,107],[893,4,840,4],[893,5,840,5],[893,37,840,37],[893,38,840,38],[893,89,840,89],[893,119,840,119],[893,120,840,120],[894,4,841,4],[894,5,841,5],[894,27,841,27],[894,28,841,28],[894,69,841,69],[894,99,841,99],[894,100,841,100],[895,4,842,4],[895,5,842,5],[895,35,842,35],[895,36,842,36],[895,85,842,85],[895,123,842,123],[895,124,842,124],[897,4,843,4],[898,4,844,4],[898,5,844,5],[898,39,844,39],[898,40,844,40],[898,93,844,93],[898,109,844,109],[898,110,844,110],[900,4,845,4],[901,4,846,4],[901,5,846,5],[901,28,846,28],[901,29,846,29],[901,71,846,71],[901,94,846,94],[901,95,846,95],[902,4,847,4],[902,5,847,5],[902,30,847,30],[902,31,847,31],[902,75,847,75],[902,100,847,100],[902,101,847,101],[903,4,848,4],[903,5,848,5],[903,30,848,30],[903,31,848,31],[903,75,848,75],[903,100,848,100],[903,101,848,101],[904,4,849,4],[904,5,849,5],[904,31,849,31],[904,32,849,32],[904,77,849,77],[904,103,849,103],[904,104,849,104],[905,4,850,4],[905,5,850,5],[905,26,850,26],[905,27,850,27],[905,67,850,67],[905,88,850,88],[905,89,850,89],[906,4,851,4],[906,5,851,5],[906,32,851,32],[906,33,851,33],[906,79,851,79],[906,106,851,106],[906,107,851,107],[907,4,852,4],[907,5,852,5],[907,32,852,32],[907,33,852,33],[907,79,852,79],[907,106,852,106],[907,107,852,107],[908,4,853,4],[908,5,853,5],[908,23,853,23],[908,24,853,24],[908,61,853,61],[908,79,853,79],[908,80,853,80],[909,2,854,0],[909,3,854,1],[911,2,856,0],[912,0,857,0],[913,0,858,0],[914,0,859,0],[915,0,860,0],[916,0,861,0],[917,0,862,0],[918,0,863,0],[919,0,864,0],[920,0,865,0],[921,0,866,0],[922,0,867,0],[923,0,868,0],[924,0,869,0],[925,0,870,0],[926,0,871,0],[927,2,872,0],[927,8,872,6,"CookieAuthProxiedEndpoints"],[927,34,872,32],[927,37,872,35],[927,38,873,4],[927,74,873,40],[927,75,873,41],[927,117,874,4],[927,151,874,38],[927,152,874,39],[927,192,875,4],[927,220,875,32],[927,221,875,33],[927,254,876,4],[927,287,876,37],[927,288,876,38],[927,326,877,4],[927,362,877,40],[927,363,877,41],[927,405,878,4],[927,416,878,15],[927,417,878,16],[927,438,879,1],[928,2,880,0],[928,8,880,6,"DEFAULT_API_TIMEOUT_MS"],[928,30,880,28],[928,33,880,31],[928,37,880,35,"Delay"],[928,42,880,40],[928,43,880,41],[928,48,880,46],[928,50,880,48],[928,55,880,53],[928,56,880,54],[929,2,881,0],[929,11,881,9,"_addTidIfNecessary"],[929,29,881,27,"_addTidIfNecessary"],[929,30,881,28,"auth"],[929,34,881,32],[929,36,881,34,"request"],[929,43,881,41],[929,45,881,43],[930,4,882,4],[930,8,882,8,"auth"],[930,12,882,12],[930,13,882,13,"tenantId"],[930,21,882,21],[930,25,882,25],[930,26,882,26,"request"],[930,33,882,33],[930,34,882,34,"tenantId"],[930,42,882,42],[930,44,882,44],[931,6,883,8],[931,13,883,15],[932,8,884,12],[932,11,884,15,"request"],[932,18,884,22],[933,8,885,12,"tenantId"],[933,16,885,20],[933,18,885,22,"auth"],[933,22,885,26],[933,23,885,27,"tenantId"],[934,6,886,8],[934,7,886,9],[935,4,887,4],[936,4,888,4],[936,11,888,11,"request"],[936,18,888,18],[937,2,889,0],[938,2,890,0],[938,17,890,15,"_performApiRequest"],[938,35,890,33,"_performApiRequest"],[938,36,890,34,"auth"],[938,40,890,38],[938,42,890,40,"method"],[938,48,890,46],[938,50,890,48,"path"],[938,54,890,52],[938,56,890,54,"request"],[938,63,890,61],[938,65,890,63,"customErrorMap"],[938,79,890,77],[938,82,890,80],[938,83,890,81],[938,84,890,82],[938,86,890,84],[939,4,891,4],[939,11,891,11,"_performFetchWithErrorHandling"],[939,41,891,41],[939,42,891,42,"auth"],[939,46,891,46],[939,48,891,48,"customErrorMap"],[939,62,891,62],[939,64,891,64],[939,76,891,76],[940,6,892,8],[940,10,892,12,"body"],[940,14,892,16],[940,17,892,19],[940,18,892,20],[940,19,892,21],[941,6,893,8],[941,10,893,12,"params"],[941,16,893,18],[941,19,893,21],[941,20,893,22],[941,21,893,23],[942,6,894,8],[942,10,894,12,"request"],[942,17,894,19],[942,19,894,21],[943,8,895,12],[943,12,895,16,"method"],[943,18,895,22],[943,23,895,27],[943,28,895,32],[943,29,895,33],[943,51,895,55],[944,10,896,16,"params"],[944,16,896,22],[944,19,896,25,"request"],[944,26,896,32],[945,8,897,12],[945,9,897,13],[945,15,898,17],[946,10,899,16,"body"],[946,14,899,20],[946,17,899,23],[947,12,900,20,"body"],[947,16,900,24],[947,18,900,26,"JSON"],[947,22,900,30],[947,23,900,31,"stringify"],[947,32,900,40],[947,33,900,41,"request"],[947,40,900,48],[948,10,901,16],[948,11,901,17],[949,8,902,12],[950,6,903,8],[951,6,904,8],[951,12,904,14,"query"],[951,17,904,19],[951,20,904,22],[951,24,904,22,"querystring"],[951,41,904,33],[951,43,904,34],[952,8,905,12,"key"],[952,11,905,15],[952,13,905,17,"auth"],[952,17,905,21],[952,18,905,22,"config"],[952,24,905,28],[952,25,905,29,"apiKey"],[952,31,905,35],[953,8,906,12],[953,11,906,15,"params"],[954,6,907,8],[954,7,907,9],[954,8,907,10],[954,9,907,11,"slice"],[954,14,907,16],[954,15,907,17],[954,16,907,18],[954,17,907,19],[955,6,908,8],[955,12,908,14,"headers"],[955,19,908,21],[955,22,908,24],[955,28,908,30,"auth"],[955,32,908,34],[955,33,908,35,"_getAdditionalHeaders"],[955,54,908,56],[955,55,908,57],[955,56,908,58],[956,6,909,8,"headers"],[956,13,909,15],[956,14,909,16],[956,28,909,30],[956,29,909,31],[956,59,909,61],[956,62,909,64],[956,80,909,82],[957,6,910,8],[957,10,910,12,"auth"],[957,14,910,16],[957,15,910,17,"languageCode"],[957,27,910,29],[957,29,910,31],[958,8,911,12,"headers"],[958,15,911,19],[958,16,911,20],[958,35,911,39],[958,36,911,40],[958,71,911,75],[958,74,911,78,"auth"],[958,78,911,82],[958,79,911,83,"languageCode"],[958,91,911,95],[959,6,912,8],[960,6,913,8],[960,12,913,14,"fetchArgs"],[960,21,913,23],[960,24,913,26],[961,8,914,12,"method"],[961,14,914,18],[962,8,915,12,"headers"],[962,15,915,19],[963,8,916,12],[963,11,916,15,"body"],[964,6,917,8],[964,7,917,9],[965,6,918,8],[966,0,919,0],[967,0,920,0],[968,0,921,0],[969,6,922,8],[969,10,922,12],[969,11,922,13],[969,15,922,13,"isCloudflareWorker"],[969,39,922,31],[969,41,922,32],[969,42,922,33],[969,44,922,35],[970,8,923,12,"fetchArgs"],[970,17,923,21],[970,18,923,22,"referrerPolicy"],[970,32,923,36],[970,35,923,39],[970,48,923,52],[971,6,924,8],[972,6,925,8],[972,10,925,12,"auth"],[972,14,925,16],[972,15,925,17,"emulatorConfig"],[972,29,925,31],[972,33,925,35],[972,37,925,35,"isCloudWorkstation"],[972,61,925,53],[972,63,925,54,"auth"],[972,67,925,58],[972,68,925,59,"emulatorConfig"],[972,82,925,73],[972,83,925,74,"host"],[972,87,925,78],[972,88,925,79],[972,90,925,81],[973,8,926,12,"fetchArgs"],[973,17,926,21],[973,18,926,22,"credentials"],[973,29,926,33],[973,32,926,36],[973,41,926,45],[974,6,927,8],[975,6,928,8],[975,13,928,15,"FetchProvider"],[975,26,928,28],[975,27,928,29,"fetch"],[975,32,928,34],[975,33,928,35],[975,34,928,36],[975,35,928,37],[975,41,928,43,"_getFinalTarget"],[975,56,928,58],[975,57,928,59,"auth"],[975,61,928,63],[975,63,928,65,"auth"],[975,67,928,69],[975,68,928,70,"config"],[975,74,928,76],[975,75,928,77,"apiHost"],[975,82,928,84],[975,84,928,86,"path"],[975,88,928,90],[975,90,928,92,"query"],[975,95,928,97],[975,96,928,98],[975,98,928,100,"fetchArgs"],[975,107,928,109],[975,108,928,110],[976,4,929,4],[976,5,929,5],[976,6,929,6],[977,2,930,0],[978,2,931,0],[978,17,931,15,"_performFetchWithErrorHandling"],[978,47,931,45,"_performFetchWithErrorHandling"],[978,48,931,46,"auth"],[978,52,931,50],[978,54,931,52,"customErrorMap"],[978,68,931,66],[978,70,931,68,"fetchFn"],[978,77,931,75],[978,79,931,77],[979,4,932,4,"auth"],[979,8,932,8],[979,9,932,9,"_canInitEmulator"],[979,25,932,25],[979,28,932,28],[979,33,932,33],[980,4,933,4],[980,10,933,10,"errorMap"],[980,18,933,18],[980,21,933,21],[981,6,933,23],[981,9,933,26,"SERVER_ERROR_MAP"],[981,25,933,42],[982,6,933,44],[982,9,933,47,"customErrorMap"],[983,4,933,62],[983,5,933,63],[984,4,934,4],[984,8,934,8],[985,6,935,8],[985,12,935,14,"networkTimeout"],[985,26,935,28],[985,29,935,31],[985,33,935,35,"NetworkTimeout"],[985,47,935,49],[985,48,935,50,"auth"],[985,52,935,54],[985,53,935,55],[986,6,936,8],[986,12,936,14,"response"],[986,20,936,22],[986,23,936,25],[986,29,936,31,"Promise"],[986,36,936,38],[986,37,936,39,"race"],[986,41,936,43],[986,42,936,44],[986,43,937,12,"fetchFn"],[986,50,937,19],[986,51,937,20],[986,52,937,21],[986,54,938,12,"networkTimeout"],[986,68,938,26],[986,69,938,27,"promise"],[986,76,938,34],[986,77,939,9],[986,78,939,10],[987,6,940,8],[988,6,941,8],[989,6,942,8,"networkTimeout"],[989,20,942,22],[989,21,942,23,"clearNetworkTimeout"],[989,40,942,42],[989,41,942,43],[989,42,942,44],[990,6,943,8],[990,12,943,14,"json"],[990,16,943,18],[990,19,943,21],[990,25,943,27,"response"],[990,33,943,35],[990,34,943,36,"json"],[990,38,943,40],[990,39,943,41],[990,40,943,42],[991,6,944,8],[991,10,944,12],[991,28,944,30],[991,32,944,34,"json"],[991,36,944,38],[991,38,944,40],[992,8,945,12],[992,14,945,18,"_makeTaggedError"],[992,30,945,34],[992,31,945,35,"auth"],[992,35,945,39],[992,37,945,41],[992,79,945,83],[992,80,945,84],[992,119,945,123,"json"],[992,123,945,127],[992,124,945,128],[993,6,946,8],[994,6,947,8],[994,10,947,12,"response"],[994,18,947,20],[994,19,947,21,"ok"],[994,21,947,23],[994,25,947,27],[994,27,947,29],[994,41,947,43],[994,45,947,47,"json"],[994,49,947,51],[994,50,947,52],[994,52,947,54],[995,8,948,12],[995,15,948,19,"json"],[995,19,948,23],[996,6,949,8],[996,7,949,9],[996,13,950,13],[997,8,951,12],[997,14,951,18,"errorMessage"],[997,26,951,30],[997,29,951,33,"response"],[997,37,951,41],[997,38,951,42,"ok"],[997,40,951,44],[997,43,951,47,"json"],[997,47,951,51],[997,48,951,52,"errorMessage"],[997,60,951,64],[997,63,951,67,"json"],[997,67,951,71],[997,68,951,72,"error"],[997,73,951,77],[997,74,951,78,"message"],[997,81,951,85],[998,8,952,12],[998,14,952,18],[998,15,952,19,"serverErrorCode"],[998,30,952,34],[998,32,952,36,"serverErrorMessage"],[998,50,952,54],[998,51,952,55],[998,54,952,58,"errorMessage"],[998,66,952,70],[998,67,952,71,"split"],[998,72,952,76],[998,73,952,77],[998,78,952,82],[998,79,952,83],[999,8,953,12],[999,12,953,16,"serverErrorCode"],[999,27,953,31],[999,32,953,36],[999,66,953,70],[999,67,953,71],[999,119,953,123],[1000,10,954,16],[1000,16,954,22,"_makeTaggedError"],[1000,32,954,38],[1000,33,954,39,"auth"],[1000,37,954,43],[1000,39,954,45],[1000,66,954,72],[1000,67,954,73],[1000,114,954,120,"json"],[1000,118,954,124],[1000,119,954,125],[1001,8,955,12],[1001,9,955,13],[1001,15,956,17],[1001,19,956,21,"serverErrorCode"],[1001,34,956,36],[1001,39,956,41],[1001,53,956,55],[1001,54,956,56],[1001,86,956,88],[1002,10,957,16],[1002,16,957,22,"_makeTaggedError"],[1002,32,957,38],[1002,33,957,39,"auth"],[1002,37,957,43],[1002,39,957,45],[1002,61,957,67],[1002,62,957,68],[1002,96,957,102,"json"],[1002,100,957,106],[1002,101,957,107],[1003,8,958,12],[1003,9,958,13],[1003,15,959,17],[1003,19,959,21,"serverErrorCode"],[1003,34,959,36],[1003,39,959,41],[1003,54,959,56],[1003,55,959,57],[1003,88,959,90],[1004,10,960,16],[1004,16,960,22,"_makeTaggedError"],[1004,32,960,38],[1004,33,960,39,"auth"],[1004,37,960,43],[1004,39,960,45],[1004,54,960,60],[1004,55,960,61],[1004,90,960,96,"json"],[1004,94,960,100],[1004,95,960,101],[1005,8,961,12],[1006,8,962,12],[1006,14,962,18,"authError"],[1006,23,962,27],[1006,26,962,30,"errorMap"],[1006,34,962,38],[1006,35,962,39,"serverErrorCode"],[1006,50,962,54],[1006,51,962,55],[1006,55,963,16,"serverErrorCode"],[1006,70,963,31],[1006,71,964,21,"toLowerCase"],[1006,82,964,32],[1006,83,964,33],[1006,84,964,34],[1006,85,965,21,"replace"],[1006,92,965,28],[1006,93,965,29],[1006,102,965,38],[1006,104,965,40],[1006,107,965,43],[1006,108,965,44],[1007,8,966,12],[1007,12,966,16,"serverErrorMessage"],[1007,30,966,34],[1007,32,966,36],[1008,10,967,16],[1008,16,967,22,"_errorWithCustomMessage"],[1008,39,967,45],[1008,40,967,46,"auth"],[1008,44,967,50],[1008,46,967,52,"authError"],[1008,55,967,61],[1008,57,967,63,"serverErrorMessage"],[1008,75,967,81],[1008,76,967,82],[1009,8,968,12],[1009,9,968,13],[1009,15,969,17],[1010,10,970,16,"_fail"],[1010,15,970,21],[1010,16,970,22,"auth"],[1010,20,970,26],[1010,22,970,28,"authError"],[1010,31,970,37],[1010,32,970,38],[1011,8,971,12],[1012,6,972,8],[1013,4,973,4],[1013,5,973,5],[1013,6,974,4],[1013,13,974,11,"e"],[1013,14,974,12],[1013,16,974,14],[1014,6,975,8],[1014,10,975,12,"e"],[1014,11,975,13],[1014,23,975,25,"FirebaseError"],[1014,42,975,38],[1014,44,975,40],[1015,8,976,12],[1015,14,976,18,"e"],[1015,15,976,19],[1016,6,977,8],[1017,6,978,8],[1018,6,979,8],[1019,6,980,8],[1020,6,981,8,"_fail"],[1020,11,981,13],[1020,12,981,14,"auth"],[1020,16,981,18],[1020,18,981,20],[1020,42,981,44],[1020,43,981,45],[1020,87,981,89],[1021,8,981,91],[1021,17,981,100],[1021,19,981,102,"String"],[1021,25,981,108],[1021,26,981,109,"e"],[1021,27,981,110],[1022,6,981,112],[1022,7,981,113],[1022,8,981,114],[1023,4,982,4],[1024,2,983,0],[1025,2,984,0],[1025,17,984,15,"_performSignInRequest"],[1025,38,984,36,"_performSignInRequest"],[1025,39,984,37,"auth"],[1025,43,984,41],[1025,45,984,43,"method"],[1025,51,984,49],[1025,53,984,51,"path"],[1025,57,984,55],[1025,59,984,57,"request"],[1025,66,984,64],[1025,68,984,66,"customErrorMap"],[1025,82,984,80],[1025,85,984,83],[1025,86,984,84],[1025,87,984,85],[1025,89,984,87],[1026,4,985,4],[1026,10,985,10,"serverResponse"],[1026,24,985,24],[1026,27,985,27],[1026,33,985,33,"_performApiRequest"],[1026,51,985,51],[1026,52,985,52,"auth"],[1026,56,985,56],[1026,58,985,58,"method"],[1026,64,985,64],[1026,66,985,66,"path"],[1026,70,985,70],[1026,72,985,72,"request"],[1026,79,985,79],[1026,81,985,81,"customErrorMap"],[1026,95,985,95],[1026,96,985,96],[1027,4,986,4],[1027,8,986,8],[1027,30,986,30],[1027,34,986,34,"serverResponse"],[1027,48,986,48],[1027,50,986,50],[1028,6,987,8,"_fail"],[1028,11,987,13],[1028,12,987,14,"auth"],[1028,16,987,18],[1028,18,987,20],[1028,46,987,48],[1028,47,987,49],[1028,81,987,83],[1029,8,988,12,"_serverResponse"],[1029,23,988,27],[1029,25,988,29,"serverResponse"],[1030,6,989,8],[1030,7,989,9],[1030,8,989,10],[1031,4,990,4],[1032,4,991,4],[1032,11,991,11,"serverResponse"],[1032,25,991,25],[1033,2,992,0],[1034,2,993,0],[1034,17,993,15,"_getFinalTarget"],[1034,32,993,30,"_getFinalTarget"],[1034,33,993,31,"auth"],[1034,37,993,35],[1034,39,993,37,"host"],[1034,43,993,41],[1034,45,993,43,"path"],[1034,49,993,47],[1034,51,993,49,"query"],[1034,56,993,54],[1034,58,993,56],[1035,4,994,4],[1035,10,994,10,"base"],[1035,14,994,14],[1035,17,994,17],[1035,20,994,20,"host"],[1035,24,994,24],[1035,27,994,27,"path"],[1035,31,994,31],[1035,35,994,35,"query"],[1035,40,994,40],[1035,42,994,42],[1036,4,995,4],[1036,10,995,10,"authInternal"],[1036,22,995,22],[1036,25,995,25,"auth"],[1036,29,995,29],[1037,4,996,4],[1037,10,996,10,"finalTarget"],[1037,21,996,21],[1037,24,996,24,"authInternal"],[1037,36,996,36],[1037,37,996,37,"config"],[1037,43,996,43],[1037,44,996,44,"emulator"],[1037,52,996,52],[1037,55,997,10,"_emulatorUrl"],[1037,67,997,22],[1037,68,997,23,"auth"],[1037,72,997,27],[1037,73,997,28,"config"],[1037,79,997,34],[1037,81,997,36,"base"],[1037,85,997,40],[1037,86,997,41],[1037,89,998,10],[1037,92,998,13,"auth"],[1037,96,998,17],[1037,97,998,18,"config"],[1037,103,998,24],[1037,104,998,25,"apiScheme"],[1037,113,998,34],[1037,119,998,40,"base"],[1037,123,998,44],[1037,125,998,46],[1038,4,999,4],[1039,4,1000,4],[1040,4,1001,4],[1041,4,1002,4],[1041,8,1002,8,"CookieAuthProxiedEndpoints"],[1041,34,1002,34],[1041,35,1002,35,"includes"],[1041,43,1002,43],[1041,44,1002,44,"path"],[1041,48,1002,48],[1041,49,1002,49],[1041,51,1002,51],[1042,6,1003,8],[1043,6,1004,8],[1044,6,1005,8],[1044,12,1005,14,"authInternal"],[1044,24,1005,26],[1044,25,1005,27,"_persistenceManagerAvailable"],[1044,53,1005,55],[1045,6,1006,8],[1045,10,1006,12,"authInternal"],[1045,22,1006,24],[1045,23,1006,25,"_getPersistenceType"],[1045,42,1006,44],[1045,43,1006,45],[1045,44,1006,46],[1045,49,1006,51],[1045,57,1006,59],[1045,58,1006,60],[1045,88,1006,90],[1046,8,1007,12],[1046,14,1007,18,"cookiePersistence"],[1046,31,1007,35],[1046,34,1007,38,"authInternal"],[1046,46,1007,50],[1046,47,1007,51,"_getPersistence"],[1046,62,1007,66],[1046,63,1007,67],[1046,64,1007,68],[1047,8,1008,12],[1047,15,1008,19,"cookiePersistence"],[1047,32,1008,36],[1047,33,1008,37,"_getFinalTarget"],[1047,48,1008,52],[1047,49,1008,53,"finalTarget"],[1047,60,1008,64],[1047,61,1008,65],[1047,62,1008,66,"toString"],[1047,70,1008,74],[1047,71,1008,75],[1047,72,1008,76],[1048,6,1009,8],[1049,4,1010,4],[1050,4,1011,4],[1050,11,1011,11,"finalTarget"],[1050,22,1011,22],[1051,2,1012,0],[1052,2,1013,0],[1052,11,1013,9,"_parseEnforcementState"],[1052,33,1013,31,"_parseEnforcementState"],[1052,34,1013,32,"enforcementStateStr"],[1052,53,1013,51],[1052,55,1013,53],[1053,4,1014,4],[1053,12,1014,12,"enforcementStateStr"],[1053,31,1014,31],[1054,6,1015,8],[1054,11,1015,13],[1054,20,1015,22],[1055,8,1016,12],[1055,15,1016,19],[1055,24,1016,28],[1055,25,1016,29],[1056,6,1017,8],[1056,11,1017,13],[1056,18,1017,20],[1057,8,1018,12],[1057,15,1018,19],[1057,22,1018,26],[1057,23,1018,27],[1058,6,1019,8],[1058,11,1019,13],[1058,16,1019,18],[1059,8,1020,12],[1059,15,1020,19],[1059,20,1020,24],[1059,21,1020,25],[1060,6,1021,8],[1061,8,1022,12],[1061,15,1022,19],[1061,46,1022,50],[1061,47,1022,51],[1062,4,1023,4],[1063,2,1024,0],[1064,2,1025,0],[1064,8,1025,6,"NetworkTimeout"],[1064,22,1025,20],[1064,23,1025,21],[1065,4,1026,4,"clearNetworkTimeout"],[1065,23,1026,23,"clearNetworkTimeout"],[1065,24,1026,23],[1065,26,1026,26],[1066,6,1027,8,"clearTimeout"],[1066,18,1027,20],[1066,19,1027,21],[1066,23,1027,25],[1066,24,1027,26,"timer"],[1066,29,1027,31],[1066,30,1027,32],[1067,4,1028,4],[1068,4,1029,4,"constructor"],[1068,15,1029,15,"constructor"],[1068,16,1029,16,"auth"],[1068,20,1029,20],[1068,22,1029,22],[1069,6,1030,8],[1069,10,1030,12],[1069,11,1030,13,"auth"],[1069,15,1030,17],[1069,18,1030,20,"auth"],[1069,22,1030,24],[1070,6,1031,8],[1071,6,1032,8],[1072,6,1033,8],[1073,6,1034,8],[1073,10,1034,12],[1073,11,1034,13,"timer"],[1073,16,1034,18],[1073,19,1034,21],[1073,23,1034,25],[1074,6,1035,8],[1074,10,1035,12],[1074,11,1035,13,"promise"],[1074,18,1035,20],[1074,21,1035,23],[1074,25,1035,27,"Promise"],[1074,32,1035,34],[1074,33,1035,35],[1074,34,1035,36,"_"],[1074,35,1035,37],[1074,37,1035,39,"reject"],[1074,43,1035,45],[1074,48,1035,50],[1075,8,1036,12],[1075,12,1036,16],[1075,13,1036,17,"timer"],[1075,18,1036,22],[1075,21,1036,25,"setTimeout"],[1075,31,1036,35],[1075,32,1036,36],[1075,38,1036,42],[1076,10,1037,16],[1076,17,1037,23,"reject"],[1076,23,1037,29],[1076,24,1037,30,"_createError"],[1076,36,1037,42],[1076,37,1037,43],[1076,41,1037,47],[1076,42,1037,48,"auth"],[1076,46,1037,52],[1076,48,1037,54],[1076,72,1037,78],[1076,73,1037,79],[1076,115,1037,121],[1076,116,1037,122],[1076,117,1037,123],[1077,8,1038,12],[1077,9,1038,13],[1077,11,1038,15,"DEFAULT_API_TIMEOUT_MS"],[1077,33,1038,37],[1077,34,1038,38,"get"],[1077,37,1038,41],[1077,38,1038,42],[1077,39,1038,43],[1077,40,1038,44],[1078,6,1039,8],[1078,7,1039,9],[1078,8,1039,10],[1079,4,1040,4],[1080,2,1041,0],[1081,2,1042,0],[1081,11,1042,9,"_makeTaggedError"],[1081,27,1042,25,"_makeTaggedError"],[1081,28,1042,26,"auth"],[1081,32,1042,30],[1081,34,1042,32,"code"],[1081,38,1042,36],[1081,40,1042,38,"response"],[1081,48,1042,46],[1081,50,1042,48],[1082,4,1043,4],[1082,10,1043,10,"errorParams"],[1082,21,1043,21],[1082,24,1043,24],[1083,6,1044,8,"appName"],[1083,13,1044,15],[1083,15,1044,17,"auth"],[1083,19,1044,21],[1083,20,1044,22,"name"],[1084,4,1045,4],[1084,5,1045,5],[1085,4,1046,4],[1085,8,1046,8,"response"],[1085,16,1046,16],[1085,17,1046,17,"email"],[1085,22,1046,22],[1085,24,1046,24],[1086,6,1047,8,"errorParams"],[1086,17,1047,19],[1086,18,1047,20,"email"],[1086,23,1047,25],[1086,26,1047,28,"response"],[1086,34,1047,36],[1086,35,1047,37,"email"],[1086,40,1047,42],[1087,4,1048,4],[1088,4,1049,4],[1088,8,1049,8,"response"],[1088,16,1049,16],[1088,17,1049,17,"phoneNumber"],[1088,28,1049,28],[1088,30,1049,30],[1089,6,1050,8,"errorParams"],[1089,17,1050,19],[1089,18,1050,20,"phoneNumber"],[1089,29,1050,31],[1089,32,1050,34,"response"],[1089,40,1050,42],[1089,41,1050,43,"phoneNumber"],[1089,52,1050,54],[1090,4,1051,4],[1091,4,1052,4],[1091,10,1052,10,"error"],[1091,15,1052,15],[1091,18,1052,18,"_createError"],[1091,30,1052,30],[1091,31,1052,31,"auth"],[1091,35,1052,35],[1091,37,1052,37,"code"],[1091,41,1052,41],[1091,43,1052,43,"errorParams"],[1091,54,1052,54],[1091,55,1052,55],[1092,4,1053,4],[1093,4,1054,4,"error"],[1093,9,1054,9],[1093,10,1054,10,"customData"],[1093,20,1054,20],[1093,21,1054,21,"_tokenResponse"],[1093,35,1054,35],[1093,38,1054,38,"response"],[1093,46,1054,46],[1094,4,1055,4],[1094,11,1055,11,"error"],[1094,16,1055,16],[1095,2,1056,0],[1097,2,1058,0],[1098,0,1059,0],[1099,0,1060,0],[1100,0,1061,0],[1101,0,1062,0],[1102,0,1063,0],[1103,0,1064,0],[1104,0,1065,0],[1105,0,1066,0],[1106,0,1067,0],[1107,0,1068,0],[1108,0,1069,0],[1109,0,1070,0],[1110,0,1071,0],[1111,0,1072,0],[1112,0,1073,0],[1113,2,1074,0],[1113,11,1074,9,"isV2"],[1113,15,1074,13,"isV2"],[1113,16,1074,14,"grecaptcha"],[1113,26,1074,24],[1113,28,1074,26],[1114,4,1075,4],[1114,11,1075,12,"grecaptcha"],[1114,21,1075,22],[1114,26,1075,27,"undefined"],[1114,35,1075,36],[1114,39,1076,8,"grecaptcha"],[1114,49,1076,18],[1114,50,1076,19,"getResponse"],[1114,61,1076,30],[1114,66,1076,35,"undefined"],[1114,75,1076,44],[1115,2,1077,0],[1116,2,1078,0],[1116,11,1078,9,"isEnterprise"],[1116,23,1078,21,"isEnterprise"],[1116,24,1078,22,"grecaptcha"],[1116,34,1078,32],[1116,36,1078,34],[1117,4,1079,4],[1117,11,1079,12,"grecaptcha"],[1117,21,1079,22],[1117,26,1079,27,"undefined"],[1117,35,1079,36],[1117,39,1080,8,"grecaptcha"],[1117,49,1080,18],[1117,50,1080,19,"enterprise"],[1117,60,1080,29],[1117,65,1080,34,"undefined"],[1117,74,1080,43],[1118,2,1081,0],[1119,2,1082,0],[1119,8,1082,6,"RecaptchaConfig"],[1119,23,1082,21],[1119,24,1082,22],[1120,4,1083,4,"constructor"],[1120,15,1083,15,"constructor"],[1120,16,1083,16,"response"],[1120,24,1083,24],[1120,26,1083,26],[1121,6,1084,8],[1122,0,1085,0],[1123,0,1086,0],[1124,6,1087,8],[1124,10,1087,12],[1124,11,1087,13,"siteKey"],[1124,18,1087,20],[1124,21,1087,23],[1124,23,1087,25],[1125,6,1088,8],[1126,0,1089,0],[1127,0,1090,0],[1128,6,1091,8],[1128,10,1091,12],[1128,11,1091,13,"recaptchaEnforcementState"],[1128,36,1091,38],[1128,39,1091,41],[1128,41,1091,43],[1129,6,1092,8],[1129,10,1092,12,"response"],[1129,18,1092,20],[1129,19,1092,21,"recaptchaKey"],[1129,31,1092,33],[1129,36,1092,38,"undefined"],[1129,45,1092,47],[1129,47,1092,49],[1130,8,1093,12],[1130,14,1093,18],[1130,18,1093,22,"Error"],[1130,23,1093,27],[1130,24,1093,28],[1130,48,1093,52],[1130,49,1093,53],[1131,6,1094,8],[1132,6,1095,8],[1133,6,1096,8],[1133,10,1096,12],[1133,11,1096,13,"siteKey"],[1133,18,1096,20],[1133,21,1096,23,"response"],[1133,29,1096,31],[1133,30,1096,32,"recaptchaKey"],[1133,42,1096,44],[1133,43,1096,45,"split"],[1133,48,1096,50],[1133,49,1096,51],[1133,52,1096,54],[1133,53,1096,55],[1133,54,1096,56],[1133,55,1096,57],[1133,56,1096,58],[1134,6,1097,8],[1134,10,1097,12],[1134,11,1097,13,"recaptchaEnforcementState"],[1134,36,1097,38],[1134,39,1097,41,"response"],[1134,47,1097,49],[1134,48,1097,50,"recaptchaEnforcementState"],[1134,73,1097,75],[1135,4,1098,4],[1136,4,1099,4],[1137,0,1100,0],[1138,0,1101,0],[1139,0,1102,0],[1140,0,1103,0],[1141,0,1104,0],[1142,4,1105,4,"getProviderEnforcementState"],[1142,31,1105,31,"getProviderEnforcementState"],[1142,32,1105,32,"providerStr"],[1142,43,1105,43],[1142,45,1105,45],[1143,6,1106,8],[1143,10,1106,12],[1143,11,1106,13],[1143,15,1106,17],[1143,16,1106,18,"recaptchaEnforcementState"],[1143,41,1106,43],[1143,45,1107,12],[1143,49,1107,16],[1143,50,1107,17,"recaptchaEnforcementState"],[1143,75,1107,42],[1143,76,1107,43,"length"],[1143,82,1107,49],[1143,87,1107,54],[1143,88,1107,55],[1143,90,1107,57],[1144,8,1108,12],[1144,15,1108,19],[1144,19,1108,23],[1145,6,1109,8],[1146,6,1110,8],[1146,11,1110,13],[1146,17,1110,19,"recaptchaEnforcementState"],[1146,42,1110,44],[1146,46,1110,48],[1146,50,1110,52],[1146,51,1110,53,"recaptchaEnforcementState"],[1146,76,1110,78],[1146,78,1110,80],[1147,8,1111,12],[1147,12,1111,16,"recaptchaEnforcementState"],[1147,37,1111,41],[1147,38,1111,42,"provider"],[1147,46,1111,50],[1147,50,1112,16,"recaptchaEnforcementState"],[1147,75,1112,41],[1147,76,1112,42,"provider"],[1147,84,1112,50],[1147,89,1112,55,"providerStr"],[1147,100,1112,66],[1147,102,1112,68],[1148,10,1113,16],[1148,17,1113,23,"_parseEnforcementState"],[1148,39,1113,45],[1148,40,1113,46,"recaptchaEnforcementState"],[1148,65,1113,71],[1148,66,1113,72,"enforcementState"],[1148,82,1113,88],[1148,83,1113,89],[1149,8,1114,12],[1150,6,1115,8],[1151,6,1116,8],[1151,13,1116,15],[1151,17,1116,19],[1152,4,1117,4],[1153,4,1118,4],[1154,0,1119,0],[1155,0,1120,0],[1156,0,1121,0],[1157,0,1122,0],[1158,0,1123,0],[1159,4,1124,4,"isProviderEnabled"],[1159,21,1124,21,"isProviderEnabled"],[1159,22,1124,22,"providerStr"],[1159,33,1124,33],[1159,35,1124,35],[1160,6,1125,8],[1160,13,1125,16],[1160,17,1125,20],[1160,18,1125,21,"getProviderEnforcementState"],[1160,45,1125,48],[1160,46,1125,49,"providerStr"],[1160,57,1125,60],[1160,58,1125,61],[1160,63,1126,12],[1160,72,1126,21],[1160,73,1126,22],[1160,107,1127,12],[1160,111,1127,16],[1160,112,1127,17,"getProviderEnforcementState"],[1160,139,1127,44],[1160,140,1127,45,"providerStr"],[1160,151,1127,56],[1160,152,1127,57],[1160,157,1127,62],[1160,164,1127,69],[1160,165,1127,70],[1161,4,1128,4],[1162,4,1129,4],[1163,0,1130,0],[1164,0,1131,0],[1165,0,1132,0],[1166,0,1133,0],[1167,0,1134,0],[1168,4,1135,4,"isAnyProviderEnabled"],[1168,24,1135,24,"isAnyProviderEnabled"],[1168,25,1135,24],[1168,27,1135,27],[1169,6,1136,8],[1169,13,1136,16],[1169,17,1136,20],[1169,18,1136,21,"isProviderEnabled"],[1169,35,1136,38],[1169,36,1136,39],[1169,61,1136,64],[1169,62,1136,65],[1169,113,1136,116],[1169,114,1136,117],[1169,118,1137,12],[1169,122,1137,16],[1169,123,1137,17,"isProviderEnabled"],[1169,140,1137,34],[1169,141,1137,35],[1169,157,1137,51],[1169,158,1137,52],[1169,200,1137,94],[1169,201,1137,95],[1170,4,1138,4],[1171,2,1139,0],[1173,2,1141,0],[1174,0,1142,0],[1175,0,1143,0],[1176,0,1144,0],[1177,0,1145,0],[1178,0,1146,0],[1179,0,1147,0],[1180,0,1148,0],[1181,0,1149,0],[1182,0,1150,0],[1183,0,1151,0],[1184,0,1152,0],[1185,0,1153,0],[1186,0,1154,0],[1187,0,1155,0],[1188,0,1156,0],[1189,2,1157,0],[1189,17,1157,15,"getRecaptchaParams"],[1189,35,1157,33,"getRecaptchaParams"],[1189,36,1157,34,"auth"],[1189,40,1157,38],[1189,42,1157,40],[1190,4,1158,4],[1190,11,1158,12],[1190,12,1158,13],[1190,18,1158,19,"_performApiRequest"],[1190,36,1158,37],[1190,37,1158,38,"auth"],[1190,41,1158,42],[1190,43,1158,44],[1190,48,1158,49],[1190,49,1158,50],[1190,71,1158,72],[1190,92,1158,93],[1190,93,1158,94],[1190,127,1158,128],[1190,128,1158,129],[1190,130,1158,131,"recaptchaSiteKey"],[1190,146,1158,147],[1190,150,1158,151],[1190,152,1158,153],[1191,2,1159,0],[1192,2,1160,0],[1192,17,1160,15,"getRecaptchaConfig"],[1192,35,1160,33,"getRecaptchaConfig"],[1192,36,1160,34,"auth"],[1192,40,1160,38],[1192,42,1160,40,"request"],[1192,49,1160,47],[1192,51,1160,49],[1193,4,1161,4],[1193,11,1161,11,"_performApiRequest"],[1193,29,1161,29],[1193,30,1161,30,"auth"],[1193,34,1161,34],[1193,36,1161,36],[1193,41,1161,41],[1193,42,1161,42],[1193,64,1161,64],[1193,85,1161,85],[1193,86,1161,86],[1193,123,1161,123,"_addTidIfNecessary"],[1193,141,1161,141],[1193,142,1161,142,"auth"],[1193,146,1161,146],[1193,148,1161,148,"request"],[1193,155,1161,155],[1193,156,1161,156],[1193,157,1161,157],[1194,2,1162,0],[1196,2,1164,0],[1197,0,1165,0],[1198,0,1166,0],[1199,0,1167,0],[1200,0,1168,0],[1201,0,1169,0],[1202,0,1170,0],[1203,0,1171,0],[1204,0,1172,0],[1205,0,1173,0],[1206,0,1174,0],[1207,0,1175,0],[1208,0,1176,0],[1209,0,1177,0],[1210,0,1178,0],[1211,0,1179,0],[1212,2,1180,0],[1212,17,1180,15,"deleteAccount"],[1212,30,1180,28,"deleteAccount"],[1212,31,1180,29,"auth"],[1212,35,1180,33],[1212,37,1180,35,"request"],[1212,44,1180,42],[1212,46,1180,44],[1213,4,1181,4],[1213,11,1181,11,"_performApiRequest"],[1213,29,1181,29],[1213,30,1181,30,"auth"],[1213,34,1181,34],[1213,36,1181,36],[1213,42,1181,42],[1213,43,1181,43],[1213,66,1181,66],[1213,87,1181,87],[1213,88,1181,88],[1213,119,1181,119,"request"],[1213,126,1181,126],[1213,127,1181,127],[1214,2,1182,0],[1215,2,1183,0],[1215,17,1183,15,"deleteLinkedAccounts"],[1215,37,1183,35,"deleteLinkedAccounts"],[1215,38,1183,36,"auth"],[1215,42,1183,40],[1215,44,1183,42,"request"],[1215,51,1183,49],[1215,53,1183,51],[1216,4,1184,4],[1216,11,1184,11,"_performApiRequest"],[1216,29,1184,29],[1216,30,1184,30,"auth"],[1216,34,1184,34],[1216,36,1184,36],[1216,42,1184,42],[1216,43,1184,43],[1216,66,1184,66],[1216,87,1184,87],[1216,88,1184,88],[1216,121,1184,121,"request"],[1216,128,1184,128],[1216,129,1184,129],[1217,2,1185,0],[1218,2,1186,0],[1218,17,1186,15,"getAccountInfo"],[1218,31,1186,29,"getAccountInfo"],[1218,32,1186,30,"auth"],[1218,36,1186,34],[1218,38,1186,36,"request"],[1218,45,1186,43],[1218,47,1186,45],[1219,4,1187,4],[1219,11,1187,11,"_performApiRequest"],[1219,29,1187,29],[1219,30,1187,30,"auth"],[1219,34,1187,34],[1219,36,1187,36],[1219,42,1187,42],[1219,43,1187,43],[1219,66,1187,66],[1219,87,1187,87],[1219,88,1187,88],[1219,121,1187,121,"request"],[1219,128,1187,128],[1219,129,1187,129],[1220,2,1188,0],[1222,2,1190,0],[1223,0,1191,0],[1224,0,1192,0],[1225,0,1193,0],[1226,0,1194,0],[1227,0,1195,0],[1228,0,1196,0],[1229,0,1197,0],[1230,0,1198,0],[1231,0,1199,0],[1232,0,1200,0],[1233,0,1201,0],[1234,0,1202,0],[1235,0,1203,0],[1236,0,1204,0],[1237,0,1205,0],[1238,2,1206,0],[1238,11,1206,9,"utcTimestampToDateString"],[1238,35,1206,33,"utcTimestampToDateString"],[1238,36,1206,34,"utcTimestamp"],[1238,48,1206,46],[1238,50,1206,48],[1239,4,1207,4],[1239,8,1207,8],[1239,9,1207,9,"utcTimestamp"],[1239,21,1207,21],[1239,23,1207,23],[1240,6,1208,8],[1240,13,1208,15,"undefined"],[1240,22,1208,24],[1241,4,1209,4],[1242,4,1210,4],[1242,8,1210,8],[1243,6,1211,8],[1244,6,1212,8],[1244,12,1212,14,"date"],[1244,16,1212,18],[1244,19,1212,21],[1244,23,1212,25,"Date"],[1244,27,1212,29],[1244,28,1212,30,"Number"],[1244,34,1212,36],[1244,35,1212,37,"utcTimestamp"],[1244,47,1212,49],[1244,48,1212,50],[1244,49,1212,51],[1245,6,1213,8],[1246,6,1214,8],[1246,10,1214,12],[1246,11,1214,13,"isNaN"],[1246,16,1214,18],[1246,17,1214,19,"date"],[1246,21,1214,23],[1246,22,1214,24,"getTime"],[1246,29,1214,31],[1246,30,1214,32],[1246,31,1214,33],[1246,32,1214,34],[1246,34,1214,36],[1247,8,1215,12],[1248,8,1216,12],[1248,15,1216,19,"date"],[1248,19,1216,23],[1248,20,1216,24,"toUTCString"],[1248,31,1216,35],[1248,32,1216,36],[1248,33,1216,37],[1249,6,1217,8],[1250,4,1218,4],[1250,5,1218,5],[1250,6,1219,4],[1250,13,1219,11,"e"],[1250,14,1219,12],[1250,16,1219,14],[1251,6,1220,8],[1252,4,1220,8],[1253,4,1222,4],[1253,11,1222,11,"undefined"],[1253,20,1222,20],[1254,2,1223,0],[1256,2,1225,0],[1257,0,1226,0],[1258,0,1227,0],[1259,0,1228,0],[1260,0,1229,0],[1261,0,1230,0],[1262,0,1231,0],[1263,0,1232,0],[1264,0,1233,0],[1265,0,1234,0],[1266,0,1235,0],[1267,0,1236,0],[1268,0,1237,0],[1269,0,1238,0],[1270,0,1239,0],[1271,0,1240,0],[1272,2,1241,0],[1273,0,1242,0],[1274,0,1243,0],[1275,0,1244,0],[1276,0,1245,0],[1277,0,1246,0],[1278,0,1247,0],[1279,0,1248,0],[1280,0,1249,0],[1281,0,1250,0],[1282,0,1251,0],[1283,0,1252,0],[1284,2,1253,0],[1284,11,1253,9,"getIdToken"],[1284,21,1253,19,"getIdToken"],[1284,22,1253,20,"user"],[1284,26,1253,24],[1284,28,1253,26,"forceRefresh"],[1284,40,1253,38],[1284,43,1253,41],[1284,48,1253,46],[1284,50,1253,48],[1285,4,1254,4],[1285,11,1254,11],[1285,15,1254,11,"getModularInstance"],[1285,39,1254,29],[1285,41,1254,30,"user"],[1285,45,1254,34],[1285,46,1254,35],[1285,47,1254,36,"getIdToken"],[1285,57,1254,46],[1285,58,1254,47,"forceRefresh"],[1285,70,1254,59],[1285,71,1254,60],[1286,2,1255,0],[1287,2,1256,0],[1288,0,1257,0],[1289,0,1258,0],[1290,0,1259,0],[1291,0,1260,0],[1292,0,1261,0],[1293,0,1262,0],[1294,0,1263,0],[1295,0,1264,0],[1296,0,1265,0],[1297,0,1266,0],[1298,0,1267,0],[1299,2,1268,0],[1299,17,1268,15,"getIdTokenResult"],[1299,33,1268,31,"getIdTokenResult"],[1299,34,1268,32,"user"],[1299,38,1268,36],[1299,40,1268,38,"forceRefresh"],[1299,52,1268,50],[1299,55,1268,53],[1299,60,1268,58],[1299,62,1268,60],[1300,4,1269,4],[1300,10,1269,10,"userInternal"],[1300,22,1269,22],[1300,25,1269,25],[1300,29,1269,25,"getModularInstance"],[1300,53,1269,43],[1300,55,1269,44,"user"],[1300,59,1269,48],[1300,60,1269,49],[1301,4,1270,4],[1301,10,1270,10,"token"],[1301,15,1270,15],[1301,18,1270,18],[1301,24,1270,24,"userInternal"],[1301,36,1270,36],[1301,37,1270,37,"getIdToken"],[1301,47,1270,47],[1301,48,1270,48,"forceRefresh"],[1301,60,1270,60],[1301,61,1270,61],[1302,4,1271,4],[1302,10,1271,10,"claims"],[1302,16,1271,16],[1302,19,1271,19,"_parseToken"],[1302,30,1271,30],[1302,31,1271,31,"token"],[1302,36,1271,36],[1302,37,1271,37],[1303,4,1272,4,"_assert"],[1303,11,1272,11],[1303,12,1272,12,"claims"],[1303,18,1272,18],[1303,22,1272,22,"claims"],[1303,28,1272,28],[1303,29,1272,29,"exp"],[1303,32,1272,32],[1303,36,1272,36,"claims"],[1303,42,1272,42],[1303,43,1272,43,"auth_time"],[1303,52,1272,52],[1303,56,1272,56,"claims"],[1303,62,1272,62],[1303,63,1272,63,"iat"],[1303,66,1272,66],[1303,68,1272,68,"userInternal"],[1303,80,1272,80],[1303,81,1272,81,"auth"],[1303,85,1272,85],[1303,87,1272,87],[1303,103,1272,103],[1303,104,1272,104],[1303,138,1272,138],[1303,139,1272,139],[1304,4,1273,4],[1304,10,1273,10,"firebase"],[1304,18,1273,18],[1304,21,1273,21],[1304,28,1273,28,"claims"],[1304,34,1273,34],[1304,35,1273,35,"firebase"],[1304,43,1273,43],[1304,48,1273,48],[1304,56,1273,56],[1304,59,1273,59,"claims"],[1304,65,1273,65],[1304,66,1273,66,"firebase"],[1304,74,1273,74],[1304,77,1273,77,"undefined"],[1304,86,1273,86],[1305,4,1274,4],[1305,10,1274,10,"signInProvider"],[1305,24,1274,24],[1305,27,1274,27,"firebase"],[1305,35,1274,35],[1305,38,1274,38],[1305,56,1274,56],[1305,57,1274,57],[1306,4,1275,4],[1306,11,1275,11],[1307,6,1276,8,"claims"],[1307,12,1276,14],[1308,6,1277,8,"token"],[1308,11,1277,13],[1309,6,1278,8,"authTime"],[1309,14,1278,16],[1309,16,1278,18,"utcTimestampToDateString"],[1309,40,1278,42],[1309,41,1278,43,"secondsStringToMilliseconds"],[1309,68,1278,70],[1309,69,1278,71,"claims"],[1309,75,1278,77],[1309,76,1278,78,"auth_time"],[1309,85,1278,87],[1309,86,1278,88],[1309,87,1278,89],[1310,6,1279,8,"issuedAtTime"],[1310,18,1279,20],[1310,20,1279,22,"utcTimestampToDateString"],[1310,44,1279,46],[1310,45,1279,47,"secondsStringToMilliseconds"],[1310,72,1279,74],[1310,73,1279,75,"claims"],[1310,79,1279,81],[1310,80,1279,82,"iat"],[1310,83,1279,85],[1310,84,1279,86],[1310,85,1279,87],[1311,6,1280,8,"expirationTime"],[1311,20,1280,22],[1311,22,1280,24,"utcTimestampToDateString"],[1311,46,1280,48],[1311,47,1280,49,"secondsStringToMilliseconds"],[1311,74,1280,76],[1311,75,1280,77,"claims"],[1311,81,1280,83],[1311,82,1280,84,"exp"],[1311,85,1280,87],[1311,86,1280,88],[1311,87,1280,89],[1312,6,1281,8,"signInProvider"],[1312,20,1281,22],[1312,22,1281,24,"signInProvider"],[1312,36,1281,38],[1312,40,1281,42],[1312,44,1281,46],[1313,6,1282,8,"signInSecondFactor"],[1313,24,1282,26],[1313,26,1282,28,"firebase"],[1313,34,1282,36],[1313,37,1282,39],[1313,60,1282,62],[1313,61,1282,63],[1313,65,1282,67],[1314,4,1283,4],[1314,5,1283,5],[1315,2,1284,0],[1316,2,1285,0],[1316,11,1285,9,"secondsStringToMilliseconds"],[1316,38,1285,36,"secondsStringToMilliseconds"],[1316,39,1285,37,"seconds"],[1316,46,1285,44],[1316,48,1285,46],[1317,4,1286,4],[1317,11,1286,11,"Number"],[1317,17,1286,17],[1317,18,1286,18,"seconds"],[1317,25,1286,25],[1317,26,1286,26],[1317,29,1286,29],[1317,33,1286,33],[1318,2,1287,0],[1319,2,1288,0],[1319,11,1288,9,"_parseToken"],[1319,22,1288,20,"_parseToken"],[1319,23,1288,21,"token"],[1319,28,1288,26],[1319,30,1288,28],[1320,4,1289,4],[1320,10,1289,10],[1320,11,1289,11,"algorithm"],[1320,20,1289,20],[1320,22,1289,22,"payload"],[1320,29,1289,29],[1320,31,1289,31,"signature"],[1320,40,1289,40],[1320,41,1289,41],[1320,44,1289,44,"token"],[1320,49,1289,49],[1320,50,1289,50,"split"],[1320,55,1289,55],[1320,56,1289,56],[1320,59,1289,59],[1320,60,1289,60],[1321,4,1290,4],[1321,8,1290,8,"algorithm"],[1321,17,1290,17],[1321,22,1290,22,"undefined"],[1321,31,1290,31],[1321,35,1291,8,"payload"],[1321,42,1291,15],[1321,47,1291,20,"undefined"],[1321,56,1291,29],[1321,60,1292,8,"signature"],[1321,69,1292,17],[1321,74,1292,22,"undefined"],[1321,83,1292,31],[1321,85,1292,33],[1322,6,1293,8,"_logError"],[1322,15,1293,17],[1322,16,1293,18],[1322,64,1293,66],[1322,65,1293,67],[1323,6,1294,8],[1323,13,1294,15],[1323,17,1294,19],[1324,4,1295,4],[1325,4,1296,4],[1325,8,1296,8],[1326,6,1297,8],[1326,12,1297,14,"decoded"],[1326,19,1297,21],[1326,22,1297,24],[1326,26,1297,24,"base64Decode"],[1326,44,1297,36],[1326,46,1297,37,"payload"],[1326,53,1297,44],[1326,54,1297,45],[1327,6,1298,8],[1327,10,1298,12],[1327,11,1298,13,"decoded"],[1327,18,1298,20],[1327,20,1298,22],[1328,8,1299,12,"_logError"],[1328,17,1299,21],[1328,18,1299,22],[1328,55,1299,59],[1328,56,1299,60],[1329,8,1300,12],[1329,15,1300,19],[1329,19,1300,23],[1330,6,1301,8],[1331,6,1302,8],[1331,13,1302,15,"JSON"],[1331,17,1302,19],[1331,18,1302,20,"parse"],[1331,23,1302,25],[1331,24,1302,26,"decoded"],[1331,31,1302,33],[1331,32,1302,34],[1332,4,1303,4],[1332,5,1303,5],[1332,6,1304,4],[1332,13,1304,11,"e"],[1332,14,1304,12],[1332,16,1304,14],[1333,6,1305,8,"_logError"],[1333,15,1305,17],[1333,16,1305,18],[1333,58,1305,60],[1333,60,1305,62,"e"],[1333,61,1305,63],[1333,63,1305,65,"toString"],[1333,71,1305,73],[1333,72,1305,74],[1333,73,1305,75],[1333,74,1305,76],[1334,6,1306,8],[1334,13,1306,15],[1334,17,1306,19],[1335,4,1307,4],[1336,2,1308,0],[1337,2,1309,0],[1338,0,1310,0],[1339,0,1311,0],[1340,2,1312,0],[1340,11,1312,9,"_tokenExpiresIn"],[1340,26,1312,24,"_tokenExpiresIn"],[1340,27,1312,25,"token"],[1340,32,1312,30],[1340,34,1312,32],[1341,4,1313,4],[1341,10,1313,10,"parsedToken"],[1341,21,1313,21],[1341,24,1313,24,"_parseToken"],[1341,35,1313,35],[1341,36,1313,36,"token"],[1341,41,1313,41],[1341,42,1313,42],[1342,4,1314,4,"_assert"],[1342,11,1314,11],[1342,12,1314,12,"parsedToken"],[1342,23,1314,23],[1342,25,1314,25],[1342,41,1314,41],[1342,42,1314,42],[1342,76,1314,76],[1342,77,1314,77],[1343,4,1315,4,"_assert"],[1343,11,1315,11],[1343,12,1315,12],[1343,19,1315,19,"parsedToken"],[1343,30,1315,30],[1343,31,1315,31,"exp"],[1343,34,1315,34],[1343,39,1315,39],[1343,50,1315,50],[1343,52,1315,52],[1343,68,1315,68],[1343,69,1315,69],[1343,103,1315,103],[1343,104,1315,104],[1344,4,1316,4,"_assert"],[1344,11,1316,11],[1344,12,1316,12],[1344,19,1316,19,"parsedToken"],[1344,30,1316,30],[1344,31,1316,31,"iat"],[1344,34,1316,34],[1344,39,1316,39],[1344,50,1316,50],[1344,52,1316,52],[1344,68,1316,68],[1344,69,1316,69],[1344,103,1316,103],[1344,104,1316,104],[1345,4,1317,4],[1345,11,1317,11,"Number"],[1345,17,1317,17],[1345,18,1317,18,"parsedToken"],[1345,29,1317,29],[1345,30,1317,30,"exp"],[1345,33,1317,33],[1345,34,1317,34],[1345,37,1317,37,"Number"],[1345,43,1317,43],[1345,44,1317,44,"parsedToken"],[1345,55,1317,55],[1345,56,1317,56,"iat"],[1345,59,1317,59],[1345,60,1317,60],[1346,2,1318,0],[1348,2,1320,0],[1349,0,1321,0],[1350,0,1322,0],[1351,0,1323,0],[1352,0,1324,0],[1353,0,1325,0],[1354,0,1326,0],[1355,0,1327,0],[1356,0,1328,0],[1357,0,1329,0],[1358,0,1330,0],[1359,0,1331,0],[1360,0,1332,0],[1361,0,1333,0],[1362,0,1334,0],[1363,0,1335,0],[1364,2,1336,0],[1364,17,1336,15,"_logoutIfInvalidated"],[1364,37,1336,35,"_logoutIfInvalidated"],[1364,38,1336,36,"user"],[1364,42,1336,40],[1364,44,1336,42,"promise"],[1364,51,1336,49],[1364,53,1336,51,"bypassAuthState"],[1364,68,1336,66],[1364,71,1336,69],[1364,76,1336,74],[1364,78,1336,76],[1365,4,1337,4],[1365,8,1337,8,"bypassAuthState"],[1365,23,1337,23],[1365,25,1337,25],[1366,6,1338,8],[1366,13,1338,15,"promise"],[1366,20,1338,22],[1367,4,1339,4],[1368,4,1340,4],[1368,8,1340,8],[1369,6,1341,8],[1369,13,1341,15],[1369,19,1341,21,"promise"],[1369,26,1341,28],[1370,4,1342,4],[1370,5,1342,5],[1370,6,1343,4],[1370,13,1343,11,"e"],[1370,14,1343,12],[1370,16,1343,14],[1371,6,1344,8],[1371,10,1344,12,"e"],[1371,11,1344,13],[1371,23,1344,25,"FirebaseError"],[1371,42,1344,38],[1371,46,1344,42,"isUserInvalidated"],[1371,63,1344,59],[1371,64,1344,60,"e"],[1371,65,1344,61],[1371,66,1344,62],[1371,68,1344,64],[1372,8,1345,12],[1372,12,1345,16,"user"],[1372,16,1345,20],[1372,17,1345,21,"auth"],[1372,21,1345,25],[1372,22,1345,26,"currentUser"],[1372,33,1345,37],[1372,38,1345,42,"user"],[1372,42,1345,46],[1372,44,1345,48],[1373,10,1346,16],[1373,16,1346,22,"user"],[1373,20,1346,26],[1373,21,1346,27,"auth"],[1373,25,1346,31],[1373,26,1346,32,"signOut"],[1373,33,1346,39],[1373,34,1346,40],[1373,35,1346,41],[1374,8,1347,12],[1375,6,1348,8],[1376,6,1349,8],[1376,12,1349,14,"e"],[1376,13,1349,15],[1377,4,1350,4],[1378,2,1351,0],[1379,2,1352,0],[1379,11,1352,9,"isUserInvalidated"],[1379,28,1352,26,"isUserInvalidated"],[1379,29,1352,27],[1380,4,1352,29,"code"],[1381,2,1352,34],[1381,3,1352,35],[1381,5,1352,37],[1382,4,1353,4],[1382,11,1353,12,"code"],[1382,15,1353,16],[1382,20,1353,21],[1382,28,1353,29],[1382,43,1353,44],[1382,44,1353,45],[1382,79,1353,80],[1382,83,1354,8,"code"],[1382,87,1354,12],[1382,92,1354,17],[1382,100,1354,25],[1382,120,1354,45],[1382,121,1354,46],[1382,156,1354,81],[1383,2,1355,0],[1385,2,1357,0],[1386,0,1358,0],[1387,0,1359,0],[1388,0,1360,0],[1389,0,1361,0],[1390,0,1362,0],[1391,0,1363,0],[1392,0,1364,0],[1393,0,1365,0],[1394,0,1366,0],[1395,0,1367,0],[1396,0,1368,0],[1397,0,1369,0],[1398,0,1370,0],[1399,0,1371,0],[1400,0,1372,0],[1401,2,1373,0],[1401,8,1373,6,"ProactiveRefresh"],[1401,24,1373,22],[1401,25,1373,23],[1402,4,1374,4,"constructor"],[1402,15,1374,15,"constructor"],[1402,16,1374,16,"user"],[1402,20,1374,20],[1402,22,1374,22],[1403,6,1375,8],[1403,10,1375,12],[1403,11,1375,13,"user"],[1403,15,1375,17],[1403,18,1375,20,"user"],[1403,22,1375,24],[1404,6,1376,8],[1404,10,1376,12],[1404,11,1376,13,"isRunning"],[1404,20,1376,22],[1404,23,1376,25],[1404,28,1376,30],[1405,6,1377,8],[1406,6,1378,8],[1407,6,1379,8],[1408,6,1380,8],[1409,6,1381,8],[1409,10,1381,12],[1409,11,1381,13,"timerId"],[1409,18,1381,20],[1409,21,1381,23],[1409,25,1381,27],[1410,6,1382,8],[1410,10,1382,12],[1410,11,1382,13,"errorBackoff"],[1410,23,1382,25],[1410,26,1382,28],[1410,31,1382,33],[1410,32,1382,34],[1411,4,1383,4],[1412,4,1384,4,"_start"],[1412,10,1384,10,"_start"],[1412,11,1384,10],[1412,13,1384,13],[1413,6,1385,8],[1413,10,1385,12],[1413,14,1385,16],[1413,15,1385,17,"isRunning"],[1413,24,1385,26],[1413,26,1385,28],[1414,8,1386,12],[1415,6,1387,8],[1416,6,1388,8],[1416,10,1388,12],[1416,11,1388,13,"isRunning"],[1416,20,1388,22],[1416,23,1388,25],[1416,27,1388,29],[1417,6,1389,8],[1417,10,1389,12],[1417,11,1389,13,"schedule"],[1417,19,1389,21],[1417,20,1389,22],[1417,21,1389,23],[1418,4,1390,4],[1419,4,1391,4,"_stop"],[1419,9,1391,9,"_stop"],[1419,10,1391,9],[1419,12,1391,12],[1420,6,1392,8],[1420,10,1392,12],[1420,11,1392,13],[1420,15,1392,17],[1420,16,1392,18,"isRunning"],[1420,25,1392,27],[1420,27,1392,29],[1421,8,1393,12],[1422,6,1394,8],[1423,6,1395,8],[1423,10,1395,12],[1423,11,1395,13,"isRunning"],[1423,20,1395,22],[1423,23,1395,25],[1423,28,1395,30],[1424,6,1396,8],[1424,10,1396,12],[1424,14,1396,16],[1424,15,1396,17,"timerId"],[1424,22,1396,24],[1424,27,1396,29],[1424,31,1396,33],[1424,33,1396,35],[1425,8,1397,12,"clearTimeout"],[1425,20,1397,24],[1425,21,1397,25],[1425,25,1397,29],[1425,26,1397,30,"timerId"],[1425,33,1397,37],[1425,34,1397,38],[1426,6,1398,8],[1427,4,1399,4],[1428,4,1400,4,"getInterval"],[1428,15,1400,15,"getInterval"],[1428,16,1400,16,"wasError"],[1428,24,1400,24],[1428,26,1400,26],[1429,6,1401,8],[1429,10,1401,12,"wasError"],[1429,18,1401,20],[1429,20,1401,22],[1430,8,1402,12],[1430,14,1402,18,"interval"],[1430,22,1402,26],[1430,25,1402,29],[1430,29,1402,33],[1430,30,1402,34,"errorBackoff"],[1430,42,1402,46],[1431,8,1403,12],[1431,12,1403,16],[1431,13,1403,17,"errorBackoff"],[1431,25,1403,29],[1431,28,1403,32,"Math"],[1431,32,1403,36],[1431,33,1403,37,"min"],[1431,36,1403,40],[1431,37,1403,41],[1431,41,1403,45],[1431,42,1403,46,"errorBackoff"],[1431,54,1403,58],[1431,57,1403,61],[1431,58,1403,62],[1431,60,1403,64],[1431,66,1403,70],[1431,67,1403,71],[1431,99,1403,103],[1431,100,1403,104],[1432,8,1404,12],[1432,15,1404,19,"interval"],[1432,23,1404,27],[1433,6,1405,8],[1433,7,1405,9],[1433,13,1406,13],[1434,8,1407,12],[1435,8,1408,12],[1435,12,1408,16],[1435,13,1408,17,"errorBackoff"],[1435,25,1408,29],[1435,28,1408,32],[1435,33,1408,37],[1435,34,1408,38],[1436,8,1409,12],[1436,14,1409,18,"expTime"],[1436,21,1409,25],[1436,24,1409,28],[1436,28,1409,32],[1436,29,1409,33,"user"],[1436,33,1409,37],[1436,34,1409,38,"stsTokenManager"],[1436,49,1409,53],[1436,50,1409,54,"expirationTime"],[1436,64,1409,68],[1436,68,1409,72],[1436,69,1409,73],[1437,8,1410,12],[1437,14,1410,18,"interval"],[1437,22,1410,26],[1437,25,1410,29,"expTime"],[1437,32,1410,36],[1437,35,1410,39,"Date"],[1437,39,1410,43],[1437,40,1410,44,"now"],[1437,43,1410,47],[1437,44,1410,48],[1437,45,1410,49],[1437,48,1410,52],[1437,54,1410,58],[1437,55,1410,59],[1438,8,1411,12],[1438,15,1411,19,"Math"],[1438,19,1411,23],[1438,20,1411,24,"max"],[1438,23,1411,27],[1438,24,1411,28],[1438,25,1411,29],[1438,27,1411,31,"interval"],[1438,35,1411,39],[1438,36,1411,40],[1439,6,1412,8],[1440,4,1413,4],[1441,4,1414,4,"schedule"],[1441,12,1414,12,"schedule"],[1441,13,1414,13,"wasError"],[1441,21,1414,21],[1441,24,1414,24],[1441,29,1414,29],[1441,31,1414,31],[1442,6,1415,8],[1442,10,1415,12],[1442,11,1415,13],[1442,15,1415,17],[1442,16,1415,18,"isRunning"],[1442,25,1415,27],[1442,27,1415,29],[1443,8,1416,12],[1444,8,1417,12],[1445,6,1418,8],[1446,6,1419,8],[1446,12,1419,14,"interval"],[1446,20,1419,22],[1446,23,1419,25],[1446,27,1419,29],[1446,28,1419,30,"getInterval"],[1446,39,1419,41],[1446,40,1419,42,"wasError"],[1446,48,1419,50],[1446,49,1419,51],[1447,6,1420,8],[1447,10,1420,12],[1447,11,1420,13,"timerId"],[1447,18,1420,20],[1447,21,1420,23,"setTimeout"],[1447,31,1420,33],[1447,32,1420,34],[1447,44,1420,46],[1448,8,1421,12],[1448,14,1421,18],[1448,18,1421,22],[1448,19,1421,23,"iteration"],[1448,28,1421,32],[1448,29,1421,33],[1448,30,1421,34],[1449,6,1422,8],[1449,7,1422,9],[1449,9,1422,11,"interval"],[1449,17,1422,19],[1449,18,1422,20],[1450,4,1423,4],[1451,4,1424,4],[1451,10,1424,10,"iteration"],[1451,19,1424,19,"iteration"],[1451,20,1424,19],[1451,22,1424,22],[1452,6,1425,8],[1452,10,1425,12],[1453,8,1426,12],[1453,14,1426,18],[1453,18,1426,22],[1453,19,1426,23,"user"],[1453,23,1426,27],[1453,24,1426,28,"getIdToken"],[1453,34,1426,38],[1453,35,1426,39],[1453,39,1426,43],[1453,40,1426,44],[1454,6,1427,8],[1454,7,1427,9],[1454,8,1428,8],[1454,15,1428,15,"e"],[1454,16,1428,16],[1454,18,1428,18],[1455,8,1429,12],[1456,8,1430,12],[1456,12,1430,16,"e"],[1456,13,1430,17],[1456,15,1430,19,"code"],[1456,19,1430,23],[1456,24,1431,16],[1456,32,1431,24],[1456,56,1431,48],[1456,57,1431,49],[1456,101,1431,93],[1456,103,1431,95],[1457,10,1432,16],[1457,14,1432,20],[1457,15,1432,21,"schedule"],[1457,23,1432,29],[1457,24,1432,30],[1457,38,1432,45],[1457,42,1432,49],[1457,43,1432,50],[1458,8,1433,12],[1459,8,1434,12],[1460,6,1435,8],[1461,6,1436,8],[1461,10,1436,12],[1461,11,1436,13,"schedule"],[1461,19,1436,21],[1461,20,1436,22],[1461,21,1436,23],[1462,4,1437,4],[1463,2,1438,0],[1465,2,1440,0],[1466,0,1441,0],[1467,0,1442,0],[1468,0,1443,0],[1469,0,1444,0],[1470,0,1445,0],[1471,0,1446,0],[1472,0,1447,0],[1473,0,1448,0],[1474,0,1449,0],[1475,0,1450,0],[1476,0,1451,0],[1477,0,1452,0],[1478,0,1453,0],[1479,0,1454,0],[1480,0,1455,0],[1481,2,1456,0],[1481,8,1456,6,"UserMetadata"],[1481,20,1456,18],[1481,21,1456,19],[1482,4,1457,4,"constructor"],[1482,15,1457,15,"constructor"],[1482,16,1457,16,"createdAt"],[1482,25,1457,25],[1482,27,1457,27,"lastLoginAt"],[1482,38,1457,38],[1482,40,1457,40],[1483,6,1458,8],[1483,10,1458,12],[1483,11,1458,13,"createdAt"],[1483,20,1458,22],[1483,23,1458,25,"createdAt"],[1483,32,1458,34],[1484,6,1459,8],[1484,10,1459,12],[1484,11,1459,13,"lastLoginAt"],[1484,22,1459,24],[1484,25,1459,27,"lastLoginAt"],[1484,36,1459,38],[1485,6,1460,8],[1485,10,1460,12],[1485,11,1460,13,"_initializeTime"],[1485,26,1460,28],[1485,27,1460,29],[1485,28,1460,30],[1486,4,1461,4],[1487,4,1462,4,"_initializeTime"],[1487,19,1462,19,"_initializeTime"],[1487,20,1462,19],[1487,22,1462,22],[1488,6,1463,8],[1488,10,1463,12],[1488,11,1463,13,"lastSignInTime"],[1488,25,1463,27],[1488,28,1463,30,"utcTimestampToDateString"],[1488,52,1463,54],[1488,53,1463,55],[1488,57,1463,59],[1488,58,1463,60,"lastLoginAt"],[1488,69,1463,71],[1488,70,1463,72],[1489,6,1464,8],[1489,10,1464,12],[1489,11,1464,13,"creationTime"],[1489,23,1464,25],[1489,26,1464,28,"utcTimestampToDateString"],[1489,50,1464,52],[1489,51,1464,53],[1489,55,1464,57],[1489,56,1464,58,"createdAt"],[1489,65,1464,67],[1489,66,1464,68],[1490,4,1465,4],[1491,4,1466,4,"_copy"],[1491,9,1466,9,"_copy"],[1491,10,1466,10,"metadata"],[1491,18,1466,18],[1491,20,1466,20],[1492,6,1467,8],[1492,10,1467,12],[1492,11,1467,13,"createdAt"],[1492,20,1467,22],[1492,23,1467,25,"metadata"],[1492,31,1467,33],[1492,32,1467,34,"createdAt"],[1492,41,1467,43],[1493,6,1468,8],[1493,10,1468,12],[1493,11,1468,13,"lastLoginAt"],[1493,22,1468,24],[1493,25,1468,27,"metadata"],[1493,33,1468,35],[1493,34,1468,36,"lastLoginAt"],[1493,45,1468,47],[1494,6,1469,8],[1494,10,1469,12],[1494,11,1469,13,"_initializeTime"],[1494,26,1469,28],[1494,27,1469,29],[1494,28,1469,30],[1495,4,1470,4],[1496,4,1471,4,"toJSON"],[1496,10,1471,10,"toJSON"],[1496,11,1471,10],[1496,13,1471,13],[1497,6,1472,8],[1497,13,1472,15],[1498,8,1473,12,"createdAt"],[1498,17,1473,21],[1498,19,1473,23],[1498,23,1473,27],[1498,24,1473,28,"createdAt"],[1498,33,1473,37],[1499,8,1474,12,"lastLoginAt"],[1499,19,1474,23],[1499,21,1474,25],[1499,25,1474,29],[1499,26,1474,30,"lastLoginAt"],[1500,6,1475,8],[1500,7,1475,9],[1501,4,1476,4],[1502,2,1477,0],[1504,2,1479,0],[1505,0,1480,0],[1506,0,1481,0],[1507,0,1482,0],[1508,0,1483,0],[1509,0,1484,0],[1510,0,1485,0],[1511,0,1486,0],[1512,0,1487,0],[1513,0,1488,0],[1514,0,1489,0],[1515,0,1490,0],[1516,0,1491,0],[1517,0,1492,0],[1518,0,1493,0],[1519,0,1494,0],[1520,2,1495,0],[1520,17,1495,15,"_reloadWithoutSaving"],[1520,37,1495,35,"_reloadWithoutSaving"],[1520,38,1495,36,"user"],[1520,42,1495,40],[1520,44,1495,42],[1521,4,1496,4],[1521,10,1496,10,"auth"],[1521,14,1496,14],[1521,17,1496,17,"user"],[1521,21,1496,21],[1521,22,1496,22,"auth"],[1521,26,1496,26],[1522,4,1497,4],[1522,10,1497,10,"idToken"],[1522,17,1497,17],[1522,20,1497,20],[1522,26,1497,26,"user"],[1522,30,1497,30],[1522,31,1497,31,"getIdToken"],[1522,41,1497,41],[1522,42,1497,42],[1522,43,1497,43],[1523,4,1498,4],[1523,10,1498,10,"response"],[1523,18,1498,18],[1523,21,1498,21],[1523,27,1498,27,"_logoutIfInvalidated"],[1523,47,1498,47],[1523,48,1498,48,"user"],[1523,52,1498,52],[1523,54,1498,54,"getAccountInfo"],[1523,68,1498,68],[1523,69,1498,69,"auth"],[1523,73,1498,73],[1523,75,1498,75],[1524,6,1498,77,"idToken"],[1525,4,1498,85],[1525,5,1498,86],[1525,6,1498,87],[1525,7,1498,88],[1526,4,1499,4,"_assert"],[1526,11,1499,11],[1526,12,1499,12,"response"],[1526,20,1499,20],[1526,22,1499,22,"users"],[1526,27,1499,27],[1526,28,1499,28,"length"],[1526,34,1499,34],[1526,36,1499,36,"auth"],[1526,40,1499,40],[1526,42,1499,42],[1526,58,1499,58],[1526,59,1499,59],[1526,93,1499,93],[1526,94,1499,94],[1527,4,1500,4],[1527,10,1500,10,"coreAccount"],[1527,21,1500,21],[1527,24,1500,24,"response"],[1527,32,1500,32],[1527,33,1500,33,"users"],[1527,38,1500,38],[1527,39,1500,39],[1527,40,1500,40],[1527,41,1500,41],[1528,4,1501,4,"user"],[1528,8,1501,8],[1528,9,1501,9,"_notifyReloadListener"],[1528,30,1501,30],[1528,31,1501,31,"coreAccount"],[1528,42,1501,42],[1528,43,1501,43],[1529,4,1502,4],[1529,10,1502,10,"newProviderData"],[1529,25,1502,25],[1529,28,1502,28,"coreAccount"],[1529,39,1502,39],[1529,40,1502,40,"providerUserInfo"],[1529,56,1502,56],[1529,58,1502,58,"length"],[1529,64,1502,64],[1529,67,1503,10,"extractProviderData"],[1529,86,1503,29],[1529,87,1503,30,"coreAccount"],[1529,98,1503,41],[1529,99,1503,42,"providerUserInfo"],[1529,115,1503,58],[1529,116,1503,59],[1529,119,1504,10],[1529,121,1504,12],[1530,4,1505,4],[1530,10,1505,10,"providerData"],[1530,22,1505,22],[1530,25,1505,25,"mergeProviderData"],[1530,42,1505,42],[1530,43,1505,43,"user"],[1530,47,1505,47],[1530,48,1505,48,"providerData"],[1530,60,1505,60],[1530,62,1505,62,"newProviderData"],[1530,77,1505,77],[1530,78,1505,78],[1531,4,1506,4],[1532,4,1507,4],[1533,4,1508,4],[1534,4,1509,4],[1535,4,1510,4],[1536,4,1511,4],[1536,10,1511,10,"oldIsAnonymous"],[1536,24,1511,24],[1536,27,1511,27,"user"],[1536,31,1511,31],[1536,32,1511,32,"isAnonymous"],[1536,43,1511,43],[1537,4,1512,4],[1537,10,1512,10,"newIsAnonymous"],[1537,24,1512,24],[1537,27,1512,27],[1537,29,1512,29,"user"],[1537,33,1512,33],[1537,34,1512,34,"email"],[1537,39,1512,39],[1537,43,1512,43,"coreAccount"],[1537,54,1512,54],[1537,55,1512,55,"passwordHash"],[1537,67,1512,67],[1537,68,1512,68],[1537,72,1512,72],[1537,73,1512,73,"providerData"],[1537,85,1512,85],[1537,87,1512,87,"length"],[1537,93,1512,93],[1538,4,1513,4],[1538,10,1513,10,"isAnonymous"],[1538,21,1513,21],[1538,24,1513,24],[1538,25,1513,25,"oldIsAnonymous"],[1538,39,1513,39],[1538,42,1513,42],[1538,47,1513,47],[1538,50,1513,50,"newIsAnonymous"],[1538,64,1513,64],[1539,4,1514,4],[1539,10,1514,10,"updates"],[1539,17,1514,17],[1539,20,1514,20],[1540,6,1515,8,"uid"],[1540,9,1515,11],[1540,11,1515,13,"coreAccount"],[1540,22,1515,24],[1540,23,1515,25,"localId"],[1540,30,1515,32],[1541,6,1516,8,"displayName"],[1541,17,1516,19],[1541,19,1516,21,"coreAccount"],[1541,30,1516,32],[1541,31,1516,33,"displayName"],[1541,42,1516,44],[1541,46,1516,48],[1541,50,1516,52],[1542,6,1517,8,"photoURL"],[1542,14,1517,16],[1542,16,1517,18,"coreAccount"],[1542,27,1517,29],[1542,28,1517,30,"photoUrl"],[1542,36,1517,38],[1542,40,1517,42],[1542,44,1517,46],[1543,6,1518,8,"email"],[1543,11,1518,13],[1543,13,1518,15,"coreAccount"],[1543,24,1518,26],[1543,25,1518,27,"email"],[1543,30,1518,32],[1543,34,1518,36],[1543,38,1518,40],[1544,6,1519,8,"emailVerified"],[1544,19,1519,21],[1544,21,1519,23,"coreAccount"],[1544,32,1519,34],[1544,33,1519,35,"emailVerified"],[1544,46,1519,48],[1544,50,1519,52],[1544,55,1519,57],[1545,6,1520,8,"phoneNumber"],[1545,17,1520,19],[1545,19,1520,21,"coreAccount"],[1545,30,1520,32],[1545,31,1520,33,"phoneNumber"],[1545,42,1520,44],[1545,46,1520,48],[1545,50,1520,52],[1546,6,1521,8,"tenantId"],[1546,14,1521,16],[1546,16,1521,18,"coreAccount"],[1546,27,1521,29],[1546,28,1521,30,"tenantId"],[1546,36,1521,38],[1546,40,1521,42],[1546,44,1521,46],[1547,6,1522,8,"providerData"],[1547,18,1522,20],[1548,6,1523,8,"metadata"],[1548,14,1523,16],[1548,16,1523,18],[1548,20,1523,22,"UserMetadata"],[1548,32,1523,34],[1548,33,1523,35,"coreAccount"],[1548,44,1523,46],[1548,45,1523,47,"createdAt"],[1548,54,1523,56],[1548,56,1523,58,"coreAccount"],[1548,67,1523,69],[1548,68,1523,70,"lastLoginAt"],[1548,79,1523,81],[1548,80,1523,82],[1549,6,1524,8,"isAnonymous"],[1550,4,1525,4],[1550,5,1525,5],[1551,4,1526,4,"Object"],[1551,10,1526,10],[1551,11,1526,11,"assign"],[1551,17,1526,17],[1551,18,1526,18,"user"],[1551,22,1526,22],[1551,24,1526,24,"updates"],[1551,31,1526,31],[1551,32,1526,32],[1552,2,1527,0],[1553,2,1528,0],[1554,0,1529,0],[1555,0,1530,0],[1556,0,1531,0],[1557,0,1532,0],[1558,0,1533,0],[1559,0,1534,0],[1560,2,1535,0],[1560,17,1535,15,"reload"],[1560,23,1535,21,"reload"],[1560,24,1535,22,"user"],[1560,28,1535,26],[1560,30,1535,28],[1561,4,1536,4],[1561,10,1536,10,"userInternal"],[1561,22,1536,22],[1561,25,1536,25],[1561,29,1536,25,"getModularInstance"],[1561,53,1536,43],[1561,55,1536,44,"user"],[1561,59,1536,48],[1561,60,1536,49],[1562,4,1537,4],[1562,10,1537,10,"_reloadWithoutSaving"],[1562,30,1537,30],[1562,31,1537,31,"userInternal"],[1562,43,1537,43],[1562,44,1537,44],[1563,4,1538,4],[1564,4,1539,4],[1565,4,1540,4],[1566,4,1541,4],[1566,10,1541,10,"userInternal"],[1566,22,1541,22],[1566,23,1541,23,"auth"],[1566,27,1541,27],[1566,28,1541,28,"_persistUserIfCurrent"],[1566,49,1541,49],[1566,50,1541,50,"userInternal"],[1566,62,1541,62],[1566,63,1541,63],[1567,4,1542,4,"userInternal"],[1567,16,1542,16],[1567,17,1542,17,"auth"],[1567,21,1542,21],[1567,22,1542,22,"_notifyListenersIfCurrent"],[1567,47,1542,47],[1567,48,1542,48,"userInternal"],[1567,60,1542,60],[1567,61,1542,61],[1568,2,1543,0],[1569,2,1544,0],[1569,11,1544,9,"mergeProviderData"],[1569,28,1544,26,"mergeProviderData"],[1569,29,1544,27,"original"],[1569,37,1544,35],[1569,39,1544,37,"newData"],[1569,46,1544,44],[1569,48,1544,46],[1570,4,1545,4],[1570,10,1545,10,"deduped"],[1570,17,1545,17],[1570,20,1545,20,"original"],[1570,28,1545,28],[1570,29,1545,29,"filter"],[1570,35,1545,35],[1570,36,1545,36,"o"],[1570,37,1545,37],[1570,41,1545,41],[1570,42,1545,42,"newData"],[1570,49,1545,49],[1570,50,1545,50,"some"],[1570,54,1545,54],[1570,55,1545,55,"n"],[1570,56,1545,56],[1570,60,1545,60,"n"],[1570,61,1545,61],[1570,62,1545,62,"providerId"],[1570,72,1545,72],[1570,77,1545,77,"o"],[1570,78,1545,78],[1570,79,1545,79,"providerId"],[1570,89,1545,89],[1570,90,1545,90],[1570,91,1545,91],[1571,4,1546,4],[1571,11,1546,11],[1571,12,1546,12],[1571,15,1546,15,"deduped"],[1571,22,1546,22],[1571,24,1546,24],[1571,27,1546,27,"newData"],[1571,34,1546,34],[1571,35,1546,35],[1572,2,1547,0],[1573,2,1548,0],[1573,11,1548,9,"extractProviderData"],[1573,30,1548,28,"extractProviderData"],[1573,31,1548,29,"providers"],[1573,40,1548,38],[1573,42,1548,40],[1574,4,1549,4],[1574,11,1549,11,"providers"],[1574,20,1549,20],[1574,21,1549,21,"map"],[1574,24,1549,24],[1574,25,1549,25],[1574,26,1549,26],[1575,6,1549,28,"providerId"],[1575,16,1549,38],[1576,6,1549,40],[1576,9,1549,43,"provider"],[1577,4,1549,52],[1577,5,1549,53],[1577,10,1549,58],[1578,6,1550,8],[1578,13,1550,15],[1579,8,1551,12,"providerId"],[1579,18,1551,22],[1580,8,1552,12,"uid"],[1580,11,1552,15],[1580,13,1552,17,"provider"],[1580,21,1552,25],[1580,22,1552,26,"rawId"],[1580,27,1552,31],[1580,31,1552,35],[1580,33,1552,37],[1581,8,1553,12,"displayName"],[1581,19,1553,23],[1581,21,1553,25,"provider"],[1581,29,1553,33],[1581,30,1553,34,"displayName"],[1581,41,1553,45],[1581,45,1553,49],[1581,49,1553,53],[1582,8,1554,12,"email"],[1582,13,1554,17],[1582,15,1554,19,"provider"],[1582,23,1554,27],[1582,24,1554,28,"email"],[1582,29,1554,33],[1582,33,1554,37],[1582,37,1554,41],[1583,8,1555,12,"phoneNumber"],[1583,19,1555,23],[1583,21,1555,25,"provider"],[1583,29,1555,33],[1583,30,1555,34,"phoneNumber"],[1583,41,1555,45],[1583,45,1555,49],[1583,49,1555,53],[1584,8,1556,12,"photoURL"],[1584,16,1556,20],[1584,18,1556,22,"provider"],[1584,26,1556,30],[1584,27,1556,31,"photoUrl"],[1584,35,1556,39],[1584,39,1556,43],[1585,6,1557,8],[1585,7,1557,9],[1586,4,1558,4],[1586,5,1558,5],[1586,6,1558,6],[1587,2,1559,0],[1589,2,1561,0],[1590,0,1562,0],[1591,0,1563,0],[1592,0,1564,0],[1593,0,1565,0],[1594,0,1566,0],[1595,0,1567,0],[1596,0,1568,0],[1597,0,1569,0],[1598,0,1570,0],[1599,0,1571,0],[1600,0,1572,0],[1601,0,1573,0],[1602,0,1574,0],[1603,0,1575,0],[1604,0,1576,0],[1605,2,1577,0],[1605,17,1577,15,"requestStsToken"],[1605,32,1577,30,"requestStsToken"],[1605,33,1577,31,"auth"],[1605,37,1577,35],[1605,39,1577,37,"refreshToken"],[1605,51,1577,49],[1605,53,1577,51],[1606,4,1578,4],[1606,10,1578,10,"response"],[1606,18,1578,18],[1606,21,1578,21],[1606,27,1578,27,"_performFetchWithErrorHandling"],[1606,57,1578,57],[1606,58,1578,58,"auth"],[1606,62,1578,62],[1606,64,1578,64],[1606,65,1578,65],[1606,66,1578,66],[1606,68,1578,68],[1606,80,1578,80],[1607,6,1579,8],[1607,12,1579,14,"body"],[1607,16,1579,18],[1607,19,1579,21],[1607,23,1579,21,"querystring"],[1607,40,1579,32],[1607,42,1579,33],[1608,8,1580,12],[1608,20,1580,24],[1608,22,1580,26],[1608,37,1580,41],[1609,8,1581,12],[1609,23,1581,27],[1609,25,1581,29,"refreshToken"],[1610,6,1582,8],[1610,7,1582,9],[1610,8,1582,10],[1610,9,1582,11,"slice"],[1610,14,1582,16],[1610,15,1582,17],[1610,16,1582,18],[1610,17,1582,19],[1611,6,1583,8],[1611,12,1583,14],[1612,8,1583,16,"tokenApiHost"],[1612,20,1583,28],[1613,8,1583,30,"apiKey"],[1614,6,1583,37],[1614,7,1583,38],[1614,10,1583,41,"auth"],[1614,14,1583,45],[1614,15,1583,46,"config"],[1614,21,1583,52],[1615,6,1584,8],[1615,12,1584,14,"url"],[1615,15,1584,17],[1615,18,1584,20],[1615,24,1584,26,"_getFinalTarget"],[1615,39,1584,41],[1615,40,1584,42,"auth"],[1615,44,1584,46],[1615,46,1584,48,"tokenApiHost"],[1615,58,1584,60],[1615,60,1584,62],[1615,71,1584,73],[1615,72,1584,74],[1615,94,1584,96],[1615,101,1584,103,"apiKey"],[1615,107,1584,109],[1615,109,1584,111],[1615,110,1584,112],[1616,6,1585,8],[1616,12,1585,14,"headers"],[1616,19,1585,21],[1616,22,1585,24],[1616,28,1585,30,"auth"],[1616,32,1585,34],[1616,33,1585,35,"_getAdditionalHeaders"],[1616,54,1585,56],[1616,55,1585,57],[1616,56,1585,58],[1617,6,1586,8,"headers"],[1617,13,1586,15],[1617,14,1586,16],[1617,28,1586,30],[1617,29,1586,31],[1617,59,1586,61],[1617,62,1586,64],[1617,97,1586,99],[1618,6,1587,8],[1618,12,1587,14,"options"],[1618,19,1587,21],[1618,22,1587,24],[1619,8,1588,12,"method"],[1619,14,1588,18],[1619,16,1588,20],[1619,22,1588,26],[1619,23,1588,27],[1620,8,1589,12,"headers"],[1620,15,1589,19],[1621,8,1590,12,"body"],[1622,6,1591,8],[1622,7,1591,9],[1623,6,1592,8],[1623,10,1592,12,"auth"],[1623,14,1592,16],[1623,15,1592,17,"emulatorConfig"],[1623,29,1592,31],[1623,33,1593,12],[1623,37,1593,12,"isCloudWorkstation"],[1623,61,1593,30],[1623,63,1593,31,"auth"],[1623,67,1593,35],[1623,68,1593,36,"emulatorConfig"],[1623,82,1593,50],[1623,83,1593,51,"host"],[1623,87,1593,55],[1623,88,1593,56],[1623,90,1593,58],[1624,8,1594,12,"options"],[1624,15,1594,19],[1624,16,1594,20,"credentials"],[1624,27,1594,31],[1624,30,1594,34],[1624,39,1594,43],[1625,6,1595,8],[1626,6,1596,8],[1626,13,1596,15,"FetchProvider"],[1626,26,1596,28],[1626,27,1596,29,"fetch"],[1626,32,1596,34],[1626,33,1596,35],[1626,34,1596,36],[1626,35,1596,37,"url"],[1626,38,1596,40],[1626,40,1596,42,"options"],[1626,47,1596,49],[1626,48,1596,50],[1627,4,1597,4],[1627,5,1597,5],[1627,6,1597,6],[1628,4,1598,4],[1629,4,1599,4],[1629,11,1599,11],[1630,6,1600,8,"accessToken"],[1630,17,1600,19],[1630,19,1600,21,"response"],[1630,27,1600,29],[1630,28,1600,30,"access_token"],[1630,40,1600,42],[1631,6,1601,8,"expiresIn"],[1631,15,1601,17],[1631,17,1601,19,"response"],[1631,25,1601,27],[1631,26,1601,28,"expires_in"],[1631,36,1601,38],[1632,6,1602,8,"refreshToken"],[1632,18,1602,20],[1632,20,1602,22,"response"],[1632,28,1602,30],[1632,29,1602,31,"refresh_token"],[1633,4,1603,4],[1633,5,1603,5],[1634,2,1604,0],[1635,2,1605,0],[1635,17,1605,15,"revokeToken"],[1635,28,1605,26,"revokeToken"],[1635,29,1605,27,"auth"],[1635,33,1605,31],[1635,35,1605,33,"request"],[1635,42,1605,40],[1635,44,1605,42],[1636,4,1606,4],[1636,11,1606,11,"_performApiRequest"],[1636,29,1606,29],[1636,30,1606,30,"auth"],[1636,34,1606,34],[1636,36,1606,36],[1636,42,1606,42],[1636,43,1606,43],[1636,66,1606,66],[1636,92,1606,92],[1636,93,1606,93],[1636,122,1606,122,"_addTidIfNecessary"],[1636,140,1606,140],[1636,141,1606,141,"auth"],[1636,145,1606,145],[1636,147,1606,147,"request"],[1636,154,1606,154],[1636,155,1606,155],[1636,156,1606,156],[1637,2,1607,0],[1639,2,1609,0],[1640,0,1610,0],[1641,0,1611,0],[1642,0,1612,0],[1643,0,1613,0],[1644,0,1614,0],[1645,0,1615,0],[1646,0,1616,0],[1647,0,1617,0],[1648,0,1618,0],[1649,0,1619,0],[1650,0,1620,0],[1651,0,1621,0],[1652,0,1622,0],[1653,0,1623,0],[1654,0,1624,0],[1655,2,1625,0],[1656,0,1626,0],[1657,0,1627,0],[1658,0,1628,0],[1659,0,1629,0],[1660,0,1630,0],[1661,2,1631,0],[1661,8,1631,6,"StsTokenManager"],[1661,23,1631,21],[1661,24,1631,22],[1662,4,1632,4,"constructor"],[1662,15,1632,15,"constructor"],[1662,16,1632,15],[1662,18,1632,18],[1663,6,1633,8],[1663,10,1633,12],[1663,11,1633,13,"refreshToken"],[1663,23,1633,25],[1663,26,1633,28],[1663,30,1633,32],[1664,6,1634,8],[1664,10,1634,12],[1664,11,1634,13,"accessToken"],[1664,22,1634,24],[1664,25,1634,27],[1664,29,1634,31],[1665,6,1635,8],[1665,10,1635,12],[1665,11,1635,13,"expirationTime"],[1665,25,1635,27],[1665,28,1635,30],[1665,32,1635,34],[1666,4,1636,4],[1667,4,1637,4],[1667,8,1637,8,"isExpired"],[1667,17,1637,17,"isExpired"],[1667,18,1637,17],[1667,20,1637,20],[1668,6,1638,8],[1668,13,1638,16],[1668,14,1638,17],[1668,18,1638,21],[1668,19,1638,22,"expirationTime"],[1668,33,1638,36],[1668,37,1639,12,"Date"],[1668,41,1639,16],[1668,42,1639,17,"now"],[1668,45,1639,20],[1668,46,1639,21],[1668,47,1639,22],[1668,50,1639,25],[1668,54,1639,29],[1668,55,1639,30,"expirationTime"],[1668,69,1639,44],[1668,72,1639,47],[1668,77,1639,52],[1668,78,1639,53],[1669,4,1640,4],[1670,4,1641,4,"updateFromServerResponse"],[1670,28,1641,28,"updateFromServerResponse"],[1670,29,1641,29,"response"],[1670,37,1641,37],[1670,39,1641,39],[1671,6,1642,8,"_assert"],[1671,13,1642,15],[1671,14,1642,16,"response"],[1671,22,1642,24],[1671,23,1642,25,"idToken"],[1671,30,1642,32],[1671,32,1642,34],[1671,48,1642,50],[1671,49,1642,51],[1671,83,1642,85],[1671,84,1642,86],[1672,6,1643,8,"_assert"],[1672,13,1643,15],[1672,14,1643,16],[1672,21,1643,23,"response"],[1672,29,1643,31],[1672,30,1643,32,"idToken"],[1672,37,1643,39],[1672,42,1643,44],[1672,53,1643,55],[1672,55,1643,57],[1672,71,1643,73],[1672,72,1643,74],[1672,106,1643,108],[1672,107,1643,109],[1673,6,1644,8,"_assert"],[1673,13,1644,15],[1673,14,1644,16],[1673,21,1644,23,"response"],[1673,29,1644,31],[1673,30,1644,32,"refreshToken"],[1673,42,1644,44],[1673,47,1644,49],[1673,58,1644,60],[1673,60,1644,62],[1673,76,1644,78],[1673,77,1644,79],[1673,111,1644,113],[1673,112,1644,114],[1674,6,1645,8],[1674,12,1645,14,"expiresIn"],[1674,21,1645,23],[1674,24,1645,26],[1674,35,1645,37],[1674,39,1645,41,"response"],[1674,47,1645,49],[1674,51,1645,53],[1674,58,1645,60,"response"],[1674,66,1645,68],[1674,67,1645,69,"expiresIn"],[1674,76,1645,78],[1674,81,1645,83],[1674,92,1645,94],[1674,95,1646,14,"Number"],[1674,101,1646,20],[1674,102,1646,21,"response"],[1674,110,1646,29],[1674,111,1646,30,"expiresIn"],[1674,120,1646,39],[1674,121,1646,40],[1674,124,1647,14,"_tokenExpiresIn"],[1674,139,1647,29],[1674,140,1647,30,"response"],[1674,148,1647,38],[1674,149,1647,39,"idToken"],[1674,156,1647,46],[1674,157,1647,47],[1675,6,1648,8],[1675,10,1648,12],[1675,11,1648,13,"updateTokensAndExpiration"],[1675,36,1648,38],[1675,37,1648,39,"response"],[1675,45,1648,47],[1675,46,1648,48,"idToken"],[1675,53,1648,55],[1675,55,1648,57,"response"],[1675,63,1648,65],[1675,64,1648,66,"refreshToken"],[1675,76,1648,78],[1675,78,1648,80,"expiresIn"],[1675,87,1648,89],[1675,88,1648,90],[1676,4,1649,4],[1677,4,1650,4,"updateFromIdToken"],[1677,21,1650,21,"updateFromIdToken"],[1677,22,1650,22,"idToken"],[1677,29,1650,29],[1677,31,1650,31],[1678,6,1651,8,"_assert"],[1678,13,1651,15],[1678,14,1651,16,"idToken"],[1678,21,1651,23],[1678,22,1651,24,"length"],[1678,28,1651,30],[1678,33,1651,35],[1678,34,1651,36],[1678,36,1651,38],[1678,52,1651,54],[1678,53,1651,55],[1678,87,1651,89],[1678,88,1651,90],[1679,6,1652,8],[1679,12,1652,14,"expiresIn"],[1679,21,1652,23],[1679,24,1652,26,"_tokenExpiresIn"],[1679,39,1652,41],[1679,40,1652,42,"idToken"],[1679,47,1652,49],[1679,48,1652,50],[1680,6,1653,8],[1680,10,1653,12],[1680,11,1653,13,"updateTokensAndExpiration"],[1680,36,1653,38],[1680,37,1653,39,"idToken"],[1680,44,1653,46],[1680,46,1653,48],[1680,50,1653,52],[1680,52,1653,54,"expiresIn"],[1680,61,1653,63],[1680,62,1653,64],[1681,4,1654,4],[1682,4,1655,4],[1682,10,1655,10,"getToken"],[1682,18,1655,18,"getToken"],[1682,19,1655,19,"auth"],[1682,23,1655,23],[1682,25,1655,25,"forceRefresh"],[1682,37,1655,37],[1682,40,1655,40],[1682,45,1655,45],[1682,47,1655,47],[1683,6,1656,8],[1683,10,1656,12],[1683,11,1656,13,"forceRefresh"],[1683,23,1656,25],[1683,27,1656,29],[1683,31,1656,33],[1683,32,1656,34,"accessToken"],[1683,43,1656,45],[1683,47,1656,49],[1683,48,1656,50],[1683,52,1656,54],[1683,53,1656,55,"isExpired"],[1683,62,1656,64],[1683,64,1656,66],[1684,8,1657,12],[1684,15,1657,19],[1684,19,1657,23],[1684,20,1657,24,"accessToken"],[1684,31,1657,35],[1685,6,1658,8],[1686,6,1659,8,"_assert"],[1686,13,1659,15],[1686,14,1659,16],[1686,18,1659,20],[1686,19,1659,21,"refreshToken"],[1686,31,1659,33],[1686,33,1659,35,"auth"],[1686,37,1659,39],[1686,39,1659,41],[1686,59,1659,61],[1686,60,1659,62],[1686,93,1659,95],[1686,94,1659,96],[1687,6,1660,8],[1687,10,1660,12],[1687,14,1660,16],[1687,15,1660,17,"refreshToken"],[1687,27,1660,29],[1687,29,1660,31],[1688,8,1661,12],[1688,14,1661,18],[1688,18,1661,22],[1688,19,1661,23,"refresh"],[1688,26,1661,30],[1688,27,1661,31,"auth"],[1688,31,1661,35],[1688,33,1661,37],[1688,37,1661,41],[1688,38,1661,42,"refreshToken"],[1688,50,1661,54],[1688,51,1661,55],[1689,8,1662,12],[1689,15,1662,19],[1689,19,1662,23],[1689,20,1662,24,"accessToken"],[1689,31,1662,35],[1690,6,1663,8],[1691,6,1664,8],[1691,13,1664,15],[1691,17,1664,19],[1692,4,1665,4],[1693,4,1666,4,"clearRefreshToken"],[1693,21,1666,21,"clearRefreshToken"],[1693,22,1666,21],[1693,24,1666,24],[1694,6,1667,8],[1694,10,1667,12],[1694,11,1667,13,"refreshToken"],[1694,23,1667,25],[1694,26,1667,28],[1694,30,1667,32],[1695,4,1668,4],[1696,4,1669,4],[1696,10,1669,10,"refresh"],[1696,17,1669,17,"refresh"],[1696,18,1669,18,"auth"],[1696,22,1669,22],[1696,24,1669,24,"oldToken"],[1696,32,1669,32],[1696,34,1669,34],[1697,6,1670,8],[1697,12,1670,14],[1698,8,1670,16,"accessToken"],[1698,19,1670,27],[1699,8,1670,29,"refreshToken"],[1699,20,1670,41],[1700,8,1670,43,"expiresIn"],[1701,6,1670,53],[1701,7,1670,54],[1701,10,1670,57],[1701,16,1670,63,"requestStsToken"],[1701,31,1670,78],[1701,32,1670,79,"auth"],[1701,36,1670,83],[1701,38,1670,85,"oldToken"],[1701,46,1670,93],[1701,47,1670,94],[1702,6,1671,8],[1702,10,1671,12],[1702,11,1671,13,"updateTokensAndExpiration"],[1702,36,1671,38],[1702,37,1671,39,"accessToken"],[1702,48,1671,50],[1702,50,1671,52,"refreshToken"],[1702,62,1671,64],[1702,64,1671,66,"Number"],[1702,70,1671,72],[1702,71,1671,73,"expiresIn"],[1702,80,1671,82],[1702,81,1671,83],[1702,82,1671,84],[1703,4,1672,4],[1704,4,1673,4,"updateTokensAndExpiration"],[1704,29,1673,29,"updateTokensAndExpiration"],[1704,30,1673,30,"accessToken"],[1704,41,1673,41],[1704,43,1673,43,"refreshToken"],[1704,55,1673,55],[1704,57,1673,57,"expiresInSec"],[1704,69,1673,69],[1704,71,1673,71],[1705,6,1674,8],[1705,10,1674,12],[1705,11,1674,13,"refreshToken"],[1705,23,1674,25],[1705,26,1674,28,"refreshToken"],[1705,38,1674,40],[1705,42,1674,44],[1705,46,1674,48],[1706,6,1675,8],[1706,10,1675,12],[1706,11,1675,13,"accessToken"],[1706,22,1675,24],[1706,25,1675,27,"accessToken"],[1706,36,1675,38],[1706,40,1675,42],[1706,44,1675,46],[1707,6,1676,8],[1707,10,1676,12],[1707,11,1676,13,"expirationTime"],[1707,25,1676,27],[1707,28,1676,30,"Date"],[1707,32,1676,34],[1707,33,1676,35,"now"],[1707,36,1676,38],[1707,37,1676,39],[1707,38,1676,40],[1707,41,1676,43,"expiresInSec"],[1707,53,1676,55],[1707,56,1676,58],[1707,60,1676,62],[1708,4,1677,4],[1709,4,1678,4],[1709,11,1678,11,"fromJSON"],[1709,19,1678,19,"fromJSON"],[1709,20,1678,20,"appName"],[1709,27,1678,27],[1709,29,1678,29,"object"],[1709,35,1678,35],[1709,37,1678,37],[1710,6,1679,8],[1710,12,1679,14],[1711,8,1679,16,"refreshToken"],[1711,20,1679,28],[1712,8,1679,30,"accessToken"],[1712,19,1679,41],[1713,8,1679,43,"expirationTime"],[1714,6,1679,58],[1714,7,1679,59],[1714,10,1679,62,"object"],[1714,16,1679,68],[1715,6,1680,8],[1715,12,1680,14,"manager"],[1715,19,1680,21],[1715,22,1680,24],[1715,26,1680,28,"StsTokenManager"],[1715,41,1680,43],[1715,42,1680,44],[1715,43,1680,45],[1716,6,1681,8],[1716,10,1681,12,"refreshToken"],[1716,22,1681,24],[1716,24,1681,26],[1717,8,1682,12,"_assert"],[1717,15,1682,19],[1717,16,1682,20],[1717,23,1682,27,"refreshToken"],[1717,35,1682,39],[1717,40,1682,44],[1717,48,1682,52],[1717,50,1682,54],[1717,66,1682,70],[1717,67,1682,71],[1717,103,1682,107],[1718,10,1683,16,"appName"],[1719,8,1684,12],[1719,9,1684,13],[1719,10,1684,14],[1720,8,1685,12,"manager"],[1720,15,1685,19],[1720,16,1685,20,"refreshToken"],[1720,28,1685,32],[1720,31,1685,35,"refreshToken"],[1720,43,1685,47],[1721,6,1686,8],[1722,6,1687,8],[1722,10,1687,12,"accessToken"],[1722,21,1687,23],[1722,23,1687,25],[1723,8,1688,12,"_assert"],[1723,15,1688,19],[1723,16,1688,20],[1723,23,1688,27,"accessToken"],[1723,34,1688,38],[1723,39,1688,43],[1723,47,1688,51],[1723,49,1688,53],[1723,65,1688,69],[1723,66,1688,70],[1723,102,1688,106],[1724,10,1689,16,"appName"],[1725,8,1690,12],[1725,9,1690,13],[1725,10,1690,14],[1726,8,1691,12,"manager"],[1726,15,1691,19],[1726,16,1691,20,"accessToken"],[1726,27,1691,31],[1726,30,1691,34,"accessToken"],[1726,41,1691,45],[1727,6,1692,8],[1728,6,1693,8],[1728,10,1693,12,"expirationTime"],[1728,24,1693,26],[1728,26,1693,28],[1729,8,1694,12,"_assert"],[1729,15,1694,19],[1729,16,1694,20],[1729,23,1694,27,"expirationTime"],[1729,37,1694,41],[1729,42,1694,46],[1729,50,1694,54],[1729,52,1694,56],[1729,68,1694,72],[1729,69,1694,73],[1729,105,1694,109],[1730,10,1695,16,"appName"],[1731,8,1696,12],[1731,9,1696,13],[1731,10,1696,14],[1732,8,1697,12,"manager"],[1732,15,1697,19],[1732,16,1697,20,"expirationTime"],[1732,30,1697,34],[1732,33,1697,37,"expirationTime"],[1732,47,1697,51],[1733,6,1698,8],[1734,6,1699,8],[1734,13,1699,15,"manager"],[1734,20,1699,22],[1735,4,1700,4],[1736,4,1701,4,"toJSON"],[1736,10,1701,10,"toJSON"],[1736,11,1701,10],[1736,13,1701,13],[1737,6,1702,8],[1737,13,1702,15],[1738,8,1703,12,"refreshToken"],[1738,20,1703,24],[1738,22,1703,26],[1738,26,1703,30],[1738,27,1703,31,"refreshToken"],[1738,39,1703,43],[1739,8,1704,12,"accessToken"],[1739,19,1704,23],[1739,21,1704,25],[1739,25,1704,29],[1739,26,1704,30,"accessToken"],[1739,37,1704,41],[1740,8,1705,12,"expirationTime"],[1740,22,1705,26],[1740,24,1705,28],[1740,28,1705,32],[1740,29,1705,33,"expirationTime"],[1741,6,1706,8],[1741,7,1706,9],[1742,4,1707,4],[1743,4,1708,4,"_assign"],[1743,11,1708,11,"_assign"],[1743,12,1708,12,"stsTokenManager"],[1743,27,1708,27],[1743,29,1708,29],[1744,6,1709,8],[1744,10,1709,12],[1744,11,1709,13,"accessToken"],[1744,22,1709,24],[1744,25,1709,27,"stsTokenManager"],[1744,40,1709,42],[1744,41,1709,43,"accessToken"],[1744,52,1709,54],[1745,6,1710,8],[1745,10,1710,12],[1745,11,1710,13,"refreshToken"],[1745,23,1710,25],[1745,26,1710,28,"stsTokenManager"],[1745,41,1710,43],[1745,42,1710,44,"refreshToken"],[1745,54,1710,56],[1746,6,1711,8],[1746,10,1711,12],[1746,11,1711,13,"expirationTime"],[1746,25,1711,27],[1746,28,1711,30,"stsTokenManager"],[1746,43,1711,45],[1746,44,1711,46,"expirationTime"],[1746,58,1711,60],[1747,4,1712,4],[1748,4,1713,4,"_clone"],[1748,10,1713,10,"_clone"],[1748,11,1713,10],[1748,13,1713,13],[1749,6,1714,8],[1749,13,1714,15,"Object"],[1749,19,1714,21],[1749,20,1714,22,"assign"],[1749,26,1714,28],[1749,27,1714,29],[1749,31,1714,33,"StsTokenManager"],[1749,46,1714,48],[1749,47,1714,49],[1749,48,1714,50],[1749,50,1714,52],[1749,54,1714,56],[1749,55,1714,57,"toJSON"],[1749,61,1714,63],[1749,62,1714,64],[1749,63,1714,65],[1749,64,1714,66],[1750,4,1715,4],[1751,4,1716,4,"_performRefresh"],[1751,19,1716,19,"_performRefresh"],[1751,20,1716,19],[1751,22,1716,22],[1752,6,1717,8],[1752,13,1717,15,"debugFail"],[1752,22,1717,24],[1752,23,1717,25],[1752,40,1717,42],[1752,41,1717,43],[1753,4,1718,4],[1754,2,1719,0],[1756,2,1721,0],[1757,0,1722,0],[1758,0,1723,0],[1759,0,1724,0],[1760,0,1725,0],[1761,0,1726,0],[1762,0,1727,0],[1763,0,1728,0],[1764,0,1729,0],[1765,0,1730,0],[1766,0,1731,0],[1767,0,1732,0],[1768,0,1733,0],[1769,0,1734,0],[1770,0,1735,0],[1771,0,1736,0],[1772,2,1737,0],[1772,11,1737,9,"assertStringOrUndefined"],[1772,34,1737,32,"assertStringOrUndefined"],[1772,35,1737,33,"assertion"],[1772,44,1737,42],[1772,46,1737,44,"appName"],[1772,53,1737,51],[1772,55,1737,53],[1773,4,1738,4,"_assert"],[1773,11,1738,11],[1773,12,1738,12],[1773,19,1738,19,"assertion"],[1773,28,1738,28],[1773,33,1738,33],[1773,41,1738,41],[1773,45,1738,45],[1773,52,1738,52,"assertion"],[1773,61,1738,61],[1773,66,1738,66],[1773,77,1738,77],[1773,79,1738,79],[1773,95,1738,95],[1773,96,1738,96],[1773,132,1738,132],[1774,6,1738,134,"appName"],[1775,4,1738,142],[1775,5,1738,143],[1775,6,1738,144],[1776,2,1739,0],[1777,2,1740,0],[1777,8,1740,6,"UserImpl"],[1777,16,1740,14],[1777,17,1740,15],[1778,4,1741,4,"constructor"],[1778,15,1741,15,"constructor"],[1778,16,1741,16],[1779,6,1741,18,"uid"],[1779,9,1741,21],[1780,6,1741,23,"auth"],[1780,10,1741,27],[1781,6,1741,29,"stsTokenManager"],[1781,21,1741,44],[1782,6,1741,46],[1782,9,1741,49,"opt"],[1783,4,1741,53],[1783,5,1741,54],[1783,7,1741,56],[1784,6,1742,8],[1785,6,1743,8],[1785,10,1743,12],[1785,11,1743,13,"providerId"],[1785,21,1743,23],[1785,24,1743,26],[1785,34,1743,36],[1785,35,1743,37],[1786,6,1744,8],[1786,10,1744,12],[1786,11,1744,13,"proactiveRefresh"],[1786,27,1744,29],[1786,30,1744,32],[1786,34,1744,36,"ProactiveRefresh"],[1786,50,1744,52],[1786,51,1744,53],[1786,55,1744,57],[1786,56,1744,58],[1787,6,1745,8],[1787,10,1745,12],[1787,11,1745,13,"reloadUserInfo"],[1787,25,1745,27],[1787,28,1745,30],[1787,32,1745,34],[1788,6,1746,8],[1788,10,1746,12],[1788,11,1746,13,"reloadListener"],[1788,25,1746,27],[1788,28,1746,30],[1788,32,1746,34],[1789,6,1747,8],[1789,10,1747,12],[1789,11,1747,13,"uid"],[1789,14,1747,16],[1789,17,1747,19,"uid"],[1789,20,1747,22],[1790,6,1748,8],[1790,10,1748,12],[1790,11,1748,13,"auth"],[1790,15,1748,17],[1790,18,1748,20,"auth"],[1790,22,1748,24],[1791,6,1749,8],[1791,10,1749,12],[1791,11,1749,13,"stsTokenManager"],[1791,26,1749,28],[1791,29,1749,31,"stsTokenManager"],[1791,44,1749,46],[1792,6,1750,8],[1792,10,1750,12],[1792,11,1750,13,"accessToken"],[1792,22,1750,24],[1792,25,1750,27,"stsTokenManager"],[1792,40,1750,42],[1792,41,1750,43,"accessToken"],[1792,52,1750,54],[1793,6,1751,8],[1793,10,1751,12],[1793,11,1751,13,"displayName"],[1793,22,1751,24],[1793,25,1751,27,"opt"],[1793,28,1751,30],[1793,29,1751,31,"displayName"],[1793,40,1751,42],[1793,44,1751,46],[1793,48,1751,50],[1794,6,1752,8],[1794,10,1752,12],[1794,11,1752,13,"email"],[1794,16,1752,18],[1794,19,1752,21,"opt"],[1794,22,1752,24],[1794,23,1752,25,"email"],[1794,28,1752,30],[1794,32,1752,34],[1794,36,1752,38],[1795,6,1753,8],[1795,10,1753,12],[1795,11,1753,13,"emailVerified"],[1795,24,1753,26],[1795,27,1753,29,"opt"],[1795,30,1753,32],[1795,31,1753,33,"emailVerified"],[1795,44,1753,46],[1795,48,1753,50],[1795,53,1753,55],[1796,6,1754,8],[1796,10,1754,12],[1796,11,1754,13,"phoneNumber"],[1796,22,1754,24],[1796,25,1754,27,"opt"],[1796,28,1754,30],[1796,29,1754,31,"phoneNumber"],[1796,40,1754,42],[1796,44,1754,46],[1796,48,1754,50],[1797,6,1755,8],[1797,10,1755,12],[1797,11,1755,13,"photoURL"],[1797,19,1755,21],[1797,22,1755,24,"opt"],[1797,25,1755,27],[1797,26,1755,28,"photoURL"],[1797,34,1755,36],[1797,38,1755,40],[1797,42,1755,44],[1798,6,1756,8],[1798,10,1756,12],[1798,11,1756,13,"isAnonymous"],[1798,22,1756,24],[1798,25,1756,27,"opt"],[1798,28,1756,30],[1798,29,1756,31,"isAnonymous"],[1798,40,1756,42],[1798,44,1756,46],[1798,49,1756,51],[1799,6,1757,8],[1799,10,1757,12],[1799,11,1757,13,"tenantId"],[1799,19,1757,21],[1799,22,1757,24,"opt"],[1799,25,1757,27],[1799,26,1757,28,"tenantId"],[1799,34,1757,36],[1799,38,1757,40],[1799,42,1757,44],[1800,6,1758,8],[1800,10,1758,12],[1800,11,1758,13,"providerData"],[1800,23,1758,25],[1800,26,1758,28,"opt"],[1800,29,1758,31],[1800,30,1758,32,"providerData"],[1800,42,1758,44],[1800,45,1758,47],[1800,46,1758,48],[1800,49,1758,51,"opt"],[1800,52,1758,54],[1800,53,1758,55,"providerData"],[1800,65,1758,67],[1800,66,1758,68],[1800,69,1758,71],[1800,71,1758,73],[1801,6,1759,8],[1801,10,1759,12],[1801,11,1759,13,"metadata"],[1801,19,1759,21],[1801,22,1759,24],[1801,26,1759,28,"UserMetadata"],[1801,38,1759,40],[1801,39,1759,41,"opt"],[1801,42,1759,44],[1801,43,1759,45,"createdAt"],[1801,52,1759,54],[1801,56,1759,58,"undefined"],[1801,65,1759,67],[1801,67,1759,69,"opt"],[1801,70,1759,72],[1801,71,1759,73,"lastLoginAt"],[1801,82,1759,84],[1801,86,1759,88,"undefined"],[1801,95,1759,97],[1801,96,1759,98],[1802,4,1760,4],[1803,4,1761,4],[1803,10,1761,10,"getIdToken"],[1803,20,1761,20,"getIdToken"],[1803,21,1761,21,"forceRefresh"],[1803,33,1761,33],[1803,35,1761,35],[1804,6,1762,8],[1804,12,1762,14,"accessToken"],[1804,23,1762,25],[1804,26,1762,28],[1804,32,1762,34,"_logoutIfInvalidated"],[1804,52,1762,54],[1804,53,1762,55],[1804,57,1762,59],[1804,59,1762,61],[1804,63,1762,65],[1804,64,1762,66,"stsTokenManager"],[1804,79,1762,81],[1804,80,1762,82,"getToken"],[1804,88,1762,90],[1804,89,1762,91],[1804,93,1762,95],[1804,94,1762,96,"auth"],[1804,98,1762,100],[1804,100,1762,102,"forceRefresh"],[1804,112,1762,114],[1804,113,1762,115],[1804,114,1762,116],[1805,6,1763,8,"_assert"],[1805,13,1763,15],[1805,14,1763,16,"accessToken"],[1805,25,1763,27],[1805,27,1763,29],[1805,31,1763,33],[1805,32,1763,34,"auth"],[1805,36,1763,38],[1805,38,1763,40],[1805,54,1763,56],[1805,55,1763,57],[1805,89,1763,91],[1805,90,1763,92],[1806,6,1764,8],[1806,10,1764,12],[1806,14,1764,16],[1806,15,1764,17,"accessToken"],[1806,26,1764,28],[1806,31,1764,33,"accessToken"],[1806,42,1764,44],[1806,44,1764,46],[1807,8,1765,12],[1807,12,1765,16],[1807,13,1765,17,"accessToken"],[1807,24,1765,28],[1807,27,1765,31,"accessToken"],[1807,38,1765,42],[1808,8,1766,12],[1808,14,1766,18],[1808,18,1766,22],[1808,19,1766,23,"auth"],[1808,23,1766,27],[1808,24,1766,28,"_persistUserIfCurrent"],[1808,45,1766,49],[1808,46,1766,50],[1808,50,1766,54],[1808,51,1766,55],[1809,8,1767,12],[1809,12,1767,16],[1809,13,1767,17,"auth"],[1809,17,1767,21],[1809,18,1767,22,"_notifyListenersIfCurrent"],[1809,43,1767,47],[1809,44,1767,48],[1809,48,1767,52],[1809,49,1767,53],[1810,6,1768,8],[1811,6,1769,8],[1811,13,1769,15,"accessToken"],[1811,24,1769,26],[1812,4,1770,4],[1813,4,1771,4,"getIdTokenResult"],[1813,20,1771,20,"getIdTokenResult"],[1813,21,1771,21,"forceRefresh"],[1813,33,1771,33],[1813,35,1771,35],[1814,6,1772,8],[1814,13,1772,15,"getIdTokenResult"],[1814,29,1772,31],[1814,30,1772,32],[1814,34,1772,36],[1814,36,1772,38,"forceRefresh"],[1814,48,1772,50],[1814,49,1772,51],[1815,4,1773,4],[1816,4,1774,4,"reload"],[1816,10,1774,10,"reload"],[1816,11,1774,10],[1816,13,1774,13],[1817,6,1775,8],[1817,13,1775,15,"reload"],[1817,19,1775,21],[1817,20,1775,22],[1817,24,1775,26],[1817,25,1775,27],[1818,4,1776,4],[1819,4,1777,4,"_assign"],[1819,11,1777,11,"_assign"],[1819,12,1777,12,"user"],[1819,16,1777,16],[1819,18,1777,18],[1820,6,1778,8],[1820,10,1778,12],[1820,14,1778,16],[1820,19,1778,21,"user"],[1820,23,1778,25],[1820,25,1778,27],[1821,8,1779,12],[1822,6,1780,8],[1823,6,1781,8,"_assert"],[1823,13,1781,15],[1823,14,1781,16],[1823,18,1781,20],[1823,19,1781,21,"uid"],[1823,22,1781,24],[1823,27,1781,29,"user"],[1823,31,1781,33],[1823,32,1781,34,"uid"],[1823,35,1781,37],[1823,37,1781,39],[1823,41,1781,43],[1823,42,1781,44,"auth"],[1823,46,1781,48],[1823,48,1781,50],[1823,64,1781,66],[1823,65,1781,67],[1823,99,1781,101],[1823,100,1781,102],[1824,6,1782,8],[1824,10,1782,12],[1824,11,1782,13,"displayName"],[1824,22,1782,24],[1824,25,1782,27,"user"],[1824,29,1782,31],[1824,30,1782,32,"displayName"],[1824,41,1782,43],[1825,6,1783,8],[1825,10,1783,12],[1825,11,1783,13,"photoURL"],[1825,19,1783,21],[1825,22,1783,24,"user"],[1825,26,1783,28],[1825,27,1783,29,"photoURL"],[1825,35,1783,37],[1826,6,1784,8],[1826,10,1784,12],[1826,11,1784,13,"email"],[1826,16,1784,18],[1826,19,1784,21,"user"],[1826,23,1784,25],[1826,24,1784,26,"email"],[1826,29,1784,31],[1827,6,1785,8],[1827,10,1785,12],[1827,11,1785,13,"emailVerified"],[1827,24,1785,26],[1827,27,1785,29,"user"],[1827,31,1785,33],[1827,32,1785,34,"emailVerified"],[1827,45,1785,47],[1828,6,1786,8],[1828,10,1786,12],[1828,11,1786,13,"phoneNumber"],[1828,22,1786,24],[1828,25,1786,27,"user"],[1828,29,1786,31],[1828,30,1786,32,"phoneNumber"],[1828,41,1786,43],[1829,6,1787,8],[1829,10,1787,12],[1829,11,1787,13,"isAnonymous"],[1829,22,1787,24],[1829,25,1787,27,"user"],[1829,29,1787,31],[1829,30,1787,32,"isAnonymous"],[1829,41,1787,43],[1830,6,1788,8],[1830,10,1788,12],[1830,11,1788,13,"tenantId"],[1830,19,1788,21],[1830,22,1788,24,"user"],[1830,26,1788,28],[1830,27,1788,29,"tenantId"],[1830,35,1788,37],[1831,6,1789,8],[1831,10,1789,12],[1831,11,1789,13,"providerData"],[1831,23,1789,25],[1831,26,1789,28,"user"],[1831,30,1789,32],[1831,31,1789,33,"providerData"],[1831,43,1789,45],[1831,44,1789,46,"map"],[1831,47,1789,49],[1831,48,1789,50,"userInfo"],[1831,56,1789,58],[1831,61,1789,63],[1832,8,1789,65],[1832,11,1789,68,"userInfo"],[1833,6,1789,77],[1833,7,1789,78],[1833,8,1789,79],[1833,9,1789,80],[1834,6,1790,8],[1834,10,1790,12],[1834,11,1790,13,"metadata"],[1834,19,1790,21],[1834,20,1790,22,"_copy"],[1834,25,1790,27],[1834,26,1790,28,"user"],[1834,30,1790,32],[1834,31,1790,33,"metadata"],[1834,39,1790,41],[1834,40,1790,42],[1835,6,1791,8],[1835,10,1791,12],[1835,11,1791,13,"stsTokenManager"],[1835,26,1791,28],[1835,27,1791,29,"_assign"],[1835,34,1791,36],[1835,35,1791,37,"user"],[1835,39,1791,41],[1835,40,1791,42,"stsTokenManager"],[1835,55,1791,57],[1835,56,1791,58],[1836,4,1792,4],[1837,4,1793,4,"_clone"],[1837,10,1793,10,"_clone"],[1837,11,1793,11,"auth"],[1837,15,1793,15],[1837,17,1793,17],[1838,6,1794,8],[1838,12,1794,14,"newUser"],[1838,19,1794,21],[1838,22,1794,24],[1838,26,1794,28,"UserImpl"],[1838,34,1794,36],[1838,35,1794,37],[1839,8,1795,12],[1839,11,1795,15],[1839,15,1795,19],[1840,8,1796,12,"auth"],[1840,12,1796,16],[1841,8,1797,12,"stsTokenManager"],[1841,23,1797,27],[1841,25,1797,29],[1841,29,1797,33],[1841,30,1797,34,"stsTokenManager"],[1841,45,1797,49],[1841,46,1797,50,"_clone"],[1841,52,1797,56],[1841,53,1797,57],[1842,6,1798,8],[1842,7,1798,9],[1842,8,1798,10],[1843,6,1799,8,"newUser"],[1843,13,1799,15],[1843,14,1799,16,"metadata"],[1843,22,1799,24],[1843,23,1799,25,"_copy"],[1843,28,1799,30],[1843,29,1799,31],[1843,33,1799,35],[1843,34,1799,36,"metadata"],[1843,42,1799,44],[1843,43,1799,45],[1844,6,1800,8],[1844,13,1800,15,"newUser"],[1844,20,1800,22],[1845,4,1801,4],[1846,4,1802,4,"_onReload"],[1846,13,1802,13,"_onReload"],[1846,14,1802,14,"callback"],[1846,22,1802,22],[1846,24,1802,24],[1847,6,1803,8],[1848,6,1804,8,"_assert"],[1848,13,1804,15],[1848,14,1804,16],[1848,15,1804,17],[1848,19,1804,21],[1848,20,1804,22,"reloadListener"],[1848,34,1804,36],[1848,36,1804,38],[1848,40,1804,42],[1848,41,1804,43,"auth"],[1848,45,1804,47],[1848,47,1804,49],[1848,63,1804,65],[1848,64,1804,66],[1848,98,1804,100],[1848,99,1804,101],[1849,6,1805,8],[1849,10,1805,12],[1849,11,1805,13,"reloadListener"],[1849,25,1805,27],[1849,28,1805,30,"callback"],[1849,36,1805,38],[1850,6,1806,8],[1850,10,1806,12],[1850,14,1806,16],[1850,15,1806,17,"reloadUserInfo"],[1850,29,1806,31],[1850,31,1806,33],[1851,8,1807,12],[1851,12,1807,16],[1851,13,1807,17,"_notifyReloadListener"],[1851,34,1807,38],[1851,35,1807,39],[1851,39,1807,43],[1851,40,1807,44,"reloadUserInfo"],[1851,54,1807,58],[1851,55,1807,59],[1852,8,1808,12],[1852,12,1808,16],[1852,13,1808,17,"reloadUserInfo"],[1852,27,1808,31],[1852,30,1808,34],[1852,34,1808,38],[1853,6,1809,8],[1854,4,1810,4],[1855,4,1811,4,"_notifyReloadListener"],[1855,25,1811,25,"_notifyReloadListener"],[1855,26,1811,26,"userInfo"],[1855,34,1811,34],[1855,36,1811,36],[1856,6,1812,8],[1856,10,1812,12],[1856,14,1812,16],[1856,15,1812,17,"reloadListener"],[1856,29,1812,31],[1856,31,1812,33],[1857,8,1813,12],[1857,12,1813,16],[1857,13,1813,17,"reloadListener"],[1857,27,1813,31],[1857,28,1813,32,"userInfo"],[1857,36,1813,40],[1857,37,1813,41],[1858,6,1814,8],[1858,7,1814,9],[1858,13,1815,13],[1859,8,1816,12],[1860,8,1817,12],[1860,12,1817,16],[1860,13,1817,17,"reloadUserInfo"],[1860,27,1817,31],[1860,30,1817,34,"userInfo"],[1860,38,1817,42],[1861,6,1818,8],[1862,4,1819,4],[1863,4,1820,4,"_startProactiveRefresh"],[1863,26,1820,26,"_startProactiveRefresh"],[1863,27,1820,26],[1863,29,1820,29],[1864,6,1821,8],[1864,10,1821,12],[1864,11,1821,13,"proactiveRefresh"],[1864,27,1821,29],[1864,28,1821,30,"_start"],[1864,34,1821,36],[1864,35,1821,37],[1864,36,1821,38],[1865,4,1822,4],[1866,4,1823,4,"_stopProactiveRefresh"],[1866,25,1823,25,"_stopProactiveRefresh"],[1866,26,1823,25],[1866,28,1823,28],[1867,6,1824,8],[1867,10,1824,12],[1867,11,1824,13,"proactiveRefresh"],[1867,27,1824,29],[1867,28,1824,30,"_stop"],[1867,33,1824,35],[1867,34,1824,36],[1867,35,1824,37],[1868,4,1825,4],[1869,4,1826,4],[1869,10,1826,10,"_updateTokensIfNecessary"],[1869,34,1826,34,"_updateTokensIfNecessary"],[1869,35,1826,35,"response"],[1869,43,1826,43],[1869,45,1826,45,"reload"],[1869,51,1826,51],[1869,54,1826,54],[1869,59,1826,59],[1869,61,1826,61],[1870,6,1827,8],[1870,10,1827,12,"tokensRefreshed"],[1870,25,1827,27],[1870,28,1827,30],[1870,33,1827,35],[1871,6,1828,8],[1871,10,1828,12,"response"],[1871,18,1828,20],[1871,19,1828,21,"idToken"],[1871,26,1828,28],[1871,30,1829,12,"response"],[1871,38,1829,20],[1871,39,1829,21,"idToken"],[1871,46,1829,28],[1871,51,1829,33],[1871,55,1829,37],[1871,56,1829,38,"stsTokenManager"],[1871,71,1829,53],[1871,72,1829,54,"accessToken"],[1871,83,1829,65],[1871,85,1829,67],[1872,8,1830,12],[1872,12,1830,16],[1872,13,1830,17,"stsTokenManager"],[1872,28,1830,32],[1872,29,1830,33,"updateFromServerResponse"],[1872,53,1830,57],[1872,54,1830,58,"response"],[1872,62,1830,66],[1872,63,1830,67],[1873,8,1831,12,"tokensRefreshed"],[1873,23,1831,27],[1873,26,1831,30],[1873,30,1831,34],[1874,6,1832,8],[1875,6,1833,8],[1875,10,1833,12,"reload"],[1875,16,1833,18],[1875,18,1833,20],[1876,8,1834,12],[1876,14,1834,18,"_reloadWithoutSaving"],[1876,34,1834,38],[1876,35,1834,39],[1876,39,1834,43],[1876,40,1834,44],[1877,6,1835,8],[1878,6,1836,8],[1878,12,1836,14],[1878,16,1836,18],[1878,17,1836,19,"auth"],[1878,21,1836,23],[1878,22,1836,24,"_persistUserIfCurrent"],[1878,43,1836,45],[1878,44,1836,46],[1878,48,1836,50],[1878,49,1836,51],[1879,6,1837,8],[1879,10,1837,12,"tokensRefreshed"],[1879,25,1837,27],[1879,27,1837,29],[1880,8,1838,12],[1880,12,1838,16],[1880,13,1838,17,"auth"],[1880,17,1838,21],[1880,18,1838,22,"_notifyListenersIfCurrent"],[1880,43,1838,47],[1880,44,1838,48],[1880,48,1838,52],[1880,49,1838,53],[1881,6,1839,8],[1882,4,1840,4],[1883,4,1841,4],[1883,10,1841,10,"delete"],[1883,16,1841,16,"delete"],[1883,17,1841,16],[1883,19,1841,19],[1884,6,1842,8],[1884,10,1842,12],[1884,14,1842,12,"_isFirebaseServerApp"],[1884,39,1842,32],[1884,41,1842,33],[1884,45,1842,37],[1884,46,1842,38,"auth"],[1884,50,1842,42],[1884,51,1842,43,"app"],[1884,54,1842,46],[1884,55,1842,47],[1884,57,1842,49],[1885,8,1843,12],[1885,15,1843,19,"Promise"],[1885,22,1843,26],[1885,23,1843,27,"reject"],[1885,29,1843,33],[1885,30,1843,34,"_serverAppCurrentUserOperationNotSupportedError"],[1885,77,1843,81],[1885,78,1843,82],[1885,82,1843,86],[1885,83,1843,87,"auth"],[1885,87,1843,91],[1885,88,1843,92],[1885,89,1843,93],[1886,6,1844,8],[1887,6,1845,8],[1887,12,1845,14,"idToken"],[1887,19,1845,21],[1887,22,1845,24],[1887,28,1845,30],[1887,32,1845,34],[1887,33,1845,35,"getIdToken"],[1887,43,1845,45],[1887,44,1845,46],[1887,45,1845,47],[1888,6,1846,8],[1888,12,1846,14,"_logoutIfInvalidated"],[1888,32,1846,34],[1888,33,1846,35],[1888,37,1846,39],[1888,39,1846,41,"deleteAccount"],[1888,52,1846,54],[1888,53,1846,55],[1888,57,1846,59],[1888,58,1846,60,"auth"],[1888,62,1846,64],[1888,64,1846,66],[1889,8,1846,68,"idToken"],[1890,6,1846,76],[1890,7,1846,77],[1890,8,1846,78],[1890,9,1846,79],[1891,6,1847,8],[1891,10,1847,12],[1891,11,1847,13,"stsTokenManager"],[1891,26,1847,28],[1891,27,1847,29,"clearRefreshToken"],[1891,44,1847,46],[1891,45,1847,47],[1891,46,1847,48],[1892,6,1848,8],[1893,6,1849,8],[1894,6,1850,8],[1894,13,1850,15],[1894,17,1850,19],[1894,18,1850,20,"auth"],[1894,22,1850,24],[1894,23,1850,25,"signOut"],[1894,30,1850,32],[1894,31,1850,33],[1894,32,1850,34],[1895,4,1851,4],[1896,4,1852,4,"toJSON"],[1896,10,1852,10,"toJSON"],[1896,11,1852,10],[1896,13,1852,13],[1897,6,1853,8],[1897,13,1853,15],[1898,8,1854,12,"uid"],[1898,11,1854,15],[1898,13,1854,17],[1898,17,1854,21],[1898,18,1854,22,"uid"],[1898,21,1854,25],[1899,8,1855,12,"email"],[1899,13,1855,17],[1899,15,1855,19],[1899,19,1855,23],[1899,20,1855,24,"email"],[1899,25,1855,29],[1899,29,1855,33,"undefined"],[1899,38,1855,42],[1900,8,1856,12,"emailVerified"],[1900,21,1856,25],[1900,23,1856,27],[1900,27,1856,31],[1900,28,1856,32,"emailVerified"],[1900,41,1856,45],[1901,8,1857,12,"displayName"],[1901,19,1857,23],[1901,21,1857,25],[1901,25,1857,29],[1901,26,1857,30,"displayName"],[1901,37,1857,41],[1901,41,1857,45,"undefined"],[1901,50,1857,54],[1902,8,1858,12,"isAnonymous"],[1902,19,1858,23],[1902,21,1858,25],[1902,25,1858,29],[1902,26,1858,30,"isAnonymous"],[1902,37,1858,41],[1903,8,1859,12,"photoURL"],[1903,16,1859,20],[1903,18,1859,22],[1903,22,1859,26],[1903,23,1859,27,"photoURL"],[1903,31,1859,35],[1903,35,1859,39,"undefined"],[1903,44,1859,48],[1904,8,1860,12,"phoneNumber"],[1904,19,1860,23],[1904,21,1860,25],[1904,25,1860,29],[1904,26,1860,30,"phoneNumber"],[1904,37,1860,41],[1904,41,1860,45,"undefined"],[1904,50,1860,54],[1905,8,1861,12,"tenantId"],[1905,16,1861,20],[1905,18,1861,22],[1905,22,1861,26],[1905,23,1861,27,"tenantId"],[1905,31,1861,35],[1905,35,1861,39,"undefined"],[1905,44,1861,48],[1906,8,1862,12,"providerData"],[1906,20,1862,24],[1906,22,1862,26],[1906,26,1862,30],[1906,27,1862,31,"providerData"],[1906,39,1862,43],[1906,40,1862,44,"map"],[1906,43,1862,47],[1906,44,1862,48,"userInfo"],[1906,52,1862,56],[1906,57,1862,61],[1907,10,1862,63],[1907,13,1862,66,"userInfo"],[1908,8,1862,75],[1908,9,1862,76],[1908,10,1862,77],[1908,11,1862,78],[1909,8,1863,12,"stsTokenManager"],[1909,23,1863,27],[1909,25,1863,29],[1909,29,1863,33],[1909,30,1863,34,"stsTokenManager"],[1909,45,1863,49],[1909,46,1863,50,"toJSON"],[1909,52,1863,56],[1909,53,1863,57],[1909,54,1863,58],[1910,8,1864,12],[1911,8,1865,12],[1912,8,1866,12,"_redirectEventId"],[1912,24,1866,28],[1912,26,1866,30],[1912,30,1866,34],[1912,31,1866,35,"_redirectEventId"],[1912,47,1866,51],[1913,8,1867,12],[1913,11,1867,15],[1913,15,1867,19],[1913,16,1867,20,"metadata"],[1913,24,1867,28],[1913,25,1867,29,"toJSON"],[1913,31,1867,35],[1913,32,1867,36],[1913,33,1867,37],[1914,8,1868,12],[1915,8,1869,12,"apiKey"],[1915,14,1869,18],[1915,16,1869,20],[1915,20,1869,24],[1915,21,1869,25,"auth"],[1915,25,1869,29],[1915,26,1869,30,"config"],[1915,32,1869,36],[1915,33,1869,37,"apiKey"],[1915,39,1869,43],[1916,8,1870,12,"appName"],[1916,15,1870,19],[1916,17,1870,21],[1916,21,1870,25],[1916,22,1870,26,"auth"],[1916,26,1870,30],[1916,27,1870,31,"name"],[1917,8,1871,12],[1918,8,1872,12],[1919,6,1873,8],[1919,7,1873,9],[1920,4,1874,4],[1921,4,1875,4],[1921,8,1875,8,"refreshToken"],[1921,20,1875,20,"refreshToken"],[1921,21,1875,20],[1921,23,1875,23],[1922,6,1876,8],[1922,13,1876,15],[1922,17,1876,19],[1922,18,1876,20,"stsTokenManager"],[1922,33,1876,35],[1922,34,1876,36,"refreshToken"],[1922,46,1876,48],[1922,50,1876,52],[1922,52,1876,54],[1923,4,1877,4],[1924,4,1878,4],[1924,11,1878,11,"_fromJSON"],[1924,20,1878,20,"_fromJSON"],[1924,21,1878,21,"auth"],[1924,25,1878,25],[1924,27,1878,27,"object"],[1924,33,1878,33],[1924,35,1878,35],[1925,6,1879,8],[1925,12,1879,14,"displayName"],[1925,23,1879,25],[1925,26,1879,28,"object"],[1925,32,1879,34],[1925,33,1879,35,"displayName"],[1925,44,1879,46],[1925,48,1879,50,"undefined"],[1925,57,1879,59],[1926,6,1880,8],[1926,12,1880,14,"email"],[1926,17,1880,19],[1926,20,1880,22,"object"],[1926,26,1880,28],[1926,27,1880,29,"email"],[1926,32,1880,34],[1926,36,1880,38,"undefined"],[1926,45,1880,47],[1927,6,1881,8],[1927,12,1881,14,"phoneNumber"],[1927,23,1881,25],[1927,26,1881,28,"object"],[1927,32,1881,34],[1927,33,1881,35,"phoneNumber"],[1927,44,1881,46],[1927,48,1881,50,"undefined"],[1927,57,1881,59],[1928,6,1882,8],[1928,12,1882,14,"photoURL"],[1928,20,1882,22],[1928,23,1882,25,"object"],[1928,29,1882,31],[1928,30,1882,32,"photoURL"],[1928,38,1882,40],[1928,42,1882,44,"undefined"],[1928,51,1882,53],[1929,6,1883,8],[1929,12,1883,14,"tenantId"],[1929,20,1883,22],[1929,23,1883,25,"object"],[1929,29,1883,31],[1929,30,1883,32,"tenantId"],[1929,38,1883,40],[1929,42,1883,44,"undefined"],[1929,51,1883,53],[1930,6,1884,8],[1930,12,1884,14,"_redirectEventId"],[1930,28,1884,30],[1930,31,1884,33,"object"],[1930,37,1884,39],[1930,38,1884,40,"_redirectEventId"],[1930,54,1884,56],[1930,58,1884,60,"undefined"],[1930,67,1884,69],[1931,6,1885,8],[1931,12,1885,14,"createdAt"],[1931,21,1885,23],[1931,24,1885,26,"object"],[1931,30,1885,32],[1931,31,1885,33,"createdAt"],[1931,40,1885,42],[1931,44,1885,46,"undefined"],[1931,53,1885,55],[1932,6,1886,8],[1932,12,1886,14,"lastLoginAt"],[1932,23,1886,25],[1932,26,1886,28,"object"],[1932,32,1886,34],[1932,33,1886,35,"lastLoginAt"],[1932,44,1886,46],[1932,48,1886,50,"undefined"],[1932,57,1886,59],[1933,6,1887,8],[1933,12,1887,14],[1934,8,1887,16,"uid"],[1934,11,1887,19],[1935,8,1887,21,"emailVerified"],[1935,21,1887,34],[1936,8,1887,36,"isAnonymous"],[1936,19,1887,47],[1937,8,1887,49,"providerData"],[1937,20,1887,61],[1938,8,1887,63,"stsTokenManager"],[1938,23,1887,78],[1938,25,1887,80,"plainObjectTokenManager"],[1939,6,1887,104],[1939,7,1887,105],[1939,10,1887,108,"object"],[1939,16,1887,114],[1940,6,1888,8,"_assert"],[1940,13,1888,15],[1940,14,1888,16,"uid"],[1940,17,1888,19],[1940,21,1888,23,"plainObjectTokenManager"],[1940,44,1888,46],[1940,46,1888,48,"auth"],[1940,50,1888,52],[1940,52,1888,54],[1940,68,1888,70],[1940,69,1888,71],[1940,103,1888,105],[1940,104,1888,106],[1941,6,1889,8],[1941,12,1889,14,"stsTokenManager"],[1941,27,1889,29],[1941,30,1889,32,"StsTokenManager"],[1941,45,1889,47],[1941,46,1889,48,"fromJSON"],[1941,54,1889,56],[1941,55,1889,57],[1941,59,1889,61],[1941,60,1889,62,"name"],[1941,64,1889,66],[1941,66,1889,68,"plainObjectTokenManager"],[1941,89,1889,91],[1941,90,1889,92],[1942,6,1890,8,"_assert"],[1942,13,1890,15],[1942,14,1890,16],[1942,21,1890,23,"uid"],[1942,24,1890,26],[1942,29,1890,31],[1942,37,1890,39],[1942,39,1890,41,"auth"],[1942,43,1890,45],[1942,45,1890,47],[1942,61,1890,63],[1942,62,1890,64],[1942,96,1890,98],[1942,97,1890,99],[1943,6,1891,8,"assertStringOrUndefined"],[1943,29,1891,31],[1943,30,1891,32,"displayName"],[1943,41,1891,43],[1943,43,1891,45,"auth"],[1943,47,1891,49],[1943,48,1891,50,"name"],[1943,52,1891,54],[1943,53,1891,55],[1944,6,1892,8,"assertStringOrUndefined"],[1944,29,1892,31],[1944,30,1892,32,"email"],[1944,35,1892,37],[1944,37,1892,39,"auth"],[1944,41,1892,43],[1944,42,1892,44,"name"],[1944,46,1892,48],[1944,47,1892,49],[1945,6,1893,8,"_assert"],[1945,13,1893,15],[1945,14,1893,16],[1945,21,1893,23,"emailVerified"],[1945,34,1893,36],[1945,39,1893,41],[1945,48,1893,50],[1945,50,1893,52,"auth"],[1945,54,1893,56],[1945,56,1893,58],[1945,72,1893,74],[1945,73,1893,75],[1945,107,1893,109],[1945,108,1893,110],[1946,6,1894,8,"_assert"],[1946,13,1894,15],[1946,14,1894,16],[1946,21,1894,23,"isAnonymous"],[1946,32,1894,34],[1946,37,1894,39],[1946,46,1894,48],[1946,48,1894,50,"auth"],[1946,52,1894,54],[1946,54,1894,56],[1946,70,1894,72],[1946,71,1894,73],[1946,105,1894,107],[1946,106,1894,108],[1947,6,1895,8,"assertStringOrUndefined"],[1947,29,1895,31],[1947,30,1895,32,"phoneNumber"],[1947,41,1895,43],[1947,43,1895,45,"auth"],[1947,47,1895,49],[1947,48,1895,50,"name"],[1947,52,1895,54],[1947,53,1895,55],[1948,6,1896,8,"assertStringOrUndefined"],[1948,29,1896,31],[1948,30,1896,32,"photoURL"],[1948,38,1896,40],[1948,40,1896,42,"auth"],[1948,44,1896,46],[1948,45,1896,47,"name"],[1948,49,1896,51],[1948,50,1896,52],[1949,6,1897,8,"assertStringOrUndefined"],[1949,29,1897,31],[1949,30,1897,32,"tenantId"],[1949,38,1897,40],[1949,40,1897,42,"auth"],[1949,44,1897,46],[1949,45,1897,47,"name"],[1949,49,1897,51],[1949,50,1897,52],[1950,6,1898,8,"assertStringOrUndefined"],[1950,29,1898,31],[1950,30,1898,32,"_redirectEventId"],[1950,46,1898,48],[1950,48,1898,50,"auth"],[1950,52,1898,54],[1950,53,1898,55,"name"],[1950,57,1898,59],[1950,58,1898,60],[1951,6,1899,8,"assertStringOrUndefined"],[1951,29,1899,31],[1951,30,1899,32,"createdAt"],[1951,39,1899,41],[1951,41,1899,43,"auth"],[1951,45,1899,47],[1951,46,1899,48,"name"],[1951,50,1899,52],[1951,51,1899,53],[1952,6,1900,8,"assertStringOrUndefined"],[1952,29,1900,31],[1952,30,1900,32,"lastLoginAt"],[1952,41,1900,43],[1952,43,1900,45,"auth"],[1952,47,1900,49],[1952,48,1900,50,"name"],[1952,52,1900,54],[1952,53,1900,55],[1953,6,1901,8],[1953,12,1901,14,"user"],[1953,16,1901,18],[1953,19,1901,21],[1953,23,1901,25,"UserImpl"],[1953,31,1901,33],[1953,32,1901,34],[1954,8,1902,12,"uid"],[1954,11,1902,15],[1955,8,1903,12,"auth"],[1955,12,1903,16],[1956,8,1904,12,"email"],[1956,13,1904,17],[1957,8,1905,12,"emailVerified"],[1957,21,1905,25],[1958,8,1906,12,"displayName"],[1958,19,1906,23],[1959,8,1907,12,"isAnonymous"],[1959,19,1907,23],[1960,8,1908,12,"photoURL"],[1960,16,1908,20],[1961,8,1909,12,"phoneNumber"],[1961,19,1909,23],[1962,8,1910,12,"tenantId"],[1962,16,1910,20],[1963,8,1911,12,"stsTokenManager"],[1963,23,1911,27],[1964,8,1912,12,"createdAt"],[1964,17,1912,21],[1965,8,1913,12,"lastLoginAt"],[1966,6,1914,8],[1966,7,1914,9],[1966,8,1914,10],[1967,6,1915,8],[1967,10,1915,12,"providerData"],[1967,22,1915,24],[1967,26,1915,28,"Array"],[1967,31,1915,33],[1967,32,1915,34,"isArray"],[1967,39,1915,41],[1967,40,1915,42,"providerData"],[1967,52,1915,54],[1967,53,1915,55],[1967,55,1915,57],[1968,8,1916,12,"user"],[1968,12,1916,16],[1968,13,1916,17,"providerData"],[1968,25,1916,29],[1968,28,1916,32,"providerData"],[1968,40,1916,44],[1968,41,1916,45,"map"],[1968,44,1916,48],[1968,45,1916,49,"userInfo"],[1968,53,1916,57],[1968,58,1916,62],[1969,10,1916,64],[1969,13,1916,67,"userInfo"],[1970,8,1916,76],[1970,9,1916,77],[1970,10,1916,78],[1970,11,1916,79],[1971,6,1917,8],[1972,6,1918,8],[1972,10,1918,12,"_redirectEventId"],[1972,26,1918,28],[1972,28,1918,30],[1973,8,1919,12,"user"],[1973,12,1919,16],[1973,13,1919,17,"_redirectEventId"],[1973,29,1919,33],[1973,32,1919,36,"_redirectEventId"],[1973,48,1919,52],[1974,6,1920,8],[1975,6,1921,8],[1975,13,1921,15,"user"],[1975,17,1921,19],[1976,4,1922,4],[1977,4,1923,4],[1978,0,1924,0],[1979,0,1925,0],[1980,0,1926,0],[1981,0,1927,0],[1982,4,1928,4],[1982,17,1928,17,"_fromIdTokenResponse"],[1982,37,1928,37,"_fromIdTokenResponse"],[1982,38,1928,38,"auth"],[1982,42,1928,42],[1982,44,1928,44,"idTokenResponse"],[1982,59,1928,59],[1982,61,1928,61,"isAnonymous"],[1982,72,1928,72],[1982,75,1928,75],[1982,80,1928,80],[1982,82,1928,82],[1983,6,1929,8],[1983,12,1929,14,"stsTokenManager"],[1983,27,1929,29],[1983,30,1929,32],[1983,34,1929,36,"StsTokenManager"],[1983,49,1929,51],[1983,50,1929,52],[1983,51,1929,53],[1984,6,1930,8,"stsTokenManager"],[1984,21,1930,23],[1984,22,1930,24,"updateFromServerResponse"],[1984,46,1930,48],[1984,47,1930,49,"idTokenResponse"],[1984,62,1930,64],[1984,63,1930,65],[1985,6,1931,8],[1986,6,1932,8],[1986,12,1932,14,"user"],[1986,16,1932,18],[1986,19,1932,21],[1986,23,1932,25,"UserImpl"],[1986,31,1932,33],[1986,32,1932,34],[1987,8,1933,12,"uid"],[1987,11,1933,15],[1987,13,1933,17,"idTokenResponse"],[1987,28,1933,32],[1987,29,1933,33,"localId"],[1987,36,1933,40],[1988,8,1934,12,"auth"],[1988,12,1934,16],[1989,8,1935,12,"stsTokenManager"],[1989,23,1935,27],[1990,8,1936,12,"isAnonymous"],[1991,6,1937,8],[1991,7,1937,9],[1991,8,1937,10],[1992,6,1938,8],[1993,6,1939,8],[1993,12,1939,14,"_reloadWithoutSaving"],[1993,32,1939,34],[1993,33,1939,35,"user"],[1993,37,1939,39],[1993,38,1939,40],[1994,6,1940,8],[1994,13,1940,15,"user"],[1994,17,1940,19],[1995,4,1941,4],[1996,4,1942,4],[1997,0,1943,0],[1998,0,1944,0],[1999,0,1945,0],[2000,0,1946,0],[2001,4,1947,4],[2001,17,1947,17,"_fromGetAccountInfoResponse"],[2001,44,1947,44,"_fromGetAccountInfoResponse"],[2001,45,1947,45,"auth"],[2001,49,1947,49],[2001,51,1947,51,"response"],[2001,59,1947,59],[2001,61,1947,61,"idToken"],[2001,68,1947,68],[2001,70,1947,70],[2002,6,1948,8],[2002,12,1948,14,"coreAccount"],[2002,23,1948,25],[2002,26,1948,28,"response"],[2002,34,1948,36],[2002,35,1948,37,"users"],[2002,40,1948,42],[2002,41,1948,43],[2002,42,1948,44],[2002,43,1948,45],[2003,6,1949,8,"_assert"],[2003,13,1949,15],[2003,14,1949,16,"coreAccount"],[2003,25,1949,27],[2003,26,1949,28,"localId"],[2003,33,1949,35],[2003,38,1949,40,"undefined"],[2003,47,1949,49],[2003,49,1949,51],[2003,65,1949,67],[2003,66,1949,68],[2003,100,1949,102],[2003,101,1949,103],[2004,6,1950,8],[2004,12,1950,14,"providerData"],[2004,24,1950,26],[2004,27,1950,29,"coreAccount"],[2004,38,1950,40],[2004,39,1950,41,"providerUserInfo"],[2004,55,1950,57],[2004,60,1950,62,"undefined"],[2004,69,1950,71],[2004,72,1951,14,"extractProviderData"],[2004,91,1951,33],[2004,92,1951,34,"coreAccount"],[2004,103,1951,45],[2004,104,1951,46,"providerUserInfo"],[2004,120,1951,62],[2004,121,1951,63],[2004,124,1952,14],[2004,126,1952,16],[2005,6,1953,8],[2005,12,1953,14,"isAnonymous"],[2005,23,1953,25],[2005,26,1953,28],[2005,28,1953,30,"coreAccount"],[2005,39,1953,41],[2005,40,1953,42,"email"],[2005,45,1953,47],[2005,49,1953,51,"coreAccount"],[2005,60,1953,62],[2005,61,1953,63,"passwordHash"],[2005,73,1953,75],[2005,74,1953,76],[2005,78,1953,80],[2005,79,1953,81,"providerData"],[2005,91,1953,93],[2005,93,1953,95,"length"],[2005,99,1953,101],[2006,6,1954,8],[2006,12,1954,14,"stsTokenManager"],[2006,27,1954,29],[2006,30,1954,32],[2006,34,1954,36,"StsTokenManager"],[2006,49,1954,51],[2006,50,1954,52],[2006,51,1954,53],[2007,6,1955,8,"stsTokenManager"],[2007,21,1955,23],[2007,22,1955,24,"updateFromIdToken"],[2007,39,1955,41],[2007,40,1955,42,"idToken"],[2007,47,1955,49],[2007,48,1955,50],[2008,6,1956,8],[2009,6,1957,8],[2009,12,1957,14,"user"],[2009,16,1957,18],[2009,19,1957,21],[2009,23,1957,25,"UserImpl"],[2009,31,1957,33],[2009,32,1957,34],[2010,8,1958,12,"uid"],[2010,11,1958,15],[2010,13,1958,17,"coreAccount"],[2010,24,1958,28],[2010,25,1958,29,"localId"],[2010,32,1958,36],[2011,8,1959,12,"auth"],[2011,12,1959,16],[2012,8,1960,12,"stsTokenManager"],[2012,23,1960,27],[2013,8,1961,12,"isAnonymous"],[2014,6,1962,8],[2014,7,1962,9],[2014,8,1962,10],[2015,6,1963,8],[2016,6,1964,8],[2016,12,1964,14,"updates"],[2016,19,1964,21],[2016,22,1964,24],[2017,8,1965,12,"uid"],[2017,11,1965,15],[2017,13,1965,17,"coreAccount"],[2017,24,1965,28],[2017,25,1965,29,"localId"],[2017,32,1965,36],[2018,8,1966,12,"displayName"],[2018,19,1966,23],[2018,21,1966,25,"coreAccount"],[2018,32,1966,36],[2018,33,1966,37,"displayName"],[2018,44,1966,48],[2018,48,1966,52],[2018,52,1966,56],[2019,8,1967,12,"photoURL"],[2019,16,1967,20],[2019,18,1967,22,"coreAccount"],[2019,29,1967,33],[2019,30,1967,34,"photoUrl"],[2019,38,1967,42],[2019,42,1967,46],[2019,46,1967,50],[2020,8,1968,12,"email"],[2020,13,1968,17],[2020,15,1968,19,"coreAccount"],[2020,26,1968,30],[2020,27,1968,31,"email"],[2020,32,1968,36],[2020,36,1968,40],[2020,40,1968,44],[2021,8,1969,12,"emailVerified"],[2021,21,1969,25],[2021,23,1969,27,"coreAccount"],[2021,34,1969,38],[2021,35,1969,39,"emailVerified"],[2021,48,1969,52],[2021,52,1969,56],[2021,57,1969,61],[2022,8,1970,12,"phoneNumber"],[2022,19,1970,23],[2022,21,1970,25,"coreAccount"],[2022,32,1970,36],[2022,33,1970,37,"phoneNumber"],[2022,44,1970,48],[2022,48,1970,52],[2022,52,1970,56],[2023,8,1971,12,"tenantId"],[2023,16,1971,20],[2023,18,1971,22,"coreAccount"],[2023,29,1971,33],[2023,30,1971,34,"tenantId"],[2023,38,1971,42],[2023,42,1971,46],[2023,46,1971,50],[2024,8,1972,12,"providerData"],[2024,20,1972,24],[2025,8,1973,12,"metadata"],[2025,16,1973,20],[2025,18,1973,22],[2025,22,1973,26,"UserMetadata"],[2025,34,1973,38],[2025,35,1973,39,"coreAccount"],[2025,46,1973,50],[2025,47,1973,51,"createdAt"],[2025,56,1973,60],[2025,58,1973,62,"coreAccount"],[2025,69,1973,73],[2025,70,1973,74,"lastLoginAt"],[2025,81,1973,85],[2025,82,1973,86],[2026,8,1974,12,"isAnonymous"],[2026,19,1974,23],[2026,21,1974,25],[2026,23,1974,27,"coreAccount"],[2026,34,1974,38],[2026,35,1974,39,"email"],[2026,40,1974,44],[2026,44,1974,48,"coreAccount"],[2026,55,1974,59],[2026,56,1974,60,"passwordHash"],[2026,68,1974,72],[2026,69,1974,73],[2026,73,1975,16],[2026,74,1975,17,"providerData"],[2026,86,1975,29],[2026,88,1975,31,"length"],[2027,6,1976,8],[2027,7,1976,9],[2028,6,1977,8,"Object"],[2028,12,1977,14],[2028,13,1977,15,"assign"],[2028,19,1977,21],[2028,20,1977,22,"user"],[2028,24,1977,26],[2028,26,1977,28,"updates"],[2028,33,1977,35],[2028,34,1977,36],[2029,6,1978,8],[2029,13,1978,15,"user"],[2029,17,1978,19],[2030,4,1979,4],[2031,2,1980,0],[2033,2,1982,0],[2034,0,1983,0],[2035,0,1984,0],[2036,0,1985,0],[2037,0,1986,0],[2038,0,1987,0],[2039,0,1988,0],[2040,0,1989,0],[2041,0,1990,0],[2042,0,1991,0],[2043,0,1992,0],[2044,0,1993,0],[2045,0,1994,0],[2046,0,1995,0],[2047,0,1996,0],[2048,0,1997,0],[2049,2,1982,0,"exports"],[2049,9,1982,0],[2049,10,1982,0,"aL"],[2049,12,1982,0],[2049,15,1982,0,"UserImpl"],[2049,23,1982,0],[2050,2,1998,0],[2050,8,1998,6,"instanceCache"],[2050,21,1998,19],[2050,24,1998,22],[2050,28,1998,26,"Map"],[2050,31,1998,29],[2050,32,1998,30],[2050,33,1998,31],[2051,2,1999,0],[2051,11,1999,9,"_getInstance"],[2051,23,1999,21,"_getInstance"],[2051,24,1999,22,"cls"],[2051,27,1999,25],[2051,29,1999,27],[2052,4,2000,4,"debugAssert"],[2052,15,2000,15],[2052,16,2000,16,"cls"],[2052,19,2000,19],[2052,31,2000,31,"Function"],[2052,39,2000,39],[2052,41,2000,41],[2052,70,2000,70],[2052,71,2000,71],[2053,4,2001,4],[2053,8,2001,8,"instance"],[2053,16,2001,16],[2053,19,2001,19,"instanceCache"],[2053,32,2001,32],[2053,33,2001,33,"get"],[2053,36,2001,36],[2053,37,2001,37,"cls"],[2053,40,2001,40],[2053,41,2001,41],[2054,4,2002,4],[2054,8,2002,8,"instance"],[2054,16,2002,16],[2054,18,2002,18],[2055,6,2003,8,"debugAssert"],[2055,17,2003,19],[2055,18,2003,20,"instance"],[2055,26,2003,28],[2055,38,2003,40,"cls"],[2055,41,2003,43],[2055,43,2003,45],[2055,91,2003,93],[2055,92,2003,94],[2056,6,2004,8],[2056,13,2004,15,"instance"],[2056,21,2004,23],[2057,4,2005,4],[2058,4,2006,4,"instance"],[2058,12,2006,12],[2058,15,2006,15],[2058,19,2006,19,"cls"],[2058,22,2006,22],[2058,23,2006,23],[2058,24,2006,24],[2059,4,2007,4,"instanceCache"],[2059,17,2007,17],[2059,18,2007,18,"set"],[2059,21,2007,21],[2059,22,2007,22,"cls"],[2059,25,2007,25],[2059,27,2007,27,"instance"],[2059,35,2007,35],[2059,36,2007,36],[2060,4,2008,4],[2060,11,2008,11,"instance"],[2060,19,2008,19],[2061,2,2009,0],[2063,2,2011,0],[2064,0,2012,0],[2065,0,2013,0],[2066,0,2014,0],[2067,0,2015,0],[2068,0,2016,0],[2069,0,2017,0],[2070,0,2018,0],[2071,0,2019,0],[2072,0,2020,0],[2073,0,2021,0],[2074,0,2022,0],[2075,0,2023,0],[2076,0,2024,0],[2077,0,2025,0],[2078,0,2026,0],[2079,2,2027,0],[2079,8,2027,6,"InMemoryPersistence"],[2079,27,2027,25],[2079,28,2027,26],[2080,4,2028,4,"constructor"],[2080,15,2028,15,"constructor"],[2080,16,2028,15],[2080,18,2028,18],[2081,6,2029,8],[2081,10,2029,12],[2081,11,2029,13,"type"],[2081,15,2029,17],[2081,18,2029,20],[2081,24,2029,26],[2081,25,2029,27],[2082,6,2030,8],[2082,10,2030,12],[2082,11,2030,13,"storage"],[2082,18,2030,20],[2082,21,2030,23],[2082,22,2030,24],[2082,23,2030,25],[2083,4,2031,4],[2084,4,2032,4],[2084,10,2032,10,"_isAvailable"],[2084,22,2032,22,"_isAvailable"],[2084,23,2032,22],[2084,25,2032,25],[2085,6,2033,8],[2085,13,2033,15],[2085,17,2033,19],[2086,4,2034,4],[2087,4,2035,4],[2087,10,2035,10,"_set"],[2087,14,2035,14,"_set"],[2087,15,2035,15,"key"],[2087,18,2035,18],[2087,20,2035,20,"value"],[2087,25,2035,25],[2087,27,2035,27],[2088,6,2036,8],[2088,10,2036,12],[2088,11,2036,13,"storage"],[2088,18,2036,20],[2088,19,2036,21,"key"],[2088,22,2036,24],[2088,23,2036,25],[2088,26,2036,28,"value"],[2088,31,2036,33],[2089,4,2037,4],[2090,4,2038,4],[2090,10,2038,10,"_get"],[2090,14,2038,14,"_get"],[2090,15,2038,15,"key"],[2090,18,2038,18],[2090,20,2038,20],[2091,6,2039,8],[2091,12,2039,14,"value"],[2091,17,2039,19],[2091,20,2039,22],[2091,24,2039,26],[2091,25,2039,27,"storage"],[2091,32,2039,34],[2091,33,2039,35,"key"],[2091,36,2039,38],[2091,37,2039,39],[2092,6,2040,8],[2092,13,2040,15,"value"],[2092,18,2040,20],[2092,23,2040,25,"undefined"],[2092,32,2040,34],[2092,35,2040,37],[2092,39,2040,41],[2092,42,2040,44,"value"],[2092,47,2040,49],[2093,4,2041,4],[2094,4,2042,4],[2094,10,2042,10,"_remove"],[2094,17,2042,17,"_remove"],[2094,18,2042,18,"key"],[2094,21,2042,21],[2094,23,2042,23],[2095,6,2043,8],[2095,13,2043,15],[2095,17,2043,19],[2095,18,2043,20,"storage"],[2095,25,2043,27],[2095,26,2043,28,"key"],[2095,29,2043,31],[2095,30,2043,32],[2096,4,2044,4],[2097,4,2045,4,"_addListener"],[2097,16,2045,16,"_addListener"],[2097,17,2045,17,"_key"],[2097,21,2045,21],[2097,23,2045,23,"_listener"],[2097,32,2045,32],[2097,34,2045,34],[2098,6,2046,8],[2099,6,2047,8],[2100,4,2048,4],[2101,4,2049,4,"_removeListener"],[2101,19,2049,19,"_removeListener"],[2101,20,2049,20,"_key"],[2101,24,2049,24],[2101,26,2049,26,"_listener"],[2101,35,2049,35],[2101,37,2049,37],[2102,6,2050,8],[2103,6,2051,8],[2104,4,2052,4],[2105,2,2053,0],[2106,2,2054,0,"InMemoryPersistence"],[2106,21,2054,19],[2106,22,2054,20,"type"],[2106,26,2054,24],[2106,29,2054,27],[2106,35,2054,33],[2107,2,2055,0],[2108,0,2056,0],[2109,0,2057,0],[2110,0,2058,0],[2111,0,2059,0],[2112,2,2060,0],[2112,8,2060,6,"inMemoryPersistence"],[2112,27,2060,25],[2112,30,2060,25,"exports"],[2112,37,2060,25],[2112,38,2060,25,"V"],[2112,39,2060,25],[2112,42,2060,28,"InMemoryPersistence"],[2112,61,2060,47],[2114,2,2062,0],[2115,0,2063,0],[2116,0,2064,0],[2117,0,2065,0],[2118,0,2066,0],[2119,0,2067,0],[2120,0,2068,0],[2121,0,2069,0],[2122,0,2070,0],[2123,0,2071,0],[2124,0,2072,0],[2125,0,2073,0],[2126,0,2074,0],[2127,0,2075,0],[2128,0,2076,0],[2129,0,2077,0],[2130,2,2078,0],[2130,11,2078,9,"_persistenceKeyName"],[2130,30,2078,28,"_persistenceKeyName"],[2130,31,2078,29,"key"],[2130,34,2078,32],[2130,36,2078,34,"apiKey"],[2130,42,2078,40],[2130,44,2078,42,"appName"],[2130,51,2078,49],[2130,53,2078,51],[2131,4,2079,4],[2131,11,2079,11],[2131,14,2079,14],[2131,24,2079,24],[2131,25,2079,25],[2131,56,2079,56,"key"],[2131,59,2079,59],[2131,63,2079,63,"apiKey"],[2131,69,2079,69],[2131,73,2079,73,"appName"],[2131,80,2079,80],[2131,82,2079,82],[2132,2,2080,0],[2133,2,2081,0],[2133,8,2081,6,"PersistenceUserManager"],[2133,30,2081,28],[2133,31,2081,29],[2134,4,2082,4,"constructor"],[2134,15,2082,15,"constructor"],[2134,16,2082,16,"persistence"],[2134,27,2082,27],[2134,29,2082,29,"auth"],[2134,33,2082,33],[2134,35,2082,35,"userKey"],[2134,42,2082,42],[2134,44,2082,44],[2135,6,2083,8],[2135,10,2083,12],[2135,11,2083,13,"persistence"],[2135,22,2083,24],[2135,25,2083,27,"persistence"],[2135,36,2083,38],[2136,6,2084,8],[2136,10,2084,12],[2136,11,2084,13,"auth"],[2136,15,2084,17],[2136,18,2084,20,"auth"],[2136,22,2084,24],[2137,6,2085,8],[2137,10,2085,12],[2137,11,2085,13,"userKey"],[2137,18,2085,20],[2137,21,2085,23,"userKey"],[2137,28,2085,30],[2138,6,2086,8],[2138,12,2086,14],[2139,8,2086,16,"config"],[2139,14,2086,22],[2140,8,2086,24,"name"],[2141,6,2086,29],[2141,7,2086,30],[2141,10,2086,33],[2141,14,2086,37],[2141,15,2086,38,"auth"],[2141,19,2086,42],[2142,6,2087,8],[2142,10,2087,12],[2142,11,2087,13,"fullUserKey"],[2142,22,2087,24],[2142,25,2087,27,"_persistenceKeyName"],[2142,44,2087,46],[2142,45,2087,47],[2142,49,2087,51],[2142,50,2087,52,"userKey"],[2142,57,2087,59],[2142,59,2087,61,"config"],[2142,65,2087,67],[2142,66,2087,68,"apiKey"],[2142,72,2087,74],[2142,74,2087,76,"name"],[2142,78,2087,80],[2142,79,2087,81],[2143,6,2088,8],[2143,10,2088,12],[2143,11,2088,13,"fullPersistenceKey"],[2143,29,2088,31],[2143,32,2088,34,"_persistenceKeyName"],[2143,51,2088,53],[2143,52,2088,54],[2143,65,2088,67],[2143,66,2088,68],[2143,98,2088,100,"config"],[2143,104,2088,106],[2143,105,2088,107,"apiKey"],[2143,111,2088,113],[2143,113,2088,115,"name"],[2143,117,2088,119],[2143,118,2088,120],[2144,6,2089,8],[2144,10,2089,12],[2144,11,2089,13,"boundEventHandler"],[2144,28,2089,30],[2144,31,2089,33,"auth"],[2144,35,2089,37],[2144,36,2089,38,"_onStorageEvent"],[2144,51,2089,53],[2144,52,2089,54,"bind"],[2144,56,2089,58],[2144,57,2089,59,"auth"],[2144,61,2089,63],[2144,62,2089,64],[2145,6,2090,8],[2145,10,2090,12],[2145,11,2090,13,"persistence"],[2145,22,2090,24],[2145,23,2090,25,"_addListener"],[2145,35,2090,37],[2145,36,2090,38],[2145,40,2090,42],[2145,41,2090,43,"fullUserKey"],[2145,52,2090,54],[2145,54,2090,56],[2145,58,2090,60],[2145,59,2090,61,"boundEventHandler"],[2145,76,2090,78],[2145,77,2090,79],[2146,4,2091,4],[2147,4,2092,4,"setCurrentUser"],[2147,18,2092,18,"setCurrentUser"],[2147,19,2092,19,"user"],[2147,23,2092,23],[2147,25,2092,25],[2148,6,2093,8],[2148,13,2093,15],[2148,17,2093,19],[2148,18,2093,20,"persistence"],[2148,29,2093,31],[2148,30,2093,32,"_set"],[2148,34,2093,36],[2148,35,2093,37],[2148,39,2093,41],[2148,40,2093,42,"fullUserKey"],[2148,51,2093,53],[2148,53,2093,55,"user"],[2148,57,2093,59],[2148,58,2093,60,"toJSON"],[2148,64,2093,66],[2148,65,2093,67],[2148,66,2093,68],[2148,67,2093,69],[2149,4,2094,4],[2150,4,2095,4],[2150,10,2095,10,"getCurrentUser"],[2150,24,2095,24,"getCurrentUser"],[2150,25,2095,24],[2150,27,2095,27],[2151,6,2096,8],[2151,12,2096,14,"blob"],[2151,16,2096,18],[2151,19,2096,21],[2151,25,2096,27],[2151,29,2096,31],[2151,30,2096,32,"persistence"],[2151,41,2096,43],[2151,42,2096,44,"_get"],[2151,46,2096,48],[2151,47,2096,49],[2151,51,2096,53],[2151,52,2096,54,"fullUserKey"],[2151,63,2096,65],[2151,64,2096,66],[2152,6,2097,8],[2152,10,2097,12],[2152,11,2097,13,"blob"],[2152,15,2097,17],[2152,17,2097,19],[2153,8,2098,12],[2153,15,2098,19],[2153,19,2098,23],[2154,6,2099,8],[2155,6,2100,8],[2155,10,2100,12],[2155,17,2100,19,"blob"],[2155,21,2100,23],[2155,26,2100,28],[2155,34,2100,36],[2155,36,2100,38],[2156,8,2101,12],[2156,14,2101,18,"response"],[2156,22,2101,26],[2156,25,2101,29],[2156,31,2101,35,"getAccountInfo"],[2156,45,2101,49],[2156,46,2101,50],[2156,50,2101,54],[2156,51,2101,55,"auth"],[2156,55,2101,59],[2156,57,2101,61],[2157,10,2101,63,"idToken"],[2157,17,2101,70],[2157,19,2101,72,"blob"],[2158,8,2101,77],[2158,9,2101,78],[2158,10,2101,79],[2158,11,2101,80,"catch"],[2158,16,2101,85],[2158,17,2101,86],[2158,23,2101,92,"undefined"],[2158,32,2101,101],[2158,33,2101,102],[2159,8,2102,12],[2159,12,2102,16],[2159,13,2102,17,"response"],[2159,21,2102,25],[2159,23,2102,27],[2160,10,2103,16],[2160,17,2103,23],[2160,21,2103,27],[2161,8,2104,12],[2162,8,2105,12],[2162,15,2105,19,"UserImpl"],[2162,23,2105,27],[2162,24,2105,28,"_fromGetAccountInfoResponse"],[2162,51,2105,55],[2162,52,2105,56],[2162,56,2105,60],[2162,57,2105,61,"auth"],[2162,61,2105,65],[2162,63,2105,67,"response"],[2162,71,2105,75],[2162,73,2105,77,"blob"],[2162,77,2105,81],[2162,78,2105,82],[2163,6,2106,8],[2164,6,2107,8],[2164,13,2107,15,"UserImpl"],[2164,21,2107,23],[2164,22,2107,24,"_fromJSON"],[2164,31,2107,33],[2164,32,2107,34],[2164,36,2107,38],[2164,37,2107,39,"auth"],[2164,41,2107,43],[2164,43,2107,45,"blob"],[2164,47,2107,49],[2164,48,2107,50],[2165,4,2108,4],[2166,4,2109,4,"removeCurrentUser"],[2166,21,2109,21,"removeCurrentUser"],[2166,22,2109,21],[2166,24,2109,24],[2167,6,2110,8],[2167,13,2110,15],[2167,17,2110,19],[2167,18,2110,20,"persistence"],[2167,29,2110,31],[2167,30,2110,32,"_remove"],[2167,37,2110,39],[2167,38,2110,40],[2167,42,2110,44],[2167,43,2110,45,"fullUserKey"],[2167,54,2110,56],[2167,55,2110,57],[2168,4,2111,4],[2169,4,2112,4,"savePersistenceForRedirect"],[2169,30,2112,30,"savePersistenceForRedirect"],[2169,31,2112,30],[2169,33,2112,33],[2170,6,2113,8],[2170,13,2113,15],[2170,17,2113,19],[2170,18,2113,20,"persistence"],[2170,29,2113,31],[2170,30,2113,32,"_set"],[2170,34,2113,36],[2170,35,2113,37],[2170,39,2113,41],[2170,40,2113,42,"fullPersistenceKey"],[2170,58,2113,60],[2170,60,2113,62],[2170,64,2113,66],[2170,65,2113,67,"persistence"],[2170,76,2113,78],[2170,77,2113,79,"type"],[2170,81,2113,83],[2170,82,2113,84],[2171,4,2114,4],[2172,4,2115,4],[2172,10,2115,10,"setPersistence"],[2172,24,2115,24,"setPersistence"],[2172,25,2115,25,"newPersistence"],[2172,39,2115,39],[2172,41,2115,41],[2173,6,2116,8],[2173,10,2116,12],[2173,14,2116,16],[2173,15,2116,17,"persistence"],[2173,26,2116,28],[2173,31,2116,33,"newPersistence"],[2173,45,2116,47],[2173,47,2116,49],[2174,8,2117,12],[2175,6,2118,8],[2176,6,2119,8],[2176,12,2119,14,"currentUser"],[2176,23,2119,25],[2176,26,2119,28],[2176,32,2119,34],[2176,36,2119,38],[2176,37,2119,39,"getCurrentUser"],[2176,51,2119,53],[2176,52,2119,54],[2176,53,2119,55],[2177,6,2120,8],[2177,12,2120,14],[2177,16,2120,18],[2177,17,2120,19,"removeCurrentUser"],[2177,34,2120,36],[2177,35,2120,37],[2177,36,2120,38],[2178,6,2121,8],[2178,10,2121,12],[2178,11,2121,13,"persistence"],[2178,22,2121,24],[2178,25,2121,27,"newPersistence"],[2178,39,2121,41],[2179,6,2122,8],[2179,10,2122,12,"currentUser"],[2179,21,2122,23],[2179,23,2122,25],[2180,8,2123,12],[2180,15,2123,19],[2180,19,2123,23],[2180,20,2123,24,"setCurrentUser"],[2180,34,2123,38],[2180,35,2123,39,"currentUser"],[2180,46,2123,50],[2180,47,2123,51],[2181,6,2124,8],[2182,4,2125,4],[2183,4,2126,4,"delete"],[2183,10,2126,10,"delete"],[2183,11,2126,10],[2183,13,2126,13],[2184,6,2127,8],[2184,10,2127,12],[2184,11,2127,13,"persistence"],[2184,22,2127,24],[2184,23,2127,25,"_removeListener"],[2184,38,2127,40],[2184,39,2127,41],[2184,43,2127,45],[2184,44,2127,46,"fullUserKey"],[2184,55,2127,57],[2184,57,2127,59],[2184,61,2127,63],[2184,62,2127,64,"boundEventHandler"],[2184,79,2127,81],[2184,80,2127,82],[2185,4,2128,4],[2186,4,2129,4],[2186,17,2129,17,"create"],[2186,23,2129,23,"create"],[2186,24,2129,24,"auth"],[2186,28,2129,28],[2186,30,2129,30,"persistenceHierarchy"],[2186,50,2129,50],[2186,52,2129,52,"userKey"],[2186,59,2129,59],[2186,62,2129,62],[2186,72,2129,72],[2186,73,2129,73],[2186,98,2129,98],[2187,6,2130,8],[2187,10,2130,12],[2187,11,2130,13,"persistenceHierarchy"],[2187,31,2130,33],[2187,32,2130,34,"length"],[2187,38,2130,40],[2187,40,2130,42],[2188,8,2131,12],[2188,15,2131,19],[2188,19,2131,23,"PersistenceUserManager"],[2188,41,2131,45],[2188,42,2131,46,"_getInstance"],[2188,54,2131,58],[2188,55,2131,59,"inMemoryPersistence"],[2188,74,2131,78],[2188,75,2131,79],[2188,77,2131,81,"auth"],[2188,81,2131,85],[2188,83,2131,87,"userKey"],[2188,90,2131,94],[2188,91,2131,95],[2189,6,2132,8],[2190,6,2133,8],[2191,6,2134,8],[2191,12,2134,14,"availablePersistences"],[2191,33,2134,35],[2191,36,2134,38],[2191,37,2134,39],[2191,43,2134,45,"Promise"],[2191,50,2134,52],[2191,51,2134,53,"all"],[2191,54,2134,56],[2191,55,2134,57,"persistenceHierarchy"],[2191,75,2134,77],[2191,76,2134,78,"map"],[2191,79,2134,81],[2191,80,2134,82],[2191,86,2134,89,"persistence"],[2191,97,2134,100],[2191,101,2134,105],[2192,8,2135,12],[2192,12,2135,16],[2192,18,2135,22,"persistence"],[2192,29,2135,33],[2192,30,2135,34,"_isAvailable"],[2192,42,2135,46],[2192,43,2135,47],[2192,44,2135,48],[2192,46,2135,50],[2193,10,2136,16],[2193,17,2136,23,"persistence"],[2193,28,2136,34],[2194,8,2137,12],[2195,8,2138,12],[2195,15,2138,19,"undefined"],[2195,24,2138,28],[2196,6,2139,8],[2196,7,2139,9],[2196,8,2139,10],[2196,9,2139,11],[2196,11,2139,13,"filter"],[2196,17,2139,19],[2196,18,2139,20,"persistence"],[2196,29,2139,31],[2196,33,2139,35,"persistence"],[2196,44,2139,46],[2196,45,2139,47],[2197,6,2140,8],[2198,6,2141,8],[2198,10,2141,12,"selectedPersistence"],[2198,29,2141,31],[2198,32,2141,34,"availablePersistences"],[2198,53,2141,55],[2198,54,2141,56],[2198,55,2141,57],[2198,56,2141,58],[2198,60,2142,12,"_getInstance"],[2198,72,2142,24],[2198,73,2142,25,"inMemoryPersistence"],[2198,92,2142,44],[2198,93,2142,45],[2199,6,2143,8],[2199,12,2143,14,"key"],[2199,15,2143,17],[2199,18,2143,20,"_persistenceKeyName"],[2199,37,2143,39],[2199,38,2143,40,"userKey"],[2199,45,2143,47],[2199,47,2143,49,"auth"],[2199,51,2143,53],[2199,52,2143,54,"config"],[2199,58,2143,60],[2199,59,2143,61,"apiKey"],[2199,65,2143,67],[2199,67,2143,69,"auth"],[2199,71,2143,73],[2199,72,2143,74,"name"],[2199,76,2143,78],[2199,77,2143,79],[2200,6,2144,8],[2201,6,2145,8],[2202,6,2146,8],[2202,10,2146,12,"userToMigrate"],[2202,23,2146,25],[2202,26,2146,28],[2202,30,2146,32],[2203,6,2147,8],[2204,6,2148,8],[2205,6,2149,8],[2206,6,2150,8],[2206,11,2150,13],[2206,17,2150,19,"persistence"],[2206,28,2150,30],[2206,32,2150,34,"persistenceHierarchy"],[2206,52,2150,54],[2206,54,2150,56],[2207,8,2151,12],[2207,12,2151,16],[2208,10,2152,16],[2208,16,2152,22,"blob"],[2208,20,2152,26],[2208,23,2152,29],[2208,29,2152,35,"persistence"],[2208,40,2152,46],[2208,41,2152,47,"_get"],[2208,45,2152,51],[2208,46,2152,52,"key"],[2208,49,2152,55],[2208,50,2152,56],[2209,10,2153,16],[2209,14,2153,20,"blob"],[2209,18,2153,24],[2209,20,2153,26],[2210,12,2154,20],[2210,16,2154,24,"user"],[2210,20,2154,28],[2211,12,2155,20],[2211,16,2155,24],[2211,23,2155,31,"blob"],[2211,27,2155,35],[2211,32,2155,40],[2211,40,2155,48],[2211,42,2155,50],[2212,14,2156,24],[2212,20,2156,30,"response"],[2212,28,2156,38],[2212,31,2156,41],[2212,37,2156,47,"getAccountInfo"],[2212,51,2156,61],[2212,52,2156,62,"auth"],[2212,56,2156,66],[2212,58,2156,68],[2213,16,2157,28,"idToken"],[2213,23,2157,35],[2213,25,2157,37,"blob"],[2214,14,2158,24],[2214,15,2158,25],[2214,16,2158,26],[2214,17,2158,27,"catch"],[2214,22,2158,32],[2214,23,2158,33],[2214,29,2158,39,"undefined"],[2214,38,2158,48],[2214,39,2158,49],[2215,14,2159,24],[2215,18,2159,28],[2215,19,2159,29,"response"],[2215,27,2159,37],[2215,29,2159,39],[2216,16,2160,28],[2217,14,2161,24],[2218,14,2162,24,"user"],[2218,18,2162,28],[2218,21,2162,31],[2218,27,2162,37,"UserImpl"],[2218,35,2162,45],[2218,36,2162,46,"_fromGetAccountInfoResponse"],[2218,63,2162,73],[2218,64,2162,74,"auth"],[2218,68,2162,78],[2218,70,2162,80,"response"],[2218,78,2162,88],[2218,80,2162,90,"blob"],[2218,84,2162,94],[2218,85,2162,95],[2219,12,2163,20],[2219,13,2163,21],[2219,19,2164,25],[2220,14,2165,24,"user"],[2220,18,2165,28],[2220,21,2165,31,"UserImpl"],[2220,29,2165,39],[2220,30,2165,40,"_fromJSON"],[2220,39,2165,49],[2220,40,2165,50,"auth"],[2220,44,2165,54],[2220,46,2165,56,"blob"],[2220,50,2165,60],[2220,51,2165,61],[2220,52,2165,62],[2220,53,2165,63],[2221,12,2166,20],[2222,12,2167,20],[2222,16,2167,24,"persistence"],[2222,27,2167,35],[2222,32,2167,40,"selectedPersistence"],[2222,51,2167,59],[2222,53,2167,61],[2223,14,2168,24,"userToMigrate"],[2223,27,2168,37],[2223,30,2168,40,"user"],[2223,34,2168,44],[2224,12,2169,20],[2225,12,2170,20,"selectedPersistence"],[2225,31,2170,39],[2225,34,2170,42,"persistence"],[2225,45,2170,53],[2226,12,2171,20],[2227,10,2172,16],[2228,8,2173,12],[2228,9,2173,13],[2228,10,2174,12],[2228,16,2174,18],[2228,17,2174,20],[2229,6,2175,8],[2230,6,2176,8],[2231,6,2177,8],[2232,6,2178,8],[2232,12,2178,14,"migrationHierarchy"],[2232,30,2178,32],[2232,33,2178,35,"availablePersistences"],[2232,54,2178,56],[2232,55,2178,57,"filter"],[2232,61,2178,63],[2232,62,2178,64,"p"],[2232,63,2178,65],[2232,67,2178,69,"p"],[2232,68,2178,70],[2232,69,2178,71,"_shouldAllowMigration"],[2232,90,2178,92],[2232,91,2178,93],[2233,6,2179,8],[2234,6,2180,8],[2234,10,2180,12],[2234,11,2180,13,"selectedPersistence"],[2234,30,2180,32],[2234,31,2180,33,"_shouldAllowMigration"],[2234,52,2180,54],[2234,56,2181,12],[2234,57,2181,13,"migrationHierarchy"],[2234,75,2181,31],[2234,76,2181,32,"length"],[2234,82,2181,38],[2234,84,2181,40],[2235,8,2182,12],[2235,15,2182,19],[2235,19,2182,23,"PersistenceUserManager"],[2235,41,2182,45],[2235,42,2182,46,"selectedPersistence"],[2235,61,2182,65],[2235,63,2182,67,"auth"],[2235,67,2182,71],[2235,69,2182,73,"userKey"],[2235,76,2182,80],[2235,77,2182,81],[2236,6,2183,8],[2237,6,2184,8,"selectedPersistence"],[2237,25,2184,27],[2237,28,2184,30,"migrationHierarchy"],[2237,46,2184,48],[2237,47,2184,49],[2237,48,2184,50],[2237,49,2184,51],[2238,6,2185,8],[2238,10,2185,12,"userToMigrate"],[2238,23,2185,25],[2238,25,2185,27],[2239,8,2186,12],[2240,8,2187,12],[2241,8,2188,12],[2241,14,2188,18,"selectedPersistence"],[2241,33,2188,37],[2241,34,2188,38,"_set"],[2241,38,2188,42],[2241,39,2188,43,"key"],[2241,42,2188,46],[2241,44,2188,48,"userToMigrate"],[2241,57,2188,61],[2241,58,2188,62,"toJSON"],[2241,64,2188,68],[2241,65,2188,69],[2241,66,2188,70],[2241,67,2188,71],[2242,6,2189,8],[2243,6,2190,8],[2244,6,2191,8],[2245,6,2192,8],[2245,12,2192,14,"Promise"],[2245,19,2192,21],[2245,20,2192,22,"all"],[2245,23,2192,25],[2245,24,2192,26,"persistenceHierarchy"],[2245,44,2192,46],[2245,45,2192,47,"map"],[2245,48,2192,50],[2245,49,2192,51],[2245,55,2192,58,"persistence"],[2245,66,2192,69],[2245,70,2192,74],[2246,8,2193,12],[2246,12,2193,16,"persistence"],[2246,23,2193,27],[2246,28,2193,32,"selectedPersistence"],[2246,47,2193,51],[2246,49,2193,53],[2247,10,2194,16],[2247,14,2194,20],[2248,12,2195,20],[2248,18,2195,26,"persistence"],[2248,29,2195,37],[2248,30,2195,38,"_remove"],[2248,37,2195,45],[2248,38,2195,46,"key"],[2248,41,2195,49],[2248,42,2195,50],[2249,10,2196,16],[2249,11,2196,17],[2249,12,2197,16],[2249,18,2197,22],[2249,19,2197,24],[2250,8,2198,12],[2251,6,2199,8],[2251,7,2199,9],[2251,8,2199,10],[2251,9,2199,11],[2252,6,2200,8],[2252,13,2200,15],[2252,17,2200,19,"PersistenceUserManager"],[2252,39,2200,41],[2252,40,2200,42,"selectedPersistence"],[2252,59,2200,61],[2252,61,2200,63,"auth"],[2252,65,2200,67],[2252,67,2200,69,"userKey"],[2252,74,2200,76],[2252,75,2200,77],[2253,4,2201,4],[2254,2,2202,0],[2256,2,2204,0],[2257,0,2205,0],[2258,0,2206,0],[2259,0,2207,0],[2260,0,2208,0],[2261,0,2209,0],[2262,0,2210,0],[2263,0,2211,0],[2264,0,2212,0],[2265,0,2213,0],[2266,0,2214,0],[2267,0,2215,0],[2268,0,2216,0],[2269,0,2217,0],[2270,0,2218,0],[2271,0,2219,0],[2272,2,2220,0],[2273,0,2221,0],[2274,0,2222,0],[2275,2,2223,0],[2275,11,2223,9,"_getBrowserName"],[2275,26,2223,24,"_getBrowserName"],[2275,27,2223,25,"userAgent"],[2275,36,2223,34],[2275,38,2223,36],[2276,4,2224,4],[2276,10,2224,10,"ua"],[2276,12,2224,12],[2276,15,2224,15,"userAgent"],[2276,24,2224,24],[2276,25,2224,25,"toLowerCase"],[2276,36,2224,36],[2276,37,2224,37],[2276,38,2224,38],[2277,4,2225,4],[2277,8,2225,8,"ua"],[2277,10,2225,10],[2277,11,2225,11,"includes"],[2277,19,2225,19],[2277,20,2225,20],[2277,28,2225,28],[2277,29,2225,29],[2277,33,2225,33,"ua"],[2277,35,2225,35],[2277,36,2225,36,"includes"],[2277,44,2225,44],[2277,45,2225,45],[2277,51,2225,51],[2277,52,2225,52],[2277,56,2225,56,"ua"],[2277,58,2225,58],[2277,59,2225,59,"includes"],[2277,67,2225,67],[2277,68,2225,68],[2277,76,2225,76],[2277,77,2225,77],[2277,79,2225,79],[2278,6,2226,8],[2278,13,2226,15],[2278,20,2226,22],[2278,21,2226,23],[2279,4,2227,4],[2279,5,2227,5],[2279,11,2228,9],[2279,15,2228,13,"_isIEMobile"],[2279,26,2228,24],[2279,27,2228,25,"ua"],[2279,29,2228,27],[2279,30,2228,28],[2279,32,2228,30],[2280,6,2229,8],[2281,6,2230,8],[2281,13,2230,15],[2281,23,2230,25],[2281,24,2230,26],[2282,4,2231,4],[2282,5,2231,5],[2282,11,2232,9],[2282,15,2232,13,"ua"],[2282,17,2232,15],[2282,18,2232,16,"includes"],[2282,26,2232,24],[2282,27,2232,25],[2282,33,2232,31],[2282,34,2232,32],[2282,38,2232,36,"ua"],[2282,40,2232,38],[2282,41,2232,39,"includes"],[2282,49,2232,47],[2282,50,2232,48],[2282,60,2232,58],[2282,61,2232,59],[2282,63,2232,61],[2283,6,2233,8],[2283,13,2233,15],[2283,17,2233,19],[2283,18,2233,20],[2284,4,2234,4],[2284,5,2234,5],[2284,11,2235,9],[2284,15,2235,13,"ua"],[2284,17,2235,15],[2284,18,2235,16,"includes"],[2284,26,2235,24],[2284,27,2235,25],[2284,34,2235,32],[2284,35,2235,33],[2284,37,2235,35],[2285,6,2236,8],[2285,13,2236,15],[2285,19,2236,21],[2285,20,2236,22],[2286,4,2237,4],[2286,5,2237,5],[2286,11,2238,9],[2286,15,2238,13,"_isFirefox"],[2286,25,2238,23],[2286,26,2238,24,"ua"],[2286,28,2238,26],[2286,29,2238,27],[2286,31,2238,29],[2287,6,2239,8],[2287,13,2239,15],[2287,22,2239,24],[2287,23,2239,25],[2288,4,2240,4],[2288,5,2240,5],[2288,11,2241,9],[2288,15,2241,13,"ua"],[2288,17,2241,15],[2288,18,2241,16,"includes"],[2288,26,2241,24],[2288,27,2241,25],[2288,34,2241,32],[2288,35,2241,33],[2288,37,2241,35],[2289,6,2242,8],[2289,13,2242,15],[2289,19,2242,21],[2289,20,2242,22],[2290,4,2243,4],[2290,5,2243,5],[2290,11,2244,9],[2290,15,2244,13,"_isBlackBerry"],[2290,28,2244,26],[2290,29,2244,27,"ua"],[2290,31,2244,29],[2290,32,2244,30],[2290,34,2244,32],[2291,6,2245,8],[2292,6,2246,8],[2292,13,2246,15],[2292,25,2246,27],[2292,26,2246,28],[2293,4,2247,4],[2293,5,2247,5],[2293,11,2248,9],[2293,15,2248,13,"_isWebOS"],[2293,23,2248,21],[2293,24,2248,22,"ua"],[2293,26,2248,24],[2293,27,2248,25],[2293,29,2248,27],[2294,6,2249,8],[2295,6,2250,8],[2295,13,2250,15],[2295,20,2250,22],[2295,21,2250,23],[2296,4,2251,4],[2296,5,2251,5],[2296,11,2252,9],[2296,15,2252,13,"_isSafari"],[2296,24,2252,22],[2296,25,2252,23,"ua"],[2296,27,2252,25],[2296,28,2252,26],[2296,30,2252,28],[2297,6,2253,8],[2297,13,2253,15],[2297,21,2253,23],[2297,22,2253,24],[2298,4,2254,4],[2298,5,2254,5],[2298,11,2255,9],[2298,15,2255,13],[2298,16,2255,14,"ua"],[2298,18,2255,16],[2298,19,2255,17,"includes"],[2298,27,2255,25],[2298,28,2255,26],[2298,37,2255,35],[2298,38,2255,36],[2298,42,2255,40,"_isChromeIOS"],[2298,54,2255,52],[2298,55,2255,53,"ua"],[2298,57,2255,55],[2298,58,2255,56],[2298,63,2256,8],[2298,64,2256,9,"ua"],[2298,66,2256,11],[2298,67,2256,12,"includes"],[2298,75,2256,20],[2298,76,2256,21],[2298,83,2256,28],[2298,84,2256,29],[2298,86,2256,31],[2299,6,2257,8],[2299,13,2257,15],[2299,21,2257,23],[2299,22,2257,24],[2300,4,2258,4],[2300,5,2258,5],[2300,11,2259,9],[2300,15,2259,13,"_isAndroid"],[2300,25,2259,23],[2300,26,2259,24,"ua"],[2300,28,2259,26],[2300,29,2259,27],[2300,31,2259,29],[2301,6,2260,8],[2302,6,2261,8],[2302,13,2261,15],[2302,22,2261,24],[2302,23,2261,25],[2303,4,2262,4],[2303,5,2262,5],[2303,11,2263,9],[2304,6,2264,8],[2305,6,2265,8],[2305,12,2265,14,"re"],[2305,14,2265,16],[2305,17,2265,19],[2305,50,2265,52],[2306,6,2266,8],[2306,12,2266,14,"matches"],[2306,19,2266,21],[2306,22,2266,24,"userAgent"],[2306,31,2266,33],[2306,32,2266,34,"match"],[2306,37,2266,39],[2306,38,2266,40,"re"],[2306,40,2266,42],[2306,41,2266,43],[2307,6,2267,8],[2307,10,2267,12,"matches"],[2307,17,2267,19],[2307,19,2267,21,"length"],[2307,25,2267,27],[2307,30,2267,32],[2307,31,2267,33],[2307,33,2267,35],[2308,8,2268,12],[2308,15,2268,19,"matches"],[2308,22,2268,26],[2308,23,2268,27],[2308,24,2268,28],[2308,25,2268,29],[2309,6,2269,8],[2310,4,2270,4],[2311,4,2271,4],[2311,11,2271,11],[2311,18,2271,18],[2311,19,2271,19],[2312,2,2272,0],[2313,2,2273,0],[2313,11,2273,9,"_isFirefox"],[2313,21,2273,19,"_isFirefox"],[2313,22,2273,20,"ua"],[2313,24,2273,22],[2313,27,2273,25],[2313,31,2273,25,"getUA"],[2313,42,2273,30],[2313,44,2273,31],[2313,45,2273,32],[2313,47,2273,34],[2314,4,2274,4],[2314,11,2274,11],[2314,23,2274,23],[2314,24,2274,24,"test"],[2314,28,2274,28],[2314,29,2274,29,"ua"],[2314,31,2274,31],[2314,32,2274,32],[2315,2,2275,0],[2316,2,2276,0],[2316,11,2276,9,"_isSafari"],[2316,20,2276,18,"_isSafari"],[2316,21,2276,19,"userAgent"],[2316,30,2276,28],[2316,33,2276,31],[2316,37,2276,31,"getUA"],[2316,48,2276,36],[2316,50,2276,37],[2316,51,2276,38],[2316,53,2276,40],[2317,4,2277,4],[2317,10,2277,10,"ua"],[2317,12,2277,12],[2317,15,2277,15,"userAgent"],[2317,24,2277,24],[2317,25,2277,25,"toLowerCase"],[2317,36,2277,36],[2317,37,2277,37],[2317,38,2277,38],[2318,4,2278,4],[2318,11,2278,12,"ua"],[2318,13,2278,14],[2318,14,2278,15,"includes"],[2318,22,2278,23],[2318,23,2278,24],[2318,32,2278,33],[2318,33,2278,34],[2318,37,2279,8],[2318,38,2279,9,"ua"],[2318,40,2279,11],[2318,41,2279,12,"includes"],[2318,49,2279,20],[2318,50,2279,21],[2318,59,2279,30],[2318,60,2279,31],[2318,64,2280,8],[2318,65,2280,9,"ua"],[2318,67,2280,11],[2318,68,2280,12,"includes"],[2318,76,2280,20],[2318,77,2280,21],[2318,85,2280,29],[2318,86,2280,30],[2318,90,2281,8],[2318,91,2281,9,"ua"],[2318,93,2281,11],[2318,94,2281,12,"includes"],[2318,102,2281,20],[2318,103,2281,21],[2318,112,2281,30],[2318,113,2281,31],[2319,2,2282,0],[2320,2,2283,0],[2320,11,2283,9,"_isChromeIOS"],[2320,23,2283,21,"_isChromeIOS"],[2320,24,2283,22,"ua"],[2320,26,2283,24],[2320,29,2283,27],[2320,33,2283,27,"getUA"],[2320,44,2283,32],[2320,46,2283,33],[2320,47,2283,34],[2320,49,2283,36],[2321,4,2284,4],[2321,11,2284,11],[2321,21,2284,21],[2321,22,2284,22,"test"],[2321,26,2284,26],[2321,27,2284,27,"ua"],[2321,29,2284,29],[2321,30,2284,30],[2322,2,2285,0],[2323,2,2286,0],[2323,11,2286,9,"_isIEMobile"],[2323,22,2286,20,"_isIEMobile"],[2323,23,2286,21,"ua"],[2323,25,2286,23],[2323,28,2286,26],[2323,32,2286,26,"getUA"],[2323,43,2286,31],[2323,45,2286,32],[2323,46,2286,33],[2323,48,2286,35],[2324,4,2287,4],[2324,11,2287,11],[2324,22,2287,22],[2324,23,2287,23,"test"],[2324,27,2287,27],[2324,28,2287,28,"ua"],[2324,30,2287,30],[2324,31,2287,31],[2325,2,2288,0],[2326,2,2289,0],[2326,11,2289,9,"_isAndroid"],[2326,21,2289,19,"_isAndroid"],[2326,22,2289,20,"ua"],[2326,24,2289,22],[2326,27,2289,25],[2326,31,2289,25,"getUA"],[2326,42,2289,30],[2326,44,2289,31],[2326,45,2289,32],[2326,47,2289,34],[2327,4,2290,4],[2327,11,2290,11],[2327,21,2290,21],[2327,22,2290,22,"test"],[2327,26,2290,26],[2327,27,2290,27,"ua"],[2327,29,2290,29],[2327,30,2290,30],[2328,2,2291,0],[2329,2,2292,0],[2329,11,2292,9,"_isBlackBerry"],[2329,24,2292,22,"_isBlackBerry"],[2329,25,2292,23,"ua"],[2329,27,2292,25],[2329,30,2292,28],[2329,34,2292,28,"getUA"],[2329,45,2292,33],[2329,47,2292,34],[2329,48,2292,35],[2329,50,2292,37],[2330,4,2293,4],[2330,11,2293,11],[2330,24,2293,24],[2330,25,2293,25,"test"],[2330,29,2293,29],[2330,30,2293,30,"ua"],[2330,32,2293,32],[2330,33,2293,33],[2331,2,2294,0],[2332,2,2295,0],[2332,11,2295,9,"_isWebOS"],[2332,19,2295,17,"_isWebOS"],[2332,20,2295,18,"ua"],[2332,22,2295,20],[2332,25,2295,23],[2332,29,2295,23,"getUA"],[2332,40,2295,28],[2332,42,2295,29],[2332,43,2295,30],[2332,45,2295,32],[2333,4,2296,4],[2333,11,2296,11],[2333,19,2296,19],[2333,20,2296,20,"test"],[2333,24,2296,24],[2333,25,2296,25,"ua"],[2333,27,2296,27],[2333,28,2296,28],[2334,2,2297,0],[2335,2,2298,0],[2335,11,2298,9,"_isIOS"],[2335,17,2298,15,"_isIOS"],[2335,18,2298,16,"ua"],[2335,20,2298,18],[2335,23,2298,21],[2335,27,2298,21,"getUA"],[2335,38,2298,26],[2335,40,2298,27],[2335,41,2298,28],[2335,43,2298,30],[2336,4,2299,4],[2336,11,2299,12],[2336,30,2299,31],[2336,31,2299,32,"test"],[2336,35,2299,36],[2336,36,2299,37,"ua"],[2336,38,2299,39],[2336,39,2299,40],[2336,43,2300,9],[2336,55,2300,21],[2336,56,2300,22,"test"],[2336,60,2300,26],[2336,61,2300,27,"ua"],[2336,63,2300,29],[2336,64,2300,30],[2336,68,2300,34],[2336,77,2300,43],[2336,78,2300,44,"test"],[2336,82,2300,48],[2336,83,2300,49,"ua"],[2336,85,2300,51],[2336,86,2300,53],[2337,2,2301,0],[2338,2,2302,0],[2338,11,2302,9,"_isIOS7Or8"],[2338,21,2302,19,"_isIOS7Or8"],[2338,22,2302,20,"ua"],[2338,24,2302,22],[2338,27,2302,25],[2338,31,2302,25,"getUA"],[2338,42,2302,30],[2338,44,2302,31],[2338,45,2302,32],[2338,47,2302,34],[2339,4,2303,4],[2339,11,2303,12],[2339,41,2303,42],[2339,42,2303,43,"test"],[2339,46,2303,47],[2339,47,2303,48,"ua"],[2339,49,2303,50],[2339,50,2303,51],[2339,54,2304,8],[2339,84,2304,38],[2339,85,2304,39,"test"],[2339,89,2304,43],[2339,90,2304,44,"ua"],[2339,92,2304,46],[2339,93,2304,47],[2340,2,2305,0],[2341,2,2306,0],[2341,11,2306,9,"_isIOSStandalone"],[2341,27,2306,25,"_isIOSStandalone"],[2341,28,2306,26,"ua"],[2341,30,2306,28],[2341,33,2306,31],[2341,37,2306,31,"getUA"],[2341,48,2306,36],[2341,50,2306,37],[2341,51,2306,38],[2341,53,2306,40],[2342,4,2307,4],[2342,11,2307,11,"_isIOS"],[2342,17,2307,17],[2342,18,2307,18,"ua"],[2342,20,2307,20],[2342,21,2307,21],[2342,25,2307,25],[2342,26,2307,26],[2342,27,2307,27,"window"],[2342,33,2307,33],[2342,34,2307,34,"navigator"],[2342,43,2307,43],[2342,45,2307,45,"standalone"],[2342,55,2307,55],[2343,2,2308,0],[2344,2,2309,0],[2344,11,2309,9,"_isIE10"],[2344,18,2309,16,"_isIE10"],[2344,19,2309,16],[2344,21,2309,19],[2345,4,2310,4],[2345,11,2310,11],[2345,15,2310,11,"isIE"],[2345,25,2310,15],[2345,27,2310,16],[2345,28,2310,17],[2345,32,2310,21,"document"],[2345,40,2310,29],[2345,41,2310,30,"documentMode"],[2345,53,2310,42],[2345,58,2310,47],[2345,60,2310,49],[2346,2,2311,0],[2347,2,2312,0],[2347,11,2312,9,"_isMobileBrowser"],[2347,27,2312,25,"_isMobileBrowser"],[2347,28,2312,26,"ua"],[2347,30,2312,28],[2347,33,2312,31],[2347,37,2312,31,"getUA"],[2347,48,2312,36],[2347,50,2312,37],[2347,51,2312,38],[2347,53,2312,40],[2348,4,2313,4],[2349,4,2314,4],[2349,11,2314,12,"_isIOS"],[2349,17,2314,18],[2349,18,2314,19,"ua"],[2349,20,2314,21],[2349,21,2314,22],[2349,25,2315,8,"_isAndroid"],[2349,35,2315,18],[2349,36,2315,19,"ua"],[2349,38,2315,21],[2349,39,2315,22],[2349,43,2316,8,"_isWebOS"],[2349,51,2316,16],[2349,52,2316,17,"ua"],[2349,54,2316,19],[2349,55,2316,20],[2349,59,2317,8,"_isBlackBerry"],[2349,72,2317,21],[2349,73,2317,22,"ua"],[2349,75,2317,24],[2349,76,2317,25],[2349,80,2318,8],[2349,96,2318,24],[2349,97,2318,25,"test"],[2349,101,2318,29],[2349,102,2318,30,"ua"],[2349,104,2318,32],[2349,105,2318,33],[2349,109,2319,8,"_isIEMobile"],[2349,120,2319,19],[2349,121,2319,20,"ua"],[2349,123,2319,22],[2349,124,2319,23],[2350,2,2320,0],[2352,2,2322,0],[2353,0,2323,0],[2354,0,2324,0],[2355,0,2325,0],[2356,0,2326,0],[2357,0,2327,0],[2358,0,2328,0],[2359,0,2329,0],[2360,0,2330,0],[2361,0,2331,0],[2362,0,2332,0],[2363,0,2333,0],[2364,0,2334,0],[2365,0,2335,0],[2366,0,2336,0],[2367,0,2337,0],[2368,2,2338,0],[2369,0,2339,0],[2370,0,2340,0],[2371,2,2341,0],[2371,11,2341,9,"_getClientVersion"],[2371,28,2341,26,"_getClientVersion"],[2371,29,2341,27,"clientPlatform"],[2371,43,2341,41],[2371,45,2341,43,"frameworks"],[2371,55,2341,53],[2371,58,2341,56],[2371,60,2341,58],[2371,62,2341,60],[2372,4,2342,4],[2372,8,2342,8,"reportedPlatform"],[2372,24,2342,24],[2373,4,2343,4],[2373,12,2343,12,"clientPlatform"],[2373,26,2343,26],[2374,6,2344,8],[2374,11,2344,13],[2374,20,2344,22],[2374,21,2344,23],[2375,8,2345,12],[2376,8,2346,12,"reportedPlatform"],[2376,24,2346,28],[2376,27,2346,31,"_getBrowserName"],[2376,42,2346,46],[2376,43,2346,47],[2376,47,2346,47,"getUA"],[2376,58,2346,52],[2376,60,2346,53],[2376,61,2346,54],[2376,62,2346,55],[2377,8,2347,12],[2378,6,2348,8],[2378,11,2348,13],[2378,19,2348,21],[2378,20,2348,22],[2379,8,2349,12],[2380,8,2350,12],[2381,8,2351,12],[2382,8,2352,12,"reportedPlatform"],[2382,24,2352,28],[2382,27,2352,31],[2382,30,2352,34,"_getBrowserName"],[2382,45,2352,49],[2382,46,2352,50],[2382,50,2352,50,"getUA"],[2382,61,2352,55],[2382,63,2352,56],[2382,64,2352,57],[2382,65,2352,58],[2382,69,2352,62,"clientPlatform"],[2382,83,2352,76],[2382,85,2352,78],[2383,8,2353,12],[2384,6,2354,8],[2385,8,2355,12,"reportedPlatform"],[2385,24,2355,28],[2385,27,2355,31,"clientPlatform"],[2385,41,2355,45],[2386,4,2356,4],[2387,4,2357,4],[2387,10,2357,10,"reportedFrameworks"],[2387,28,2357,28],[2387,31,2357,31,"frameworks"],[2387,41,2357,41],[2387,42,2357,42,"length"],[2387,48,2357,48],[2387,51,2358,10,"frameworks"],[2387,61,2358,20],[2387,62,2358,21,"join"],[2387,66,2358,25],[2387,67,2358,26],[2387,70,2358,29],[2387,71,2358,30],[2387,74,2359,10],[2387,92,2359,28],[2387,93,2359,29],[2387,94,2359,30],[2388,4,2360,4],[2388,11,2360,11],[2388,14,2360,14,"reportedPlatform"],[2388,30,2360,30],[2388,34,2360,34],[2388,42,2360,42],[2388,43,2360,43],[2388,78,2360,78,"SDK_VERSION"],[2388,94,2360,89],[2388,98,2360,93,"reportedFrameworks"],[2388,116,2360,111],[2388,118,2360,113],[2389,2,2361,0],[2391,2,2363,0],[2392,0,2364,0],[2393,0,2365,0],[2394,0,2366,0],[2395,0,2367,0],[2396,0,2368,0],[2397,0,2369,0],[2398,0,2370,0],[2399,0,2371,0],[2400,0,2372,0],[2401,0,2373,0],[2402,0,2374,0],[2403,0,2375,0],[2404,0,2376,0],[2405,0,2377,0],[2406,0,2378,0],[2407,2,2379,0],[2407,8,2379,6,"AuthMiddlewareQueue"],[2407,27,2379,25],[2407,28,2379,26],[2408,4,2380,4,"constructor"],[2408,15,2380,15,"constructor"],[2408,16,2380,16,"auth"],[2408,20,2380,20],[2408,22,2380,22],[2409,6,2381,8],[2409,10,2381,12],[2409,11,2381,13,"auth"],[2409,15,2381,17],[2409,18,2381,20,"auth"],[2409,22,2381,24],[2410,6,2382,8],[2410,10,2382,12],[2410,11,2382,13,"queue"],[2410,16,2382,18],[2410,19,2382,21],[2410,21,2382,23],[2411,4,2383,4],[2412,4,2384,4,"pushCallback"],[2412,16,2384,16,"pushCallback"],[2412,17,2384,17,"callback"],[2412,25,2384,25],[2412,27,2384,27,"onAbort"],[2412,34,2384,34],[2412,36,2384,36],[2413,6,2385,8],[2414,6,2386,8],[2415,6,2387,8],[2415,12,2387,14,"wrappedCallback"],[2415,27,2387,29],[2415,30,2387,33,"user"],[2415,34,2387,37],[2415,38,2387,42],[2415,42,2387,46,"Promise"],[2415,49,2387,53],[2415,50,2387,54],[2415,51,2387,55,"resolve"],[2415,58,2387,62],[2415,60,2387,64,"reject"],[2415,66,2387,70],[2415,71,2387,75],[2416,8,2388,12],[2416,12,2388,16],[2417,10,2389,16],[2417,16,2389,22,"result"],[2417,22,2389,28],[2417,25,2389,31,"callback"],[2417,33,2389,39],[2417,34,2389,40,"user"],[2417,38,2389,44],[2417,39,2389,45],[2418,10,2390,16],[2419,10,2391,16],[2420,10,2392,16,"resolve"],[2420,17,2392,23],[2420,18,2392,24,"result"],[2420,24,2392,30],[2420,25,2392,31],[2421,8,2393,12],[2421,9,2393,13],[2421,10,2394,12],[2421,17,2394,19,"e"],[2421,18,2394,20],[2421,20,2394,22],[2422,10,2395,16],[2423,10,2396,16,"reject"],[2423,16,2396,22],[2423,17,2396,23,"e"],[2423,18,2396,24],[2423,19,2396,25],[2424,8,2397,12],[2425,6,2398,8],[2425,7,2398,9],[2425,8,2398,10],[2426,6,2399,8],[2427,6,2400,8,"wrappedCallback"],[2427,21,2400,23],[2427,22,2400,24,"onAbort"],[2427,29,2400,31],[2427,32,2400,34,"onAbort"],[2427,39,2400,41],[2428,6,2401,8],[2428,10,2401,12],[2428,11,2401,13,"queue"],[2428,16,2401,18],[2428,17,2401,19,"push"],[2428,21,2401,23],[2428,22,2401,24,"wrappedCallback"],[2428,37,2401,39],[2428,38,2401,40],[2429,6,2402,8],[2429,12,2402,14,"index"],[2429,17,2402,19],[2429,20,2402,22],[2429,24,2402,26],[2429,25,2402,27,"queue"],[2429,30,2402,32],[2429,31,2402,33,"length"],[2429,37,2402,39],[2429,40,2402,42],[2429,41,2402,43],[2430,6,2403,8],[2430,13,2403,15],[2430,19,2403,21],[2431,8,2404,12],[2432,8,2405,12],[2433,8,2406,12],[2433,12,2406,16],[2433,13,2406,17,"queue"],[2433,18,2406,22],[2433,19,2406,23,"index"],[2433,24,2406,28],[2433,25,2406,29],[2433,28,2406,32],[2433,34,2406,38,"Promise"],[2433,41,2406,45],[2433,42,2406,46,"resolve"],[2433,49,2406,53],[2433,50,2406,54],[2433,51,2406,55],[2434,6,2407,8],[2434,7,2407,9],[2435,4,2408,4],[2436,4,2409,4],[2436,10,2409,10,"runMiddleware"],[2436,23,2409,23,"runMiddleware"],[2436,24,2409,24,"nextUser"],[2436,32,2409,32],[2436,34,2409,34],[2437,6,2410,8],[2437,10,2410,12],[2437,14,2410,16],[2437,15,2410,17,"auth"],[2437,19,2410,21],[2437,20,2410,22,"currentUser"],[2437,31,2410,33],[2437,36,2410,38,"nextUser"],[2437,44,2410,46],[2437,46,2410,48],[2438,8,2411,12],[2439,6,2412,8],[2440,6,2413,8],[2441,6,2414,8],[2442,6,2415,8],[2442,12,2415,14,"onAbortStack"],[2442,24,2415,26],[2442,27,2415,29],[2442,29,2415,31],[2443,6,2416,8],[2443,10,2416,12],[2444,8,2417,12],[2444,13,2417,17],[2444,19,2417,23,"beforeStateCallback"],[2444,38,2417,42],[2444,42,2417,46],[2444,46,2417,50],[2444,47,2417,51,"queue"],[2444,52,2417,56],[2444,54,2417,58],[2445,10,2418,16],[2445,16,2418,22,"beforeStateCallback"],[2445,35,2418,41],[2445,36,2418,42,"nextUser"],[2445,44,2418,50],[2445,45,2418,51],[2446,10,2419,16],[2447,10,2420,16],[2447,14,2420,20,"beforeStateCallback"],[2447,33,2420,39],[2447,34,2420,40,"onAbort"],[2447,41,2420,47],[2447,43,2420,49],[2448,12,2421,20,"onAbortStack"],[2448,24,2421,32],[2448,25,2421,33,"push"],[2448,29,2421,37],[2448,30,2421,38,"beforeStateCallback"],[2448,49,2421,57],[2448,50,2421,58,"onAbort"],[2448,57,2421,65],[2448,58,2421,66],[2449,10,2422,16],[2450,8,2423,12],[2451,6,2424,8],[2451,7,2424,9],[2451,8,2425,8],[2451,15,2425,15,"e"],[2451,16,2425,16],[2451,18,2425,18],[2452,8,2426,12],[2453,8,2427,12],[2454,8,2428,12,"onAbortStack"],[2454,20,2428,24],[2454,21,2428,25,"reverse"],[2454,28,2428,32],[2454,29,2428,33],[2454,30,2428,34],[2455,8,2429,12],[2455,13,2429,17],[2455,19,2429,23,"onAbort"],[2455,26,2429,30],[2455,30,2429,34,"onAbortStack"],[2455,42,2429,46],[2455,44,2429,48],[2456,10,2430,16],[2456,14,2430,20],[2457,12,2431,20,"onAbort"],[2457,19,2431,27],[2457,20,2431,28],[2457,21,2431,29],[2458,10,2432,16],[2458,11,2432,17],[2458,12,2433,16],[2458,19,2433,23,"_"],[2458,20,2433,24],[2458,22,2433,26],[2459,12,2434,20],[2460,10,2434,20],[2461,8,2436,12],[2462,8,2437,12],[2462,14,2437,18],[2462,18,2437,22],[2462,19,2437,23,"auth"],[2462,23,2437,27],[2462,24,2437,28,"_errorFactory"],[2462,37,2437,41],[2462,38,2437,42,"create"],[2462,44,2437,48],[2462,45,2437,49],[2462,60,2437,64],[2462,61,2437,65],[2462,96,2437,100],[2463,10,2438,16,"originalMessage"],[2463,25,2438,31],[2463,27,2438,33,"e"],[2463,28,2438,34],[2463,30,2438,36,"message"],[2464,8,2439,12],[2464,9,2439,13],[2464,10,2439,14],[2465,6,2440,8],[2466,4,2441,4],[2467,2,2442,0],[2469,2,2444,0],[2470,0,2445,0],[2471,0,2446,0],[2472,0,2447,0],[2473,0,2448,0],[2474,0,2449,0],[2475,0,2450,0],[2476,0,2451,0],[2477,0,2452,0],[2478,0,2453,0],[2479,0,2454,0],[2480,0,2455,0],[2481,0,2456,0],[2482,0,2457,0],[2483,0,2458,0],[2484,0,2459,0],[2485,2,2460,0],[2486,0,2461,0],[2487,0,2462,0],[2488,0,2463,0],[2489,0,2464,0],[2490,0,2465,0],[2491,0,2466,0],[2492,2,2467,0],[2492,17,2467,15,"_getPasswordPolicy"],[2492,35,2467,33,"_getPasswordPolicy"],[2492,36,2467,34,"auth"],[2492,40,2467,38],[2492,42,2467,40,"request"],[2492,49,2467,47],[2492,52,2467,50],[2492,53,2467,51],[2492,54,2467,52],[2492,56,2467,54],[2493,4,2468,4],[2493,11,2468,11,"_performApiRequest"],[2493,29,2468,29],[2493,30,2468,30,"auth"],[2493,34,2468,34],[2493,36,2468,36],[2493,41,2468,41],[2493,42,2468,42],[2493,64,2468,64],[2493,84,2468,84],[2493,85,2468,85],[2493,121,2468,121,"_addTidIfNecessary"],[2493,139,2468,139],[2493,140,2468,140,"auth"],[2493,144,2468,144],[2493,146,2468,146,"request"],[2493,153,2468,153],[2493,154,2468,154],[2493,155,2468,155],[2494,2,2469,0],[2496,2,2471,0],[2497,0,2472,0],[2498,0,2473,0],[2499,0,2474,0],[2500,0,2475,0],[2501,0,2476,0],[2502,0,2477,0],[2503,0,2478,0],[2504,0,2479,0],[2505,0,2480,0],[2506,0,2481,0],[2507,0,2482,0],[2508,0,2483,0],[2509,0,2484,0],[2510,0,2485,0],[2511,0,2486,0],[2512,2,2487,0],[2513,2,2488,0],[2513,8,2488,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[2513,35,2488,33],[2513,38,2488,36],[2513,39,2488,37],[2514,2,2489,0],[2515,0,2490,0],[2516,0,2491,0],[2517,0,2492,0],[2518,0,2493,0],[2519,2,2494,0],[2519,8,2494,6,"PasswordPolicyImpl"],[2519,26,2494,24],[2519,27,2494,25],[2520,4,2495,4,"constructor"],[2520,15,2495,15,"constructor"],[2520,16,2495,16,"response"],[2520,24,2495,24],[2520,26,2495,26],[2521,6,2496,8],[2522,6,2497,8],[2522,12,2497,14,"responseOptions"],[2522,27,2497,29],[2522,30,2497,32,"response"],[2522,38,2497,40],[2522,39,2497,41,"customStrengthOptions"],[2522,60,2497,62],[2523,6,2498,8],[2523,10,2498,12],[2523,11,2498,13,"customStrengthOptions"],[2523,32,2498,34],[2523,35,2498,37],[2523,36,2498,38],[2523,37,2498,39],[2524,6,2499,8],[2525,6,2500,8],[2525,10,2500,12],[2525,11,2500,13,"customStrengthOptions"],[2525,32,2500,34],[2525,33,2500,35,"minPasswordLength"],[2525,50,2500,52],[2525,53,2501,12,"responseOptions"],[2525,68,2501,27],[2525,69,2501,28,"minPasswordLength"],[2525,86,2501,45],[2525,90,2501,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[2525,117,2501,76],[2526,6,2502,8],[2526,10,2502,12,"responseOptions"],[2526,25,2502,27],[2526,26,2502,28,"maxPasswordLength"],[2526,43,2502,45],[2526,45,2502,47],[2527,8,2503,12],[2527,12,2503,16],[2527,13,2503,17,"customStrengthOptions"],[2527,34,2503,38],[2527,35,2503,39,"maxPasswordLength"],[2527,52,2503,56],[2527,55,2504,16,"responseOptions"],[2527,70,2504,31],[2527,71,2504,32,"maxPasswordLength"],[2527,88,2504,49],[2528,6,2505,8],[2529,6,2506,8],[2529,10,2506,12,"responseOptions"],[2529,25,2506,27],[2529,26,2506,28,"containsLowercaseCharacter"],[2529,52,2506,54],[2529,57,2506,59,"undefined"],[2529,66,2506,68],[2529,68,2506,70],[2530,8,2507,12],[2530,12,2507,16],[2530,13,2507,17,"customStrengthOptions"],[2530,34,2507,38],[2530,35,2507,39,"containsLowercaseLetter"],[2530,58,2507,62],[2530,61,2508,16,"responseOptions"],[2530,76,2508,31],[2530,77,2508,32,"containsLowercaseCharacter"],[2530,103,2508,58],[2531,6,2509,8],[2532,6,2510,8],[2532,10,2510,12,"responseOptions"],[2532,25,2510,27],[2532,26,2510,28,"containsUppercaseCharacter"],[2532,52,2510,54],[2532,57,2510,59,"undefined"],[2532,66,2510,68],[2532,68,2510,70],[2533,8,2511,12],[2533,12,2511,16],[2533,13,2511,17,"customStrengthOptions"],[2533,34,2511,38],[2533,35,2511,39,"containsUppercaseLetter"],[2533,58,2511,62],[2533,61,2512,16,"responseOptions"],[2533,76,2512,31],[2533,77,2512,32,"containsUppercaseCharacter"],[2533,103,2512,58],[2534,6,2513,8],[2535,6,2514,8],[2535,10,2514,12,"responseOptions"],[2535,25,2514,27],[2535,26,2514,28,"containsNumericCharacter"],[2535,50,2514,52],[2535,55,2514,57,"undefined"],[2535,64,2514,66],[2535,66,2514,68],[2536,8,2515,12],[2536,12,2515,16],[2536,13,2515,17,"customStrengthOptions"],[2536,34,2515,38],[2536,35,2515,39,"containsNumericCharacter"],[2536,59,2515,63],[2536,62,2516,16,"responseOptions"],[2536,77,2516,31],[2536,78,2516,32,"containsNumericCharacter"],[2536,102,2516,56],[2537,6,2517,8],[2538,6,2518,8],[2538,10,2518,12,"responseOptions"],[2538,25,2518,27],[2538,26,2518,28,"containsNonAlphanumericCharacter"],[2538,58,2518,60],[2538,63,2518,65,"undefined"],[2538,72,2518,74],[2538,74,2518,76],[2539,8,2519,12],[2539,12,2519,16],[2539,13,2519,17,"customStrengthOptions"],[2539,34,2519,38],[2539,35,2519,39,"containsNonAlphanumericCharacter"],[2539,67,2519,71],[2539,70,2520,16,"responseOptions"],[2539,85,2520,31],[2539,86,2520,32,"containsNonAlphanumericCharacter"],[2539,118,2520,64],[2540,6,2521,8],[2541,6,2522,8],[2541,10,2522,12],[2541,11,2522,13,"enforcementState"],[2541,27,2522,29],[2541,30,2522,32,"response"],[2541,38,2522,40],[2541,39,2522,41,"enforcementState"],[2541,55,2522,57],[2542,6,2523,8],[2542,10,2523,12],[2542,14,2523,16],[2542,15,2523,17,"enforcementState"],[2542,31,2523,33],[2542,36,2523,38],[2542,67,2523,69],[2542,69,2523,71],[2543,8,2524,12],[2543,12,2524,16],[2543,13,2524,17,"enforcementState"],[2543,29,2524,33],[2543,32,2524,36],[2543,37,2524,41],[2544,6,2525,8],[2545,6,2526,8],[2546,6,2527,8],[2546,10,2527,12],[2546,11,2527,13,"allowedNonAlphanumericCharacters"],[2546,43,2527,45],[2546,46,2528,12,"response"],[2546,54,2528,20],[2546,55,2528,21,"allowedNonAlphanumericCharacters"],[2546,87,2528,53],[2546,89,2528,55,"join"],[2546,93,2528,59],[2546,94,2528,60],[2546,96,2528,62],[2546,97,2528,63],[2546,101,2528,67],[2546,103,2528,69],[2547,6,2529,8],[2547,10,2529,12],[2547,11,2529,13,"forceUpgradeOnSignin"],[2547,31,2529,33],[2547,34,2529,36,"response"],[2547,42,2529,44],[2547,43,2529,45,"forceUpgradeOnSignin"],[2547,63,2529,65],[2547,67,2529,69],[2547,72,2529,74],[2548,6,2530,8],[2548,10,2530,12],[2548,11,2530,13,"schemaVersion"],[2548,24,2530,26],[2548,27,2530,29,"response"],[2548,35,2530,37],[2548,36,2530,38,"schemaVersion"],[2548,49,2530,51],[2549,4,2531,4],[2550,4,2532,4,"validatePassword"],[2550,20,2532,20,"validatePassword"],[2550,21,2532,21,"password"],[2550,29,2532,29],[2550,31,2532,31],[2551,6,2533,8],[2551,12,2533,14,"status"],[2551,18,2533,20],[2551,21,2533,23],[2552,8,2534,12,"isValid"],[2552,15,2534,19],[2552,17,2534,21],[2552,21,2534,25],[2553,8,2535,12,"passwordPolicy"],[2553,22,2535,26],[2553,24,2535,28],[2554,6,2536,8],[2554,7,2536,9],[2555,6,2537,8],[2556,6,2538,8],[2556,10,2538,12],[2556,11,2538,13,"validatePasswordLengthOptions"],[2556,40,2538,42],[2556,41,2538,43,"password"],[2556,49,2538,51],[2556,51,2538,53,"status"],[2556,57,2538,59],[2556,58,2538,60],[2557,6,2539,8],[2557,10,2539,12],[2557,11,2539,13,"validatePasswordCharacterOptions"],[2557,43,2539,45],[2557,44,2539,46,"password"],[2557,52,2539,54],[2557,54,2539,56,"status"],[2557,60,2539,62],[2557,61,2539,63],[2558,6,2540,8],[2559,6,2541,8,"status"],[2559,12,2541,14],[2559,13,2541,15,"isValid"],[2559,20,2541,22],[2559,25,2541,27,"status"],[2559,31,2541,33],[2559,32,2541,34,"isValid"],[2559,39,2541,41],[2559,42,2541,44,"status"],[2559,48,2541,50],[2559,49,2541,51,"meetsMinPasswordLength"],[2559,71,2541,73],[2559,75,2541,77],[2559,79,2541,81],[2559,80,2541,82],[2560,6,2542,8,"status"],[2560,12,2542,14],[2560,13,2542,15,"isValid"],[2560,20,2542,22],[2560,25,2542,27,"status"],[2560,31,2542,33],[2560,32,2542,34,"isValid"],[2560,39,2542,41],[2560,42,2542,44,"status"],[2560,48,2542,50],[2560,49,2542,51,"meetsMaxPasswordLength"],[2560,71,2542,73],[2560,75,2542,77],[2560,79,2542,81],[2560,80,2542,82],[2561,6,2543,8,"status"],[2561,12,2543,14],[2561,13,2543,15,"isValid"],[2561,20,2543,22],[2561,25,2543,27,"status"],[2561,31,2543,33],[2561,32,2543,34,"isValid"],[2561,39,2543,41],[2561,42,2543,44,"status"],[2561,48,2543,50],[2561,49,2543,51,"containsLowercaseLetter"],[2561,72,2543,74],[2561,76,2543,78],[2561,80,2543,82],[2561,81,2543,83],[2562,6,2544,8,"status"],[2562,12,2544,14],[2562,13,2544,15,"isValid"],[2562,20,2544,22],[2562,25,2544,27,"status"],[2562,31,2544,33],[2562,32,2544,34,"isValid"],[2562,39,2544,41],[2562,42,2544,44,"status"],[2562,48,2544,50],[2562,49,2544,51,"containsUppercaseLetter"],[2562,72,2544,74],[2562,76,2544,78],[2562,80,2544,82],[2562,81,2544,83],[2563,6,2545,8,"status"],[2563,12,2545,14],[2563,13,2545,15,"isValid"],[2563,20,2545,22],[2563,25,2545,27,"status"],[2563,31,2545,33],[2563,32,2545,34,"isValid"],[2563,39,2545,41],[2563,42,2545,44,"status"],[2563,48,2545,50],[2563,49,2545,51,"containsNumericCharacter"],[2563,73,2545,75],[2563,77,2545,79],[2563,81,2545,83],[2563,82,2545,84],[2564,6,2546,8,"status"],[2564,12,2546,14],[2564,13,2546,15,"isValid"],[2564,20,2546,22],[2564,25,2546,27,"status"],[2564,31,2546,33],[2564,32,2546,34,"isValid"],[2564,39,2546,41],[2564,42,2546,44,"status"],[2564,48,2546,50],[2564,49,2546,51,"containsNonAlphanumericCharacter"],[2564,81,2546,83],[2564,85,2546,87],[2564,89,2546,91],[2564,90,2546,92],[2565,6,2547,8],[2565,13,2547,15,"status"],[2565,19,2547,21],[2566,4,2548,4],[2567,4,2549,4],[2568,0,2550,0],[2569,0,2551,0],[2570,0,2552,0],[2571,0,2553,0],[2572,0,2554,0],[2573,4,2555,4,"validatePasswordLengthOptions"],[2573,33,2555,33,"validatePasswordLengthOptions"],[2573,34,2555,34,"password"],[2573,42,2555,42],[2573,44,2555,44,"status"],[2573,50,2555,50],[2573,52,2555,52],[2574,6,2556,8],[2574,12,2556,14,"minPasswordLength"],[2574,29,2556,31],[2574,32,2556,34],[2574,36,2556,38],[2574,37,2556,39,"customStrengthOptions"],[2574,58,2556,60],[2574,59,2556,61,"minPasswordLength"],[2574,76,2556,78],[2575,6,2557,8],[2575,12,2557,14,"maxPasswordLength"],[2575,29,2557,31],[2575,32,2557,34],[2575,36,2557,38],[2575,37,2557,39,"customStrengthOptions"],[2575,58,2557,60],[2575,59,2557,61,"maxPasswordLength"],[2575,76,2557,78],[2576,6,2558,8],[2576,10,2558,12,"minPasswordLength"],[2576,27,2558,29],[2576,29,2558,31],[2577,8,2559,12,"status"],[2577,14,2559,18],[2577,15,2559,19,"meetsMinPasswordLength"],[2577,37,2559,41],[2577,40,2559,44,"password"],[2577,48,2559,52],[2577,49,2559,53,"length"],[2577,55,2559,59],[2577,59,2559,63,"minPasswordLength"],[2577,76,2559,80],[2578,6,2560,8],[2579,6,2561,8],[2579,10,2561,12,"maxPasswordLength"],[2579,27,2561,29],[2579,29,2561,31],[2580,8,2562,12,"status"],[2580,14,2562,18],[2580,15,2562,19,"meetsMaxPasswordLength"],[2580,37,2562,41],[2580,40,2562,44,"password"],[2580,48,2562,52],[2580,49,2562,53,"length"],[2580,55,2562,59],[2580,59,2562,63,"maxPasswordLength"],[2580,76,2562,80],[2581,6,2563,8],[2582,4,2564,4],[2583,4,2565,4],[2584,0,2566,0],[2585,0,2567,0],[2586,0,2568,0],[2587,0,2569,0],[2588,0,2570,0],[2589,4,2571,4,"validatePasswordCharacterOptions"],[2589,36,2571,36,"validatePasswordCharacterOptions"],[2589,37,2571,37,"password"],[2589,45,2571,45],[2589,47,2571,47,"status"],[2589,53,2571,53],[2589,55,2571,55],[2590,6,2572,8],[2591,6,2573,8],[2591,10,2573,12],[2591,11,2573,13,"updatePasswordCharacterOptionsStatuses"],[2591,49,2573,51],[2591,50,2573,52,"status"],[2591,56,2573,58],[2591,58,2574,8],[2591,91,2574,42],[2591,96,2574,47],[2591,98,2575,8],[2591,131,2575,42],[2591,136,2575,47],[2591,138,2576,8],[2591,169,2576,40],[2591,174,2576,45],[2591,176,2577,8],[2591,215,2577,48],[2591,220,2577,53],[2591,221,2577,54],[2592,6,2578,8],[2592,10,2578,12,"passwordChar"],[2592,22,2578,24],[2593,6,2579,8],[2593,11,2579,13],[2593,15,2579,17,"i"],[2593,16,2579,18],[2593,19,2579,21],[2593,20,2579,22],[2593,22,2579,24,"i"],[2593,23,2579,25],[2593,26,2579,28,"password"],[2593,34,2579,36],[2593,35,2579,37,"length"],[2593,41,2579,43],[2593,43,2579,45,"i"],[2593,44,2579,46],[2593,46,2579,48],[2593,48,2579,50],[2594,8,2580,12,"passwordChar"],[2594,20,2580,24],[2594,23,2580,27,"password"],[2594,31,2580,35],[2594,32,2580,36,"charAt"],[2594,38,2580,42],[2594,39,2580,43,"i"],[2594,40,2580,44],[2594,41,2580,45],[2595,8,2581,12],[2595,12,2581,16],[2595,13,2581,17,"updatePasswordCharacterOptionsStatuses"],[2595,51,2581,55],[2595,52,2581,56,"status"],[2595,58,2581,62],[2595,60,2582,12],[2595,93,2582,46,"passwordChar"],[2595,105,2582,58],[2595,109,2582,62],[2595,112,2582,65],[2595,116,2583,16,"passwordChar"],[2595,128,2583,28],[2595,132,2583,32],[2595,135,2583,35],[2595,137,2584,12],[2595,170,2584,46,"passwordChar"],[2595,182,2584,58],[2595,186,2584,62],[2595,189,2584,65],[2595,193,2585,16,"passwordChar"],[2595,205,2585,28],[2595,209,2585,32],[2595,212,2585,35],[2595,214,2586,12],[2595,245,2586,44,"passwordChar"],[2595,257,2586,56],[2595,261,2586,60],[2595,264,2586,63],[2595,268,2587,16,"passwordChar"],[2595,280,2587,28],[2595,284,2587,32],[2595,287,2587,35],[2595,289,2588,12],[2595,328,2588,52],[2595,332,2588,56],[2595,333,2588,57,"allowedNonAlphanumericCharacters"],[2595,365,2588,89],[2595,366,2588,90,"includes"],[2595,374,2588,98],[2595,375,2588,99,"passwordChar"],[2595,387,2588,111],[2595,388,2588,112],[2595,389,2588,113],[2596,6,2589,8],[2597,4,2590,4],[2598,4,2591,4],[2599,0,2592,0],[2600,0,2593,0],[2601,0,2594,0],[2602,0,2595,0],[2603,0,2596,0],[2604,0,2597,0],[2605,0,2598,0],[2606,0,2599,0],[2607,0,2600,0],[2608,0,2601,0],[2609,4,2602,4,"updatePasswordCharacterOptionsStatuses"],[2609,42,2602,42,"updatePasswordCharacterOptionsStatuses"],[2609,43,2602,43,"status"],[2609,49,2602,49],[2609,51,2602,51,"containsLowercaseCharacter"],[2609,77,2602,77],[2609,79,2602,79,"containsUppercaseCharacter"],[2609,105,2602,105],[2609,107,2602,107,"containsNumericCharacter"],[2609,131,2602,131],[2609,133,2602,133,"containsNonAlphanumericCharacter"],[2609,165,2602,165],[2609,167,2602,167],[2610,6,2603,8],[2610,10,2603,12],[2610,14,2603,16],[2610,15,2603,17,"customStrengthOptions"],[2610,36,2603,38],[2610,37,2603,39,"containsLowercaseLetter"],[2610,60,2603,62],[2610,62,2603,64],[2611,8,2604,12,"status"],[2611,14,2604,18],[2611,15,2604,19,"containsLowercaseLetter"],[2611,38,2604,42],[2611,43,2604,47,"status"],[2611,49,2604,53],[2611,50,2604,54,"containsLowercaseLetter"],[2611,73,2604,77],[2611,76,2604,80,"containsLowercaseCharacter"],[2611,102,2604,106],[2611,103,2604,107],[2612,6,2605,8],[2613,6,2606,8],[2613,10,2606,12],[2613,14,2606,16],[2613,15,2606,17,"customStrengthOptions"],[2613,36,2606,38],[2613,37,2606,39,"containsUppercaseLetter"],[2613,60,2606,62],[2613,62,2606,64],[2614,8,2607,12,"status"],[2614,14,2607,18],[2614,15,2607,19,"containsUppercaseLetter"],[2614,38,2607,42],[2614,43,2607,47,"status"],[2614,49,2607,53],[2614,50,2607,54,"containsUppercaseLetter"],[2614,73,2607,77],[2614,76,2607,80,"containsUppercaseCharacter"],[2614,102,2607,106],[2614,103,2607,107],[2615,6,2608,8],[2616,6,2609,8],[2616,10,2609,12],[2616,14,2609,16],[2616,15,2609,17,"customStrengthOptions"],[2616,36,2609,38],[2616,37,2609,39,"containsNumericCharacter"],[2616,61,2609,63],[2616,63,2609,65],[2617,8,2610,12,"status"],[2617,14,2610,18],[2617,15,2610,19,"containsNumericCharacter"],[2617,39,2610,43],[2617,44,2610,48,"status"],[2617,50,2610,54],[2617,51,2610,55,"containsNumericCharacter"],[2617,75,2610,79],[2617,78,2610,82,"containsNumericCharacter"],[2617,102,2610,106],[2617,103,2610,107],[2618,6,2611,8],[2619,6,2612,8],[2619,10,2612,12],[2619,14,2612,16],[2619,15,2612,17,"customStrengthOptions"],[2619,36,2612,38],[2619,37,2612,39,"containsNonAlphanumericCharacter"],[2619,69,2612,71],[2619,71,2612,73],[2620,8,2613,12,"status"],[2620,14,2613,18],[2620,15,2613,19,"containsNonAlphanumericCharacter"],[2620,47,2613,51],[2620,52,2613,56,"status"],[2620,58,2613,62],[2620,59,2613,63,"containsNonAlphanumericCharacter"],[2620,91,2613,95],[2620,94,2613,98,"containsNonAlphanumericCharacter"],[2620,126,2613,130],[2620,127,2613,131],[2621,6,2614,8],[2622,4,2615,4],[2623,2,2616,0],[2625,2,2618,0],[2626,0,2619,0],[2627,0,2620,0],[2628,0,2621,0],[2629,0,2622,0],[2630,0,2623,0],[2631,0,2624,0],[2632,0,2625,0],[2633,0,2626,0],[2634,0,2627,0],[2635,0,2628,0],[2636,0,2629,0],[2637,0,2630,0],[2638,0,2631,0],[2639,0,2632,0],[2640,0,2633,0],[2641,2,2634,0],[2641,8,2634,6,"AuthImpl"],[2641,16,2634,14],[2641,17,2634,15],[2642,4,2635,4,"constructor"],[2642,15,2635,15,"constructor"],[2642,16,2635,16,"app"],[2642,19,2635,19],[2642,21,2635,21,"heartbeatServiceProvider"],[2642,45,2635,45],[2642,47,2635,47,"appCheckServiceProvider"],[2642,70,2635,70],[2642,72,2635,72,"config"],[2642,78,2635,78],[2642,80,2635,80],[2643,6,2636,8],[2643,10,2636,12],[2643,11,2636,13,"app"],[2643,14,2636,16],[2643,17,2636,19,"app"],[2643,20,2636,22],[2644,6,2637,8],[2644,10,2637,12],[2644,11,2637,13,"heartbeatServiceProvider"],[2644,35,2637,37],[2644,38,2637,40,"heartbeatServiceProvider"],[2644,62,2637,64],[2645,6,2638,8],[2645,10,2638,12],[2645,11,2638,13,"appCheckServiceProvider"],[2645,34,2638,36],[2645,37,2638,39,"appCheckServiceProvider"],[2645,60,2638,62],[2646,6,2639,8],[2646,10,2639,12],[2646,11,2639,13,"config"],[2646,17,2639,19],[2646,20,2639,22,"config"],[2646,26,2639,28],[2647,6,2640,8],[2647,10,2640,12],[2647,11,2640,13,"currentUser"],[2647,22,2640,24],[2647,25,2640,27],[2647,29,2640,31],[2648,6,2641,8],[2648,10,2641,12],[2648,11,2641,13,"emulatorConfig"],[2648,25,2641,27],[2648,28,2641,30],[2648,32,2641,34],[2649,6,2642,8],[2649,10,2642,12],[2649,11,2642,13,"operations"],[2649,21,2642,23],[2649,24,2642,26,"Promise"],[2649,31,2642,33],[2649,32,2642,34,"resolve"],[2649,39,2642,41],[2649,40,2642,42],[2649,41,2642,43],[2650,6,2643,8],[2650,10,2643,12],[2650,11,2643,13,"authStateSubscription"],[2650,32,2643,34],[2650,35,2643,37],[2650,39,2643,41,"Subscription"],[2650,51,2643,53],[2650,52,2643,54],[2650,56,2643,58],[2650,57,2643,59],[2651,6,2644,8],[2651,10,2644,12],[2651,11,2644,13,"idTokenSubscription"],[2651,30,2644,32],[2651,33,2644,35],[2651,37,2644,39,"Subscription"],[2651,49,2644,51],[2651,50,2644,52],[2651,54,2644,56],[2651,55,2644,57],[2652,6,2645,8],[2652,10,2645,12],[2652,11,2645,13,"beforeStateQueue"],[2652,27,2645,29],[2652,30,2645,32],[2652,34,2645,36,"AuthMiddlewareQueue"],[2652,53,2645,55],[2652,54,2645,56],[2652,58,2645,60],[2652,59,2645,61],[2653,6,2646,8],[2653,10,2646,12],[2653,11,2646,13,"redirectUser"],[2653,23,2646,25],[2653,26,2646,28],[2653,30,2646,32],[2654,6,2647,8],[2654,10,2647,12],[2654,11,2647,13,"isProactiveRefreshEnabled"],[2654,36,2647,38],[2654,39,2647,41],[2654,44,2647,46],[2655,6,2648,8],[2655,10,2648,12],[2655,11,2648,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[2655,50,2648,52],[2655,53,2648,55],[2655,54,2648,56],[2656,6,2649,8],[2657,6,2650,8],[2658,6,2651,8],[2658,10,2651,12],[2658,11,2651,13,"_canInitEmulator"],[2658,27,2651,29],[2658,30,2651,32],[2658,34,2651,36],[2659,6,2652,8],[2659,10,2652,12],[2659,11,2652,13,"_isInitialized"],[2659,25,2652,27],[2659,28,2652,30],[2659,33,2652,35],[2660,6,2653,8],[2660,10,2653,12],[2660,11,2653,13,"_deleted"],[2660,19,2653,21],[2660,22,2653,24],[2660,27,2653,29],[2661,6,2654,8],[2661,10,2654,12],[2661,11,2654,13,"_initializationPromise"],[2661,33,2654,35],[2661,36,2654,38],[2661,40,2654,42],[2662,6,2655,8],[2662,10,2655,12],[2662,11,2655,13,"_popupRedirectResolver"],[2662,33,2655,35],[2662,36,2655,38],[2662,40,2655,42],[2663,6,2656,8],[2663,10,2656,12],[2663,11,2656,13,"_errorFactory"],[2663,24,2656,26],[2663,27,2656,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[2663,54,2656,56],[2664,6,2657,8],[2664,10,2657,12],[2664,11,2657,13,"_agentRecaptchaConfig"],[2664,32,2657,34],[2664,35,2657,37],[2664,39,2657,41],[2665,6,2658,8],[2665,10,2658,12],[2665,11,2658,13,"_tenantRecaptchaConfigs"],[2665,34,2658,36],[2665,37,2658,39],[2665,38,2658,40],[2665,39,2658,41],[2666,6,2659,8],[2666,10,2659,12],[2666,11,2659,13,"_projectPasswordPolicy"],[2666,33,2659,35],[2666,36,2659,38],[2666,40,2659,42],[2667,6,2660,8],[2667,10,2660,12],[2667,11,2660,13,"_tenantPasswordPolicies"],[2667,34,2660,36],[2667,37,2660,39],[2667,38,2660,40],[2667,39,2660,41],[2668,6,2661,8],[2668,10,2661,12],[2668,11,2661,13,"_resolvePersistenceManagerAvailable"],[2668,46,2661,48],[2668,49,2661,51,"undefined"],[2668,58,2661,60],[2669,6,2662,8],[2670,6,2663,8],[2671,6,2664,8],[2672,6,2665,8],[2672,10,2665,12],[2672,11,2665,13,"lastNotifiedUid"],[2672,26,2665,28],[2672,29,2665,31,"undefined"],[2672,38,2665,40],[2673,6,2666,8],[2673,10,2666,12],[2673,11,2666,13,"languageCode"],[2673,23,2666,25],[2673,26,2666,28],[2673,30,2666,32],[2674,6,2667,8],[2674,10,2667,12],[2674,11,2667,13,"tenantId"],[2674,19,2667,21],[2674,22,2667,24],[2674,26,2667,28],[2675,6,2668,8],[2675,10,2668,12],[2675,11,2668,13,"settings"],[2675,19,2668,21],[2675,22,2668,24],[2676,8,2668,26,"appVerificationDisabledForTesting"],[2676,41,2668,59],[2676,43,2668,61],[2677,6,2668,67],[2677,7,2668,68],[2678,6,2669,8],[2678,10,2669,12],[2678,11,2669,13,"frameworks"],[2678,21,2669,23],[2678,24,2669,26],[2678,26,2669,28],[2679,6,2670,8],[2679,10,2670,12],[2679,11,2670,13,"name"],[2679,15,2670,17],[2679,18,2670,20,"app"],[2679,21,2670,23],[2679,22,2670,24,"name"],[2679,26,2670,28],[2680,6,2671,8],[2680,10,2671,12],[2680,11,2671,13,"clientVersion"],[2680,24,2671,26],[2680,27,2671,29,"config"],[2680,33,2671,35],[2680,34,2671,36,"sdkClientVersion"],[2680,50,2671,52],[2681,6,2672,8],[2682,6,2673,8],[2683,6,2674,8],[2683,10,2674,12],[2683,11,2674,13,"_persistenceManagerAvailable"],[2683,39,2674,41],[2683,42,2674,44],[2683,46,2674,48,"Promise"],[2683,53,2674,55],[2683,54,2674,56,"resolve"],[2683,61,2674,63],[2683,65,2674,68],[2683,69,2674,72],[2683,70,2674,73,"_resolvePersistenceManagerAvailable"],[2683,105,2674,108],[2683,108,2674,111,"resolve"],[2683,115,2674,119],[2683,116,2674,120],[2684,4,2675,4],[2685,4,2676,4,"_initializeWithPersistence"],[2685,30,2676,30,"_initializeWithPersistence"],[2685,31,2676,31,"persistenceHierarchy"],[2685,51,2676,51],[2685,53,2676,53,"popupRedirectResolver"],[2685,74,2676,74],[2685,76,2676,76],[2686,6,2677,8],[2686,10,2677,12,"popupRedirectResolver"],[2686,31,2677,33],[2686,33,2677,35],[2687,8,2678,12],[2687,12,2678,16],[2687,13,2678,17,"_popupRedirectResolver"],[2687,35,2678,39],[2687,38,2678,42,"_getInstance"],[2687,50,2678,54],[2687,51,2678,55,"popupRedirectResolver"],[2687,72,2678,76],[2687,73,2678,77],[2688,6,2679,8],[2689,6,2680,8],[2690,6,2681,8],[2691,6,2682,8],[2691,10,2682,12],[2691,11,2682,13,"_initializationPromise"],[2691,33,2682,35],[2691,36,2682,38],[2691,40,2682,42],[2691,41,2682,43,"queue"],[2691,46,2682,48],[2691,47,2682,49],[2691,59,2682,61],[2692,8,2683,12],[2692,12,2683,16],[2692,16,2683,20],[2692,17,2683,21,"_deleted"],[2692,25,2683,29],[2692,27,2683,31],[2693,10,2684,16],[2694,8,2685,12],[2695,8,2686,12],[2695,12,2686,16],[2695,13,2686,17,"persistenceManager"],[2695,31,2686,35],[2695,34,2686,38],[2695,40,2686,44,"PersistenceUserManager"],[2695,62,2686,66],[2695,63,2686,67,"create"],[2695,69,2686,73],[2695,70,2686,74],[2695,74,2686,78],[2695,76,2686,80,"persistenceHierarchy"],[2695,96,2686,100],[2695,97,2686,101],[2696,8,2687,12],[2696,12,2687,16],[2696,13,2687,17,"_resolvePersistenceManagerAvailable"],[2696,48,2687,52],[2696,51,2687,55],[2696,52,2687,56],[2697,8,2688,12],[2697,12,2688,16],[2697,16,2688,20],[2697,17,2688,21,"_deleted"],[2697,25,2688,29],[2697,27,2688,31],[2698,10,2689,16],[2699,8,2690,12],[2700,8,2691,12],[2701,8,2692,12],[2702,8,2693,12],[2702,12,2693,16],[2702,16,2693,20],[2702,17,2693,21,"_popupRedirectResolver"],[2702,39,2693,43],[2702,41,2693,45,"_shouldInitProactively"],[2702,63,2693,67],[2702,65,2693,69],[2703,10,2694,16],[2704,10,2695,16],[2704,14,2695,20],[2705,12,2696,20],[2705,18,2696,26],[2705,22,2696,30],[2705,23,2696,31,"_popupRedirectResolver"],[2705,45,2696,53],[2705,46,2696,54,"_initialize"],[2705,57,2696,65],[2705,58,2696,66],[2705,62,2696,70],[2705,63,2696,71],[2706,10,2697,16],[2706,11,2697,17],[2706,12,2698,16],[2706,19,2698,23,"e"],[2706,20,2698,24],[2706,22,2698,26],[2707,12,2699,20],[2708,10,2699,20],[2709,8,2701,12],[2710,8,2702,12],[2710,14,2702,18],[2710,18,2702,22],[2710,19,2702,23,"initializeCurrentUser"],[2710,40,2702,44],[2710,41,2702,45,"popupRedirectResolver"],[2710,62,2702,66],[2710,63,2702,67],[2711,8,2703,12],[2711,12,2703,16],[2711,13,2703,17,"lastNotifiedUid"],[2711,28,2703,32],[2711,31,2703,35],[2711,35,2703,39],[2711,36,2703,40,"currentUser"],[2711,47,2703,51],[2711,49,2703,53,"uid"],[2711,52,2703,56],[2711,56,2703,60],[2711,60,2703,64],[2712,8,2704,12],[2712,12,2704,16],[2712,16,2704,20],[2712,17,2704,21,"_deleted"],[2712,25,2704,29],[2712,27,2704,31],[2713,10,2705,16],[2714,8,2706,12],[2715,8,2707,12],[2715,12,2707,16],[2715,13,2707,17,"_isInitialized"],[2715,27,2707,31],[2715,30,2707,34],[2715,34,2707,38],[2716,6,2708,8],[2716,7,2708,9],[2716,8,2708,10],[2717,6,2709,8],[2717,13,2709,15],[2717,17,2709,19],[2717,18,2709,20,"_initializationPromise"],[2717,40,2709,42],[2718,4,2710,4],[2719,4,2711,4],[2720,0,2712,0],[2721,0,2713,0],[2722,4,2714,4],[2722,10,2714,10,"_onStorageEvent"],[2722,25,2714,25,"_onStorageEvent"],[2722,26,2714,25],[2722,28,2714,28],[2723,6,2715,8],[2723,10,2715,12],[2723,14,2715,16],[2723,15,2715,17,"_deleted"],[2723,23,2715,25],[2723,25,2715,27],[2724,8,2716,12],[2725,6,2717,8],[2726,6,2718,8],[2726,12,2718,14,"user"],[2726,16,2718,18],[2726,19,2718,21],[2726,25,2718,27],[2726,29,2718,31],[2726,30,2718,32,"assertedPersistence"],[2726,49,2718,51],[2726,50,2718,52,"getCurrentUser"],[2726,64,2718,66],[2726,65,2718,67],[2726,66,2718,68],[2727,6,2719,8],[2727,10,2719,12],[2727,11,2719,13],[2727,15,2719,17],[2727,16,2719,18,"currentUser"],[2727,27,2719,29],[2727,31,2719,33],[2727,32,2719,34,"user"],[2727,36,2719,38],[2727,38,2719,40],[2728,8,2720,12],[2729,8,2721,12],[2730,6,2722,8],[2731,6,2723,8],[2732,6,2724,8],[2732,10,2724,12],[2732,14,2724,16],[2732,15,2724,17,"currentUser"],[2732,26,2724,28],[2732,30,2724,32,"user"],[2732,34,2724,36],[2732,38,2724,40],[2732,42,2724,44],[2732,43,2724,45,"currentUser"],[2732,54,2724,56],[2732,55,2724,57,"uid"],[2732,58,2724,60],[2732,63,2724,65,"user"],[2732,67,2724,69],[2732,68,2724,70,"uid"],[2732,71,2724,73],[2732,73,2724,75],[2733,8,2725,12],[2734,8,2726,12],[2734,12,2726,16],[2734,13,2726,17,"_currentUser"],[2734,25,2726,29],[2734,26,2726,30,"_assign"],[2734,33,2726,37],[2734,34,2726,38,"user"],[2734,38,2726,42],[2734,39,2726,43],[2735,8,2727,12],[2736,8,2728,12],[2737,8,2729,12],[2737,14,2729,18],[2737,18,2729,22],[2737,19,2729,23,"currentUser"],[2737,30,2729,34],[2737,31,2729,35,"getIdToken"],[2737,41,2729,45],[2737,42,2729,46],[2737,43,2729,47],[2738,8,2730,12],[2739,6,2731,8],[2740,6,2732,8],[2741,6,2733,8],[2742,6,2734,8],[2742,12,2734,14],[2742,16,2734,18],[2742,17,2734,19,"_updateCurrentUser"],[2742,35,2734,37],[2742,36,2734,38,"user"],[2742,40,2734,42],[2742,42,2734,44],[2742,72,2734,75],[2742,76,2734,79],[2742,77,2734,80],[2743,4,2735,4],[2744,4,2736,4],[2744,10,2736,10,"initializeCurrentUserFromIdToken"],[2744,42,2736,42,"initializeCurrentUserFromIdToken"],[2744,43,2736,43,"idToken"],[2744,50,2736,50],[2744,52,2736,52],[2745,6,2737,8],[2745,10,2737,12],[2746,8,2738,12],[2746,14,2738,18,"response"],[2746,22,2738,26],[2746,25,2738,29],[2746,31,2738,35,"getAccountInfo"],[2746,45,2738,49],[2746,46,2738,50],[2746,50,2738,54],[2746,52,2738,56],[2747,10,2738,58,"idToken"],[2748,8,2738,66],[2748,9,2738,67],[2748,10,2738,68],[2749,8,2739,12],[2749,14,2739,18,"user"],[2749,18,2739,22],[2749,21,2739,25],[2749,27,2739,31,"UserImpl"],[2749,35,2739,39],[2749,36,2739,40,"_fromGetAccountInfoResponse"],[2749,63,2739,67],[2749,64,2739,68],[2749,68,2739,72],[2749,70,2739,74,"response"],[2749,78,2739,82],[2749,80,2739,84,"idToken"],[2749,87,2739,91],[2749,88,2739,92],[2750,8,2740,12],[2750,14,2740,18],[2750,18,2740,22],[2750,19,2740,23,"directlySetCurrentUser"],[2750,41,2740,45],[2750,42,2740,46,"user"],[2750,46,2740,50],[2750,47,2740,51],[2751,6,2741,8],[2751,7,2741,9],[2751,8,2742,8],[2751,15,2742,15,"err"],[2751,18,2742,18],[2751,20,2742,20],[2752,8,2743,12,"console"],[2752,15,2743,19],[2752,16,2743,20,"warn"],[2752,20,2743,24],[2752,21,2743,25],[2752,89,2743,93],[2752,91,2743,95,"err"],[2752,94,2743,98],[2752,95,2743,99],[2753,8,2744,12],[2753,14,2744,18],[2753,18,2744,22],[2753,19,2744,23,"directlySetCurrentUser"],[2753,41,2744,45],[2753,42,2744,46],[2753,46,2744,50],[2753,47,2744,51],[2754,6,2745,8],[2755,4,2746,4],[2756,4,2747,4],[2756,10,2747,10,"initializeCurrentUser"],[2756,31,2747,31,"initializeCurrentUser"],[2756,32,2747,32,"popupRedirectResolver"],[2756,53,2747,53],[2756,55,2747,55],[2757,6,2748,8],[2757,10,2748,12],[2757,14,2748,12,"_isFirebaseServerApp"],[2757,39,2748,32],[2757,41,2748,33],[2757,45,2748,37],[2757,46,2748,38,"app"],[2757,49,2748,41],[2757,50,2748,42],[2757,52,2748,44],[2758,8,2749,12],[2758,14,2749,18,"idToken"],[2758,21,2749,25],[2758,24,2749,28],[2758,28,2749,32],[2758,29,2749,33,"app"],[2758,32,2749,36],[2758,33,2749,37,"settings"],[2758,41,2749,45],[2758,42,2749,46,"authIdToken"],[2758,53,2749,57],[2759,8,2750,12],[2759,12,2750,16,"idToken"],[2759,19,2750,23],[2759,21,2750,25],[2760,10,2751,16],[2761,10,2752,16],[2762,10,2753,16],[2762,17,2753,23],[2762,21,2753,27,"Promise"],[2762,28,2753,34],[2762,29,2753,35,"resolve"],[2762,36,2753,42],[2762,40,2753,46],[2763,12,2754,20,"setTimeout"],[2763,22,2754,30],[2763,23,2754,31],[2763,29,2754,37],[2763,33,2754,41],[2763,34,2754,42,"initializeCurrentUserFromIdToken"],[2763,66,2754,74],[2763,67,2754,75,"idToken"],[2763,74,2754,82],[2763,75,2754,83],[2763,76,2754,84,"then"],[2763,80,2754,88],[2763,81,2754,89,"resolve"],[2763,88,2754,96],[2763,90,2754,98,"resolve"],[2763,97,2754,105],[2763,98,2754,106],[2763,99,2754,107],[2764,10,2755,16],[2764,11,2755,17],[2764,12,2755,18],[2765,8,2756,12],[2765,9,2756,13],[2765,15,2757,17],[2766,10,2758,16],[2766,17,2758,23],[2766,21,2758,27],[2766,22,2758,28,"directlySetCurrentUser"],[2766,44,2758,50],[2766,45,2758,51],[2766,49,2758,55],[2766,50,2758,56],[2767,8,2759,12],[2768,6,2760,8],[2769,6,2761,8],[2770,6,2762,8],[2770,12,2762,14,"previouslyStoredUser"],[2770,32,2762,34],[2770,35,2762,38],[2770,41,2762,44],[2770,45,2762,48],[2770,46,2762,49,"assertedPersistence"],[2770,65,2762,68],[2770,66,2762,69,"getCurrentUser"],[2770,80,2762,83],[2770,81,2762,84],[2770,82,2762,86],[2771,6,2763,8],[2771,10,2763,12,"futureCurrentUser"],[2771,27,2763,29],[2771,30,2763,32,"previouslyStoredUser"],[2771,50,2763,52],[2772,6,2764,8],[2772,10,2764,12,"needsTocheckMiddleware"],[2772,32,2764,34],[2772,35,2764,37],[2772,40,2764,42],[2773,6,2765,8],[2773,10,2765,12,"popupRedirectResolver"],[2773,31,2765,33],[2773,35,2765,37],[2773,39,2765,41],[2773,40,2765,42,"config"],[2773,46,2765,48],[2773,47,2765,49,"authDomain"],[2773,57,2765,59],[2773,59,2765,61],[2774,8,2766,12],[2774,14,2766,18],[2774,18,2766,22],[2774,19,2766,23,"getOrInitRedirectPersistenceManager"],[2774,54,2766,58],[2774,55,2766,59],[2774,56,2766,60],[2775,8,2767,12],[2775,14,2767,18,"redirectUserEventId"],[2775,33,2767,37],[2775,36,2767,40],[2775,40,2767,44],[2775,41,2767,45,"redirectUser"],[2775,53,2767,57],[2775,55,2767,59,"_redirectEventId"],[2775,71,2767,75],[2776,8,2768,12],[2776,14,2768,18,"storedUserEventId"],[2776,31,2768,35],[2776,34,2768,38,"futureCurrentUser"],[2776,51,2768,55],[2776,53,2768,57,"_redirectEventId"],[2776,69,2768,73],[2777,8,2769,12],[2777,14,2769,18,"result"],[2777,20,2769,24],[2777,23,2769,27],[2777,29,2769,33],[2777,33,2769,37],[2777,34,2769,38,"tryRedirectSignIn"],[2777,51,2769,55],[2777,52,2769,56,"popupRedirectResolver"],[2777,73,2769,77],[2777,74,2769,78],[2778,8,2770,12],[2779,8,2771,12],[2780,8,2772,12],[2781,8,2773,12],[2782,8,2774,12],[2782,12,2774,16],[2782,13,2774,17],[2782,14,2774,18,"redirectUserEventId"],[2782,33,2774,37],[2782,37,2774,41,"redirectUserEventId"],[2782,56,2774,60],[2782,61,2774,65,"storedUserEventId"],[2782,78,2774,82],[2782,83,2775,16,"result"],[2782,89,2775,22],[2782,91,2775,24,"user"],[2782,95,2775,28],[2782,97,2775,30],[2783,10,2776,16,"futureCurrentUser"],[2783,27,2776,33],[2783,30,2776,36,"result"],[2783,36,2776,42],[2783,37,2776,43,"user"],[2783,41,2776,47],[2784,10,2777,16,"needsTocheckMiddleware"],[2784,32,2777,38],[2784,35,2777,41],[2784,39,2777,45],[2785,8,2778,12],[2786,6,2779,8],[2787,6,2780,8],[2788,6,2781,8],[2788,10,2781,12],[2788,11,2781,13,"futureCurrentUser"],[2788,28,2781,30],[2788,30,2781,32],[2789,8,2782,12],[2789,15,2782,19],[2789,19,2782,23],[2789,20,2782,24,"directlySetCurrentUser"],[2789,42,2782,46],[2789,43,2782,47],[2789,47,2782,51],[2789,48,2782,52],[2790,6,2783,8],[2791,6,2784,8],[2791,10,2784,12],[2791,11,2784,13,"futureCurrentUser"],[2791,28,2784,30],[2791,29,2784,31,"_redirectEventId"],[2791,45,2784,47],[2791,47,2784,49],[2792,8,2785,12],[2793,8,2786,12],[2794,8,2787,12],[2794,12,2787,16,"needsTocheckMiddleware"],[2794,34,2787,38],[2794,36,2787,40],[2795,10,2788,16],[2795,14,2788,20],[2796,12,2789,20],[2796,18,2789,26],[2796,22,2789,30],[2796,23,2789,31,"beforeStateQueue"],[2796,39,2789,47],[2796,40,2789,48,"runMiddleware"],[2796,53,2789,61],[2796,54,2789,62,"futureCurrentUser"],[2796,71,2789,79],[2796,72,2789,80],[2797,10,2790,16],[2797,11,2790,17],[2797,12,2791,16],[2797,19,2791,23,"e"],[2797,20,2791,24],[2797,22,2791,26],[2798,12,2792,20,"futureCurrentUser"],[2798,29,2792,37],[2798,32,2792,40,"previouslyStoredUser"],[2798,52,2792,60],[2799,12,2793,20],[2800,12,2794,20],[2801,12,2795,20],[2801,16,2795,24],[2801,17,2795,25,"_popupRedirectResolver"],[2801,39,2795,47],[2801,40,2795,48,"_overrideRedirectResult"],[2801,63,2795,71],[2801,64,2795,72],[2801,68,2795,76],[2801,70,2795,78],[2801,76,2795,84,"Promise"],[2801,83,2795,91],[2801,84,2795,92,"reject"],[2801,90,2795,98],[2801,91,2795,99,"e"],[2801,92,2795,100],[2801,93,2795,101],[2801,94,2795,102],[2802,10,2796,16],[2803,8,2797,12],[2804,8,2798,12],[2804,12,2798,16,"futureCurrentUser"],[2804,29,2798,33],[2804,31,2798,35],[2805,10,2799,16],[2805,17,2799,23],[2805,21,2799,27],[2805,22,2799,28,"reloadAndSetCurrentUserOrClear"],[2805,52,2799,58],[2805,53,2799,59,"futureCurrentUser"],[2805,70,2799,76],[2805,71,2799,77],[2806,8,2800,12],[2806,9,2800,13],[2806,15,2801,17],[2807,10,2802,16],[2807,17,2802,23],[2807,21,2802,27],[2807,22,2802,28,"directlySetCurrentUser"],[2807,44,2802,50],[2807,45,2802,51],[2807,49,2802,55],[2807,50,2802,56],[2808,8,2803,12],[2809,6,2804,8],[2810,6,2805,8,"_assert"],[2810,13,2805,15],[2810,14,2805,16],[2810,18,2805,20],[2810,19,2805,21,"_popupRedirectResolver"],[2810,41,2805,43],[2810,43,2805,45],[2810,47,2805,49],[2810,49,2805,51],[2810,65,2805,67],[2810,66,2805,68],[2810,100,2805,102],[2810,101,2805,103],[2811,6,2806,8],[2811,12,2806,14],[2811,16,2806,18],[2811,17,2806,19,"getOrInitRedirectPersistenceManager"],[2811,52,2806,54],[2811,53,2806,55],[2811,54,2806,56],[2812,6,2807,8],[2813,6,2808,8],[2814,6,2809,8],[2815,6,2810,8],[2815,10,2810,12],[2815,14,2810,16],[2815,15,2810,17,"redirectUser"],[2815,27,2810,29],[2815,31,2811,12],[2815,35,2811,16],[2815,36,2811,17,"redirectUser"],[2815,48,2811,29],[2815,49,2811,30,"_redirectEventId"],[2815,65,2811,46],[2815,70,2811,51,"futureCurrentUser"],[2815,87,2811,68],[2815,88,2811,69,"_redirectEventId"],[2815,104,2811,85],[2815,106,2811,87],[2816,8,2812,12],[2816,15,2812,19],[2816,19,2812,23],[2816,20,2812,24,"directlySetCurrentUser"],[2816,42,2812,46],[2816,43,2812,47,"futureCurrentUser"],[2816,60,2812,64],[2816,61,2812,65],[2817,6,2813,8],[2818,6,2814,8],[2818,13,2814,15],[2818,17,2814,19],[2818,18,2814,20,"reloadAndSetCurrentUserOrClear"],[2818,48,2814,50],[2818,49,2814,51,"futureCurrentUser"],[2818,66,2814,68],[2818,67,2814,69],[2819,4,2815,4],[2820,4,2816,4],[2820,10,2816,10,"tryRedirectSignIn"],[2820,27,2816,27,"tryRedirectSignIn"],[2820,28,2816,28,"redirectResolver"],[2820,44,2816,44],[2820,46,2816,46],[2821,6,2817,8],[2822,6,2818,8],[2823,6,2819,8],[2824,6,2820,8],[2825,6,2821,8],[2826,6,2822,8],[2827,6,2823,8],[2828,6,2824,8],[2829,6,2825,8],[2830,6,2826,8],[2831,6,2827,8],[2832,6,2828,8],[2833,6,2829,8],[2834,6,2830,8],[2835,6,2831,8],[2836,6,2832,8],[2836,10,2832,12,"result"],[2836,16,2832,18],[2836,19,2832,21],[2836,23,2832,25],[2837,6,2833,8],[2837,10,2833,12],[2838,8,2834,12],[2839,8,2835,12],[2840,8,2836,12,"result"],[2840,14,2836,18],[2840,17,2836,21],[2840,23,2836,27],[2840,27,2836,31],[2840,28,2836,32,"_popupRedirectResolver"],[2840,50,2836,54],[2840,51,2836,55,"_completeRedirectFn"],[2840,70,2836,74],[2840,71,2836,75],[2840,75,2836,79],[2840,77,2836,81,"redirectResolver"],[2840,93,2836,97],[2840,95,2836,99],[2840,99,2836,103],[2840,100,2836,104],[2841,6,2837,8],[2841,7,2837,9],[2841,8,2838,8],[2841,15,2838,15,"e"],[2841,16,2838,16],[2841,18,2838,18],[2842,8,2839,12],[2843,8,2840,12],[2844,8,2841,12],[2844,14,2841,18],[2844,18,2841,22],[2844,19,2841,23,"_setRedirectUser"],[2844,35,2841,39],[2844,36,2841,40],[2844,40,2841,44],[2844,41,2841,45],[2845,6,2842,8],[2846,6,2843,8],[2846,13,2843,15,"result"],[2846,19,2843,21],[2847,4,2844,4],[2848,4,2845,4],[2848,10,2845,10,"reloadAndSetCurrentUserOrClear"],[2848,40,2845,40,"reloadAndSetCurrentUserOrClear"],[2848,41,2845,41,"user"],[2848,45,2845,45],[2848,47,2845,47],[2849,6,2846,8],[2849,10,2846,12],[2850,8,2847,12],[2850,14,2847,18,"_reloadWithoutSaving"],[2850,34,2847,38],[2850,35,2847,39,"user"],[2850,39,2847,43],[2850,40,2847,44],[2851,6,2848,8],[2851,7,2848,9],[2851,8,2849,8],[2851,15,2849,15,"e"],[2851,16,2849,16],[2851,18,2849,18],[2852,8,2850,12],[2852,12,2850,16,"e"],[2852,13,2850,17],[2852,15,2850,19,"code"],[2852,19,2850,23],[2852,24,2851,16],[2852,32,2851,24],[2852,56,2851,48],[2852,57,2851,49],[2852,101,2851,93],[2852,103,2851,95],[2853,10,2852,16],[2854,10,2853,16],[2855,10,2854,16],[2855,17,2854,23],[2855,21,2854,27],[2855,22,2854,28,"directlySetCurrentUser"],[2855,44,2854,50],[2855,45,2854,51],[2855,49,2854,55],[2855,50,2854,56],[2856,8,2855,12],[2857,6,2856,8],[2858,6,2857,8],[2858,13,2857,15],[2858,17,2857,19],[2858,18,2857,20,"directlySetCurrentUser"],[2858,40,2857,42],[2858,41,2857,43,"user"],[2858,45,2857,47],[2858,46,2857,48],[2859,4,2858,4],[2860,4,2859,4,"useDeviceLanguage"],[2860,21,2859,21,"useDeviceLanguage"],[2860,22,2859,21],[2860,24,2859,24],[2861,6,2860,8],[2861,10,2860,12],[2861,11,2860,13,"languageCode"],[2861,23,2860,25],[2861,26,2860,28,"_getUserLanguage"],[2861,42,2860,44],[2861,43,2860,45],[2861,44,2860,46],[2862,4,2861,4],[2863,4,2862,4],[2863,10,2862,10,"_delete"],[2863,17,2862,17,"_delete"],[2863,18,2862,17],[2863,20,2862,20],[2864,6,2863,8],[2864,10,2863,12],[2864,11,2863,13,"_deleted"],[2864,19,2863,21],[2864,22,2863,24],[2864,26,2863,28],[2865,4,2864,4],[2866,4,2865,4],[2866,10,2865,10,"updateCurrentUser"],[2866,27,2865,27,"updateCurrentUser"],[2866,28,2865,28,"userExtern"],[2866,38,2865,38],[2866,40,2865,40],[2867,6,2866,8],[2867,10,2866,12],[2867,14,2866,12,"_isFirebaseServerApp"],[2867,39,2866,32],[2867,41,2866,33],[2867,45,2866,37],[2867,46,2866,38,"app"],[2867,49,2866,41],[2867,50,2866,42],[2867,52,2866,44],[2868,8,2867,12],[2868,15,2867,19,"Promise"],[2868,22,2867,26],[2868,23,2867,27,"reject"],[2868,29,2867,33],[2868,30,2867,34,"_serverAppCurrentUserOperationNotSupportedError"],[2868,77,2867,81],[2868,78,2867,82],[2868,82,2867,86],[2868,83,2867,87],[2868,84,2867,88],[2869,6,2868,8],[2870,6,2869,8],[2871,6,2870,8],[2872,6,2871,8],[2872,12,2871,14,"user"],[2872,16,2871,18],[2872,19,2871,21,"userExtern"],[2872,29,2871,31],[2872,32,2872,14],[2872,36,2872,14,"getModularInstance"],[2872,60,2872,32],[2872,62,2872,33,"userExtern"],[2872,72,2872,43],[2872,73,2872,44],[2872,76,2873,14],[2872,80,2873,18],[2873,6,2874,8],[2873,10,2874,12,"user"],[2873,14,2874,16],[2873,16,2874,18],[2874,8,2875,12,"_assert"],[2874,15,2875,19],[2874,16,2875,20,"user"],[2874,20,2875,24],[2874,21,2875,25,"auth"],[2874,25,2875,29],[2874,26,2875,30,"config"],[2874,32,2875,36],[2874,33,2875,37,"apiKey"],[2874,39,2875,43],[2874,44,2875,48],[2874,48,2875,52],[2874,49,2875,53,"config"],[2874,55,2875,59],[2874,56,2875,60,"apiKey"],[2874,62,2875,66],[2874,64,2875,68],[2874,68,2875,72],[2874,70,2875,74],[2874,90,2875,94],[2874,91,2875,95],[2874,123,2875,127],[2874,124,2875,128],[2875,6,2876,8],[2876,6,2877,8],[2876,13,2877,15],[2876,17,2877,19],[2876,18,2877,20,"_updateCurrentUser"],[2876,36,2877,38],[2876,37,2877,39,"user"],[2876,41,2877,43],[2876,45,2877,47,"user"],[2876,49,2877,51],[2876,50,2877,52,"_clone"],[2876,56,2877,58],[2876,57,2877,59],[2876,61,2877,63],[2876,62,2877,64],[2876,63,2877,65],[2877,4,2878,4],[2878,4,2879,4],[2878,10,2879,10,"_updateCurrentUser"],[2878,28,2879,28,"_updateCurrentUser"],[2878,29,2879,29,"user"],[2878,33,2879,33],[2878,35,2879,35,"skipBeforeStateCallbacks"],[2878,59,2879,59],[2878,62,2879,62],[2878,67,2879,67],[2878,69,2879,69],[2879,6,2880,8],[2879,10,2880,12],[2879,14,2880,16],[2879,15,2880,17,"_deleted"],[2879,23,2880,25],[2879,25,2880,27],[2880,8,2881,12],[2881,6,2882,8],[2882,6,2883,8],[2882,10,2883,12,"user"],[2882,14,2883,16],[2882,16,2883,18],[2883,8,2884,12,"_assert"],[2883,15,2884,19],[2883,16,2884,20],[2883,20,2884,24],[2883,21,2884,25,"tenantId"],[2883,29,2884,33],[2883,34,2884,38,"user"],[2883,38,2884,42],[2883,39,2884,43,"tenantId"],[2883,47,2884,51],[2883,49,2884,53],[2883,53,2884,57],[2883,55,2884,59],[2883,75,2884,79],[2883,76,2884,80],[2883,114,2884,118],[2883,115,2884,119],[2884,6,2885,8],[2885,6,2886,8],[2885,10,2886,12],[2885,11,2886,13,"skipBeforeStateCallbacks"],[2885,35,2886,37],[2885,37,2886,39],[2886,8,2887,12],[2886,14,2887,18],[2886,18,2887,22],[2886,19,2887,23,"beforeStateQueue"],[2886,35,2887,39],[2886,36,2887,40,"runMiddleware"],[2886,49,2887,53],[2886,50,2887,54,"user"],[2886,54,2887,58],[2886,55,2887,59],[2887,6,2888,8],[2888,6,2889,8],[2888,13,2889,15],[2888,17,2889,19],[2888,18,2889,20,"queue"],[2888,23,2889,25],[2888,24,2889,26],[2888,36,2889,38],[2889,8,2890,12],[2889,14,2890,18],[2889,18,2890,22],[2889,19,2890,23,"directlySetCurrentUser"],[2889,41,2890,45],[2889,42,2890,46,"user"],[2889,46,2890,50],[2889,47,2890,51],[2890,8,2891,12],[2890,12,2891,16],[2890,13,2891,17,"notifyAuthListeners"],[2890,32,2891,36],[2890,33,2891,37],[2890,34,2891,38],[2891,6,2892,8],[2891,7,2892,9],[2891,8,2892,10],[2892,4,2893,4],[2893,4,2894,4],[2893,10,2894,10,"signOut"],[2893,17,2894,17,"signOut"],[2893,18,2894,17],[2893,20,2894,20],[2894,6,2895,8],[2894,10,2895,12],[2894,14,2895,12,"_isFirebaseServerApp"],[2894,39,2895,32],[2894,41,2895,33],[2894,45,2895,37],[2894,46,2895,38,"app"],[2894,49,2895,41],[2894,50,2895,42],[2894,52,2895,44],[2895,8,2896,12],[2895,15,2896,19,"Promise"],[2895,22,2896,26],[2895,23,2896,27,"reject"],[2895,29,2896,33],[2895,30,2896,34,"_serverAppCurrentUserOperationNotSupportedError"],[2895,77,2896,81],[2895,78,2896,82],[2895,82,2896,86],[2895,83,2896,87],[2895,84,2896,88],[2896,6,2897,8],[2897,6,2898,8],[2898,6,2899,8],[2898,12,2899,14],[2898,16,2899,18],[2898,17,2899,19,"beforeStateQueue"],[2898,33,2899,35],[2898,34,2899,36,"runMiddleware"],[2898,47,2899,49],[2898,48,2899,50],[2898,52,2899,54],[2898,53,2899,55],[2899,6,2900,8],[2900,6,2901,8],[2900,10,2901,12],[2900,14,2901,16],[2900,15,2901,17,"redirectPersistenceManager"],[2900,41,2901,43],[2900,45,2901,47],[2900,49,2901,51],[2900,50,2901,52,"_popupRedirectResolver"],[2900,72,2901,74],[2900,74,2901,76],[2901,8,2902,12],[2901,14,2902,18],[2901,18,2902,22],[2901,19,2902,23,"_setRedirectUser"],[2901,35,2902,39],[2901,36,2902,40],[2901,40,2902,44],[2901,41,2902,45],[2902,6,2903,8],[2903,6,2904,8],[2904,6,2905,8],[2905,6,2906,8],[2905,13,2906,15],[2905,17,2906,19],[2905,18,2906,20,"_updateCurrentUser"],[2905,36,2906,38],[2905,37,2906,39],[2905,41,2906,43],[2905,43,2906,45],[2905,73,2906,76],[2905,77,2906,80],[2905,78,2906,81],[2906,4,2907,4],[2907,4,2908,4,"setPersistence"],[2907,18,2908,18,"setPersistence"],[2907,19,2908,19,"persistence"],[2907,30,2908,30],[2907,32,2908,32],[2908,6,2909,8],[2908,10,2909,12],[2908,14,2909,12,"_isFirebaseServerApp"],[2908,39,2909,32],[2908,41,2909,33],[2908,45,2909,37],[2908,46,2909,38,"app"],[2908,49,2909,41],[2908,50,2909,42],[2908,52,2909,44],[2909,8,2910,12],[2909,15,2910,19,"Promise"],[2909,22,2910,26],[2909,23,2910,27,"reject"],[2909,29,2910,33],[2909,30,2910,34,"_serverAppCurrentUserOperationNotSupportedError"],[2909,77,2910,81],[2909,78,2910,82],[2909,82,2910,86],[2909,83,2910,87],[2909,84,2910,88],[2910,6,2911,8],[2911,6,2912,8],[2911,13,2912,15],[2911,17,2912,19],[2911,18,2912,20,"queue"],[2911,23,2912,25],[2911,24,2912,26],[2911,36,2912,38],[2912,8,2913,12],[2912,14,2913,18],[2912,18,2913,22],[2912,19,2913,23,"assertedPersistence"],[2912,38,2913,42],[2912,39,2913,43,"setPersistence"],[2912,53,2913,57],[2912,54,2913,58,"_getInstance"],[2912,66,2913,70],[2912,67,2913,71,"persistence"],[2912,78,2913,82],[2912,79,2913,83],[2912,80,2913,84],[2913,6,2914,8],[2913,7,2914,9],[2913,8,2914,10],[2914,4,2915,4],[2915,4,2916,4,"_getRecaptchaConfig"],[2915,23,2916,23,"_getRecaptchaConfig"],[2915,24,2916,23],[2915,26,2916,26],[2916,6,2917,8],[2916,10,2917,12],[2916,14,2917,16],[2916,15,2917,17,"tenantId"],[2916,23,2917,25],[2916,27,2917,29],[2916,31,2917,33],[2916,33,2917,35],[2917,8,2918,12],[2917,15,2918,19],[2917,19,2918,23],[2917,20,2918,24,"_agentRecaptchaConfig"],[2917,41,2918,45],[2918,6,2919,8],[2918,7,2919,9],[2918,13,2920,13],[2919,8,2921,12],[2919,15,2921,19],[2919,19,2921,23],[2919,20,2921,24,"_tenantRecaptchaConfigs"],[2919,43,2921,47],[2919,44,2921,48],[2919,48,2921,52],[2919,49,2921,53,"tenantId"],[2919,57,2921,61],[2919,58,2921,62],[2920,6,2922,8],[2921,4,2923,4],[2922,4,2924,4],[2922,10,2924,10,"validatePassword"],[2922,26,2924,26,"validatePassword"],[2922,27,2924,27,"password"],[2922,35,2924,35],[2922,37,2924,37],[2923,6,2925,8],[2923,10,2925,12],[2923,11,2925,13],[2923,15,2925,17],[2923,16,2925,18,"_getPasswordPolicyInternal"],[2923,42,2925,44],[2923,43,2925,45],[2923,44,2925,46],[2923,46,2925,48],[2924,8,2926,12],[2924,14,2926,18],[2924,18,2926,22],[2924,19,2926,23,"_updatePasswordPolicy"],[2924,40,2926,44],[2924,41,2926,45],[2924,42,2926,46],[2925,6,2927,8],[2926,6,2928,8],[2927,6,2929,8],[2927,12,2929,14,"passwordPolicy"],[2927,26,2929,28],[2927,29,2929,31],[2927,33,2929,35],[2927,34,2929,36,"_getPasswordPolicyInternal"],[2927,60,2929,62],[2927,61,2929,63],[2927,62,2929,64],[2928,6,2930,8],[2929,6,2931,8],[2930,6,2932,8],[2930,10,2932,12,"passwordPolicy"],[2930,24,2932,26],[2930,25,2932,27,"schemaVersion"],[2930,38,2932,40],[2930,43,2933,12],[2930,47,2933,16],[2930,48,2933,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[2930,87,2933,56],[2930,89,2933,58],[2931,8,2934,12],[2931,15,2934,19,"Promise"],[2931,22,2934,26],[2931,23,2934,27,"reject"],[2931,29,2934,33],[2931,30,2934,34],[2931,34,2934,38],[2931,35,2934,39,"_errorFactory"],[2931,48,2934,52],[2931,49,2934,53,"create"],[2931,55,2934,59],[2931,56,2934,60],[2931,100,2934,104],[2931,101,2934,105],[2931,165,2934,169],[2931,166,2934,170],[2931,167,2934,171],[2931,168,2934,172],[2931,169,2934,173],[2932,6,2935,8],[2933,6,2936,8],[2933,13,2936,15,"passwordPolicy"],[2933,27,2936,29],[2933,28,2936,30,"validatePassword"],[2933,44,2936,46],[2933,45,2936,47,"password"],[2933,53,2936,55],[2933,54,2936,56],[2934,4,2937,4],[2935,4,2938,4,"_getPasswordPolicyInternal"],[2935,30,2938,30,"_getPasswordPolicyInternal"],[2935,31,2938,30],[2935,33,2938,33],[2936,6,2939,8],[2936,10,2939,12],[2936,14,2939,16],[2936,15,2939,17,"tenantId"],[2936,23,2939,25],[2936,28,2939,30],[2936,32,2939,34],[2936,34,2939,36],[2937,8,2940,12],[2937,15,2940,19],[2937,19,2940,23],[2937,20,2940,24,"_projectPasswordPolicy"],[2937,42,2940,46],[2938,6,2941,8],[2938,7,2941,9],[2938,13,2942,13],[2939,8,2943,12],[2939,15,2943,19],[2939,19,2943,23],[2939,20,2943,24,"_tenantPasswordPolicies"],[2939,43,2943,47],[2939,44,2943,48],[2939,48,2943,52],[2939,49,2943,53,"tenantId"],[2939,57,2943,61],[2939,58,2943,62],[2940,6,2944,8],[2941,4,2945,4],[2942,4,2946,4],[2942,10,2946,10,"_updatePasswordPolicy"],[2942,31,2946,31,"_updatePasswordPolicy"],[2942,32,2946,31],[2942,34,2946,34],[2943,6,2947,8],[2943,12,2947,14,"response"],[2943,20,2947,22],[2943,23,2947,25],[2943,29,2947,31,"_getPasswordPolicy"],[2943,47,2947,49],[2943,48,2947,50],[2943,52,2947,54],[2943,53,2947,55],[2944,6,2948,8],[2944,12,2948,14,"passwordPolicy"],[2944,26,2948,28],[2944,29,2948,31],[2944,33,2948,35,"PasswordPolicyImpl"],[2944,51,2948,53],[2944,52,2948,54,"response"],[2944,60,2948,62],[2944,61,2948,63],[2945,6,2949,8],[2945,10,2949,12],[2945,14,2949,16],[2945,15,2949,17,"tenantId"],[2945,23,2949,25],[2945,28,2949,30],[2945,32,2949,34],[2945,34,2949,36],[2946,8,2950,12],[2946,12,2950,16],[2946,13,2950,17,"_projectPasswordPolicy"],[2946,35,2950,39],[2946,38,2950,42,"passwordPolicy"],[2946,52,2950,56],[2947,6,2951,8],[2947,7,2951,9],[2947,13,2952,13],[2948,8,2953,12],[2948,12,2953,16],[2948,13,2953,17,"_tenantPasswordPolicies"],[2948,36,2953,40],[2948,37,2953,41],[2948,41,2953,45],[2948,42,2953,46,"tenantId"],[2948,50,2953,54],[2948,51,2953,55],[2948,54,2953,58,"passwordPolicy"],[2948,68,2953,72],[2949,6,2954,8],[2950,4,2955,4],[2951,4,2956,4,"_getPersistenceType"],[2951,23,2956,23,"_getPersistenceType"],[2951,24,2956,23],[2951,26,2956,26],[2952,6,2957,8],[2952,13,2957,15],[2952,17,2957,19],[2952,18,2957,20,"assertedPersistence"],[2952,37,2957,39],[2952,38,2957,40,"persistence"],[2952,49,2957,51],[2952,50,2957,52,"type"],[2952,54,2957,56],[2953,4,2958,4],[2954,4,2959,4,"_getPersistence"],[2954,19,2959,19,"_getPersistence"],[2954,20,2959,19],[2954,22,2959,22],[2955,6,2960,8],[2955,13,2960,15],[2955,17,2960,19],[2955,18,2960,20,"assertedPersistence"],[2955,37,2960,39],[2955,38,2960,40,"persistence"],[2955,49,2960,51],[2956,4,2961,4],[2957,4,2962,4,"_updateErrorMap"],[2957,19,2962,19,"_updateErrorMap"],[2957,20,2962,20,"errorMap"],[2957,28,2962,28],[2957,30,2962,30],[2958,6,2963,8],[2958,10,2963,12],[2958,11,2963,13,"_errorFactory"],[2958,24,2963,26],[2958,27,2963,29],[2958,31,2963,33,"ErrorFactory"],[2958,49,2963,45],[2958,50,2963,46],[2958,56,2963,52],[2958,58,2963,54],[2958,68,2963,64],[2958,70,2963,66,"errorMap"],[2958,78,2963,74],[2958,79,2963,75],[2958,80,2963,76],[2958,81,2963,77],[2959,4,2964,4],[2960,4,2965,4,"onAuthStateChanged"],[2960,22,2965,22,"onAuthStateChanged"],[2960,23,2965,23,"nextOrObserver"],[2960,37,2965,37],[2960,39,2965,39,"error"],[2960,44,2965,44],[2960,46,2965,46,"completed"],[2960,55,2965,55],[2960,57,2965,57],[2961,6,2966,8],[2961,13,2966,15],[2961,17,2966,19],[2961,18,2966,20,"registerStateListener"],[2961,39,2966,41],[2961,40,2966,42],[2961,44,2966,46],[2961,45,2966,47,"authStateSubscription"],[2961,66,2966,68],[2961,68,2966,70,"nextOrObserver"],[2961,82,2966,84],[2961,84,2966,86,"error"],[2961,89,2966,91],[2961,91,2966,93,"completed"],[2961,100,2966,102],[2961,101,2966,103],[2962,4,2967,4],[2963,4,2968,4,"beforeAuthStateChanged"],[2963,26,2968,26,"beforeAuthStateChanged"],[2963,27,2968,27,"callback"],[2963,35,2968,35],[2963,37,2968,37,"onAbort"],[2963,44,2968,44],[2963,46,2968,46],[2964,6,2969,8],[2964,13,2969,15],[2964,17,2969,19],[2964,18,2969,20,"beforeStateQueue"],[2964,34,2969,36],[2964,35,2969,37,"pushCallback"],[2964,47,2969,49],[2964,48,2969,50,"callback"],[2964,56,2969,58],[2964,58,2969,60,"onAbort"],[2964,65,2969,67],[2964,66,2969,68],[2965,4,2970,4],[2966,4,2971,4,"onIdTokenChanged"],[2966,20,2971,20,"onIdTokenChanged"],[2966,21,2971,21,"nextOrObserver"],[2966,35,2971,35],[2966,37,2971,37,"error"],[2966,42,2971,42],[2966,44,2971,44,"completed"],[2966,53,2971,53],[2966,55,2971,55],[2967,6,2972,8],[2967,13,2972,15],[2967,17,2972,19],[2967,18,2972,20,"registerStateListener"],[2967,39,2972,41],[2967,40,2972,42],[2967,44,2972,46],[2967,45,2972,47,"idTokenSubscription"],[2967,64,2972,66],[2967,66,2972,68,"nextOrObserver"],[2967,80,2972,82],[2967,82,2972,84,"error"],[2967,87,2972,89],[2967,89,2972,91,"completed"],[2967,98,2972,100],[2967,99,2972,101],[2968,4,2973,4],[2969,4,2974,4,"authStateReady"],[2969,18,2974,18,"authStateReady"],[2969,19,2974,18],[2969,21,2974,21],[2970,6,2975,8],[2970,13,2975,15],[2970,17,2975,19,"Promise"],[2970,24,2975,26],[2970,25,2975,27],[2970,26,2975,28,"resolve"],[2970,33,2975,35],[2970,35,2975,37,"reject"],[2970,41,2975,43],[2970,46,2975,48],[2971,8,2976,12],[2971,12,2976,16],[2971,16,2976,20],[2971,17,2976,21,"currentUser"],[2971,28,2976,32],[2971,30,2976,34],[2972,10,2977,16,"resolve"],[2972,17,2977,23],[2972,18,2977,24],[2972,19,2977,25],[2973,8,2978,12],[2973,9,2978,13],[2973,15,2979,17],[2974,10,2980,16],[2974,16,2980,22,"unsubscribe"],[2974,27,2980,33],[2974,30,2980,36],[2974,34,2980,40],[2974,35,2980,41,"onAuthStateChanged"],[2974,53,2980,59],[2974,54,2980,60],[2974,60,2980,66],[2975,12,2981,20,"unsubscribe"],[2975,23,2981,31],[2975,24,2981,32],[2975,25,2981,33],[2976,12,2982,20,"resolve"],[2976,19,2982,27],[2976,20,2982,28],[2976,21,2982,29],[2977,10,2983,16],[2977,11,2983,17],[2977,13,2983,19,"reject"],[2977,19,2983,25],[2977,20,2983,26],[2978,8,2984,12],[2979,6,2985,8],[2979,7,2985,9],[2979,8,2985,10],[2980,4,2986,4],[2981,4,2987,4],[2982,0,2988,0],[2983,0,2989,0],[2984,4,2990,4],[2984,10,2990,10,"revokeAccessToken"],[2984,27,2990,27,"revokeAccessToken"],[2984,28,2990,28,"token"],[2984,33,2990,33],[2984,35,2990,35],[2985,6,2991,8],[2985,10,2991,12],[2985,14,2991,16],[2985,15,2991,17,"currentUser"],[2985,26,2991,28],[2985,28,2991,30],[2986,8,2992,12],[2986,14,2992,18,"idToken"],[2986,21,2992,25],[2986,24,2992,28],[2986,30,2992,34],[2986,34,2992,38],[2986,35,2992,39,"currentUser"],[2986,46,2992,50],[2986,47,2992,51,"getIdToken"],[2986,57,2992,61],[2986,58,2992,62],[2986,59,2992,63],[2987,8,2993,12],[2988,8,2994,12],[2988,14,2994,18,"request"],[2988,21,2994,25],[2988,24,2994,28],[2989,10,2995,16,"providerId"],[2989,20,2995,26],[2989,22,2995,28],[2989,33,2995,39],[2990,10,2996,16,"tokenType"],[2990,19,2996,25],[2990,21,2996,27],[2990,35,2996,41],[2990,36,2996,42],[2991,10,2997,16,"token"],[2991,15,2997,21],[2992,10,2998,16,"idToken"],[2993,8,2999,12],[2993,9,2999,13],[2994,8,3000,12],[2994,12,3000,16],[2994,16,3000,20],[2994,17,3000,21,"tenantId"],[2994,25,3000,29],[2994,29,3000,33],[2994,33,3000,37],[2994,35,3000,39],[2995,10,3001,16,"request"],[2995,17,3001,23],[2995,18,3001,24,"tenantId"],[2995,26,3001,32],[2995,29,3001,35],[2995,33,3001,39],[2995,34,3001,40,"tenantId"],[2995,42,3001,48],[2996,8,3002,12],[2997,8,3003,12],[2997,14,3003,18,"revokeToken"],[2997,25,3003,29],[2997,26,3003,30],[2997,30,3003,34],[2997,32,3003,36,"request"],[2997,39,3003,43],[2997,40,3003,44],[2998,6,3004,8],[2999,4,3005,4],[3000,4,3006,4,"toJSON"],[3000,10,3006,10,"toJSON"],[3000,11,3006,10],[3000,13,3006,13],[3001,6,3007,8],[3001,13,3007,15],[3002,8,3008,12,"apiKey"],[3002,14,3008,18],[3002,16,3008,20],[3002,20,3008,24],[3002,21,3008,25,"config"],[3002,27,3008,31],[3002,28,3008,32,"apiKey"],[3002,34,3008,38],[3003,8,3009,12,"authDomain"],[3003,18,3009,22],[3003,20,3009,24],[3003,24,3009,28],[3003,25,3009,29,"config"],[3003,31,3009,35],[3003,32,3009,36,"authDomain"],[3003,42,3009,46],[3004,8,3010,12,"appName"],[3004,15,3010,19],[3004,17,3010,21],[3004,21,3010,25],[3004,22,3010,26,"name"],[3004,26,3010,30],[3005,8,3011,12,"currentUser"],[3005,19,3011,23],[3005,21,3011,25],[3005,25,3011,29],[3005,26,3011,30,"_currentUser"],[3005,38,3011,42],[3005,40,3011,44,"toJSON"],[3005,46,3011,50],[3005,47,3011,51],[3006,6,3012,8],[3006,7,3012,9],[3007,4,3013,4],[3008,4,3014,4],[3008,10,3014,10,"_setRedirectUser"],[3008,26,3014,26,"_setRedirectUser"],[3008,27,3014,27,"user"],[3008,31,3014,31],[3008,33,3014,33,"popupRedirectResolver"],[3008,54,3014,54],[3008,56,3014,56],[3009,6,3015,8],[3009,12,3015,14,"redirectManager"],[3009,27,3015,29],[3009,30,3015,32],[3009,36,3015,38],[3009,40,3015,42],[3009,41,3015,43,"getOrInitRedirectPersistenceManager"],[3009,76,3015,78],[3009,77,3015,79,"popupRedirectResolver"],[3009,98,3015,100],[3009,99,3015,101],[3010,6,3016,8],[3010,13,3016,15,"user"],[3010,17,3016,19],[3010,22,3016,24],[3010,26,3016,28],[3010,29,3017,14,"redirectManager"],[3010,44,3017,29],[3010,45,3017,30,"removeCurrentUser"],[3010,62,3017,47],[3010,63,3017,48],[3010,64,3017,49],[3010,67,3018,14,"redirectManager"],[3010,82,3018,29],[3010,83,3018,30,"setCurrentUser"],[3010,97,3018,44],[3010,98,3018,45,"user"],[3010,102,3018,49],[3010,103,3018,50],[3011,4,3019,4],[3012,4,3020,4],[3012,10,3020,10,"getOrInitRedirectPersistenceManager"],[3012,45,3020,45,"getOrInitRedirectPersistenceManager"],[3012,46,3020,46,"popupRedirectResolver"],[3012,67,3020,67],[3012,69,3020,69],[3013,6,3021,8],[3013,10,3021,12],[3013,11,3021,13],[3013,15,3021,17],[3013,16,3021,18,"redirectPersistenceManager"],[3013,42,3021,44],[3013,44,3021,46],[3014,8,3022,12],[3014,14,3022,18,"resolver"],[3014,22,3022,26],[3014,25,3022,30,"popupRedirectResolver"],[3014,46,3022,51],[3014,50,3022,55,"_getInstance"],[3014,62,3022,67],[3014,63,3022,68,"popupRedirectResolver"],[3014,84,3022,89],[3014,85,3022,90],[3014,89,3023,16],[3014,93,3023,20],[3014,94,3023,21,"_popupRedirectResolver"],[3014,116,3023,43],[3015,8,3024,12,"_assert"],[3015,15,3024,19],[3015,16,3024,20,"resolver"],[3015,24,3024,28],[3015,26,3024,30],[3015,30,3024,34],[3015,32,3024,36],[3015,48,3024,52],[3015,49,3024,53],[3015,83,3024,87],[3015,84,3024,88],[3016,8,3025,12],[3016,12,3025,16],[3016,13,3025,17,"redirectPersistenceManager"],[3016,39,3025,43],[3016,42,3025,46],[3016,48,3025,52,"PersistenceUserManager"],[3016,70,3025,74],[3016,71,3025,75,"create"],[3016,77,3025,81],[3016,78,3025,82],[3016,82,3025,86],[3016,84,3025,88],[3016,85,3025,89,"_getInstance"],[3016,97,3025,101],[3016,98,3025,102,"resolver"],[3016,106,3025,110],[3016,107,3025,111,"_redirectPersistence"],[3016,127,3025,131],[3016,128,3025,132],[3016,129,3025,133],[3016,131,3025,135],[3016,145,3025,149],[3016,146,3025,150],[3016,173,3025,177],[3016,174,3025,178],[3017,8,3026,12],[3017,12,3026,16],[3017,13,3026,17,"redirectUser"],[3017,25,3026,29],[3017,28,3027,16],[3017,34,3027,22],[3017,38,3027,26],[3017,39,3027,27,"redirectPersistenceManager"],[3017,65,3027,53],[3017,66,3027,54,"getCurrentUser"],[3017,80,3027,68],[3017,81,3027,69],[3017,82,3027,70],[3018,6,3028,8],[3019,6,3029,8],[3019,13,3029,15],[3019,17,3029,19],[3019,18,3029,20,"redirectPersistenceManager"],[3019,44,3029,46],[3020,4,3030,4],[3021,4,3031,4],[3021,10,3031,10,"_redirectUserForId"],[3021,28,3031,28,"_redirectUserForId"],[3021,29,3031,29,"id"],[3021,31,3031,31],[3021,33,3031,33],[3022,6,3032,8],[3023,6,3033,8],[3024,6,3034,8],[3024,10,3034,12],[3024,14,3034,16],[3024,15,3034,17,"_isInitialized"],[3024,29,3034,31],[3024,31,3034,33],[3025,8,3035,12],[3025,14,3035,18],[3025,18,3035,22],[3025,19,3035,23,"queue"],[3025,24,3035,28],[3025,25,3035,29],[3025,37,3035,41],[3025,38,3035,43],[3025,39,3035,44],[3025,40,3035,45],[3026,6,3036,8],[3027,6,3037,8],[3027,10,3037,12],[3027,14,3037,16],[3027,15,3037,17,"_currentUser"],[3027,27,3037,29],[3027,29,3037,31,"_redirectEventId"],[3027,45,3037,47],[3027,50,3037,52,"id"],[3027,52,3037,54],[3027,54,3037,56],[3028,8,3038,12],[3028,15,3038,19],[3028,19,3038,23],[3028,20,3038,24,"_currentUser"],[3028,32,3038,36],[3029,6,3039,8],[3030,6,3040,8],[3030,10,3040,12],[3030,14,3040,16],[3030,15,3040,17,"redirectUser"],[3030,27,3040,29],[3030,29,3040,31,"_redirectEventId"],[3030,45,3040,47],[3030,50,3040,52,"id"],[3030,52,3040,54],[3030,54,3040,56],[3031,8,3041,12],[3031,15,3041,19],[3031,19,3041,23],[3031,20,3041,24,"redirectUser"],[3031,32,3041,36],[3032,6,3042,8],[3033,6,3043,8],[3033,13,3043,15],[3033,17,3043,19],[3034,4,3044,4],[3035,4,3045,4],[3035,10,3045,10,"_persistUserIfCurrent"],[3035,31,3045,31,"_persistUserIfCurrent"],[3035,32,3045,32,"user"],[3035,36,3045,36],[3035,38,3045,38],[3036,6,3046,8],[3036,10,3046,12,"user"],[3036,14,3046,16],[3036,19,3046,21],[3036,23,3046,25],[3036,24,3046,26,"currentUser"],[3036,35,3046,37],[3036,37,3046,39],[3037,8,3047,12],[3037,15,3047,19],[3037,19,3047,23],[3037,20,3047,24,"queue"],[3037,25,3047,29],[3037,26,3047,30],[3037,38,3047,42],[3037,42,3047,46],[3037,43,3047,47,"directlySetCurrentUser"],[3037,65,3047,69],[3037,66,3047,70,"user"],[3037,70,3047,74],[3037,71,3047,75],[3037,72,3047,76],[3038,6,3048,8],[3039,4,3049,4],[3040,4,3050,4],[3041,4,3051,4,"_notifyListenersIfCurrent"],[3041,29,3051,29,"_notifyListenersIfCurrent"],[3041,30,3051,30,"user"],[3041,34,3051,34],[3041,36,3051,36],[3042,6,3052,8],[3042,10,3052,12,"user"],[3042,14,3052,16],[3042,19,3052,21],[3042,23,3052,25],[3042,24,3052,26,"currentUser"],[3042,35,3052,37],[3042,37,3052,39],[3043,8,3053,12],[3043,12,3053,16],[3043,13,3053,17,"notifyAuthListeners"],[3043,32,3053,36],[3043,33,3053,37],[3043,34,3053,38],[3044,6,3054,8],[3045,4,3055,4],[3046,4,3056,4,"_key"],[3046,8,3056,8,"_key"],[3046,9,3056,8],[3046,11,3056,11],[3047,6,3057,8],[3047,13,3057,15],[3047,16,3057,18],[3047,20,3057,22],[3047,21,3057,23,"config"],[3047,27,3057,29],[3047,28,3057,30,"authDomain"],[3047,38,3057,40],[3047,42,3057,44],[3047,46,3057,48],[3047,47,3057,49,"config"],[3047,53,3057,55],[3047,54,3057,56,"apiKey"],[3047,60,3057,62],[3047,64,3057,66],[3047,68,3057,70],[3047,69,3057,71,"name"],[3047,73,3057,75],[3047,75,3057,77],[3048,4,3058,4],[3049,4,3059,4,"_startProactiveRefresh"],[3049,26,3059,26,"_startProactiveRefresh"],[3049,27,3059,26],[3049,29,3059,29],[3050,6,3060,8],[3050,10,3060,12],[3050,11,3060,13,"isProactiveRefreshEnabled"],[3050,36,3060,38],[3050,39,3060,41],[3050,43,3060,45],[3051,6,3061,8],[3051,10,3061,12],[3051,14,3061,16],[3051,15,3061,17,"currentUser"],[3051,26,3061,28],[3051,28,3061,30],[3052,8,3062,12],[3052,12,3062,16],[3052,13,3062,17,"_currentUser"],[3052,25,3062,29],[3052,26,3062,30,"_startProactiveRefresh"],[3052,48,3062,52],[3052,49,3062,53],[3052,50,3062,54],[3053,6,3063,8],[3054,4,3064,4],[3055,4,3065,4,"_stopProactiveRefresh"],[3055,25,3065,25,"_stopProactiveRefresh"],[3055,26,3065,25],[3055,28,3065,28],[3056,6,3066,8],[3056,10,3066,12],[3056,11,3066,13,"isProactiveRefreshEnabled"],[3056,36,3066,38],[3056,39,3066,41],[3056,44,3066,46],[3057,6,3067,8],[3057,10,3067,12],[3057,14,3067,16],[3057,15,3067,17,"currentUser"],[3057,26,3067,28],[3057,28,3067,30],[3058,8,3068,12],[3058,12,3068,16],[3058,13,3068,17,"_currentUser"],[3058,25,3068,29],[3058,26,3068,30,"_stopProactiveRefresh"],[3058,47,3068,51],[3058,48,3068,52],[3058,49,3068,53],[3059,6,3069,8],[3060,4,3070,4],[3061,4,3071,4],[3062,4,3072,4],[3062,8,3072,8,"_currentUser"],[3062,20,3072,20,"_currentUser"],[3062,21,3072,20],[3062,23,3072,23],[3063,6,3073,8],[3063,13,3073,15],[3063,17,3073,19],[3063,18,3073,20,"currentUser"],[3063,29,3073,31],[3064,4,3074,4],[3065,4,3075,4,"notifyAuthListeners"],[3065,23,3075,23,"notifyAuthListeners"],[3065,24,3075,23],[3065,26,3075,26],[3066,6,3076,8],[3066,10,3076,12],[3066,11,3076,13],[3066,15,3076,17],[3066,16,3076,18,"_isInitialized"],[3066,30,3076,32],[3066,32,3076,34],[3067,8,3077,12],[3068,6,3078,8],[3069,6,3079,8],[3069,10,3079,12],[3069,11,3079,13,"idTokenSubscription"],[3069,30,3079,32],[3069,31,3079,33,"next"],[3069,35,3079,37],[3069,36,3079,38],[3069,40,3079,42],[3069,41,3079,43,"currentUser"],[3069,52,3079,54],[3069,53,3079,55],[3070,6,3080,8],[3070,12,3080,14,"currentUid"],[3070,22,3080,24],[3070,25,3080,27],[3070,29,3080,31],[3070,30,3080,32,"currentUser"],[3070,41,3080,43],[3070,43,3080,45,"uid"],[3070,46,3080,48],[3070,50,3080,52],[3070,54,3080,56],[3071,6,3081,8],[3071,10,3081,12],[3071,14,3081,16],[3071,15,3081,17,"lastNotifiedUid"],[3071,30,3081,32],[3071,35,3081,37,"currentUid"],[3071,45,3081,47],[3071,47,3081,49],[3072,8,3082,12],[3072,12,3082,16],[3072,13,3082,17,"lastNotifiedUid"],[3072,28,3082,32],[3072,31,3082,35,"currentUid"],[3072,41,3082,45],[3073,8,3083,12],[3073,12,3083,16],[3073,13,3083,17,"authStateSubscription"],[3073,34,3083,38],[3073,35,3083,39,"next"],[3073,39,3083,43],[3073,40,3083,44],[3073,44,3083,48],[3073,45,3083,49,"currentUser"],[3073,56,3083,60],[3073,57,3083,61],[3074,6,3084,8],[3075,4,3085,4],[3076,4,3086,4,"registerStateListener"],[3076,25,3086,25,"registerStateListener"],[3076,26,3086,26,"subscription"],[3076,38,3086,38],[3076,40,3086,40,"nextOrObserver"],[3076,54,3086,54],[3076,56,3086,56,"error"],[3076,61,3086,61],[3076,63,3086,63,"completed"],[3076,72,3086,72],[3076,74,3086,74],[3077,6,3087,8],[3077,10,3087,12],[3077,14,3087,16],[3077,15,3087,17,"_deleted"],[3077,23,3087,25],[3077,25,3087,27],[3078,8,3088,12],[3078,15,3088,19],[3078,21,3088,25],[3078,22,3088,27],[3078,23,3088,28],[3079,6,3089,8],[3080,6,3090,8],[3080,12,3090,14,"cb"],[3080,14,3090,16],[3080,17,3090,19],[3080,24,3090,26,"nextOrObserver"],[3080,38,3090,40],[3080,43,3090,45],[3080,53,3090,55],[3080,56,3091,14,"nextOrObserver"],[3080,70,3091,28],[3080,73,3092,14,"nextOrObserver"],[3080,87,3092,28],[3080,88,3092,29,"next"],[3080,92,3092,33],[3080,93,3092,34,"bind"],[3080,97,3092,38],[3080,98,3092,39,"nextOrObserver"],[3080,112,3092,53],[3080,113,3092,54],[3081,6,3093,8],[3081,10,3093,12,"isUnsubscribed"],[3081,24,3093,26],[3081,27,3093,29],[3081,32,3093,34],[3082,6,3094,8],[3082,12,3094,14,"promise"],[3082,19,3094,21],[3082,22,3094,24],[3082,26,3094,28],[3082,27,3094,29,"_isInitialized"],[3082,41,3094,43],[3082,44,3095,14,"Promise"],[3082,51,3095,21],[3082,52,3095,22,"resolve"],[3082,59,3095,29],[3082,60,3095,30],[3082,61,3095,31],[3082,64,3096,14],[3082,68,3096,18],[3082,69,3096,19,"_initializationPromise"],[3082,91,3096,41],[3083,6,3097,8,"_assert"],[3083,13,3097,15],[3083,14,3097,16,"promise"],[3083,21,3097,23],[3083,23,3097,25],[3083,27,3097,29],[3083,29,3097,31],[3083,45,3097,47],[3083,46,3097,48],[3083,80,3097,82],[3083,81,3097,83],[3084,6,3098,8],[3085,6,3099,8],[3086,6,3100,8,"promise"],[3086,13,3100,15],[3086,14,3100,16,"then"],[3086,18,3100,20],[3086,19,3100,21],[3086,25,3100,27],[3087,8,3101,12],[3087,12,3101,16,"isUnsubscribed"],[3087,26,3101,30],[3087,28,3101,32],[3088,10,3102,16],[3089,8,3103,12],[3090,8,3104,12,"cb"],[3090,10,3104,14],[3090,11,3104,15],[3090,15,3104,19],[3090,16,3104,20,"currentUser"],[3090,27,3104,31],[3090,28,3104,32],[3091,6,3105,8],[3091,7,3105,9],[3091,8,3105,10],[3092,6,3106,8],[3092,10,3106,12],[3092,17,3106,19,"nextOrObserver"],[3092,31,3106,33],[3092,36,3106,38],[3092,46,3106,48],[3092,48,3106,50],[3093,8,3107,12],[3093,14,3107,18,"unsubscribe"],[3093,25,3107,29],[3093,28,3107,32,"subscription"],[3093,40,3107,44],[3093,41,3107,45,"addObserver"],[3093,52,3107,56],[3093,53,3107,57,"nextOrObserver"],[3093,67,3107,71],[3093,69,3107,73,"error"],[3093,74,3107,78],[3093,76,3107,80,"completed"],[3093,85,3107,89],[3093,86,3107,90],[3094,8,3108,12],[3094,15,3108,19],[3094,21,3108,25],[3095,10,3109,16,"isUnsubscribed"],[3095,24,3109,30],[3095,27,3109,33],[3095,31,3109,37],[3096,10,3110,16,"unsubscribe"],[3096,21,3110,27],[3096,22,3110,28],[3096,23,3110,29],[3097,8,3111,12],[3097,9,3111,13],[3098,6,3112,8],[3098,7,3112,9],[3098,13,3113,13],[3099,8,3114,12],[3099,14,3114,18,"unsubscribe"],[3099,25,3114,29],[3099,28,3114,32,"subscription"],[3099,40,3114,44],[3099,41,3114,45,"addObserver"],[3099,52,3114,56],[3099,53,3114,57,"nextOrObserver"],[3099,67,3114,71],[3099,68,3114,72],[3100,8,3115,12],[3100,15,3115,19],[3100,21,3115,25],[3101,10,3116,16,"isUnsubscribed"],[3101,24,3116,30],[3101,27,3116,33],[3101,31,3116,37],[3102,10,3117,16,"unsubscribe"],[3102,21,3117,27],[3102,22,3117,28],[3102,23,3117,29],[3103,8,3118,12],[3103,9,3118,13],[3104,6,3119,8],[3105,4,3120,4],[3106,4,3121,4],[3107,0,3122,0],[3108,0,3123,0],[3109,0,3124,0],[3110,0,3125,0],[3111,4,3126,4],[3111,10,3126,10,"directlySetCurrentUser"],[3111,32,3126,32,"directlySetCurrentUser"],[3111,33,3126,33,"user"],[3111,37,3126,37],[3111,39,3126,39],[3112,6,3127,8],[3112,10,3127,12],[3112,14,3127,16],[3112,15,3127,17,"currentUser"],[3112,26,3127,28],[3112,30,3127,32],[3112,34,3127,36],[3112,35,3127,37,"currentUser"],[3112,46,3127,48],[3112,51,3127,53,"user"],[3112,55,3127,57],[3112,57,3127,59],[3113,8,3128,12],[3113,12,3128,16],[3113,13,3128,17,"_currentUser"],[3113,25,3128,29],[3113,26,3128,30,"_stopProactiveRefresh"],[3113,47,3128,51],[3113,48,3128,52],[3113,49,3128,53],[3114,6,3129,8],[3115,6,3130,8],[3115,10,3130,12,"user"],[3115,14,3130,16],[3115,18,3130,20],[3115,22,3130,24],[3115,23,3130,25,"isProactiveRefreshEnabled"],[3115,48,3130,50],[3115,50,3130,52],[3116,8,3131,12,"user"],[3116,12,3131,16],[3116,13,3131,17,"_startProactiveRefresh"],[3116,35,3131,39],[3116,36,3131,40],[3116,37,3131,41],[3117,6,3132,8],[3118,6,3133,8],[3118,10,3133,12],[3118,11,3133,13,"currentUser"],[3118,22,3133,24],[3118,25,3133,27,"user"],[3118,29,3133,31],[3119,6,3134,8],[3119,10,3134,12,"user"],[3119,14,3134,16],[3119,16,3134,18],[3120,8,3135,12],[3120,14,3135,18],[3120,18,3135,22],[3120,19,3135,23,"assertedPersistence"],[3120,38,3135,42],[3120,39,3135,43,"setCurrentUser"],[3120,53,3135,57],[3120,54,3135,58,"user"],[3120,58,3135,62],[3120,59,3135,63],[3121,6,3136,8],[3121,7,3136,9],[3121,13,3137,13],[3122,8,3138,12],[3122,14,3138,18],[3122,18,3138,22],[3122,19,3138,23,"assertedPersistence"],[3122,38,3138,42],[3122,39,3138,43,"removeCurrentUser"],[3122,56,3138,60],[3122,57,3138,61],[3122,58,3138,62],[3123,6,3139,8],[3124,4,3140,4],[3125,4,3141,4,"queue"],[3125,9,3141,9,"queue"],[3125,10,3141,10,"action"],[3125,16,3141,16],[3125,18,3141,18],[3126,6,3142,8],[3127,6,3143,8],[3128,6,3144,8],[3128,10,3144,12],[3128,11,3144,13,"operations"],[3128,21,3144,23],[3128,24,3144,26],[3128,28,3144,30],[3128,29,3144,31,"operations"],[3128,39,3144,41],[3128,40,3144,42,"then"],[3128,44,3144,46],[3128,45,3144,47,"action"],[3128,51,3144,53],[3128,53,3144,55,"action"],[3128,59,3144,61],[3128,60,3144,62],[3129,6,3145,8],[3129,13,3145,15],[3129,17,3145,19],[3129,18,3145,20,"operations"],[3129,28,3145,30],[3130,4,3146,4],[3131,4,3147,4],[3131,8,3147,8,"assertedPersistence"],[3131,27,3147,27,"assertedPersistence"],[3131,28,3147,27],[3131,30,3147,30],[3132,6,3148,8,"_assert"],[3132,13,3148,15],[3132,14,3148,16],[3132,18,3148,20],[3132,19,3148,21,"persistenceManager"],[3132,37,3148,39],[3132,39,3148,41],[3132,43,3148,45],[3132,45,3148,47],[3132,61,3148,63],[3132,62,3148,64],[3132,96,3148,98],[3132,97,3148,99],[3133,6,3149,8],[3133,13,3149,15],[3133,17,3149,19],[3133,18,3149,20,"persistenceManager"],[3133,36,3149,38],[3134,4,3150,4],[3135,4,3151,4,"_logFramework"],[3135,17,3151,17,"_logFramework"],[3135,18,3151,18,"framework"],[3135,27,3151,27],[3135,29,3151,29],[3136,6,3152,8],[3136,10,3152,12],[3136,11,3152,13,"framework"],[3136,20,3152,22],[3136,24,3152,26],[3136,28,3152,30],[3136,29,3152,31,"frameworks"],[3136,39,3152,41],[3136,40,3152,42,"includes"],[3136,48,3152,50],[3136,49,3152,51,"framework"],[3136,58,3152,60],[3136,59,3152,61],[3136,61,3152,63],[3137,8,3153,12],[3138,6,3154,8],[3139,6,3155,8],[3139,10,3155,12],[3139,11,3155,13,"frameworks"],[3139,21,3155,23],[3139,22,3155,24,"push"],[3139,26,3155,28],[3139,27,3155,29,"framework"],[3139,36,3155,38],[3139,37,3155,39],[3140,6,3156,8],[3141,6,3157,8],[3142,6,3158,8],[3142,10,3158,12],[3142,11,3158,13,"frameworks"],[3142,21,3158,23],[3142,22,3158,24,"sort"],[3142,26,3158,28],[3142,27,3158,29],[3142,28,3158,30],[3143,6,3159,8],[3143,10,3159,12],[3143,11,3159,13,"clientVersion"],[3143,24,3159,26],[3143,27,3159,29,"_getClientVersion"],[3143,44,3159,46],[3143,45,3159,47],[3143,49,3159,51],[3143,50,3159,52,"config"],[3143,56,3159,58],[3143,57,3159,59,"clientPlatform"],[3143,71,3159,73],[3143,73,3159,75],[3143,77,3159,79],[3143,78,3159,80,"_getFrameworks"],[3143,92,3159,94],[3143,93,3159,95],[3143,94,3159,96],[3143,95,3159,97],[3144,4,3160,4],[3145,4,3161,4,"_getFrameworks"],[3145,18,3161,18,"_getFrameworks"],[3145,19,3161,18],[3145,21,3161,21],[3146,6,3162,8],[3146,13,3162,15],[3146,17,3162,19],[3146,18,3162,20,"frameworks"],[3146,28,3162,30],[3147,4,3163,4],[3148,4,3164,4],[3148,10,3164,10,"_getAdditionalHeaders"],[3148,31,3164,31,"_getAdditionalHeaders"],[3148,32,3164,31],[3148,34,3164,34],[3149,6,3165,8],[3150,6,3166,8],[3150,12,3166,14,"headers"],[3150,19,3166,21],[3150,22,3166,24],[3151,8,3167,12],[3151,9,3167,13],[3151,27,3167,31],[3151,28,3167,32],[3151,64,3167,68],[3151,68,3167,72],[3151,69,3167,73,"clientVersion"],[3152,6,3168,8],[3152,7,3168,9],[3153,6,3169,8],[3153,10,3169,12],[3153,14,3169,16],[3153,15,3169,17,"app"],[3153,18,3169,20],[3153,19,3169,21,"options"],[3153,26,3169,28],[3153,27,3169,29,"appId"],[3153,32,3169,34],[3153,34,3169,36],[3154,8,3170,12,"headers"],[3154,15,3170,19],[3154,16,3170,20],[3154,34,3170,38],[3154,35,3170,39],[3154,69,3170,73],[3154,72,3170,76],[3154,76,3170,80],[3154,77,3170,81,"app"],[3154,80,3170,84],[3154,81,3170,85,"options"],[3154,88,3170,92],[3154,89,3170,93,"appId"],[3154,94,3170,98],[3155,6,3171,8],[3156,6,3172,8],[3157,6,3173,8],[3157,12,3173,14,"heartbeatsHeader"],[3157,28,3173,30],[3157,31,3173,33],[3157,37,3173,39],[3157,41,3173,43],[3157,42,3173,44,"heartbeatServiceProvider"],[3157,66,3173,68],[3157,67,3174,13,"getImmediate"],[3157,79,3174,25],[3157,80,3174,26],[3158,8,3175,12,"optional"],[3158,16,3175,20],[3158,18,3175,22],[3159,6,3176,8],[3159,7,3176,9],[3159,8,3176,10],[3159,10,3177,14,"getHeartbeatsHeader"],[3159,29,3177,33],[3159,30,3177,34],[3159,31,3177,35],[3160,6,3178,8],[3160,10,3178,12,"heartbeatsHeader"],[3160,26,3178,28],[3160,28,3178,30],[3161,8,3179,12,"headers"],[3161,15,3179,19],[3161,16,3179,20],[3161,35,3179,39],[3161,36,3179,40],[3161,71,3179,75],[3161,74,3179,78,"heartbeatsHeader"],[3161,90,3179,94],[3162,6,3180,8],[3163,6,3181,8],[3164,6,3182,8],[3164,12,3182,14,"appCheckToken"],[3164,25,3182,27],[3164,28,3182,30],[3164,34,3182,36],[3164,38,3182,40],[3164,39,3182,41,"_getAppCheckToken"],[3164,56,3182,58],[3164,57,3182,59],[3164,58,3182,60],[3165,6,3183,8],[3165,10,3183,12,"appCheckToken"],[3165,23,3183,25],[3165,25,3183,27],[3166,8,3184,12,"headers"],[3166,15,3184,19],[3166,16,3184,20],[3166,37,3184,41],[3166,38,3184,42],[3166,76,3184,80],[3166,79,3184,83,"appCheckToken"],[3166,92,3184,96],[3167,6,3185,8],[3168,6,3186,8],[3168,13,3186,15,"headers"],[3168,20,3186,22],[3169,4,3187,4],[3170,4,3188,4],[3170,10,3188,10,"_getAppCheckToken"],[3170,27,3188,27,"_getAppCheckToken"],[3170,28,3188,27],[3170,30,3188,30],[3171,6,3189,8],[3171,10,3189,12],[3171,14,3189,12,"_isFirebaseServerApp"],[3171,39,3189,32],[3171,41,3189,33],[3171,45,3189,37],[3171,46,3189,38,"app"],[3171,49,3189,41],[3171,50,3189,42],[3171,54,3189,46],[3171,58,3189,50],[3171,59,3189,51,"app"],[3171,62,3189,54],[3171,63,3189,55,"settings"],[3171,71,3189,63],[3171,72,3189,64,"appCheckToken"],[3171,85,3189,77],[3171,87,3189,79],[3172,8,3190,12],[3172,15,3190,19],[3172,19,3190,23],[3172,20,3190,24,"app"],[3172,23,3190,27],[3172,24,3190,28,"settings"],[3172,32,3190,36],[3172,33,3190,37,"appCheckToken"],[3172,46,3190,50],[3173,6,3191,8],[3174,6,3192,8],[3174,12,3192,14,"appCheckTokenResult"],[3174,31,3192,33],[3174,34,3192,36],[3174,40,3192,42],[3174,44,3192,46],[3174,45,3192,47,"appCheckServiceProvider"],[3174,68,3192,70],[3174,69,3193,13,"getImmediate"],[3174,81,3193,25],[3174,82,3193,26],[3175,8,3193,28,"optional"],[3175,16,3193,36],[3175,18,3193,38],[3176,6,3193,43],[3176,7,3193,44],[3176,8,3193,45],[3176,10,3194,14,"getToken"],[3176,18,3194,22],[3176,19,3194,23],[3176,20,3194,24],[3177,6,3195,8],[3177,10,3195,12,"appCheckTokenResult"],[3177,29,3195,31],[3177,31,3195,33,"error"],[3177,36,3195,38],[3177,38,3195,40],[3178,8,3196,12],[3179,8,3197,12],[3180,8,3198,12],[3181,8,3199,12],[3182,8,3200,12,"_logWarn"],[3182,16,3200,20],[3182,17,3200,21],[3182,60,3200,64,"appCheckTokenResult"],[3182,79,3200,83],[3182,80,3200,84,"error"],[3182,85,3200,89],[3182,87,3200,91],[3182,88,3200,92],[3183,6,3201,8],[3184,6,3202,8],[3184,13,3202,15,"appCheckTokenResult"],[3184,32,3202,34],[3184,34,3202,36,"token"],[3184,39,3202,41],[3185,4,3203,4],[3186,2,3204,0],[3187,2,3205,0],[3188,0,3206,0],[3189,0,3207,0],[3190,0,3208,0],[3191,0,3209,0],[3192,0,3210,0],[3193,2,3205,0,"exports"],[3193,9,3205,0],[3193,10,3205,0,"aM"],[3193,12,3205,0],[3193,15,3205,0,"AuthImpl"],[3193,23,3205,0],[3194,2,3211,0],[3194,11,3211,9,"_castAuth"],[3194,20,3211,18,"_castAuth"],[3194,21,3211,19,"auth"],[3194,25,3211,23],[3194,27,3211,25],[3195,4,3212,4],[3195,11,3212,11],[3195,15,3212,11,"getModularInstance"],[3195,39,3212,29],[3195,41,3212,30,"auth"],[3195,45,3212,34],[3195,46,3212,35],[3196,2,3213,0],[3197,2,3214,0],[3198,2,3215,0],[3198,8,3215,6,"Subscription"],[3198,20,3215,18],[3198,21,3215,19],[3199,4,3216,4,"constructor"],[3199,15,3216,15,"constructor"],[3199,16,3216,16,"auth"],[3199,20,3216,20],[3199,22,3216,22],[3200,6,3217,8],[3200,10,3217,12],[3200,11,3217,13,"auth"],[3200,15,3217,17],[3200,18,3217,20,"auth"],[3200,22,3217,24],[3201,6,3218,8],[3201,10,3218,12],[3201,11,3218,13,"observer"],[3201,19,3218,21],[3201,22,3218,24],[3201,26,3218,28],[3202,6,3219,8],[3202,10,3219,12],[3202,11,3219,13,"addObserver"],[3202,22,3219,24],[3202,25,3219,27],[3202,29,3219,27,"createSubscribe"],[3202,50,3219,42],[3202,52,3219,43,"observer"],[3202,60,3219,51],[3202,64,3219,56],[3202,68,3219,60],[3202,69,3219,61,"observer"],[3202,77,3219,69],[3202,80,3219,72,"observer"],[3202,88,3219,81],[3202,89,3219,82],[3203,4,3220,4],[3204,4,3221,4],[3204,8,3221,8,"next"],[3204,12,3221,12,"next"],[3204,13,3221,12],[3204,15,3221,15],[3205,6,3222,8,"_assert"],[3205,13,3222,15],[3205,14,3222,16],[3205,18,3222,20],[3205,19,3222,21,"observer"],[3205,27,3222,29],[3205,29,3222,31],[3205,33,3222,35],[3205,34,3222,36,"auth"],[3205,38,3222,40],[3205,40,3222,42],[3205,56,3222,58],[3205,57,3222,59],[3205,91,3222,93],[3205,92,3222,94],[3206,6,3223,8],[3206,13,3223,15],[3206,17,3223,19],[3206,18,3223,20,"observer"],[3206,26,3223,28],[3206,27,3223,29,"next"],[3206,31,3223,33],[3206,32,3223,34,"bind"],[3206,36,3223,38],[3206,37,3223,39],[3206,41,3223,43],[3206,42,3223,44,"observer"],[3206,50,3223,52],[3206,51,3223,53],[3207,4,3224,4],[3208,2,3225,0],[3210,2,3227,0],[3211,0,3228,0],[3212,0,3229,0],[3213,0,3230,0],[3214,0,3231,0],[3215,0,3232,0],[3216,0,3233,0],[3217,0,3234,0],[3218,0,3235,0],[3219,0,3236,0],[3220,0,3237,0],[3221,0,3238,0],[3222,0,3239,0],[3223,0,3240,0],[3224,0,3241,0],[3225,0,3242,0],[3226,2,3243,0],[3226,6,3243,4,"externalJSProvider"],[3226,24,3243,22],[3226,27,3243,25],[3227,4,3244,4],[3227,10,3244,10,"loadJS"],[3227,16,3244,16,"loadJS"],[3227,17,3244,16],[3227,19,3244,19],[3228,6,3245,8],[3228,12,3245,14],[3228,16,3245,18,"Error"],[3228,21,3245,23],[3228,22,3245,24],[3228,55,3245,57],[3228,56,3245,58],[3229,4,3246,4],[3229,5,3246,5],[3230,4,3247,4,"recaptchaV2Script"],[3230,21,3247,21],[3230,23,3247,23],[3230,25,3247,25],[3231,4,3248,4,"recaptchaEnterpriseScript"],[3231,29,3248,29],[3231,31,3248,31],[3231,33,3248,33],[3232,4,3249,4,"gapiScript"],[3232,14,3249,14],[3232,16,3249,16],[3233,2,3250,0],[3233,3,3250,1],[3234,2,3251,0],[3234,11,3251,9,"_setExternalJSProvider"],[3234,33,3251,31,"_setExternalJSProvider"],[3234,34,3251,32,"p"],[3234,35,3251,33],[3234,37,3251,35],[3235,4,3252,4,"externalJSProvider"],[3235,22,3252,22],[3235,25,3252,25,"p"],[3235,26,3252,26],[3236,2,3253,0],[3237,2,3254,0],[3237,11,3254,9,"_loadJS"],[3237,18,3254,16,"_loadJS"],[3237,19,3254,17,"url"],[3237,22,3254,20],[3237,24,3254,22],[3238,4,3255,4],[3238,11,3255,11,"externalJSProvider"],[3238,29,3255,29],[3238,30,3255,30,"loadJS"],[3238,36,3255,36],[3238,37,3255,37,"url"],[3238,40,3255,40],[3238,41,3255,41],[3239,2,3256,0],[3240,2,3257,0],[3240,11,3257,9,"_recaptchaV2ScriptUrl"],[3240,32,3257,30,"_recaptchaV2ScriptUrl"],[3240,33,3257,30],[3240,35,3257,33],[3241,4,3258,4],[3241,11,3258,11,"externalJSProvider"],[3241,29,3258,29],[3241,30,3258,30,"recaptchaV2Script"],[3241,47,3258,47],[3242,2,3259,0],[3243,2,3260,0],[3243,11,3260,9,"_recaptchaEnterpriseScriptUrl"],[3243,40,3260,38,"_recaptchaEnterpriseScriptUrl"],[3243,41,3260,38],[3243,43,3260,41],[3244,4,3261,4],[3244,11,3261,11,"externalJSProvider"],[3244,29,3261,29],[3244,30,3261,30,"recaptchaEnterpriseScript"],[3244,55,3261,55],[3245,2,3262,0],[3246,2,3263,0],[3246,11,3263,9,"_gapiScriptUrl"],[3246,25,3263,23,"_gapiScriptUrl"],[3246,26,3263,23],[3246,28,3263,26],[3247,4,3264,4],[3247,11,3264,11,"externalJSProvider"],[3247,29,3264,29],[3247,30,3264,30,"gapiScript"],[3247,40,3264,40],[3248,2,3265,0],[3249,2,3266,0],[3249,11,3266,9,"_generateCallbackName"],[3249,32,3266,30,"_generateCallbackName"],[3249,33,3266,31,"prefix"],[3249,39,3266,37],[3249,41,3266,39],[3250,4,3267,4],[3250,11,3267,11],[3250,16,3267,16,"prefix"],[3250,22,3267,22],[3250,25,3267,25,"Math"],[3250,29,3267,29],[3250,30,3267,30,"floor"],[3250,35,3267,35],[3250,36,3267,36,"Math"],[3250,40,3267,40],[3250,41,3267,41,"random"],[3250,47,3267,47],[3250,48,3267,48],[3250,49,3267,49],[3250,52,3267,52],[3250,59,3267,59],[3250,60,3267,60],[3250,62,3267,62],[3251,2,3268,0],[3253,2,3270,0],[3254,0,3271,0],[3255,0,3272,0],[3256,0,3273,0],[3257,0,3274,0],[3258,0,3275,0],[3259,0,3276,0],[3260,0,3277,0],[3261,0,3278,0],[3262,0,3279,0],[3263,0,3280,0],[3264,0,3281,0],[3265,0,3282,0],[3266,0,3283,0],[3267,0,3284,0],[3268,0,3285,0],[3269,2,3286,0],[3269,8,3286,6,"_SOLVE_TIME_MS"],[3269,22,3286,20],[3269,25,3286,23],[3269,28,3286,26],[3270,2,3287,0],[3270,8,3287,6,"_EXPIRATION_TIME_MS"],[3270,27,3287,25],[3270,30,3287,28],[3270,35,3287,33],[3271,2,3288,0],[3271,8,3288,6,"_WIDGET_ID_START"],[3271,24,3288,22],[3271,27,3288,25],[3271,40,3288,38],[3272,2,3289,0],[3272,8,3289,6,"MockReCaptcha"],[3272,21,3289,19],[3272,22,3289,20],[3273,4,3290,4,"constructor"],[3273,15,3290,15,"constructor"],[3273,16,3290,16,"auth"],[3273,20,3290,20],[3273,22,3290,22],[3274,6,3291,8],[3274,10,3291,12],[3274,11,3291,13,"auth"],[3274,15,3291,17],[3274,18,3291,20,"auth"],[3274,22,3291,24],[3275,6,3292,8],[3275,10,3292,12],[3275,11,3292,13,"counter"],[3275,18,3292,20],[3275,21,3292,23,"_WIDGET_ID_START"],[3275,37,3292,39],[3276,6,3293,8],[3276,10,3293,12],[3276,11,3293,13,"_widgets"],[3276,19,3293,21],[3276,22,3293,24],[3276,26,3293,28,"Map"],[3276,29,3293,31],[3276,30,3293,32],[3276,31,3293,33],[3277,4,3294,4],[3278,4,3295,4,"render"],[3278,10,3295,10,"render"],[3278,11,3295,11,"container"],[3278,20,3295,20],[3278,22,3295,22,"parameters"],[3278,32,3295,32],[3278,34,3295,34],[3279,6,3296,8],[3279,12,3296,14,"id"],[3279,14,3296,16],[3279,17,3296,19],[3279,21,3296,23],[3279,22,3296,24,"counter"],[3279,29,3296,31],[3280,6,3297,8],[3280,10,3297,12],[3280,11,3297,13,"_widgets"],[3280,19,3297,21],[3280,20,3297,22,"set"],[3280,23,3297,25],[3280,24,3297,26,"id"],[3280,26,3297,28],[3280,28,3297,30],[3280,32,3297,34,"MockWidget"],[3280,42,3297,44],[3280,43,3297,45,"container"],[3280,52,3297,54],[3280,54,3297,56],[3280,58,3297,60],[3280,59,3297,61,"auth"],[3280,63,3297,65],[3280,64,3297,66,"name"],[3280,68,3297,70],[3280,70,3297,72,"parameters"],[3280,80,3297,82],[3280,84,3297,86],[3280,85,3297,87],[3280,86,3297,88],[3280,87,3297,89],[3280,88,3297,90],[3281,6,3298,8],[3281,10,3298,12],[3281,11,3298,13,"counter"],[3281,18,3298,20],[3281,20,3298,22],[3282,6,3299,8],[3282,13,3299,15,"id"],[3282,15,3299,17],[3283,4,3300,4],[3284,4,3301,4,"reset"],[3284,9,3301,9,"reset"],[3284,10,3301,10,"optWidgetId"],[3284,21,3301,21],[3284,23,3301,23],[3285,6,3302,8],[3285,12,3302,14,"id"],[3285,14,3302,16],[3285,17,3302,19,"optWidgetId"],[3285,28,3302,30],[3285,32,3302,34,"_WIDGET_ID_START"],[3285,48,3302,50],[3286,6,3303,8],[3286,11,3303,13],[3286,15,3303,17],[3286,16,3303,18,"_widgets"],[3286,24,3303,26],[3286,25,3303,27,"get"],[3286,28,3303,30],[3286,29,3303,31,"id"],[3286,31,3303,33],[3286,32,3303,34],[3286,34,3303,36,"delete"],[3286,40,3303,42],[3286,41,3303,43],[3286,42,3303,44],[3287,6,3304,8],[3287,10,3304,12],[3287,11,3304,13,"_widgets"],[3287,19,3304,21],[3287,20,3304,22,"delete"],[3287,26,3304,28],[3287,27,3304,29,"id"],[3287,29,3304,31],[3287,30,3304,32],[3288,4,3305,4],[3289,4,3306,4,"getResponse"],[3289,15,3306,15,"getResponse"],[3289,16,3306,16,"optWidgetId"],[3289,27,3306,27],[3289,29,3306,29],[3290,6,3307,8],[3290,12,3307,14,"id"],[3290,14,3307,16],[3290,17,3307,19,"optWidgetId"],[3290,28,3307,30],[3290,32,3307,34,"_WIDGET_ID_START"],[3290,48,3307,50],[3291,6,3308,8],[3291,13,3308,15],[3291,17,3308,19],[3291,18,3308,20,"_widgets"],[3291,26,3308,28],[3291,27,3308,29,"get"],[3291,30,3308,32],[3291,31,3308,33,"id"],[3291,33,3308,35],[3291,34,3308,36],[3291,36,3308,38,"getResponse"],[3291,47,3308,49],[3291,48,3308,50],[3291,49,3308,51],[3291,53,3308,55],[3291,55,3308,57],[3292,4,3309,4],[3293,4,3310,4],[3293,10,3310,10,"execute"],[3293,17,3310,17,"execute"],[3293,18,3310,18,"optWidgetId"],[3293,29,3310,29],[3293,31,3310,31],[3294,6,3311,8],[3294,12,3311,14,"id"],[3294,14,3311,16],[3294,17,3311,19,"optWidgetId"],[3294,28,3311,30],[3294,32,3311,34,"_WIDGET_ID_START"],[3294,48,3311,50],[3295,6,3312,8],[3295,11,3312,13],[3295,15,3312,17],[3295,16,3312,18,"_widgets"],[3295,24,3312,26],[3295,25,3312,27,"get"],[3295,28,3312,30],[3295,29,3312,31,"id"],[3295,31,3312,33],[3295,32,3312,34],[3295,34,3312,36,"execute"],[3295,41,3312,43],[3295,42,3312,44],[3295,43,3312,45],[3296,6,3313,8],[3296,13,3313,15],[3296,15,3313,17],[3297,4,3314,4],[3298,2,3315,0],[3299,2,3316,0],[3299,8,3316,6,"MockGreCAPTCHATopLevel"],[3299,30,3316,28],[3299,31,3316,29],[3300,4,3317,4,"constructor"],[3300,15,3317,15,"constructor"],[3300,16,3317,15],[3300,18,3317,18],[3301,6,3318,8],[3301,10,3318,12],[3301,11,3318,13,"enterprise"],[3301,21,3318,23],[3301,24,3318,26],[3301,28,3318,30,"MockGreCAPTCHA"],[3301,42,3318,44],[3301,43,3318,45],[3301,44,3318,46],[3302,4,3319,4],[3303,4,3320,4,"ready"],[3303,9,3320,9,"ready"],[3303,10,3320,10,"callback"],[3303,18,3320,18],[3303,20,3320,20],[3304,6,3321,8,"callback"],[3304,14,3321,16],[3304,15,3321,17],[3304,16,3321,18],[3305,4,3322,4],[3306,4,3323,4,"execute"],[3306,11,3323,11,"execute"],[3307,4,3324,4],[3308,4,3325,4,"_siteKey"],[3308,12,3325,12],[3308,14,3325,14,"_options"],[3308,22,3325,22],[3308,24,3325,24],[3309,6,3326,8],[3309,13,3326,15,"Promise"],[3309,20,3326,22],[3309,21,3326,23,"resolve"],[3309,28,3326,30],[3309,29,3326,31],[3309,36,3326,38],[3309,37,3326,39],[3310,4,3327,4],[3311,4,3328,4,"render"],[3311,10,3328,10,"render"],[3312,4,3329,4],[3313,4,3330,4,"_container"],[3313,14,3330,14],[3313,16,3330,16,"_parameters"],[3313,27,3330,27],[3313,29,3330,29],[3314,6,3331,8],[3314,13,3331,15],[3314,15,3331,17],[3315,4,3332,4],[3316,2,3333,0],[3317,2,3334,0],[3317,8,3334,6,"MockGreCAPTCHA"],[3317,22,3334,20],[3317,23,3334,21],[3318,4,3335,4,"ready"],[3318,9,3335,9,"ready"],[3318,10,3335,10,"callback"],[3318,18,3335,18],[3318,20,3335,20],[3319,6,3336,8,"callback"],[3319,14,3336,16],[3319,15,3336,17],[3319,16,3336,18],[3320,4,3337,4],[3321,4,3338,4,"execute"],[3321,11,3338,11,"execute"],[3322,4,3339,4],[3323,4,3340,4,"_siteKey"],[3323,12,3340,12],[3323,14,3340,14,"_options"],[3323,22,3340,22],[3323,24,3340,24],[3324,6,3341,8],[3324,13,3341,15,"Promise"],[3324,20,3341,22],[3324,21,3341,23,"resolve"],[3324,28,3341,30],[3324,29,3341,31],[3324,36,3341,38],[3324,37,3341,39],[3325,4,3342,4],[3326,4,3343,4,"render"],[3326,10,3343,10,"render"],[3327,4,3344,4],[3328,4,3345,4,"_container"],[3328,14,3345,14],[3328,16,3345,16,"_parameters"],[3328,27,3345,27],[3328,29,3345,29],[3329,6,3346,8],[3329,13,3346,15],[3329,15,3346,17],[3330,4,3347,4],[3331,2,3348,0],[3332,2,3349,0],[3332,8,3349,6,"MockWidget"],[3332,18,3349,16],[3332,19,3349,17],[3333,4,3350,4,"constructor"],[3333,15,3350,15,"constructor"],[3333,16,3350,16,"containerOrId"],[3333,29,3350,29],[3333,31,3350,31,"appName"],[3333,38,3350,38],[3333,40,3350,40,"params"],[3333,46,3350,46],[3333,48,3350,48],[3334,6,3351,8],[3334,10,3351,12],[3334,11,3351,13,"params"],[3334,17,3351,19],[3334,20,3351,22,"params"],[3334,26,3351,28],[3335,6,3352,8],[3335,10,3352,12],[3335,11,3352,13,"timerId"],[3335,18,3352,20],[3335,21,3352,23],[3335,25,3352,27],[3336,6,3353,8],[3336,10,3353,12],[3336,11,3353,13,"deleted"],[3336,18,3353,20],[3336,21,3353,23],[3336,26,3353,28],[3337,6,3354,8],[3337,10,3354,12],[3337,11,3354,13,"responseToken"],[3337,24,3354,26],[3337,27,3354,29],[3337,31,3354,33],[3338,6,3355,8],[3338,10,3355,12],[3338,11,3355,13,"clickHandler"],[3338,23,3355,25],[3338,26,3355,28],[3338,32,3355,34],[3339,8,3356,12],[3339,12,3356,16],[3339,13,3356,17,"execute"],[3339,20,3356,24],[3339,21,3356,25],[3339,22,3356,26],[3340,6,3357,8],[3340,7,3357,9],[3341,6,3358,8],[3341,12,3358,14,"container"],[3341,21,3358,23],[3341,24,3358,26],[3341,31,3358,33,"containerOrId"],[3341,44,3358,46],[3341,49,3358,51],[3341,57,3358,59],[3341,60,3359,14,"document"],[3341,68,3359,22],[3341,69,3359,23,"getElementById"],[3341,83,3359,37],[3341,84,3359,38,"containerOrId"],[3341,97,3359,51],[3341,98,3359,52],[3341,101,3360,14,"containerOrId"],[3341,114,3360,27],[3342,6,3361,8,"_assert"],[3342,13,3361,15],[3342,14,3361,16,"container"],[3342,23,3361,25],[3342,25,3361,27],[3342,41,3361,43],[3342,42,3361,44],[3342,78,3361,80],[3343,8,3361,82,"appName"],[3344,6,3361,90],[3344,7,3361,91],[3344,8,3361,92],[3345,6,3362,8],[3345,10,3362,12],[3345,11,3362,13,"container"],[3345,20,3362,22],[3345,23,3362,25,"container"],[3345,32,3362,34],[3346,6,3363,8],[3346,10,3363,12],[3346,11,3363,13,"isVisible"],[3346,20,3363,22],[3346,23,3363,25],[3346,27,3363,29],[3346,28,3363,30,"params"],[3346,34,3363,36],[3346,35,3363,37,"size"],[3346,39,3363,41],[3346,44,3363,46],[3346,55,3363,57],[3347,6,3364,8],[3347,10,3364,12],[3347,14,3364,16],[3347,15,3364,17,"isVisible"],[3347,24,3364,26],[3347,26,3364,28],[3348,8,3365,12],[3348,12,3365,16],[3348,13,3365,17,"execute"],[3348,20,3365,24],[3348,21,3365,25],[3348,22,3365,26],[3349,6,3366,8],[3349,7,3366,9],[3349,13,3367,13],[3350,8,3368,12],[3350,12,3368,16],[3350,13,3368,17,"container"],[3350,22,3368,26],[3350,23,3368,27,"addEventListener"],[3350,39,3368,43],[3350,40,3368,44],[3350,47,3368,51],[3350,49,3368,53],[3350,53,3368,57],[3350,54,3368,58,"clickHandler"],[3350,66,3368,70],[3350,67,3368,71],[3351,6,3369,8],[3352,4,3370,4],[3353,4,3371,4,"getResponse"],[3353,15,3371,15,"getResponse"],[3353,16,3371,15],[3353,18,3371,18],[3354,6,3372,8],[3354,10,3372,12],[3354,11,3372,13,"checkIfDeleted"],[3354,25,3372,27],[3354,26,3372,28],[3354,27,3372,29],[3355,6,3373,8],[3355,13,3373,15],[3355,17,3373,19],[3355,18,3373,20,"responseToken"],[3355,31,3373,33],[3356,4,3374,4],[3357,4,3375,4,"delete"],[3357,10,3375,10,"delete"],[3357,11,3375,10],[3357,13,3375,13],[3358,6,3376,8],[3358,10,3376,12],[3358,11,3376,13,"checkIfDeleted"],[3358,25,3376,27],[3358,26,3376,28],[3358,27,3376,29],[3359,6,3377,8],[3359,10,3377,12],[3359,11,3377,13,"deleted"],[3359,18,3377,20],[3359,21,3377,23],[3359,25,3377,27],[3360,6,3378,8],[3360,10,3378,12],[3360,14,3378,16],[3360,15,3378,17,"timerId"],[3360,22,3378,24],[3360,24,3378,26],[3361,8,3379,12,"clearTimeout"],[3361,20,3379,24],[3361,21,3379,25],[3361,25,3379,29],[3361,26,3379,30,"timerId"],[3361,33,3379,37],[3361,34,3379,38],[3362,8,3380,12],[3362,12,3380,16],[3362,13,3380,17,"timerId"],[3362,20,3380,24],[3362,23,3380,27],[3362,27,3380,31],[3363,6,3381,8],[3364,6,3382,8],[3364,10,3382,12],[3364,11,3382,13,"container"],[3364,20,3382,22],[3364,21,3382,23,"removeEventListener"],[3364,40,3382,42],[3364,41,3382,43],[3364,48,3382,50],[3364,50,3382,52],[3364,54,3382,56],[3364,55,3382,57,"clickHandler"],[3364,67,3382,69],[3364,68,3382,70],[3365,4,3383,4],[3366,4,3384,4,"execute"],[3366,11,3384,11,"execute"],[3366,12,3384,11],[3366,14,3384,14],[3367,6,3385,8],[3367,10,3385,12],[3367,11,3385,13,"checkIfDeleted"],[3367,25,3385,27],[3367,26,3385,28],[3367,27,3385,29],[3368,6,3386,8],[3368,10,3386,12],[3368,14,3386,16],[3368,15,3386,17,"timerId"],[3368,22,3386,24],[3368,24,3386,26],[3369,8,3387,12],[3370,6,3388,8],[3371,6,3389,8],[3371,10,3389,12],[3371,11,3389,13,"timerId"],[3371,18,3389,20],[3371,21,3389,23,"window"],[3371,27,3389,29],[3371,28,3389,30,"setTimeout"],[3371,38,3389,40],[3371,39,3389,41],[3371,45,3389,47],[3372,8,3390,12],[3372,12,3390,16],[3372,13,3390,17,"responseToken"],[3372,26,3390,30],[3372,29,3390,33,"generateRandomAlphaNumericString"],[3372,61,3390,65],[3372,62,3390,66],[3372,64,3390,68],[3372,65,3390,69],[3373,8,3391,12],[3373,14,3391,18],[3374,10,3391,20,"callback"],[3374,18,3391,28],[3375,10,3391,30],[3375,28,3391,48],[3375,30,3391,50,"expiredCallback"],[3376,8,3391,66],[3376,9,3391,67],[3376,12,3391,70],[3376,16,3391,74],[3376,17,3391,75,"params"],[3376,23,3391,81],[3377,8,3392,12],[3377,12,3392,16,"callback"],[3377,20,3392,24],[3377,22,3392,26],[3378,10,3393,16],[3378,14,3393,20],[3379,12,3394,20,"callback"],[3379,20,3394,28],[3379,21,3394,29],[3379,25,3394,33],[3379,26,3394,34,"responseToken"],[3379,39,3394,47],[3379,40,3394,48],[3380,10,3395,16],[3380,11,3395,17],[3380,12,3396,16],[3380,19,3396,23,"e"],[3380,20,3396,24],[3380,22,3396,26],[3380,23,3396,28],[3381,8,3397,12],[3382,8,3398,12],[3382,12,3398,16],[3382,13,3398,17,"timerId"],[3382,20,3398,24],[3382,23,3398,27,"window"],[3382,29,3398,33],[3382,30,3398,34,"setTimeout"],[3382,40,3398,44],[3382,41,3398,45],[3382,47,3398,51],[3383,10,3399,16],[3383,14,3399,20],[3383,15,3399,21,"timerId"],[3383,22,3399,28],[3383,25,3399,31],[3383,29,3399,35],[3384,10,3400,16],[3384,14,3400,20],[3384,15,3400,21,"responseToken"],[3384,28,3400,34],[3384,31,3400,37],[3384,35,3400,41],[3385,10,3401,16],[3385,14,3401,20,"expiredCallback"],[3385,29,3401,35],[3385,31,3401,37],[3386,12,3402,20],[3386,16,3402,24],[3387,14,3403,24,"expiredCallback"],[3387,29,3403,39],[3387,30,3403,40],[3387,31,3403,41],[3388,12,3404,20],[3388,13,3404,21],[3388,14,3405,20],[3388,21,3405,27,"e"],[3388,22,3405,28],[3388,24,3405,30],[3388,25,3405,32],[3389,10,3406,16],[3390,10,3407,16],[3390,14,3407,20],[3390,18,3407,24],[3390,19,3407,25,"isVisible"],[3390,28,3407,34],[3390,30,3407,36],[3391,12,3408,20],[3391,16,3408,24],[3391,17,3408,25,"execute"],[3391,24,3408,32],[3391,25,3408,33],[3391,26,3408,34],[3392,10,3409,16],[3393,8,3410,12],[3393,9,3410,13],[3393,11,3410,15,"_EXPIRATION_TIME_MS"],[3393,30,3410,34],[3393,31,3410,35],[3394,6,3411,8],[3394,7,3411,9],[3394,9,3411,11,"_SOLVE_TIME_MS"],[3394,23,3411,25],[3394,24,3411,26],[3395,4,3412,4],[3396,4,3413,4,"checkIfDeleted"],[3396,18,3413,18,"checkIfDeleted"],[3396,19,3413,18],[3396,21,3413,21],[3397,6,3414,8],[3397,10,3414,12],[3397,14,3414,16],[3397,15,3414,17,"deleted"],[3397,22,3414,24],[3397,24,3414,26],[3398,8,3415,12],[3398,14,3415,18],[3398,18,3415,22,"Error"],[3398,23,3415,27],[3398,24,3415,28],[3398,61,3415,65],[3398,62,3415,66],[3399,6,3416,8],[3400,4,3417,4],[3401,2,3418,0],[3402,2,3419,0],[3402,11,3419,9,"generateRandomAlphaNumericString"],[3402,43,3419,41,"generateRandomAlphaNumericString"],[3402,44,3419,42,"len"],[3402,47,3419,45],[3402,49,3419,47],[3403,4,3420,4],[3403,10,3420,10,"chars"],[3403,15,3420,15],[3403,18,3420,18],[3403,20,3420,20],[3404,4,3421,4],[3404,10,3421,10,"allowedChars"],[3404,22,3421,22],[3404,25,3421,25],[3404,89,3421,89],[3405,4,3422,4],[3405,9,3422,9],[3405,13,3422,13,"i"],[3405,14,3422,14],[3405,17,3422,17],[3405,18,3422,18],[3405,20,3422,20,"i"],[3405,21,3422,21],[3405,24,3422,24,"len"],[3405,27,3422,27],[3405,29,3422,29,"i"],[3405,30,3422,30],[3405,32,3422,32],[3405,34,3422,34],[3406,6,3423,8,"chars"],[3406,11,3423,13],[3406,12,3423,14,"push"],[3406,16,3423,18],[3406,17,3423,19,"allowedChars"],[3406,29,3423,31],[3406,30,3423,32,"charAt"],[3406,36,3423,38],[3406,37,3423,39,"Math"],[3406,41,3423,43],[3406,42,3423,44,"floor"],[3406,47,3423,49],[3406,48,3423,50,"Math"],[3406,52,3423,54],[3406,53,3423,55,"random"],[3406,59,3423,61],[3406,60,3423,62],[3406,61,3423,63],[3406,64,3423,66,"allowedChars"],[3406,76,3423,78],[3406,77,3423,79,"length"],[3406,83,3423,85],[3406,84,3423,86],[3406,85,3423,87],[3406,86,3423,88],[3407,4,3424,4],[3408,4,3425,4],[3408,11,3425,11,"chars"],[3408,16,3425,16],[3408,17,3425,17,"join"],[3408,21,3425,21],[3408,22,3425,22],[3408,24,3425,24],[3408,25,3425,25],[3409,2,3426,0],[3411,2,3428,0],[3412,2,3429,0],[3412,8,3429,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3412,42,3429,40],[3412,45,3429,43],[3412,67,3429,65],[3413,2,3430,0],[3413,8,3430,6,"FAKE_TOKEN"],[3413,18,3430,16],[3413,21,3430,19],[3413,35,3430,33],[3414,2,3431,0],[3414,8,3431,6,"RecaptchaEnterpriseVerifier"],[3414,35,3431,33],[3414,36,3431,34],[3415,4,3432,4],[3416,0,3433,0],[3417,0,3434,0],[3418,0,3435,0],[3419,0,3436,0],[3420,4,3437,4,"constructor"],[3420,15,3437,15,"constructor"],[3420,16,3437,16,"authExtern"],[3420,26,3437,26],[3420,28,3437,28],[3421,6,3438,8],[3422,0,3439,0],[3423,0,3440,0],[3424,6,3441,8],[3424,10,3441,12],[3424,11,3441,13,"type"],[3424,15,3441,17],[3424,18,3441,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3424,52,3441,54],[3425,6,3442,8],[3425,10,3442,12],[3425,11,3442,13,"auth"],[3425,15,3442,17],[3425,18,3442,20,"_castAuth"],[3425,27,3442,29],[3425,28,3442,30,"authExtern"],[3425,38,3442,40],[3425,39,3442,41],[3426,4,3443,4],[3427,4,3444,4],[3428,0,3445,0],[3429,0,3446,0],[3430,0,3447,0],[3431,0,3448,0],[3432,4,3449,4],[3432,10,3449,10,"verify"],[3432,16,3449,16,"verify"],[3432,17,3449,17,"action"],[3432,23,3449,23],[3432,26,3449,26],[3432,34,3449,34],[3432,36,3449,36,"forceRefresh"],[3432,48,3449,48],[3432,51,3449,51],[3432,56,3449,56],[3432,58,3449,58],[3433,6,3450,8],[3433,21,3450,23,"retrieveSiteKey"],[3433,36,3450,38,"retrieveSiteKey"],[3433,37,3450,39,"auth"],[3433,41,3450,43],[3433,43,3450,45],[3434,8,3451,12],[3434,12,3451,16],[3434,13,3451,17,"forceRefresh"],[3434,25,3451,29],[3434,27,3451,31],[3435,10,3452,16],[3435,14,3452,20,"auth"],[3435,18,3452,24],[3435,19,3452,25,"tenantId"],[3435,27,3452,33],[3435,31,3452,37],[3435,35,3452,41],[3435,39,3452,45,"auth"],[3435,43,3452,49],[3435,44,3452,50,"_agentRecaptchaConfig"],[3435,65,3452,71],[3435,69,3452,75],[3435,73,3452,79],[3435,75,3452,81],[3436,12,3453,20],[3436,19,3453,27,"auth"],[3436,23,3453,31],[3436,24,3453,32,"_agentRecaptchaConfig"],[3436,45,3453,53],[3436,46,3453,54,"siteKey"],[3436,53,3453,61],[3437,10,3454,16],[3438,10,3455,16],[3438,14,3455,20,"auth"],[3438,18,3455,24],[3438,19,3455,25,"tenantId"],[3438,27,3455,33],[3438,31,3455,37],[3438,35,3455,41],[3438,39,3456,20,"auth"],[3438,43,3456,24],[3438,44,3456,25,"_tenantRecaptchaConfigs"],[3438,67,3456,48],[3438,68,3456,49,"auth"],[3438,72,3456,53],[3438,73,3456,54,"tenantId"],[3438,81,3456,62],[3438,82,3456,63],[3438,87,3456,68,"undefined"],[3438,96,3456,77],[3438,98,3456,79],[3439,12,3457,20],[3439,19,3457,27,"auth"],[3439,23,3457,31],[3439,24,3457,32,"_tenantRecaptchaConfigs"],[3439,47,3457,55],[3439,48,3457,56,"auth"],[3439,52,3457,60],[3439,53,3457,61,"tenantId"],[3439,61,3457,69],[3439,62,3457,70],[3439,63,3457,71,"siteKey"],[3439,70,3457,78],[3440,10,3458,16],[3441,8,3459,12],[3442,8,3460,12],[3442,15,3460,19],[3442,19,3460,23,"Promise"],[3442,26,3460,30],[3442,27,3460,31],[3442,34,3460,38,"resolve"],[3442,41,3460,45],[3442,43,3460,47,"reject"],[3442,49,3460,53],[3442,54,3460,58],[3443,10,3461,16,"getRecaptchaConfig"],[3443,28,3461,34],[3443,29,3461,35,"auth"],[3443,33,3461,39],[3443,35,3461,41],[3444,12,3462,20,"clientType"],[3444,22,3462,30],[3444,24,3462,32],[3444,41,3462,49],[3444,42,3462,50],[3445,12,3463,20,"version"],[3445,19,3463,27],[3445,21,3463,29],[3445,43,3463,51],[3445,44,3463,52],[3446,10,3464,16],[3446,11,3464,17],[3446,12,3464,18],[3446,13,3465,21,"then"],[3446,17,3465,25],[3446,18,3465,26,"response"],[3446,26,3465,34],[3446,30,3465,38],[3447,12,3466,20],[3447,16,3466,24,"response"],[3447,24,3466,32],[3447,25,3466,33,"recaptchaKey"],[3447,37,3466,45],[3447,42,3466,50,"undefined"],[3447,51,3466,59],[3447,53,3466,61],[3448,14,3467,24,"reject"],[3448,20,3467,30],[3448,21,3467,31],[3448,25,3467,35,"Error"],[3448,30,3467,40],[3448,31,3467,41],[3448,72,3467,82],[3448,73,3467,83],[3448,74,3467,84],[3449,12,3468,20],[3449,13,3468,21],[3449,19,3469,25],[3450,14,3470,24],[3450,20,3470,30,"config"],[3450,26,3470,36],[3450,29,3470,39],[3450,33,3470,43,"RecaptchaConfig"],[3450,48,3470,58],[3450,49,3470,59,"response"],[3450,57,3470,67],[3450,58,3470,68],[3451,14,3471,24],[3451,18,3471,28,"auth"],[3451,22,3471,32],[3451,23,3471,33,"tenantId"],[3451,31,3471,41],[3451,35,3471,45],[3451,39,3471,49],[3451,41,3471,51],[3452,16,3472,28,"auth"],[3452,20,3472,32],[3452,21,3472,33,"_agentRecaptchaConfig"],[3452,42,3472,54],[3452,45,3472,57,"config"],[3452,51,3472,63],[3453,14,3473,24],[3453,15,3473,25],[3453,21,3474,29],[3454,16,3475,28,"auth"],[3454,20,3475,32],[3454,21,3475,33,"_tenantRecaptchaConfigs"],[3454,44,3475,56],[3454,45,3475,57,"auth"],[3454,49,3475,61],[3454,50,3475,62,"tenantId"],[3454,58,3475,70],[3454,59,3475,71],[3454,62,3475,74,"config"],[3454,68,3475,80],[3455,14,3476,24],[3456,14,3477,24],[3456,21,3477,31,"resolve"],[3456,28,3477,38],[3456,29,3477,39,"config"],[3456,35,3477,45],[3456,36,3477,46,"siteKey"],[3456,43,3477,53],[3456,44,3477,54],[3457,12,3478,20],[3458,10,3479,16],[3458,11,3479,17],[3458,12,3479,18],[3458,13,3480,21,"catch"],[3458,18,3480,26],[3458,19,3480,27,"error"],[3458,24,3480,32],[3458,28,3480,36],[3459,12,3481,20,"reject"],[3459,18,3481,26],[3459,19,3481,27,"error"],[3459,24,3481,32],[3459,25,3481,33],[3460,10,3482,16],[3460,11,3482,17],[3460,12,3482,18],[3461,8,3483,12],[3461,9,3483,13],[3461,10,3483,14],[3462,6,3484,8],[3463,6,3485,8],[3463,15,3485,17,"retrieveRecaptchaToken"],[3463,37,3485,39,"retrieveRecaptchaToken"],[3463,38,3485,40,"siteKey"],[3463,45,3485,47],[3463,47,3485,49,"resolve"],[3463,54,3485,56],[3463,56,3485,58,"reject"],[3463,62,3485,64],[3463,64,3485,66],[3464,8,3486,12],[3464,14,3486,18,"grecaptcha"],[3464,24,3486,28],[3464,27,3486,31,"window"],[3464,33,3486,37],[3464,34,3486,38,"grecaptcha"],[3464,44,3486,48],[3465,8,3487,12],[3465,12,3487,16,"isEnterprise"],[3465,24,3487,28],[3465,25,3487,29,"grecaptcha"],[3465,35,3487,39],[3465,36,3487,40],[3465,38,3487,42],[3466,10,3488,16,"grecaptcha"],[3466,20,3488,26],[3466,21,3488,27,"enterprise"],[3466,31,3488,37],[3466,32,3488,38,"ready"],[3466,37,3488,43],[3466,38,3488,44],[3466,44,3488,50],[3467,12,3489,20,"grecaptcha"],[3467,22,3489,30],[3467,23,3489,31,"enterprise"],[3467,33,3489,41],[3467,34,3490,25,"execute"],[3467,41,3490,32],[3467,42,3490,33,"siteKey"],[3467,49,3490,40],[3467,51,3490,42],[3468,14,3490,44,"action"],[3469,12,3490,51],[3469,13,3490,52],[3469,14,3490,53],[3469,15,3491,25,"then"],[3469,19,3491,29],[3469,20,3491,30,"token"],[3469,25,3491,35],[3469,29,3491,39],[3470,14,3492,24,"resolve"],[3470,21,3492,31],[3470,22,3492,32,"token"],[3470,27,3492,37],[3470,28,3492,38],[3471,12,3493,20],[3471,13,3493,21],[3471,14,3493,22],[3471,15,3494,25,"catch"],[3471,20,3494,30],[3471,21,3494,31],[3471,27,3494,37],[3472,14,3495,24,"resolve"],[3472,21,3495,31],[3472,22,3495,32,"FAKE_TOKEN"],[3472,32,3495,42],[3472,33,3495,43],[3473,12,3496,20],[3473,13,3496,21],[3473,14,3496,22],[3474,10,3497,16],[3474,11,3497,17],[3474,12,3497,18],[3475,8,3498,12],[3475,9,3498,13],[3475,15,3499,17],[3476,10,3500,16,"reject"],[3476,16,3500,22],[3476,17,3500,23,"Error"],[3476,22,3500,28],[3476,23,3500,29],[3476,63,3500,69],[3476,64,3500,70],[3476,65,3500,71],[3477,8,3501,12],[3478,6,3502,8],[3479,6,3503,8],[3480,6,3504,8],[3480,10,3504,12],[3480,14,3504,16],[3480,15,3504,17,"auth"],[3480,19,3504,21],[3480,20,3504,22,"settings"],[3480,28,3504,30],[3480,29,3504,31,"appVerificationDisabledForTesting"],[3480,62,3504,64],[3480,64,3504,66],[3481,8,3505,12],[3481,14,3505,18,"mockRecaptcha"],[3481,27,3505,31],[3481,30,3505,34],[3481,34,3505,38,"MockGreCAPTCHATopLevel"],[3481,56,3505,60],[3481,57,3505,61],[3481,58,3505,62],[3482,8,3506,12],[3482,15,3506,19,"mockRecaptcha"],[3482,28,3506,32],[3482,29,3506,33,"execute"],[3482,36,3506,40],[3482,37,3506,41],[3482,46,3506,50],[3482,48,3506,52],[3483,10,3506,54,"action"],[3483,16,3506,60],[3483,18,3506,62],[3484,8,3506,71],[3484,9,3506,72],[3484,10,3506,73],[3485,6,3507,8],[3486,6,3508,8],[3486,13,3508,15],[3486,17,3508,19,"Promise"],[3486,24,3508,26],[3486,25,3508,27],[3486,26,3508,28,"resolve"],[3486,33,3508,35],[3486,35,3508,37,"reject"],[3486,41,3508,43],[3486,46,3508,48],[3487,8,3509,12,"retrieveSiteKey"],[3487,23,3509,27],[3487,24,3509,28],[3487,28,3509,32],[3487,29,3509,33,"auth"],[3487,33,3509,37],[3487,34,3509,38],[3487,35,3510,17,"then"],[3487,39,3510,21],[3487,40,3510,22,"siteKey"],[3487,47,3510,29],[3487,51,3510,33],[3488,10,3511,16],[3488,14,3511,20],[3488,15,3511,21,"forceRefresh"],[3488,27,3511,33],[3488,31,3511,37,"isEnterprise"],[3488,43,3511,49],[3488,44,3511,50,"window"],[3488,50,3511,56],[3488,51,3511,57,"grecaptcha"],[3488,61,3511,67],[3488,62,3511,68],[3488,64,3511,70],[3489,12,3512,20,"retrieveRecaptchaToken"],[3489,34,3512,42],[3489,35,3512,43,"siteKey"],[3489,42,3512,50],[3489,44,3512,52,"resolve"],[3489,51,3512,59],[3489,53,3512,61,"reject"],[3489,59,3512,67],[3489,60,3512,68],[3490,10,3513,16],[3490,11,3513,17],[3490,17,3514,21],[3491,12,3515,20],[3491,16,3515,24],[3491,23,3515,31,"window"],[3491,29,3515,37],[3491,34,3515,42],[3491,45,3515,53],[3491,47,3515,55],[3492,14,3516,24,"reject"],[3492,20,3516,30],[3492,21,3516,31],[3492,25,3516,35,"Error"],[3492,30,3516,40],[3492,31,3516,41],[3492,79,3516,89],[3492,80,3516,90],[3492,81,3516,91],[3493,14,3517,24],[3494,12,3518,20],[3495,12,3519,20],[3495,16,3519,24,"url"],[3495,19,3519,27],[3495,22,3519,30,"_recaptchaEnterpriseScriptUrl"],[3495,51,3519,59],[3495,52,3519,60],[3495,53,3519,61],[3496,12,3520,20],[3496,16,3520,24,"url"],[3496,19,3520,27],[3496,20,3520,28,"length"],[3496,26,3520,34],[3496,31,3520,39],[3496,32,3520,40],[3496,34,3520,42],[3497,14,3521,24,"url"],[3497,17,3521,27],[3497,21,3521,31,"siteKey"],[3497,28,3521,38],[3498,12,3522,20],[3499,12,3523,20,"_loadJS"],[3499,19,3523,27],[3499,20,3523,28,"url"],[3499,23,3523,31],[3499,24,3523,32],[3499,25,3524,25,"then"],[3499,29,3524,29],[3499,30,3524,30],[3499,36,3524,36],[3500,14,3525,24,"retrieveRecaptchaToken"],[3500,36,3525,46],[3500,37,3525,47,"siteKey"],[3500,44,3525,54],[3500,46,3525,56,"resolve"],[3500,53,3525,63],[3500,55,3525,65,"reject"],[3500,61,3525,71],[3500,62,3525,72],[3501,12,3526,20],[3501,13,3526,21],[3501,14,3526,22],[3501,15,3527,25,"catch"],[3501,20,3527,30],[3501,21,3527,31,"error"],[3501,26,3527,36],[3501,30,3527,40],[3502,14,3528,24,"reject"],[3502,20,3528,30],[3502,21,3528,31,"error"],[3502,26,3528,36],[3502,27,3528,37],[3503,12,3529,20],[3503,13,3529,21],[3503,14,3529,22],[3504,10,3530,16],[3505,8,3531,12],[3505,9,3531,13],[3505,10,3531,14],[3505,11,3532,17,"catch"],[3505,16,3532,22],[3505,17,3532,23,"error"],[3505,22,3532,28],[3505,26,3532,32],[3506,10,3533,16,"reject"],[3506,16,3533,22],[3506,17,3533,23,"error"],[3506,22,3533,28],[3506,23,3533,29],[3507,8,3534,12],[3507,9,3534,13],[3507,10,3534,14],[3508,6,3535,8],[3508,7,3535,9],[3508,8,3535,10],[3509,4,3536,4],[3510,2,3537,0],[3511,2,3538,0],[3511,17,3538,15,"injectRecaptchaFields"],[3511,38,3538,36,"injectRecaptchaFields"],[3511,39,3538,37,"auth"],[3511,43,3538,41],[3511,45,3538,43,"request"],[3511,52,3538,50],[3511,54,3538,52,"action"],[3511,60,3538,58],[3511,62,3538,60,"isCaptchaResp"],[3511,75,3538,73],[3511,78,3538,76],[3511,83,3538,81],[3511,85,3538,83,"isFakeToken"],[3511,96,3538,94],[3511,99,3538,97],[3511,104,3538,102],[3511,106,3538,104],[3512,4,3539,4],[3512,10,3539,10,"verifier"],[3512,18,3539,18],[3512,21,3539,21],[3512,25,3539,25,"RecaptchaEnterpriseVerifier"],[3512,52,3539,52],[3512,53,3539,53,"auth"],[3512,57,3539,57],[3512,58,3539,58],[3513,4,3540,4],[3513,8,3540,8,"captchaResponse"],[3513,23,3540,23],[3514,4,3541,4],[3514,8,3541,8,"isFakeToken"],[3514,19,3541,19],[3514,21,3541,21],[3515,6,3542,8,"captchaResponse"],[3515,21,3542,23],[3515,24,3542,26,"FAKE_TOKEN"],[3515,34,3542,36],[3516,4,3543,4],[3516,5,3543,5],[3516,11,3544,9],[3517,6,3545,8],[3517,10,3545,12],[3518,8,3546,12,"captchaResponse"],[3518,23,3546,27],[3518,26,3546,30],[3518,32,3546,36,"verifier"],[3518,40,3546,44],[3518,41,3546,45,"verify"],[3518,47,3546,51],[3518,48,3546,52,"action"],[3518,54,3546,58],[3518,55,3546,59],[3519,6,3547,8],[3519,7,3547,9],[3519,8,3548,8],[3519,15,3548,15,"error"],[3519,20,3548,20],[3519,22,3548,22],[3520,8,3549,12,"captchaResponse"],[3520,23,3549,27],[3520,26,3549,30],[3520,32,3549,36,"verifier"],[3520,40,3549,44],[3520,41,3549,45,"verify"],[3520,47,3549,51],[3520,48,3549,52,"action"],[3520,54,3549,58],[3520,56,3549,60],[3520,60,3549,64],[3520,61,3549,65],[3521,6,3550,8],[3522,4,3551,4],[3523,4,3552,4],[3523,10,3552,10,"newRequest"],[3523,20,3552,20],[3523,23,3552,23],[3524,6,3552,25],[3524,9,3552,28,"request"],[3525,4,3552,36],[3525,5,3552,37],[3526,4,3553,4],[3526,8,3553,8,"action"],[3526,14,3553,14],[3526,19,3553,19],[3526,37,3553,37],[3526,38,3553,38],[3526,86,3554,8,"action"],[3526,92,3554,14],[3526,97,3554,19],[3526,111,3554,33],[3526,112,3554,34],[3526,154,3554,76],[3527,6,3555,8],[3527,10,3555,12],[3527,31,3555,33],[3527,35,3555,37,"newRequest"],[3527,45,3555,47],[3527,47,3555,49],[3528,8,3556,12],[3528,14,3556,18,"phoneNumber"],[3528,25,3556,29],[3528,28,3556,32,"newRequest"],[3528,38,3556,42],[3528,39,3556,43,"phoneEnrollmentInfo"],[3528,58,3556,62],[3528,59,3556,63,"phoneNumber"],[3528,70,3556,74],[3529,8,3557,12],[3529,14,3557,18,"recaptchaToken"],[3529,28,3557,32],[3529,31,3557,35,"newRequest"],[3529,41,3557,45],[3529,42,3557,46,"phoneEnrollmentInfo"],[3529,61,3557,65],[3529,62,3557,66,"recaptchaToken"],[3529,76,3557,80],[3530,8,3558,12,"Object"],[3530,14,3558,18],[3530,15,3558,19,"assign"],[3530,21,3558,25],[3530,22,3558,26,"newRequest"],[3530,32,3558,36],[3530,34,3558,38],[3531,10,3559,16],[3531,31,3559,37],[3531,33,3559,39],[3532,12,3560,20,"phoneNumber"],[3532,23,3560,31],[3533,12,3561,20,"recaptchaToken"],[3533,26,3561,34],[3534,12,3562,20,"captchaResponse"],[3534,27,3562,35],[3535,12,3563,20],[3535,24,3563,32],[3535,26,3563,34],[3535,43,3563,51],[3535,44,3563,52],[3536,12,3564,20],[3536,30,3564,38],[3536,32,3564,40],[3536,54,3564,62],[3536,55,3564,63],[3537,10,3565,16],[3538,8,3566,12],[3538,9,3566,13],[3538,10,3566,14],[3539,6,3567,8],[3539,7,3567,9],[3539,13,3568,13],[3539,17,3568,17],[3539,34,3568,34],[3539,38,3568,38,"newRequest"],[3539,48,3568,48],[3539,50,3568,50],[3540,8,3569,12],[3540,14,3569,18,"recaptchaToken"],[3540,28,3569,32],[3540,31,3569,35,"newRequest"],[3540,41,3569,45],[3540,42,3569,46,"phoneSignInInfo"],[3540,57,3569,61],[3540,58,3569,62,"recaptchaToken"],[3540,72,3569,76],[3541,8,3570,12,"Object"],[3541,14,3570,18],[3541,15,3570,19,"assign"],[3541,21,3570,25],[3541,22,3570,26,"newRequest"],[3541,32,3570,36],[3541,34,3570,38],[3542,10,3571,16],[3542,27,3571,33],[3542,29,3571,35],[3543,12,3572,20,"recaptchaToken"],[3543,26,3572,34],[3544,12,3573,20,"captchaResponse"],[3544,27,3573,35],[3545,12,3574,20],[3545,24,3574,32],[3545,26,3574,34],[3545,43,3574,51],[3545,44,3574,52],[3546,12,3575,20],[3546,30,3575,38],[3546,32,3575,40],[3546,54,3575,62],[3546,55,3575,63],[3547,10,3576,16],[3548,8,3577,12],[3548,9,3577,13],[3548,10,3577,14],[3549,6,3578,8],[3550,6,3579,8],[3550,13,3579,15,"newRequest"],[3550,23,3579,25],[3551,4,3580,4],[3552,4,3581,4],[3552,8,3581,8],[3552,9,3581,9,"isCaptchaResp"],[3552,22,3581,22],[3552,24,3581,24],[3553,6,3582,8,"Object"],[3553,12,3582,14],[3553,13,3582,15,"assign"],[3553,19,3582,21],[3553,20,3582,22,"newRequest"],[3553,30,3582,32],[3553,32,3582,34],[3554,8,3582,36,"captchaResponse"],[3555,6,3582,52],[3555,7,3582,53],[3555,8,3582,54],[3556,4,3583,4],[3556,5,3583,5],[3556,11,3584,9],[3557,6,3585,8,"Object"],[3557,12,3585,14],[3557,13,3585,15,"assign"],[3557,19,3585,21],[3557,20,3585,22,"newRequest"],[3557,30,3585,32],[3557,32,3585,34],[3558,8,3585,36],[3558,21,3585,49],[3558,23,3585,51,"captchaResponse"],[3559,6,3585,67],[3559,7,3585,68],[3559,8,3585,69],[3560,4,3586,4],[3561,4,3587,4,"Object"],[3561,10,3587,10],[3561,11,3587,11,"assign"],[3561,17,3587,17],[3561,18,3587,18,"newRequest"],[3561,28,3587,28],[3561,30,3587,30],[3562,6,3587,32],[3562,18,3587,44],[3562,20,3587,46],[3562,37,3587,63],[3562,38,3587,64],[3563,4,3587,94],[3563,5,3587,95],[3563,6,3587,96],[3564,4,3588,4,"Object"],[3564,10,3588,10],[3564,11,3588,11,"assign"],[3564,17,3588,17],[3564,18,3588,18,"newRequest"],[3564,28,3588,28],[3564,30,3588,30],[3565,6,3589,8],[3565,24,3589,26],[3565,26,3589,28],[3565,48,3589,50],[3565,49,3589,51],[3566,4,3590,4],[3566,5,3590,5],[3566,6,3590,6],[3567,4,3591,4],[3567,11,3591,11,"newRequest"],[3567,21,3591,21],[3568,2,3592,0],[3569,2,3593,0],[3569,17,3593,15,"handleRecaptchaFlow"],[3569,36,3593,34,"handleRecaptchaFlow"],[3569,37,3593,35,"authInstance"],[3569,49,3593,47],[3569,51,3593,49,"request"],[3569,58,3593,56],[3569,60,3593,58,"actionName"],[3569,70,3593,68],[3569,72,3593,70,"actionMethod"],[3569,84,3593,82],[3569,86,3593,84,"recaptchaAuthProvider"],[3569,107,3593,105],[3569,109,3593,107],[3570,4,3594,4],[3570,8,3594,8,"recaptchaAuthProvider"],[3570,29,3594,29],[3570,34,3594,34],[3570,59,3594,59],[3570,60,3594,60],[3570,113,3594,113],[3571,6,3595,8],[3571,10,3595,12,"authInstance"],[3571,22,3595,24],[3571,23,3596,13,"_getRecaptchaConfig"],[3571,42,3596,32],[3571,43,3596,33],[3571,44,3596,34],[3571,46,3597,14,"isProviderEnabled"],[3571,63,3597,31],[3571,64,3597,32],[3571,89,3597,57],[3571,90,3597,58],[3571,141,3597,109],[3571,142,3597,110],[3571,144,3597,112],[3572,8,3598,12],[3572,14,3598,18,"requestWithRecaptcha"],[3572,34,3598,38],[3572,37,3598,41],[3572,43,3598,47,"injectRecaptchaFields"],[3572,64,3598,68],[3572,65,3598,69,"authInstance"],[3572,77,3598,81],[3572,79,3598,83,"request"],[3572,86,3598,90],[3572,88,3598,92,"actionName"],[3572,98,3598,102],[3572,100,3598,104,"actionName"],[3572,110,3598,114],[3572,115,3598,119],[3572,127,3598,131],[3572,128,3598,132],[3572,166,3598,170],[3572,167,3598,171],[3573,8,3599,12],[3573,15,3599,19,"actionMethod"],[3573,27,3599,31],[3573,28,3599,32,"authInstance"],[3573,40,3599,44],[3573,42,3599,46,"requestWithRecaptcha"],[3573,62,3599,66],[3573,63,3599,67],[3574,6,3600,8],[3574,7,3600,9],[3574,13,3601,13],[3575,8,3602,12],[3575,15,3602,19,"actionMethod"],[3575,27,3602,31],[3575,28,3602,32,"authInstance"],[3575,40,3602,44],[3575,42,3602,46,"request"],[3575,49,3602,53],[3575,50,3602,54],[3575,51,3602,55,"catch"],[3575,56,3602,60],[3575,57,3602,61],[3575,63,3602,68,"error"],[3575,68,3602,73],[3575,72,3602,78],[3576,10,3603,16],[3576,14,3603,20,"error"],[3576,19,3603,25],[3576,20,3603,26,"code"],[3576,24,3603,30],[3576,29,3603,35],[3576,37,3603,43],[3576,62,3603,68],[3576,63,3603,69],[3576,108,3603,114],[3576,110,3603,116],[3577,12,3604,20,"console"],[3577,19,3604,27],[3577,20,3604,28,"log"],[3577,23,3604,31],[3577,24,3604,32],[3577,27,3604,35,"actionName"],[3577,37,3604,45],[3577,163,3604,171],[3577,164,3604,172],[3578,12,3605,20],[3578,18,3605,26,"requestWithRecaptcha"],[3578,38,3605,46],[3578,41,3605,49],[3578,47,3605,55,"injectRecaptchaFields"],[3578,68,3605,76],[3578,69,3605,77,"authInstance"],[3578,81,3605,89],[3578,83,3605,91,"request"],[3578,90,3605,98],[3578,92,3605,100,"actionName"],[3578,102,3605,110],[3578,104,3605,112,"actionName"],[3578,114,3605,122],[3578,119,3605,127],[3578,131,3605,139],[3578,132,3605,140],[3578,170,3605,178],[3578,171,3605,179],[3579,12,3606,20],[3579,19,3606,27,"actionMethod"],[3579,31,3606,39],[3579,32,3606,40,"authInstance"],[3579,44,3606,52],[3579,46,3606,54,"requestWithRecaptcha"],[3579,66,3606,74],[3579,67,3606,75],[3580,10,3607,16],[3580,11,3607,17],[3580,17,3608,21],[3581,12,3609,20],[3581,19,3609,27,"Promise"],[3581,26,3609,34],[3581,27,3609,35,"reject"],[3581,33,3609,41],[3581,34,3609,42,"error"],[3581,39,3609,47],[3581,40,3609,48],[3582,10,3610,16],[3583,8,3611,12],[3583,9,3611,13],[3583,10,3611,14],[3584,6,3612,8],[3585,4,3613,4],[3585,5,3613,5],[3585,11,3614,9],[3585,15,3614,13,"recaptchaAuthProvider"],[3585,36,3614,34],[3585,41,3614,39],[3585,57,3614,55],[3585,58,3614,56],[3585,102,3614,100],[3586,6,3615,8],[3586,10,3615,12,"authInstance"],[3586,22,3615,24],[3586,23,3616,13,"_getRecaptchaConfig"],[3586,42,3616,32],[3586,43,3616,33],[3586,44,3616,34],[3586,46,3617,14,"isProviderEnabled"],[3586,63,3617,31],[3586,64,3617,32],[3586,80,3617,48],[3586,81,3617,49],[3586,123,3617,91],[3586,124,3617,92],[3586,126,3617,94],[3587,8,3618,12],[3587,14,3618,18,"requestWithRecaptcha"],[3587,34,3618,38],[3587,37,3618,41],[3587,43,3618,47,"injectRecaptchaFields"],[3587,64,3618,68],[3587,65,3618,69,"authInstance"],[3587,77,3618,81],[3587,79,3618,83,"request"],[3587,86,3618,90],[3587,88,3618,92,"actionName"],[3587,98,3618,102],[3587,99,3618,103],[3588,8,3619,12],[3588,15,3619,19,"actionMethod"],[3588,27,3619,31],[3588,28,3619,32,"authInstance"],[3588,40,3619,44],[3588,42,3619,46,"requestWithRecaptcha"],[3588,62,3619,66],[3588,63,3619,67],[3588,64,3619,68,"catch"],[3588,69,3619,73],[3588,70,3619,74],[3588,76,3619,81,"error"],[3588,81,3619,86],[3588,85,3619,91],[3589,10,3620,16],[3589,14,3620,20,"authInstance"],[3589,26,3620,32],[3589,27,3621,21,"_getRecaptchaConfig"],[3589,46,3621,40],[3589,47,3621,41],[3589,48,3621,42],[3589,50,3622,22,"getProviderEnforcementState"],[3589,77,3622,49],[3589,78,3622,50],[3589,94,3622,66],[3589,95,3622,67],[3589,137,3622,109],[3589,138,3622,110],[3589,143,3622,115],[3589,150,3622,122],[3589,151,3622,123],[3589,181,3622,153],[3590,12,3623,20],[3591,12,3624,20],[3591,16,3624,24,"error"],[3591,21,3624,29],[3591,22,3624,30,"code"],[3591,26,3624,34],[3591,31,3624,39],[3591,39,3624,47],[3591,64,3624,72],[3591,65,3624,73],[3591,110,3624,118],[3591,114,3625,24,"error"],[3591,119,3625,29],[3591,120,3625,30,"code"],[3591,124,3625,34],[3591,129,3625,39],[3591,137,3625,47],[3591,161,3625,71],[3591,162,3625,72],[3591,206,3625,116],[3591,208,3625,118],[3592,14,3626,24,"console"],[3592,21,3626,31],[3592,22,3626,32,"log"],[3592,25,3626,35],[3592,26,3626,36],[3592,136,3626,146,"actionName"],[3592,146,3626,156],[3592,154,3626,164],[3592,155,3626,165],[3593,14,3627,24],[3594,14,3628,24],[3595,14,3629,24],[3596,14,3630,24],[3596,20,3630,30,"requestWithRecaptchaFields"],[3596,46,3630,56],[3596,49,3630,59],[3596,55,3630,65,"injectRecaptchaFields"],[3596,76,3630,86],[3596,77,3630,87,"authInstance"],[3596,89,3630,99],[3596,91,3630,101,"request"],[3596,98,3630,108],[3596,100,3630,110,"actionName"],[3596,110,3630,120],[3596,112,3630,122],[3596,117,3630,127],[3597,14,3630,129],[3598,14,3631,24],[3598,18,3631,28],[3598,19,3631,29],[3599,14,3632,24],[3599,15,3632,25],[3600,14,3633,24],[3601,14,3634,24],[3601,21,3634,31,"actionMethod"],[3601,33,3634,43],[3601,34,3634,44,"authInstance"],[3601,46,3634,56],[3601,48,3634,58,"requestWithRecaptchaFields"],[3601,74,3634,84],[3601,75,3634,85],[3602,12,3635,20],[3603,10,3636,16],[3604,10,3637,16],[3605,10,3638,16],[3605,17,3638,23,"Promise"],[3605,24,3638,30],[3605,25,3638,31,"reject"],[3605,31,3638,37],[3605,32,3638,38,"error"],[3605,37,3638,43],[3605,38,3638,44],[3606,8,3639,12],[3606,9,3639,13],[3606,10,3639,14],[3607,6,3640,8],[3607,7,3640,9],[3607,13,3641,13],[3608,8,3642,12],[3609,8,3643,12],[3609,14,3643,18,"requestWithRecaptchaFields"],[3609,40,3643,44],[3609,43,3643,47],[3609,49,3643,53,"injectRecaptchaFields"],[3609,70,3643,74],[3609,71,3643,75,"authInstance"],[3609,83,3643,87],[3609,85,3643,89,"request"],[3609,92,3643,96],[3609,94,3643,98,"actionName"],[3609,104,3643,108],[3609,106,3643,110],[3609,111,3643,115],[3610,8,3643,117],[3611,8,3644,12],[3611,12,3644,16],[3611,13,3644,17],[3612,8,3645,12],[3612,9,3645,13],[3613,8,3646,12],[3614,8,3647,12],[3614,15,3647,19,"actionMethod"],[3614,27,3647,31],[3614,28,3647,32,"authInstance"],[3614,40,3647,44],[3614,42,3647,46,"requestWithRecaptchaFields"],[3614,68,3647,72],[3614,69,3647,73],[3615,6,3648,8],[3616,4,3649,4],[3616,5,3649,5],[3616,11,3650,9],[3617,6,3651,8],[3617,13,3651,15,"Promise"],[3617,20,3651,22],[3617,21,3651,23,"reject"],[3617,27,3651,29],[3617,28,3651,30,"recaptchaAuthProvider"],[3617,49,3651,51],[3617,52,3651,54],[3617,81,3651,83],[3617,82,3651,84],[3618,4,3652,4],[3619,2,3653,0],[3620,2,3654,0],[3620,17,3654,15,"_initializeRecaptchaConfig"],[3620,43,3654,41,"_initializeRecaptchaConfig"],[3620,44,3654,42,"auth"],[3620,48,3654,46],[3620,50,3654,48],[3621,4,3655,4],[3621,10,3655,10,"authInternal"],[3621,22,3655,22],[3621,25,3655,25,"_castAuth"],[3621,34,3655,34],[3621,35,3655,35,"auth"],[3621,39,3655,39],[3621,40,3655,40],[3622,4,3656,4],[3622,10,3656,10,"response"],[3622,18,3656,18],[3622,21,3656,21],[3622,27,3656,27,"getRecaptchaConfig"],[3622,45,3656,45],[3622,46,3656,46,"authInternal"],[3622,58,3656,58],[3622,60,3656,60],[3623,6,3657,8,"clientType"],[3623,16,3657,18],[3623,18,3657,20],[3623,35,3657,37],[3623,36,3657,38],[3624,6,3658,8,"version"],[3624,13,3658,15],[3624,15,3658,17],[3624,37,3658,39],[3624,38,3658,40],[3625,4,3659,4],[3625,5,3659,5],[3625,6,3659,6],[3626,4,3660,4],[3626,10,3660,10,"config"],[3626,16,3660,16],[3626,19,3660,19],[3626,23,3660,23,"RecaptchaConfig"],[3626,38,3660,38],[3626,39,3660,39,"response"],[3626,47,3660,47],[3626,48,3660,48],[3627,4,3661,4],[3627,8,3661,8,"authInternal"],[3627,20,3661,20],[3627,21,3661,21,"tenantId"],[3627,29,3661,29],[3627,33,3661,33],[3627,37,3661,37],[3627,39,3661,39],[3628,6,3662,8,"authInternal"],[3628,18,3662,20],[3628,19,3662,21,"_agentRecaptchaConfig"],[3628,40,3662,42],[3628,43,3662,45,"config"],[3628,49,3662,51],[3629,4,3663,4],[3629,5,3663,5],[3629,11,3664,9],[3630,6,3665,8,"authInternal"],[3630,18,3665,20],[3630,19,3665,21,"_tenantRecaptchaConfigs"],[3630,42,3665,44],[3630,43,3665,45,"authInternal"],[3630,55,3665,57],[3630,56,3665,58,"tenantId"],[3630,64,3665,66],[3630,65,3665,67],[3630,68,3665,70,"config"],[3630,74,3665,76],[3631,4,3666,4],[3632,4,3667,4],[3632,8,3667,8,"config"],[3632,14,3667,14],[3632,15,3667,15,"isAnyProviderEnabled"],[3632,35,3667,35],[3632,36,3667,36],[3632,37,3667,37],[3632,39,3667,39],[3633,6,3668,8],[3633,12,3668,14,"verifier"],[3633,20,3668,22],[3633,23,3668,25],[3633,27,3668,29,"RecaptchaEnterpriseVerifier"],[3633,54,3668,56],[3633,55,3668,57,"authInternal"],[3633,67,3668,69],[3633,68,3668,70],[3634,6,3669,8],[3634,11,3669,13,"verifier"],[3634,19,3669,21],[3634,20,3669,22,"verify"],[3634,26,3669,28],[3634,27,3669,29],[3634,28,3669,30],[3635,4,3670,4],[3636,2,3671,0],[3638,2,3673,0],[3639,0,3674,0],[3640,0,3675,0],[3641,0,3676,0],[3642,0,3677,0],[3643,0,3678,0],[3644,0,3679,0],[3645,0,3680,0],[3646,0,3681,0],[3647,0,3682,0],[3648,0,3683,0],[3649,0,3684,0],[3650,0,3685,0],[3651,0,3686,0],[3652,0,3687,0],[3653,0,3688,0],[3654,2,3689,0],[3655,0,3690,0],[3656,0,3691,0],[3657,0,3692,0],[3658,0,3693,0],[3659,0,3694,0],[3660,0,3695,0],[3661,0,3696,0],[3662,0,3697,0],[3663,0,3698,0],[3664,0,3699,0],[3665,0,3700,0],[3666,0,3701,0],[3667,0,3702,0],[3668,0,3703,0],[3669,0,3704,0],[3670,0,3705,0],[3671,0,3706,0],[3672,0,3707,0],[3673,0,3708,0],[3674,0,3709,0],[3675,0,3710,0],[3676,0,3711,0],[3677,0,3712,0],[3678,0,3713,0],[3679,2,3714,0],[3679,11,3714,9,"initializeAuth"],[3679,25,3714,23,"initializeAuth"],[3679,26,3714,24,"app"],[3679,29,3714,27],[3679,31,3714,29,"deps"],[3679,35,3714,33],[3679,37,3714,35],[3680,4,3715,4],[3680,10,3715,10,"provider"],[3680,18,3715,18],[3680,21,3715,21],[3680,25,3715,21,"_getProvider"],[3680,42,3715,33],[3680,44,3715,34,"app"],[3680,47,3715,37],[3680,49,3715,39],[3680,55,3715,45],[3680,56,3715,46],[3681,4,3716,4],[3681,8,3716,8,"provider"],[3681,16,3716,16],[3681,17,3716,17,"isInitialized"],[3681,30,3716,30],[3681,31,3716,31],[3681,32,3716,32],[3681,34,3716,34],[3682,6,3717,8],[3682,12,3717,14,"auth"],[3682,16,3717,18],[3682,19,3717,21,"provider"],[3682,27,3717,29],[3682,28,3717,30,"getImmediate"],[3682,40,3717,42],[3682,41,3717,43],[3682,42,3717,44],[3683,6,3718,8],[3683,12,3718,14,"initialOptions"],[3683,26,3718,28],[3683,29,3718,31,"provider"],[3683,37,3718,39],[3683,38,3718,40,"getOptions"],[3683,48,3718,50],[3683,49,3718,51],[3683,50,3718,52],[3684,6,3719,8],[3684,10,3719,12],[3684,14,3719,12,"deepEqual"],[3684,29,3719,21],[3684,31,3719,22,"initialOptions"],[3684,45,3719,36],[3684,47,3719,38,"deps"],[3684,51,3719,42],[3684,55,3719,46],[3684,56,3719,47],[3684,57,3719,48],[3684,58,3719,49],[3684,60,3719,51],[3685,8,3720,12],[3685,15,3720,19,"auth"],[3685,19,3720,23],[3686,6,3721,8],[3686,7,3721,9],[3686,13,3722,13],[3687,8,3723,12,"_fail"],[3687,13,3723,17],[3687,14,3723,18,"auth"],[3687,18,3723,22],[3687,20,3723,24],[3687,41,3723,45],[3687,42,3723,46],[3687,81,3723,85],[3687,82,3723,86],[3688,6,3724,8],[3689,4,3725,4],[3690,4,3726,4],[3690,10,3726,10,"auth"],[3690,14,3726,14],[3690,17,3726,17,"provider"],[3690,25,3726,25],[3690,26,3726,26,"initialize"],[3690,36,3726,36],[3690,37,3726,37],[3691,6,3726,39,"options"],[3691,13,3726,46],[3691,15,3726,48,"deps"],[3692,4,3726,53],[3692,5,3726,54],[3692,6,3726,55],[3693,4,3727,4],[3693,11,3727,11,"auth"],[3693,15,3727,15],[3694,2,3728,0],[3695,2,3729,0],[3695,11,3729,9,"_initializeAuthInstance"],[3695,34,3729,32,"_initializeAuthInstance"],[3695,35,3729,33,"auth"],[3695,39,3729,37],[3695,41,3729,39,"deps"],[3695,45,3729,43],[3695,47,3729,45],[3696,4,3730,4],[3696,10,3730,10,"persistence"],[3696,21,3730,21],[3696,24,3730,24,"deps"],[3696,28,3730,28],[3696,30,3730,30,"persistence"],[3696,41,3730,41],[3696,45,3730,45],[3696,47,3730,47],[3697,4,3731,4],[3697,10,3731,10,"hierarchy"],[3697,19,3731,19],[3697,22,3731,22],[3697,23,3731,23,"Array"],[3697,28,3731,28],[3697,29,3731,29,"isArray"],[3697,36,3731,36],[3697,37,3731,37,"persistence"],[3697,48,3731,48],[3697,49,3731,49],[3697,52,3731,52,"persistence"],[3697,63,3731,63],[3697,66,3731,66],[3697,67,3731,67,"persistence"],[3697,78,3731,78],[3697,79,3731,79],[3697,81,3731,81,"map"],[3697,84,3731,84],[3697,85,3731,85,"_getInstance"],[3697,97,3731,97],[3697,98,3731,98],[3698,4,3732,4],[3698,8,3732,8,"deps"],[3698,12,3732,12],[3698,14,3732,14,"errorMap"],[3698,22,3732,22],[3698,24,3732,24],[3699,6,3733,8,"auth"],[3699,10,3733,12],[3699,11,3733,13,"_updateErrorMap"],[3699,26,3733,28],[3699,27,3733,29,"deps"],[3699,31,3733,33],[3699,32,3733,34,"errorMap"],[3699,40,3733,42],[3699,41,3733,43],[3700,4,3734,4],[3701,4,3735,4],[3702,4,3736,4],[3703,4,3737,4],[3704,4,3738,4,"auth"],[3704,8,3738,8],[3704,9,3738,9,"_initializeWithPersistence"],[3704,35,3738,35],[3704,36,3738,36,"hierarchy"],[3704,45,3738,45],[3704,47,3738,47,"deps"],[3704,51,3738,51],[3704,53,3738,53,"popupRedirectResolver"],[3704,74,3738,74],[3704,75,3738,75],[3705,2,3739,0],[3707,2,3741,0],[3708,0,3742,0],[3709,0,3743,0],[3710,0,3744,0],[3711,0,3745,0],[3712,0,3746,0],[3713,0,3747,0],[3714,0,3748,0],[3715,0,3749,0],[3716,0,3750,0],[3717,0,3751,0],[3718,0,3752,0],[3719,0,3753,0],[3720,0,3754,0],[3721,0,3755,0],[3722,0,3756,0],[3723,0,3757,0],[3724,0,3758,0],[3725,0,3759,0],[3726,0,3760,0],[3727,0,3761,0],[3728,0,3762,0],[3729,2,3763,0],[3729,11,3763,9,"connectAuthEmulator"],[3729,30,3763,28,"connectAuthEmulator"],[3729,31,3763,29,"auth"],[3729,35,3763,33],[3729,37,3763,35,"url"],[3729,40,3763,38],[3729,42,3763,40,"options"],[3729,49,3763,47],[3729,51,3763,49],[3730,4,3764,4],[3730,10,3764,10,"authInternal"],[3730,22,3764,22],[3730,25,3764,25,"_castAuth"],[3730,34,3764,34],[3730,35,3764,35,"auth"],[3730,39,3764,39],[3730,40,3764,40],[3731,4,3765,4,"_assert"],[3731,11,3765,11],[3731,12,3765,12],[3731,26,3765,26],[3731,27,3765,27,"test"],[3731,31,3765,31],[3731,32,3765,32,"url"],[3731,35,3765,35],[3731,36,3765,36],[3731,38,3765,38,"authInternal"],[3731,50,3765,50],[3731,52,3765,52],[3731,77,3765,77],[3731,78,3765,78],[3731,121,3765,121],[3731,122,3765,122],[3732,4,3766,4],[3732,10,3766,10,"disableWarnings"],[3732,25,3766,25],[3732,28,3766,28],[3732,29,3766,29],[3732,30,3766,30,"options"],[3732,37,3766,37],[3732,39,3766,39,"disableWarnings"],[3732,54,3766,54],[3733,4,3767,4],[3733,10,3767,10,"protocol"],[3733,18,3767,18],[3733,21,3767,21,"extractProtocol"],[3733,36,3767,36],[3733,37,3767,37,"url"],[3733,40,3767,40],[3733,41,3767,41],[3734,4,3768,4],[3734,10,3768,10],[3735,6,3768,12,"host"],[3735,10,3768,16],[3736,6,3768,18,"port"],[3737,4,3768,23],[3737,5,3768,24],[3737,8,3768,27,"extractHostAndPort"],[3737,26,3768,45],[3737,27,3768,46,"url"],[3737,30,3768,49],[3737,31,3768,50],[3738,4,3769,4],[3738,10,3769,10,"portStr"],[3738,17,3769,17],[3738,20,3769,20,"port"],[3738,24,3769,24],[3738,29,3769,29],[3738,33,3769,33],[3738,36,3769,36],[3738,38,3769,38],[3738,41,3769,41],[3738,45,3769,45,"port"],[3738,49,3769,49],[3738,51,3769,51],[3739,4,3770,4],[3740,4,3771,4],[3740,10,3771,10,"emulator"],[3740,18,3771,18],[3740,21,3771,21],[3741,6,3771,23,"url"],[3741,9,3771,26],[3741,11,3771,28],[3741,14,3771,31,"protocol"],[3741,22,3771,39],[3741,27,3771,44,"host"],[3741,31,3771,48],[3741,34,3771,51,"portStr"],[3741,41,3771,58],[3742,4,3771,62],[3742,5,3771,63],[3743,4,3772,4],[3743,10,3772,10,"emulatorConfig"],[3743,24,3772,24],[3743,27,3772,27,"Object"],[3743,33,3772,33],[3743,34,3772,34,"freeze"],[3743,40,3772,40],[3743,41,3772,41],[3744,6,3773,8,"host"],[3744,10,3773,12],[3745,6,3774,8,"port"],[3745,10,3774,12],[3746,6,3775,8,"protocol"],[3746,14,3775,16],[3746,16,3775,18,"protocol"],[3746,24,3775,26],[3746,25,3775,27,"replace"],[3746,32,3775,34],[3746,33,3775,35],[3746,36,3775,38],[3746,38,3775,40],[3746,40,3775,42],[3746,41,3775,43],[3747,6,3776,8,"options"],[3747,13,3776,15],[3747,15,3776,17,"Object"],[3747,21,3776,23],[3747,22,3776,24,"freeze"],[3747,28,3776,30],[3747,29,3776,31],[3748,8,3776,33,"disableWarnings"],[3749,6,3776,49],[3749,7,3776,50],[3750,4,3777,4],[3750,5,3777,5],[3750,6,3777,6],[3751,4,3778,4],[3752,4,3779,4],[3752,8,3779,8],[3752,9,3779,9,"authInternal"],[3752,21,3779,21],[3752,22,3779,22,"_canInitEmulator"],[3752,38,3779,38],[3752,40,3779,40],[3753,6,3780,8],[3754,6,3781,8],[3755,6,3782,8,"_assert"],[3755,13,3782,15],[3755,14,3782,16,"authInternal"],[3755,26,3782,28],[3755,27,3782,29,"config"],[3755,33,3782,35],[3755,34,3782,36,"emulator"],[3755,42,3782,44],[3755,46,3782,48,"authInternal"],[3755,58,3782,60],[3755,59,3782,61,"emulatorConfig"],[3755,73,3782,75],[3755,75,3782,77,"authInternal"],[3755,87,3782,89],[3755,89,3782,91],[3755,113,3782,115],[3755,114,3782,116],[3755,156,3782,158],[3755,157,3782,159],[3756,6,3783,8],[3757,6,3784,8],[3758,6,3785,8,"_assert"],[3758,13,3785,15],[3758,14,3785,16],[3758,18,3785,16,"deepEqual"],[3758,33,3785,25],[3758,35,3785,26,"emulator"],[3758,43,3785,34],[3758,45,3785,36,"authInternal"],[3758,57,3785,48],[3758,58,3785,49,"config"],[3758,64,3785,55],[3758,65,3785,56,"emulator"],[3758,73,3785,64],[3758,74,3785,65],[3758,78,3786,12],[3758,82,3786,12,"deepEqual"],[3758,97,3786,21],[3758,99,3786,22,"emulatorConfig"],[3758,113,3786,36],[3758,115,3786,38,"authInternal"],[3758,127,3786,50],[3758,128,3786,51,"emulatorConfig"],[3758,142,3786,65],[3758,143,3786,66],[3758,145,3786,68,"authInternal"],[3758,157,3786,80],[3758,159,3786,82],[3758,183,3786,106],[3758,184,3786,107],[3758,226,3786,149],[3758,227,3786,150],[3759,6,3787,8],[3760,6,3788,8],[3761,6,3789,8],[3762,4,3790,4],[3763,4,3791,4,"authInternal"],[3763,16,3791,16],[3763,17,3791,17,"config"],[3763,23,3791,23],[3763,24,3791,24,"emulator"],[3763,32,3791,32],[3763,35,3791,35,"emulator"],[3763,43,3791,43],[3764,4,3792,4,"authInternal"],[3764,16,3792,16],[3764,17,3792,17,"emulatorConfig"],[3764,31,3792,31],[3764,34,3792,34,"emulatorConfig"],[3764,48,3792,48],[3765,4,3793,4,"authInternal"],[3765,16,3793,16],[3765,17,3793,17,"settings"],[3765,25,3793,25],[3765,26,3793,26,"appVerificationDisabledForTesting"],[3765,59,3793,59],[3765,62,3793,62],[3765,66,3793,66],[3766,4,3794,4],[3767,4,3795,4],[3767,8,3795,8],[3767,12,3795,8,"isCloudWorkstation"],[3767,36,3795,26],[3767,38,3795,27,"host"],[3767,42,3795,31],[3767,43,3795,32],[3767,45,3795,34],[3768,6,3796,8],[3768,11,3796,13],[3768,15,3796,13,"pingServer"],[3768,31,3796,23],[3768,33,3796,24],[3768,36,3796,27,"protocol"],[3768,44,3796,35],[3768,49,3796,40,"host"],[3768,53,3796,44],[3768,56,3796,47,"portStr"],[3768,63,3796,54],[3768,65,3796,56],[3768,66,3796,57],[3769,6,3797,8],[3769,10,3797,8,"updateEmulatorBanner"],[3769,36,3797,28],[3769,38,3797,29],[3769,44,3797,35],[3769,46,3797,37],[3769,50,3797,41],[3769,51,3797,42],[3770,4,3798,4],[3770,5,3798,5],[3770,11,3799,9],[3770,15,3799,13],[3770,16,3799,14,"disableWarnings"],[3770,31,3799,29],[3770,33,3799,31],[3771,6,3800,8,"emitEmulatorWarning"],[3771,25,3800,27],[3771,26,3800,28],[3771,27,3800,29],[3772,4,3801,4],[3773,2,3802,0],[3774,2,3803,0],[3774,11,3803,9,"extractProtocol"],[3774,26,3803,24,"extractProtocol"],[3774,27,3803,25,"url"],[3774,30,3803,28],[3774,32,3803,30],[3775,4,3804,4],[3775,10,3804,10,"protocolEnd"],[3775,21,3804,21],[3775,24,3804,24,"url"],[3775,27,3804,27],[3775,28,3804,28,"indexOf"],[3775,35,3804,35],[3775,36,3804,36],[3775,39,3804,39],[3775,40,3804,40],[3776,4,3805,4],[3776,11,3805,11,"protocolEnd"],[3776,22,3805,22],[3776,25,3805,25],[3776,26,3805,26],[3776,29,3805,29],[3776,31,3805,31],[3776,34,3805,34,"url"],[3776,37,3805,37],[3776,38,3805,38,"substr"],[3776,44,3805,44],[3776,45,3805,45],[3776,46,3805,46],[3776,48,3805,48,"protocolEnd"],[3776,59,3805,59],[3776,62,3805,62],[3776,63,3805,63],[3776,64,3805,64],[3777,2,3806,0],[3778,2,3807,0],[3778,11,3807,9,"extractHostAndPort"],[3778,29,3807,27,"extractHostAndPort"],[3778,30,3807,28,"url"],[3778,33,3807,31],[3778,35,3807,33],[3779,4,3808,4],[3779,10,3808,10,"protocol"],[3779,18,3808,18],[3779,21,3808,21,"extractProtocol"],[3779,36,3808,36],[3779,37,3808,37,"url"],[3779,40,3808,40],[3779,41,3808,41],[3780,4,3809,4],[3780,10,3809,10,"authority"],[3780,19,3809,19],[3780,22,3809,22],[3780,40,3809,40],[3780,41,3809,41,"exec"],[3780,45,3809,45],[3780,46,3809,46,"url"],[3780,49,3809,49],[3780,50,3809,50,"substr"],[3780,56,3809,56],[3780,57,3809,57,"protocol"],[3780,65,3809,65],[3780,66,3809,66,"length"],[3780,72,3809,72],[3780,73,3809,73],[3780,74,3809,74],[3780,75,3809,75],[3780,76,3809,76],[3781,4,3810,4],[3781,8,3810,8],[3781,9,3810,9,"authority"],[3781,18,3810,18],[3781,20,3810,20],[3782,6,3811,8],[3782,13,3811,15],[3783,8,3811,17,"host"],[3783,12,3811,21],[3783,14,3811,23],[3783,16,3811,25],[3784,8,3811,27,"port"],[3784,12,3811,31],[3784,14,3811,33],[3785,6,3811,38],[3785,7,3811,39],[3786,4,3812,4],[3787,4,3813,4],[3787,10,3813,10,"hostAndPort"],[3787,21,3813,21],[3787,24,3813,24,"authority"],[3787,33,3813,33],[3787,34,3813,34],[3787,35,3813,35],[3787,36,3813,36],[3787,37,3813,37,"split"],[3787,42,3813,42],[3787,43,3813,43],[3787,46,3813,46],[3787,47,3813,47],[3787,48,3813,48,"pop"],[3787,51,3813,51],[3787,52,3813,52],[3787,53,3813,53],[3787,57,3813,57],[3787,59,3813,59],[3787,60,3813,60],[3787,61,3813,61],[3788,4,3814,4],[3788,10,3814,10,"bracketedIPv6"],[3788,23,3814,23],[3788,26,3814,26],[3788,46,3814,46],[3788,47,3814,47,"exec"],[3788,51,3814,51],[3788,52,3814,52,"hostAndPort"],[3788,63,3814,63],[3788,64,3814,64],[3789,4,3815,4],[3789,8,3815,8,"bracketedIPv6"],[3789,21,3815,21],[3789,23,3815,23],[3790,6,3816,8],[3790,12,3816,14,"host"],[3790,16,3816,18],[3790,19,3816,21,"bracketedIPv6"],[3790,32,3816,34],[3790,33,3816,35],[3790,34,3816,36],[3790,35,3816,37],[3791,6,3817,8],[3791,13,3817,15],[3792,8,3817,17,"host"],[3792,12,3817,21],[3793,8,3817,23,"port"],[3793,12,3817,27],[3793,14,3817,29,"parsePort"],[3793,23,3817,38],[3793,24,3817,39,"hostAndPort"],[3793,35,3817,50],[3793,36,3817,51,"substr"],[3793,42,3817,57],[3793,43,3817,58,"host"],[3793,47,3817,62],[3793,48,3817,63,"length"],[3793,54,3817,69],[3793,57,3817,72],[3793,58,3817,73],[3793,59,3817,74],[3794,6,3817,76],[3794,7,3817,77],[3795,4,3818,4],[3795,5,3818,5],[3795,11,3819,9],[3796,6,3820,8],[3796,12,3820,14],[3796,13,3820,15,"host"],[3796,17,3820,19],[3796,19,3820,21,"port"],[3796,23,3820,25],[3796,24,3820,26],[3796,27,3820,29,"hostAndPort"],[3796,38,3820,40],[3796,39,3820,41,"split"],[3796,44,3820,46],[3796,45,3820,47],[3796,48,3820,50],[3796,49,3820,51],[3797,6,3821,8],[3797,13,3821,15],[3798,8,3821,17,"host"],[3798,12,3821,21],[3799,8,3821,23,"port"],[3799,12,3821,27],[3799,14,3821,29,"parsePort"],[3799,23,3821,38],[3799,24,3821,39,"port"],[3799,28,3821,43],[3800,6,3821,45],[3800,7,3821,46],[3801,4,3822,4],[3802,2,3823,0],[3803,2,3824,0],[3803,11,3824,9,"parsePort"],[3803,20,3824,18,"parsePort"],[3803,21,3824,19,"portStr"],[3803,28,3824,26],[3803,30,3824,28],[3804,4,3825,4],[3804,8,3825,8],[3804,9,3825,9,"portStr"],[3804,16,3825,16],[3804,18,3825,18],[3805,6,3826,8],[3805,13,3826,15],[3805,17,3826,19],[3806,4,3827,4],[3807,4,3828,4],[3807,10,3828,10,"port"],[3807,14,3828,14],[3807,17,3828,17,"Number"],[3807,23,3828,23],[3807,24,3828,24,"portStr"],[3807,31,3828,31],[3807,32,3828,32],[3808,4,3829,4],[3808,8,3829,8,"isNaN"],[3808,13,3829,13],[3808,14,3829,14,"port"],[3808,18,3829,18],[3808,19,3829,19],[3808,21,3829,21],[3809,6,3830,8],[3809,13,3830,15],[3809,17,3830,19],[3810,4,3831,4],[3811,4,3832,4],[3811,11,3832,11,"port"],[3811,15,3832,15],[3812,2,3833,0],[3813,2,3834,0],[3813,11,3834,9,"emitEmulatorWarning"],[3813,30,3834,28,"emitEmulatorWarning"],[3813,31,3834,28],[3813,33,3834,31],[3814,4,3835,4],[3814,13,3835,13,"attachBanner"],[3814,25,3835,25,"attachBanner"],[3814,26,3835,25],[3814,28,3835,28],[3815,6,3836,8],[3815,12,3836,14,"el"],[3815,14,3836,16],[3815,17,3836,19,"document"],[3815,25,3836,27],[3815,26,3836,28,"createElement"],[3815,39,3836,41],[3815,40,3836,42],[3815,43,3836,45],[3815,44,3836,46],[3816,6,3837,8],[3816,12,3837,14,"sty"],[3816,15,3837,17],[3816,18,3837,20,"el"],[3816,20,3837,22],[3816,21,3837,23,"style"],[3816,26,3837,28],[3817,6,3838,8,"el"],[3817,8,3838,10],[3817,9,3838,11,"innerText"],[3817,18,3838,20],[3817,21,3839,12],[3817,88,3839,79],[3818,6,3840,8,"sty"],[3818,9,3840,11],[3818,10,3840,12,"position"],[3818,18,3840,20],[3818,21,3840,23],[3818,28,3840,30],[3819,6,3841,8,"sty"],[3819,9,3841,11],[3819,10,3841,12,"width"],[3819,15,3841,17],[3819,18,3841,20],[3819,24,3841,26],[3820,6,3842,8,"sty"],[3820,9,3842,11],[3820,10,3842,12,"backgroundColor"],[3820,25,3842,27],[3820,28,3842,30],[3820,37,3842,39],[3821,6,3843,8,"sty"],[3821,9,3843,11],[3821,10,3843,12,"border"],[3821,16,3843,18],[3821,19,3843,21],[3821,39,3843,41],[3822,6,3844,8,"sty"],[3822,9,3844,11],[3822,10,3844,12,"color"],[3822,15,3844,17],[3822,18,3844,20],[3822,27,3844,29],[3823,6,3845,8,"sty"],[3823,9,3845,11],[3823,10,3845,12,"bottom"],[3823,16,3845,18],[3823,19,3845,21],[3823,24,3845,26],[3824,6,3846,8,"sty"],[3824,9,3846,11],[3824,10,3846,12,"left"],[3824,14,3846,16],[3824,17,3846,19],[3824,22,3846,24],[3825,6,3847,8,"sty"],[3825,9,3847,11],[3825,10,3847,12,"margin"],[3825,16,3847,18],[3825,19,3847,21],[3825,24,3847,26],[3826,6,3848,8,"sty"],[3826,9,3848,11],[3826,10,3848,12,"zIndex"],[3826,16,3848,18],[3826,19,3848,21],[3826,26,3848,28],[3827,6,3849,8,"sty"],[3827,9,3849,11],[3827,10,3849,12,"textAlign"],[3827,19,3849,21],[3827,22,3849,24],[3827,30,3849,32],[3828,6,3850,8,"el"],[3828,8,3850,10],[3828,9,3850,11,"classList"],[3828,18,3850,20],[3828,19,3850,21,"add"],[3828,22,3850,24],[3828,23,3850,25],[3828,50,3850,52],[3828,51,3850,53],[3829,6,3851,8,"document"],[3829,14,3851,16],[3829,15,3851,17,"body"],[3829,19,3851,21],[3829,20,3851,22,"appendChild"],[3829,31,3851,33],[3829,32,3851,34,"el"],[3829,34,3851,36],[3829,35,3851,37],[3830,4,3852,4],[3831,4,3853,4],[3831,8,3853,8],[3831,15,3853,15,"console"],[3831,22,3853,22],[3831,27,3853,27],[3831,38,3853,38],[3831,42,3853,42],[3831,49,3853,49,"console"],[3831,56,3853,56],[3831,57,3853,57,"info"],[3831,61,3853,61],[3831,66,3853,66],[3831,76,3853,76],[3831,78,3853,78],[3832,6,3854,8,"console"],[3832,13,3854,15],[3832,14,3854,16,"info"],[3832,18,3854,20],[3832,19,3854,21],[3832,62,3854,64],[3832,65,3855,12],[3832,126,3855,73],[3832,129,3856,12],[3832,155,3856,38],[3832,156,3856,39],[3833,4,3857,4],[3834,4,3858,4],[3834,8,3858,8],[3834,15,3858,15,"window"],[3834,21,3858,21],[3834,26,3858,26],[3834,37,3858,37],[3834,41,3858,41],[3834,48,3858,48,"document"],[3834,56,3858,56],[3834,61,3858,61],[3834,72,3858,72],[3834,74,3858,74],[3835,6,3859,8],[3835,10,3859,12,"document"],[3835,18,3859,20],[3835,19,3859,21,"readyState"],[3835,29,3859,31],[3835,34,3859,36],[3835,43,3859,45],[3835,45,3859,47],[3836,8,3860,12,"window"],[3836,14,3860,18],[3836,15,3860,19,"addEventListener"],[3836,31,3860,35],[3836,32,3860,36],[3836,50,3860,54],[3836,52,3860,56,"attachBanner"],[3836,64,3860,68],[3836,65,3860,69],[3837,6,3861,8],[3837,7,3861,9],[3837,13,3862,13],[3838,8,3863,12,"attachBanner"],[3838,20,3863,24],[3838,21,3863,25],[3838,22,3863,26],[3839,6,3864,8],[3840,4,3865,4],[3841,2,3866,0],[3843,2,3868,0],[3844,0,3869,0],[3845,0,3870,0],[3846,0,3871,0],[3847,0,3872,0],[3848,0,3873,0],[3849,0,3874,0],[3850,0,3875,0],[3851,0,3876,0],[3852,0,3877,0],[3853,0,3878,0],[3854,0,3879,0],[3855,0,3880,0],[3856,0,3881,0],[3857,0,3882,0],[3858,0,3883,0],[3859,2,3884,0],[3860,0,3885,0],[3861,0,3886,0],[3862,0,3887,0],[3863,0,3888,0],[3864,0,3889,0],[3865,0,3890,0],[3866,0,3891,0],[3867,2,3892,0],[3867,8,3892,6,"AuthCredential"],[3867,22,3892,20],[3867,23,3892,21],[3868,4,3893,4],[3869,4,3894,4,"constructor"],[3869,15,3894,15,"constructor"],[3870,4,3895,4],[3871,0,3896,0],[3872,0,3897,0],[3873,0,3898,0],[3874,0,3899,0],[3875,0,3900,0],[3876,4,3901,4,"providerId"],[3876,14,3901,14],[3877,4,3902,4],[3878,0,3903,0],[3879,0,3904,0],[3880,0,3905,0],[3881,0,3906,0],[3882,0,3907,0],[3883,0,3908,0],[3884,0,3909,0],[3885,4,3910,4,"signInMethod"],[3885,16,3910,16],[3885,18,3910,18],[3886,6,3911,8],[3886,10,3911,12],[3886,11,3911,13,"providerId"],[3886,21,3911,23],[3886,24,3911,26,"providerId"],[3886,34,3911,36],[3887,6,3912,8],[3887,10,3912,12],[3887,11,3912,13,"signInMethod"],[3887,23,3912,25],[3887,26,3912,28,"signInMethod"],[3887,38,3912,40],[3888,4,3913,4],[3889,4,3914,4],[3890,0,3915,0],[3891,0,3916,0],[3892,0,3917,0],[3893,0,3918,0],[3894,4,3919,4,"toJSON"],[3894,10,3919,10,"toJSON"],[3894,11,3919,10],[3894,13,3919,13],[3895,6,3920,8],[3895,13,3920,15,"debugFail"],[3895,22,3920,24],[3895,23,3920,25],[3895,40,3920,42],[3895,41,3920,43],[3896,4,3921,4],[3897,4,3922,4],[3898,4,3923,4,"_getIdTokenResponse"],[3898,23,3923,23,"_getIdTokenResponse"],[3898,24,3923,24,"_auth"],[3898,29,3923,29],[3898,31,3923,31],[3899,6,3924,8],[3899,13,3924,15,"debugFail"],[3899,22,3924,24],[3899,23,3924,25],[3899,40,3924,42],[3899,41,3924,43],[3900,4,3925,4],[3901,4,3926,4],[3902,4,3927,4,"_linkToIdToken"],[3902,18,3927,18,"_linkToIdToken"],[3902,19,3927,19,"_auth"],[3902,24,3927,24],[3902,26,3927,26,"_idToken"],[3902,34,3927,34],[3902,36,3927,36],[3903,6,3928,8],[3903,13,3928,15,"debugFail"],[3903,22,3928,24],[3903,23,3928,25],[3903,40,3928,42],[3903,41,3928,43],[3904,4,3929,4],[3905,4,3930,4],[3906,4,3931,4,"_getReauthenticationResolver"],[3906,32,3931,32,"_getReauthenticationResolver"],[3906,33,3931,33,"_auth"],[3906,38,3931,38],[3906,40,3931,40],[3907,6,3932,8],[3907,13,3932,15,"debugFail"],[3907,22,3932,24],[3907,23,3932,25],[3907,40,3932,42],[3907,41,3932,43],[3908,4,3933,4],[3909,2,3934,0],[3911,2,3936,0],[3912,0,3937,0],[3913,0,3938,0],[3914,0,3939,0],[3915,0,3940,0],[3916,0,3941,0],[3917,0,3942,0],[3918,0,3943,0],[3919,0,3944,0],[3920,0,3945,0],[3921,0,3946,0],[3922,0,3947,0],[3923,0,3948,0],[3924,0,3949,0],[3925,0,3950,0],[3926,0,3951,0],[3927,2,3936,0,"exports"],[3927,9,3936,0],[3927,10,3936,0,"M"],[3927,11,3936,0],[3927,14,3936,0,"AuthCredential"],[3927,28,3936,0],[3928,2,3952,0],[3928,17,3952,15,"resetPassword"],[3928,30,3952,28,"resetPassword"],[3928,31,3952,29,"auth"],[3928,35,3952,33],[3928,37,3952,35,"request"],[3928,44,3952,42],[3928,46,3952,44],[3929,4,3953,4],[3929,11,3953,11,"_performApiRequest"],[3929,29,3953,29],[3929,30,3953,30,"auth"],[3929,34,3953,34],[3929,36,3953,36],[3929,42,3953,42],[3929,43,3953,43],[3929,66,3953,66],[3929,94,3953,94],[3929,95,3953,95],[3929,126,3953,126,"_addTidIfNecessary"],[3929,144,3953,144],[3929,145,3953,145,"auth"],[3929,149,3953,149],[3929,151,3953,151,"request"],[3929,158,3953,158],[3929,159,3953,159],[3929,160,3953,160],[3930,2,3954,0],[3931,2,3955,0],[3931,17,3955,15,"updateEmailPassword"],[3931,36,3955,34,"updateEmailPassword"],[3931,37,3955,35,"auth"],[3931,41,3955,39],[3931,43,3955,41,"request"],[3931,50,3955,48],[3931,52,3955,50],[3932,4,3956,4],[3932,11,3956,11,"_performApiRequest"],[3932,29,3956,29],[3932,30,3956,30,"auth"],[3932,34,3956,34],[3932,36,3956,36],[3932,42,3956,42],[3932,43,3956,43],[3932,66,3956,66],[3932,87,3956,87],[3932,88,3956,88],[3932,121,3956,121,"request"],[3932,128,3956,128],[3932,129,3956,129],[3933,2,3957,0],[3934,2,3958,0],[3935,2,3959,0],[3936,2,3960,0],[3936,17,3960,15,"linkEmailPassword"],[3936,34,3960,32,"linkEmailPassword"],[3936,35,3960,33,"auth"],[3936,39,3960,37],[3936,41,3960,39,"request"],[3936,48,3960,46],[3936,50,3960,48],[3937,4,3961,4],[3937,11,3961,11,"_performApiRequest"],[3937,29,3961,29],[3937,30,3961,30,"auth"],[3937,34,3961,34],[3937,36,3961,36],[3937,42,3961,42],[3937,43,3961,43],[3937,66,3961,66],[3937,87,3961,87],[3937,88,3961,88],[3937,112,3961,112,"request"],[3937,119,3961,119],[3937,120,3961,120],[3938,2,3962,0],[3939,2,3963,0],[3939,17,3963,15,"applyActionCode$1"],[3939,34,3963,32,"applyActionCode$1"],[3939,35,3963,33,"auth"],[3939,39,3963,37],[3939,41,3963,39,"request"],[3939,48,3963,46],[3939,50,3963,48],[3940,4,3964,4],[3940,11,3964,11,"_performApiRequest"],[3940,29,3964,29],[3940,30,3964,30,"auth"],[3940,34,3964,34],[3940,36,3964,36],[3940,42,3964,42],[3940,43,3964,43],[3940,66,3964,66],[3940,87,3964,87],[3940,88,3964,88],[3940,121,3964,121,"_addTidIfNecessary"],[3940,139,3964,139],[3940,140,3964,140,"auth"],[3940,144,3964,144],[3940,146,3964,146,"request"],[3940,153,3964,153],[3940,154,3964,154],[3940,155,3964,155],[3941,2,3965,0],[3943,2,3967,0],[3944,0,3968,0],[3945,0,3969,0],[3946,0,3970,0],[3947,0,3971,0],[3948,0,3972,0],[3949,0,3973,0],[3950,0,3974,0],[3951,0,3975,0],[3952,0,3976,0],[3953,0,3977,0],[3954,0,3978,0],[3955,0,3979,0],[3956,0,3980,0],[3957,0,3981,0],[3958,0,3982,0],[3959,2,3983,0],[3959,17,3983,15,"signInWithPassword"],[3959,35,3983,33,"signInWithPassword"],[3959,36,3983,34,"auth"],[3959,40,3983,38],[3959,42,3983,40,"request"],[3959,49,3983,47],[3959,51,3983,49],[3960,4,3984,4],[3960,11,3984,11,"_performSignInRequest"],[3960,32,3984,32],[3960,33,3984,33,"auth"],[3960,37,3984,37],[3960,39,3984,39],[3960,45,3984,45],[3960,46,3984,46],[3960,69,3984,69],[3960,102,3984,102],[3960,103,3984,103],[3960,141,3984,141,"_addTidIfNecessary"],[3960,159,3984,159],[3960,160,3984,160,"auth"],[3960,164,3984,164],[3960,166,3984,166,"request"],[3960,173,3984,173],[3960,174,3984,174],[3960,175,3984,175],[3961,2,3985,0],[3962,2,3986,0],[3962,17,3986,15,"sendOobCode"],[3962,28,3986,26,"sendOobCode"],[3962,29,3986,27,"auth"],[3962,33,3986,31],[3962,35,3986,33,"request"],[3962,42,3986,40],[3962,44,3986,42],[3963,4,3987,4],[3963,11,3987,11,"_performApiRequest"],[3963,29,3987,29],[3963,30,3987,30,"auth"],[3963,34,3987,34],[3963,36,3987,36],[3963,42,3987,42],[3963,43,3987,43],[3963,66,3987,66],[3963,92,3987,92],[3963,93,3987,93],[3963,123,3987,123,"_addTidIfNecessary"],[3963,141,3987,141],[3963,142,3987,142,"auth"],[3963,146,3987,146],[3963,148,3987,148,"request"],[3963,155,3987,155],[3963,156,3987,156],[3963,157,3987,157],[3964,2,3988,0],[3965,2,3989,0],[3965,17,3989,15,"sendEmailVerification$1"],[3965,40,3989,38,"sendEmailVerification$1"],[3965,41,3989,39,"auth"],[3965,45,3989,43],[3965,47,3989,45,"request"],[3965,54,3989,52],[3965,56,3989,54],[3966,4,3990,4],[3966,11,3990,11,"sendOobCode"],[3966,22,3990,22],[3966,23,3990,23,"auth"],[3966,27,3990,27],[3966,29,3990,29,"request"],[3966,36,3990,36],[3966,37,3990,37],[3967,2,3991,0],[3968,2,3992,0],[3968,17,3992,15,"sendPasswordResetEmail$1"],[3968,41,3992,39,"sendPasswordResetEmail$1"],[3968,42,3992,40,"auth"],[3968,46,3992,44],[3968,48,3992,46,"request"],[3968,55,3992,53],[3968,57,3992,55],[3969,4,3993,4],[3969,11,3993,11,"sendOobCode"],[3969,22,3993,22],[3969,23,3993,23,"auth"],[3969,27,3993,27],[3969,29,3993,29,"request"],[3969,36,3993,36],[3969,37,3993,37],[3970,2,3994,0],[3971,2,3995,0],[3971,17,3995,15,"sendSignInLinkToEmail$1"],[3971,40,3995,38,"sendSignInLinkToEmail$1"],[3971,41,3995,39,"auth"],[3971,45,3995,43],[3971,47,3995,45,"request"],[3971,54,3995,52],[3971,56,3995,54],[3972,4,3996,4],[3972,11,3996,11,"sendOobCode"],[3972,22,3996,22],[3972,23,3996,23,"auth"],[3972,27,3996,27],[3972,29,3996,29,"request"],[3972,36,3996,36],[3972,37,3996,37],[3973,2,3997,0],[3974,2,3998,0],[3974,17,3998,15,"verifyAndChangeEmail"],[3974,37,3998,35,"verifyAndChangeEmail"],[3974,38,3998,36,"auth"],[3974,42,3998,40],[3974,44,3998,42,"request"],[3974,51,3998,49],[3974,53,3998,51],[3975,4,3999,4],[3975,11,3999,11,"sendOobCode"],[3975,22,3999,22],[3975,23,3999,23,"auth"],[3975,27,3999,27],[3975,29,3999,29,"request"],[3975,36,3999,36],[3975,37,3999,37],[3976,2,4000,0],[3978,2,4002,0],[3979,0,4003,0],[3980,0,4004,0],[3981,0,4005,0],[3982,0,4006,0],[3983,0,4007,0],[3984,0,4008,0],[3985,0,4009,0],[3986,0,4010,0],[3987,0,4011,0],[3988,0,4012,0],[3989,0,4013,0],[3990,0,4014,0],[3991,0,4015,0],[3992,0,4016,0],[3993,0,4017,0],[3994,2,4018,0],[3994,17,4018,15,"signInWithEmailLink$1"],[3994,38,4018,36,"signInWithEmailLink$1"],[3994,39,4018,37,"auth"],[3994,43,4018,41],[3994,45,4018,43,"request"],[3994,52,4018,50],[3994,54,4018,52],[3995,4,4019,4],[3995,11,4019,11,"_performSignInRequest"],[3995,32,4019,32],[3995,33,4019,33,"auth"],[3995,37,4019,37],[3995,39,4019,39],[3995,45,4019,45],[3995,46,4019,46],[3995,69,4019,69],[3995,103,4019,103],[3995,104,4019,104],[3995,144,4019,144,"_addTidIfNecessary"],[3995,162,4019,162],[3995,163,4019,163,"auth"],[3995,167,4019,167],[3995,169,4019,169,"request"],[3995,176,4019,176],[3995,177,4019,177],[3995,178,4019,178],[3996,2,4020,0],[3997,2,4021,0],[3997,17,4021,15,"signInWithEmailLinkForLinking"],[3997,46,4021,44,"signInWithEmailLinkForLinking"],[3997,47,4021,45,"auth"],[3997,51,4021,49],[3997,53,4021,51,"request"],[3997,60,4021,58],[3997,62,4021,60],[3998,4,4022,4],[3998,11,4022,11,"_performSignInRequest"],[3998,32,4022,32],[3998,33,4022,33,"auth"],[3998,37,4022,37],[3998,39,4022,39],[3998,45,4022,45],[3998,46,4022,46],[3998,69,4022,69],[3998,103,4022,103],[3998,104,4022,104],[3998,144,4022,144,"_addTidIfNecessary"],[3998,162,4022,162],[3998,163,4022,163,"auth"],[3998,167,4022,167],[3998,169,4022,169,"request"],[3998,176,4022,176],[3998,177,4022,177],[3998,178,4022,178],[3999,2,4023,0],[4001,2,4025,0],[4002,0,4026,0],[4003,0,4027,0],[4004,0,4028,0],[4005,0,4029,0],[4006,0,4030,0],[4007,0,4031,0],[4008,0,4032,0],[4009,0,4033,0],[4010,0,4034,0],[4011,0,4035,0],[4012,0,4036,0],[4013,0,4037,0],[4014,0,4038,0],[4015,0,4039,0],[4016,0,4040,0],[4017,2,4041,0],[4018,0,4042,0],[4019,0,4043,0],[4020,0,4044,0],[4021,0,4045,0],[4022,0,4046,0],[4023,0,4047,0],[4024,0,4048,0],[4025,0,4049,0],[4026,0,4050,0],[4027,2,4051,0],[4027,8,4051,6,"EmailAuthCredential"],[4027,27,4051,25],[4027,36,4051,34,"AuthCredential"],[4027,50,4051,48],[4027,51,4051,49],[4028,4,4052,4],[4029,4,4053,4,"constructor"],[4029,15,4053,15,"constructor"],[4029,16,4054,4],[4030,4,4055,4,"_email"],[4030,10,4055,10],[4030,12,4056,4],[4031,4,4057,4,"_password"],[4031,13,4057,13],[4031,15,4057,15,"signInMethod"],[4031,27,4057,27],[4031,29,4058,4],[4032,4,4059,4,"_tenantId"],[4032,13,4059,13],[4032,16,4059,16],[4032,20,4059,20],[4032,22,4059,22],[4033,6,4060,8],[4033,11,4060,13],[4033,12,4060,14],[4033,22,4060,24],[4033,23,4060,25],[4033,50,4060,52,"signInMethod"],[4033,62,4060,64],[4033,63,4060,65],[4034,6,4061,8],[4034,10,4061,12],[4034,11,4061,13,"_email"],[4034,17,4061,19],[4034,20,4061,22,"_email"],[4034,26,4061,28],[4035,6,4062,8],[4035,10,4062,12],[4035,11,4062,13,"_password"],[4035,20,4062,22],[4035,23,4062,25,"_password"],[4035,32,4062,34],[4036,6,4063,8],[4036,10,4063,12],[4036,11,4063,13,"_tenantId"],[4036,20,4063,22],[4036,23,4063,25,"_tenantId"],[4036,32,4063,34],[4037,4,4064,4],[4038,4,4065,4],[4039,4,4066,4],[4039,11,4066,11,"_fromEmailAndPassword"],[4039,32,4066,32,"_fromEmailAndPassword"],[4039,33,4066,33,"email"],[4039,38,4066,38],[4039,40,4066,40,"password"],[4039,48,4066,48],[4039,50,4066,50],[4040,6,4067,8],[4040,13,4067,15],[4040,17,4067,19,"EmailAuthCredential"],[4040,36,4067,38],[4040,37,4067,39,"email"],[4040,42,4067,44],[4040,44,4067,46,"password"],[4040,52,4067,54],[4040,54,4067,56],[4040,64,4067,66],[4040,65,4067,67],[4040,98,4067,100],[4040,99,4067,101],[4041,4,4068,4],[4042,4,4069,4],[4043,4,4070,4],[4043,11,4070,11,"_fromEmailAndCode"],[4043,28,4070,28,"_fromEmailAndCode"],[4043,29,4070,29,"email"],[4043,34,4070,34],[4043,36,4070,36,"oobCode"],[4043,43,4070,43],[4043,45,4070,45,"tenantId"],[4043,53,4070,53],[4043,56,4070,56],[4043,60,4070,60],[4043,62,4070,62],[4044,6,4071,8],[4044,13,4071,15],[4044,17,4071,19,"EmailAuthCredential"],[4044,36,4071,38],[4044,37,4071,39,"email"],[4044,42,4071,44],[4044,44,4071,46,"oobCode"],[4044,51,4071,53],[4044,53,4071,55],[4044,64,4071,66],[4044,65,4071,67],[4044,96,4071,98,"tenantId"],[4044,104,4071,106],[4044,105,4071,107],[4045,4,4072,4],[4046,4,4073,4],[4047,4,4074,4,"toJSON"],[4047,10,4074,10,"toJSON"],[4047,11,4074,10],[4047,13,4074,13],[4048,6,4075,8],[4048,13,4075,15],[4049,8,4076,12,"email"],[4049,13,4076,17],[4049,15,4076,19],[4049,19,4076,23],[4049,20,4076,24,"_email"],[4049,26,4076,30],[4050,8,4077,12,"password"],[4050,16,4077,20],[4050,18,4077,22],[4050,22,4077,26],[4050,23,4077,27,"_password"],[4050,32,4077,36],[4051,8,4078,12,"signInMethod"],[4051,20,4078,24],[4051,22,4078,26],[4051,26,4078,30],[4051,27,4078,31,"signInMethod"],[4051,39,4078,43],[4052,8,4079,12,"tenantId"],[4052,16,4079,20],[4052,18,4079,22],[4052,22,4079,26],[4052,23,4079,27,"_tenantId"],[4053,6,4080,8],[4053,7,4080,9],[4054,4,4081,4],[4055,4,4082,4],[4056,0,4083,0],[4057,0,4084,0],[4058,0,4085,0],[4059,0,4086,0],[4060,0,4087,0],[4061,0,4088,0],[4062,0,4089,0],[4063,4,4090,4],[4063,11,4090,11,"fromJSON"],[4063,19,4090,19,"fromJSON"],[4063,20,4090,20,"json"],[4063,24,4090,24],[4063,26,4090,26],[4064,6,4091,8],[4064,12,4091,14,"obj"],[4064,15,4091,17],[4064,18,4091,20],[4064,25,4091,27,"json"],[4064,29,4091,31],[4064,34,4091,36],[4064,42,4091,44],[4064,45,4091,47,"JSON"],[4064,49,4091,51],[4064,50,4091,52,"parse"],[4064,55,4091,57],[4064,56,4091,58,"json"],[4064,60,4091,62],[4064,61,4091,63],[4064,64,4091,66,"json"],[4064,68,4091,70],[4065,6,4092,8],[4065,10,4092,12,"obj"],[4065,13,4092,15],[4065,15,4092,17,"email"],[4065,20,4092,22],[4065,24,4092,26,"obj"],[4065,27,4092,29],[4065,29,4092,31,"password"],[4065,37,4092,39],[4065,39,4092,41],[4066,8,4093,12],[4066,12,4093,16,"obj"],[4066,15,4093,19],[4066,16,4093,20,"signInMethod"],[4066,28,4093,32],[4066,33,4093,37],[4066,43,4093,47],[4066,44,4093,48],[4066,79,4093,83],[4067,10,4094,16],[4067,17,4094,23],[4067,21,4094,27],[4067,22,4094,28,"_fromEmailAndPassword"],[4067,43,4094,49],[4067,44,4094,50,"obj"],[4067,47,4094,53],[4067,48,4094,54,"email"],[4067,53,4094,59],[4067,55,4094,61,"obj"],[4067,58,4094,64],[4067,59,4094,65,"password"],[4067,67,4094,73],[4067,68,4094,74],[4068,8,4095,12],[4068,9,4095,13],[4068,15,4096,17],[4068,19,4096,21,"obj"],[4068,22,4096,24],[4068,23,4096,25,"signInMethod"],[4068,35,4096,37],[4068,40,4096,42],[4068,51,4096,53],[4068,52,4096,54],[4068,83,4096,85],[4069,10,4097,16],[4069,17,4097,23],[4069,21,4097,27],[4069,22,4097,28,"_fromEmailAndCode"],[4069,39,4097,45],[4069,40,4097,46,"obj"],[4069,43,4097,49],[4069,44,4097,50,"email"],[4069,49,4097,55],[4069,51,4097,57,"obj"],[4069,54,4097,60],[4069,55,4097,61,"password"],[4069,63,4097,69],[4069,65,4097,71,"obj"],[4069,68,4097,74],[4069,69,4097,75,"tenantId"],[4069,77,4097,83],[4069,78,4097,84],[4070,8,4098,12],[4071,6,4099,8],[4072,6,4100,8],[4072,13,4100,15],[4072,17,4100,19],[4073,4,4101,4],[4074,4,4102,4],[4075,4,4103,4],[4075,10,4103,10,"_getIdTokenResponse"],[4075,29,4103,29,"_getIdTokenResponse"],[4075,30,4103,30,"auth"],[4075,34,4103,34],[4075,36,4103,36],[4076,6,4104,8],[4076,14,4104,16],[4076,18,4104,20],[4076,19,4104,21,"signInMethod"],[4076,31,4104,33],[4077,8,4105,12],[4077,13,4105,17],[4077,23,4105,27],[4077,24,4105,28],[4078,10,4106,16],[4078,16,4106,22,"request"],[4078,23,4106,29],[4078,26,4106,32],[4079,12,4107,20,"returnSecureToken"],[4079,29,4107,37],[4079,31,4107,39],[4079,35,4107,43],[4080,12,4108,20,"email"],[4080,17,4108,25],[4080,19,4108,27],[4080,23,4108,31],[4080,24,4108,32,"_email"],[4080,30,4108,38],[4081,12,4109,20,"password"],[4081,20,4109,28],[4081,22,4109,30],[4081,26,4109,34],[4081,27,4109,35,"_password"],[4081,36,4109,44],[4082,12,4110,20,"clientType"],[4082,22,4110,30],[4082,24,4110,32],[4082,41,4110,49],[4082,42,4110,50],[4083,10,4111,16],[4083,11,4111,17],[4084,10,4112,16],[4084,17,4112,23,"handleRecaptchaFlow"],[4084,36,4112,42],[4084,37,4112,43,"auth"],[4084,41,4112,47],[4084,43,4112,49,"request"],[4084,50,4112,56],[4084,52,4112,58],[4084,72,4112,78],[4084,73,4112,79],[4084,122,4112,128,"signInWithPassword"],[4084,140,4112,146],[4084,142,4112,148],[4084,167,4112,173],[4084,168,4112,174],[4084,219,4112,225],[4084,220,4112,226],[4085,8,4113,12],[4085,13,4113,17],[4085,24,4113,28],[4085,25,4113,29],[4086,10,4114,16],[4086,17,4114,23,"signInWithEmailLink$1"],[4086,38,4114,44],[4086,39,4114,45,"auth"],[4086,43,4114,49],[4086,45,4114,51],[4087,12,4115,20,"email"],[4087,17,4115,25],[4087,19,4115,27],[4087,23,4115,31],[4087,24,4115,32,"_email"],[4087,30,4115,38],[4088,12,4116,20,"oobCode"],[4088,19,4116,27],[4088,21,4116,29],[4088,25,4116,33],[4088,26,4116,34,"_password"],[4089,10,4117,16],[4089,11,4117,17],[4089,12,4117,18],[4090,8,4118,12],[4091,10,4119,16,"_fail"],[4091,15,4119,21],[4091,16,4119,22,"auth"],[4091,20,4119,26],[4091,22,4119,28],[4091,38,4119,44],[4091,39,4119,45],[4091,73,4119,79],[4091,74,4119,80],[4092,6,4120,8],[4093,4,4121,4],[4094,4,4122,4],[4095,4,4123,4],[4095,10,4123,10,"_linkToIdToken"],[4095,24,4123,24,"_linkToIdToken"],[4095,25,4123,25,"auth"],[4095,29,4123,29],[4095,31,4123,31,"idToken"],[4095,38,4123,38],[4095,40,4123,40],[4096,6,4124,8],[4096,14,4124,16],[4096,18,4124,20],[4096,19,4124,21,"signInMethod"],[4096,31,4124,33],[4097,8,4125,12],[4097,13,4125,17],[4097,23,4125,27],[4097,24,4125,28],[4098,10,4126,16],[4098,16,4126,22,"request"],[4098,23,4126,29],[4098,26,4126,32],[4099,12,4127,20,"idToken"],[4099,19,4127,27],[4100,12,4128,20,"returnSecureToken"],[4100,29,4128,37],[4100,31,4128,39],[4100,35,4128,43],[4101,12,4129,20,"email"],[4101,17,4129,25],[4101,19,4129,27],[4101,23,4129,31],[4101,24,4129,32,"_email"],[4101,30,4129,38],[4102,12,4130,20,"password"],[4102,20,4130,28],[4102,22,4130,30],[4102,26,4130,34],[4102,27,4130,35,"_password"],[4102,36,4130,44],[4103,12,4131,20,"clientType"],[4103,22,4131,30],[4103,24,4131,32],[4103,41,4131,49],[4103,42,4131,50],[4104,10,4132,16],[4104,11,4132,17],[4105,10,4133,16],[4105,17,4133,23,"handleRecaptchaFlow"],[4105,36,4133,42],[4105,37,4133,43,"auth"],[4105,41,4133,47],[4105,43,4133,49,"request"],[4105,50,4133,56],[4105,52,4133,58],[4105,68,4133,74],[4105,69,4133,75],[4105,113,4133,119,"linkEmailPassword"],[4105,130,4133,136],[4105,132,4133,138],[4105,157,4133,163],[4105,158,4133,164],[4105,209,4133,215],[4105,210,4133,216],[4106,8,4134,12],[4106,13,4134,17],[4106,24,4134,28],[4106,25,4134,29],[4107,10,4135,16],[4107,17,4135,23,"signInWithEmailLinkForLinking"],[4107,46,4135,52],[4107,47,4135,53,"auth"],[4107,51,4135,57],[4107,53,4135,59],[4108,12,4136,20,"idToken"],[4108,19,4136,27],[4109,12,4137,20,"email"],[4109,17,4137,25],[4109,19,4137,27],[4109,23,4137,31],[4109,24,4137,32,"_email"],[4109,30,4137,38],[4110,12,4138,20,"oobCode"],[4110,19,4138,27],[4110,21,4138,29],[4110,25,4138,33],[4110,26,4138,34,"_password"],[4111,10,4139,16],[4111,11,4139,17],[4111,12,4139,18],[4112,8,4140,12],[4113,10,4141,16,"_fail"],[4113,15,4141,21],[4113,16,4141,22,"auth"],[4113,20,4141,26],[4113,22,4141,28],[4113,38,4141,44],[4113,39,4141,45],[4113,73,4141,79],[4113,74,4141,80],[4114,6,4142,8],[4115,4,4143,4],[4116,4,4144,4],[4117,4,4145,4,"_getReauthenticationResolver"],[4117,32,4145,32,"_getReauthenticationResolver"],[4117,33,4145,33,"auth"],[4117,37,4145,37],[4117,39,4145,39],[4118,6,4146,8],[4118,13,4146,15],[4118,17,4146,19],[4118,18,4146,20,"_getIdTokenResponse"],[4118,37,4146,39],[4118,38,4146,40,"auth"],[4118,42,4146,44],[4118,43,4146,45],[4119,4,4147,4],[4120,2,4148,0],[4122,2,4150,0],[4123,0,4151,0],[4124,0,4152,0],[4125,0,4153,0],[4126,0,4154,0],[4127,0,4155,0],[4128,0,4156,0],[4129,0,4157,0],[4130,0,4158,0],[4131,0,4159,0],[4132,0,4160,0],[4133,0,4161,0],[4134,0,4162,0],[4135,0,4163,0],[4136,0,4164,0],[4137,0,4165,0],[4138,2,4150,0,"exports"],[4138,9,4150,0],[4138,10,4150,0,"N"],[4138,11,4150,0],[4138,14,4150,0,"EmailAuthCredential"],[4138,33,4150,0],[4139,2,4166,0],[4139,17,4166,15,"signInWithIdp"],[4139,30,4166,28,"signInWithIdp"],[4139,31,4166,29,"auth"],[4139,35,4166,33],[4139,37,4166,35,"request"],[4139,44,4166,42],[4139,46,4166,44],[4140,4,4167,4],[4140,11,4167,11,"_performSignInRequest"],[4140,32,4167,32],[4140,33,4167,33,"auth"],[4140,37,4167,37],[4140,39,4167,39],[4140,45,4167,45],[4140,46,4167,46],[4140,69,4167,69],[4140,97,4167,97],[4140,98,4167,98],[4140,131,4167,131,"_addTidIfNecessary"],[4140,149,4167,149],[4140,150,4167,150,"auth"],[4140,154,4167,154],[4140,156,4167,156,"request"],[4140,163,4167,163],[4140,164,4167,164],[4140,165,4167,165],[4141,2,4168,0],[4143,2,4170,0],[4144,0,4171,0],[4145,0,4172,0],[4146,0,4173,0],[4147,0,4174,0],[4148,0,4175,0],[4149,0,4176,0],[4150,0,4177,0],[4151,0,4178,0],[4152,0,4179,0],[4153,0,4180,0],[4154,0,4181,0],[4155,0,4182,0],[4156,0,4183,0],[4157,0,4184,0],[4158,0,4185,0],[4159,2,4186,0],[4159,8,4186,6,"IDP_REQUEST_URI$1"],[4159,25,4186,23],[4159,28,4186,26],[4159,46,4186,44],[4160,2,4187,0],[4161,0,4188,0],[4162,0,4189,0],[4163,0,4190,0],[4164,0,4191,0],[4165,0,4192,0],[4166,0,4193,0],[4167,0,4194,0],[4168,2,4195,0],[4168,8,4195,6,"OAuthCredential"],[4168,23,4195,21],[4168,32,4195,30,"AuthCredential"],[4168,46,4195,44],[4168,47,4195,45],[4169,4,4196,4,"constructor"],[4169,15,4196,15,"constructor"],[4169,16,4196,15],[4169,18,4196,18],[4170,6,4197,8],[4170,11,4197,13],[4170,12,4197,14],[4170,15,4197,17,"arguments"],[4170,24,4197,26],[4170,25,4197,27],[4171,6,4198,8],[4171,10,4198,12],[4171,11,4198,13,"pendingToken"],[4171,23,4198,25],[4171,26,4198,28],[4171,30,4198,32],[4172,4,4199,4],[4173,4,4200,4],[4174,4,4201,4],[4174,11,4201,11,"_fromParams"],[4174,22,4201,22,"_fromParams"],[4174,23,4201,23,"params"],[4174,29,4201,29],[4174,31,4201,31],[4175,6,4202,8],[4175,12,4202,14,"cred"],[4175,16,4202,18],[4175,19,4202,21],[4175,23,4202,25,"OAuthCredential"],[4175,38,4202,40],[4175,39,4202,41,"params"],[4175,45,4202,47],[4175,46,4202,48,"providerId"],[4175,56,4202,58],[4175,58,4202,60,"params"],[4175,64,4202,66],[4175,65,4202,67,"signInMethod"],[4175,77,4202,79],[4175,78,4202,80],[4176,6,4203,8],[4176,10,4203,12,"params"],[4176,16,4203,18],[4176,17,4203,19,"idToken"],[4176,24,4203,26],[4176,28,4203,30,"params"],[4176,34,4203,36],[4176,35,4203,37,"accessToken"],[4176,46,4203,48],[4176,48,4203,50],[4177,8,4204,12],[4178,8,4205,12],[4178,12,4205,16,"params"],[4178,18,4205,22],[4178,19,4205,23,"idToken"],[4178,26,4205,30],[4178,28,4205,32],[4179,10,4206,16,"cred"],[4179,14,4206,20],[4179,15,4206,21,"idToken"],[4179,22,4206,28],[4179,25,4206,31,"params"],[4179,31,4206,37],[4179,32,4206,38,"idToken"],[4179,39,4206,45],[4180,8,4207,12],[4181,8,4208,12],[4181,12,4208,16,"params"],[4181,18,4208,22],[4181,19,4208,23,"accessToken"],[4181,30,4208,34],[4181,32,4208,36],[4182,10,4209,16,"cred"],[4182,14,4209,20],[4182,15,4209,21,"accessToken"],[4182,26,4209,32],[4182,29,4209,35,"params"],[4182,35,4209,41],[4182,36,4209,42,"accessToken"],[4182,47,4209,53],[4183,8,4210,12],[4184,8,4211,12],[4185,8,4212,12],[4185,12,4212,16,"params"],[4185,18,4212,22],[4185,19,4212,23,"nonce"],[4185,24,4212,28],[4185,28,4212,32],[4185,29,4212,33,"params"],[4185,35,4212,39],[4185,36,4212,40,"pendingToken"],[4185,48,4212,52],[4185,50,4212,54],[4186,10,4213,16,"cred"],[4186,14,4213,20],[4186,15,4213,21,"nonce"],[4186,20,4213,26],[4186,23,4213,29,"params"],[4186,29,4213,35],[4186,30,4213,36,"nonce"],[4186,35,4213,41],[4187,8,4214,12],[4188,8,4215,12],[4188,12,4215,16,"params"],[4188,18,4215,22],[4188,19,4215,23,"pendingToken"],[4188,31,4215,35],[4188,33,4215,37],[4189,10,4216,16,"cred"],[4189,14,4216,20],[4189,15,4216,21,"pendingToken"],[4189,27,4216,33],[4189,30,4216,36,"params"],[4189,36,4216,42],[4189,37,4216,43,"pendingToken"],[4189,49,4216,55],[4190,8,4217,12],[4191,6,4218,8],[4191,7,4218,9],[4191,13,4219,13],[4191,17,4219,17,"params"],[4191,23,4219,23],[4191,24,4219,24,"oauthToken"],[4191,34,4219,34],[4191,38,4219,38,"params"],[4191,44,4219,44],[4191,45,4219,45,"oauthTokenSecret"],[4191,61,4219,61],[4191,63,4219,63],[4192,8,4220,12],[4193,8,4221,12,"cred"],[4193,12,4221,16],[4193,13,4221,17,"accessToken"],[4193,24,4221,28],[4193,27,4221,31,"params"],[4193,33,4221,37],[4193,34,4221,38,"oauthToken"],[4193,44,4221,48],[4194,8,4222,12,"cred"],[4194,12,4222,16],[4194,13,4222,17,"secret"],[4194,19,4222,23],[4194,22,4222,26,"params"],[4194,28,4222,32],[4194,29,4222,33,"oauthTokenSecret"],[4194,45,4222,49],[4195,6,4223,8],[4195,7,4223,9],[4195,13,4224,13],[4196,8,4225,12,"_fail"],[4196,13,4225,17],[4196,14,4225,18],[4196,30,4225,34],[4196,31,4225,35],[4196,65,4225,69],[4196,66,4225,70],[4197,6,4226,8],[4198,6,4227,8],[4198,13,4227,15,"cred"],[4198,17,4227,19],[4199,4,4228,4],[4200,4,4229,4],[4201,4,4230,4,"toJSON"],[4201,10,4230,10,"toJSON"],[4201,11,4230,10],[4201,13,4230,13],[4202,6,4231,8],[4202,13,4231,15],[4203,8,4232,12,"idToken"],[4203,15,4232,19],[4203,17,4232,21],[4203,21,4232,25],[4203,22,4232,26,"idToken"],[4203,29,4232,33],[4204,8,4233,12,"accessToken"],[4204,19,4233,23],[4204,21,4233,25],[4204,25,4233,29],[4204,26,4233,30,"accessToken"],[4204,37,4233,41],[4205,8,4234,12,"secret"],[4205,14,4234,18],[4205,16,4234,20],[4205,20,4234,24],[4205,21,4234,25,"secret"],[4205,27,4234,31],[4206,8,4235,12,"nonce"],[4206,13,4235,17],[4206,15,4235,19],[4206,19,4235,23],[4206,20,4235,24,"nonce"],[4206,25,4235,29],[4207,8,4236,12,"pendingToken"],[4207,20,4236,24],[4207,22,4236,26],[4207,26,4236,30],[4207,27,4236,31,"pendingToken"],[4207,39,4236,43],[4208,8,4237,12,"providerId"],[4208,18,4237,22],[4208,20,4237,24],[4208,24,4237,28],[4208,25,4237,29,"providerId"],[4208,35,4237,39],[4209,8,4238,12,"signInMethod"],[4209,20,4238,24],[4209,22,4238,26],[4209,26,4238,30],[4209,27,4238,31,"signInMethod"],[4210,6,4239,8],[4210,7,4239,9],[4211,4,4240,4],[4212,4,4241,4],[4213,0,4242,0],[4214,0,4243,0],[4215,0,4244,0],[4216,0,4245,0],[4217,0,4246,0],[4218,0,4247,0],[4219,0,4248,0],[4220,0,4249,0],[4221,4,4250,4],[4221,11,4250,11,"fromJSON"],[4221,19,4250,19,"fromJSON"],[4221,20,4250,20,"json"],[4221,24,4250,24],[4221,26,4250,26],[4222,6,4251,8],[4222,12,4251,14,"obj"],[4222,15,4251,17],[4222,18,4251,20],[4222,25,4251,27,"json"],[4222,29,4251,31],[4222,34,4251,36],[4222,42,4251,44],[4222,45,4251,47,"JSON"],[4222,49,4251,51],[4222,50,4251,52,"parse"],[4222,55,4251,57],[4222,56,4251,58,"json"],[4222,60,4251,62],[4222,61,4251,63],[4222,64,4251,66,"json"],[4222,68,4251,70],[4223,6,4252,8],[4223,12,4252,14],[4224,8,4252,16,"providerId"],[4224,18,4252,26],[4225,8,4252,28,"signInMethod"],[4225,20,4252,40],[4226,8,4252,42],[4226,11,4252,45,"rest"],[4227,6,4252,50],[4227,7,4252,51],[4227,10,4252,54,"obj"],[4227,13,4252,57],[4228,6,4253,8],[4228,10,4253,12],[4228,11,4253,13,"providerId"],[4228,21,4253,23],[4228,25,4253,27],[4228,26,4253,28,"signInMethod"],[4228,38,4253,40],[4228,40,4253,42],[4229,8,4254,12],[4229,15,4254,19],[4229,19,4254,23],[4230,6,4255,8],[4231,6,4256,8],[4231,12,4256,14,"cred"],[4231,16,4256,18],[4231,19,4256,21],[4231,23,4256,25,"OAuthCredential"],[4231,38,4256,40],[4231,39,4256,41,"providerId"],[4231,49,4256,51],[4231,51,4256,53,"signInMethod"],[4231,63,4256,65],[4231,64,4256,66],[4232,6,4257,8,"cred"],[4232,10,4257,12],[4232,11,4257,13,"idToken"],[4232,18,4257,20],[4232,21,4257,23,"rest"],[4232,25,4257,27],[4232,26,4257,28,"idToken"],[4232,33,4257,35],[4232,37,4257,39,"undefined"],[4232,46,4257,48],[4233,6,4258,8,"cred"],[4233,10,4258,12],[4233,11,4258,13,"accessToken"],[4233,22,4258,24],[4233,25,4258,27,"rest"],[4233,29,4258,31],[4233,30,4258,32,"accessToken"],[4233,41,4258,43],[4233,45,4258,47,"undefined"],[4233,54,4258,56],[4234,6,4259,8,"cred"],[4234,10,4259,12],[4234,11,4259,13,"secret"],[4234,17,4259,19],[4234,20,4259,22,"rest"],[4234,24,4259,26],[4234,25,4259,27,"secret"],[4234,31,4259,33],[4235,6,4260,8,"cred"],[4235,10,4260,12],[4235,11,4260,13,"nonce"],[4235,16,4260,18],[4235,19,4260,21,"rest"],[4235,23,4260,25],[4235,24,4260,26,"nonce"],[4235,29,4260,31],[4236,6,4261,8,"cred"],[4236,10,4261,12],[4236,11,4261,13,"pendingToken"],[4236,23,4261,25],[4236,26,4261,28,"rest"],[4236,30,4261,32],[4236,31,4261,33,"pendingToken"],[4236,43,4261,45],[4236,47,4261,49],[4236,51,4261,53],[4237,6,4262,8],[4237,13,4262,15,"cred"],[4237,17,4262,19],[4238,4,4263,4],[4239,4,4264,4],[4240,4,4265,4,"_getIdTokenResponse"],[4240,23,4265,23,"_getIdTokenResponse"],[4240,24,4265,24,"auth"],[4240,28,4265,28],[4240,30,4265,30],[4241,6,4266,8],[4241,12,4266,14,"request"],[4241,19,4266,21],[4241,22,4266,24],[4241,26,4266,28],[4241,27,4266,29,"buildRequest"],[4241,39,4266,41],[4241,40,4266,42],[4241,41,4266,43],[4242,6,4267,8],[4242,13,4267,15,"signInWithIdp"],[4242,26,4267,28],[4242,27,4267,29,"auth"],[4242,31,4267,33],[4242,33,4267,35,"request"],[4242,40,4267,42],[4242,41,4267,43],[4243,4,4268,4],[4244,4,4269,4],[4245,4,4270,4,"_linkToIdToken"],[4245,18,4270,18,"_linkToIdToken"],[4245,19,4270,19,"auth"],[4245,23,4270,23],[4245,25,4270,25,"idToken"],[4245,32,4270,32],[4245,34,4270,34],[4246,6,4271,8],[4246,12,4271,14,"request"],[4246,19,4271,21],[4246,22,4271,24],[4246,26,4271,28],[4246,27,4271,29,"buildRequest"],[4246,39,4271,41],[4246,40,4271,42],[4246,41,4271,43],[4247,6,4272,8,"request"],[4247,13,4272,15],[4247,14,4272,16,"idToken"],[4247,21,4272,23],[4247,24,4272,26,"idToken"],[4247,31,4272,33],[4248,6,4273,8],[4248,13,4273,15,"signInWithIdp"],[4248,26,4273,28],[4248,27,4273,29,"auth"],[4248,31,4273,33],[4248,33,4273,35,"request"],[4248,40,4273,42],[4248,41,4273,43],[4249,4,4274,4],[4250,4,4275,4],[4251,4,4276,4,"_getReauthenticationResolver"],[4251,32,4276,32,"_getReauthenticationResolver"],[4251,33,4276,33,"auth"],[4251,37,4276,37],[4251,39,4276,39],[4252,6,4277,8],[4252,12,4277,14,"request"],[4252,19,4277,21],[4252,22,4277,24],[4252,26,4277,28],[4252,27,4277,29,"buildRequest"],[4252,39,4277,41],[4252,40,4277,42],[4252,41,4277,43],[4253,6,4278,8,"request"],[4253,13,4278,15],[4253,14,4278,16,"autoCreate"],[4253,24,4278,26],[4253,27,4278,29],[4253,32,4278,34],[4254,6,4279,8],[4254,13,4279,15,"signInWithIdp"],[4254,26,4279,28],[4254,27,4279,29,"auth"],[4254,31,4279,33],[4254,33,4279,35,"request"],[4254,40,4279,42],[4254,41,4279,43],[4255,4,4280,4],[4256,4,4281,4,"buildRequest"],[4256,16,4281,16,"buildRequest"],[4256,17,4281,16],[4256,19,4281,19],[4257,6,4282,8],[4257,12,4282,14,"request"],[4257,19,4282,21],[4257,22,4282,24],[4258,8,4283,12,"requestUri"],[4258,18,4283,22],[4258,20,4283,24,"IDP_REQUEST_URI$1"],[4258,37,4283,41],[4259,8,4284,12,"returnSecureToken"],[4259,25,4284,29],[4259,27,4284,31],[4260,6,4285,8],[4260,7,4285,9],[4261,6,4286,8],[4261,10,4286,12],[4261,14,4286,16],[4261,15,4286,17,"pendingToken"],[4261,27,4286,29],[4261,29,4286,31],[4262,8,4287,12,"request"],[4262,15,4287,19],[4262,16,4287,20,"pendingToken"],[4262,28,4287,32],[4262,31,4287,35],[4262,35,4287,39],[4262,36,4287,40,"pendingToken"],[4262,48,4287,52],[4263,6,4288,8],[4263,7,4288,9],[4263,13,4289,13],[4264,8,4290,12],[4264,14,4290,18,"postBody"],[4264,22,4290,26],[4264,25,4290,29],[4264,26,4290,30],[4264,27,4290,31],[4265,8,4291,12],[4265,12,4291,16],[4265,16,4291,20],[4265,17,4291,21,"idToken"],[4265,24,4291,28],[4265,26,4291,30],[4266,10,4292,16,"postBody"],[4266,18,4292,24],[4266,19,4292,25],[4266,29,4292,35],[4266,30,4292,36],[4266,33,4292,39],[4266,37,4292,43],[4266,38,4292,44,"idToken"],[4266,45,4292,51],[4267,8,4293,12],[4268,8,4294,12],[4268,12,4294,16],[4268,16,4294,20],[4268,17,4294,21,"accessToken"],[4268,28,4294,32],[4268,30,4294,34],[4269,10,4295,16,"postBody"],[4269,18,4295,24],[4269,19,4295,25],[4269,33,4295,39],[4269,34,4295,40],[4269,37,4295,43],[4269,41,4295,47],[4269,42,4295,48,"accessToken"],[4269,53,4295,59],[4270,8,4296,12],[4271,8,4297,12],[4271,12,4297,16],[4271,16,4297,20],[4271,17,4297,21,"secret"],[4271,23,4297,27],[4271,25,4297,29],[4272,10,4298,16,"postBody"],[4272,18,4298,24],[4272,19,4298,25],[4272,39,4298,45],[4272,40,4298,46],[4272,43,4298,49],[4272,47,4298,53],[4272,48,4298,54,"secret"],[4272,54,4298,60],[4273,8,4299,12],[4274,8,4300,12,"postBody"],[4274,16,4300,20],[4274,17,4300,21],[4274,29,4300,33],[4274,30,4300,34],[4274,33,4300,37],[4274,37,4300,41],[4274,38,4300,42,"providerId"],[4274,48,4300,52],[4275,8,4301,12],[4275,12,4301,16],[4275,16,4301,20],[4275,17,4301,21,"nonce"],[4275,22,4301,26],[4275,26,4301,30],[4275,27,4301,31],[4275,31,4301,35],[4275,32,4301,36,"pendingToken"],[4275,44,4301,48],[4275,46,4301,50],[4276,10,4302,16,"postBody"],[4276,18,4302,24],[4276,19,4302,25],[4276,26,4302,32],[4276,27,4302,33],[4276,30,4302,36],[4276,34,4302,40],[4276,35,4302,41,"nonce"],[4276,40,4302,46],[4277,8,4303,12],[4278,8,4304,12,"request"],[4278,15,4304,19],[4278,16,4304,20,"postBody"],[4278,24,4304,28],[4278,27,4304,31],[4278,31,4304,31,"querystring"],[4278,48,4304,42],[4278,50,4304,43,"postBody"],[4278,58,4304,51],[4278,59,4304,52],[4279,6,4305,8],[4280,6,4306,8],[4280,13,4306,15,"request"],[4280,20,4306,22],[4281,4,4307,4],[4282,2,4308,0],[4284,2,4310,0],[4285,0,4311,0],[4286,0,4312,0],[4287,0,4313,0],[4288,0,4314,0],[4289,0,4315,0],[4290,0,4316,0],[4291,0,4317,0],[4292,0,4318,0],[4293,0,4319,0],[4294,0,4320,0],[4295,0,4321,0],[4296,0,4322,0],[4297,0,4323,0],[4298,0,4324,0],[4299,0,4325,0],[4300,2,4310,0,"exports"],[4300,9,4310,0],[4300,10,4310,0,"Q"],[4300,11,4310,0],[4300,14,4310,0,"OAuthCredential"],[4300,29,4310,0],[4301,2,4326,0],[4301,17,4326,15,"sendPhoneVerificationCode"],[4301,42,4326,40,"sendPhoneVerificationCode"],[4301,43,4326,41,"auth"],[4301,47,4326,45],[4301,49,4326,47,"request"],[4301,56,4326,54],[4301,58,4326,56],[4302,4,4327,4],[4302,11,4327,11,"_performApiRequest"],[4302,29,4327,29],[4302,30,4327,30,"auth"],[4302,34,4327,34],[4302,36,4327,36],[4302,42,4327,42],[4302,43,4327,43],[4302,66,4327,66],[4302,101,4327,101],[4302,102,4327,102],[4302,141,4327,141,"_addTidIfNecessary"],[4302,159,4327,159],[4302,160,4327,160,"auth"],[4302,164,4327,164],[4302,166,4327,166,"request"],[4302,173,4327,173],[4302,174,4327,174],[4302,175,4327,175],[4303,2,4328,0],[4304,2,4329,0],[4304,17,4329,15,"signInWithPhoneNumber$1"],[4304,40,4329,38,"signInWithPhoneNumber$1"],[4304,41,4329,39,"auth"],[4304,45,4329,43],[4304,47,4329,45,"request"],[4304,54,4329,52],[4304,56,4329,54],[4305,4,4330,4],[4305,11,4330,11,"_performSignInRequest"],[4305,32,4330,32],[4305,33,4330,33,"auth"],[4305,37,4330,37],[4305,39,4330,39],[4305,45,4330,45],[4305,46,4330,46],[4305,69,4330,69],[4305,105,4330,105],[4305,106,4330,106],[4305,148,4330,148,"_addTidIfNecessary"],[4305,166,4330,166],[4305,167,4330,167,"auth"],[4305,171,4330,171],[4305,173,4330,173,"request"],[4305,180,4330,180],[4305,181,4330,181],[4305,182,4330,182],[4306,2,4331,0],[4307,2,4332,0],[4307,17,4332,15,"linkWithPhoneNumber$1"],[4307,38,4332,36,"linkWithPhoneNumber$1"],[4307,39,4332,37,"auth"],[4307,43,4332,41],[4307,45,4332,43,"request"],[4307,52,4332,50],[4307,54,4332,52],[4308,4,4333,4],[4308,10,4333,10,"response"],[4308,18,4333,18],[4308,21,4333,21],[4308,27,4333,27,"_performSignInRequest"],[4308,48,4333,48],[4308,49,4333,49,"auth"],[4308,53,4333,53],[4308,55,4333,55],[4308,61,4333,61],[4308,62,4333,62],[4308,85,4333,85],[4308,121,4333,121],[4308,122,4333,122],[4308,164,4333,164,"_addTidIfNecessary"],[4308,182,4333,182],[4308,183,4333,183,"auth"],[4308,187,4333,187],[4308,189,4333,189,"request"],[4308,196,4333,196],[4308,197,4333,197],[4308,198,4333,198],[4309,4,4334,4],[4309,8,4334,8,"response"],[4309,16,4334,16],[4309,17,4334,17,"temporaryProof"],[4309,31,4334,31],[4309,33,4334,33],[4310,6,4335,8],[4310,12,4335,14,"_makeTaggedError"],[4310,28,4335,30],[4310,29,4335,31,"auth"],[4310,33,4335,35],[4310,35,4335,37],[4310,77,4335,79],[4310,78,4335,80],[4310,117,4335,119,"response"],[4310,125,4335,127],[4310,126,4335,128],[4311,4,4336,4],[4312,4,4337,4],[4312,11,4337,11,"response"],[4312,19,4337,19],[4313,2,4338,0],[4314,2,4339,0],[4314,8,4339,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4314,51,4339,49],[4314,54,4339,52],[4315,4,4340,4],[4315,5,4340,5],[4315,21,4340,21],[4315,22,4340,22],[4315,57,4340,57],[4315,73,4340,73],[4315,74,4340,74],[4316,2,4341,0],[4316,3,4341,1],[4317,2,4342,0],[4317,17,4342,15,"verifyPhoneNumberForExisting"],[4317,45,4342,43,"verifyPhoneNumberForExisting"],[4317,46,4342,44,"auth"],[4317,50,4342,48],[4317,52,4342,50,"request"],[4317,59,4342,57],[4317,61,4342,59],[4318,4,4343,4],[4318,10,4343,10,"apiRequest"],[4318,20,4343,20],[4318,23,4343,23],[4319,6,4344,8],[4319,9,4344,11,"request"],[4319,16,4344,18],[4320,6,4345,8,"operation"],[4320,15,4345,17],[4320,17,4345,19],[4321,4,4346,4],[4321,5,4346,5],[4322,4,4347,4],[4322,11,4347,11,"_performSignInRequest"],[4322,32,4347,32],[4322,33,4347,33,"auth"],[4322,37,4347,37],[4322,39,4347,39],[4322,45,4347,45],[4322,46,4347,46],[4322,69,4347,69],[4322,105,4347,105],[4322,106,4347,106],[4322,148,4347,148,"_addTidIfNecessary"],[4322,166,4347,166],[4322,167,4347,167,"auth"],[4322,171,4347,171],[4322,173,4347,173,"apiRequest"],[4322,183,4347,183],[4322,184,4347,184],[4322,186,4347,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4322,229,4347,229],[4322,230,4347,230],[4323,2,4348,0],[4325,2,4350,0],[4326,0,4351,0],[4327,0,4352,0],[4328,0,4353,0],[4329,0,4354,0],[4330,0,4355,0],[4331,0,4356,0],[4332,0,4357,0],[4333,0,4358,0],[4334,0,4359,0],[4335,0,4360,0],[4336,0,4361,0],[4337,0,4362,0],[4338,0,4363,0],[4339,0,4364,0],[4340,0,4365,0],[4341,2,4366,0],[4342,0,4367,0],[4343,0,4368,0],[4344,0,4369,0],[4345,0,4370,0],[4346,2,4371,0],[4346,8,4371,6,"PhoneAuthCredential"],[4346,27,4371,25],[4346,36,4371,34,"AuthCredential"],[4346,50,4371,48],[4346,51,4371,49],[4347,4,4372,4,"constructor"],[4347,15,4372,15,"constructor"],[4347,16,4372,16,"params"],[4347,22,4372,22],[4347,24,4372,24],[4348,6,4373,8],[4348,11,4373,13],[4348,12,4373,14],[4348,19,4373,21],[4348,20,4373,22],[4348,44,4373,46],[4348,51,4373,53],[4348,52,4373,54],[4348,76,4373,78],[4348,77,4373,79],[4349,6,4374,8],[4349,10,4374,12],[4349,11,4374,13,"params"],[4349,17,4374,19],[4349,20,4374,22,"params"],[4349,26,4374,28],[4350,4,4375,4],[4351,4,4376,4],[4352,4,4377,4],[4352,11,4377,11,"_fromVerification"],[4352,28,4377,28,"_fromVerification"],[4352,29,4377,29,"verificationId"],[4352,43,4377,43],[4352,45,4377,45,"verificationCode"],[4352,61,4377,61],[4352,63,4377,63],[4353,6,4378,8],[4353,13,4378,15],[4353,17,4378,19,"PhoneAuthCredential"],[4353,36,4378,38],[4353,37,4378,39],[4354,8,4378,41,"verificationId"],[4354,22,4378,55],[4355,8,4378,57,"verificationCode"],[4356,6,4378,74],[4356,7,4378,75],[4356,8,4378,76],[4357,4,4379,4],[4358,4,4380,4],[4359,4,4381,4],[4359,11,4381,11,"_fromTokenResponse"],[4359,29,4381,29,"_fromTokenResponse"],[4359,30,4381,30,"phoneNumber"],[4359,41,4381,41],[4359,43,4381,43,"temporaryProof"],[4359,57,4381,57],[4359,59,4381,59],[4360,6,4382,8],[4360,13,4382,15],[4360,17,4382,19,"PhoneAuthCredential"],[4360,36,4382,38],[4360,37,4382,39],[4361,8,4382,41,"phoneNumber"],[4361,19,4382,52],[4362,8,4382,54,"temporaryProof"],[4363,6,4382,69],[4363,7,4382,70],[4363,8,4382,71],[4364,4,4383,4],[4365,4,4384,4],[4366,4,4385,4,"_getIdTokenResponse"],[4366,23,4385,23,"_getIdTokenResponse"],[4366,24,4385,24,"auth"],[4366,28,4385,28],[4366,30,4385,30],[4367,6,4386,8],[4367,13,4386,15,"signInWithPhoneNumber$1"],[4367,36,4386,38],[4367,37,4386,39,"auth"],[4367,41,4386,43],[4367,43,4386,45],[4367,47,4386,49],[4367,48,4386,50,"_makeVerificationRequest"],[4367,72,4386,74],[4367,73,4386,75],[4367,74,4386,76],[4367,75,4386,77],[4368,4,4387,4],[4369,4,4388,4],[4370,4,4389,4,"_linkToIdToken"],[4370,18,4389,18,"_linkToIdToken"],[4370,19,4389,19,"auth"],[4370,23,4389,23],[4370,25,4389,25,"idToken"],[4370,32,4389,32],[4370,34,4389,34],[4371,6,4390,8],[4371,13,4390,15,"linkWithPhoneNumber$1"],[4371,34,4390,36],[4371,35,4390,37,"auth"],[4371,39,4390,41],[4371,41,4390,43],[4372,8,4391,12,"idToken"],[4372,15,4391,19],[4373,8,4392,12],[4373,11,4392,15],[4373,15,4392,19],[4373,16,4392,20,"_makeVerificationRequest"],[4373,40,4392,44],[4373,41,4392,45],[4374,6,4393,8],[4374,7,4393,9],[4374,8,4393,10],[4375,4,4394,4],[4376,4,4395,4],[4377,4,4396,4,"_getReauthenticationResolver"],[4377,32,4396,32,"_getReauthenticationResolver"],[4377,33,4396,33,"auth"],[4377,37,4396,37],[4377,39,4396,39],[4378,6,4397,8],[4378,13,4397,15,"verifyPhoneNumberForExisting"],[4378,41,4397,43],[4378,42,4397,44,"auth"],[4378,46,4397,48],[4378,48,4397,50],[4378,52,4397,54],[4378,53,4397,55,"_makeVerificationRequest"],[4378,77,4397,79],[4378,78,4397,80],[4378,79,4397,81],[4378,80,4397,82],[4379,4,4398,4],[4380,4,4399,4],[4381,4,4400,4,"_makeVerificationRequest"],[4381,28,4400,28,"_makeVerificationRequest"],[4381,29,4400,28],[4381,31,4400,31],[4382,6,4401,8],[4382,12,4401,14],[4383,8,4401,16,"temporaryProof"],[4383,22,4401,30],[4384,8,4401,32,"phoneNumber"],[4384,19,4401,43],[4385,8,4401,45,"verificationId"],[4385,22,4401,59],[4386,8,4401,61,"verificationCode"],[4387,6,4401,78],[4387,7,4401,79],[4387,10,4401,82],[4387,14,4401,86],[4387,15,4401,87,"params"],[4387,21,4401,93],[4388,6,4402,8],[4388,10,4402,12,"temporaryProof"],[4388,24,4402,26],[4388,28,4402,30,"phoneNumber"],[4388,39,4402,41],[4388,41,4402,43],[4389,8,4403,12],[4389,15,4403,19],[4390,10,4403,21,"temporaryProof"],[4390,24,4403,35],[4391,10,4403,37,"phoneNumber"],[4392,8,4403,49],[4392,9,4403,50],[4393,6,4404,8],[4394,6,4405,8],[4394,13,4405,15],[4395,8,4406,12,"sessionInfo"],[4395,19,4406,23],[4395,21,4406,25,"verificationId"],[4395,35,4406,39],[4396,8,4407,12,"code"],[4396,12,4407,16],[4396,14,4407,18,"verificationCode"],[4397,6,4408,8],[4397,7,4408,9],[4398,4,4409,4],[4399,4,4410,4],[4400,4,4411,4,"toJSON"],[4400,10,4411,10,"toJSON"],[4400,11,4411,10],[4400,13,4411,13],[4401,6,4412,8],[4401,12,4412,14,"obj"],[4401,15,4412,17],[4401,18,4412,20],[4402,8,4413,12,"providerId"],[4402,18,4413,22],[4402,20,4413,24],[4402,24,4413,28],[4402,25,4413,29,"providerId"],[4403,6,4414,8],[4403,7,4414,9],[4404,6,4415,8],[4404,10,4415,12],[4404,14,4415,16],[4404,15,4415,17,"params"],[4404,21,4415,23],[4404,22,4415,24,"phoneNumber"],[4404,33,4415,35],[4404,35,4415,37],[4405,8,4416,12,"obj"],[4405,11,4416,15],[4405,12,4416,16,"phoneNumber"],[4405,23,4416,27],[4405,26,4416,30],[4405,30,4416,34],[4405,31,4416,35,"params"],[4405,37,4416,41],[4405,38,4416,42,"phoneNumber"],[4405,49,4416,53],[4406,6,4417,8],[4407,6,4418,8],[4407,10,4418,12],[4407,14,4418,16],[4407,15,4418,17,"params"],[4407,21,4418,23],[4407,22,4418,24,"temporaryProof"],[4407,36,4418,38],[4407,38,4418,40],[4408,8,4419,12,"obj"],[4408,11,4419,15],[4408,12,4419,16,"temporaryProof"],[4408,26,4419,30],[4408,29,4419,33],[4408,33,4419,37],[4408,34,4419,38,"params"],[4408,40,4419,44],[4408,41,4419,45,"temporaryProof"],[4408,55,4419,59],[4409,6,4420,8],[4410,6,4421,8],[4410,10,4421,12],[4410,14,4421,16],[4410,15,4421,17,"params"],[4410,21,4421,23],[4410,22,4421,24,"verificationCode"],[4410,38,4421,40],[4410,40,4421,42],[4411,8,4422,12,"obj"],[4411,11,4422,15],[4411,12,4422,16,"verificationCode"],[4411,28,4422,32],[4411,31,4422,35],[4411,35,4422,39],[4411,36,4422,40,"params"],[4411,42,4422,46],[4411,43,4422,47,"verificationCode"],[4411,59,4422,63],[4412,6,4423,8],[4413,6,4424,8],[4413,10,4424,12],[4413,14,4424,16],[4413,15,4424,17,"params"],[4413,21,4424,23],[4413,22,4424,24,"verificationId"],[4413,36,4424,38],[4413,38,4424,40],[4414,8,4425,12,"obj"],[4414,11,4425,15],[4414,12,4425,16,"verificationId"],[4414,26,4425,30],[4414,29,4425,33],[4414,33,4425,37],[4414,34,4425,38,"params"],[4414,40,4425,44],[4414,41,4425,45,"verificationId"],[4414,55,4425,59],[4415,6,4426,8],[4416,6,4427,8],[4416,13,4427,15,"obj"],[4416,16,4427,18],[4417,4,4428,4],[4418,4,4429,4],[4419,4,4430,4],[4419,11,4430,11,"fromJSON"],[4419,19,4430,19,"fromJSON"],[4419,20,4430,20,"json"],[4419,24,4430,24],[4419,26,4430,26],[4420,6,4431,8],[4420,10,4431,12],[4420,17,4431,19,"json"],[4420,21,4431,23],[4420,26,4431,28],[4420,34,4431,36],[4420,36,4431,38],[4421,8,4432,12,"json"],[4421,12,4432,16],[4421,15,4432,19,"JSON"],[4421,19,4432,23],[4421,20,4432,24,"parse"],[4421,25,4432,29],[4421,26,4432,30,"json"],[4421,30,4432,34],[4421,31,4432,35],[4422,6,4433,8],[4423,6,4434,8],[4423,12,4434,14],[4424,8,4434,16,"verificationId"],[4424,22,4434,30],[4425,8,4434,32,"verificationCode"],[4425,24,4434,48],[4426,8,4434,50,"phoneNumber"],[4426,19,4434,61],[4427,8,4434,63,"temporaryProof"],[4428,6,4434,78],[4428,7,4434,79],[4428,10,4434,82,"json"],[4428,14,4434,86],[4429,6,4435,8],[4429,10,4435,12],[4429,11,4435,13,"verificationCode"],[4429,27,4435,29],[4429,31,4436,12],[4429,32,4436,13,"verificationId"],[4429,46,4436,27],[4429,50,4437,12],[4429,51,4437,13,"phoneNumber"],[4429,62,4437,24],[4429,66,4438,12],[4429,67,4438,13,"temporaryProof"],[4429,81,4438,27],[4429,83,4438,29],[4430,8,4439,12],[4430,15,4439,19],[4430,19,4439,23],[4431,6,4440,8],[4432,6,4441,8],[4432,13,4441,15],[4432,17,4441,19,"PhoneAuthCredential"],[4432,36,4441,38],[4432,37,4441,39],[4433,8,4442,12,"verificationId"],[4433,22,4442,26],[4434,8,4443,12,"verificationCode"],[4434,24,4443,28],[4435,8,4444,12,"phoneNumber"],[4435,19,4444,23],[4436,8,4445,12,"temporaryProof"],[4437,6,4446,8],[4437,7,4446,9],[4437,8,4446,10],[4438,4,4447,4],[4439,2,4448,0],[4441,2,4450,0],[4442,0,4451,0],[4443,0,4452,0],[4444,0,4453,0],[4445,0,4454,0],[4446,0,4455,0],[4447,0,4456,0],[4448,0,4457,0],[4449,0,4458,0],[4450,0,4459,0],[4451,0,4460,0],[4452,0,4461,0],[4453,0,4462,0],[4454,0,4463,0],[4455,0,4464,0],[4456,0,4465,0],[4457,2,4466,0],[4458,0,4467,0],[4459,0,4468,0],[4460,0,4469,0],[4461,0,4470,0],[4462,2,4466,0,"exports"],[4462,9,4466,0],[4462,10,4466,0,"U"],[4462,11,4466,0],[4462,14,4466,0,"PhoneAuthCredential"],[4462,33,4466,0],[4463,2,4471,0],[4463,11,4471,9,"parseMode"],[4463,20,4471,18,"parseMode"],[4463,21,4471,19,"mode"],[4463,25,4471,23],[4463,27,4471,25],[4464,4,4472,4],[4464,12,4472,12,"mode"],[4464,16,4472,16],[4465,6,4473,8],[4465,11,4473,13],[4465,25,4473,27],[4466,8,4474,12],[4466,15,4474,19],[4466,30,4474,34],[4466,31,4474,35],[4467,6,4475,8],[4467,11,4475,13],[4467,26,4475,28],[4468,8,4476,12],[4468,15,4476,19],[4468,31,4476,35],[4468,32,4476,36],[4469,6,4477,8],[4469,11,4477,13],[4469,19,4477,21],[4470,8,4478,12],[4470,15,4478,19],[4470,29,4478,33],[4470,30,4478,34],[4471,6,4479,8],[4471,11,4479,13],[4471,24,4479,26],[4472,8,4480,12],[4472,15,4480,19],[4472,29,4480,33],[4472,30,4480,34],[4473,6,4481,8],[4473,11,4481,13],[4473,33,4481,35],[4474,8,4482,12],[4474,15,4482,19],[4474,40,4482,44],[4474,41,4482,45],[4475,6,4483,8],[4475,11,4483,13],[4475,39,4483,41],[4476,8,4484,12],[4476,15,4484,19],[4476,46,4484,50],[4476,47,4484,51],[4477,6,4485,8],[4478,8,4486,12],[4478,15,4486,19],[4478,19,4486,23],[4479,4,4487,4],[4480,2,4488,0],[4481,2,4489,0],[4482,0,4490,0],[4483,0,4491,0],[4484,0,4492,0],[4485,0,4493,0],[4486,2,4494,0],[4486,11,4494,9,"parseDeepLink"],[4486,24,4494,22,"parseDeepLink"],[4486,25,4494,23,"url"],[4486,28,4494,26],[4486,30,4494,28],[4487,4,4495,4],[4487,10,4495,10,"link"],[4487,14,4495,14],[4487,17,4495,17],[4487,21,4495,17,"querystringDecode"],[4487,44,4495,34],[4487,46,4495,35],[4487,50,4495,35,"extractQuerystring"],[4487,74,4495,53],[4487,76,4495,54,"url"],[4487,79,4495,57],[4487,80,4495,58],[4487,81,4495,59],[4487,82,4495,60],[4487,88,4495,66],[4487,89,4495,67],[4488,4,4496,4],[4489,4,4497,4],[4489,10,4497,10,"doubleDeepLink"],[4489,24,4497,24],[4489,27,4497,27,"link"],[4489,31,4497,31],[4489,34,4498,10],[4489,38,4498,10,"querystringDecode"],[4489,61,4498,27],[4489,63,4498,28],[4489,67,4498,28,"extractQuerystring"],[4489,91,4498,46],[4489,93,4498,47,"link"],[4489,97,4498,51],[4489,98,4498,52],[4489,99,4498,53],[4489,100,4498,54],[4489,114,4498,68],[4489,115,4498,69],[4489,118,4499,10],[4489,122,4499,14],[4490,4,4500,4],[4491,4,4501,4],[4491,10,4501,10,"iOSDeepLink"],[4491,21,4501,21],[4491,24,4501,24],[4491,28,4501,24,"querystringDecode"],[4491,51,4501,41],[4491,53,4501,42],[4491,57,4501,42,"extractQuerystring"],[4491,81,4501,60],[4491,83,4501,61,"url"],[4491,86,4501,64],[4491,87,4501,65],[4491,88,4501,66],[4491,89,4501,67],[4491,103,4501,81],[4491,104,4501,82],[4492,4,4502,4],[4492,10,4502,10,"iOSDoubleDeepLink"],[4492,27,4502,27],[4492,30,4502,30,"iOSDeepLink"],[4492,41,4502,41],[4492,44,4503,10],[4492,48,4503,10,"querystringDecode"],[4492,71,4503,27],[4492,73,4503,28],[4492,77,4503,28,"extractQuerystring"],[4492,101,4503,46],[4492,103,4503,47,"iOSDeepLink"],[4492,114,4503,58],[4492,115,4503,59],[4492,116,4503,60],[4492,117,4503,61],[4492,123,4503,67],[4492,124,4503,68],[4492,127,4504,10],[4492,131,4504,14],[4493,4,4505,4],[4493,11,4505,11,"iOSDoubleDeepLink"],[4493,28,4505,28],[4493,32,4505,32,"iOSDeepLink"],[4493,43,4505,43],[4493,47,4505,47,"doubleDeepLink"],[4493,61,4505,61],[4493,65,4505,65,"link"],[4493,69,4505,69],[4493,73,4505,73,"url"],[4493,76,4505,76],[4494,2,4506,0],[4495,2,4507,0],[4496,0,4508,0],[4497,0,4509,0],[4498,0,4510,0],[4499,0,4511,0],[4500,0,4512,0],[4501,2,4513,0],[4501,8,4513,6,"ActionCodeURL"],[4501,21,4513,19],[4501,22,4513,20],[4502,4,4514,4],[4503,0,4515,0],[4504,0,4516,0],[4505,0,4517,0],[4506,0,4518,0],[4507,0,4519,0],[4508,4,4520,4,"constructor"],[4508,15,4520,15,"constructor"],[4508,16,4520,16,"actionLink"],[4508,26,4520,26],[4508,28,4520,28],[4509,6,4521,8],[4509,12,4521,14,"searchParams"],[4509,24,4521,26],[4509,27,4521,29],[4509,31,4521,29,"querystringDecode"],[4509,54,4521,46],[4509,56,4521,47],[4509,60,4521,47,"extractQuerystring"],[4509,84,4521,65],[4509,86,4521,66,"actionLink"],[4509,96,4521,76],[4509,97,4521,77],[4509,98,4521,78],[4510,6,4522,8],[4510,12,4522,14,"apiKey"],[4510,18,4522,20],[4510,21,4522,23,"searchParams"],[4510,33,4522,35],[4510,34,4522,36],[4510,42,4522,44],[4510,43,4522,45],[4510,68,4522,70],[4510,72,4522,74],[4510,76,4522,78],[4511,6,4523,8],[4511,12,4523,14,"code"],[4511,16,4523,18],[4511,19,4523,21,"searchParams"],[4511,31,4523,33],[4511,32,4523,34],[4511,41,4523,43],[4511,42,4523,44],[4511,64,4523,66],[4511,68,4523,70],[4511,72,4523,74],[4512,6,4524,8],[4512,12,4524,14,"operation"],[4512,21,4524,23],[4512,24,4524,26,"parseMode"],[4512,33,4524,35],[4512,34,4524,36,"searchParams"],[4512,46,4524,48],[4512,47,4524,49],[4512,53,4524,55],[4512,54,4524,56],[4512,76,4524,78],[4512,80,4524,82],[4512,84,4524,86],[4512,85,4524,87],[4513,6,4525,8],[4514,6,4526,8,"_assert"],[4514,13,4526,15],[4514,14,4526,16,"apiKey"],[4514,20,4526,22],[4514,24,4526,26,"code"],[4514,28,4526,30],[4514,32,4526,34,"operation"],[4514,41,4526,43],[4514,43,4526,45],[4514,59,4526,61],[4514,60,4526,62],[4514,94,4526,96],[4514,95,4526,97],[4515,6,4527,8],[4515,10,4527,12],[4515,11,4527,13,"apiKey"],[4515,17,4527,19],[4515,20,4527,22,"apiKey"],[4515,26,4527,28],[4516,6,4528,8],[4516,10,4528,12],[4516,11,4528,13,"operation"],[4516,20,4528,22],[4516,23,4528,25,"operation"],[4516,32,4528,34],[4517,6,4529,8],[4517,10,4529,12],[4517,11,4529,13,"code"],[4517,15,4529,17],[4517,18,4529,20,"code"],[4517,22,4529,24],[4518,6,4530,8],[4518,10,4530,12],[4518,11,4530,13,"continueUrl"],[4518,22,4530,24],[4518,25,4530,27,"searchParams"],[4518,37,4530,39],[4518,38,4530,40],[4518,51,4530,53],[4518,52,4530,54],[4518,82,4530,84],[4518,86,4530,88],[4518,90,4530,92],[4519,6,4531,8],[4519,10,4531,12],[4519,11,4531,13,"languageCode"],[4519,23,4531,25],[4519,26,4531,28,"searchParams"],[4519,38,4531,40],[4519,39,4531,41],[4519,45,4531,47],[4519,46,4531,48],[4519,77,4531,79],[4519,81,4531,83],[4519,85,4531,87],[4520,6,4532,8],[4520,10,4532,12],[4520,11,4532,13,"tenantId"],[4520,19,4532,21],[4520,22,4532,24,"searchParams"],[4520,34,4532,36],[4520,35,4532,37],[4520,45,4532,47],[4520,46,4532,48],[4520,73,4532,75],[4520,77,4532,79],[4520,81,4532,83],[4521,4,4533,4],[4522,4,4534,4],[4523,0,4535,0],[4524,0,4536,0],[4525,0,4537,0],[4526,0,4538,0],[4527,0,4539,0],[4528,0,4540,0],[4529,0,4541,0],[4530,0,4542,0],[4531,4,4543,4],[4531,11,4543,11,"parseLink"],[4531,20,4543,20,"parseLink"],[4531,21,4543,21,"link"],[4531,25,4543,25],[4531,27,4543,27],[4532,6,4544,8],[4532,12,4544,14,"actionLink"],[4532,22,4544,24],[4532,25,4544,27,"parseDeepLink"],[4532,38,4544,40],[4532,39,4544,41,"link"],[4532,43,4544,45],[4532,44,4544,46],[4533,6,4545,8],[4533,10,4545,12],[4534,8,4546,12],[4534,15,4546,19],[4534,19,4546,23,"ActionCodeURL"],[4534,32,4546,36],[4534,33,4546,37,"actionLink"],[4534,43,4546,47],[4534,44,4546,48],[4535,6,4547,8],[4535,7,4547,9],[4535,8,4548,8],[4535,14,4548,14],[4536,8,4549,12],[4536,15,4549,19],[4536,19,4549,23],[4537,6,4550,8],[4538,4,4551,4],[4539,2,4552,0],[4540,2,4553,0],[4541,0,4554,0],[4542,0,4555,0],[4543,0,4556,0],[4544,0,4557,0],[4545,0,4558,0],[4546,2,4553,0,"exports"],[4546,9,4553,0],[4546,10,4553,0,"aj"],[4546,12,4553,0],[4546,15,4553,0,"ActionCodeURL"],[4546,28,4553,0],[4547,2,4559,0],[4547,11,4559,9,"parseActionCodeURL"],[4547,29,4559,27,"parseActionCodeURL"],[4547,30,4559,28,"link"],[4547,34,4559,32],[4547,36,4559,34],[4548,4,4560,4],[4548,11,4560,11,"ActionCodeURL"],[4548,24,4560,24],[4548,25,4560,25,"parseLink"],[4548,34,4560,34],[4548,35,4560,35,"link"],[4548,39,4560,39],[4548,40,4560,40],[4549,2,4561,0],[4551,2,4563,0],[4552,0,4564,0],[4553,0,4565,0],[4554,0,4566,0],[4555,0,4567,0],[4556,0,4568,0],[4557,0,4569,0],[4558,0,4570,0],[4559,0,4571,0],[4560,0,4572,0],[4561,0,4573,0],[4562,0,4574,0],[4563,0,4575,0],[4564,0,4576,0],[4565,0,4577,0],[4566,0,4578,0],[4567,2,4579,0],[4568,0,4580,0],[4569,0,4581,0],[4570,0,4582,0],[4571,0,4583,0],[4572,2,4584,0],[4572,8,4584,6,"EmailAuthProvider"],[4572,25,4584,23],[4572,26,4584,24],[4573,4,4585,4,"constructor"],[4573,15,4585,15,"constructor"],[4573,16,4585,15],[4573,18,4585,18],[4574,6,4586,8],[4575,0,4587,0],[4576,0,4588,0],[4577,6,4589,8],[4577,10,4589,12],[4577,11,4589,13,"providerId"],[4577,21,4589,23],[4577,24,4589,26,"EmailAuthProvider"],[4577,41,4589,43],[4577,42,4589,44,"PROVIDER_ID"],[4577,53,4589,55],[4578,4,4590,4],[4579,4,4591,4],[4580,0,4592,0],[4581,0,4593,0],[4582,0,4594,0],[4583,0,4595,0],[4584,0,4596,0],[4585,0,4597,0],[4586,0,4598,0],[4587,0,4599,0],[4588,0,4600,0],[4589,0,4601,0],[4590,0,4602,0],[4591,0,4603,0],[4592,0,4604,0],[4593,0,4605,0],[4594,0,4606,0],[4595,0,4607,0],[4596,0,4608,0],[4597,4,4609,4],[4597,11,4609,11,"credential"],[4597,21,4609,21,"credential"],[4597,22,4609,22,"email"],[4597,27,4609,27],[4597,29,4609,29,"password"],[4597,37,4609,37],[4597,39,4609,39],[4598,6,4610,8],[4598,13,4610,15,"EmailAuthCredential"],[4598,32,4610,34],[4598,33,4610,35,"_fromEmailAndPassword"],[4598,54,4610,56],[4598,55,4610,57,"email"],[4598,60,4610,62],[4598,62,4610,64,"password"],[4598,70,4610,72],[4598,71,4610,73],[4599,4,4611,4],[4600,4,4612,4],[4601,0,4613,0],[4602,0,4614,0],[4603,0,4615,0],[4604,0,4616,0],[4605,0,4617,0],[4606,0,4618,0],[4607,0,4619,0],[4608,0,4620,0],[4609,0,4621,0],[4610,0,4622,0],[4611,0,4623,0],[4612,0,4624,0],[4613,0,4625,0],[4614,0,4626,0],[4615,0,4627,0],[4616,0,4628,0],[4617,0,4629,0],[4618,0,4630,0],[4619,0,4631,0],[4620,0,4632,0],[4621,0,4633,0],[4622,4,4634,4],[4622,11,4634,11,"credentialWithLink"],[4622,29,4634,29,"credentialWithLink"],[4622,30,4634,30,"email"],[4622,35,4634,35],[4622,37,4634,37,"emailLink"],[4622,46,4634,46],[4622,48,4634,48],[4623,6,4635,8],[4623,12,4635,14,"actionCodeUrl"],[4623,25,4635,27],[4623,28,4635,30,"ActionCodeURL"],[4623,41,4635,43],[4623,42,4635,44,"parseLink"],[4623,51,4635,53],[4623,52,4635,54,"emailLink"],[4623,61,4635,63],[4623,62,4635,64],[4624,6,4636,8,"_assert"],[4624,13,4636,15],[4624,14,4636,16,"actionCodeUrl"],[4624,27,4636,29],[4624,29,4636,31],[4624,45,4636,47],[4624,46,4636,48],[4624,80,4636,82],[4624,81,4636,83],[4625,6,4637,8],[4625,13,4637,15,"EmailAuthCredential"],[4625,32,4637,34],[4625,33,4637,35,"_fromEmailAndCode"],[4625,50,4637,52],[4625,51,4637,53,"email"],[4625,56,4637,58],[4625,58,4637,60,"actionCodeUrl"],[4625,71,4637,73],[4625,72,4637,74,"code"],[4625,76,4637,78],[4625,78,4637,80,"actionCodeUrl"],[4625,91,4637,93],[4625,92,4637,94,"tenantId"],[4625,100,4637,102],[4625,101,4637,103],[4626,4,4638,4],[4627,2,4639,0],[4628,2,4640,0],[4629,0,4641,0],[4630,0,4642,0],[4631,2,4640,0,"exports"],[4631,9,4640,0],[4631,10,4640,0,"W"],[4631,11,4640,0],[4631,14,4640,0,"EmailAuthProvider"],[4631,31,4640,0],[4632,2,4643,0,"EmailAuthProvider"],[4632,19,4643,17],[4632,20,4643,18,"PROVIDER_ID"],[4632,31,4643,29],[4632,34,4643,32],[4632,44,4643,42],[4632,45,4643,43],[4633,2,4644,0],[4634,0,4645,0],[4635,0,4646,0],[4636,2,4647,0,"EmailAuthProvider"],[4636,19,4647,17],[4636,20,4647,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[4636,49,4647,47],[4636,52,4647,50],[4636,62,4647,60],[4636,63,4647,61],[4637,2,4648,0],[4638,0,4649,0],[4639,0,4650,0],[4640,2,4651,0,"EmailAuthProvider"],[4640,19,4651,17],[4640,20,4651,18,"EMAIL_LINK_SIGN_IN_METHOD"],[4640,45,4651,43],[4640,48,4651,46],[4640,59,4651,57],[4640,60,4651,58],[4642,2,4653,0],[4643,0,4654,0],[4644,0,4655,0],[4645,0,4656,0],[4646,0,4657,0],[4647,0,4658,0],[4648,0,4659,0],[4649,0,4660,0],[4650,0,4661,0],[4651,0,4662,0],[4652,0,4663,0],[4653,0,4664,0],[4654,0,4665,0],[4655,0,4666,0],[4656,0,4667,0],[4657,0,4668,0],[4658,2,4669,0],[4659,0,4670,0],[4660,0,4671,0],[4661,0,4672,0],[4662,0,4673,0],[4663,0,4674,0],[4664,0,4675,0],[4665,2,4676,0],[4665,8,4676,6,"FederatedAuthProvider"],[4665,29,4676,27],[4665,30,4676,28],[4666,4,4677,4],[4667,0,4678,0],[4668,0,4679,0],[4669,0,4680,0],[4670,0,4681,0],[4671,4,4682,4,"constructor"],[4671,15,4682,15,"constructor"],[4671,16,4682,16,"providerId"],[4671,26,4682,26],[4671,28,4682,28],[4672,6,4683,8],[4672,10,4683,12],[4672,11,4683,13,"providerId"],[4672,21,4683,23],[4672,24,4683,26,"providerId"],[4672,34,4683,36],[4673,6,4684,8],[4674,6,4685,8],[4674,10,4685,12],[4674,11,4685,13,"defaultLanguageCode"],[4674,30,4685,32],[4674,33,4685,35],[4674,37,4685,39],[4675,6,4686,8],[4676,6,4687,8],[4676,10,4687,12],[4676,11,4687,13,"customParameters"],[4676,27,4687,29],[4676,30,4687,32],[4676,31,4687,33],[4676,32,4687,34],[4677,4,4688,4],[4678,4,4689,4],[4679,0,4690,0],[4680,0,4691,0],[4681,0,4692,0],[4682,0,4693,0],[4683,4,4694,4,"setDefaultLanguage"],[4683,22,4694,22,"setDefaultLanguage"],[4683,23,4694,23,"languageCode"],[4683,35,4694,35],[4683,37,4694,37],[4684,6,4695,8],[4684,10,4695,12],[4684,11,4695,13,"defaultLanguageCode"],[4684,30,4695,32],[4684,33,4695,35,"languageCode"],[4684,45,4695,47],[4685,4,4696,4],[4686,4,4697,4],[4687,0,4698,0],[4688,0,4699,0],[4689,0,4700,0],[4690,0,4701,0],[4691,0,4702,0],[4692,0,4703,0],[4693,0,4704,0],[4694,0,4705,0],[4695,0,4706,0],[4696,4,4707,4,"setCustomParameters"],[4696,23,4707,23,"setCustomParameters"],[4696,24,4707,24,"customOAuthParameters"],[4696,45,4707,45],[4696,47,4707,47],[4697,6,4708,8],[4697,10,4708,12],[4697,11,4708,13,"customParameters"],[4697,27,4708,29],[4697,30,4708,32,"customOAuthParameters"],[4697,51,4708,53],[4698,6,4709,8],[4698,13,4709,15],[4698,17,4709,19],[4699,4,4710,4],[4700,4,4711,4],[4701,0,4712,0],[4702,0,4713,0],[4703,4,4714,4,"getCustomParameters"],[4703,23,4714,23,"getCustomParameters"],[4703,24,4714,23],[4703,26,4714,26],[4704,6,4715,8],[4704,13,4715,15],[4704,17,4715,19],[4704,18,4715,20,"customParameters"],[4704,34,4715,36],[4705,4,4716,4],[4706,2,4717,0],[4708,2,4719,0],[4709,0,4720,0],[4710,0,4721,0],[4711,0,4722,0],[4712,0,4723,0],[4713,0,4724,0],[4714,0,4725,0],[4715,0,4726,0],[4716,0,4727,0],[4717,0,4728,0],[4718,0,4729,0],[4719,0,4730,0],[4720,0,4731,0],[4721,0,4732,0],[4722,0,4733,0],[4723,0,4734,0],[4724,2,4735,0],[4725,0,4736,0],[4726,0,4737,0],[4727,0,4738,0],[4728,0,4739,0],[4729,0,4740,0],[4730,2,4741,0],[4730,8,4741,6,"BaseOAuthProvider"],[4730,25,4741,23],[4730,34,4741,32,"FederatedAuthProvider"],[4730,55,4741,53],[4730,56,4741,54],[4731,4,4742,4,"constructor"],[4731,15,4742,15,"constructor"],[4731,16,4742,15],[4731,18,4742,18],[4732,6,4743,8],[4732,11,4743,13],[4732,12,4743,14],[4732,15,4743,17,"arguments"],[4732,24,4743,26],[4732,25,4743,27],[4733,6,4744,8],[4734,6,4745,8],[4734,10,4745,12],[4734,11,4745,13,"scopes"],[4734,17,4745,19],[4734,20,4745,22],[4734,22,4745,24],[4735,4,4746,4],[4736,4,4747,4],[4737,0,4748,0],[4738,0,4749,0],[4739,0,4750,0],[4740,0,4751,0],[4741,4,4752,4,"addScope"],[4741,12,4752,12,"addScope"],[4741,13,4752,13,"scope"],[4741,18,4752,18],[4741,20,4752,20],[4742,6,4753,8],[4743,6,4754,8],[4743,10,4754,12],[4743,11,4754,13],[4743,15,4754,17],[4743,16,4754,18,"scopes"],[4743,22,4754,24],[4743,23,4754,25,"includes"],[4743,31,4754,33],[4743,32,4754,34,"scope"],[4743,37,4754,39],[4743,38,4754,40],[4743,40,4754,42],[4744,8,4755,12],[4744,12,4755,16],[4744,13,4755,17,"scopes"],[4744,19,4755,23],[4744,20,4755,24,"push"],[4744,24,4755,28],[4744,25,4755,29,"scope"],[4744,30,4755,34],[4744,31,4755,35],[4745,6,4756,8],[4746,6,4757,8],[4746,13,4757,15],[4746,17,4757,19],[4747,4,4758,4],[4748,4,4759,4],[4749,0,4760,0],[4750,0,4761,0],[4751,4,4762,4,"getScopes"],[4751,13,4762,13,"getScopes"],[4751,14,4762,13],[4751,16,4762,16],[4752,6,4763,8],[4752,13,4763,15],[4752,14,4763,16],[4752,17,4763,19],[4752,21,4763,23],[4752,22,4763,24,"scopes"],[4752,28,4763,30],[4752,29,4763,31],[4753,4,4764,4],[4754,2,4765,0],[4755,2,4766,0],[4756,0,4767,0],[4757,0,4768,0],[4758,0,4769,0],[4759,0,4770,0],[4760,0,4771,0],[4761,0,4772,0],[4762,0,4773,0],[4763,0,4774,0],[4764,0,4775,0],[4765,0,4776,0],[4766,0,4777,0],[4767,0,4778,0],[4768,0,4779,0],[4769,0,4780,0],[4770,0,4781,0],[4771,0,4782,0],[4772,0,4783,0],[4773,0,4784,0],[4774,0,4785,0],[4775,0,4786,0],[4776,0,4787,0],[4777,0,4788,0],[4778,0,4789,0],[4779,0,4790,0],[4780,0,4791,0],[4781,0,4792,0],[4782,0,4793,0],[4783,0,4794,0],[4784,0,4795,0],[4785,0,4796,0],[4786,0,4797,0],[4787,0,4798,0],[4788,0,4799,0],[4789,0,4800,0],[4790,0,4801,0],[4791,0,4802,0],[4792,0,4803,0],[4793,0,4804,0],[4794,0,4805,0],[4795,2,4806,0],[4795,8,4806,6,"OAuthProvider"],[4795,21,4806,19],[4795,30,4806,28,"BaseOAuthProvider"],[4795,47,4806,45],[4795,48,4806,46],[4796,4,4807,4],[4797,0,4808,0],[4798,0,4809,0],[4799,0,4810,0],[4800,4,4811,4],[4800,11,4811,11,"credentialFromJSON"],[4800,29,4811,29,"credentialFromJSON"],[4800,30,4811,30,"json"],[4800,34,4811,34],[4800,36,4811,36],[4801,6,4812,8],[4801,12,4812,14,"obj"],[4801,15,4812,17],[4801,18,4812,20],[4801,25,4812,27,"json"],[4801,29,4812,31],[4801,34,4812,36],[4801,42,4812,44],[4801,45,4812,47,"JSON"],[4801,49,4812,51],[4801,50,4812,52,"parse"],[4801,55,4812,57],[4801,56,4812,58,"json"],[4801,60,4812,62],[4801,61,4812,63],[4801,64,4812,66,"json"],[4801,68,4812,70],[4802,6,4813,8,"_assert"],[4802,13,4813,15],[4802,14,4813,16],[4802,26,4813,28],[4802,30,4813,32,"obj"],[4802,33,4813,35],[4802,37,4813,39],[4802,51,4813,53],[4802,55,4813,57,"obj"],[4802,58,4813,60],[4802,60,4813,62],[4802,76,4813,78],[4802,77,4813,79],[4802,111,4813,113],[4802,112,4813,114],[4803,6,4814,8],[4803,13,4814,15,"OAuthCredential"],[4803,28,4814,30],[4803,29,4814,31,"_fromParams"],[4803,40,4814,42],[4803,41,4814,43,"obj"],[4803,44,4814,46],[4803,45,4814,47],[4804,4,4815,4],[4805,4,4816,4],[4806,0,4817,0],[4807,0,4818,0],[4808,0,4819,0],[4809,0,4820,0],[4810,0,4821,0],[4811,0,4822,0],[4812,0,4823,0],[4813,0,4824,0],[4814,0,4825,0],[4815,0,4826,0],[4816,0,4827,0],[4817,0,4828,0],[4818,0,4829,0],[4819,0,4830,0],[4820,0,4831,0],[4821,0,4832,0],[4822,0,4833,0],[4823,0,4834,0],[4824,0,4835,0],[4825,0,4836,0],[4826,4,4837,4,"credential"],[4826,14,4837,14,"credential"],[4826,15,4837,15,"params"],[4826,21,4837,21],[4826,23,4837,23],[4827,6,4838,8],[4827,13,4838,15],[4827,17,4838,19],[4827,18,4838,20,"_credential"],[4827,29,4838,31],[4827,30,4838,32],[4828,8,4838,34],[4828,11,4838,37,"params"],[4828,17,4838,43],[4829,8,4838,45,"nonce"],[4829,13,4838,50],[4829,15,4838,52,"params"],[4829,21,4838,58],[4829,22,4838,59,"rawNonce"],[4830,6,4838,68],[4830,7,4838,69],[4830,8,4838,70],[4831,4,4839,4],[4832,4,4840,4],[4833,4,4841,4,"_credential"],[4833,15,4841,15,"_credential"],[4833,16,4841,16,"params"],[4833,22,4841,22],[4833,24,4841,24],[4834,6,4842,8,"_assert"],[4834,13,4842,15],[4834,14,4842,16,"params"],[4834,20,4842,22],[4834,21,4842,23,"idToken"],[4834,28,4842,30],[4834,32,4842,34,"params"],[4834,38,4842,40],[4834,39,4842,41,"accessToken"],[4834,50,4842,52],[4834,52,4842,54],[4834,68,4842,70],[4834,69,4842,71],[4834,103,4842,105],[4834,104,4842,106],[4835,6,4843,8],[4836,6,4844,8],[4836,13,4844,15,"OAuthCredential"],[4836,28,4844,30],[4836,29,4844,31,"_fromParams"],[4836,40,4844,42],[4836,41,4844,43],[4837,8,4845,12],[4837,11,4845,15,"params"],[4837,17,4845,21],[4838,8,4846,12,"providerId"],[4838,18,4846,22],[4838,20,4846,24],[4838,24,4846,28],[4838,25,4846,29,"providerId"],[4838,35,4846,39],[4839,8,4847,12,"signInMethod"],[4839,20,4847,24],[4839,22,4847,26],[4839,26,4847,30],[4839,27,4847,31,"providerId"],[4840,6,4848,8],[4840,7,4848,9],[4840,8,4848,10],[4841,4,4849,4],[4842,4,4850,4],[4843,0,4851,0],[4844,0,4852,0],[4845,0,4853,0],[4846,0,4854,0],[4847,4,4855,4],[4847,11,4855,11,"credentialFromResult"],[4847,31,4855,31,"credentialFromResult"],[4847,32,4855,32,"userCredential"],[4847,46,4855,46],[4847,48,4855,48],[4848,6,4856,8],[4848,13,4856,15,"OAuthProvider"],[4848,26,4856,28],[4848,27,4856,29,"oauthCredentialFromTaggedObject"],[4848,58,4856,60],[4848,59,4856,61,"userCredential"],[4848,73,4856,75],[4848,74,4856,76],[4849,4,4857,4],[4850,4,4858,4],[4851,0,4859,0],[4852,0,4860,0],[4853,0,4861,0],[4854,0,4862,0],[4855,0,4863,0],[4856,4,4864,4],[4856,11,4864,11,"credentialFromError"],[4856,30,4864,30,"credentialFromError"],[4856,31,4864,31,"error"],[4856,36,4864,36],[4856,38,4864,38],[4857,6,4865,8],[4857,13,4865,15,"OAuthProvider"],[4857,26,4865,28],[4857,27,4865,29,"oauthCredentialFromTaggedObject"],[4857,58,4865,60],[4857,59,4865,62,"error"],[4857,64,4865,67],[4857,65,4865,68,"customData"],[4857,75,4865,78],[4857,79,4865,82],[4857,80,4865,83],[4857,81,4865,85],[4857,82,4865,86],[4858,4,4866,4],[4859,4,4867,4],[4859,11,4867,11,"oauthCredentialFromTaggedObject"],[4859,42,4867,42,"oauthCredentialFromTaggedObject"],[4859,43,4867,43],[4860,6,4867,45,"_tokenResponse"],[4860,20,4867,59],[4860,22,4867,61,"tokenResponse"],[4861,4,4867,75],[4861,5,4867,76],[4861,7,4867,78],[4862,6,4868,8],[4862,10,4868,12],[4862,11,4868,13,"tokenResponse"],[4862,24,4868,26],[4862,26,4868,28],[4863,8,4869,12],[4863,15,4869,19],[4863,19,4869,23],[4864,6,4870,8],[4865,6,4871,8],[4865,12,4871,14],[4866,8,4871,16,"oauthIdToken"],[4866,20,4871,28],[4867,8,4871,30,"oauthAccessToken"],[4867,24,4871,46],[4868,8,4871,48,"oauthTokenSecret"],[4868,24,4871,64],[4869,8,4871,66,"pendingToken"],[4869,20,4871,78],[4870,8,4871,80,"nonce"],[4870,13,4871,85],[4871,8,4871,87,"providerId"],[4872,6,4871,98],[4872,7,4871,99],[4872,10,4871,102,"tokenResponse"],[4872,23,4871,115],[4873,6,4872,8],[4873,10,4872,12],[4873,11,4872,13,"oauthAccessToken"],[4873,27,4872,29],[4873,31,4873,12],[4873,32,4873,13,"oauthTokenSecret"],[4873,48,4873,29],[4873,52,4874,12],[4873,53,4874,13,"oauthIdToken"],[4873,65,4874,25],[4873,69,4875,12],[4873,70,4875,13,"pendingToken"],[4873,82,4875,25],[4873,84,4875,27],[4874,8,4876,12],[4874,15,4876,19],[4874,19,4876,23],[4875,6,4877,8],[4876,6,4878,8],[4876,10,4878,12],[4876,11,4878,13,"providerId"],[4876,21,4878,23],[4876,23,4878,25],[4877,8,4879,12],[4877,15,4879,19],[4877,19,4879,23],[4878,6,4880,8],[4879,6,4881,8],[4879,10,4881,12],[4880,8,4882,12],[4880,15,4882,19],[4880,19,4882,23,"OAuthProvider"],[4880,32,4882,36],[4880,33,4882,37,"providerId"],[4880,43,4882,47],[4880,44,4882,48],[4880,45,4882,49,"_credential"],[4880,56,4882,60],[4880,57,4882,61],[4881,10,4883,16,"idToken"],[4881,17,4883,23],[4881,19,4883,25,"oauthIdToken"],[4881,31,4883,37],[4882,10,4884,16,"accessToken"],[4882,21,4884,27],[4882,23,4884,29,"oauthAccessToken"],[4882,39,4884,45],[4883,10,4885,16,"nonce"],[4883,15,4885,21],[4884,10,4886,16,"pendingToken"],[4885,8,4887,12],[4885,9,4887,13],[4885,10,4887,14],[4886,6,4888,8],[4886,7,4888,9],[4886,8,4889,8],[4886,15,4889,15,"e"],[4886,16,4889,16],[4886,18,4889,18],[4887,8,4890,12],[4887,15,4890,19],[4887,19,4890,23],[4888,6,4891,8],[4889,4,4892,4],[4890,2,4893,0],[4892,2,4895,0],[4893,0,4896,0],[4894,0,4897,0],[4895,0,4898,0],[4896,0,4899,0],[4897,0,4900,0],[4898,0,4901,0],[4899,0,4902,0],[4900,0,4903,0],[4901,0,4904,0],[4902,0,4905,0],[4903,0,4906,0],[4904,0,4907,0],[4905,0,4908,0],[4906,0,4909,0],[4907,0,4910,0],[4908,2,4911,0],[4909,0,4912,0],[4910,0,4913,0],[4911,0,4914,0],[4912,0,4915,0],[4913,0,4916,0],[4914,0,4917,0],[4915,0,4918,0],[4916,0,4919,0],[4917,0,4920,0],[4918,0,4921,0],[4919,0,4922,0],[4920,0,4923,0],[4921,0,4924,0],[4922,0,4925,0],[4923,0,4926,0],[4924,0,4927,0],[4925,0,4928,0],[4926,0,4929,0],[4927,0,4930,0],[4928,0,4931,0],[4929,0,4932,0],[4930,0,4933,0],[4931,0,4934,0],[4932,0,4935,0],[4933,0,4936,0],[4934,0,4937,0],[4935,0,4938,0],[4936,0,4939,0],[4937,0,4940,0],[4938,0,4941,0],[4939,0,4942,0],[4940,0,4943,0],[4941,0,4944,0],[4942,0,4945,0],[4943,0,4946,0],[4944,0,4947,0],[4945,0,4948,0],[4946,0,4949,0],[4947,2,4911,0,"exports"],[4947,9,4911,0],[4947,10,4911,0,"_"],[4947,11,4911,0],[4947,14,4911,0,"OAuthProvider"],[4947,27,4911,0],[4948,2,4950,0],[4948,8,4950,6,"FacebookAuthProvider"],[4948,28,4950,26],[4948,37,4950,35,"BaseOAuthProvider"],[4948,54,4950,52],[4948,55,4950,53],[4949,4,4951,4,"constructor"],[4949,15,4951,15,"constructor"],[4949,16,4951,15],[4949,18,4951,18],[4950,6,4952,8],[4950,11,4952,13],[4950,12,4952,14],[4950,26,4952,28],[4950,27,4952,29],[4950,52,4952,54],[4950,53,4952,55],[4951,4,4953,4],[4952,4,4954,4],[4953,0,4955,0],[4954,0,4956,0],[4955,0,4957,0],[4956,0,4958,0],[4957,0,4959,0],[4958,0,4960,0],[4959,0,4961,0],[4960,0,4962,0],[4961,0,4963,0],[4962,0,4964,0],[4963,0,4965,0],[4964,4,4966,4],[4964,11,4966,11,"credential"],[4964,21,4966,21,"credential"],[4964,22,4966,22,"accessToken"],[4964,33,4966,33],[4964,35,4966,35],[4965,6,4967,8],[4965,13,4967,15,"OAuthCredential"],[4965,28,4967,30],[4965,29,4967,31,"_fromParams"],[4965,40,4967,42],[4965,41,4967,43],[4966,8,4968,12,"providerId"],[4966,18,4968,22],[4966,20,4968,24,"FacebookAuthProvider"],[4966,40,4968,44],[4966,41,4968,45,"PROVIDER_ID"],[4966,52,4968,56],[4967,8,4969,12,"signInMethod"],[4967,20,4969,24],[4967,22,4969,26,"FacebookAuthProvider"],[4967,42,4969,46],[4967,43,4969,47,"FACEBOOK_SIGN_IN_METHOD"],[4967,66,4969,70],[4968,8,4970,12,"accessToken"],[4969,6,4971,8],[4969,7,4971,9],[4969,8,4971,10],[4970,4,4972,4],[4971,4,4973,4],[4972,0,4974,0],[4973,0,4975,0],[4974,0,4976,0],[4975,0,4977,0],[4976,4,4978,4],[4976,11,4978,11,"credentialFromResult"],[4976,31,4978,31,"credentialFromResult"],[4976,32,4978,32,"userCredential"],[4976,46,4978,46],[4976,48,4978,48],[4977,6,4979,8],[4977,13,4979,15,"FacebookAuthProvider"],[4977,33,4979,35],[4977,34,4979,36,"credentialFromTaggedObject"],[4977,60,4979,62],[4977,61,4979,63,"userCredential"],[4977,75,4979,77],[4977,76,4979,78],[4978,4,4980,4],[4979,4,4981,4],[4980,0,4982,0],[4981,0,4983,0],[4982,0,4984,0],[4983,0,4985,0],[4984,0,4986,0],[4985,4,4987,4],[4985,11,4987,11,"credentialFromError"],[4985,30,4987,30,"credentialFromError"],[4985,31,4987,31,"error"],[4985,36,4987,36],[4985,38,4987,38],[4986,6,4988,8],[4986,13,4988,15,"FacebookAuthProvider"],[4986,33,4988,35],[4986,34,4988,36,"credentialFromTaggedObject"],[4986,60,4988,62],[4986,61,4988,64,"error"],[4986,66,4988,69],[4986,67,4988,70,"customData"],[4986,77,4988,80],[4986,81,4988,84],[4986,82,4988,85],[4986,83,4988,87],[4986,84,4988,88],[4987,4,4989,4],[4988,4,4990,4],[4988,11,4990,11,"credentialFromTaggedObject"],[4988,37,4990,37,"credentialFromTaggedObject"],[4988,38,4990,38],[4989,6,4990,40,"_tokenResponse"],[4989,20,4990,54],[4989,22,4990,56,"tokenResponse"],[4990,4,4990,70],[4990,5,4990,71],[4990,7,4990,73],[4991,6,4991,8],[4991,10,4991,12],[4991,11,4991,13,"tokenResponse"],[4991,24,4991,26],[4991,28,4991,30],[4991,30,4991,32],[4991,48,4991,50],[4991,52,4991,54,"tokenResponse"],[4991,65,4991,67],[4991,66,4991,68],[4991,68,4991,70],[4992,8,4992,12],[4992,15,4992,19],[4992,19,4992,23],[4993,6,4993,8],[4994,6,4994,8],[4994,10,4994,12],[4994,11,4994,13,"tokenResponse"],[4994,24,4994,26],[4994,25,4994,27,"oauthAccessToken"],[4994,41,4994,43],[4994,43,4994,45],[4995,8,4995,12],[4995,15,4995,19],[4995,19,4995,23],[4996,6,4996,8],[4997,6,4997,8],[4997,10,4997,12],[4998,8,4998,12],[4998,15,4998,19,"FacebookAuthProvider"],[4998,35,4998,39],[4998,36,4998,40,"credential"],[4998,46,4998,50],[4998,47,4998,51,"tokenResponse"],[4998,60,4998,64],[4998,61,4998,65,"oauthAccessToken"],[4998,77,4998,81],[4998,78,4998,82],[4999,6,4999,8],[4999,7,4999,9],[4999,8,5000,8],[4999,14,5000,14],[5000,8,5001,12],[5000,15,5001,19],[5000,19,5001,23],[5001,6,5002,8],[5002,4,5003,4],[5003,2,5004,0],[5004,2,5005,0],[5005,2,5005,0,"exports"],[5005,9,5005,0],[5005,10,5005,0,"X"],[5005,11,5005,0],[5005,14,5005,0,"FacebookAuthProvider"],[5005,34,5005,0],[5006,2,5006,0,"FacebookAuthProvider"],[5006,22,5006,20],[5006,23,5006,21,"FACEBOOK_SIGN_IN_METHOD"],[5006,46,5006,44],[5006,49,5006,47],[5006,63,5006,61],[5006,64,5006,62],[5007,2,5007,0],[5008,2,5008,0,"FacebookAuthProvider"],[5008,22,5008,20],[5008,23,5008,21,"PROVIDER_ID"],[5008,34,5008,32],[5008,37,5008,35],[5008,51,5008,49],[5008,52,5008,50],[5010,2,5010,0],[5011,0,5011,0],[5012,0,5012,0],[5013,0,5013,0],[5014,0,5014,0],[5015,0,5015,0],[5016,0,5016,0],[5017,0,5017,0],[5018,0,5018,0],[5019,0,5019,0],[5020,0,5020,0],[5021,0,5021,0],[5022,0,5022,0],[5023,0,5023,0],[5024,0,5024,0],[5025,0,5025,0],[5026,2,5026,0],[5027,0,5027,0],[5028,0,5028,0],[5029,0,5029,0],[5030,0,5030,0],[5031,0,5031,0],[5032,0,5032,0],[5033,0,5033,0],[5034,0,5034,0],[5035,0,5035,0],[5036,0,5036,0],[5037,0,5037,0],[5038,0,5038,0],[5039,0,5039,0],[5040,0,5040,0],[5041,0,5041,0],[5042,0,5042,0],[5043,0,5043,0],[5044,0,5044,0],[5045,0,5045,0],[5046,0,5046,0],[5047,0,5047,0],[5048,0,5048,0],[5049,0,5049,0],[5050,0,5050,0],[5051,0,5051,0],[5052,0,5052,0],[5053,0,5053,0],[5054,0,5054,0],[5055,0,5055,0],[5056,0,5056,0],[5057,0,5057,0],[5058,0,5058,0],[5059,0,5059,0],[5060,0,5060,0],[5061,0,5061,0],[5062,0,5062,0],[5063,0,5063,0],[5064,0,5064,0],[5065,0,5065,0],[5066,0,5066,0],[5067,2,5067,0],[5067,8,5067,6,"GoogleAuthProvider"],[5067,26,5067,24],[5067,35,5067,33,"BaseOAuthProvider"],[5067,52,5067,50],[5067,53,5067,51],[5068,4,5068,4,"constructor"],[5068,15,5068,15,"constructor"],[5068,16,5068,15],[5068,18,5068,18],[5069,6,5069,8],[5069,11,5069,13],[5069,12,5069,14],[5069,24,5069,26],[5069,25,5069,27],[5069,48,5069,50],[5069,49,5069,51],[5070,6,5070,8],[5070,10,5070,12],[5070,11,5070,13,"addScope"],[5070,19,5070,21],[5070,20,5070,22],[5070,29,5070,31],[5070,30,5070,32],[5071,4,5071,4],[5072,4,5072,4],[5073,0,5073,0],[5074,0,5074,0],[5075,0,5075,0],[5076,0,5076,0],[5077,0,5077,0],[5078,0,5078,0],[5079,0,5079,0],[5080,0,5080,0],[5081,0,5081,0],[5082,0,5082,0],[5083,0,5083,0],[5084,0,5084,0],[5085,4,5085,4],[5085,11,5085,11,"credential"],[5085,21,5085,21,"credential"],[5085,22,5085,22,"idToken"],[5085,29,5085,29],[5085,31,5085,31,"accessToken"],[5085,42,5085,42],[5085,44,5085,44],[5086,6,5086,8],[5086,13,5086,15,"OAuthCredential"],[5086,28,5086,30],[5086,29,5086,31,"_fromParams"],[5086,40,5086,42],[5086,41,5086,43],[5087,8,5087,12,"providerId"],[5087,18,5087,22],[5087,20,5087,24,"GoogleAuthProvider"],[5087,38,5087,42],[5087,39,5087,43,"PROVIDER_ID"],[5087,50,5087,54],[5088,8,5088,12,"signInMethod"],[5088,20,5088,24],[5088,22,5088,26,"GoogleAuthProvider"],[5088,40,5088,44],[5088,41,5088,45,"GOOGLE_SIGN_IN_METHOD"],[5088,62,5088,66],[5089,8,5089,12,"idToken"],[5089,15,5089,19],[5090,8,5090,12,"accessToken"],[5091,6,5091,8],[5091,7,5091,9],[5091,8,5091,10],[5092,4,5092,4],[5093,4,5093,4],[5094,0,5094,0],[5095,0,5095,0],[5096,0,5096,0],[5097,0,5097,0],[5098,4,5098,4],[5098,11,5098,11,"credentialFromResult"],[5098,31,5098,31,"credentialFromResult"],[5098,32,5098,32,"userCredential"],[5098,46,5098,46],[5098,48,5098,48],[5099,6,5099,8],[5099,13,5099,15,"GoogleAuthProvider"],[5099,31,5099,33],[5099,32,5099,34,"credentialFromTaggedObject"],[5099,58,5099,60],[5099,59,5099,61,"userCredential"],[5099,73,5099,75],[5099,74,5099,76],[5100,4,5100,4],[5101,4,5101,4],[5102,0,5102,0],[5103,0,5103,0],[5104,0,5104,0],[5105,0,5105,0],[5106,0,5106,0],[5107,4,5107,4],[5107,11,5107,11,"credentialFromError"],[5107,30,5107,30,"credentialFromError"],[5107,31,5107,31,"error"],[5107,36,5107,36],[5107,38,5107,38],[5108,6,5108,8],[5108,13,5108,15,"GoogleAuthProvider"],[5108,31,5108,33],[5108,32,5108,34,"credentialFromTaggedObject"],[5108,58,5108,60],[5108,59,5108,62,"error"],[5108,64,5108,67],[5108,65,5108,68,"customData"],[5108,75,5108,78],[5108,79,5108,82],[5108,80,5108,83],[5108,81,5108,85],[5108,82,5108,86],[5109,4,5109,4],[5110,4,5110,4],[5110,11,5110,11,"credentialFromTaggedObject"],[5110,37,5110,37,"credentialFromTaggedObject"],[5110,38,5110,38],[5111,6,5110,40,"_tokenResponse"],[5111,20,5110,54],[5111,22,5110,56,"tokenResponse"],[5112,4,5110,70],[5112,5,5110,71],[5112,7,5110,73],[5113,6,5111,8],[5113,10,5111,12],[5113,11,5111,13,"tokenResponse"],[5113,24,5111,26],[5113,26,5111,28],[5114,8,5112,12],[5114,15,5112,19],[5114,19,5112,23],[5115,6,5113,8],[5116,6,5114,8],[5116,12,5114,14],[5117,8,5114,16,"oauthIdToken"],[5117,20,5114,28],[5118,8,5114,30,"oauthAccessToken"],[5119,6,5114,47],[5119,7,5114,48],[5119,10,5114,51,"tokenResponse"],[5119,23,5114,64],[5120,6,5115,8],[5120,10,5115,12],[5120,11,5115,13,"oauthIdToken"],[5120,23,5115,25],[5120,27,5115,29],[5120,28,5115,30,"oauthAccessToken"],[5120,44,5115,46],[5120,46,5115,48],[5121,8,5116,12],[5122,8,5117,12],[5122,15,5117,19],[5122,19,5117,23],[5123,6,5118,8],[5124,6,5119,8],[5124,10,5119,12],[5125,8,5120,12],[5125,15,5120,19,"GoogleAuthProvider"],[5125,33,5120,37],[5125,34,5120,38,"credential"],[5125,44,5120,48],[5125,45,5120,49,"oauthIdToken"],[5125,57,5120,61],[5125,59,5120,63,"oauthAccessToken"],[5125,75,5120,79],[5125,76,5120,80],[5126,6,5121,8],[5126,7,5121,9],[5126,8,5122,8],[5126,14,5122,14],[5127,8,5123,12],[5127,15,5123,19],[5127,19,5123,23],[5128,6,5124,8],[5129,4,5125,4],[5130,2,5126,0],[5131,2,5127,0],[5132,2,5127,0,"exports"],[5132,9,5127,0],[5132,10,5127,0,"Y"],[5132,11,5127,0],[5132,14,5127,0,"GoogleAuthProvider"],[5132,32,5127,0],[5133,2,5128,0,"GoogleAuthProvider"],[5133,20,5128,18],[5133,21,5128,19,"GOOGLE_SIGN_IN_METHOD"],[5133,42,5128,40],[5133,45,5128,43],[5133,57,5128,55],[5133,58,5128,56],[5134,2,5129,0],[5135,2,5130,0,"GoogleAuthProvider"],[5135,20,5130,18],[5135,21,5130,19,"PROVIDER_ID"],[5135,32,5130,30],[5135,35,5130,33],[5135,47,5130,45],[5135,48,5130,46],[5137,2,5132,0],[5138,0,5133,0],[5139,0,5134,0],[5140,0,5135,0],[5141,0,5136,0],[5142,0,5137,0],[5143,0,5138,0],[5144,0,5139,0],[5145,0,5140,0],[5146,0,5141,0],[5147,0,5142,0],[5148,0,5143,0],[5149,0,5144,0],[5150,0,5145,0],[5151,0,5146,0],[5152,0,5147,0],[5153,2,5148,0],[5154,0,5149,0],[5155,0,5150,0],[5156,0,5151,0],[5157,0,5152,0],[5158,0,5153,0],[5159,0,5154,0],[5160,0,5155,0],[5161,0,5156,0],[5162,0,5157,0],[5163,0,5158,0],[5164,0,5159,0],[5165,0,5160,0],[5166,0,5161,0],[5167,0,5162,0],[5168,0,5163,0],[5169,0,5164,0],[5170,0,5165,0],[5171,0,5166,0],[5172,0,5167,0],[5173,0,5168,0],[5174,0,5169,0],[5175,0,5170,0],[5176,0,5171,0],[5177,0,5172,0],[5178,0,5173,0],[5179,0,5174,0],[5180,0,5175,0],[5181,0,5176,0],[5182,0,5177,0],[5183,0,5178,0],[5184,0,5179,0],[5185,0,5180,0],[5186,0,5181,0],[5187,0,5182,0],[5188,0,5183,0],[5189,0,5184,0],[5190,0,5185,0],[5191,0,5186,0],[5192,0,5187,0],[5193,0,5188,0],[5194,0,5189,0],[5195,2,5190,0],[5195,8,5190,6,"GithubAuthProvider"],[5195,26,5190,24],[5195,35,5190,33,"BaseOAuthProvider"],[5195,52,5190,50],[5195,53,5190,51],[5196,4,5191,4,"constructor"],[5196,15,5191,15,"constructor"],[5196,16,5191,15],[5196,18,5191,18],[5197,6,5192,8],[5197,11,5192,13],[5197,12,5192,14],[5197,24,5192,26],[5197,25,5192,27],[5197,48,5192,50],[5197,49,5192,51],[5198,4,5193,4],[5199,4,5194,4],[5200,0,5195,0],[5201,0,5196,0],[5202,0,5197,0],[5203,0,5198,0],[5204,4,5199,4],[5204,11,5199,11,"credential"],[5204,21,5199,21,"credential"],[5204,22,5199,22,"accessToken"],[5204,33,5199,33],[5204,35,5199,35],[5205,6,5200,8],[5205,13,5200,15,"OAuthCredential"],[5205,28,5200,30],[5205,29,5200,31,"_fromParams"],[5205,40,5200,42],[5205,41,5200,43],[5206,8,5201,12,"providerId"],[5206,18,5201,22],[5206,20,5201,24,"GithubAuthProvider"],[5206,38,5201,42],[5206,39,5201,43,"PROVIDER_ID"],[5206,50,5201,54],[5207,8,5202,12,"signInMethod"],[5207,20,5202,24],[5207,22,5202,26,"GithubAuthProvider"],[5207,40,5202,44],[5207,41,5202,45,"GITHUB_SIGN_IN_METHOD"],[5207,62,5202,66],[5208,8,5203,12,"accessToken"],[5209,6,5204,8],[5209,7,5204,9],[5209,8,5204,10],[5210,4,5205,4],[5211,4,5206,4],[5212,0,5207,0],[5213,0,5208,0],[5214,0,5209,0],[5215,0,5210,0],[5216,4,5211,4],[5216,11,5211,11,"credentialFromResult"],[5216,31,5211,31,"credentialFromResult"],[5216,32,5211,32,"userCredential"],[5216,46,5211,46],[5216,48,5211,48],[5217,6,5212,8],[5217,13,5212,15,"GithubAuthProvider"],[5217,31,5212,33],[5217,32,5212,34,"credentialFromTaggedObject"],[5217,58,5212,60],[5217,59,5212,61,"userCredential"],[5217,73,5212,75],[5217,74,5212,76],[5218,4,5213,4],[5219,4,5214,4],[5220,0,5215,0],[5221,0,5216,0],[5222,0,5217,0],[5223,0,5218,0],[5224,0,5219,0],[5225,4,5220,4],[5225,11,5220,11,"credentialFromError"],[5225,30,5220,30,"credentialFromError"],[5225,31,5220,31,"error"],[5225,36,5220,36],[5225,38,5220,38],[5226,6,5221,8],[5226,13,5221,15,"GithubAuthProvider"],[5226,31,5221,33],[5226,32,5221,34,"credentialFromTaggedObject"],[5226,58,5221,60],[5226,59,5221,62,"error"],[5226,64,5221,67],[5226,65,5221,68,"customData"],[5226,75,5221,78],[5226,79,5221,82],[5226,80,5221,83],[5226,81,5221,85],[5226,82,5221,86],[5227,4,5222,4],[5228,4,5223,4],[5228,11,5223,11,"credentialFromTaggedObject"],[5228,37,5223,37,"credentialFromTaggedObject"],[5228,38,5223,38],[5229,6,5223,40,"_tokenResponse"],[5229,20,5223,54],[5229,22,5223,56,"tokenResponse"],[5230,4,5223,70],[5230,5,5223,71],[5230,7,5223,73],[5231,6,5224,8],[5231,10,5224,12],[5231,11,5224,13,"tokenResponse"],[5231,24,5224,26],[5231,28,5224,30],[5231,30,5224,32],[5231,48,5224,50],[5231,52,5224,54,"tokenResponse"],[5231,65,5224,67],[5231,66,5224,68],[5231,68,5224,70],[5232,8,5225,12],[5232,15,5225,19],[5232,19,5225,23],[5233,6,5226,8],[5234,6,5227,8],[5234,10,5227,12],[5234,11,5227,13,"tokenResponse"],[5234,24,5227,26],[5234,25,5227,27,"oauthAccessToken"],[5234,41,5227,43],[5234,43,5227,45],[5235,8,5228,12],[5235,15,5228,19],[5235,19,5228,23],[5236,6,5229,8],[5237,6,5230,8],[5237,10,5230,12],[5238,8,5231,12],[5238,15,5231,19,"GithubAuthProvider"],[5238,33,5231,37],[5238,34,5231,38,"credential"],[5238,44,5231,48],[5238,45,5231,49,"tokenResponse"],[5238,58,5231,62],[5238,59,5231,63,"oauthAccessToken"],[5238,75,5231,79],[5238,76,5231,80],[5239,6,5232,8],[5239,7,5232,9],[5239,8,5233,8],[5239,14,5233,14],[5240,8,5234,12],[5240,15,5234,19],[5240,19,5234,23],[5241,6,5235,8],[5242,4,5236,4],[5243,2,5237,0],[5244,2,5238,0],[5245,2,5238,0,"exports"],[5245,9,5238,0],[5245,10,5238,0,"Z"],[5245,11,5238,0],[5245,14,5238,0,"GithubAuthProvider"],[5245,32,5238,0],[5246,2,5239,0,"GithubAuthProvider"],[5246,20,5239,18],[5246,21,5239,19,"GITHUB_SIGN_IN_METHOD"],[5246,42,5239,40],[5246,45,5239,43],[5246,57,5239,55],[5246,58,5239,56],[5247,2,5240,0],[5248,2,5241,0,"GithubAuthProvider"],[5248,20,5241,18],[5248,21,5241,19,"PROVIDER_ID"],[5248,32,5241,30],[5248,35,5241,33],[5248,47,5241,45],[5248,48,5241,46],[5250,2,5243,0],[5251,0,5244,0],[5252,0,5245,0],[5253,0,5246,0],[5254,0,5247,0],[5255,0,5248,0],[5256,0,5249,0],[5257,0,5250,0],[5258,0,5251,0],[5259,0,5252,0],[5260,0,5253,0],[5261,0,5254,0],[5262,0,5255,0],[5263,0,5256,0],[5264,0,5257,0],[5265,0,5258,0],[5266,2,5259,0],[5266,8,5259,6,"IDP_REQUEST_URI"],[5266,23,5259,21],[5266,26,5259,24],[5266,44,5259,42],[5267,2,5260,0],[5268,0,5261,0],[5269,0,5262,0],[5270,2,5263,0],[5270,8,5263,6,"SAMLAuthCredential"],[5270,26,5263,24],[5270,35,5263,33,"AuthCredential"],[5270,49,5263,47],[5270,50,5263,48],[5271,4,5264,4],[5272,4,5265,4,"constructor"],[5272,15,5265,15,"constructor"],[5272,16,5265,16,"providerId"],[5272,26,5265,26],[5272,28,5265,28,"pendingToken"],[5272,40,5265,40],[5272,42,5265,42],[5273,6,5266,8],[5273,11,5266,13],[5273,12,5266,14,"providerId"],[5273,22,5266,24],[5273,24,5266,26,"providerId"],[5273,34,5266,36],[5273,35,5266,37],[5274,6,5267,8],[5274,10,5267,12],[5274,11,5267,13,"pendingToken"],[5274,23,5267,25],[5274,26,5267,28,"pendingToken"],[5274,38,5267,40],[5275,4,5268,4],[5276,4,5269,4],[5277,4,5270,4,"_getIdTokenResponse"],[5277,23,5270,23,"_getIdTokenResponse"],[5277,24,5270,24,"auth"],[5277,28,5270,28],[5277,30,5270,30],[5278,6,5271,8],[5278,12,5271,14,"request"],[5278,19,5271,21],[5278,22,5271,24],[5278,26,5271,28],[5278,27,5271,29,"buildRequest"],[5278,39,5271,41],[5278,40,5271,42],[5278,41,5271,43],[5279,6,5272,8],[5279,13,5272,15,"signInWithIdp"],[5279,26,5272,28],[5279,27,5272,29,"auth"],[5279,31,5272,33],[5279,33,5272,35,"request"],[5279,40,5272,42],[5279,41,5272,43],[5280,4,5273,4],[5281,4,5274,4],[5282,4,5275,4,"_linkToIdToken"],[5282,18,5275,18,"_linkToIdToken"],[5282,19,5275,19,"auth"],[5282,23,5275,23],[5282,25,5275,25,"idToken"],[5282,32,5275,32],[5282,34,5275,34],[5283,6,5276,8],[5283,12,5276,14,"request"],[5283,19,5276,21],[5283,22,5276,24],[5283,26,5276,28],[5283,27,5276,29,"buildRequest"],[5283,39,5276,41],[5283,40,5276,42],[5283,41,5276,43],[5284,6,5277,8,"request"],[5284,13,5277,15],[5284,14,5277,16,"idToken"],[5284,21,5277,23],[5284,24,5277,26,"idToken"],[5284,31,5277,33],[5285,6,5278,8],[5285,13,5278,15,"signInWithIdp"],[5285,26,5278,28],[5285,27,5278,29,"auth"],[5285,31,5278,33],[5285,33,5278,35,"request"],[5285,40,5278,42],[5285,41,5278,43],[5286,4,5279,4],[5287,4,5280,4],[5288,4,5281,4,"_getReauthenticationResolver"],[5288,32,5281,32,"_getReauthenticationResolver"],[5288,33,5281,33,"auth"],[5288,37,5281,37],[5288,39,5281,39],[5289,6,5282,8],[5289,12,5282,14,"request"],[5289,19,5282,21],[5289,22,5282,24],[5289,26,5282,28],[5289,27,5282,29,"buildRequest"],[5289,39,5282,41],[5289,40,5282,42],[5289,41,5282,43],[5290,6,5283,8,"request"],[5290,13,5283,15],[5290,14,5283,16,"autoCreate"],[5290,24,5283,26],[5290,27,5283,29],[5290,32,5283,34],[5291,6,5284,8],[5291,13,5284,15,"signInWithIdp"],[5291,26,5284,28],[5291,27,5284,29,"auth"],[5291,31,5284,33],[5291,33,5284,35,"request"],[5291,40,5284,42],[5291,41,5284,43],[5292,4,5285,4],[5293,4,5286,4],[5294,4,5287,4,"toJSON"],[5294,10,5287,10,"toJSON"],[5294,11,5287,10],[5294,13,5287,13],[5295,6,5288,8],[5295,13,5288,15],[5296,8,5289,12,"signInMethod"],[5296,20,5289,24],[5296,22,5289,26],[5296,26,5289,30],[5296,27,5289,31,"signInMethod"],[5296,39,5289,43],[5297,8,5290,12,"providerId"],[5297,18,5290,22],[5297,20,5290,24],[5297,24,5290,28],[5297,25,5290,29,"providerId"],[5297,35,5290,39],[5298,8,5291,12,"pendingToken"],[5298,20,5291,24],[5298,22,5291,26],[5298,26,5291,30],[5298,27,5291,31,"pendingToken"],[5299,6,5292,8],[5299,7,5292,9],[5300,4,5293,4],[5301,4,5294,4],[5302,0,5295,0],[5303,0,5296,0],[5304,0,5297,0],[5305,0,5298,0],[5306,0,5299,0],[5307,0,5300,0],[5308,0,5301,0],[5309,0,5302,0],[5310,4,5303,4],[5310,11,5303,11,"fromJSON"],[5310,19,5303,19,"fromJSON"],[5310,20,5303,20,"json"],[5310,24,5303,24],[5310,26,5303,26],[5311,6,5304,8],[5311,12,5304,14,"obj"],[5311,15,5304,17],[5311,18,5304,20],[5311,25,5304,27,"json"],[5311,29,5304,31],[5311,34,5304,36],[5311,42,5304,44],[5311,45,5304,47,"JSON"],[5311,49,5304,51],[5311,50,5304,52,"parse"],[5311,55,5304,57],[5311,56,5304,58,"json"],[5311,60,5304,62],[5311,61,5304,63],[5311,64,5304,66,"json"],[5311,68,5304,70],[5312,6,5305,8],[5312,12,5305,14],[5313,8,5305,16,"providerId"],[5313,18,5305,26],[5314,8,5305,28,"signInMethod"],[5314,20,5305,40],[5315,8,5305,42,"pendingToken"],[5316,6,5305,55],[5316,7,5305,56],[5316,10,5305,59,"obj"],[5316,13,5305,62],[5317,6,5306,8],[5317,10,5306,12],[5317,11,5306,13,"providerId"],[5317,21,5306,23],[5317,25,5307,12],[5317,26,5307,13,"signInMethod"],[5317,38,5307,25],[5317,42,5308,12],[5317,43,5308,13,"pendingToken"],[5317,55,5308,25],[5317,59,5309,12,"providerId"],[5317,69,5309,22],[5317,74,5309,27,"signInMethod"],[5317,86,5309,39],[5317,88,5309,41],[5318,8,5310,12],[5318,15,5310,19],[5318,19,5310,23],[5319,6,5311,8],[5320,6,5312,8],[5320,13,5312,15],[5320,17,5312,19,"SAMLAuthCredential"],[5320,35,5312,37],[5320,36,5312,38,"providerId"],[5320,46,5312,48],[5320,48,5312,50,"pendingToken"],[5320,60,5312,62],[5320,61,5312,63],[5321,4,5313,4],[5322,4,5314,4],[5323,0,5315,0],[5324,0,5316,0],[5325,0,5317,0],[5326,0,5318,0],[5327,4,5319,4],[5327,11,5319,11,"_create"],[5327,18,5319,18,"_create"],[5327,19,5319,19,"providerId"],[5327,29,5319,29],[5327,31,5319,31,"pendingToken"],[5327,43,5319,43],[5327,45,5319,45],[5328,6,5320,8],[5328,13,5320,15],[5328,17,5320,19,"SAMLAuthCredential"],[5328,35,5320,37],[5328,36,5320,38,"providerId"],[5328,46,5320,48],[5328,48,5320,50,"pendingToken"],[5328,60,5320,62],[5328,61,5320,63],[5329,4,5321,4],[5330,4,5322,4,"buildRequest"],[5330,16,5322,16,"buildRequest"],[5330,17,5322,16],[5330,19,5322,19],[5331,6,5323,8],[5331,13,5323,15],[5332,8,5324,12,"requestUri"],[5332,18,5324,22],[5332,20,5324,24,"IDP_REQUEST_URI"],[5332,35,5324,39],[5333,8,5325,12,"returnSecureToken"],[5333,25,5325,29],[5333,27,5325,31],[5333,31,5325,35],[5334,8,5326,12,"pendingToken"],[5334,20,5326,24],[5334,22,5326,26],[5334,26,5326,30],[5334,27,5326,31,"pendingToken"],[5335,6,5327,8],[5335,7,5327,9],[5336,4,5328,4],[5337,2,5329,0],[5339,2,5331,0],[5340,0,5332,0],[5341,0,5333,0],[5342,0,5334,0],[5343,0,5335,0],[5344,0,5336,0],[5345,0,5337,0],[5346,0,5338,0],[5347,0,5339,0],[5348,0,5340,0],[5349,0,5341,0],[5350,0,5342,0],[5351,0,5343,0],[5352,0,5344,0],[5353,0,5345,0],[5354,0,5346,0],[5355,2,5331,0,"exports"],[5355,9,5331,0],[5355,10,5331,0,"aR"],[5355,12,5331,0],[5355,15,5331,0,"SAMLAuthCredential"],[5355,33,5331,0],[5356,2,5347,0],[5356,8,5347,6,"SAML_PROVIDER_PREFIX"],[5356,28,5347,26],[5356,31,5347,29],[5356,38,5347,36],[5357,2,5348,0],[5358,0,5349,0],[5359,0,5350,0],[5360,0,5351,0],[5361,0,5352,0],[5362,2,5353,0],[5362,8,5353,6,"SAMLAuthProvider"],[5362,24,5353,22],[5362,33,5353,31,"FederatedAuthProvider"],[5362,54,5353,52],[5362,55,5353,53],[5363,4,5354,4],[5364,0,5355,0],[5365,0,5356,0],[5366,0,5357,0],[5367,4,5358,4,"constructor"],[5367,15,5358,15,"constructor"],[5367,16,5358,16,"providerId"],[5367,26,5358,26],[5367,28,5358,28],[5368,6,5359,8,"_assert"],[5368,13,5359,15],[5368,14,5359,16,"providerId"],[5368,24,5359,26],[5368,25,5359,27,"startsWith"],[5368,35,5359,37],[5368,36,5359,38,"SAML_PROVIDER_PREFIX"],[5368,56,5359,58],[5368,57,5359,59],[5368,59,5359,61],[5368,75,5359,77],[5368,76,5359,78],[5368,110,5359,112],[5368,111,5359,113],[5369,6,5360,8],[5369,11,5360,13],[5369,12,5360,14,"providerId"],[5369,22,5360,24],[5369,23,5360,25],[5370,4,5361,4],[5371,4,5362,4],[5372,0,5363,0],[5373,0,5364,0],[5374,0,5365,0],[5375,0,5366,0],[5376,0,5367,0],[5377,0,5368,0],[5378,0,5369,0],[5379,0,5370,0],[5380,0,5371,0],[5381,0,5372,0],[5382,0,5373,0],[5383,0,5374,0],[5384,0,5375,0],[5385,0,5376,0],[5386,0,5377,0],[5387,4,5378,4],[5387,11,5378,11,"credentialFromResult"],[5387,31,5378,31,"credentialFromResult"],[5387,32,5378,32,"userCredential"],[5387,46,5378,46],[5387,48,5378,48],[5388,6,5379,8],[5388,13,5379,15,"SAMLAuthProvider"],[5388,29,5379,31],[5388,30,5379,32,"samlCredentialFromTaggedObject"],[5388,60,5379,62],[5388,61,5379,63,"userCredential"],[5388,75,5379,77],[5388,76,5379,78],[5389,4,5380,4],[5390,4,5381,4],[5391,0,5382,0],[5392,0,5383,0],[5393,0,5384,0],[5394,0,5385,0],[5395,0,5386,0],[5396,4,5387,4],[5396,11,5387,11,"credentialFromError"],[5396,30,5387,30,"credentialFromError"],[5396,31,5387,31,"error"],[5396,36,5387,36],[5396,38,5387,38],[5397,6,5388,8],[5397,13,5388,15,"SAMLAuthProvider"],[5397,29,5388,31],[5397,30,5388,32,"samlCredentialFromTaggedObject"],[5397,60,5388,62],[5397,61,5388,64,"error"],[5397,66,5388,69],[5397,67,5388,70,"customData"],[5397,77,5388,80],[5397,81,5388,84],[5397,82,5388,85],[5397,83,5388,87],[5397,84,5388,88],[5398,4,5389,4],[5399,4,5390,4],[5400,0,5391,0],[5401,0,5392,0],[5402,0,5393,0],[5403,4,5394,4],[5403,11,5394,11,"credentialFromJSON"],[5403,29,5394,29,"credentialFromJSON"],[5403,30,5394,30,"json"],[5403,34,5394,34],[5403,36,5394,36],[5404,6,5395,8],[5404,12,5395,14,"credential"],[5404,22,5395,24],[5404,25,5395,27,"SAMLAuthCredential"],[5404,43,5395,45],[5404,44,5395,46,"fromJSON"],[5404,52,5395,54],[5404,53,5395,55,"json"],[5404,57,5395,59],[5404,58,5395,60],[5405,6,5396,8,"_assert"],[5405,13,5396,15],[5405,14,5396,16,"credential"],[5405,24,5396,26],[5405,26,5396,28],[5405,42,5396,44],[5405,43,5396,45],[5405,77,5396,79],[5405,78,5396,80],[5406,6,5397,8],[5406,13,5397,15,"credential"],[5406,23,5397,25],[5407,4,5398,4],[5408,4,5399,4],[5408,11,5399,11,"samlCredentialFromTaggedObject"],[5408,41,5399,41,"samlCredentialFromTaggedObject"],[5408,42,5399,42],[5409,6,5399,44,"_tokenResponse"],[5409,20,5399,58],[5409,22,5399,60,"tokenResponse"],[5410,4,5399,74],[5410,5,5399,75],[5410,7,5399,77],[5411,6,5400,8],[5411,10,5400,12],[5411,11,5400,13,"tokenResponse"],[5411,24,5400,26],[5411,26,5400,28],[5412,8,5401,12],[5412,15,5401,19],[5412,19,5401,23],[5413,6,5402,8],[5414,6,5403,8],[5414,12,5403,14],[5415,8,5403,16,"pendingToken"],[5415,20,5403,28],[5416,8,5403,30,"providerId"],[5417,6,5403,41],[5417,7,5403,42],[5417,10,5403,45,"tokenResponse"],[5417,23,5403,58],[5418,6,5404,8],[5418,10,5404,12],[5418,11,5404,13,"pendingToken"],[5418,23,5404,25],[5418,27,5404,29],[5418,28,5404,30,"providerId"],[5418,38,5404,40],[5418,40,5404,42],[5419,8,5405,12],[5419,15,5405,19],[5419,19,5405,23],[5420,6,5406,8],[5421,6,5407,8],[5421,10,5407,12],[5422,8,5408,12],[5422,15,5408,19,"SAMLAuthCredential"],[5422,33,5408,37],[5422,34,5408,38,"_create"],[5422,41,5408,45],[5422,42,5408,46,"providerId"],[5422,52,5408,56],[5422,54,5408,58,"pendingToken"],[5422,66,5408,70],[5422,67,5408,71],[5423,6,5409,8],[5423,7,5409,9],[5423,8,5410,8],[5423,15,5410,15,"e"],[5423,16,5410,16],[5423,18,5410,18],[5424,8,5411,12],[5424,15,5411,19],[5424,19,5411,23],[5425,6,5412,8],[5426,4,5413,4],[5427,2,5414,0],[5429,2,5416,0],[5430,0,5417,0],[5431,0,5418,0],[5432,0,5419,0],[5433,0,5420,0],[5434,0,5421,0],[5435,0,5422,0],[5436,0,5423,0],[5437,0,5424,0],[5438,0,5425,0],[5439,0,5426,0],[5440,0,5427,0],[5441,0,5428,0],[5442,0,5429,0],[5443,0,5430,0],[5444,0,5431,0],[5445,2,5432,0],[5446,0,5433,0],[5447,0,5434,0],[5448,0,5435,0],[5449,0,5436,0],[5450,0,5437,0],[5451,0,5438,0],[5452,0,5439,0],[5453,0,5440,0],[5454,0,5441,0],[5455,0,5442,0],[5456,0,5443,0],[5457,0,5444,0],[5458,0,5445,0],[5459,0,5446,0],[5460,0,5447,0],[5461,0,5448,0],[5462,0,5449,0],[5463,0,5450,0],[5464,0,5451,0],[5465,0,5452,0],[5466,0,5453,0],[5467,0,5454,0],[5468,0,5455,0],[5469,0,5456,0],[5470,0,5457,0],[5471,0,5458,0],[5472,0,5459,0],[5473,0,5460,0],[5474,0,5461,0],[5475,0,5462,0],[5476,0,5463,0],[5477,0,5464,0],[5478,0,5465,0],[5479,0,5466,0],[5480,0,5467,0],[5481,0,5468,0],[5482,0,5469,0],[5483,0,5470,0],[5484,2,5432,0,"exports"],[5484,9,5432,0],[5484,10,5432,0,"$"],[5484,11,5432,0],[5484,14,5432,0,"SAMLAuthProvider"],[5484,30,5432,0],[5485,2,5471,0],[5485,8,5471,6,"TwitterAuthProvider"],[5485,27,5471,25],[5485,36,5471,34,"BaseOAuthProvider"],[5485,53,5471,51],[5485,54,5471,52],[5486,4,5472,4,"constructor"],[5486,15,5472,15,"constructor"],[5486,16,5472,15],[5486,18,5472,18],[5487,6,5473,8],[5487,11,5473,13],[5487,12,5473,14],[5487,25,5473,27],[5487,26,5473,28],[5487,50,5473,52],[5487,51,5473,53],[5488,4,5474,4],[5489,4,5475,4],[5490,0,5476,0],[5491,0,5477,0],[5492,0,5478,0],[5493,0,5479,0],[5494,0,5480,0],[5495,4,5481,4],[5495,11,5481,11,"credential"],[5495,21,5481,21,"credential"],[5495,22,5481,22,"token"],[5495,27,5481,27],[5495,29,5481,29,"secret"],[5495,35,5481,35],[5495,37,5481,37],[5496,6,5482,8],[5496,13,5482,15,"OAuthCredential"],[5496,28,5482,30],[5496,29,5482,31,"_fromParams"],[5496,40,5482,42],[5496,41,5482,43],[5497,8,5483,12,"providerId"],[5497,18,5483,22],[5497,20,5483,24,"TwitterAuthProvider"],[5497,39,5483,43],[5497,40,5483,44,"PROVIDER_ID"],[5497,51,5483,55],[5498,8,5484,12,"signInMethod"],[5498,20,5484,24],[5498,22,5484,26,"TwitterAuthProvider"],[5498,41,5484,45],[5498,42,5484,46,"TWITTER_SIGN_IN_METHOD"],[5498,64,5484,68],[5499,8,5485,12,"oauthToken"],[5499,18,5485,22],[5499,20,5485,24,"token"],[5499,25,5485,29],[5500,8,5486,12,"oauthTokenSecret"],[5500,24,5486,28],[5500,26,5486,30,"secret"],[5501,6,5487,8],[5501,7,5487,9],[5501,8,5487,10],[5502,4,5488,4],[5503,4,5489,4],[5504,0,5490,0],[5505,0,5491,0],[5506,0,5492,0],[5507,0,5493,0],[5508,4,5494,4],[5508,11,5494,11,"credentialFromResult"],[5508,31,5494,31,"credentialFromResult"],[5508,32,5494,32,"userCredential"],[5508,46,5494,46],[5508,48,5494,48],[5509,6,5495,8],[5509,13,5495,15,"TwitterAuthProvider"],[5509,32,5495,34],[5509,33,5495,35,"credentialFromTaggedObject"],[5509,59,5495,61],[5509,60,5495,62,"userCredential"],[5509,74,5495,76],[5509,75,5495,77],[5510,4,5496,4],[5511,4,5497,4],[5512,0,5498,0],[5513,0,5499,0],[5514,0,5500,0],[5515,0,5501,0],[5516,0,5502,0],[5517,4,5503,4],[5517,11,5503,11,"credentialFromError"],[5517,30,5503,30,"credentialFromError"],[5517,31,5503,31,"error"],[5517,36,5503,36],[5517,38,5503,38],[5518,6,5504,8],[5518,13,5504,15,"TwitterAuthProvider"],[5518,32,5504,34],[5518,33,5504,35,"credentialFromTaggedObject"],[5518,59,5504,61],[5518,60,5504,63,"error"],[5518,65,5504,68],[5518,66,5504,69,"customData"],[5518,76,5504,79],[5518,80,5504,83],[5518,81,5504,84],[5518,82,5504,86],[5518,83,5504,87],[5519,4,5505,4],[5520,4,5506,4],[5520,11,5506,11,"credentialFromTaggedObject"],[5520,37,5506,37,"credentialFromTaggedObject"],[5520,38,5506,38],[5521,6,5506,40,"_tokenResponse"],[5521,20,5506,54],[5521,22,5506,56,"tokenResponse"],[5522,4,5506,70],[5522,5,5506,71],[5522,7,5506,73],[5523,6,5507,8],[5523,10,5507,12],[5523,11,5507,13,"tokenResponse"],[5523,24,5507,26],[5523,26,5507,28],[5524,8,5508,12],[5524,15,5508,19],[5524,19,5508,23],[5525,6,5509,8],[5526,6,5510,8],[5526,12,5510,14],[5527,8,5510,16,"oauthAccessToken"],[5527,24,5510,32],[5528,8,5510,34,"oauthTokenSecret"],[5529,6,5510,51],[5529,7,5510,52],[5529,10,5510,55,"tokenResponse"],[5529,23,5510,68],[5530,6,5511,8],[5530,10,5511,12],[5530,11,5511,13,"oauthAccessToken"],[5530,27,5511,29],[5530,31,5511,33],[5530,32,5511,34,"oauthTokenSecret"],[5530,48,5511,50],[5530,50,5511,52],[5531,8,5512,12],[5531,15,5512,19],[5531,19,5512,23],[5532,6,5513,8],[5533,6,5514,8],[5533,10,5514,12],[5534,8,5515,12],[5534,15,5515,19,"TwitterAuthProvider"],[5534,34,5515,38],[5534,35,5515,39,"credential"],[5534,45,5515,49],[5534,46,5515,50,"oauthAccessToken"],[5534,62,5515,66],[5534,64,5515,68,"oauthTokenSecret"],[5534,80,5515,84],[5534,81,5515,85],[5535,6,5516,8],[5535,7,5516,9],[5535,8,5517,8],[5535,14,5517,14],[5536,8,5518,12],[5536,15,5518,19],[5536,19,5518,23],[5537,6,5519,8],[5538,4,5520,4],[5539,2,5521,0],[5540,2,5522,0],[5541,2,5522,0,"exports"],[5541,9,5522,0],[5541,10,5522,0,"a0"],[5541,12,5522,0],[5541,15,5522,0,"TwitterAuthProvider"],[5541,34,5522,0],[5542,2,5523,0,"TwitterAuthProvider"],[5542,21,5523,19],[5542,22,5523,20,"TWITTER_SIGN_IN_METHOD"],[5542,44,5523,42],[5542,47,5523,45],[5542,60,5523,58],[5542,61,5523,59],[5543,2,5524,0],[5544,2,5525,0,"TwitterAuthProvider"],[5544,21,5525,19],[5544,22,5525,20,"PROVIDER_ID"],[5544,33,5525,31],[5544,36,5525,34],[5544,49,5525,47],[5544,50,5525,48],[5546,2,5527,0],[5547,0,5528,0],[5548,0,5529,0],[5549,0,5530,0],[5550,0,5531,0],[5551,0,5532,0],[5552,0,5533,0],[5553,0,5534,0],[5554,0,5535,0],[5555,0,5536,0],[5556,0,5537,0],[5557,0,5538,0],[5558,0,5539,0],[5559,0,5540,0],[5560,0,5541,0],[5561,0,5542,0],[5562,2,5543,0],[5562,17,5543,15,"signUp"],[5562,23,5543,21,"signUp"],[5562,24,5543,22,"auth"],[5562,28,5543,26],[5562,30,5543,28,"request"],[5562,37,5543,35],[5562,39,5543,37],[5563,4,5544,4],[5563,11,5544,11,"_performSignInRequest"],[5563,32,5544,32],[5563,33,5544,33,"auth"],[5563,37,5544,37],[5563,39,5544,39],[5563,45,5544,45],[5563,46,5544,46],[5563,69,5544,69],[5563,90,5544,90],[5563,91,5544,91],[5563,115,5544,115,"_addTidIfNecessary"],[5563,133,5544,133],[5563,134,5544,134,"auth"],[5563,138,5544,138],[5563,140,5544,140,"request"],[5563,147,5544,147],[5563,148,5544,148],[5563,149,5544,149],[5564,2,5545,0],[5566,2,5547,0],[5567,0,5548,0],[5568,0,5549,0],[5569,0,5550,0],[5570,0,5551,0],[5571,0,5552,0],[5572,0,5553,0],[5573,0,5554,0],[5574,0,5555,0],[5575,0,5556,0],[5576,0,5557,0],[5577,0,5558,0],[5578,0,5559,0],[5579,0,5560,0],[5580,0,5561,0],[5581,0,5562,0],[5582,2,5563,0],[5582,8,5563,6,"UserCredentialImpl"],[5582,26,5563,24],[5582,27,5563,25],[5583,4,5564,4,"constructor"],[5583,15,5564,15,"constructor"],[5583,16,5564,16,"params"],[5583,22,5564,22],[5583,24,5564,24],[5584,6,5565,8],[5584,10,5565,12],[5584,11,5565,13,"user"],[5584,15,5565,17],[5584,18,5565,20,"params"],[5584,24,5565,26],[5584,25,5565,27,"user"],[5584,29,5565,31],[5585,6,5566,8],[5585,10,5566,12],[5585,11,5566,13,"providerId"],[5585,21,5566,23],[5585,24,5566,26,"params"],[5585,30,5566,32],[5585,31,5566,33,"providerId"],[5585,41,5566,43],[5586,6,5567,8],[5586,10,5567,12],[5586,11,5567,13,"_tokenResponse"],[5586,25,5567,27],[5586,28,5567,30,"params"],[5586,34,5567,36],[5586,35,5567,37,"_tokenResponse"],[5586,49,5567,51],[5587,6,5568,8],[5587,10,5568,12],[5587,11,5568,13,"operationType"],[5587,24,5568,26],[5587,27,5568,29,"params"],[5587,33,5568,35],[5587,34,5568,36,"operationType"],[5587,47,5568,49],[5588,4,5569,4],[5589,4,5570,4],[5589,17,5570,17,"_fromIdTokenResponse"],[5589,37,5570,37,"_fromIdTokenResponse"],[5589,38,5570,38,"auth"],[5589,42,5570,42],[5589,44,5570,44,"operationType"],[5589,57,5570,57],[5589,59,5570,59,"idTokenResponse"],[5589,74,5570,74],[5589,76,5570,76,"isAnonymous"],[5589,87,5570,87],[5589,90,5570,90],[5589,95,5570,95],[5589,97,5570,97],[5590,6,5571,8],[5590,12,5571,14,"user"],[5590,16,5571,18],[5590,19,5571,21],[5590,25,5571,27,"UserImpl"],[5590,33,5571,35],[5590,34,5571,36,"_fromIdTokenResponse"],[5590,54,5571,56],[5590,55,5571,57,"auth"],[5590,59,5571,61],[5590,61,5571,63,"idTokenResponse"],[5590,76,5571,78],[5590,78,5571,80,"isAnonymous"],[5590,89,5571,91],[5590,90,5571,92],[5591,6,5572,8],[5591,12,5572,14,"providerId"],[5591,22,5572,24],[5591,25,5572,27,"providerIdForResponse"],[5591,46,5572,48],[5591,47,5572,49,"idTokenResponse"],[5591,62,5572,64],[5591,63,5572,65],[5592,6,5573,8],[5592,12,5573,14,"userCred"],[5592,20,5573,22],[5592,23,5573,25],[5592,27,5573,29,"UserCredentialImpl"],[5592,45,5573,47],[5592,46,5573,48],[5593,8,5574,12,"user"],[5593,12,5574,16],[5594,8,5575,12,"providerId"],[5594,18,5575,22],[5595,8,5576,12,"_tokenResponse"],[5595,22,5576,26],[5595,24,5576,28,"idTokenResponse"],[5595,39,5576,43],[5596,8,5577,12,"operationType"],[5597,6,5578,8],[5597,7,5578,9],[5597,8,5578,10],[5598,6,5579,8],[5598,13,5579,15,"userCred"],[5598,21,5579,23],[5599,4,5580,4],[5600,4,5581,4],[5600,17,5581,17,"_forOperation"],[5600,30,5581,30,"_forOperation"],[5600,31,5581,31,"user"],[5600,35,5581,35],[5600,37,5581,37,"operationType"],[5600,50,5581,50],[5600,52,5581,52,"response"],[5600,60,5581,60],[5600,62,5581,62],[5601,6,5582,8],[5601,12,5582,14,"user"],[5601,16,5582,18],[5601,17,5582,19,"_updateTokensIfNecessary"],[5601,41,5582,43],[5601,42,5582,44,"response"],[5601,50,5582,52],[5601,52,5582,54],[5601,64,5582,67],[5601,68,5582,71],[5601,69,5582,72],[5602,6,5583,8],[5602,12,5583,14,"providerId"],[5602,22,5583,24],[5602,25,5583,27,"providerIdForResponse"],[5602,46,5583,48],[5602,47,5583,49,"response"],[5602,55,5583,57],[5602,56,5583,58],[5603,6,5584,8],[5603,13,5584,15],[5603,17,5584,19,"UserCredentialImpl"],[5603,35,5584,37],[5603,36,5584,38],[5604,8,5585,12,"user"],[5604,12,5585,16],[5605,8,5586,12,"providerId"],[5605,18,5586,22],[5606,8,5587,12,"_tokenResponse"],[5606,22,5587,26],[5606,24,5587,28,"response"],[5606,32,5587,36],[5607,8,5588,12,"operationType"],[5608,6,5589,8],[5608,7,5589,9],[5608,8,5589,10],[5609,4,5590,4],[5610,2,5591,0],[5611,2,5592,0],[5611,11,5592,9,"providerIdForResponse"],[5611,32,5592,30,"providerIdForResponse"],[5611,33,5592,31,"response"],[5611,41,5592,39],[5611,43,5592,41],[5612,4,5593,4],[5612,8,5593,8,"response"],[5612,16,5593,16],[5612,17,5593,17,"providerId"],[5612,27,5593,27],[5612,29,5593,29],[5613,6,5594,8],[5613,13,5594,15,"response"],[5613,21,5594,23],[5613,22,5594,24,"providerId"],[5613,32,5594,34],[5614,4,5595,4],[5615,4,5596,4],[5615,8,5596,8],[5615,21,5596,21],[5615,25,5596,25,"response"],[5615,33,5596,33],[5615,35,5596,35],[5616,6,5597,8],[5616,13,5597,15],[5616,20,5597,22],[5616,21,5597,23],[5617,4,5598,4],[5618,4,5599,4],[5618,11,5599,11],[5618,15,5599,15],[5619,2,5600,0],[5621,2,5602,0],[5622,0,5603,0],[5623,0,5604,0],[5624,0,5605,0],[5625,0,5606,0],[5626,0,5607,0],[5627,0,5608,0],[5628,0,5609,0],[5629,0,5610,0],[5630,0,5611,0],[5631,0,5612,0],[5632,0,5613,0],[5633,0,5614,0],[5634,0,5615,0],[5635,0,5616,0],[5636,0,5617,0],[5637,2,5618,0],[5638,0,5619,0],[5639,0,5620,0],[5640,0,5621,0],[5641,0,5622,0],[5642,0,5623,0],[5643,0,5624,0],[5644,0,5625,0],[5645,0,5626,0],[5646,0,5627,0],[5647,0,5628,0],[5648,0,5629,0],[5649,0,5630,0],[5650,0,5631,0],[5651,2,5632,0],[5651,17,5632,15,"signInAnonymously"],[5651,34,5632,32,"signInAnonymously"],[5651,35,5632,33,"auth"],[5651,39,5632,37],[5651,41,5632,39],[5652,4,5633,4],[5652,8,5633,8],[5652,12,5633,8,"_isFirebaseServerApp"],[5652,37,5633,28],[5652,39,5633,29,"auth"],[5652,43,5633,33],[5652,44,5633,34,"app"],[5652,47,5633,37],[5652,48,5633,38],[5652,50,5633,40],[5653,6,5634,8],[5653,13,5634,15,"Promise"],[5653,20,5634,22],[5653,21,5634,23,"reject"],[5653,27,5634,29],[5653,28,5634,30,"_serverAppCurrentUserOperationNotSupportedError"],[5653,75,5634,77],[5653,76,5634,78,"auth"],[5653,80,5634,82],[5653,81,5634,83],[5653,82,5634,84],[5654,4,5635,4],[5655,4,5636,4],[5655,10,5636,10,"authInternal"],[5655,22,5636,22],[5655,25,5636,25,"_castAuth"],[5655,34,5636,34],[5655,35,5636,35,"auth"],[5655,39,5636,39],[5655,40,5636,40],[5656,4,5637,4],[5656,10,5637,10,"authInternal"],[5656,22,5637,22],[5656,23,5637,23,"_initializationPromise"],[5656,45,5637,45],[5657,4,5638,4],[5657,8,5638,8,"authInternal"],[5657,20,5638,20],[5657,21,5638,21,"currentUser"],[5657,32,5638,32],[5657,34,5638,34,"isAnonymous"],[5657,45,5638,45],[5657,47,5638,47],[5658,6,5639,8],[5659,6,5640,8],[5659,13,5640,15],[5659,17,5640,19,"UserCredentialImpl"],[5659,35,5640,37],[5659,36,5640,38],[5660,8,5641,12,"user"],[5660,12,5641,16],[5660,14,5641,18,"authInternal"],[5660,26,5641,30],[5660,27,5641,31,"currentUser"],[5660,38,5641,42],[5661,8,5642,12,"providerId"],[5661,18,5642,22],[5661,20,5642,24],[5661,24,5642,28],[5662,8,5643,12,"operationType"],[5662,21,5643,25],[5662,23,5643,27],[5662,31,5643,35],[5662,32,5643,36],[5663,6,5644,8],[5663,7,5644,9],[5663,8,5644,10],[5664,4,5645,4],[5665,4,5646,4],[5665,10,5646,10,"response"],[5665,18,5646,18],[5665,21,5646,21],[5665,27,5646,27,"signUp"],[5665,33,5646,33],[5665,34,5646,34,"authInternal"],[5665,46,5646,46],[5665,48,5646,48],[5666,6,5647,8,"returnSecureToken"],[5666,23,5647,25],[5666,25,5647,27],[5667,4,5648,4],[5667,5,5648,5],[5667,6,5648,6],[5668,4,5649,4],[5668,10,5649,10,"userCredential"],[5668,24,5649,24],[5668,27,5649,27],[5668,33,5649,33,"UserCredentialImpl"],[5668,51,5649,51],[5668,52,5649,52,"_fromIdTokenResponse"],[5668,72,5649,72],[5668,73,5649,73,"authInternal"],[5668,85,5649,85],[5668,87,5649,87],[5668,95,5649,95],[5668,96,5649,96],[5668,125,5649,125,"response"],[5668,133,5649,133],[5668,135,5649,135],[5668,139,5649,139],[5668,140,5649,140],[5669,4,5650,4],[5669,10,5650,10,"authInternal"],[5669,22,5650,22],[5669,23,5650,23,"_updateCurrentUser"],[5669,41,5650,41],[5669,42,5650,42,"userCredential"],[5669,56,5650,56],[5669,57,5650,57,"user"],[5669,61,5650,61],[5669,62,5650,62],[5670,4,5651,4],[5670,11,5651,11,"userCredential"],[5670,25,5651,25],[5671,2,5652,0],[5673,2,5654,0],[5674,0,5655,0],[5675,0,5656,0],[5676,0,5657,0],[5677,0,5658,0],[5678,0,5659,0],[5679,0,5660,0],[5680,0,5661,0],[5681,0,5662,0],[5682,0,5663,0],[5683,0,5664,0],[5684,0,5665,0],[5685,0,5666,0],[5686,0,5667,0],[5687,0,5668,0],[5688,0,5669,0],[5689,2,5670,0],[5689,8,5670,6,"MultiFactorError"],[5689,24,5670,22],[5689,33,5670,31,"FirebaseError"],[5689,52,5670,44],[5689,53,5670,45],[5690,4,5671,4,"constructor"],[5690,15,5671,15,"constructor"],[5690,16,5671,16,"auth"],[5690,20,5671,20],[5690,22,5671,22,"error"],[5690,27,5671,27],[5690,29,5671,29,"operationType"],[5690,42,5671,42],[5690,44,5671,44,"user"],[5690,48,5671,48],[5690,50,5671,50],[5691,6,5672,8],[5691,11,5672,13],[5691,12,5672,14,"error"],[5691,17,5672,19],[5691,18,5672,20,"code"],[5691,22,5672,24],[5691,24,5672,26,"error"],[5691,29,5672,31],[5691,30,5672,32,"message"],[5691,37,5672,39],[5691,38,5672,40],[5692,6,5673,8],[5692,10,5673,12],[5692,11,5673,13,"operationType"],[5692,24,5673,26],[5692,27,5673,29,"operationType"],[5692,40,5673,42],[5693,6,5674,8],[5693,10,5674,12],[5693,11,5674,13,"user"],[5693,15,5674,17],[5693,18,5674,20,"user"],[5693,22,5674,24],[5694,6,5675,8],[5695,6,5676,8,"Object"],[5695,12,5676,14],[5695,13,5676,15,"setPrototypeOf"],[5695,27,5676,29],[5695,28,5676,30],[5695,32,5676,34],[5695,34,5676,36,"MultiFactorError"],[5695,50,5676,52],[5695,51,5676,53,"prototype"],[5695,60,5676,62],[5695,61,5676,63],[5696,6,5677,8],[5696,10,5677,12],[5696,11,5677,13,"customData"],[5696,21,5677,23],[5696,24,5677,26],[5697,8,5678,12,"appName"],[5697,15,5678,19],[5697,17,5678,21,"auth"],[5697,21,5678,25],[5697,22,5678,26,"name"],[5697,26,5678,30],[5698,8,5679,12,"tenantId"],[5698,16,5679,20],[5698,18,5679,22,"auth"],[5698,22,5679,26],[5698,23,5679,27,"tenantId"],[5698,31,5679,35],[5698,35,5679,39,"undefined"],[5698,44,5679,48],[5699,8,5680,12,"_serverResponse"],[5699,23,5680,27],[5699,25,5680,29,"error"],[5699,30,5680,34],[5699,31,5680,35,"customData"],[5699,41,5680,45],[5699,42,5680,46,"_serverResponse"],[5699,57,5680,61],[5700,8,5681,12,"operationType"],[5701,6,5682,8],[5701,7,5682,9],[5702,4,5683,4],[5703,4,5684,4],[5703,11,5684,11,"_fromErrorAndOperation"],[5703,33,5684,33,"_fromErrorAndOperation"],[5703,34,5684,34,"auth"],[5703,38,5684,38],[5703,40,5684,40,"error"],[5703,45,5684,45],[5703,47,5684,47,"operationType"],[5703,60,5684,60],[5703,62,5684,62,"user"],[5703,66,5684,66],[5703,68,5684,68],[5704,6,5685,8],[5704,13,5685,15],[5704,17,5685,19,"MultiFactorError"],[5704,33,5685,35],[5704,34,5685,36,"auth"],[5704,38,5685,40],[5704,40,5685,42,"error"],[5704,45,5685,47],[5704,47,5685,49,"operationType"],[5704,60,5685,62],[5704,62,5685,64,"user"],[5704,66,5685,68],[5704,67,5685,69],[5705,4,5686,4],[5706,2,5687,0],[5707,2,5688,0],[5707,11,5688,9,"_processCredentialSavingMfaContextIfNecessary"],[5707,56,5688,54,"_processCredentialSavingMfaContextIfNecessary"],[5707,57,5688,55,"auth"],[5707,61,5688,59],[5707,63,5688,61,"operationType"],[5707,76,5688,74],[5707,78,5688,76,"credential"],[5707,88,5688,86],[5707,90,5688,88,"user"],[5707,94,5688,92],[5707,96,5688,94],[5708,4,5689,4],[5708,10,5689,10,"idTokenProvider"],[5708,25,5689,25],[5708,28,5689,28,"operationType"],[5708,41,5689,41],[5708,46,5689,46],[5708,62,5689,62],[5708,63,5689,63],[5708,100,5690,10,"credential"],[5708,110,5690,20],[5708,111,5690,21,"_getReauthenticationResolver"],[5708,139,5690,49],[5708,140,5690,50,"auth"],[5708,144,5690,54],[5708,145,5690,55],[5708,148,5691,10,"credential"],[5708,158,5691,20],[5708,159,5691,21,"_getIdTokenResponse"],[5708,178,5691,40],[5708,179,5691,41,"auth"],[5708,183,5691,45],[5708,184,5691,46],[5709,4,5692,4],[5709,11,5692,11,"idTokenProvider"],[5709,26,5692,26],[5709,27,5692,27,"catch"],[5709,32,5692,32],[5709,33,5692,33,"error"],[5709,38,5692,38],[5709,42,5692,42],[5710,6,5693,8],[5710,10,5693,12,"error"],[5710,15,5693,17],[5710,16,5693,18,"code"],[5710,20,5693,22],[5710,25,5693,27],[5710,33,5693,35],[5710,61,5693,63],[5710,62,5693,64],[5710,96,5693,98],[5710,98,5693,100],[5711,8,5694,12],[5711,14,5694,18,"MultiFactorError"],[5711,30,5694,34],[5711,31,5694,35,"_fromErrorAndOperation"],[5711,53,5694,57],[5711,54,5694,58,"auth"],[5711,58,5694,62],[5711,60,5694,64,"error"],[5711,65,5694,69],[5711,67,5694,71,"operationType"],[5711,80,5694,84],[5711,82,5694,86,"user"],[5711,86,5694,90],[5711,87,5694,91],[5712,6,5695,8],[5713,6,5696,8],[5713,12,5696,14,"error"],[5713,17,5696,19],[5714,4,5697,4],[5714,5,5697,5],[5714,6,5697,6],[5715,2,5698,0],[5717,2,5700,0],[5718,0,5701,0],[5719,0,5702,0],[5720,0,5703,0],[5721,0,5704,0],[5722,0,5705,0],[5723,0,5706,0],[5724,0,5707,0],[5725,0,5708,0],[5726,0,5709,0],[5727,0,5710,0],[5728,0,5711,0],[5729,0,5712,0],[5730,0,5713,0],[5731,0,5714,0],[5732,0,5715,0],[5733,2,5716,0],[5734,0,5717,0],[5735,0,5718,0],[5736,2,5719,0],[5736,11,5719,9,"providerDataAsNames"],[5736,30,5719,28,"providerDataAsNames"],[5736,31,5719,29,"providerData"],[5736,43,5719,41],[5736,45,5719,43],[5737,4,5720,4],[5737,11,5720,11],[5737,15,5720,15,"Set"],[5737,18,5720,18],[5737,19,5720,19,"providerData"],[5737,31,5720,31],[5737,32,5721,9,"map"],[5737,35,5721,12],[5737,36,5721,13],[5737,37,5721,14],[5738,6,5721,16,"providerId"],[5739,4,5721,27],[5739,5,5721,28],[5739,10,5721,33,"providerId"],[5739,20,5721,43],[5739,21,5721,44],[5739,22,5722,9,"filter"],[5739,28,5722,15],[5739,29,5722,16,"pid"],[5739,32,5722,19],[5739,36,5722,23],[5739,37,5722,24],[5739,38,5722,25,"pid"],[5739,41,5722,28],[5739,42,5722,29],[5739,43,5722,30],[5740,2,5723,0],[5742,2,5725,0],[5743,0,5726,0],[5744,0,5727,0],[5745,0,5728,0],[5746,0,5729,0],[5747,0,5730,0],[5748,0,5731,0],[5749,0,5732,0],[5750,0,5733,0],[5751,0,5734,0],[5752,0,5735,0],[5753,0,5736,0],[5754,0,5737,0],[5755,0,5738,0],[5756,0,5739,0],[5757,0,5740,0],[5758,2,5741,0],[5759,0,5742,0],[5760,0,5743,0],[5761,0,5744,0],[5762,0,5745,0],[5763,0,5746,0],[5764,0,5747,0],[5765,0,5748,0],[5766,2,5749,0],[5766,17,5749,15,"unlink"],[5766,23,5749,21,"unlink"],[5766,24,5749,22,"user"],[5766,28,5749,26],[5766,30,5749,28,"providerId"],[5766,40,5749,38],[5766,42,5749,40],[5767,4,5750,4],[5767,10,5750,10,"userInternal"],[5767,22,5750,22],[5767,25,5750,25],[5767,29,5750,25,"getModularInstance"],[5767,53,5750,43],[5767,55,5750,44,"user"],[5767,59,5750,48],[5767,60,5750,49],[5768,4,5751,4],[5768,10,5751,10,"_assertLinkedStatus"],[5768,29,5751,29],[5768,30,5751,30],[5768,34,5751,34],[5768,36,5751,36,"userInternal"],[5768,48,5751,48],[5768,50,5751,50,"providerId"],[5768,60,5751,60],[5768,61,5751,61],[5769,4,5752,4],[5769,10,5752,10],[5770,6,5752,12,"providerUserInfo"],[5771,4,5752,29],[5771,5,5752,30],[5771,8,5752,33],[5771,14,5752,39,"deleteLinkedAccounts"],[5771,34,5752,59],[5771,35,5752,60,"userInternal"],[5771,47,5752,72],[5771,48,5752,73,"auth"],[5771,52,5752,77],[5771,54,5752,79],[5772,6,5753,8,"idToken"],[5772,13,5753,15],[5772,15,5753,17],[5772,21,5753,23,"userInternal"],[5772,33,5753,35],[5772,34,5753,36,"getIdToken"],[5772,44,5753,46],[5772,45,5753,47],[5772,46,5753,48],[5773,6,5754,8,"deleteProvider"],[5773,20,5754,22],[5773,22,5754,24],[5773,23,5754,25,"providerId"],[5773,33,5754,35],[5774,4,5755,4],[5774,5,5755,5],[5774,6,5755,6],[5775,4,5756,4],[5775,10,5756,10,"providersLeft"],[5775,23,5756,23],[5775,26,5756,26,"providerDataAsNames"],[5775,45,5756,45],[5775,46,5756,46,"providerUserInfo"],[5775,62,5756,62],[5775,66,5756,66],[5775,68,5756,68],[5775,69,5756,69],[5776,4,5757,4,"userInternal"],[5776,16,5757,16],[5776,17,5757,17,"providerData"],[5776,29,5757,29],[5776,32,5757,32,"userInternal"],[5776,44,5757,44],[5776,45,5757,45,"providerData"],[5776,57,5757,57],[5776,58,5757,58,"filter"],[5776,64,5757,64],[5776,65,5757,65,"pd"],[5776,67,5757,67],[5776,71,5757,71,"providersLeft"],[5776,84,5757,84],[5776,85,5757,85,"has"],[5776,88,5757,88],[5776,89,5757,89,"pd"],[5776,91,5757,91],[5776,92,5757,92,"providerId"],[5776,102,5757,102],[5776,103,5757,103],[5776,104,5757,104],[5777,4,5758,4],[5777,8,5758,8],[5777,9,5758,9,"providersLeft"],[5777,22,5758,22],[5777,23,5758,23,"has"],[5777,26,5758,26],[5777,27,5758,27],[5777,34,5758,34],[5777,35,5758,35],[5777,57,5758,57],[5777,58,5758,58],[5777,60,5758,60],[5778,6,5759,8,"userInternal"],[5778,18,5759,20],[5778,19,5759,21,"phoneNumber"],[5778,30,5759,32],[5778,33,5759,35],[5778,37,5759,39],[5779,4,5760,4],[5780,4,5761,4],[5780,10,5761,10,"userInternal"],[5780,22,5761,22],[5780,23,5761,23,"auth"],[5780,27,5761,27],[5780,28,5761,28,"_persistUserIfCurrent"],[5780,49,5761,49],[5780,50,5761,50,"userInternal"],[5780,62,5761,62],[5780,63,5761,63],[5781,4,5762,4],[5781,11,5762,11,"userInternal"],[5781,23,5762,23],[5782,2,5763,0],[5783,2,5764,0],[5783,17,5764,15,"_link$1"],[5783,24,5764,22,"_link$1"],[5783,25,5764,23,"user"],[5783,29,5764,27],[5783,31,5764,29,"credential"],[5783,41,5764,39],[5783,43,5764,41,"bypassAuthState"],[5783,58,5764,56],[5783,61,5764,59],[5783,66,5764,64],[5783,68,5764,66],[5784,4,5765,4],[5784,10,5765,10,"response"],[5784,18,5765,18],[5784,21,5765,21],[5784,27,5765,27,"_logoutIfInvalidated"],[5784,47,5765,47],[5784,48,5765,48,"user"],[5784,52,5765,52],[5784,54,5765,54,"credential"],[5784,64,5765,64],[5784,65,5765,65,"_linkToIdToken"],[5784,79,5765,79],[5784,80,5765,80,"user"],[5784,84,5765,84],[5784,85,5765,85,"auth"],[5784,89,5765,89],[5784,91,5765,91],[5784,97,5765,97,"user"],[5784,101,5765,101],[5784,102,5765,102,"getIdToken"],[5784,112,5765,112],[5784,113,5765,113],[5784,114,5765,114],[5784,115,5765,115],[5784,117,5765,117,"bypassAuthState"],[5784,132,5765,132],[5784,133,5765,133],[5785,4,5766,4],[5785,11,5766,11,"UserCredentialImpl"],[5785,29,5766,29],[5785,30,5766,30,"_forOperation"],[5785,43,5766,43],[5785,44,5766,44,"user"],[5785,48,5766,48],[5785,50,5766,50],[5785,56,5766,56],[5785,57,5766,57],[5785,83,5766,83,"response"],[5785,91,5766,91],[5785,92,5766,92],[5786,2,5767,0],[5787,2,5768,0],[5787,17,5768,15,"_assertLinkedStatus"],[5787,36,5768,34,"_assertLinkedStatus"],[5787,37,5768,35,"expected"],[5787,45,5768,43],[5787,47,5768,45,"user"],[5787,51,5768,49],[5787,53,5768,51,"provider"],[5787,61,5768,59],[5787,63,5768,61],[5788,4,5769,4],[5788,10,5769,10,"_reloadWithoutSaving"],[5788,30,5769,30],[5788,31,5769,31,"user"],[5788,35,5769,35],[5788,36,5769,36],[5789,4,5770,4],[5789,10,5770,10,"providerIds"],[5789,21,5770,21],[5789,24,5770,24,"providerDataAsNames"],[5789,43,5770,43],[5789,44,5770,44,"user"],[5789,48,5770,48],[5789,49,5770,49,"providerData"],[5789,61,5770,61],[5789,62,5770,62],[5790,4,5771,4],[5790,10,5771,10,"code"],[5790,14,5771,14],[5790,17,5771,17,"expected"],[5790,25,5771,25],[5790,30,5771,30],[5790,35,5771,35],[5790,38,5772,10],[5790,63,5772,35],[5790,64,5772,36],[5790,110,5773,10],[5790,128,5773,28],[5790,129,5773,29],[5791,4,5774,4,"_assert"],[5791,11,5774,11],[5791,12,5774,12,"providerIds"],[5791,23,5774,23],[5791,24,5774,24,"has"],[5791,27,5774,27],[5791,28,5774,28,"provider"],[5791,36,5774,36],[5791,37,5774,37],[5791,42,5774,42,"expected"],[5791,50,5774,50],[5791,52,5774,52,"user"],[5791,56,5774,56],[5791,57,5774,57,"auth"],[5791,61,5774,61],[5791,63,5774,63,"code"],[5791,67,5774,67],[5791,68,5774,68],[5792,2,5775,0],[5794,2,5777,0],[5795,0,5778,0],[5796,0,5779,0],[5797,0,5780,0],[5798,0,5781,0],[5799,0,5782,0],[5800,0,5783,0],[5801,0,5784,0],[5802,0,5785,0],[5803,0,5786,0],[5804,0,5787,0],[5805,0,5788,0],[5806,0,5789,0],[5807,0,5790,0],[5808,0,5791,0],[5809,0,5792,0],[5810,2,5793,0],[5810,17,5793,15,"_reauthenticate"],[5810,32,5793,30,"_reauthenticate"],[5810,33,5793,31,"user"],[5810,37,5793,35],[5810,39,5793,37,"credential"],[5810,49,5793,47],[5810,51,5793,49,"bypassAuthState"],[5810,66,5793,64],[5810,69,5793,67],[5810,74,5793,72],[5810,76,5793,74],[5811,4,5794,4],[5811,10,5794,10],[5812,6,5794,12,"auth"],[5813,4,5794,17],[5813,5,5794,18],[5813,8,5794,21,"user"],[5813,12,5794,25],[5814,4,5795,4],[5814,8,5795,8],[5814,12,5795,8,"_isFirebaseServerApp"],[5814,37,5795,28],[5814,39,5795,29,"auth"],[5814,43,5795,33],[5814,44,5795,34,"app"],[5814,47,5795,37],[5814,48,5795,38],[5814,50,5795,40],[5815,6,5796,8],[5815,13,5796,15,"Promise"],[5815,20,5796,22],[5815,21,5796,23,"reject"],[5815,27,5796,29],[5815,28,5796,30,"_serverAppCurrentUserOperationNotSupportedError"],[5815,75,5796,77],[5815,76,5796,78,"auth"],[5815,80,5796,82],[5815,81,5796,83],[5815,82,5796,84],[5816,4,5797,4],[5817,4,5798,4],[5817,10,5798,10,"operationType"],[5817,23,5798,23],[5817,26,5798,26],[5817,42,5798,42],[5817,43,5798,43],[5818,4,5799,4],[5818,8,5799,8],[5819,6,5800,8],[5819,12,5800,14,"response"],[5819,20,5800,22],[5819,23,5800,25],[5819,29,5800,31,"_logoutIfInvalidated"],[5819,49,5800,51],[5819,50,5800,52,"user"],[5819,54,5800,56],[5819,56,5800,58,"_processCredentialSavingMfaContextIfNecessary"],[5819,101,5800,103],[5819,102,5800,104,"auth"],[5819,106,5800,108],[5819,108,5800,110,"operationType"],[5819,121,5800,123],[5819,123,5800,125,"credential"],[5819,133,5800,135],[5819,135,5800,137,"user"],[5819,139,5800,141],[5819,140,5800,142],[5819,142,5800,144,"bypassAuthState"],[5819,157,5800,159],[5819,158,5800,160],[5820,6,5801,8,"_assert"],[5820,13,5801,15],[5820,14,5801,16,"response"],[5820,22,5801,24],[5820,23,5801,25,"idToken"],[5820,30,5801,32],[5820,32,5801,34,"auth"],[5820,36,5801,38],[5820,38,5801,40],[5820,54,5801,56],[5820,55,5801,57],[5820,89,5801,91],[5820,90,5801,92],[5821,6,5802,8],[5821,12,5802,14,"parsed"],[5821,18,5802,20],[5821,21,5802,23,"_parseToken"],[5821,32,5802,34],[5821,33,5802,35,"response"],[5821,41,5802,43],[5821,42,5802,44,"idToken"],[5821,49,5802,51],[5821,50,5802,52],[5822,6,5803,8,"_assert"],[5822,13,5803,15],[5822,14,5803,16,"parsed"],[5822,20,5803,22],[5822,22,5803,24,"auth"],[5822,26,5803,28],[5822,28,5803,30],[5822,44,5803,46],[5822,45,5803,47],[5822,79,5803,81],[5822,80,5803,82],[5823,6,5804,8],[5823,12,5804,14],[5824,8,5804,16,"sub"],[5824,11,5804,19],[5824,13,5804,21,"localId"],[5825,6,5804,29],[5825,7,5804,30],[5825,10,5804,33,"parsed"],[5825,16,5804,39],[5826,6,5805,8,"_assert"],[5826,13,5805,15],[5826,14,5805,16,"user"],[5826,18,5805,20],[5826,19,5805,21,"uid"],[5826,22,5805,24],[5826,27,5805,29,"localId"],[5826,34,5805,36],[5826,36,5805,38,"auth"],[5826,40,5805,42],[5826,42,5805,44],[5826,57,5805,59],[5826,58,5805,60],[5826,91,5805,93],[5826,92,5805,94],[5827,6,5806,8],[5827,13,5806,15,"UserCredentialImpl"],[5827,31,5806,33],[5827,32,5806,34,"_forOperation"],[5827,45,5806,47],[5827,46,5806,48,"user"],[5827,50,5806,52],[5827,52,5806,54,"operationType"],[5827,65,5806,67],[5827,67,5806,69,"response"],[5827,75,5806,77],[5827,76,5806,78],[5828,4,5807,4],[5828,5,5807,5],[5828,6,5808,4],[5828,13,5808,11,"e"],[5828,14,5808,12],[5828,16,5808,14],[5829,6,5809,8],[5830,6,5810,8],[5830,10,5810,12,"e"],[5830,11,5810,13],[5830,13,5810,15,"code"],[5830,17,5810,19],[5830,22,5810,24],[5830,30,5810,32],[5830,46,5810,48],[5830,47,5810,49],[5830,81,5810,83],[5830,83,5810,85],[5831,8,5811,12,"_fail"],[5831,13,5811,17],[5831,14,5811,18,"auth"],[5831,18,5811,22],[5831,20,5811,24],[5831,35,5811,39],[5831,36,5811,40],[5831,69,5811,73],[5831,70,5811,74],[5832,6,5812,8],[5833,6,5813,8],[5833,12,5813,14,"e"],[5833,13,5813,15],[5834,4,5814,4],[5835,2,5815,0],[5837,2,5817,0],[5838,0,5818,0],[5839,0,5819,0],[5840,0,5820,0],[5841,0,5821,0],[5842,0,5822,0],[5843,0,5823,0],[5844,0,5824,0],[5845,0,5825,0],[5846,0,5826,0],[5847,0,5827,0],[5848,0,5828,0],[5849,0,5829,0],[5850,0,5830,0],[5851,0,5831,0],[5852,0,5832,0],[5853,2,5833,0],[5853,17,5833,15,"_signInWithCredential"],[5853,38,5833,36,"_signInWithCredential"],[5853,39,5833,37,"auth"],[5853,43,5833,41],[5853,45,5833,43,"credential"],[5853,55,5833,53],[5853,57,5833,55,"bypassAuthState"],[5853,72,5833,70],[5853,75,5833,73],[5853,80,5833,78],[5853,82,5833,80],[5854,4,5834,4],[5854,8,5834,8],[5854,12,5834,8,"_isFirebaseServerApp"],[5854,37,5834,28],[5854,39,5834,29,"auth"],[5854,43,5834,33],[5854,44,5834,34,"app"],[5854,47,5834,37],[5854,48,5834,38],[5854,50,5834,40],[5855,6,5835,8],[5855,13,5835,15,"Promise"],[5855,20,5835,22],[5855,21,5835,23,"reject"],[5855,27,5835,29],[5855,28,5835,30,"_serverAppCurrentUserOperationNotSupportedError"],[5855,75,5835,77],[5855,76,5835,78,"auth"],[5855,80,5835,82],[5855,81,5835,83],[5855,82,5835,84],[5856,4,5836,4],[5857,4,5837,4],[5857,10,5837,10,"operationType"],[5857,23,5837,23],[5857,26,5837,26],[5857,34,5837,34],[5857,35,5837,35],[5858,4,5838,4],[5858,10,5838,10,"response"],[5858,18,5838,18],[5858,21,5838,21],[5858,27,5838,27,"_processCredentialSavingMfaContextIfNecessary"],[5858,72,5838,72],[5858,73,5838,73,"auth"],[5858,77,5838,77],[5858,79,5838,79,"operationType"],[5858,92,5838,92],[5858,94,5838,94,"credential"],[5858,104,5838,104],[5858,105,5838,105],[5859,4,5839,4],[5859,10,5839,10,"userCredential"],[5859,24,5839,24],[5859,27,5839,27],[5859,33,5839,33,"UserCredentialImpl"],[5859,51,5839,51],[5859,52,5839,52,"_fromIdTokenResponse"],[5859,72,5839,72],[5859,73,5839,73,"auth"],[5859,77,5839,77],[5859,79,5839,79,"operationType"],[5859,92,5839,92],[5859,94,5839,94,"response"],[5859,102,5839,102],[5859,103,5839,103],[5860,4,5840,4],[5860,8,5840,8],[5860,9,5840,9,"bypassAuthState"],[5860,24,5840,24],[5860,26,5840,26],[5861,6,5841,8],[5861,12,5841,14,"auth"],[5861,16,5841,18],[5861,17,5841,19,"_updateCurrentUser"],[5861,35,5841,37],[5861,36,5841,38,"userCredential"],[5861,50,5841,52],[5861,51,5841,53,"user"],[5861,55,5841,57],[5861,56,5841,58],[5862,4,5842,4],[5863,4,5843,4],[5863,11,5843,11,"userCredential"],[5863,25,5843,25],[5864,2,5844,0],[5865,2,5845,0],[5866,0,5846,0],[5867,0,5847,0],[5868,0,5848,0],[5869,0,5849,0],[5870,0,5850,0],[5871,0,5851,0],[5872,0,5852,0],[5873,0,5853,0],[5874,0,5854,0],[5875,0,5855,0],[5876,0,5856,0],[5877,0,5857,0],[5878,0,5858,0],[5879,2,5859,0],[5879,17,5859,15,"signInWithCredential"],[5879,37,5859,35,"signInWithCredential"],[5879,38,5859,36,"auth"],[5879,42,5859,40],[5879,44,5859,42,"credential"],[5879,54,5859,52],[5879,56,5859,54],[5880,4,5860,4],[5880,11,5860,11,"_signInWithCredential"],[5880,32,5860,32],[5880,33,5860,33,"_castAuth"],[5880,42,5860,42],[5880,43,5860,43,"auth"],[5880,47,5860,47],[5880,48,5860,48],[5880,50,5860,50,"credential"],[5880,60,5860,60],[5880,61,5860,61],[5881,2,5861,0],[5882,2,5862,0],[5883,0,5863,0],[5884,0,5864,0],[5885,0,5865,0],[5886,0,5866,0],[5887,0,5867,0],[5888,0,5868,0],[5889,0,5869,0],[5890,0,5870,0],[5891,0,5871,0],[5892,0,5872,0],[5893,2,5873,0],[5893,17,5873,15,"linkWithCredential"],[5893,35,5873,33,"linkWithCredential"],[5893,36,5873,34,"user"],[5893,40,5873,38],[5893,42,5873,40,"credential"],[5893,52,5873,50],[5893,54,5873,52],[5894,4,5874,4],[5894,10,5874,10,"userInternal"],[5894,22,5874,22],[5894,25,5874,25],[5894,29,5874,25,"getModularInstance"],[5894,53,5874,43],[5894,55,5874,44,"user"],[5894,59,5874,48],[5894,60,5874,49],[5895,4,5875,4],[5895,10,5875,10,"_assertLinkedStatus"],[5895,29,5875,29],[5895,30,5875,30],[5895,35,5875,35],[5895,37,5875,37,"userInternal"],[5895,49,5875,49],[5895,51,5875,51,"credential"],[5895,61,5875,61],[5895,62,5875,62,"providerId"],[5895,72,5875,72],[5895,73,5875,73],[5896,4,5876,4],[5896,11,5876,11,"_link$1"],[5896,18,5876,18],[5896,19,5876,19,"userInternal"],[5896,31,5876,31],[5896,33,5876,33,"credential"],[5896,43,5876,43],[5896,44,5876,44],[5897,2,5877,0],[5898,2,5878,0],[5899,0,5879,0],[5900,0,5880,0],[5901,0,5881,0],[5902,0,5882,0],[5903,0,5883,0],[5904,0,5884,0],[5905,0,5885,0],[5906,0,5886,0],[5907,0,5887,0],[5908,0,5888,0],[5909,0,5889,0],[5910,0,5890,0],[5911,0,5891,0],[5912,0,5892,0],[5913,0,5893,0],[5914,2,5894,0],[5914,17,5894,15,"reauthenticateWithCredential"],[5914,45,5894,43,"reauthenticateWithCredential"],[5914,46,5894,44,"user"],[5914,50,5894,48],[5914,52,5894,50,"credential"],[5914,62,5894,60],[5914,64,5894,62],[5915,4,5895,4],[5915,11,5895,11,"_reauthenticate"],[5915,26,5895,26],[5915,27,5895,27],[5915,31,5895,27,"getModularInstance"],[5915,55,5895,45],[5915,57,5895,46,"user"],[5915,61,5895,50],[5915,62,5895,51],[5915,64,5895,53,"credential"],[5915,74,5895,63],[5915,75,5895,64],[5916,2,5896,0],[5918,2,5898,0],[5919,0,5899,0],[5920,0,5900,0],[5921,0,5901,0],[5922,0,5902,0],[5923,0,5903,0],[5924,0,5904,0],[5925,0,5905,0],[5926,0,5906,0],[5927,0,5907,0],[5928,0,5908,0],[5929,0,5909,0],[5930,0,5910,0],[5931,0,5911,0],[5932,0,5912,0],[5933,0,5913,0],[5934,2,5914,0],[5934,17,5914,15,"signInWithCustomToken$1"],[5934,40,5914,38,"signInWithCustomToken$1"],[5934,41,5914,39,"auth"],[5934,45,5914,43],[5934,47,5914,45,"request"],[5934,54,5914,52],[5934,56,5914,54],[5935,4,5915,4],[5935,11,5915,11,"_performSignInRequest"],[5935,32,5915,32],[5935,33,5915,33,"auth"],[5935,37,5915,37],[5935,39,5915,39],[5935,45,5915,45],[5935,46,5915,46],[5935,69,5915,69],[5935,105,5915,105],[5935,106,5915,106],[5935,148,5915,148,"_addTidIfNecessary"],[5935,166,5915,166],[5935,167,5915,167,"auth"],[5935,171,5915,171],[5935,173,5915,173,"request"],[5935,180,5915,180],[5935,181,5915,181],[5935,182,5915,182],[5936,2,5916,0],[5938,2,5918,0],[5939,0,5919,0],[5940,0,5920,0],[5941,0,5921,0],[5942,0,5922,0],[5943,0,5923,0],[5944,0,5924,0],[5945,0,5925,0],[5946,0,5926,0],[5947,0,5927,0],[5948,0,5928,0],[5949,0,5929,0],[5950,0,5930,0],[5951,0,5931,0],[5952,0,5932,0],[5953,0,5933,0],[5954,2,5934,0],[5955,0,5935,0],[5956,0,5936,0],[5957,0,5937,0],[5958,0,5938,0],[5959,0,5939,0],[5960,0,5940,0],[5961,0,5941,0],[5962,0,5942,0],[5963,0,5943,0],[5964,0,5944,0],[5965,0,5945,0],[5966,0,5946,0],[5967,0,5947,0],[5968,0,5948,0],[5969,0,5949,0],[5970,0,5950,0],[5971,0,5951,0],[5972,0,5952,0],[5973,2,5953,0],[5973,17,5953,15,"signInWithCustomToken"],[5973,38,5953,36,"signInWithCustomToken"],[5973,39,5953,37,"auth"],[5973,43,5953,41],[5973,45,5953,43,"customToken"],[5973,56,5953,54],[5973,58,5953,56],[5974,4,5954,4],[5974,8,5954,8],[5974,12,5954,8,"_isFirebaseServerApp"],[5974,37,5954,28],[5974,39,5954,29,"auth"],[5974,43,5954,33],[5974,44,5954,34,"app"],[5974,47,5954,37],[5974,48,5954,38],[5974,50,5954,40],[5975,6,5955,8],[5975,13,5955,15,"Promise"],[5975,20,5955,22],[5975,21,5955,23,"reject"],[5975,27,5955,29],[5975,28,5955,30,"_serverAppCurrentUserOperationNotSupportedError"],[5975,75,5955,77],[5975,76,5955,78,"auth"],[5975,80,5955,82],[5975,81,5955,83],[5975,82,5955,84],[5976,4,5956,4],[5977,4,5957,4],[5977,10,5957,10,"authInternal"],[5977,22,5957,22],[5977,25,5957,25,"_castAuth"],[5977,34,5957,34],[5977,35,5957,35,"auth"],[5977,39,5957,39],[5977,40,5957,40],[5978,4,5958,4],[5978,10,5958,10,"response"],[5978,18,5958,18],[5978,21,5958,21],[5978,27,5958,27,"signInWithCustomToken$1"],[5978,50,5958,50],[5978,51,5958,51,"authInternal"],[5978,63,5958,63],[5978,65,5958,65],[5979,6,5959,8,"token"],[5979,11,5959,13],[5979,13,5959,15,"customToken"],[5979,24,5959,26],[5980,6,5960,8,"returnSecureToken"],[5980,23,5960,25],[5980,25,5960,27],[5981,4,5961,4],[5981,5,5961,5],[5981,6,5961,6],[5982,4,5962,4],[5982,10,5962,10,"cred"],[5982,14,5962,14],[5982,17,5962,17],[5982,23,5962,23,"UserCredentialImpl"],[5982,41,5962,41],[5982,42,5962,42,"_fromIdTokenResponse"],[5982,62,5962,62],[5982,63,5962,63,"authInternal"],[5982,75,5962,75],[5982,77,5962,77],[5982,85,5962,85],[5982,86,5962,86],[5982,115,5962,115,"response"],[5982,123,5962,123],[5982,124,5962,124],[5983,4,5963,4],[5983,10,5963,10,"authInternal"],[5983,22,5963,22],[5983,23,5963,23,"_updateCurrentUser"],[5983,41,5963,41],[5983,42,5963,42,"cred"],[5983,46,5963,46],[5983,47,5963,47,"user"],[5983,51,5963,51],[5983,52,5963,52],[5984,4,5964,4],[5984,11,5964,11,"cred"],[5984,15,5964,15],[5985,2,5965,0],[5987,2,5967,0],[5988,0,5968,0],[5989,0,5969,0],[5990,0,5970,0],[5991,0,5971,0],[5992,0,5972,0],[5993,0,5973,0],[5994,0,5974,0],[5995,0,5975,0],[5996,0,5976,0],[5997,0,5977,0],[5998,0,5978,0],[5999,0,5979,0],[6000,0,5980,0],[6001,0,5981,0],[6002,0,5982,0],[6003,2,5983,0],[6003,8,5983,6,"MultiFactorInfoImpl"],[6003,27,5983,25],[6003,28,5983,26],[6004,4,5984,4,"constructor"],[6004,15,5984,15,"constructor"],[6004,16,5984,16,"factorId"],[6004,24,5984,24],[6004,26,5984,26,"response"],[6004,34,5984,34],[6004,36,5984,36],[6005,6,5985,8],[6005,10,5985,12],[6005,11,5985,13,"factorId"],[6005,19,5985,21],[6005,22,5985,24,"factorId"],[6005,30,5985,32],[6006,6,5986,8],[6006,10,5986,12],[6006,11,5986,13,"uid"],[6006,14,5986,16],[6006,17,5986,19,"response"],[6006,25,5986,27],[6006,26,5986,28,"mfaEnrollmentId"],[6006,41,5986,43],[6007,6,5987,8],[6007,10,5987,12],[6007,11,5987,13,"enrollmentTime"],[6007,25,5987,27],[6007,28,5987,30],[6007,32,5987,34,"Date"],[6007,36,5987,38],[6007,37,5987,39,"response"],[6007,45,5987,47],[6007,46,5987,48,"enrolledAt"],[6007,56,5987,58],[6007,57,5987,59],[6007,58,5987,60,"toUTCString"],[6007,69,5987,71],[6007,70,5987,72],[6007,71,5987,73],[6008,6,5988,8],[6008,10,5988,12],[6008,11,5988,13,"displayName"],[6008,22,5988,24],[6008,25,5988,27,"response"],[6008,33,5988,35],[6008,34,5988,36,"displayName"],[6008,45,5988,47],[6009,4,5989,4],[6010,4,5990,4],[6010,11,5990,11,"_fromServerResponse"],[6010,30,5990,30,"_fromServerResponse"],[6010,31,5990,31,"auth"],[6010,35,5990,35],[6010,37,5990,37,"enrollment"],[6010,47,5990,47],[6010,49,5990,49],[6011,6,5991,8],[6011,10,5991,12],[6011,21,5991,23],[6011,25,5991,27,"enrollment"],[6011,35,5991,37],[6011,37,5991,39],[6012,8,5992,12],[6012,15,5992,19,"PhoneMultiFactorInfoImpl"],[6012,39,5992,43],[6012,40,5992,44,"_fromServerResponse"],[6012,59,5992,63],[6012,60,5992,64,"auth"],[6012,64,5992,68],[6012,66,5992,70,"enrollment"],[6012,76,5992,80],[6012,77,5992,81],[6013,6,5993,8],[6013,7,5993,9],[6013,13,5994,13],[6013,17,5994,17],[6013,27,5994,27],[6013,31,5994,31,"enrollment"],[6013,41,5994,41],[6013,43,5994,43],[6014,8,5995,12],[6014,15,5995,19,"TotpMultiFactorInfoImpl"],[6014,38,5995,42],[6014,39,5995,43,"_fromServerResponse"],[6014,58,5995,62],[6014,59,5995,63,"auth"],[6014,63,5995,67],[6014,65,5995,69,"enrollment"],[6014,75,5995,79],[6014,76,5995,80],[6015,6,5996,8],[6016,6,5997,8],[6016,13,5997,15,"_fail"],[6016,18,5997,20],[6016,19,5997,21,"auth"],[6016,23,5997,25],[6016,25,5997,27],[6016,41,5997,43],[6016,42,5997,44],[6016,76,5997,78],[6016,77,5997,79],[6017,4,5998,4],[6018,2,5999,0],[6019,2,6000,0],[6019,8,6000,6,"PhoneMultiFactorInfoImpl"],[6019,32,6000,30],[6019,41,6000,39,"MultiFactorInfoImpl"],[6019,60,6000,58],[6019,61,6000,59],[6020,4,6001,4,"constructor"],[6020,15,6001,15,"constructor"],[6020,16,6001,16,"response"],[6020,24,6001,24],[6020,26,6001,26],[6021,6,6002,8],[6021,11,6002,13],[6021,12,6002,14],[6021,19,6002,21],[6021,20,6002,22],[6021,42,6002,44,"response"],[6021,50,6002,52],[6021,51,6002,53],[6022,6,6003,8],[6022,10,6003,12],[6022,11,6003,13,"phoneNumber"],[6022,22,6003,24],[6022,25,6003,27,"response"],[6022,33,6003,35],[6022,34,6003,36,"phoneInfo"],[6022,43,6003,45],[6023,4,6004,4],[6024,4,6005,4],[6024,11,6005,11,"_fromServerResponse"],[6024,30,6005,30,"_fromServerResponse"],[6024,31,6005,31,"_auth"],[6024,36,6005,36],[6024,38,6005,38,"enrollment"],[6024,48,6005,48],[6024,50,6005,50],[6025,6,6006,8],[6025,13,6006,15],[6025,17,6006,19,"PhoneMultiFactorInfoImpl"],[6025,41,6006,43],[6025,42,6006,44,"enrollment"],[6025,52,6006,54],[6025,53,6006,55],[6026,4,6007,4],[6027,2,6008,0],[6028,2,6009,0],[6028,8,6009,6,"TotpMultiFactorInfoImpl"],[6028,31,6009,29],[6028,40,6009,38,"MultiFactorInfoImpl"],[6028,59,6009,57],[6028,60,6009,58],[6029,4,6010,4,"constructor"],[6029,15,6010,15,"constructor"],[6029,16,6010,16,"response"],[6029,24,6010,24],[6029,26,6010,26],[6030,6,6011,8],[6030,11,6011,13],[6030,12,6011,14],[6030,18,6011,20],[6030,19,6011,21],[6030,40,6011,42,"response"],[6030,48,6011,50],[6030,49,6011,51],[6031,4,6012,4],[6032,4,6013,4],[6032,11,6013,11,"_fromServerResponse"],[6032,30,6013,30,"_fromServerResponse"],[6032,31,6013,31,"_auth"],[6032,36,6013,36],[6032,38,6013,38,"enrollment"],[6032,48,6013,48],[6032,50,6013,50],[6033,6,6014,8],[6033,13,6014,15],[6033,17,6014,19,"TotpMultiFactorInfoImpl"],[6033,40,6014,42],[6033,41,6014,43,"enrollment"],[6033,51,6014,53],[6033,52,6014,54],[6034,4,6015,4],[6035,2,6016,0],[6037,2,6018,0],[6038,0,6019,0],[6039,0,6020,0],[6040,0,6021,0],[6041,0,6022,0],[6042,0,6023,0],[6043,0,6024,0],[6044,0,6025,0],[6045,0,6026,0],[6046,0,6027,0],[6047,0,6028,0],[6048,0,6029,0],[6049,0,6030,0],[6050,0,6031,0],[6051,0,6032,0],[6052,0,6033,0],[6053,2,6034,0],[6053,11,6034,9,"_setActionCodeSettingsOnRequest"],[6053,42,6034,40,"_setActionCodeSettingsOnRequest"],[6053,43,6034,41,"auth"],[6053,47,6034,45],[6053,49,6034,47,"request"],[6053,56,6034,54],[6053,58,6034,56,"actionCodeSettings"],[6053,76,6034,74],[6053,78,6034,76],[6054,4,6035,4,"_assert"],[6054,11,6035,11],[6054,12,6035,12,"actionCodeSettings"],[6054,30,6035,30],[6054,31,6035,31,"url"],[6054,34,6035,34],[6054,36,6035,36,"length"],[6054,42,6035,42],[6054,45,6035,45],[6054,46,6035,46],[6054,48,6035,48,"auth"],[6054,52,6035,52],[6054,54,6035,54],[6054,76,6035,76],[6054,77,6035,77],[6054,117,6035,117],[6054,118,6035,118],[6055,4,6036,4,"_assert"],[6055,11,6036,11],[6055,12,6036,12],[6055,19,6036,19,"actionCodeSettings"],[6055,37,6036,37],[6055,38,6036,38,"dynamicLinkDomain"],[6055,55,6036,55],[6055,60,6036,60],[6055,71,6036,71],[6055,75,6037,8,"actionCodeSettings"],[6055,93,6037,26],[6055,94,6037,27,"dynamicLinkDomain"],[6055,111,6037,44],[6055,112,6037,45,"length"],[6055,118,6037,51],[6055,121,6037,54],[6055,122,6037,55],[6055,124,6037,57,"auth"],[6055,128,6037,61],[6055,130,6037,63],[6055,159,6037,92],[6055,160,6037,93],[6055,207,6037,140],[6055,208,6037,141],[6056,4,6038,4,"_assert"],[6056,11,6038,11],[6056,12,6038,12],[6056,19,6038,19,"actionCodeSettings"],[6056,37,6038,37],[6056,38,6038,38,"linkDomain"],[6056,48,6038,48],[6056,53,6038,53],[6056,64,6038,64],[6056,68,6039,8,"actionCodeSettings"],[6056,86,6039,26],[6056,87,6039,27,"linkDomain"],[6056,97,6039,37],[6056,98,6039,38,"length"],[6056,104,6039,44],[6056,107,6039,47],[6056,108,6039,48],[6056,110,6039,50,"auth"],[6056,114,6039,54],[6056,116,6039,56],[6056,145,6039,85],[6056,146,6039,86],[6056,193,6039,133],[6056,194,6039,134],[6057,4,6040,4,"request"],[6057,11,6040,11],[6057,12,6040,12,"continueUrl"],[6057,23,6040,23],[6057,26,6040,26,"actionCodeSettings"],[6057,44,6040,44],[6057,45,6040,45,"url"],[6057,48,6040,48],[6058,4,6041,4,"request"],[6058,11,6041,11],[6058,12,6041,12,"dynamicLinkDomain"],[6058,29,6041,29],[6058,32,6041,32,"actionCodeSettings"],[6058,50,6041,50],[6058,51,6041,51,"dynamicLinkDomain"],[6058,68,6041,68],[6059,4,6042,4,"request"],[6059,11,6042,11],[6059,12,6042,12,"linkDomain"],[6059,22,6042,22],[6059,25,6042,25,"actionCodeSettings"],[6059,43,6042,43],[6059,44,6042,44,"linkDomain"],[6059,54,6042,54],[6060,4,6043,4,"request"],[6060,11,6043,11],[6060,12,6043,12,"canHandleCodeInApp"],[6060,30,6043,30],[6060,33,6043,33,"actionCodeSettings"],[6060,51,6043,51],[6060,52,6043,52,"handleCodeInApp"],[6060,67,6043,67],[6061,4,6044,4],[6061,8,6044,8,"actionCodeSettings"],[6061,26,6044,26],[6061,27,6044,27,"iOS"],[6061,30,6044,30],[6061,32,6044,32],[6062,6,6045,8,"_assert"],[6062,13,6045,15],[6062,14,6045,16,"actionCodeSettings"],[6062,32,6045,34],[6062,33,6045,35,"iOS"],[6062,36,6045,38],[6062,37,6045,39,"bundleId"],[6062,45,6045,47],[6062,46,6045,48,"length"],[6062,52,6045,54],[6062,55,6045,57],[6062,56,6045,58],[6062,58,6045,60,"auth"],[6062,62,6045,64],[6062,64,6045,66],[6062,87,6045,89],[6062,88,6045,90],[6062,129,6045,131],[6062,130,6045,132],[6063,6,6046,8,"request"],[6063,13,6046,15],[6063,14,6046,16,"iOSBundleId"],[6063,25,6046,27],[6063,28,6046,30,"actionCodeSettings"],[6063,46,6046,48],[6063,47,6046,49,"iOS"],[6063,50,6046,52],[6063,51,6046,53,"bundleId"],[6063,59,6046,61],[6064,4,6047,4],[6065,4,6048,4],[6065,8,6048,8,"actionCodeSettings"],[6065,26,6048,26],[6065,27,6048,27,"android"],[6065,34,6048,34],[6065,36,6048,36],[6066,6,6049,8,"_assert"],[6066,13,6049,15],[6066,14,6049,16,"actionCodeSettings"],[6066,32,6049,34],[6066,33,6049,35,"android"],[6066,40,6049,42],[6066,41,6049,43,"packageName"],[6066,52,6049,54],[6066,53,6049,55,"length"],[6066,59,6049,61],[6066,62,6049,64],[6066,63,6049,65],[6066,65,6049,67,"auth"],[6066,69,6049,71],[6066,71,6049,73],[6066,97,6049,99],[6066,98,6049,100],[6066,146,6049,148],[6066,147,6049,149],[6067,6,6050,8,"request"],[6067,13,6050,15],[6067,14,6050,16,"androidInstallApp"],[6067,31,6050,33],[6067,34,6050,36,"actionCodeSettings"],[6067,52,6050,54],[6067,53,6050,55,"android"],[6067,60,6050,62],[6067,61,6050,63,"installApp"],[6067,71,6050,73],[6068,6,6051,8,"request"],[6068,13,6051,15],[6068,14,6051,16,"androidMinimumVersionCode"],[6068,39,6051,41],[6068,42,6052,12,"actionCodeSettings"],[6068,60,6052,30],[6068,61,6052,31,"android"],[6068,68,6052,38],[6068,69,6052,39,"minimumVersion"],[6068,83,6052,53],[6069,6,6053,8,"request"],[6069,13,6053,15],[6069,14,6053,16,"androidPackageName"],[6069,32,6053,34],[6069,35,6053,37,"actionCodeSettings"],[6069,53,6053,55],[6069,54,6053,56,"android"],[6069,61,6053,63],[6069,62,6053,64,"packageName"],[6069,73,6053,75],[6070,4,6054,4],[6071,2,6055,0],[6073,2,6057,0],[6074,0,6058,0],[6075,0,6059,0],[6076,0,6060,0],[6077,0,6061,0],[6078,0,6062,0],[6079,0,6063,0],[6080,0,6064,0],[6081,0,6065,0],[6082,0,6066,0],[6083,0,6067,0],[6084,0,6068,0],[6085,0,6069,0],[6086,0,6070,0],[6087,0,6071,0],[6088,0,6072,0],[6089,2,6073,0],[6090,0,6074,0],[6091,0,6075,0],[6092,0,6076,0],[6093,0,6077,0],[6094,0,6078,0],[6095,0,6079,0],[6096,0,6080,0],[6097,0,6081,0],[6098,0,6082,0],[6099,0,6083,0],[6100,0,6084,0],[6101,0,6085,0],[6102,2,6086,0],[6102,17,6086,15,"recachePasswordPolicy"],[6102,38,6086,36,"recachePasswordPolicy"],[6102,39,6086,37,"auth"],[6102,43,6086,41],[6102,45,6086,43],[6103,4,6087,4],[6103,10,6087,10,"authInternal"],[6103,22,6087,22],[6103,25,6087,25,"_castAuth"],[6103,34,6087,34],[6103,35,6087,35,"auth"],[6103,39,6087,39],[6103,40,6087,40],[6104,4,6088,4],[6104,8,6088,8,"authInternal"],[6104,20,6088,20],[6104,21,6088,21,"_getPasswordPolicyInternal"],[6104,47,6088,47],[6104,48,6088,48],[6104,49,6088,49],[6104,51,6088,51],[6105,6,6089,8],[6105,12,6089,14,"authInternal"],[6105,24,6089,26],[6105,25,6089,27,"_updatePasswordPolicy"],[6105,46,6089,48],[6105,47,6089,49],[6105,48,6089,50],[6106,4,6090,4],[6107,2,6091,0],[6108,2,6092,0],[6109,0,6093,0],[6110,0,6094,0],[6111,0,6095,0],[6112,0,6096,0],[6113,0,6097,0],[6114,0,6098,0],[6115,0,6099,0],[6116,0,6100,0],[6117,0,6101,0],[6118,0,6102,0],[6119,0,6103,0],[6120,0,6104,0],[6121,0,6105,0],[6122,0,6106,0],[6123,0,6107,0],[6124,0,6108,0],[6125,0,6109,0],[6126,0,6110,0],[6127,0,6111,0],[6128,0,6112,0],[6129,0,6113,0],[6130,0,6114,0],[6131,0,6115,0],[6132,0,6116,0],[6133,0,6117,0],[6134,0,6118,0],[6135,0,6119,0],[6136,0,6120,0],[6137,0,6121,0],[6138,0,6122,0],[6139,0,6123,0],[6140,0,6124,0],[6141,0,6125,0],[6142,0,6126,0],[6143,2,6127,0],[6143,17,6127,15,"sendPasswordResetEmail"],[6143,39,6127,37,"sendPasswordResetEmail"],[6143,40,6127,38,"auth"],[6143,44,6127,42],[6143,46,6127,44,"email"],[6143,51,6127,49],[6143,53,6127,51,"actionCodeSettings"],[6143,71,6127,69],[6143,73,6127,71],[6144,4,6128,4],[6144,10,6128,10,"authInternal"],[6144,22,6128,22],[6144,25,6128,25,"_castAuth"],[6144,34,6128,34],[6144,35,6128,35,"auth"],[6144,39,6128,39],[6144,40,6128,40],[6145,4,6129,4],[6145,10,6129,10,"request"],[6145,17,6129,17],[6145,20,6129,20],[6146,6,6130,8,"requestType"],[6146,17,6130,19],[6146,19,6130,21],[6146,35,6130,37],[6146,36,6130,38],[6147,6,6131,8,"email"],[6147,11,6131,13],[6148,6,6132,8,"clientType"],[6148,16,6132,18],[6148,18,6132,20],[6148,35,6132,37],[6148,36,6132,38],[6149,4,6133,4],[6149,5,6133,5],[6150,4,6134,4],[6150,8,6134,8,"actionCodeSettings"],[6150,26,6134,26],[6150,28,6134,28],[6151,6,6135,8,"_setActionCodeSettingsOnRequest"],[6151,37,6135,39],[6151,38,6135,40,"authInternal"],[6151,50,6135,52],[6151,52,6135,54,"request"],[6151,59,6135,61],[6151,61,6135,63,"actionCodeSettings"],[6151,79,6135,81],[6151,80,6135,82],[6152,4,6136,4],[6153,4,6137,4],[6153,10,6137,10,"handleRecaptchaFlow"],[6153,29,6137,29],[6153,30,6137,30,"authInternal"],[6153,42,6137,42],[6153,44,6137,44,"request"],[6153,51,6137,51],[6153,53,6137,53],[6153,65,6137,65],[6153,66,6137,66],[6153,106,6137,106,"sendPasswordResetEmail$1"],[6153,130,6137,130],[6153,132,6137,132],[6153,157,6137,157],[6153,158,6137,158],[6153,209,6137,209],[6153,210,6137,210],[6154,2,6138,0],[6155,2,6139,0],[6156,0,6140,0],[6157,0,6141,0],[6158,0,6142,0],[6159,0,6143,0],[6160,0,6144,0],[6161,0,6145,0],[6162,0,6146,0],[6163,0,6147,0],[6164,2,6148,0],[6164,17,6148,15,"confirmPasswordReset"],[6164,37,6148,35,"confirmPasswordReset"],[6164,38,6148,36,"auth"],[6164,42,6148,40],[6164,44,6148,42,"oobCode"],[6164,51,6148,49],[6164,53,6148,51,"newPassword"],[6164,64,6148,62],[6164,66,6148,64],[6165,4,6149,4],[6165,10,6149,10,"resetPassword"],[6165,23,6149,23],[6165,24,6149,24],[6165,28,6149,24,"getModularInstance"],[6165,52,6149,42],[6165,54,6149,43,"auth"],[6165,58,6149,47],[6165,59,6149,48],[6165,61,6149,50],[6166,6,6150,8,"oobCode"],[6166,13,6150,15],[6167,6,6151,8,"newPassword"],[6168,4,6152,4],[6168,5,6152,5],[6168,6,6152,6],[6168,7,6153,9,"catch"],[6168,12,6153,14],[6168,13,6153,15],[6168,19,6153,22,"error"],[6168,24,6153,27],[6168,28,6153,32],[6169,6,6154,8],[6169,10,6154,12,"error"],[6169,15,6154,17],[6169,16,6154,18,"code"],[6169,20,6154,22],[6169,25,6155,12],[6169,33,6155,20],[6169,70,6155,57],[6169,71,6155,58],[6169,128,6155,115],[6169,130,6155,117],[6170,8,6156,12],[6170,13,6156,17,"recachePasswordPolicy"],[6170,34,6156,38],[6170,35,6156,39,"auth"],[6170,39,6156,43],[6170,40,6156,44],[6171,6,6157,8],[6172,6,6158,8],[6172,12,6158,14,"error"],[6172,17,6158,19],[6173,4,6159,4],[6173,5,6159,5],[6173,6,6159,6],[6174,4,6160,4],[6175,2,6161,0],[6176,2,6162,0],[6177,0,6163,0],[6178,0,6164,0],[6179,0,6165,0],[6180,0,6166,0],[6181,0,6167,0],[6182,0,6168,0],[6183,0,6169,0],[6184,2,6170,0],[6184,17,6170,15,"applyActionCode"],[6184,32,6170,30,"applyActionCode"],[6184,33,6170,31,"auth"],[6184,37,6170,35],[6184,39,6170,37,"oobCode"],[6184,46,6170,44],[6184,48,6170,46],[6185,4,6171,4],[6185,10,6171,10,"applyActionCode$1"],[6185,27,6171,27],[6185,28,6171,28],[6185,32,6171,28,"getModularInstance"],[6185,56,6171,46],[6185,58,6171,47,"auth"],[6185,62,6171,51],[6185,63,6171,52],[6185,65,6171,54],[6186,6,6171,56,"oobCode"],[6187,4,6171,64],[6187,5,6171,65],[6187,6,6171,66],[6188,2,6172,0],[6189,2,6173,0],[6190,0,6174,0],[6191,0,6175,0],[6192,0,6176,0],[6193,0,6177,0],[6194,0,6178,0],[6195,0,6179,0],[6196,0,6180,0],[6197,0,6181,0],[6198,0,6182,0],[6199,2,6183,0],[6199,17,6183,15,"checkActionCode"],[6199,32,6183,30,"checkActionCode"],[6199,33,6183,31,"auth"],[6199,37,6183,35],[6199,39,6183,37,"oobCode"],[6199,46,6183,44],[6199,48,6183,46],[6200,4,6184,4],[6200,10,6184,10,"authModular"],[6200,21,6184,21],[6200,24,6184,24],[6200,28,6184,24,"getModularInstance"],[6200,52,6184,42],[6200,54,6184,43,"auth"],[6200,58,6184,47],[6200,59,6184,48],[6201,4,6185,4],[6201,10,6185,10,"response"],[6201,18,6185,18],[6201,21,6185,21],[6201,27,6185,27,"resetPassword"],[6201,40,6185,40],[6201,41,6185,41,"authModular"],[6201,52,6185,52],[6201,54,6185,54],[6202,6,6185,56,"oobCode"],[6203,4,6185,64],[6203,5,6185,65],[6203,6,6185,66],[6204,4,6186,4],[6205,4,6187,4],[6206,4,6188,4],[6207,4,6189,4],[6208,4,6190,4],[6209,4,6191,4],[6210,4,6192,4],[6210,10,6192,10,"operation"],[6210,19,6192,19],[6210,22,6192,22,"response"],[6210,30,6192,30],[6210,31,6192,31,"requestType"],[6210,42,6192,42],[6211,4,6193,4,"_assert"],[6211,11,6193,11],[6211,12,6193,12,"operation"],[6211,21,6193,21],[6211,23,6193,23,"authModular"],[6211,34,6193,34],[6211,36,6193,36],[6211,52,6193,52],[6211,53,6193,53],[6211,87,6193,87],[6211,88,6193,88],[6212,4,6194,4],[6212,12,6194,12,"operation"],[6212,21,6194,21],[6213,6,6195,8],[6213,11,6195,13],[6213,25,6195,27],[6213,26,6195,28],[6214,8,6196,12],[6215,6,6197,8],[6215,11,6197,13],[6215,36,6197,38],[6215,37,6197,39],[6216,8,6198,12,"_assert"],[6216,15,6198,19],[6216,16,6198,20,"response"],[6216,24,6198,28],[6216,25,6198,29,"newEmail"],[6216,33,6198,37],[6216,35,6198,39,"authModular"],[6216,46,6198,50],[6216,48,6198,52],[6216,64,6198,68],[6216,65,6198,69],[6216,99,6198,103],[6216,100,6198,104],[6217,8,6199,12],[6218,6,6200,8],[6218,11,6200,13],[6218,42,6200,44],[6218,43,6200,45],[6219,8,6201,12,"_assert"],[6219,15,6201,19],[6219,16,6201,20,"response"],[6219,24,6201,28],[6219,25,6201,29,"mfaInfo"],[6219,32,6201,36],[6219,34,6201,38,"authModular"],[6219,45,6201,49],[6219,47,6201,51],[6219,63,6201,67],[6219,64,6201,68],[6219,98,6201,102],[6219,99,6201,103],[6220,6,6202,8],[6221,6,6203,8],[6222,8,6204,12,"_assert"],[6222,15,6204,19],[6222,16,6204,20,"response"],[6222,24,6204,28],[6222,25,6204,29,"email"],[6222,30,6204,34],[6222,32,6204,36,"authModular"],[6222,43,6204,47],[6222,45,6204,49],[6222,61,6204,65],[6222,62,6204,66],[6222,96,6204,100],[6222,97,6204,101],[6223,4,6205,4],[6224,4,6206,4],[6225,4,6207,4],[6225,8,6207,8,"multiFactorInfo"],[6225,23,6207,23],[6225,26,6207,26],[6225,30,6207,30],[6226,4,6208,4],[6226,8,6208,8,"response"],[6226,16,6208,16],[6226,17,6208,17,"mfaInfo"],[6226,24,6208,24],[6226,26,6208,26],[6227,6,6209,8,"multiFactorInfo"],[6227,21,6209,23],[6227,24,6209,26,"MultiFactorInfoImpl"],[6227,43,6209,45],[6227,44,6209,46,"_fromServerResponse"],[6227,63,6209,65],[6227,64,6209,66,"_castAuth"],[6227,73,6209,75],[6227,74,6209,76,"authModular"],[6227,85,6209,87],[6227,86,6209,88],[6227,88,6209,90,"response"],[6227,96,6209,98],[6227,97,6209,99,"mfaInfo"],[6227,104,6209,106],[6227,105,6209,107],[6228,4,6210,4],[6229,4,6211,4],[6229,11,6211,11],[6230,6,6212,8,"data"],[6230,10,6212,12],[6230,12,6212,14],[6231,8,6213,12,"email"],[6231,13,6213,17],[6231,15,6213,19],[6231,16,6213,20,"response"],[6231,24,6213,28],[6231,25,6213,29,"requestType"],[6231,36,6213,40],[6231,41,6213,45],[6231,66,6213,70],[6231,67,6213,71],[6231,119,6214,18,"response"],[6231,127,6214,26],[6231,128,6214,27,"newEmail"],[6231,136,6214,35],[6231,139,6215,18,"response"],[6231,147,6215,26],[6231,148,6215,27,"email"],[6231,153,6215,32],[6231,158,6215,37],[6231,162,6215,41],[6232,8,6216,12,"previousEmail"],[6232,21,6216,25],[6232,23,6216,27],[6232,24,6216,28,"response"],[6232,32,6216,36],[6232,33,6216,37,"requestType"],[6232,44,6216,48],[6232,49,6216,53],[6232,74,6216,78],[6232,75,6216,79],[6232,127,6217,18,"response"],[6232,135,6217,26],[6232,136,6217,27,"email"],[6232,141,6217,32],[6232,144,6218,18,"response"],[6232,152,6218,26],[6232,153,6218,27,"newEmail"],[6232,161,6218,35],[6232,166,6218,40],[6232,170,6218,44],[6233,8,6219,12,"multiFactorInfo"],[6234,6,6220,8],[6234,7,6220,9],[6235,6,6221,8,"operation"],[6236,4,6222,4],[6236,5,6222,5],[6237,2,6223,0],[6238,2,6224,0],[6239,0,6225,0],[6240,0,6226,0],[6241,0,6227,0],[6242,0,6228,0],[6243,0,6229,0],[6244,0,6230,0],[6245,0,6231,0],[6246,0,6232,0],[6247,0,6233,0],[6248,2,6234,0],[6248,17,6234,15,"verifyPasswordResetCode"],[6248,40,6234,38,"verifyPasswordResetCode"],[6248,41,6234,39,"auth"],[6248,45,6234,43],[6248,47,6234,45,"code"],[6248,51,6234,49],[6248,53,6234,51],[6249,4,6235,4],[6249,10,6235,10],[6250,6,6235,12,"data"],[6251,4,6235,17],[6251,5,6235,18],[6251,8,6235,21],[6251,14,6235,27,"checkActionCode"],[6251,29,6235,42],[6251,30,6235,43],[6251,34,6235,43,"getModularInstance"],[6251,58,6235,61],[6251,60,6235,62,"auth"],[6251,64,6235,66],[6251,65,6235,67],[6251,67,6235,69,"code"],[6251,71,6235,73],[6251,72,6235,74],[6252,4,6236,4],[6253,4,6237,4],[6253,11,6237,11,"data"],[6253,15,6237,15],[6253,16,6237,16,"email"],[6253,21,6237,21],[6254,2,6238,0],[6255,2,6239,0],[6256,0,6240,0],[6257,0,6241,0],[6258,0,6242,0],[6259,0,6243,0],[6260,0,6244,0],[6261,0,6245,0],[6262,0,6246,0],[6263,0,6247,0],[6264,0,6248,0],[6265,0,6249,0],[6266,0,6250,0],[6267,0,6251,0],[6268,0,6252,0],[6269,0,6253,0],[6270,0,6254,0],[6271,0,6255,0],[6272,0,6256,0],[6273,0,6257,0],[6274,0,6258,0],[6275,2,6259,0],[6275,17,6259,15,"createUserWithEmailAndPassword"],[6275,47,6259,45,"createUserWithEmailAndPassword"],[6275,48,6259,46,"auth"],[6275,52,6259,50],[6275,54,6259,52,"email"],[6275,59,6259,57],[6275,61,6259,59,"password"],[6275,69,6259,67],[6275,71,6259,69],[6276,4,6260,4],[6276,8,6260,8],[6276,12,6260,8,"_isFirebaseServerApp"],[6276,37,6260,28],[6276,39,6260,29,"auth"],[6276,43,6260,33],[6276,44,6260,34,"app"],[6276,47,6260,37],[6276,48,6260,38],[6276,50,6260,40],[6277,6,6261,8],[6277,13,6261,15,"Promise"],[6277,20,6261,22],[6277,21,6261,23,"reject"],[6277,27,6261,29],[6277,28,6261,30,"_serverAppCurrentUserOperationNotSupportedError"],[6277,75,6261,77],[6277,76,6261,78,"auth"],[6277,80,6261,82],[6277,81,6261,83],[6277,82,6261,84],[6278,4,6262,4],[6279,4,6263,4],[6279,10,6263,10,"authInternal"],[6279,22,6263,22],[6279,25,6263,25,"_castAuth"],[6279,34,6263,34],[6279,35,6263,35,"auth"],[6279,39,6263,39],[6279,40,6263,40],[6280,4,6264,4],[6280,10,6264,10,"request"],[6280,17,6264,17],[6280,20,6264,20],[6281,6,6265,8,"returnSecureToken"],[6281,23,6265,25],[6281,25,6265,27],[6281,29,6265,31],[6282,6,6266,8,"email"],[6282,11,6266,13],[6283,6,6267,8,"password"],[6283,14,6267,16],[6284,6,6268,8,"clientType"],[6284,16,6268,18],[6284,18,6268,20],[6284,35,6268,37],[6284,36,6268,38],[6285,4,6269,4],[6285,5,6269,5],[6286,4,6270,4],[6286,10,6270,10,"signUpResponse"],[6286,24,6270,24],[6286,27,6270,27,"handleRecaptchaFlow"],[6286,46,6270,46],[6286,47,6270,47,"authInternal"],[6286,59,6270,59],[6286,61,6270,61,"request"],[6286,68,6270,68],[6286,70,6270,70],[6286,86,6270,86],[6286,87,6270,87],[6286,131,6270,131,"signUp"],[6286,137,6270,137],[6286,139,6270,139],[6286,164,6270,164],[6286,165,6270,165],[6286,216,6270,216],[6286,217,6270,217],[6287,4,6271,4],[6287,10,6271,10,"response"],[6287,18,6271,18],[6287,21,6271,21],[6287,27,6271,27,"signUpResponse"],[6287,41,6271,41],[6287,42,6271,42,"catch"],[6287,47,6271,47],[6287,48,6271,48,"error"],[6287,53,6271,53],[6287,57,6271,57],[6288,6,6272,8],[6288,10,6272,12,"error"],[6288,15,6272,17],[6288,16,6272,18,"code"],[6288,20,6272,22],[6288,25,6272,27],[6288,33,6272,35],[6288,70,6272,72],[6288,71,6272,73],[6288,128,6272,130],[6288,130,6272,132],[6289,8,6273,12],[6289,13,6273,17,"recachePasswordPolicy"],[6289,34,6273,38],[6289,35,6273,39,"auth"],[6289,39,6273,43],[6289,40,6273,44],[6290,6,6274,8],[6291,6,6275,8],[6291,12,6275,14,"error"],[6291,17,6275,19],[6292,4,6276,4],[6292,5,6276,5],[6292,6,6276,6],[6293,4,6277,4],[6293,10,6277,10,"userCredential"],[6293,24,6277,24],[6293,27,6277,27],[6293,33,6277,33,"UserCredentialImpl"],[6293,51,6277,51],[6293,52,6277,52,"_fromIdTokenResponse"],[6293,72,6277,72],[6293,73,6277,73,"authInternal"],[6293,85,6277,85],[6293,87,6277,87],[6293,95,6277,95],[6293,96,6277,96],[6293,125,6277,125,"response"],[6293,133,6277,133],[6293,134,6277,134],[6294,4,6278,4],[6294,10,6278,10,"authInternal"],[6294,22,6278,22],[6294,23,6278,23,"_updateCurrentUser"],[6294,41,6278,41],[6294,42,6278,42,"userCredential"],[6294,56,6278,56],[6294,57,6278,57,"user"],[6294,61,6278,61],[6294,62,6278,62],[6295,4,6279,4],[6295,11,6279,11,"userCredential"],[6295,25,6279,25],[6296,2,6280,0],[6297,2,6281,0],[6298,0,6282,0],[6299,0,6283,0],[6300,0,6284,0],[6301,0,6285,0],[6302,0,6286,0],[6303,0,6287,0],[6304,0,6288,0],[6305,0,6289,0],[6306,0,6290,0],[6307,0,6291,0],[6308,0,6292,0],[6309,0,6293,0],[6310,0,6294,0],[6311,0,6295,0],[6312,0,6296,0],[6313,0,6297,0],[6314,0,6298,0],[6315,0,6299,0],[6316,0,6300,0],[6317,0,6301,0],[6318,0,6302,0],[6319,0,6303,0],[6320,2,6304,0],[6320,11,6304,9,"signInWithEmailAndPassword"],[6320,37,6304,35,"signInWithEmailAndPassword"],[6320,38,6304,36,"auth"],[6320,42,6304,40],[6320,44,6304,42,"email"],[6320,49,6304,47],[6320,51,6304,49,"password"],[6320,59,6304,57],[6320,61,6304,59],[6321,4,6305,4],[6321,8,6305,8],[6321,12,6305,8,"_isFirebaseServerApp"],[6321,37,6305,28],[6321,39,6305,29,"auth"],[6321,43,6305,33],[6321,44,6305,34,"app"],[6321,47,6305,37],[6321,48,6305,38],[6321,50,6305,40],[6322,6,6306,8],[6322,13,6306,15,"Promise"],[6322,20,6306,22],[6322,21,6306,23,"reject"],[6322,27,6306,29],[6322,28,6306,30,"_serverAppCurrentUserOperationNotSupportedError"],[6322,75,6306,77],[6322,76,6306,78,"auth"],[6322,80,6306,82],[6322,81,6306,83],[6322,82,6306,84],[6323,4,6307,4],[6324,4,6308,4],[6324,11,6308,11,"signInWithCredential"],[6324,31,6308,31],[6324,32,6308,32],[6324,36,6308,32,"getModularInstance"],[6324,60,6308,50],[6324,62,6308,51,"auth"],[6324,66,6308,55],[6324,67,6308,56],[6324,69,6308,58,"EmailAuthProvider"],[6324,86,6308,75],[6324,87,6308,76,"credential"],[6324,97,6308,86],[6324,98,6308,87,"email"],[6324,103,6308,92],[6324,105,6308,94,"password"],[6324,113,6308,102],[6324,114,6308,103],[6324,115,6308,104],[6324,116,6308,105,"catch"],[6324,121,6308,110],[6324,122,6308,111],[6324,128,6308,118,"error"],[6324,133,6308,123],[6324,137,6308,128],[6325,6,6309,8],[6325,10,6309,12,"error"],[6325,15,6309,17],[6325,16,6309,18,"code"],[6325,20,6309,22],[6325,25,6309,27],[6325,33,6309,35],[6325,70,6309,72],[6325,71,6309,73],[6325,128,6309,130],[6325,130,6309,132],[6326,8,6310,12],[6326,13,6310,17,"recachePasswordPolicy"],[6326,34,6310,38],[6326,35,6310,39,"auth"],[6326,39,6310,43],[6326,40,6310,44],[6327,6,6311,8],[6328,6,6312,8],[6328,12,6312,14,"error"],[6328,17,6312,19],[6329,4,6313,4],[6329,5,6313,5],[6329,6,6313,6],[6330,2,6314,0],[6332,2,6316,0],[6333,0,6317,0],[6334,0,6318,0],[6335,0,6319,0],[6336,0,6320,0],[6337,0,6321,0],[6338,0,6322,0],[6339,0,6323,0],[6340,0,6324,0],[6341,0,6325,0],[6342,0,6326,0],[6343,0,6327,0],[6344,0,6328,0],[6345,0,6329,0],[6346,0,6330,0],[6347,0,6331,0],[6348,2,6332,0],[6349,0,6333,0],[6350,0,6334,0],[6351,0,6335,0],[6352,0,6336,0],[6353,0,6337,0],[6354,0,6338,0],[6355,0,6339,0],[6356,0,6340,0],[6357,0,6341,0],[6358,0,6342,0],[6359,0,6343,0],[6360,0,6344,0],[6361,0,6345,0],[6362,0,6346,0],[6363,0,6347,0],[6364,0,6348,0],[6365,0,6349,0],[6366,0,6350,0],[6367,0,6351,0],[6368,0,6352,0],[6369,0,6353,0],[6370,0,6354,0],[6371,0,6355,0],[6372,0,6356,0],[6373,0,6357,0],[6374,0,6358,0],[6375,0,6359,0],[6376,0,6360,0],[6377,0,6361,0],[6378,0,6362,0],[6379,0,6363,0],[6380,0,6364,0],[6381,0,6365,0],[6382,0,6366,0],[6383,0,6367,0],[6384,0,6368,0],[6385,0,6369,0],[6386,2,6370,0],[6386,17,6370,15,"sendSignInLinkToEmail"],[6386,38,6370,36,"sendSignInLinkToEmail"],[6386,39,6370,37,"auth"],[6386,43,6370,41],[6386,45,6370,43,"email"],[6386,50,6370,48],[6386,52,6370,50,"actionCodeSettings"],[6386,70,6370,68],[6386,72,6370,70],[6387,4,6371,4],[6387,10,6371,10,"authInternal"],[6387,22,6371,22],[6387,25,6371,25,"_castAuth"],[6387,34,6371,34],[6387,35,6371,35,"auth"],[6387,39,6371,39],[6387,40,6371,40],[6388,4,6372,4],[6388,10,6372,10,"request"],[6388,17,6372,17],[6388,20,6372,20],[6389,6,6373,8,"requestType"],[6389,17,6373,19],[6389,19,6373,21],[6389,33,6373,35],[6389,34,6373,36],[6390,6,6374,8,"email"],[6390,11,6374,13],[6391,6,6375,8,"clientType"],[6391,16,6375,18],[6391,18,6375,20],[6391,35,6375,37],[6391,36,6375,38],[6392,4,6376,4],[6392,5,6376,5],[6393,4,6377,4],[6393,13,6377,13,"setActionCodeSettings"],[6393,34,6377,34,"setActionCodeSettings"],[6393,35,6377,35,"request"],[6393,42,6377,42],[6393,44,6377,44,"actionCodeSettings"],[6393,62,6377,62],[6393,64,6377,64],[6394,6,6378,8,"_assert"],[6394,13,6378,15],[6394,14,6378,16,"actionCodeSettings"],[6394,32,6378,34],[6394,33,6378,35,"handleCodeInApp"],[6394,48,6378,50],[6394,50,6378,52,"authInternal"],[6394,62,6378,64],[6394,64,6378,66],[6394,80,6378,82],[6394,81,6378,83],[6394,115,6378,117],[6394,116,6378,118],[6395,6,6379,8],[6395,10,6379,12,"actionCodeSettings"],[6395,28,6379,30],[6395,30,6379,32],[6396,8,6380,12,"_setActionCodeSettingsOnRequest"],[6396,39,6380,43],[6396,40,6380,44,"authInternal"],[6396,52,6380,56],[6396,54,6380,58,"request"],[6396,61,6380,65],[6396,63,6380,67,"actionCodeSettings"],[6396,81,6380,85],[6396,82,6380,86],[6397,6,6381,8],[6398,4,6382,4],[6399,4,6383,4,"setActionCodeSettings"],[6399,25,6383,25],[6399,26,6383,26,"request"],[6399,33,6383,33],[6399,35,6383,35,"actionCodeSettings"],[6399,53,6383,53],[6399,54,6383,54],[6400,4,6384,4],[6400,10,6384,10,"handleRecaptchaFlow"],[6400,29,6384,29],[6400,30,6384,30,"authInternal"],[6400,42,6384,42],[6400,44,6384,44,"request"],[6400,51,6384,51],[6400,53,6384,53],[6400,65,6384,65],[6400,66,6384,66],[6400,106,6384,106,"sendSignInLinkToEmail$1"],[6400,129,6384,129],[6400,131,6384,131],[6400,156,6384,156],[6400,157,6384,157],[6400,208,6384,208],[6400,209,6384,209],[6401,2,6385,0],[6402,2,6386,0],[6403,0,6387,0],[6404,0,6388,0],[6405,0,6389,0],[6406,0,6390,0],[6407,0,6391,0],[6408,0,6392,0],[6409,0,6393,0],[6410,2,6394,0],[6410,11,6394,9,"isSignInWithEmailLink"],[6410,32,6394,30,"isSignInWithEmailLink"],[6410,33,6394,31,"auth"],[6410,37,6394,35],[6410,39,6394,37,"emailLink"],[6410,48,6394,46],[6410,50,6394,48],[6411,4,6395,4],[6411,10,6395,10,"actionCodeUrl"],[6411,23,6395,23],[6411,26,6395,26,"ActionCodeURL"],[6411,39,6395,39],[6411,40,6395,40,"parseLink"],[6411,49,6395,49],[6411,50,6395,50,"emailLink"],[6411,59,6395,59],[6411,60,6395,60],[6412,4,6396,4],[6412,11,6396,11,"actionCodeUrl"],[6412,24,6396,24],[6412,26,6396,26,"operation"],[6412,35,6396,35],[6412,40,6396,40],[6412,54,6396,54],[6412,55,6396,55],[6413,2,6397,0],[6414,2,6398,0],[6415,0,6399,0],[6416,0,6400,0],[6417,0,6401,0],[6418,0,6402,0],[6419,0,6403,0],[6420,0,6404,0],[6421,0,6405,0],[6422,0,6406,0],[6423,0,6407,0],[6424,0,6408,0],[6425,0,6409,0],[6426,0,6410,0],[6427,0,6411,0],[6428,0,6412,0],[6429,0,6413,0],[6430,0,6414,0],[6431,0,6415,0],[6432,0,6416,0],[6433,0,6417,0],[6434,0,6418,0],[6435,0,6419,0],[6436,0,6420,0],[6437,0,6421,0],[6438,0,6422,0],[6439,0,6423,0],[6440,0,6424,0],[6441,0,6425,0],[6442,0,6426,0],[6443,0,6427,0],[6444,0,6428,0],[6445,0,6429,0],[6446,0,6430,0],[6447,0,6431,0],[6448,0,6432,0],[6449,0,6433,0],[6450,0,6434,0],[6451,0,6435,0],[6452,0,6436,0],[6453,0,6437,0],[6454,0,6438,0],[6455,2,6439,0],[6455,17,6439,15,"signInWithEmailLink"],[6455,36,6439,34,"signInWithEmailLink"],[6455,37,6439,35,"auth"],[6455,41,6439,39],[6455,43,6439,41,"email"],[6455,48,6439,46],[6455,50,6439,48,"emailLink"],[6455,59,6439,57],[6455,61,6439,59],[6456,4,6440,4],[6456,8,6440,8],[6456,12,6440,8,"_isFirebaseServerApp"],[6456,37,6440,28],[6456,39,6440,29,"auth"],[6456,43,6440,33],[6456,44,6440,34,"app"],[6456,47,6440,37],[6456,48,6440,38],[6456,50,6440,40],[6457,6,6441,8],[6457,13,6441,15,"Promise"],[6457,20,6441,22],[6457,21,6441,23,"reject"],[6457,27,6441,29],[6457,28,6441,30,"_serverAppCurrentUserOperationNotSupportedError"],[6457,75,6441,77],[6457,76,6441,78,"auth"],[6457,80,6441,82],[6457,81,6441,83],[6457,82,6441,84],[6458,4,6442,4],[6459,4,6443,4],[6459,10,6443,10,"authModular"],[6459,21,6443,21],[6459,24,6443,24],[6459,28,6443,24,"getModularInstance"],[6459,52,6443,42],[6459,54,6443,43,"auth"],[6459,58,6443,47],[6459,59,6443,48],[6460,4,6444,4],[6460,10,6444,10,"credential"],[6460,20,6444,20],[6460,23,6444,23,"EmailAuthProvider"],[6460,40,6444,40],[6460,41,6444,41,"credentialWithLink"],[6460,59,6444,59],[6460,60,6444,60,"email"],[6460,65,6444,65],[6460,67,6444,67,"emailLink"],[6460,76,6444,76],[6460,80,6444,80,"_getCurrentUrl"],[6460,94,6444,94],[6460,95,6444,95],[6460,96,6444,96],[6460,97,6444,97],[6461,4,6445,4],[6462,4,6446,4],[6463,4,6447,4,"_assert"],[6463,11,6447,11],[6463,12,6447,12,"credential"],[6463,22,6447,22],[6463,23,6447,23,"_tenantId"],[6463,32,6447,32],[6463,38,6447,38,"authModular"],[6463,49,6447,49],[6463,50,6447,50,"tenantId"],[6463,58,6447,58],[6463,62,6447,62],[6463,66,6447,66],[6463,67,6447,67],[6463,69,6447,69,"authModular"],[6463,80,6447,80],[6463,82,6447,82],[6463,102,6447,102],[6463,103,6447,103],[6463,141,6447,141],[6463,142,6447,142],[6464,4,6448,4],[6464,11,6448,11,"signInWithCredential"],[6464,31,6448,31],[6464,32,6448,32,"authModular"],[6464,43,6448,43],[6464,45,6448,45,"credential"],[6464,55,6448,55],[6464,56,6448,56],[6465,2,6449,0],[6467,2,6451,0],[6468,0,6452,0],[6469,0,6453,0],[6470,0,6454,0],[6471,0,6455,0],[6472,0,6456,0],[6473,0,6457,0],[6474,0,6458,0],[6475,0,6459,0],[6476,0,6460,0],[6477,0,6461,0],[6478,0,6462,0],[6479,0,6463,0],[6480,0,6464,0],[6481,0,6465,0],[6482,0,6466,0],[6483,2,6467,0],[6483,17,6467,15,"createAuthUri"],[6483,30,6467,28,"createAuthUri"],[6483,31,6467,29,"auth"],[6483,35,6467,33],[6483,37,6467,35,"request"],[6483,44,6467,42],[6483,46,6467,44],[6484,4,6468,4],[6484,11,6468,11,"_performApiRequest"],[6484,29,6468,29],[6484,30,6468,30,"auth"],[6484,34,6468,34],[6484,36,6468,36],[6484,42,6468,42],[6484,43,6468,43],[6484,66,6468,66],[6484,94,6468,94],[6484,95,6468,95],[6484,127,6468,127,"_addTidIfNecessary"],[6484,145,6468,145],[6484,146,6468,146,"auth"],[6484,150,6468,150],[6484,152,6468,152,"request"],[6484,159,6468,159],[6484,160,6468,160],[6484,161,6468,161],[6485,2,6469,0],[6487,2,6471,0],[6488,0,6472,0],[6489,0,6473,0],[6490,0,6474,0],[6491,0,6475,0],[6492,0,6476,0],[6493,0,6477,0],[6494,0,6478,0],[6495,0,6479,0],[6496,0,6480,0],[6497,0,6481,0],[6498,0,6482,0],[6499,0,6483,0],[6500,0,6484,0],[6501,0,6485,0],[6502,0,6486,0],[6503,2,6487,0],[6504,0,6488,0],[6505,0,6489,0],[6506,0,6490,0],[6507,0,6491,0],[6508,0,6492,0],[6509,0,6493,0],[6510,0,6494,0],[6511,0,6495,0],[6512,0,6496,0],[6513,0,6497,0],[6514,0,6498,0],[6515,0,6499,0],[6516,0,6500,0],[6517,0,6501,0],[6518,0,6502,0],[6519,0,6503,0],[6520,0,6504,0],[6521,0,6505,0],[6522,0,6506,0],[6523,2,6507,0],[6523,17,6507,15,"fetchSignInMethodsForEmail"],[6523,43,6507,41,"fetchSignInMethodsForEmail"],[6523,44,6507,42,"auth"],[6523,48,6507,46],[6523,50,6507,48,"email"],[6523,55,6507,53],[6523,57,6507,55],[6524,4,6508,4],[6525,4,6509,4],[6526,4,6510,4],[6527,4,6511,4],[6527,10,6511,10,"continueUri"],[6527,21,6511,21],[6527,24,6511,24,"_isHttpOrHttps"],[6527,38,6511,38],[6527,39,6511,39],[6527,40,6511,40],[6527,43,6511,43,"_getCurrentUrl"],[6527,57,6511,57],[6527,58,6511,58],[6527,59,6511,59],[6527,62,6511,62],[6527,80,6511,80],[6528,4,6512,4],[6528,10,6512,10,"request"],[6528,17,6512,17],[6528,20,6512,20],[6529,6,6513,8,"identifier"],[6529,16,6513,18],[6529,18,6513,20,"email"],[6529,23,6513,25],[6530,6,6514,8,"continueUri"],[6531,4,6515,4],[6531,5,6515,5],[6532,4,6516,4],[6532,10,6516,10],[6533,6,6516,12,"signinMethods"],[6534,4,6516,26],[6534,5,6516,27],[6534,8,6516,30],[6534,14,6516,36,"createAuthUri"],[6534,27,6516,49],[6534,28,6516,50],[6534,32,6516,50,"getModularInstance"],[6534,56,6516,68],[6534,58,6516,69,"auth"],[6534,62,6516,73],[6534,63,6516,74],[6534,65,6516,76,"request"],[6534,72,6516,83],[6534,73,6516,84],[6535,4,6517,4],[6535,11,6517,11,"signinMethods"],[6535,24,6517,24],[6535,28,6517,28],[6535,30,6517,30],[6536,2,6518,0],[6537,2,6519,0],[6538,0,6520,0],[6539,0,6521,0],[6540,0,6522,0],[6541,0,6523,0],[6542,0,6524,0],[6543,0,6525,0],[6544,0,6526,0],[6545,0,6527,0],[6546,0,6528,0],[6547,0,6529,0],[6548,0,6530,0],[6549,0,6531,0],[6550,0,6532,0],[6551,0,6533,0],[6552,0,6534,0],[6553,0,6535,0],[6554,0,6536,0],[6555,0,6537,0],[6556,0,6538,0],[6557,0,6539,0],[6558,0,6540,0],[6559,0,6541,0],[6560,0,6542,0],[6561,0,6543,0],[6562,0,6544,0],[6563,0,6545,0],[6564,0,6546,0],[6565,0,6547,0],[6566,0,6548,0],[6567,2,6549,0],[6567,17,6549,15,"sendEmailVerification"],[6567,38,6549,36,"sendEmailVerification"],[6567,39,6549,37,"user"],[6567,43,6549,41],[6567,45,6549,43,"actionCodeSettings"],[6567,63,6549,61],[6567,65,6549,63],[6568,4,6550,4],[6568,10,6550,10,"userInternal"],[6568,22,6550,22],[6568,25,6550,25],[6568,29,6550,25,"getModularInstance"],[6568,53,6550,43],[6568,55,6550,44,"user"],[6568,59,6550,48],[6568,60,6550,49],[6569,4,6551,4],[6569,10,6551,10,"idToken"],[6569,17,6551,17],[6569,20,6551,20],[6569,26,6551,26,"user"],[6569,30,6551,30],[6569,31,6551,31,"getIdToken"],[6569,41,6551,41],[6569,42,6551,42],[6569,43,6551,43],[6570,4,6552,4],[6570,10,6552,10,"request"],[6570,17,6552,17],[6570,20,6552,20],[6571,6,6553,8,"requestType"],[6571,17,6553,19],[6571,19,6553,21],[6571,33,6553,35],[6571,34,6553,36],[6572,6,6554,8,"idToken"],[6573,4,6555,4],[6573,5,6555,5],[6574,4,6556,4],[6574,8,6556,8,"actionCodeSettings"],[6574,26,6556,26],[6574,28,6556,28],[6575,6,6557,8,"_setActionCodeSettingsOnRequest"],[6575,37,6557,39],[6575,38,6557,40,"userInternal"],[6575,50,6557,52],[6575,51,6557,53,"auth"],[6575,55,6557,57],[6575,57,6557,59,"request"],[6575,64,6557,66],[6575,66,6557,68,"actionCodeSettings"],[6575,84,6557,86],[6575,85,6557,87],[6576,4,6558,4],[6577,4,6559,4],[6577,10,6559,10],[6578,6,6559,12,"email"],[6579,4,6559,18],[6579,5,6559,19],[6579,8,6559,22],[6579,14,6559,28,"sendEmailVerification$1"],[6579,37,6559,51],[6579,38,6559,52,"userInternal"],[6579,50,6559,64],[6579,51,6559,65,"auth"],[6579,55,6559,69],[6579,57,6559,71,"request"],[6579,64,6559,78],[6579,65,6559,79],[6580,4,6560,4],[6580,8,6560,8,"email"],[6580,13,6560,13],[6580,18,6560,18,"user"],[6580,22,6560,22],[6580,23,6560,23,"email"],[6580,28,6560,28],[6580,30,6560,30],[6581,6,6561,8],[6581,12,6561,14,"user"],[6581,16,6561,18],[6581,17,6561,19,"reload"],[6581,23,6561,25],[6581,24,6561,26],[6581,25,6561,27],[6582,4,6562,4],[6583,2,6563,0],[6584,2,6564,0],[6585,0,6565,0],[6586,0,6566,0],[6587,0,6567,0],[6588,0,6568,0],[6589,0,6569,0],[6590,0,6570,0],[6591,0,6571,0],[6592,0,6572,0],[6593,0,6573,0],[6594,0,6574,0],[6595,0,6575,0],[6596,0,6576,0],[6597,0,6577,0],[6598,0,6578,0],[6599,0,6579,0],[6600,0,6580,0],[6601,0,6581,0],[6602,0,6582,0],[6603,0,6583,0],[6604,0,6584,0],[6605,0,6585,0],[6606,0,6586,0],[6607,0,6587,0],[6608,0,6588,0],[6609,0,6589,0],[6610,0,6590,0],[6611,0,6591,0],[6612,0,6592,0],[6613,0,6593,0],[6614,0,6594,0],[6615,0,6595,0],[6616,0,6596,0],[6617,0,6597,0],[6618,2,6598,0],[6618,17,6598,15,"verifyBeforeUpdateEmail"],[6618,40,6598,38,"verifyBeforeUpdateEmail"],[6618,41,6598,39,"user"],[6618,45,6598,43],[6618,47,6598,45,"newEmail"],[6618,55,6598,53],[6618,57,6598,55,"actionCodeSettings"],[6618,75,6598,73],[6618,77,6598,75],[6619,4,6599,4],[6619,10,6599,10,"userInternal"],[6619,22,6599,22],[6619,25,6599,25],[6619,29,6599,25,"getModularInstance"],[6619,53,6599,43],[6619,55,6599,44,"user"],[6619,59,6599,48],[6619,60,6599,49],[6620,4,6600,4],[6620,10,6600,10,"idToken"],[6620,17,6600,17],[6620,20,6600,20],[6620,26,6600,26,"user"],[6620,30,6600,30],[6620,31,6600,31,"getIdToken"],[6620,41,6600,41],[6620,42,6600,42],[6620,43,6600,43],[6621,4,6601,4],[6621,10,6601,10,"request"],[6621,17,6601,17],[6621,20,6601,20],[6622,6,6602,8,"requestType"],[6622,17,6602,19],[6622,19,6602,21],[6622,44,6602,46],[6622,45,6602,47],[6623,6,6603,8,"idToken"],[6623,13,6603,15],[6624,6,6604,8,"newEmail"],[6625,4,6605,4],[6625,5,6605,5],[6626,4,6606,4],[6626,8,6606,8,"actionCodeSettings"],[6626,26,6606,26],[6626,28,6606,28],[6627,6,6607,8,"_setActionCodeSettingsOnRequest"],[6627,37,6607,39],[6627,38,6607,40,"userInternal"],[6627,50,6607,52],[6627,51,6607,53,"auth"],[6627,55,6607,57],[6627,57,6607,59,"request"],[6627,64,6607,66],[6627,66,6607,68,"actionCodeSettings"],[6627,84,6607,86],[6627,85,6607,87],[6628,4,6608,4],[6629,4,6609,4],[6629,10,6609,10],[6630,6,6609,12,"email"],[6631,4,6609,18],[6631,5,6609,19],[6631,8,6609,22],[6631,14,6609,28,"verifyAndChangeEmail"],[6631,34,6609,48],[6631,35,6609,49,"userInternal"],[6631,47,6609,61],[6631,48,6609,62,"auth"],[6631,52,6609,66],[6631,54,6609,68,"request"],[6631,61,6609,75],[6631,62,6609,76],[6632,4,6610,4],[6632,8,6610,8,"email"],[6632,13,6610,13],[6632,18,6610,18,"user"],[6632,22,6610,22],[6632,23,6610,23,"email"],[6632,28,6610,28],[6632,30,6610,30],[6633,6,6611,8],[6634,6,6612,8],[6635,6,6613,8],[6635,12,6613,14,"user"],[6635,16,6613,18],[6635,17,6613,19,"reload"],[6635,23,6613,25],[6635,24,6613,26],[6635,25,6613,27],[6636,4,6614,4],[6637,2,6615,0],[6639,2,6617,0],[6640,0,6618,0],[6641,0,6619,0],[6642,0,6620,0],[6643,0,6621,0],[6644,0,6622,0],[6645,0,6623,0],[6646,0,6624,0],[6647,0,6625,0],[6648,0,6626,0],[6649,0,6627,0],[6650,0,6628,0],[6651,0,6629,0],[6652,0,6630,0],[6653,0,6631,0],[6654,0,6632,0],[6655,2,6633,0],[6655,17,6633,15,"updateProfile$1"],[6655,32,6633,30,"updateProfile$1"],[6655,33,6633,31,"auth"],[6655,37,6633,35],[6655,39,6633,37,"request"],[6655,46,6633,44],[6655,48,6633,46],[6656,4,6634,4],[6656,11,6634,11,"_performApiRequest"],[6656,29,6634,29],[6656,30,6634,30,"auth"],[6656,34,6634,34],[6656,36,6634,36],[6656,42,6634,42],[6656,43,6634,43],[6656,66,6634,66],[6656,87,6634,87],[6656,88,6634,88],[6656,121,6634,121,"request"],[6656,128,6634,128],[6656,129,6634,129],[6657,2,6635,0],[6659,2,6637,0],[6660,0,6638,0],[6661,0,6639,0],[6662,0,6640,0],[6663,0,6641,0],[6664,0,6642,0],[6665,0,6643,0],[6666,0,6644,0],[6667,0,6645,0],[6668,0,6646,0],[6669,0,6647,0],[6670,0,6648,0],[6671,0,6649,0],[6672,0,6650,0],[6673,0,6651,0],[6674,0,6652,0],[6675,2,6653,0],[6676,0,6654,0],[6677,0,6655,0],[6678,0,6656,0],[6679,0,6657,0],[6680,0,6658,0],[6681,0,6659,0],[6682,0,6660,0],[6683,2,6661,0],[6683,17,6661,15,"updateProfile"],[6683,30,6661,28,"updateProfile"],[6683,31,6661,29,"user"],[6683,35,6661,33],[6683,37,6661,35],[6684,4,6661,37,"displayName"],[6684,15,6661,48],[6685,4,6661,50,"photoURL"],[6685,12,6661,58],[6685,14,6661,60,"photoUrl"],[6686,2,6661,69],[6686,3,6661,70],[6686,5,6661,72],[6687,4,6662,4],[6687,8,6662,8,"displayName"],[6687,19,6662,19],[6687,24,6662,24,"undefined"],[6687,33,6662,33],[6687,37,6662,37,"photoUrl"],[6687,45,6662,45],[6687,50,6662,50,"undefined"],[6687,59,6662,59],[6687,61,6662,61],[6688,6,6663,8],[6689,4,6664,4],[6690,4,6665,4],[6690,10,6665,10,"userInternal"],[6690,22,6665,22],[6690,25,6665,25],[6690,29,6665,25,"getModularInstance"],[6690,53,6665,43],[6690,55,6665,44,"user"],[6690,59,6665,48],[6690,60,6665,49],[6691,4,6666,4],[6691,10,6666,10,"idToken"],[6691,17,6666,17],[6691,20,6666,20],[6691,26,6666,26,"userInternal"],[6691,38,6666,38],[6691,39,6666,39,"getIdToken"],[6691,49,6666,49],[6691,50,6666,50],[6691,51,6666,51],[6692,4,6667,4],[6692,10,6667,10,"profileRequest"],[6692,24,6667,24],[6692,27,6667,27],[6693,6,6668,8,"idToken"],[6693,13,6668,15],[6694,6,6669,8,"displayName"],[6694,17,6669,19],[6695,6,6670,8,"photoUrl"],[6695,14,6670,16],[6696,6,6671,8,"returnSecureToken"],[6696,23,6671,25],[6696,25,6671,27],[6697,4,6672,4],[6697,5,6672,5],[6698,4,6673,4],[6698,10,6673,10,"response"],[6698,18,6673,18],[6698,21,6673,21],[6698,27,6673,27,"_logoutIfInvalidated"],[6698,47,6673,47],[6698,48,6673,48,"userInternal"],[6698,60,6673,60],[6698,62,6673,62,"updateProfile$1"],[6698,77,6673,77],[6698,78,6673,78,"userInternal"],[6698,90,6673,90],[6698,91,6673,91,"auth"],[6698,95,6673,95],[6698,97,6673,97,"profileRequest"],[6698,111,6673,111],[6698,112,6673,112],[6698,113,6673,113],[6699,4,6674,4,"userInternal"],[6699,16,6674,16],[6699,17,6674,17,"displayName"],[6699,28,6674,28],[6699,31,6674,31,"response"],[6699,39,6674,39],[6699,40,6674,40,"displayName"],[6699,51,6674,51],[6699,55,6674,55],[6699,59,6674,59],[6700,4,6675,4,"userInternal"],[6700,16,6675,16],[6700,17,6675,17,"photoURL"],[6700,25,6675,25],[6700,28,6675,28,"response"],[6700,36,6675,36],[6700,37,6675,37,"photoUrl"],[6700,45,6675,45],[6700,49,6675,49],[6700,53,6675,53],[6701,4,6676,4],[6702,4,6677,4],[6702,10,6677,10,"passwordProvider"],[6702,26,6677,26],[6702,29,6677,29,"userInternal"],[6702,41,6677,41],[6702,42,6677,42,"providerData"],[6702,54,6677,54],[6702,55,6677,55,"find"],[6702,59,6677,59],[6702,60,6677,60],[6702,61,6677,61],[6703,6,6677,63,"providerId"],[6704,4,6677,74],[6704,5,6677,75],[6704,10,6677,80,"providerId"],[6704,20,6677,90],[6704,25,6677,95],[6704,35,6677,105],[6704,36,6677,106],[6704,61,6677,131],[6704,62,6677,132],[6705,4,6678,4],[6705,8,6678,8,"passwordProvider"],[6705,24,6678,24],[6705,26,6678,26],[6706,6,6679,8,"passwordProvider"],[6706,22,6679,24],[6706,23,6679,25,"displayName"],[6706,34,6679,36],[6706,37,6679,39,"userInternal"],[6706,49,6679,51],[6706,50,6679,52,"displayName"],[6706,61,6679,63],[6707,6,6680,8,"passwordProvider"],[6707,22,6680,24],[6707,23,6680,25,"photoURL"],[6707,31,6680,33],[6707,34,6680,36,"userInternal"],[6707,46,6680,48],[6707,47,6680,49,"photoURL"],[6707,55,6680,57],[6708,4,6681,4],[6709,4,6682,4],[6709,10,6682,10,"userInternal"],[6709,22,6682,22],[6709,23,6682,23,"_updateTokensIfNecessary"],[6709,47,6682,47],[6709,48,6682,48,"response"],[6709,56,6682,56],[6709,57,6682,57],[6710,2,6683,0],[6711,2,6684,0],[6712,0,6685,0],[6713,0,6686,0],[6714,0,6687,0],[6715,0,6688,0],[6716,0,6689,0],[6717,0,6690,0],[6718,0,6691,0],[6719,0,6692,0],[6720,0,6693,0],[6721,0,6694,0],[6722,0,6695,0],[6723,0,6696,0],[6724,0,6697,0],[6725,0,6698,0],[6726,0,6699,0],[6727,0,6700,0],[6728,0,6701,0],[6729,0,6702,0],[6730,0,6703,0],[6731,0,6704,0],[6732,0,6705,0],[6733,0,6706,0],[6734,0,6707,0],[6735,2,6708,0],[6735,11,6708,9,"updateEmail"],[6735,22,6708,20,"updateEmail"],[6735,23,6708,21,"user"],[6735,27,6708,25],[6735,29,6708,27,"newEmail"],[6735,37,6708,35],[6735,39,6708,37],[6736,4,6709,4],[6736,10,6709,10,"userInternal"],[6736,22,6709,22],[6736,25,6709,25],[6736,29,6709,25,"getModularInstance"],[6736,53,6709,43],[6736,55,6709,44,"user"],[6736,59,6709,48],[6736,60,6709,49],[6737,4,6710,4],[6737,8,6710,8],[6737,12,6710,8,"_isFirebaseServerApp"],[6737,37,6710,28],[6737,39,6710,29,"userInternal"],[6737,51,6710,41],[6737,52,6710,42,"auth"],[6737,56,6710,46],[6737,57,6710,47,"app"],[6737,60,6710,50],[6737,61,6710,51],[6737,63,6710,53],[6738,6,6711,8],[6738,13,6711,15,"Promise"],[6738,20,6711,22],[6738,21,6711,23,"reject"],[6738,27,6711,29],[6738,28,6711,30,"_serverAppCurrentUserOperationNotSupportedError"],[6738,75,6711,77],[6738,76,6711,78,"userInternal"],[6738,88,6711,90],[6738,89,6711,91,"auth"],[6738,93,6711,95],[6738,94,6711,96],[6738,95,6711,97],[6739,4,6712,4],[6740,4,6713,4],[6740,11,6713,11,"updateEmailOrPassword"],[6740,32,6713,32],[6740,33,6713,33,"userInternal"],[6740,45,6713,45],[6740,47,6713,47,"newEmail"],[6740,55,6713,55],[6740,57,6713,57],[6740,61,6713,61],[6740,62,6713,62],[6741,2,6714,0],[6742,2,6715,0],[6743,0,6716,0],[6744,0,6717,0],[6745,0,6718,0],[6746,0,6719,0],[6747,0,6720,0],[6748,0,6721,0],[6749,0,6722,0],[6750,0,6723,0],[6751,0,6724,0],[6752,0,6725,0],[6753,0,6726,0],[6754,0,6727,0],[6755,2,6728,0],[6755,11,6728,9,"updatePassword"],[6755,25,6728,23,"updatePassword"],[6755,26,6728,24,"user"],[6755,30,6728,28],[6755,32,6728,30,"newPassword"],[6755,43,6728,41],[6755,45,6728,43],[6756,4,6729,4],[6756,11,6729,11,"updateEmailOrPassword"],[6756,32,6729,32],[6756,33,6729,33],[6756,37,6729,33,"getModularInstance"],[6756,61,6729,51],[6756,63,6729,52,"user"],[6756,67,6729,56],[6756,68,6729,57],[6756,70,6729,59],[6756,74,6729,63],[6756,76,6729,65,"newPassword"],[6756,87,6729,76],[6756,88,6729,77],[6757,2,6730,0],[6758,2,6731,0],[6758,17,6731,15,"updateEmailOrPassword"],[6758,38,6731,36,"updateEmailOrPassword"],[6758,39,6731,37,"user"],[6758,43,6731,41],[6758,45,6731,43,"email"],[6758,50,6731,48],[6758,52,6731,50,"password"],[6758,60,6731,58],[6758,62,6731,60],[6759,4,6732,4],[6759,10,6732,10],[6760,6,6732,12,"auth"],[6761,4,6732,17],[6761,5,6732,18],[6761,8,6732,21,"user"],[6761,12,6732,25],[6762,4,6733,4],[6762,10,6733,10,"idToken"],[6762,17,6733,17],[6762,20,6733,20],[6762,26,6733,26,"user"],[6762,30,6733,30],[6762,31,6733,31,"getIdToken"],[6762,41,6733,41],[6762,42,6733,42],[6762,43,6733,43],[6763,4,6734,4],[6763,10,6734,10,"request"],[6763,17,6734,17],[6763,20,6734,20],[6764,6,6735,8,"idToken"],[6764,13,6735,15],[6765,6,6736,8,"returnSecureToken"],[6765,23,6736,25],[6765,25,6736,27],[6766,4,6737,4],[6766,5,6737,5],[6767,4,6738,4],[6767,8,6738,8,"email"],[6767,13,6738,13],[6767,15,6738,15],[6768,6,6739,8,"request"],[6768,13,6739,15],[6768,14,6739,16,"email"],[6768,19,6739,21],[6768,22,6739,24,"email"],[6768,27,6739,29],[6769,4,6740,4],[6770,4,6741,4],[6770,8,6741,8,"password"],[6770,16,6741,16],[6770,18,6741,18],[6771,6,6742,8,"request"],[6771,13,6742,15],[6771,14,6742,16,"password"],[6771,22,6742,24],[6771,25,6742,27,"password"],[6771,33,6742,35],[6772,4,6743,4],[6773,4,6744,4],[6773,10,6744,10,"response"],[6773,18,6744,18],[6773,21,6744,21],[6773,27,6744,27,"_logoutIfInvalidated"],[6773,47,6744,47],[6773,48,6744,48,"user"],[6773,52,6744,52],[6773,54,6744,54,"updateEmailPassword"],[6773,73,6744,73],[6773,74,6744,74,"auth"],[6773,78,6744,78],[6773,80,6744,80,"request"],[6773,87,6744,87],[6773,88,6744,88],[6773,89,6744,89],[6774,4,6745,4],[6774,10,6745,10,"user"],[6774,14,6745,14],[6774,15,6745,15,"_updateTokensIfNecessary"],[6774,39,6745,39],[6774,40,6745,40,"response"],[6774,48,6745,48],[6774,50,6745,50],[6774,62,6745,63],[6774,66,6745,67],[6774,67,6745,68],[6775,2,6746,0],[6777,2,6748,0],[6778,0,6749,0],[6779,0,6750,0],[6780,0,6751,0],[6781,0,6752,0],[6782,0,6753,0],[6783,0,6754,0],[6784,0,6755,0],[6785,0,6756,0],[6786,0,6757,0],[6787,0,6758,0],[6788,0,6759,0],[6789,0,6760,0],[6790,0,6761,0],[6791,0,6762,0],[6792,0,6763,0],[6793,2,6764,0],[6794,0,6765,0],[6795,0,6766,0],[6796,0,6767,0],[6797,2,6768,0],[6797,11,6768,9,"_fromIdTokenResponse"],[6797,31,6768,29,"_fromIdTokenResponse"],[6797,32,6768,30,"idTokenResponse"],[6797,47,6768,45],[6797,49,6768,47],[6798,4,6769,4],[6798,8,6769,8],[6798,9,6769,9,"idTokenResponse"],[6798,24,6769,24],[6798,26,6769,26],[6799,6,6770,8],[6799,13,6770,15],[6799,17,6770,19],[6800,4,6771,4],[6801,4,6772,4],[6801,10,6772,10],[6802,6,6772,12,"providerId"],[6803,4,6772,23],[6803,5,6772,24],[6803,8,6772,27,"idTokenResponse"],[6803,23,6772,42],[6804,4,6773,4],[6804,10,6773,10,"profile"],[6804,17,6773,17],[6804,20,6773,20,"idTokenResponse"],[6804,35,6773,35],[6804,36,6773,36,"rawUserInfo"],[6804,47,6773,47],[6804,50,6774,10,"JSON"],[6804,54,6774,14],[6804,55,6774,15,"parse"],[6804,60,6774,20],[6804,61,6774,21,"idTokenResponse"],[6804,76,6774,36],[6804,77,6774,37,"rawUserInfo"],[6804,88,6774,48],[6804,89,6774,49],[6804,92,6775,10],[6804,93,6775,11],[6804,94,6775,12],[6805,4,6776,4],[6805,10,6776,10,"isNewUser"],[6805,19,6776,19],[6805,22,6776,22,"idTokenResponse"],[6805,37,6776,37],[6805,38,6776,38,"isNewUser"],[6805,47,6776,47],[6805,51,6777,8,"idTokenResponse"],[6805,66,6777,23],[6805,67,6777,24,"kind"],[6805,71,6777,28],[6805,76,6777,33],[6805,115,6777,72],[6805,116,6777,73],[6806,4,6778,4],[6806,8,6778,8],[6806,9,6778,9,"providerId"],[6806,19,6778,19],[6806,23,6778,23,"idTokenResponse"],[6806,38,6778,38],[6806,40,6778,40,"idToken"],[6806,47,6778,47],[6806,49,6778,49],[6807,6,6779,8],[6807,12,6779,14,"signInProvider"],[6807,26,6779,28],[6807,29,6779,31,"_parseToken"],[6807,40,6779,42],[6807,41,6779,43,"idTokenResponse"],[6807,56,6779,58],[6807,57,6779,59,"idToken"],[6807,64,6779,66],[6807,65,6779,67],[6807,67,6779,69,"firebase"],[6807,75,6779,77],[6807,78,6779,80],[6807,96,6779,98],[6807,97,6779,99],[6808,6,6780,8],[6808,10,6780,12,"signInProvider"],[6808,24,6780,26],[6808,26,6780,28],[6809,8,6781,12],[6809,14,6781,18,"filteredProviderId"],[6809,32,6781,36],[6809,35,6781,39,"signInProvider"],[6809,49,6781,53],[6809,54,6781,58],[6809,65,6781,69],[6809,66,6781,70],[6809,96,6782,16,"signInProvider"],[6809,110,6782,30],[6809,115,6782,35],[6809,123,6782,43],[6809,124,6782,44],[6809,150,6783,18,"signInProvider"],[6809,164,6783,32],[6809,167,6784,18],[6809,171,6784,22],[6810,8,6785,12],[6811,8,6786,12],[6811,15,6786,19],[6811,19,6786,23,"GenericAdditionalUserInfo"],[6811,44,6786,48],[6811,45,6786,49,"isNewUser"],[6811,54,6786,58],[6811,56,6786,60,"filteredProviderId"],[6811,74,6786,78],[6811,75,6786,79],[6812,6,6787,8],[6813,4,6788,4],[6814,4,6789,4],[6814,8,6789,8],[6814,9,6789,9,"providerId"],[6814,19,6789,19],[6814,21,6789,21],[6815,6,6790,8],[6815,13,6790,15],[6815,17,6790,19],[6816,4,6791,4],[6817,4,6792,4],[6817,12,6792,12,"providerId"],[6817,22,6792,22],[6818,6,6793,8],[6818,11,6793,13],[6818,25,6793,27],[6818,26,6793,28],[6819,8,6794,12],[6819,15,6794,19],[6819,19,6794,23,"FacebookAdditionalUserInfo"],[6819,45,6794,49],[6819,46,6794,50,"isNewUser"],[6819,55,6794,59],[6819,57,6794,61,"profile"],[6819,64,6794,68],[6819,65,6794,69],[6820,6,6795,8],[6820,11,6795,13],[6820,23,6795,25],[6820,24,6795,26],[6821,8,6796,12],[6821,15,6796,19],[6821,19,6796,23,"GithubAdditionalUserInfo"],[6821,43,6796,47],[6821,44,6796,48,"isNewUser"],[6821,53,6796,57],[6821,55,6796,59,"profile"],[6821,62,6796,66],[6821,63,6796,67],[6822,6,6797,8],[6822,11,6797,13],[6822,23,6797,25],[6822,24,6797,26],[6823,8,6798,12],[6823,15,6798,19],[6823,19,6798,23,"GoogleAdditionalUserInfo"],[6823,43,6798,47],[6823,44,6798,48,"isNewUser"],[6823,53,6798,57],[6823,55,6798,59,"profile"],[6823,62,6798,66],[6823,63,6798,67],[6824,6,6799,8],[6824,11,6799,13],[6824,24,6799,26],[6824,25,6799,27],[6825,8,6800,12],[6825,15,6800,19],[6825,19,6800,23,"TwitterAdditionalUserInfo"],[6825,44,6800,48],[6825,45,6800,49,"isNewUser"],[6825,54,6800,58],[6825,56,6800,60,"profile"],[6825,63,6800,67],[6825,65,6800,69,"idTokenResponse"],[6825,80,6800,84],[6825,81,6800,85,"screenName"],[6825,91,6800,95],[6825,95,6800,99],[6825,99,6800,103],[6825,100,6800,104],[6826,6,6801,8],[6826,11,6801,13],[6826,19,6801,21],[6826,20,6801,22],[6827,6,6802,8],[6827,11,6802,13],[6827,22,6802,24],[6827,23,6802,25],[6828,8,6803,12],[6828,15,6803,19],[6828,19,6803,23,"GenericAdditionalUserInfo"],[6828,44,6803,48],[6828,45,6803,49,"isNewUser"],[6828,54,6803,58],[6828,56,6803,60],[6828,60,6803,64],[6828,61,6803,65],[6829,6,6804,8],[6830,8,6805,12],[6830,15,6805,19],[6830,19,6805,23,"GenericAdditionalUserInfo"],[6830,44,6805,48],[6830,45,6805,49,"isNewUser"],[6830,54,6805,58],[6830,56,6805,60,"providerId"],[6830,66,6805,70],[6830,68,6805,72,"profile"],[6830,75,6805,79],[6830,76,6805,80],[6831,4,6806,4],[6832,2,6807,0],[6833,2,6808,0],[6833,8,6808,6,"GenericAdditionalUserInfo"],[6833,33,6808,31],[6833,34,6808,32],[6834,4,6809,4,"constructor"],[6834,15,6809,15,"constructor"],[6834,16,6809,16,"isNewUser"],[6834,25,6809,25],[6834,27,6809,27,"providerId"],[6834,37,6809,37],[6834,39,6809,39,"profile"],[6834,46,6809,46],[6834,49,6809,49],[6834,50,6809,50],[6834,51,6809,51],[6834,53,6809,53],[6835,6,6810,8],[6835,10,6810,12],[6835,11,6810,13,"isNewUser"],[6835,20,6810,22],[6835,23,6810,25,"isNewUser"],[6835,32,6810,34],[6836,6,6811,8],[6836,10,6811,12],[6836,11,6811,13,"providerId"],[6836,21,6811,23],[6836,24,6811,26,"providerId"],[6836,34,6811,36],[6837,6,6812,8],[6837,10,6812,12],[6837,11,6812,13,"profile"],[6837,18,6812,20],[6837,21,6812,23,"profile"],[6837,28,6812,30],[6838,4,6813,4],[6839,2,6814,0],[6840,2,6815,0],[6840,8,6815,6,"FederatedAdditionalUserInfoWithUsername"],[6840,47,6815,45],[6840,56,6815,54,"GenericAdditionalUserInfo"],[6840,81,6815,79],[6840,82,6815,80],[6841,4,6816,4,"constructor"],[6841,15,6816,15,"constructor"],[6841,16,6816,16,"isNewUser"],[6841,25,6816,25],[6841,27,6816,27,"providerId"],[6841,37,6816,37],[6841,39,6816,39,"profile"],[6841,46,6816,46],[6841,48,6816,48,"username"],[6841,56,6816,56],[6841,58,6816,58],[6842,6,6817,8],[6842,11,6817,13],[6842,12,6817,14,"isNewUser"],[6842,21,6817,23],[6842,23,6817,25,"providerId"],[6842,33,6817,35],[6842,35,6817,37,"profile"],[6842,42,6817,44],[6842,43,6817,45],[6843,6,6818,8],[6843,10,6818,12],[6843,11,6818,13,"username"],[6843,19,6818,21],[6843,22,6818,24,"username"],[6843,30,6818,32],[6844,4,6819,4],[6845,2,6820,0],[6846,2,6821,0],[6846,8,6821,6,"FacebookAdditionalUserInfo"],[6846,34,6821,32],[6846,43,6821,41,"GenericAdditionalUserInfo"],[6846,68,6821,66],[6846,69,6821,67],[6847,4,6822,4,"constructor"],[6847,15,6822,15,"constructor"],[6847,16,6822,16,"isNewUser"],[6847,25,6822,25],[6847,27,6822,27,"profile"],[6847,34,6822,34],[6847,36,6822,36],[6848,6,6823,8],[6848,11,6823,13],[6848,12,6823,14,"isNewUser"],[6848,21,6823,23],[6848,23,6823,25],[6848,37,6823,39],[6848,38,6823,40],[6848,65,6823,67,"profile"],[6848,72,6823,74],[6848,73,6823,75],[6849,4,6824,4],[6850,2,6825,0],[6851,2,6826,0],[6851,8,6826,6,"GithubAdditionalUserInfo"],[6851,32,6826,30],[6851,41,6826,39,"FederatedAdditionalUserInfoWithUsername"],[6851,80,6826,78],[6851,81,6826,79],[6852,4,6827,4,"constructor"],[6852,15,6827,15,"constructor"],[6852,16,6827,16,"isNewUser"],[6852,25,6827,25],[6852,27,6827,27,"profile"],[6852,34,6827,34],[6852,36,6827,36],[6853,6,6828,8],[6853,11,6828,13],[6853,12,6828,14,"isNewUser"],[6853,21,6828,23],[6853,23,6828,25],[6853,35,6828,37],[6853,36,6828,38],[6853,61,6828,63,"profile"],[6853,68,6828,70],[6853,70,6828,72],[6853,77,6828,79,"profile"],[6853,84,6828,86],[6853,86,6828,88,"login"],[6853,91,6828,93],[6853,96,6828,98],[6853,104,6828,106],[6853,107,6828,109,"profile"],[6853,114,6828,116],[6853,116,6828,118,"login"],[6853,121,6828,123],[6853,124,6828,126],[6853,128,6828,130],[6853,129,6828,131],[6854,4,6829,4],[6855,2,6830,0],[6856,2,6831,0],[6856,8,6831,6,"GoogleAdditionalUserInfo"],[6856,32,6831,30],[6856,41,6831,39,"GenericAdditionalUserInfo"],[6856,66,6831,64],[6856,67,6831,65],[6857,4,6832,4,"constructor"],[6857,15,6832,15,"constructor"],[6857,16,6832,16,"isNewUser"],[6857,25,6832,25],[6857,27,6832,27,"profile"],[6857,34,6832,34],[6857,36,6832,36],[6858,6,6833,8],[6858,11,6833,13],[6858,12,6833,14,"isNewUser"],[6858,21,6833,23],[6858,23,6833,25],[6858,35,6833,37],[6858,36,6833,38],[6858,61,6833,63,"profile"],[6858,68,6833,70],[6858,69,6833,71],[6859,4,6834,4],[6860,2,6835,0],[6861,2,6836,0],[6861,8,6836,6,"TwitterAdditionalUserInfo"],[6861,33,6836,31],[6861,42,6836,40,"FederatedAdditionalUserInfoWithUsername"],[6861,81,6836,79],[6861,82,6836,80],[6862,4,6837,4,"constructor"],[6862,15,6837,15,"constructor"],[6862,16,6837,16,"isNewUser"],[6862,25,6837,25],[6862,27,6837,27,"profile"],[6862,34,6837,34],[6862,36,6837,36,"screenName"],[6862,46,6837,46],[6862,48,6837,48],[6863,6,6838,8],[6863,11,6838,13],[6863,12,6838,14,"isNewUser"],[6863,21,6838,23],[6863,23,6838,25],[6863,36,6838,38],[6863,37,6838,39],[6863,63,6838,65,"profile"],[6863,70,6838,72],[6863,72,6838,74,"screenName"],[6863,82,6838,84],[6863,83,6838,85],[6864,4,6839,4],[6865,2,6840,0],[6866,2,6841,0],[6867,0,6842,0],[6868,0,6843,0],[6869,0,6844,0],[6870,0,6845,0],[6871,0,6846,0],[6872,0,6847,0],[6873,2,6848,0],[6873,11,6848,9,"getAdditionalUserInfo"],[6873,32,6848,30,"getAdditionalUserInfo"],[6873,33,6848,31,"userCredential"],[6873,47,6848,45],[6873,49,6848,47],[6874,4,6849,4],[6874,10,6849,10],[6875,6,6849,12,"user"],[6875,10,6849,16],[6876,6,6849,18,"_tokenResponse"],[6877,4,6849,33],[6877,5,6849,34],[6877,8,6849,37,"userCredential"],[6877,22,6849,51],[6878,4,6850,4],[6878,8,6850,8,"user"],[6878,12,6850,12],[6878,13,6850,13,"isAnonymous"],[6878,24,6850,24],[6878,28,6850,28],[6878,29,6850,29,"_tokenResponse"],[6878,43,6850,43],[6878,45,6850,45],[6879,6,6851,8],[6880,6,6852,8],[6881,6,6853,8],[6881,13,6853,15],[6882,8,6854,12,"providerId"],[6882,18,6854,22],[6882,20,6854,24],[6882,24,6854,28],[6883,8,6855,12,"isNewUser"],[6883,17,6855,21],[6883,19,6855,23],[6883,24,6855,28],[6884,8,6856,12,"profile"],[6884,15,6856,19],[6884,17,6856,21],[6885,6,6857,8],[6885,7,6857,9],[6886,4,6858,4],[6887,4,6859,4],[6887,11,6859,11,"_fromIdTokenResponse"],[6887,31,6859,31],[6887,32,6859,32,"_tokenResponse"],[6887,46,6859,46],[6887,47,6859,47],[6888,2,6860,0],[6890,2,6862,0],[6891,0,6863,0],[6892,0,6864,0],[6893,0,6865,0],[6894,0,6866,0],[6895,0,6867,0],[6896,0,6868,0],[6897,0,6869,0],[6898,0,6870,0],[6899,0,6871,0],[6900,0,6872,0],[6901,0,6873,0],[6902,0,6874,0],[6903,0,6875,0],[6904,0,6876,0],[6905,0,6877,0],[6906,2,6878,0],[6907,2,6879,0],[6908,0,6880,0],[6909,0,6881,0],[6910,0,6882,0],[6911,0,6883,0],[6912,0,6884,0],[6913,0,6885,0],[6914,0,6886,0],[6915,0,6887,0],[6916,0,6888,0],[6917,0,6889,0],[6918,0,6890,0],[6919,0,6891,0],[6920,0,6892,0],[6921,0,6893,0],[6922,0,6894,0],[6923,0,6895,0],[6924,0,6896,0],[6925,0,6897,0],[6926,0,6898,0],[6927,0,6899,0],[6928,0,6900,0],[6929,0,6901,0],[6930,0,6902,0],[6931,2,6903,0],[6931,11,6903,9,"setPersistence"],[6931,25,6903,23,"setPersistence"],[6931,26,6903,24,"auth"],[6931,30,6903,28],[6931,32,6903,30,"persistence"],[6931,43,6903,41],[6931,45,6903,43],[6932,4,6904,4],[6932,11,6904,11],[6932,15,6904,11,"getModularInstance"],[6932,39,6904,29],[6932,41,6904,30,"auth"],[6932,45,6904,34],[6932,46,6904,35],[6932,47,6904,36,"setPersistence"],[6932,61,6904,50],[6932,62,6904,51,"persistence"],[6932,73,6904,62],[6932,74,6904,63],[6933,2,6905,0],[6934,2,6906,0],[6935,0,6907,0],[6936,0,6908,0],[6937,0,6909,0],[6938,0,6910,0],[6939,0,6911,0],[6940,0,6912,0],[6941,0,6913,0],[6942,0,6914,0],[6943,0,6915,0],[6944,0,6916,0],[6945,0,6917,0],[6946,0,6918,0],[6947,0,6919,0],[6948,0,6920,0],[6949,0,6921,0],[6950,0,6922,0],[6951,0,6923,0],[6952,0,6924,0],[6953,0,6925,0],[6954,0,6926,0],[6955,0,6927,0],[6956,0,6928,0],[6957,0,6929,0],[6958,0,6930,0],[6959,0,6931,0],[6960,0,6932,0],[6961,2,6933,0],[6961,11,6933,9,"initializeRecaptchaConfig"],[6961,36,6933,34,"initializeRecaptchaConfig"],[6961,37,6933,35,"auth"],[6961,41,6933,39],[6961,43,6933,41],[6962,4,6934,4],[6962,11,6934,11,"_initializeRecaptchaConfig"],[6962,37,6934,37],[6962,38,6934,38,"auth"],[6962,42,6934,42],[6962,43,6934,43],[6963,2,6935,0],[6964,2,6936,0],[6965,0,6937,0],[6966,0,6938,0],[6967,0,6939,0],[6968,0,6940,0],[6969,0,6941,0],[6970,0,6942,0],[6971,0,6943,0],[6972,0,6944,0],[6973,0,6945,0],[6974,0,6946,0],[6975,0,6947,0],[6976,0,6948,0],[6977,0,6949,0],[6978,0,6950,0],[6979,0,6951,0],[6980,0,6952,0],[6981,0,6953,0],[6982,0,6954,0],[6983,0,6955,0],[6984,0,6956,0],[6985,0,6957,0],[6986,0,6958,0],[6987,2,6959,0],[6987,17,6959,15,"validatePassword"],[6987,33,6959,31,"validatePassword"],[6987,34,6959,32,"auth"],[6987,38,6959,36],[6987,40,6959,38,"password"],[6987,48,6959,46],[6987,50,6959,48],[6988,4,6960,4],[6988,10,6960,10,"authInternal"],[6988,22,6960,22],[6988,25,6960,25,"_castAuth"],[6988,34,6960,34],[6988,35,6960,35,"auth"],[6988,39,6960,39],[6988,40,6960,40],[6989,4,6961,4],[6989,11,6961,11,"authInternal"],[6989,23,6961,23],[6989,24,6961,24,"validatePassword"],[6989,40,6961,40],[6989,41,6961,41,"password"],[6989,49,6961,49],[6989,50,6961,50],[6990,2,6962,0],[6991,2,6963,0],[6992,0,6964,0],[6993,0,6965,0],[6994,0,6966,0],[6995,0,6967,0],[6996,0,6968,0],[6997,0,6969,0],[6998,0,6970,0],[6999,0,6971,0],[7000,0,6972,0],[7001,0,6973,0],[7002,0,6974,0],[7003,0,6975,0],[7004,0,6976,0],[7005,0,6977,0],[7006,0,6978,0],[7007,2,6979,0],[7007,11,6979,9,"onIdTokenChanged"],[7007,27,6979,25,"onIdTokenChanged"],[7007,28,6979,26,"auth"],[7007,32,6979,30],[7007,34,6979,32,"nextOrObserver"],[7007,48,6979,46],[7007,50,6979,48,"error"],[7007,55,6979,53],[7007,57,6979,55,"completed"],[7007,66,6979,64],[7007,68,6979,66],[7008,4,6980,4],[7008,11,6980,11],[7008,15,6980,11,"getModularInstance"],[7008,39,6980,29],[7008,41,6980,30,"auth"],[7008,45,6980,34],[7008,46,6980,35],[7008,47,6980,36,"onIdTokenChanged"],[7008,63,6980,52],[7008,64,6980,53,"nextOrObserver"],[7008,78,6980,67],[7008,80,6980,69,"error"],[7008,85,6980,74],[7008,87,6980,76,"completed"],[7008,96,6980,85],[7008,97,6980,86],[7009,2,6981,0],[7010,2,6982,0],[7011,0,6983,0],[7012,0,6984,0],[7013,0,6985,0],[7014,0,6986,0],[7015,0,6987,0],[7016,0,6988,0],[7017,0,6989,0],[7018,0,6990,0],[7019,0,6991,0],[7020,2,6992,0],[7020,11,6992,9,"beforeAuthStateChanged"],[7020,33,6992,31,"beforeAuthStateChanged"],[7020,34,6992,32,"auth"],[7020,38,6992,36],[7020,40,6992,38,"callback"],[7020,48,6992,46],[7020,50,6992,48,"onAbort"],[7020,57,6992,55],[7020,59,6992,57],[7021,4,6993,4],[7021,11,6993,11],[7021,15,6993,11,"getModularInstance"],[7021,39,6993,29],[7021,41,6993,30,"auth"],[7021,45,6993,34],[7021,46,6993,35],[7021,47,6993,36,"beforeAuthStateChanged"],[7021,69,6993,58],[7021,70,6993,59,"callback"],[7021,78,6993,67],[7021,80,6993,69,"onAbort"],[7021,87,6993,76],[7021,88,6993,77],[7022,2,6994,0],[7023,2,6995,0],[7024,0,6996,0],[7025,0,6997,0],[7026,0,6998,0],[7027,0,6999,0],[7028,0,7000,0],[7029,0,7001,0],[7030,0,7002,0],[7031,0,7003,0],[7032,0,7004,0],[7033,0,7005,0],[7034,0,7006,0],[7035,0,7007,0],[7036,0,7008,0],[7037,0,7009,0],[7038,2,7010,0],[7038,11,7010,9,"onAuthStateChanged"],[7038,29,7010,27,"onAuthStateChanged"],[7038,30,7010,28,"auth"],[7038,34,7010,32],[7038,36,7010,34,"nextOrObserver"],[7038,50,7010,48],[7038,52,7010,50,"error"],[7038,57,7010,55],[7038,59,7010,57,"completed"],[7038,68,7010,66],[7038,70,7010,68],[7039,4,7011,4],[7039,11,7011,11],[7039,15,7011,11,"getModularInstance"],[7039,39,7011,29],[7039,41,7011,30,"auth"],[7039,45,7011,34],[7039,46,7011,35],[7039,47,7011,36,"onAuthStateChanged"],[7039,65,7011,54],[7039,66,7011,55,"nextOrObserver"],[7039,80,7011,69],[7039,82,7011,71,"error"],[7039,87,7011,76],[7039,89,7011,78,"completed"],[7039,98,7011,87],[7039,99,7011,88],[7040,2,7012,0],[7041,2,7013,0],[7042,0,7014,0],[7043,0,7015,0],[7044,0,7016,0],[7045,0,7017,0],[7046,0,7018,0],[7047,0,7019,0],[7048,2,7020,0],[7048,11,7020,9,"useDeviceLanguage"],[7048,28,7020,26,"useDeviceLanguage"],[7048,29,7020,27,"auth"],[7048,33,7020,31],[7048,35,7020,33],[7049,4,7021,4],[7049,8,7021,4,"getModularInstance"],[7049,32,7021,22],[7049,34,7021,23,"auth"],[7049,38,7021,27],[7049,39,7021,28],[7049,40,7021,29,"useDeviceLanguage"],[7049,57,7021,46],[7049,58,7021,47],[7049,59,7021,48],[7050,2,7022,0],[7051,2,7023,0],[7052,0,7024,0],[7053,0,7025,0],[7054,0,7026,0],[7055,0,7027,0],[7056,0,7028,0],[7057,0,7029,0],[7058,0,7030,0],[7059,0,7031,0],[7060,0,7032,0],[7061,0,7033,0],[7062,0,7034,0],[7063,0,7035,0],[7064,0,7036,0],[7065,0,7037,0],[7066,0,7038,0],[7067,0,7039,0],[7068,0,7040,0],[7069,0,7041,0],[7070,0,7042,0],[7071,0,7043,0],[7072,2,7044,0],[7072,11,7044,9,"updateCurrentUser"],[7072,28,7044,26,"updateCurrentUser"],[7072,29,7044,27,"auth"],[7072,33,7044,31],[7072,35,7044,33,"user"],[7072,39,7044,37],[7072,41,7044,39],[7073,4,7045,4],[7073,11,7045,11],[7073,15,7045,11,"getModularInstance"],[7073,39,7045,29],[7073,41,7045,30,"auth"],[7073,45,7045,34],[7073,46,7045,35],[7073,47,7045,36,"updateCurrentUser"],[7073,64,7045,53],[7073,65,7045,54,"user"],[7073,69,7045,58],[7073,70,7045,59],[7074,2,7046,0],[7075,2,7047,0],[7076,0,7048,0],[7077,0,7049,0],[7078,0,7050,0],[7079,0,7051,0],[7080,0,7052,0],[7081,0,7053,0],[7082,0,7054,0],[7083,0,7055,0],[7084,0,7056,0],[7085,0,7057,0],[7086,2,7058,0],[7086,11,7058,9,"signOut"],[7086,18,7058,16,"signOut"],[7086,19,7058,17,"auth"],[7086,23,7058,21],[7086,25,7058,23],[7087,4,7059,4],[7087,11,7059,11],[7087,15,7059,11,"getModularInstance"],[7087,39,7059,29],[7087,41,7059,30,"auth"],[7087,45,7059,34],[7087,46,7059,35],[7087,47,7059,36,"signOut"],[7087,54,7059,43],[7087,55,7059,44],[7087,56,7059,45],[7088,2,7060,0],[7089,2,7061,0],[7090,0,7062,0],[7091,0,7063,0],[7092,0,7064,0],[7093,0,7065,0],[7094,0,7066,0],[7095,0,7067,0],[7096,0,7068,0],[7097,2,7069,0],[7097,11,7069,9,"revokeAccessToken"],[7097,28,7069,26,"revokeAccessToken"],[7097,29,7069,27,"auth"],[7097,33,7069,31],[7097,35,7069,33,"token"],[7097,40,7069,38],[7097,42,7069,40],[7098,4,7070,4],[7098,10,7070,10,"authInternal"],[7098,22,7070,22],[7098,25,7070,25,"_castAuth"],[7098,34,7070,34],[7098,35,7070,35,"auth"],[7098,39,7070,39],[7098,40,7070,40],[7099,4,7071,4],[7099,11,7071,11,"authInternal"],[7099,23,7071,23],[7099,24,7071,24,"revokeAccessToken"],[7099,41,7071,41],[7099,42,7071,42,"token"],[7099,47,7071,47],[7099,48,7071,48],[7100,2,7072,0],[7101,2,7073,0],[7102,0,7074,0],[7103,0,7075,0],[7104,0,7076,0],[7105,0,7077,0],[7106,0,7078,0],[7107,0,7079,0],[7108,0,7080,0],[7109,0,7081,0],[7110,0,7082,0],[7111,0,7083,0],[7112,0,7084,0],[7113,2,7085,0],[7113,17,7085,15,"deleteUser"],[7113,27,7085,25,"deleteUser"],[7113,28,7085,26,"user"],[7113,32,7085,30],[7113,34,7085,32],[7114,4,7086,4],[7114,11,7086,11],[7114,15,7086,11,"getModularInstance"],[7114,39,7086,29],[7114,41,7086,30,"user"],[7114,45,7086,34],[7114,46,7086,35],[7114,47,7086,36,"delete"],[7114,53,7086,42],[7114,54,7086,43],[7114,55,7086,44],[7115,2,7087,0],[7117,2,7089,0],[7118,0,7090,0],[7119,0,7091,0],[7120,0,7092,0],[7121,0,7093,0],[7122,0,7094,0],[7123,0,7095,0],[7124,0,7096,0],[7125,0,7097,0],[7126,0,7098,0],[7127,0,7099,0],[7128,0,7100,0],[7129,0,7101,0],[7130,0,7102,0],[7131,0,7103,0],[7132,0,7104,0],[7133,2,7105,0],[7133,8,7105,6,"MultiFactorSessionImpl"],[7133,30,7105,28],[7133,31,7105,29],[7134,4,7106,4,"constructor"],[7134,15,7106,15,"constructor"],[7134,16,7106,16,"type"],[7134,20,7106,20],[7134,22,7106,22,"credential"],[7134,32,7106,32],[7134,34,7106,34,"user"],[7134,38,7106,38],[7134,40,7106,40],[7135,6,7107,8],[7135,10,7107,12],[7135,11,7107,13,"type"],[7135,15,7107,17],[7135,18,7107,20,"type"],[7135,22,7107,24],[7136,6,7108,8],[7136,10,7108,12],[7136,11,7108,13,"credential"],[7136,21,7108,23],[7136,24,7108,26,"credential"],[7136,34,7108,36],[7137,6,7109,8],[7137,10,7109,12],[7137,11,7109,13,"user"],[7137,15,7109,17],[7137,18,7109,20,"user"],[7137,22,7109,24],[7138,4,7110,4],[7139,4,7111,4],[7139,11,7111,11,"_fromIdtoken"],[7139,23,7111,23,"_fromIdtoken"],[7139,24,7111,24,"idToken"],[7139,31,7111,31],[7139,33,7111,33,"user"],[7139,37,7111,37],[7139,39,7111,39],[7140,6,7112,8],[7140,13,7112,15],[7140,17,7112,19,"MultiFactorSessionImpl"],[7140,39,7112,41],[7140,40,7112,42],[7140,48,7112,50],[7140,49,7112,51],[7140,86,7112,88,"idToken"],[7140,93,7112,95],[7140,95,7112,97,"user"],[7140,99,7112,101],[7140,100,7112,102],[7141,4,7113,4],[7142,4,7114,4],[7142,11,7114,11,"_fromMfaPendingCredential"],[7142,36,7114,36,"_fromMfaPendingCredential"],[7142,37,7114,37,"mfaPendingCredential"],[7142,57,7114,57],[7142,59,7114,59],[7143,6,7115,8],[7143,13,7115,15],[7143,17,7115,19,"MultiFactorSessionImpl"],[7143,39,7115,41],[7143,40,7115,42],[7143,48,7115,50],[7143,49,7115,51],[7143,87,7115,89,"mfaPendingCredential"],[7143,107,7115,109],[7143,108,7115,110],[7144,4,7116,4],[7145,4,7117,4,"toJSON"],[7145,10,7117,10,"toJSON"],[7145,11,7117,10],[7145,13,7117,13],[7146,6,7118,8],[7146,12,7118,14,"key"],[7146,15,7118,17],[7146,18,7118,20],[7146,22,7118,24],[7146,23,7118,25,"type"],[7146,27,7118,29],[7146,32,7118,34],[7146,40,7118,42],[7146,41,7118,43],[7146,79,7119,14],[7146,88,7119,23],[7146,91,7120,14],[7146,110,7120,33],[7147,6,7121,8],[7147,13,7121,15],[7148,8,7122,12,"multiFactorSession"],[7148,26,7122,30],[7148,28,7122,32],[7149,10,7123,16],[7149,11,7123,17,"key"],[7149,14,7123,20],[7149,17,7123,23],[7149,21,7123,27],[7149,22,7123,28,"credential"],[7150,8,7124,12],[7151,6,7125,8],[7151,7,7125,9],[7152,4,7126,4],[7153,4,7127,4],[7153,11,7127,11,"fromJSON"],[7153,19,7127,19,"fromJSON"],[7153,20,7127,20,"obj"],[7153,23,7127,23],[7153,25,7127,25],[7154,6,7128,8],[7154,10,7128,12,"obj"],[7154,13,7128,15],[7154,15,7128,17,"multiFactorSession"],[7154,33,7128,35],[7154,35,7128,37],[7155,8,7129,12],[7155,12,7129,16,"obj"],[7155,15,7129,19],[7155,16,7129,20,"multiFactorSession"],[7155,34,7129,38],[7155,36,7129,40,"pendingCredential"],[7155,53,7129,57],[7155,55,7129,59],[7156,10,7130,16],[7156,17,7130,23,"MultiFactorSessionImpl"],[7156,39,7130,45],[7156,40,7130,46,"_fromMfaPendingCredential"],[7156,65,7130,71],[7156,66,7130,72,"obj"],[7156,69,7130,75],[7156,70,7130,76,"multiFactorSession"],[7156,88,7130,94],[7156,89,7130,95,"pendingCredential"],[7156,106,7130,112],[7156,107,7130,113],[7157,8,7131,12],[7157,9,7131,13],[7157,15,7132,17],[7157,19,7132,21,"obj"],[7157,22,7132,24],[7157,23,7132,25,"multiFactorSession"],[7157,41,7132,43],[7157,43,7132,45,"idToken"],[7157,50,7132,52],[7157,52,7132,54],[7158,10,7133,16],[7158,17,7133,23,"MultiFactorSessionImpl"],[7158,39,7133,45],[7158,40,7133,46,"_fromIdtoken"],[7158,52,7133,58],[7158,53,7133,59,"obj"],[7158,56,7133,62],[7158,57,7133,63,"multiFactorSession"],[7158,75,7133,81],[7158,76,7133,82,"idToken"],[7158,83,7133,89],[7158,84,7133,90],[7159,8,7134,12],[7160,6,7135,8],[7161,6,7136,8],[7161,13,7136,15],[7161,17,7136,19],[7162,4,7137,4],[7163,2,7138,0],[7165,2,7140,0],[7166,0,7141,0],[7167,0,7142,0],[7168,0,7143,0],[7169,0,7144,0],[7170,0,7145,0],[7171,0,7146,0],[7172,0,7147,0],[7173,0,7148,0],[7174,0,7149,0],[7175,0,7150,0],[7176,0,7151,0],[7177,0,7152,0],[7178,0,7153,0],[7179,0,7154,0],[7180,0,7155,0],[7181,2,7156,0],[7181,8,7156,6,"MultiFactorResolverImpl"],[7181,31,7156,29],[7181,32,7156,30],[7182,4,7157,4,"constructor"],[7182,15,7157,15,"constructor"],[7182,16,7157,16,"session"],[7182,23,7157,23],[7182,25,7157,25,"hints"],[7182,30,7157,30],[7182,32,7157,32,"signInResolver"],[7182,46,7157,46],[7182,48,7157,48],[7183,6,7158,8],[7183,10,7158,12],[7183,11,7158,13,"session"],[7183,18,7158,20],[7183,21,7158,23,"session"],[7183,28,7158,30],[7184,6,7159,8],[7184,10,7159,12],[7184,11,7159,13,"hints"],[7184,16,7159,18],[7184,19,7159,21,"hints"],[7184,24,7159,26],[7185,6,7160,8],[7185,10,7160,12],[7185,11,7160,13,"signInResolver"],[7185,25,7160,27],[7185,28,7160,30,"signInResolver"],[7185,42,7160,44],[7186,4,7161,4],[7187,4,7162,4],[7188,4,7163,4],[7188,11,7163,11,"_fromError"],[7188,21,7163,21,"_fromError"],[7188,22,7163,22,"authExtern"],[7188,32,7163,32],[7188,34,7163,34,"error"],[7188,39,7163,39],[7188,41,7163,41],[7189,6,7164,8],[7189,12,7164,14,"auth"],[7189,16,7164,18],[7189,19,7164,21,"_castAuth"],[7189,28,7164,30],[7189,29,7164,31,"authExtern"],[7189,39,7164,41],[7189,40,7164,42],[7190,6,7165,8],[7190,12,7165,14,"serverResponse"],[7190,26,7165,28],[7190,29,7165,31,"error"],[7190,34,7165,36],[7190,35,7165,37,"customData"],[7190,45,7165,47],[7190,46,7165,48,"_serverResponse"],[7190,61,7165,63],[7191,6,7166,8],[7191,12,7166,14,"hints"],[7191,17,7166,19],[7191,20,7166,22],[7191,21,7166,23,"serverResponse"],[7191,35,7166,37],[7191,36,7166,38,"mfaInfo"],[7191,43,7166,45],[7191,47,7166,49],[7191,49,7166,51],[7191,51,7166,53,"map"],[7191,54,7166,56],[7191,55,7166,57,"enrollment"],[7191,65,7166,67],[7191,69,7166,71,"MultiFactorInfoImpl"],[7191,88,7166,90],[7191,89,7166,91,"_fromServerResponse"],[7191,108,7166,110],[7191,109,7166,111,"auth"],[7191,113,7166,115],[7191,115,7166,117,"enrollment"],[7191,125,7166,127],[7191,126,7166,128],[7191,127,7166,129],[7192,6,7167,8,"_assert"],[7192,13,7167,15],[7192,14,7167,16,"serverResponse"],[7192,28,7167,30],[7192,29,7167,31,"mfaPendingCredential"],[7192,49,7167,51],[7192,51,7167,53,"auth"],[7192,55,7167,57],[7192,57,7167,59],[7192,73,7167,75],[7192,74,7167,76],[7192,108,7167,110],[7192,109,7167,111],[7193,6,7168,8],[7193,12,7168,14,"session"],[7193,19,7168,21],[7193,22,7168,24,"MultiFactorSessionImpl"],[7193,44,7168,46],[7193,45,7168,47,"_fromMfaPendingCredential"],[7193,70,7168,72],[7193,71,7168,73,"serverResponse"],[7193,85,7168,87],[7193,86,7168,88,"mfaPendingCredential"],[7193,106,7168,108],[7193,107,7168,109],[7194,6,7169,8],[7194,13,7169,15],[7194,17,7169,19,"MultiFactorResolverImpl"],[7194,40,7169,42],[7194,41,7169,43,"session"],[7194,48,7169,50],[7194,50,7169,52,"hints"],[7194,55,7169,57],[7194,57,7169,59],[7194,63,7169,66,"assertion"],[7194,72,7169,75],[7194,76,7169,80],[7195,8,7170,12],[7195,14,7170,18,"mfaResponse"],[7195,25,7170,29],[7195,28,7170,32],[7195,34,7170,38,"assertion"],[7195,43,7170,47],[7195,44,7170,48,"_process"],[7195,52,7170,56],[7195,53,7170,57,"auth"],[7195,57,7170,61],[7195,59,7170,63,"session"],[7195,66,7170,70],[7195,67,7170,71],[7196,8,7171,12],[7197,8,7172,12],[7197,15,7172,19,"serverResponse"],[7197,29,7172,33],[7197,30,7172,34,"mfaInfo"],[7197,37,7172,41],[7198,8,7173,12],[7198,15,7173,19,"serverResponse"],[7198,29,7173,33],[7198,30,7173,34,"mfaPendingCredential"],[7198,50,7173,54],[7199,8,7174,12],[7200,8,7175,12],[7200,14,7175,18,"idTokenResponse"],[7200,29,7175,33],[7200,32,7175,36],[7201,10,7176,16],[7201,13,7176,19,"serverResponse"],[7201,27,7176,33],[7202,10,7177,16,"idToken"],[7202,17,7177,23],[7202,19,7177,25,"mfaResponse"],[7202,30,7177,36],[7202,31,7177,37,"idToken"],[7202,38,7177,44],[7203,10,7178,16,"refreshToken"],[7203,22,7178,28],[7203,24,7178,30,"mfaResponse"],[7203,35,7178,41],[7203,36,7178,42,"refreshToken"],[7204,8,7179,12],[7204,9,7179,13],[7205,8,7180,12],[7206,8,7181,12],[7206,16,7181,20,"error"],[7206,21,7181,25],[7206,22,7181,26,"operationType"],[7206,35,7181,39],[7207,10,7182,16],[7207,15,7182,21],[7207,23,7182,29],[7207,24,7182,30],[7208,12,7183,20],[7208,18,7183,26,"userCredential"],[7208,32,7183,40],[7208,35,7183,43],[7208,41,7183,49,"UserCredentialImpl"],[7208,59,7183,67],[7208,60,7183,68,"_fromIdTokenResponse"],[7208,80,7183,88],[7208,81,7183,89,"auth"],[7208,85,7183,93],[7208,87,7183,95,"error"],[7208,92,7183,100],[7208,93,7183,101,"operationType"],[7208,106,7183,114],[7208,108,7183,116,"idTokenResponse"],[7208,123,7183,131],[7208,124,7183,132],[7209,12,7184,20],[7209,18,7184,26,"auth"],[7209,22,7184,30],[7209,23,7184,31,"_updateCurrentUser"],[7209,41,7184,49],[7209,42,7184,50,"userCredential"],[7209,56,7184,64],[7209,57,7184,65,"user"],[7209,61,7184,69],[7209,62,7184,70],[7210,12,7185,20],[7210,19,7185,27,"userCredential"],[7210,33,7185,41],[7211,10,7186,16],[7211,15,7186,21],[7211,31,7186,37],[7211,32,7186,38],[7212,12,7187,20,"_assert"],[7212,19,7187,27],[7212,20,7187,28,"error"],[7212,25,7187,33],[7212,26,7187,34,"user"],[7212,30,7187,38],[7212,32,7187,40,"auth"],[7212,36,7187,44],[7212,38,7187,46],[7212,54,7187,62],[7212,55,7187,63],[7212,89,7187,97],[7212,90,7187,98],[7213,12,7188,20],[7213,19,7188,27,"UserCredentialImpl"],[7213,37,7188,45],[7213,38,7188,46,"_forOperation"],[7213,51,7188,59],[7213,52,7188,60,"error"],[7213,57,7188,65],[7213,58,7188,66,"user"],[7213,62,7188,70],[7213,64,7188,72,"error"],[7213,69,7188,77],[7213,70,7188,78,"operationType"],[7213,83,7188,91],[7213,85,7188,93,"idTokenResponse"],[7213,100,7188,108],[7213,101,7188,109],[7214,10,7189,16],[7215,12,7190,20,"_fail"],[7215,17,7190,25],[7215,18,7190,26,"auth"],[7215,22,7190,30],[7215,24,7190,32],[7215,40,7190,48],[7215,41,7190,49],[7215,75,7190,83],[7215,76,7190,84],[7216,8,7191,12],[7217,6,7192,8],[7217,7,7192,9],[7217,8,7192,10],[7218,4,7193,4],[7219,4,7194,4],[7219,10,7194,10,"resolveSignIn"],[7219,23,7194,23,"resolveSignIn"],[7219,24,7194,24,"assertionExtern"],[7219,39,7194,39],[7219,41,7194,41],[7220,6,7195,8],[7220,12,7195,14,"assertion"],[7220,21,7195,23],[7220,24,7195,26,"assertionExtern"],[7220,39,7195,41],[7221,6,7196,8],[7221,13,7196,15],[7221,17,7196,19],[7221,18,7196,20,"signInResolver"],[7221,32,7196,34],[7221,33,7196,35,"assertion"],[7221,42,7196,44],[7221,43,7196,45],[7222,4,7197,4],[7223,2,7198,0],[7224,2,7199,0],[7225,0,7200,0],[7226,0,7201,0],[7227,0,7202,0],[7228,0,7203,0],[7229,0,7204,0],[7230,0,7205,0],[7231,0,7206,0],[7232,0,7207,0],[7233,0,7208,0],[7234,2,7209,0],[7234,11,7209,9,"getMultiFactorResolver"],[7234,33,7209,31,"getMultiFactorResolver"],[7234,34,7209,32,"auth"],[7234,38,7209,36],[7234,40,7209,38,"error"],[7234,45,7209,43],[7234,47,7209,45],[7235,4,7210,4],[7235,10,7210,10,"authModular"],[7235,21,7210,21],[7235,24,7210,24],[7235,28,7210,24,"getModularInstance"],[7235,52,7210,42],[7235,54,7210,43,"auth"],[7235,58,7210,47],[7235,59,7210,48],[7236,4,7211,4],[7236,10,7211,10,"errorInternal"],[7236,23,7211,23],[7236,26,7211,26,"error"],[7236,31,7211,31],[7237,4,7212,4,"_assert"],[7237,11,7212,11],[7237,12,7212,12,"error"],[7237,17,7212,17],[7237,18,7212,18,"customData"],[7237,28,7212,28],[7237,29,7212,29,"operationType"],[7237,42,7212,42],[7237,44,7212,44,"authModular"],[7237,55,7212,55],[7237,57,7212,57],[7237,73,7212,73],[7237,74,7212,74],[7237,108,7212,108],[7237,109,7212,109],[7238,4,7213,4,"_assert"],[7238,11,7213,11],[7238,12,7213,12,"errorInternal"],[7238,25,7213,25],[7238,26,7213,26,"customData"],[7238,36,7213,36],[7238,37,7213,37,"_serverResponse"],[7238,52,7213,52],[7238,54,7213,54,"mfaPendingCredential"],[7238,74,7213,74],[7238,76,7213,76,"authModular"],[7238,87,7213,87],[7238,89,7213,89],[7238,105,7213,105],[7238,106,7213,106],[7238,140,7213,140],[7238,141,7213,141],[7239,4,7214,4],[7239,11,7214,11,"MultiFactorResolverImpl"],[7239,34,7214,34],[7239,35,7214,35,"_fromError"],[7239,45,7214,45],[7239,46,7214,46,"authModular"],[7239,57,7214,57],[7239,59,7214,59,"errorInternal"],[7239,72,7214,72],[7239,73,7214,73],[7240,2,7215,0],[7242,2,7217,0],[7243,0,7218,0],[7244,0,7219,0],[7245,0,7220,0],[7246,0,7221,0],[7247,0,7222,0],[7248,0,7223,0],[7249,0,7224,0],[7250,0,7225,0],[7251,0,7226,0],[7252,0,7227,0],[7253,0,7228,0],[7254,0,7229,0],[7255,0,7230,0],[7256,0,7231,0],[7257,0,7232,0],[7258,2,7233,0],[7258,11,7233,9,"startEnrollPhoneMfa"],[7258,30,7233,28,"startEnrollPhoneMfa"],[7258,31,7233,29,"auth"],[7258,35,7233,33],[7258,37,7233,35,"request"],[7258,44,7233,42],[7258,46,7233,44],[7259,4,7234,4],[7259,11,7234,11,"_performApiRequest"],[7259,29,7234,29],[7259,30,7234,30,"auth"],[7259,34,7234,34],[7259,36,7234,36],[7259,42,7234,42],[7259,43,7234,43],[7259,66,7234,66],[7259,100,7234,100],[7259,101,7234,101],[7259,138,7234,138,"_addTidIfNecessary"],[7259,156,7234,156],[7259,157,7234,157,"auth"],[7259,161,7234,161],[7259,163,7234,163,"request"],[7259,170,7234,170],[7259,171,7234,171],[7259,172,7234,172],[7260,2,7235,0],[7261,2,7236,0],[7261,11,7236,9,"finalizeEnrollPhoneMfa"],[7261,33,7236,31,"finalizeEnrollPhoneMfa"],[7261,34,7236,32,"auth"],[7261,38,7236,36],[7261,40,7236,38,"request"],[7261,47,7236,45],[7261,49,7236,47],[7262,4,7237,4],[7262,11,7237,11,"_performApiRequest"],[7262,29,7237,29],[7262,30,7237,30,"auth"],[7262,34,7237,34],[7262,36,7237,36],[7262,42,7237,42],[7262,43,7237,43],[7262,66,7237,66],[7262,103,7237,103],[7262,104,7237,104],[7262,144,7237,144,"_addTidIfNecessary"],[7262,162,7237,162],[7262,163,7237,163,"auth"],[7262,167,7237,167],[7262,169,7237,169,"request"],[7262,176,7237,176],[7262,177,7237,177],[7262,178,7237,178],[7263,2,7238,0],[7264,2,7239,0],[7264,11,7239,9,"startEnrollTotpMfa"],[7264,29,7239,27,"startEnrollTotpMfa"],[7264,30,7239,28,"auth"],[7264,34,7239,32],[7264,36,7239,34,"request"],[7264,43,7239,41],[7264,45,7239,43],[7265,4,7240,4],[7265,11,7240,11,"_performApiRequest"],[7265,29,7240,29],[7265,30,7240,30,"auth"],[7265,34,7240,34],[7265,36,7240,36],[7265,42,7240,42],[7265,43,7240,43],[7265,66,7240,66],[7265,100,7240,100],[7265,101,7240,101],[7265,138,7240,138,"_addTidIfNecessary"],[7265,156,7240,156],[7265,157,7240,157,"auth"],[7265,161,7240,161],[7265,163,7240,163,"request"],[7265,170,7240,170],[7265,171,7240,171],[7265,172,7240,172],[7266,2,7241,0],[7267,2,7242,0],[7267,11,7242,9,"finalizeEnrollTotpMfa"],[7267,32,7242,30,"finalizeEnrollTotpMfa"],[7267,33,7242,31,"auth"],[7267,37,7242,35],[7267,39,7242,37,"request"],[7267,46,7242,44],[7267,48,7242,46],[7268,4,7243,4],[7268,11,7243,11,"_performApiRequest"],[7268,29,7243,29],[7268,30,7243,30,"auth"],[7268,34,7243,34],[7268,36,7243,36],[7268,42,7243,42],[7268,43,7243,43],[7268,66,7243,66],[7268,103,7243,103],[7268,104,7243,104],[7268,144,7243,144,"_addTidIfNecessary"],[7268,162,7243,162],[7268,163,7243,163,"auth"],[7268,167,7243,167],[7268,169,7243,169,"request"],[7268,176,7243,176],[7268,177,7243,177],[7268,178,7243,178],[7269,2,7244,0],[7270,2,7245,0],[7270,11,7245,9,"withdrawMfa"],[7270,22,7245,20,"withdrawMfa"],[7270,23,7245,21,"auth"],[7270,27,7245,25],[7270,29,7245,27,"request"],[7270,36,7245,34],[7270,38,7245,36],[7271,4,7246,4],[7271,11,7246,11,"_performApiRequest"],[7271,29,7246,29],[7271,30,7246,30,"auth"],[7271,34,7246,34],[7271,36,7246,36],[7271,42,7246,42],[7271,43,7246,43],[7271,66,7246,66],[7271,103,7246,103],[7271,104,7246,104],[7271,133,7246,133,"_addTidIfNecessary"],[7271,151,7246,151],[7271,152,7246,152,"auth"],[7271,156,7246,156],[7271,158,7246,158,"request"],[7271,165,7246,165],[7271,166,7246,166],[7271,167,7246,167],[7272,2,7247,0],[7273,2,7249,0],[7273,8,7249,6,"MultiFactorUserImpl"],[7273,27,7249,25],[7273,28,7249,26],[7274,4,7250,4,"constructor"],[7274,15,7250,15,"constructor"],[7274,16,7250,16,"user"],[7274,20,7250,20],[7274,22,7250,22],[7275,6,7251,8],[7275,10,7251,12],[7275,11,7251,13,"user"],[7275,15,7251,17],[7275,18,7251,20,"user"],[7275,22,7251,24],[7276,6,7252,8],[7276,10,7252,12],[7276,11,7252,13,"enrolledFactors"],[7276,26,7252,28],[7276,29,7252,31],[7276,31,7252,33],[7277,6,7253,8,"user"],[7277,10,7253,12],[7277,11,7253,13,"_onReload"],[7277,20,7253,22],[7277,21,7253,23,"userInfo"],[7277,29,7253,31],[7277,33,7253,35],[7278,8,7254,12],[7278,12,7254,16,"userInfo"],[7278,20,7254,24],[7278,21,7254,25,"mfaInfo"],[7278,28,7254,32],[7278,30,7254,34],[7279,10,7255,16],[7279,14,7255,20],[7279,15,7255,21,"enrolledFactors"],[7279,30,7255,36],[7279,33,7255,39,"userInfo"],[7279,41,7255,47],[7279,42,7255,48,"mfaInfo"],[7279,49,7255,55],[7279,50,7255,56,"map"],[7279,53,7255,59],[7279,54,7255,60,"enrollment"],[7279,64,7255,70],[7279,68,7255,74,"MultiFactorInfoImpl"],[7279,87,7255,93],[7279,88,7255,94,"_fromServerResponse"],[7279,107,7255,113],[7279,108,7255,114,"user"],[7279,112,7255,118],[7279,113,7255,119,"auth"],[7279,117,7255,123],[7279,119,7255,125,"enrollment"],[7279,129,7255,135],[7279,130,7255,136],[7279,131,7255,137],[7280,8,7256,12],[7281,6,7257,8],[7281,7,7257,9],[7281,8,7257,10],[7282,4,7258,4],[7283,4,7259,4],[7283,11,7259,11,"_fromUser"],[7283,20,7259,20,"_fromUser"],[7283,21,7259,21,"user"],[7283,25,7259,25],[7283,27,7259,27],[7284,6,7260,8],[7284,13,7260,15],[7284,17,7260,19,"MultiFactorUserImpl"],[7284,36,7260,38],[7284,37,7260,39,"user"],[7284,41,7260,43],[7284,42,7260,44],[7285,4,7261,4],[7286,4,7262,4],[7286,10,7262,10,"getSession"],[7286,20,7262,20,"getSession"],[7286,21,7262,20],[7286,23,7262,23],[7287,6,7263,8],[7287,13,7263,15,"MultiFactorSessionImpl"],[7287,35,7263,37],[7287,36,7263,38,"_fromIdtoken"],[7287,48,7263,50],[7287,49,7263,51],[7287,55,7263,57],[7287,59,7263,61],[7287,60,7263,62,"user"],[7287,64,7263,66],[7287,65,7263,67,"getIdToken"],[7287,75,7263,77],[7287,76,7263,78],[7287,77,7263,79],[7287,79,7263,81],[7287,83,7263,85],[7287,84,7263,86,"user"],[7287,88,7263,90],[7287,89,7263,91],[7288,4,7264,4],[7289,4,7265,4],[7289,10,7265,10,"enroll"],[7289,16,7265,16,"enroll"],[7289,17,7265,17,"assertionExtern"],[7289,32,7265,32],[7289,34,7265,34,"displayName"],[7289,45,7265,45],[7289,47,7265,47],[7290,6,7266,8],[7290,12,7266,14,"assertion"],[7290,21,7266,23],[7290,24,7266,26,"assertionExtern"],[7290,39,7266,41],[7291,6,7267,8],[7291,12,7267,14,"session"],[7291,19,7267,21],[7291,22,7267,25],[7291,28,7267,31],[7291,32,7267,35],[7291,33,7267,36,"getSession"],[7291,43,7267,46],[7291,44,7267,47],[7291,45,7267,49],[7292,6,7268,8],[7292,12,7268,14,"finalizeMfaResponse"],[7292,31,7268,33],[7292,34,7268,36],[7292,40,7268,42,"_logoutIfInvalidated"],[7292,60,7268,62],[7292,61,7268,63],[7292,65,7268,67],[7292,66,7268,68,"user"],[7292,70,7268,72],[7292,72,7268,74,"assertion"],[7292,81,7268,83],[7292,82,7268,84,"_process"],[7292,90,7268,92],[7292,91,7268,93],[7292,95,7268,97],[7292,96,7268,98,"user"],[7292,100,7268,102],[7292,101,7268,103,"auth"],[7292,105,7268,107],[7292,107,7268,109,"session"],[7292,114,7268,116],[7292,116,7268,118,"displayName"],[7292,127,7268,129],[7292,128,7268,130],[7292,129,7268,131],[7293,6,7269,8],[7294,6,7270,8],[7295,6,7271,8],[7295,12,7271,14],[7295,16,7271,18],[7295,17,7271,19,"user"],[7295,21,7271,23],[7295,22,7271,24,"_updateTokensIfNecessary"],[7295,46,7271,48],[7295,47,7271,49,"finalizeMfaResponse"],[7295,66,7271,68],[7295,67,7271,69],[7296,6,7272,8],[7297,6,7273,8],[7298,6,7274,8],[7299,6,7275,8],[7299,13,7275,15],[7299,17,7275,19],[7299,18,7275,20,"user"],[7299,22,7275,24],[7299,23,7275,25,"reload"],[7299,29,7275,31],[7299,30,7275,32],[7299,31,7275,33],[7300,4,7276,4],[7301,4,7277,4],[7301,10,7277,10,"unenroll"],[7301,18,7277,18,"unenroll"],[7301,19,7277,19,"infoOrUid"],[7301,28,7277,28],[7301,30,7277,30],[7302,6,7278,8],[7302,12,7278,14,"mfaEnrollmentId"],[7302,27,7278,29],[7302,30,7278,32],[7302,37,7278,39,"infoOrUid"],[7302,46,7278,48],[7302,51,7278,53],[7302,59,7278,61],[7302,62,7278,64,"infoOrUid"],[7302,71,7278,73],[7302,74,7278,76,"infoOrUid"],[7302,83,7278,85],[7302,84,7278,86,"uid"],[7302,87,7278,89],[7303,6,7279,8],[7303,12,7279,14,"idToken"],[7303,19,7279,21],[7303,22,7279,24],[7303,28,7279,30],[7303,32,7279,34],[7303,33,7279,35,"user"],[7303,37,7279,39],[7303,38,7279,40,"getIdToken"],[7303,48,7279,50],[7303,49,7279,51],[7303,50,7279,52],[7304,6,7280,8],[7304,10,7280,12],[7305,8,7281,12],[7305,14,7281,18,"idTokenResponse"],[7305,29,7281,33],[7305,32,7281,36],[7305,38,7281,42,"_logoutIfInvalidated"],[7305,58,7281,62],[7305,59,7281,63],[7305,63,7281,67],[7305,64,7281,68,"user"],[7305,68,7281,72],[7305,70,7281,74,"withdrawMfa"],[7305,81,7281,85],[7305,82,7281,86],[7305,86,7281,90],[7305,87,7281,91,"user"],[7305,91,7281,95],[7305,92,7281,96,"auth"],[7305,96,7281,100],[7305,98,7281,102],[7306,10,7282,16,"idToken"],[7306,17,7282,23],[7307,10,7283,16,"mfaEnrollmentId"],[7308,8,7284,12],[7308,9,7284,13],[7308,10,7284,14],[7308,11,7284,15],[7309,8,7285,12],[7310,8,7286,12],[7310,12,7286,16],[7310,13,7286,17,"enrolledFactors"],[7310,28,7286,32],[7310,31,7286,35],[7310,35,7286,39],[7310,36,7286,40,"enrolledFactors"],[7310,51,7286,55],[7310,52,7286,56,"filter"],[7310,58,7286,62],[7310,59,7286,63],[7310,60,7286,64],[7311,10,7286,66,"uid"],[7312,8,7286,70],[7312,9,7286,71],[7312,14,7286,76,"uid"],[7312,17,7286,79],[7312,22,7286,84,"mfaEnrollmentId"],[7312,37,7286,99],[7312,38,7286,100],[7313,8,7287,12],[7314,8,7288,12],[7315,8,7289,12],[7316,8,7290,12],[7317,8,7291,12],[7317,14,7291,18],[7317,18,7291,22],[7317,19,7291,23,"user"],[7317,23,7291,27],[7317,24,7291,28,"_updateTokensIfNecessary"],[7317,48,7291,52],[7317,49,7291,53,"idTokenResponse"],[7317,64,7291,68],[7317,65,7291,69],[7318,8,7292,12],[7318,14,7292,18],[7318,18,7292,22],[7318,19,7292,23,"user"],[7318,23,7292,27],[7318,24,7292,28,"reload"],[7318,30,7292,34],[7318,31,7292,35],[7318,32,7292,36],[7319,6,7293,8],[7319,7,7293,9],[7319,8,7294,8],[7319,15,7294,15,"e"],[7319,16,7294,16],[7319,18,7294,18],[7320,8,7295,12],[7320,14,7295,18,"e"],[7320,15,7295,19],[7321,6,7296,8],[7322,4,7297,4],[7323,2,7298,0],[7324,2,7299,0],[7324,8,7299,6,"multiFactorUserCache"],[7324,28,7299,26],[7324,31,7299,29],[7324,35,7299,33,"WeakMap"],[7324,42,7299,40],[7324,43,7299,41],[7324,44,7299,42],[7325,2,7300,0],[7326,0,7301,0],[7327,0,7302,0],[7328,0,7303,0],[7329,0,7304,0],[7330,0,7305,0],[7331,0,7306,0],[7332,0,7307,0],[7333,0,7308,0],[7334,0,7309,0],[7335,2,7310,0],[7335,11,7310,9,"multiFactor"],[7335,22,7310,20,"multiFactor"],[7335,23,7310,21,"user"],[7335,27,7310,25],[7335,29,7310,27],[7336,4,7311,4],[7336,10,7311,10,"userModular"],[7336,21,7311,21],[7336,24,7311,24],[7336,28,7311,24,"getModularInstance"],[7336,52,7311,42],[7336,54,7311,43,"user"],[7336,58,7311,47],[7336,59,7311,48],[7337,4,7312,4],[7337,8,7312,8],[7337,9,7312,9,"multiFactorUserCache"],[7337,29,7312,29],[7337,30,7312,30,"has"],[7337,33,7312,33],[7337,34,7312,34,"userModular"],[7337,45,7312,45],[7337,46,7312,46],[7337,48,7312,48],[7338,6,7313,8,"multiFactorUserCache"],[7338,26,7313,28],[7338,27,7313,29,"set"],[7338,30,7313,32],[7338,31,7313,33,"userModular"],[7338,42,7313,44],[7338,44,7313,46,"MultiFactorUserImpl"],[7338,63,7313,65],[7338,64,7313,66,"_fromUser"],[7338,73,7313,75],[7338,74,7313,76,"userModular"],[7338,85,7313,87],[7338,86,7313,88],[7338,87,7313,89],[7339,4,7314,4],[7340,4,7315,4],[7340,11,7315,11,"multiFactorUserCache"],[7340,31,7315,31],[7340,32,7315,32,"get"],[7340,35,7315,35],[7340,36,7315,36,"userModular"],[7340,47,7315,47],[7340,48,7315,48],[7341,2,7316,0],[7342,2,7318,0],[7342,8,7318,6,"STORAGE_AVAILABLE_KEY"],[7342,29,7318,27],[7342,32,7318,30],[7342,39,7318,37],[7344,2,7320,0],[7345,0,7321,0],[7346,0,7322,0],[7347,0,7323,0],[7348,0,7324,0],[7349,0,7325,0],[7350,0,7326,0],[7351,0,7327,0],[7352,0,7328,0],[7353,0,7329,0],[7354,0,7330,0],[7355,0,7331,0],[7356,0,7332,0],[7357,0,7333,0],[7358,0,7334,0],[7359,0,7335,0],[7360,2,7336,0],[7361,2,7337,0],[7362,2,7338,0],[7363,2,7339,0],[7363,8,7339,6,"BrowserPersistenceClass"],[7363,31,7339,29],[7363,32,7339,30],[7364,4,7340,4,"constructor"],[7364,15,7340,15,"constructor"],[7364,16,7340,16,"storageRetriever"],[7364,32,7340,32],[7364,34,7340,34,"type"],[7364,38,7340,38],[7364,40,7340,40],[7365,6,7341,8],[7365,10,7341,12],[7365,11,7341,13,"storageRetriever"],[7365,27,7341,29],[7365,30,7341,32,"storageRetriever"],[7365,46,7341,48],[7366,6,7342,8],[7366,10,7342,12],[7366,11,7342,13,"type"],[7366,15,7342,17],[7366,18,7342,20,"type"],[7366,22,7342,24],[7367,4,7343,4],[7368,4,7344,4,"_isAvailable"],[7368,16,7344,16,"_isAvailable"],[7368,17,7344,16],[7368,19,7344,19],[7369,6,7345,8],[7369,10,7345,12],[7370,8,7346,12],[7370,12,7346,16],[7370,13,7346,17],[7370,17,7346,21],[7370,18,7346,22,"storage"],[7370,25,7346,29],[7370,27,7346,31],[7371,10,7347,16],[7371,17,7347,23,"Promise"],[7371,24,7347,30],[7371,25,7347,31,"resolve"],[7371,32,7347,38],[7371,33,7347,39],[7371,38,7347,44],[7371,39,7347,45],[7372,8,7348,12],[7373,8,7349,12],[7373,12,7349,16],[7373,13,7349,17,"storage"],[7373,20,7349,24],[7373,21,7349,25,"setItem"],[7373,28,7349,32],[7373,29,7349,33,"STORAGE_AVAILABLE_KEY"],[7373,50,7349,54],[7373,52,7349,56],[7373,55,7349,59],[7373,56,7349,60],[7374,8,7350,12],[7374,12,7350,16],[7374,13,7350,17,"storage"],[7374,20,7350,24],[7374,21,7350,25,"removeItem"],[7374,31,7350,35],[7374,32,7350,36,"STORAGE_AVAILABLE_KEY"],[7374,53,7350,57],[7374,54,7350,58],[7375,8,7351,12],[7375,15,7351,19,"Promise"],[7375,22,7351,26],[7375,23,7351,27,"resolve"],[7375,30,7351,34],[7375,31,7351,35],[7375,35,7351,39],[7375,36,7351,40],[7376,6,7352,8],[7376,7,7352,9],[7376,8,7353,8],[7376,14,7353,14],[7377,8,7354,12],[7377,15,7354,19,"Promise"],[7377,22,7354,26],[7377,23,7354,27,"resolve"],[7377,30,7354,34],[7377,31,7354,35],[7377,36,7354,40],[7377,37,7354,41],[7378,6,7355,8],[7379,4,7356,4],[7380,4,7357,4,"_set"],[7380,8,7357,8,"_set"],[7380,9,7357,9,"key"],[7380,12,7357,12],[7380,14,7357,14,"value"],[7380,19,7357,19],[7380,21,7357,21],[7381,6,7358,8],[7381,10,7358,12],[7381,11,7358,13,"storage"],[7381,18,7358,20],[7381,19,7358,21,"setItem"],[7381,26,7358,28],[7381,27,7358,29,"key"],[7381,30,7358,32],[7381,32,7358,34,"JSON"],[7381,36,7358,38],[7381,37,7358,39,"stringify"],[7381,46,7358,48],[7381,47,7358,49,"value"],[7381,52,7358,54],[7381,53,7358,55],[7381,54,7358,56],[7382,6,7359,8],[7382,13,7359,15,"Promise"],[7382,20,7359,22],[7382,21,7359,23,"resolve"],[7382,28,7359,30],[7382,29,7359,31],[7382,30,7359,32],[7383,4,7360,4],[7384,4,7361,4,"_get"],[7384,8,7361,8,"_get"],[7384,9,7361,9,"key"],[7384,12,7361,12],[7384,14,7361,14],[7385,6,7362,8],[7385,12,7362,14,"json"],[7385,16,7362,18],[7385,19,7362,21],[7385,23,7362,25],[7385,24,7362,26,"storage"],[7385,31,7362,33],[7385,32,7362,34,"getItem"],[7385,39,7362,41],[7385,40,7362,42,"key"],[7385,43,7362,45],[7385,44,7362,46],[7386,6,7363,8],[7386,13,7363,15,"Promise"],[7386,20,7363,22],[7386,21,7363,23,"resolve"],[7386,28,7363,30],[7386,29,7363,31,"json"],[7386,33,7363,35],[7386,36,7363,38,"JSON"],[7386,40,7363,42],[7386,41,7363,43,"parse"],[7386,46,7363,48],[7386,47,7363,49,"json"],[7386,51,7363,53],[7386,52,7363,54],[7386,55,7363,57],[7386,59,7363,61],[7386,60,7363,62],[7387,4,7364,4],[7388,4,7365,4,"_remove"],[7388,11,7365,11,"_remove"],[7388,12,7365,12,"key"],[7388,15,7365,15],[7388,17,7365,17],[7389,6,7366,8],[7389,10,7366,12],[7389,11,7366,13,"storage"],[7389,18,7366,20],[7389,19,7366,21,"removeItem"],[7389,29,7366,31],[7389,30,7366,32,"key"],[7389,33,7366,35],[7389,34,7366,36],[7390,6,7367,8],[7390,13,7367,15,"Promise"],[7390,20,7367,22],[7390,21,7367,23,"resolve"],[7390,28,7367,30],[7390,29,7367,31],[7390,30,7367,32],[7391,4,7368,4],[7392,4,7369,4],[7392,8,7369,8,"storage"],[7392,15,7369,15,"storage"],[7392,16,7369,15],[7392,18,7369,18],[7393,6,7370,8],[7393,13,7370,15],[7393,17,7370,19],[7393,18,7370,20,"storageRetriever"],[7393,34,7370,36],[7393,35,7370,37],[7393,36,7370,38],[7394,4,7371,4],[7395,2,7372,0],[7397,2,7374,0],[7398,0,7375,0],[7399,0,7376,0],[7400,0,7377,0],[7401,0,7378,0],[7402,0,7379,0],[7403,0,7380,0],[7404,0,7381,0],[7405,0,7382,0],[7406,0,7383,0],[7407,0,7384,0],[7408,0,7385,0],[7409,0,7386,0],[7410,0,7387,0],[7411,0,7388,0],[7412,0,7389,0],[7413,2,7390,0],[7414,2,7391,0],[7414,8,7391,6,"_POLLING_INTERVAL_MS$1"],[7414,30,7391,28],[7414,33,7391,31],[7414,37,7391,35],[7415,2,7392,0],[7416,2,7393,0],[7416,8,7393,6,"IE10_LOCAL_STORAGE_SYNC_DELAY"],[7416,37,7393,35],[7416,40,7393,38],[7416,42,7393,40],[7417,2,7394,0],[7417,8,7394,6,"BrowserLocalPersistence"],[7417,31,7394,29],[7417,40,7394,38,"BrowserPersistenceClass"],[7417,63,7394,61],[7417,64,7394,62],[7418,4,7395,4,"constructor"],[7418,15,7395,15,"constructor"],[7418,16,7395,15],[7418,18,7395,18],[7419,6,7396,8],[7419,11,7396,13],[7419,12,7396,14],[7419,18,7396,20,"window"],[7419,24,7396,26],[7419,25,7396,27,"localStorage"],[7419,37,7396,39],[7419,39,7396,41],[7419,46,7396,48],[7419,47,7396,49],[7419,74,7396,76],[7419,75,7396,77],[7420,6,7397,8],[7420,10,7397,12],[7420,11,7397,13,"boundEventHandler"],[7420,28,7397,30],[7420,31,7397,33],[7420,32,7397,34,"event"],[7420,37,7397,39],[7420,39,7397,41,"poll"],[7420,43,7397,45],[7420,48,7397,50],[7420,52,7397,54],[7420,53,7397,55,"onStorageEvent"],[7420,67,7397,69],[7420,68,7397,70,"event"],[7420,73,7397,75],[7420,75,7397,77,"poll"],[7420,79,7397,81],[7420,80,7397,82],[7421,6,7398,8],[7421,10,7398,12],[7421,11,7398,13,"listeners"],[7421,20,7398,22],[7421,23,7398,25],[7421,24,7398,26],[7421,25,7398,27],[7422,6,7399,8],[7422,10,7399,12],[7422,11,7399,13,"localCache"],[7422,21,7399,23],[7422,24,7399,26],[7422,25,7399,27],[7422,26,7399,28],[7423,6,7400,8],[7424,6,7401,8],[7425,6,7402,8],[7425,10,7402,12],[7425,11,7402,13,"pollTimer"],[7425,20,7402,22],[7425,23,7402,25],[7425,27,7402,29],[7426,6,7403,8],[7427,6,7404,8],[7427,10,7404,12],[7427,11,7404,13,"fallbackToPolling"],[7427,28,7404,30],[7427,31,7404,33,"_isMobileBrowser"],[7427,47,7404,49],[7427,48,7404,50],[7427,49,7404,51],[7428,6,7405,8],[7428,10,7405,12],[7428,11,7405,13,"_shouldAllowMigration"],[7428,32,7405,34],[7428,35,7405,37],[7428,39,7405,41],[7429,4,7406,4],[7430,4,7407,4,"forAllChangedKeys"],[7430,21,7407,21,"forAllChangedKeys"],[7430,22,7407,22,"cb"],[7430,24,7407,24],[7430,26,7407,26],[7431,6,7408,8],[7432,6,7409,8],[7432,11,7409,13],[7432,17,7409,19,"key"],[7432,20,7409,22],[7432,24,7409,26,"Object"],[7432,30,7409,32],[7432,31,7409,33,"keys"],[7432,35,7409,37],[7432,36,7409,38],[7432,40,7409,42],[7432,41,7409,43,"listeners"],[7432,50,7409,52],[7432,51,7409,53],[7432,53,7409,55],[7433,8,7410,12],[7434,8,7411,12],[7434,14,7411,18,"newValue"],[7434,22,7411,26],[7434,25,7411,29],[7434,29,7411,33],[7434,30,7411,34,"storage"],[7434,37,7411,41],[7434,38,7411,42,"getItem"],[7434,45,7411,49],[7434,46,7411,50,"key"],[7434,49,7411,53],[7434,50,7411,54],[7435,8,7412,12],[7435,14,7412,18,"oldValue"],[7435,22,7412,26],[7435,25,7412,29],[7435,29,7412,33],[7435,30,7412,34,"localCache"],[7435,40,7412,44],[7435,41,7412,45,"key"],[7435,44,7412,48],[7435,45,7412,49],[7436,8,7413,12],[7437,8,7414,12],[7438,8,7415,12],[7438,12,7415,16,"newValue"],[7438,20,7415,24],[7438,25,7415,29,"oldValue"],[7438,33,7415,37],[7438,35,7415,39],[7439,10,7416,16,"cb"],[7439,12,7416,18],[7439,13,7416,19,"key"],[7439,16,7416,22],[7439,18,7416,24,"oldValue"],[7439,26,7416,32],[7439,28,7416,34,"newValue"],[7439,36,7416,42],[7439,37,7416,43],[7440,8,7417,12],[7441,6,7418,8],[7442,4,7419,4],[7443,4,7420,4,"onStorageEvent"],[7443,18,7420,18,"onStorageEvent"],[7443,19,7420,19,"event"],[7443,24,7420,24],[7443,26,7420,26,"poll"],[7443,30,7420,30],[7443,33,7420,33],[7443,38,7420,38],[7443,40,7420,40],[7444,6,7421,8],[7445,6,7422,8],[7445,10,7422,12],[7445,11,7422,13,"event"],[7445,16,7422,18],[7445,17,7422,19,"key"],[7445,20,7422,22],[7445,22,7422,24],[7446,8,7423,12],[7446,12,7423,16],[7446,13,7423,17,"forAllChangedKeys"],[7446,30,7423,34],[7446,31,7423,35],[7446,32,7423,36,"key"],[7446,35,7423,39],[7446,37,7423,41,"_oldValue"],[7446,46,7423,50],[7446,48,7423,52,"newValue"],[7446,56,7423,60],[7446,61,7423,65],[7447,10,7424,16],[7447,14,7424,20],[7447,15,7424,21,"notifyListeners"],[7447,30,7424,36],[7447,31,7424,37,"key"],[7447,34,7424,40],[7447,36,7424,42,"newValue"],[7447,44,7424,50],[7447,45,7424,51],[7448,8,7425,12],[7448,9,7425,13],[7448,10,7425,14],[7449,8,7426,12],[7450,6,7427,8],[7451,6,7428,8],[7451,12,7428,14,"key"],[7451,15,7428,17],[7451,18,7428,20,"event"],[7451,23,7428,25],[7451,24,7428,26,"key"],[7451,27,7428,29],[7452,6,7429,8],[7453,6,7430,8],[7454,6,7431,8],[7454,10,7431,12,"poll"],[7454,14,7431,16],[7454,16,7431,18],[7455,8,7432,12],[7456,8,7433,12],[7457,8,7434,12],[7457,12,7434,16],[7457,13,7434,17,"detachListener"],[7457,27,7434,31],[7457,28,7434,32],[7457,29,7434,33],[7458,6,7435,8],[7458,7,7435,9],[7458,13,7436,13],[7459,8,7437,12],[7460,8,7438,12],[7461,8,7439,12],[7461,12,7439,16],[7461,13,7439,17,"stopPolling"],[7461,24,7439,28],[7461,25,7439,29],[7461,26,7439,30],[7462,6,7440,8],[7463,6,7441,8],[7463,12,7441,14,"triggerListeners"],[7463,28,7441,30],[7463,31,7441,33,"triggerListeners"],[7463,32,7441,33],[7463,37,7441,39],[7464,8,7442,12],[7465,8,7443,12],[7466,8,7444,12],[7466,14,7444,18,"storedValue"],[7466,25,7444,29],[7466,28,7444,32],[7466,32,7444,36],[7466,33,7444,37,"storage"],[7466,40,7444,44],[7466,41,7444,45,"getItem"],[7466,48,7444,52],[7466,49,7444,53,"key"],[7466,52,7444,56],[7466,53,7444,57],[7467,8,7445,12],[7467,12,7445,16],[7467,13,7445,17,"poll"],[7467,17,7445,21],[7467,21,7445,25],[7467,25,7445,29],[7467,26,7445,30,"localCache"],[7467,36,7445,40],[7467,37,7445,41,"key"],[7467,40,7445,44],[7467,41,7445,45],[7467,46,7445,50,"storedValue"],[7467,57,7445,61],[7467,59,7445,63],[7468,10,7446,16],[7469,10,7447,16],[7470,10,7448,16],[7471,8,7449,12],[7472,8,7450,12],[7472,12,7450,16],[7472,13,7450,17,"notifyListeners"],[7472,28,7450,32],[7472,29,7450,33,"key"],[7472,32,7450,36],[7472,34,7450,38,"storedValue"],[7472,45,7450,49],[7472,46,7450,50],[7473,6,7451,8],[7473,7,7451,9],[7474,6,7452,8],[7474,12,7452,14,"storedValue"],[7474,23,7452,25],[7474,26,7452,28],[7474,30,7452,32],[7474,31,7452,33,"storage"],[7474,38,7452,40],[7474,39,7452,41,"getItem"],[7474,46,7452,48],[7474,47,7452,49,"key"],[7474,50,7452,52],[7474,51,7452,53],[7475,6,7453,8],[7475,10,7453,12,"_isIE10"],[7475,17,7453,19],[7475,18,7453,20],[7475,19,7453,21],[7475,23,7454,12,"storedValue"],[7475,34,7454,23],[7475,39,7454,28,"event"],[7475,44,7454,33],[7475,45,7454,34,"newValue"],[7475,53,7454,42],[7475,57,7455,12,"event"],[7475,62,7455,17],[7475,63,7455,18,"newValue"],[7475,71,7455,26],[7475,76,7455,31,"event"],[7475,81,7455,36],[7475,82,7455,37,"oldValue"],[7475,90,7455,45],[7475,92,7455,47],[7476,8,7456,12],[7477,8,7457,12],[7478,8,7458,12],[7479,8,7459,12],[7480,8,7460,12,"setTimeout"],[7480,18,7460,22],[7480,19,7460,23,"triggerListeners"],[7480,35,7460,39],[7480,37,7460,41,"IE10_LOCAL_STORAGE_SYNC_DELAY"],[7480,66,7460,70],[7480,67,7460,71],[7481,6,7461,8],[7481,7,7461,9],[7481,13,7462,13],[7482,8,7463,12,"triggerListeners"],[7482,24,7463,28],[7482,25,7463,29],[7482,26,7463,30],[7483,6,7464,8],[7484,4,7465,4],[7485,4,7466,4,"notifyListeners"],[7485,19,7466,19,"notifyListeners"],[7485,20,7466,20,"key"],[7485,23,7466,23],[7485,25,7466,25,"value"],[7485,30,7466,30],[7485,32,7466,32],[7486,6,7467,8],[7486,10,7467,12],[7486,11,7467,13,"localCache"],[7486,21,7467,23],[7486,22,7467,24,"key"],[7486,25,7467,27],[7486,26,7467,28],[7486,29,7467,31,"value"],[7486,34,7467,36],[7487,6,7468,8],[7487,12,7468,14,"listeners"],[7487,21,7468,23],[7487,24,7468,26],[7487,28,7468,30],[7487,29,7468,31,"listeners"],[7487,38,7468,40],[7487,39,7468,41,"key"],[7487,42,7468,44],[7487,43,7468,45],[7488,6,7469,8],[7488,10,7469,12,"listeners"],[7488,19,7469,21],[7488,21,7469,23],[7489,8,7470,12],[7489,13,7470,17],[7489,19,7470,23,"listener"],[7489,27,7470,31],[7489,31,7470,35,"Array"],[7489,36,7470,40],[7489,37,7470,41,"from"],[7489,41,7470,45],[7489,42,7470,46,"listeners"],[7489,51,7470,55],[7489,52,7470,56],[7489,54,7470,58],[7490,10,7471,16,"listener"],[7490,18,7471,24],[7490,19,7471,25,"value"],[7490,24,7471,30],[7490,27,7471,33,"JSON"],[7490,31,7471,37],[7490,32,7471,38,"parse"],[7490,37,7471,43],[7490,38,7471,44,"value"],[7490,43,7471,49],[7490,44,7471,50],[7490,47,7471,53,"value"],[7490,52,7471,58],[7490,53,7471,59],[7491,8,7472,12],[7492,6,7473,8],[7493,4,7474,4],[7494,4,7475,4,"startPolling"],[7494,16,7475,16,"startPolling"],[7494,17,7475,16],[7494,19,7475,19],[7495,6,7476,8],[7495,10,7476,12],[7495,11,7476,13,"stopPolling"],[7495,22,7476,24],[7495,23,7476,25],[7495,24,7476,26],[7496,6,7477,8],[7496,10,7477,12],[7496,11,7477,13,"pollTimer"],[7496,20,7477,22],[7496,23,7477,25,"setInterval"],[7496,34,7477,36],[7496,35,7477,37],[7496,41,7477,43],[7497,8,7478,12],[7497,12,7478,16],[7497,13,7478,17,"forAllChangedKeys"],[7497,30,7478,34],[7497,31,7478,35],[7497,32,7478,36,"key"],[7497,35,7478,39],[7497,37,7478,41,"oldValue"],[7497,45,7478,49],[7497,47,7478,51,"newValue"],[7497,55,7478,59],[7497,60,7478,64],[7498,10,7479,16],[7498,14,7479,20],[7498,15,7479,21,"onStorageEvent"],[7498,29,7479,35],[7498,30,7479,36],[7498,34,7479,40,"StorageEvent"],[7498,46,7479,52],[7498,47,7479,53],[7498,56,7479,62],[7498,58,7479,64],[7499,12,7480,20,"key"],[7499,15,7480,23],[7500,12,7481,20,"oldValue"],[7500,20,7481,28],[7501,12,7482,20,"newValue"],[7502,10,7483,16],[7502,11,7483,17],[7502,12,7483,18],[7502,14,7484,16],[7502,24,7484,27],[7502,28,7484,31],[7502,29,7484,32],[7503,8,7485,12],[7503,9,7485,13],[7503,10,7485,14],[7504,6,7486,8],[7504,7,7486,9],[7504,9,7486,11,"_POLLING_INTERVAL_MS$1"],[7504,31,7486,33],[7504,32,7486,34],[7505,4,7487,4],[7506,4,7488,4,"stopPolling"],[7506,15,7488,15,"stopPolling"],[7506,16,7488,15],[7506,18,7488,18],[7507,6,7489,8],[7507,10,7489,12],[7507,14,7489,16],[7507,15,7489,17,"pollTimer"],[7507,24,7489,26],[7507,26,7489,28],[7508,8,7490,12,"clearInterval"],[7508,21,7490,25],[7508,22,7490,26],[7508,26,7490,30],[7508,27,7490,31,"pollTimer"],[7508,36,7490,40],[7508,37,7490,41],[7509,8,7491,12],[7509,12,7491,16],[7509,13,7491,17,"pollTimer"],[7509,22,7491,26],[7509,25,7491,29],[7509,29,7491,33],[7510,6,7492,8],[7511,4,7493,4],[7512,4,7494,4,"attachListener"],[7512,18,7494,18,"attachListener"],[7512,19,7494,18],[7512,21,7494,21],[7513,6,7495,8,"window"],[7513,12,7495,14],[7513,13,7495,15,"addEventListener"],[7513,29,7495,31],[7513,30,7495,32],[7513,39,7495,41],[7513,41,7495,43],[7513,45,7495,47],[7513,46,7495,48,"boundEventHandler"],[7513,63,7495,65],[7513,64,7495,66],[7514,4,7496,4],[7515,4,7497,4,"detachListener"],[7515,18,7497,18,"detachListener"],[7515,19,7497,18],[7515,21,7497,21],[7516,6,7498,8,"window"],[7516,12,7498,14],[7516,13,7498,15,"removeEventListener"],[7516,32,7498,34],[7516,33,7498,35],[7516,42,7498,44],[7516,44,7498,46],[7516,48,7498,50],[7516,49,7498,51,"boundEventHandler"],[7516,66,7498,68],[7516,67,7498,69],[7517,4,7499,4],[7518,4,7500,4,"_addListener"],[7518,16,7500,16,"_addListener"],[7518,17,7500,17,"key"],[7518,20,7500,20],[7518,22,7500,22,"listener"],[7518,30,7500,30],[7518,32,7500,32],[7519,6,7501,8],[7519,10,7501,12,"Object"],[7519,16,7501,18],[7519,17,7501,19,"keys"],[7519,21,7501,23],[7519,22,7501,24],[7519,26,7501,28],[7519,27,7501,29,"listeners"],[7519,36,7501,38],[7519,37,7501,39],[7519,38,7501,40,"length"],[7519,44,7501,46],[7519,49,7501,51],[7519,50,7501,52],[7519,52,7501,54],[7520,8,7502,12],[7521,8,7503,12],[7522,8,7504,12],[7523,8,7505,12],[7524,8,7506,12],[7524,12,7506,16],[7524,16,7506,20],[7524,17,7506,21,"fallbackToPolling"],[7524,34,7506,38],[7524,36,7506,40],[7525,10,7507,16],[7525,14,7507,20],[7525,15,7507,21,"startPolling"],[7525,27,7507,33],[7525,28,7507,34],[7525,29,7507,35],[7526,8,7508,12],[7526,9,7508,13],[7526,15,7509,17],[7527,10,7510,16],[7527,14,7510,20],[7527,15,7510,21,"attachListener"],[7527,29,7510,35],[7527,30,7510,36],[7527,31,7510,37],[7528,8,7511,12],[7529,6,7512,8],[7530,6,7513,8],[7530,10,7513,12],[7530,11,7513,13],[7530,15,7513,17],[7530,16,7513,18,"listeners"],[7530,25,7513,27],[7530,26,7513,28,"key"],[7530,29,7513,31],[7530,30,7513,32],[7530,32,7513,34],[7531,8,7514,12],[7531,12,7514,16],[7531,13,7514,17,"listeners"],[7531,22,7514,26],[7531,23,7514,27,"key"],[7531,26,7514,30],[7531,27,7514,31],[7531,30,7514,34],[7531,34,7514,38,"Set"],[7531,37,7514,41],[7531,38,7514,42],[7531,39,7514,43],[7532,8,7515,12],[7533,8,7516,12],[7533,12,7516,16],[7533,13,7516,17,"localCache"],[7533,23,7516,27],[7533,24,7516,28,"key"],[7533,27,7516,31],[7533,28,7516,32],[7533,31,7516,35],[7533,35,7516,39],[7533,36,7516,40,"storage"],[7533,43,7516,47],[7533,44,7516,48,"getItem"],[7533,51,7516,55],[7533,52,7516,56,"key"],[7533,55,7516,59],[7533,56,7516,60],[7534,6,7517,8],[7535,6,7518,8],[7535,10,7518,12],[7535,11,7518,13,"listeners"],[7535,20,7518,22],[7535,21,7518,23,"key"],[7535,24,7518,26],[7535,25,7518,27],[7535,26,7518,28,"add"],[7535,29,7518,31],[7535,30,7518,32,"listener"],[7535,38,7518,40],[7535,39,7518,41],[7536,4,7519,4],[7537,4,7520,4,"_removeListener"],[7537,19,7520,19,"_removeListener"],[7537,20,7520,20,"key"],[7537,23,7520,23],[7537,25,7520,25,"listener"],[7537,33,7520,33],[7537,35,7520,35],[7538,6,7521,8],[7538,10,7521,12],[7538,14,7521,16],[7538,15,7521,17,"listeners"],[7538,24,7521,26],[7538,25,7521,27,"key"],[7538,28,7521,30],[7538,29,7521,31],[7538,31,7521,33],[7539,8,7522,12],[7539,12,7522,16],[7539,13,7522,17,"listeners"],[7539,22,7522,26],[7539,23,7522,27,"key"],[7539,26,7522,30],[7539,27,7522,31],[7539,28,7522,32,"delete"],[7539,34,7522,38],[7539,35,7522,39,"listener"],[7539,43,7522,47],[7539,44,7522,48],[7540,8,7523,12],[7540,12,7523,16],[7540,16,7523,20],[7540,17,7523,21,"listeners"],[7540,26,7523,30],[7540,27,7523,31,"key"],[7540,30,7523,34],[7540,31,7523,35],[7540,32,7523,36,"size"],[7540,36,7523,40],[7540,41,7523,45],[7540,42,7523,46],[7540,44,7523,48],[7541,10,7524,16],[7541,17,7524,23],[7541,21,7524,27],[7541,22,7524,28,"listeners"],[7541,31,7524,37],[7541,32,7524,38,"key"],[7541,35,7524,41],[7541,36,7524,42],[7542,8,7525,12],[7543,6,7526,8],[7544,6,7527,8],[7544,10,7527,12,"Object"],[7544,16,7527,18],[7544,17,7527,19,"keys"],[7544,21,7527,23],[7544,22,7527,24],[7544,26,7527,28],[7544,27,7527,29,"listeners"],[7544,36,7527,38],[7544,37,7527,39],[7544,38,7527,40,"length"],[7544,44,7527,46],[7544,49,7527,51],[7544,50,7527,52],[7544,52,7527,54],[7545,8,7528,12],[7545,12,7528,16],[7545,13,7528,17,"detachListener"],[7545,27,7528,31],[7545,28,7528,32],[7545,29,7528,33],[7546,8,7529,12],[7546,12,7529,16],[7546,13,7529,17,"stopPolling"],[7546,24,7529,28],[7546,25,7529,29],[7546,26,7529,30],[7547,6,7530,8],[7548,4,7531,4],[7549,4,7532,4],[7550,4,7533,4],[7550,10,7533,10,"_set"],[7550,14,7533,14,"_set"],[7550,15,7533,15,"key"],[7550,18,7533,18],[7550,20,7533,20,"value"],[7550,25,7533,25],[7550,27,7533,27],[7551,6,7534,8],[7551,12,7534,14],[7551,17,7534,19],[7551,18,7534,20,"_set"],[7551,22,7534,24],[7551,23,7534,25,"key"],[7551,26,7534,28],[7551,28,7534,30,"value"],[7551,33,7534,35],[7551,34,7534,36],[7552,6,7535,8],[7552,10,7535,12],[7552,11,7535,13,"localCache"],[7552,21,7535,23],[7552,22,7535,24,"key"],[7552,25,7535,27],[7552,26,7535,28],[7552,29,7535,31,"JSON"],[7552,33,7535,35],[7552,34,7535,36,"stringify"],[7552,43,7535,45],[7552,44,7535,46,"value"],[7552,49,7535,51],[7552,50,7535,52],[7553,4,7536,4],[7554,4,7537,4],[7554,10,7537,10,"_get"],[7554,14,7537,14,"_get"],[7554,15,7537,15,"key"],[7554,18,7537,18],[7554,20,7537,20],[7555,6,7538,8],[7555,12,7538,14,"value"],[7555,17,7538,19],[7555,20,7538,22],[7555,26,7538,28],[7555,31,7538,33],[7555,32,7538,34,"_get"],[7555,36,7538,38],[7555,37,7538,39,"key"],[7555,40,7538,42],[7555,41,7538,43],[7556,6,7539,8],[7556,10,7539,12],[7556,11,7539,13,"localCache"],[7556,21,7539,23],[7556,22,7539,24,"key"],[7556,25,7539,27],[7556,26,7539,28],[7556,29,7539,31,"JSON"],[7556,33,7539,35],[7556,34,7539,36,"stringify"],[7556,43,7539,45],[7556,44,7539,46,"value"],[7556,49,7539,51],[7556,50,7539,52],[7557,6,7540,8],[7557,13,7540,15,"value"],[7557,18,7540,20],[7558,4,7541,4],[7559,4,7542,4],[7559,10,7542,10,"_remove"],[7559,17,7542,17,"_remove"],[7559,18,7542,18,"key"],[7559,21,7542,21],[7559,23,7542,23],[7560,6,7543,8],[7560,12,7543,14],[7560,17,7543,19],[7560,18,7543,20,"_remove"],[7560,25,7543,27],[7560,26,7543,28,"key"],[7560,29,7543,31],[7560,30,7543,32],[7561,6,7544,8],[7561,13,7544,15],[7561,17,7544,19],[7561,18,7544,20,"localCache"],[7561,28,7544,30],[7561,29,7544,31,"key"],[7561,32,7544,34],[7561,33,7544,35],[7562,4,7545,4],[7563,2,7546,0],[7564,2,7547,0,"BrowserLocalPersistence"],[7564,25,7547,23],[7564,26,7547,24,"type"],[7564,30,7547,28],[7564,33,7547,31],[7564,40,7547,38],[7565,2,7548,0],[7566,0,7549,0],[7567,0,7550,0],[7568,0,7551,0],[7569,0,7552,0],[7570,0,7553,0],[7571,2,7554,0],[7571,8,7554,6,"browserLocalPersistence"],[7571,31,7554,29],[7571,34,7554,29,"exports"],[7571,41,7554,29],[7571,42,7554,29,"b"],[7571,43,7554,29],[7571,46,7554,32,"BrowserLocalPersistence"],[7571,69,7554,55],[7573,2,7556,0],[7574,0,7557,0],[7575,0,7558,0],[7576,0,7559,0],[7577,0,7560,0],[7578,0,7561,0],[7579,0,7562,0],[7580,0,7563,0],[7581,0,7564,0],[7582,0,7565,0],[7583,0,7566,0],[7584,0,7567,0],[7585,0,7568,0],[7586,0,7569,0],[7587,0,7570,0],[7588,0,7571,0],[7589,2,7572,0],[7589,8,7572,6,"POLLING_INTERVAL_MS"],[7589,27,7572,25],[7589,30,7572,28],[7589,34,7572,32],[7590,2,7573,0],[7591,2,7574,0],[7591,11,7574,9,"getDocumentCookie"],[7591,28,7574,26,"getDocumentCookie"],[7591,29,7574,27,"name"],[7591,33,7574,31],[7591,35,7574,33],[7592,4,7575,4],[7592,10,7575,10,"escapedName"],[7592,21,7575,21],[7592,24,7575,24,"name"],[7592,28,7575,28],[7592,29,7575,29,"replace"],[7592,36,7575,36],[7592,37,7575,37],[7592,58,7575,58],[7592,60,7575,60],[7592,66,7575,66],[7592,67,7575,67],[7593,4,7576,4],[7593,10,7576,10,"matcher"],[7593,17,7576,17],[7593,20,7576,20,"RegExp"],[7593,26,7576,26],[7593,27,7576,27],[7593,30,7576,30,"escapedName"],[7593,41,7576,41],[7593,51,7576,51],[7593,52,7576,52],[7594,4,7577,4],[7594,11,7577,11,"document"],[7594,19,7577,19],[7594,20,7577,20,"cookie"],[7594,26,7577,26],[7594,27,7577,27,"match"],[7594,32,7577,32],[7594,33,7577,33,"matcher"],[7594,40,7577,40],[7594,41,7577,41],[7594,44,7577,44],[7594,45,7577,45],[7594,46,7577,46],[7594,50,7577,50],[7594,54,7577,54],[7595,2,7578,0],[7596,2,7579,0],[7597,2,7580,0],[7597,11,7580,9,"getCookieName"],[7597,24,7580,22,"getCookieName"],[7597,25,7580,23,"key"],[7597,28,7580,26],[7597,30,7580,28],[7598,4,7581,4],[7599,4,7582,4],[7600,4,7583,4],[7601,4,7584,4],[7601,10,7584,10,"isDevMode"],[7601,19,7584,19],[7601,22,7584,22,"window"],[7601,28,7584,28],[7601,29,7584,29,"location"],[7601,37,7584,37],[7601,38,7584,38,"protocol"],[7601,46,7584,46],[7601,51,7584,51],[7601,58,7584,58],[7602,4,7585,4],[7602,11,7585,11],[7602,14,7585,14,"isDevMode"],[7602,23,7585,23],[7602,26,7585,26],[7602,34,7585,34],[7602,37,7585,37],[7602,46,7585,46],[7602,58,7585,58,"key"],[7602,61,7585,61],[7602,62,7585,62,"split"],[7602,67,7585,67],[7602,68,7585,68],[7602,71,7585,71],[7602,72,7585,72],[7602,73,7585,73],[7602,74,7585,74],[7602,75,7585,75],[7602,77,7585,77],[7603,2,7586,0],[7604,2,7587,0],[7604,8,7587,6,"CookiePersistence"],[7604,25,7587,23],[7604,26,7587,24],[7605,4,7588,4,"constructor"],[7605,15,7588,15,"constructor"],[7605,16,7588,15],[7605,18,7588,18],[7606,6,7589,8],[7606,10,7589,12],[7606,11,7589,13,"type"],[7606,15,7589,17],[7606,18,7589,20],[7606,26,7589,28],[7606,27,7589,29],[7607,6,7590,8],[7607,10,7590,12],[7607,11,7590,13,"listenerUnsubscribes"],[7607,31,7590,33],[7607,34,7590,36],[7607,38,7590,40,"Map"],[7607,41,7590,43],[7607,42,7590,44],[7607,43,7590,45],[7608,4,7591,4],[7609,4,7592,4],[7610,4,7593,4,"_getFinalTarget"],[7610,19,7593,19,"_getFinalTarget"],[7610,20,7593,20,"originalUrl"],[7610,31,7593,31],[7610,33,7593,33],[7611,6,7594,8],[7611,10,7594,12],[7611,17,7594,19,"window"],[7611,23,7594,25],[7611,28,7594,30,"undefined"],[7611,37,7594,39],[7611,39,7594,41],[7612,8,7595,12],[7612,15,7595,19,"originalUrl"],[7612,26,7595,30],[7613,6,7596,8],[7614,6,7597,8],[7614,12,7597,14,"url"],[7614,15,7597,17],[7614,18,7597,20],[7614,22,7597,24,"URL"],[7614,25,7597,27],[7614,26,7597,28],[7614,29,7597,31,"window"],[7614,35,7597,37],[7614,36,7597,38,"location"],[7614,44,7597,46],[7614,45,7597,47,"origin"],[7614,51,7597,53],[7614,65,7597,67],[7614,66,7597,68],[7615,6,7598,8,"url"],[7615,9,7598,11],[7615,10,7598,12,"searchParams"],[7615,22,7598,24],[7615,23,7598,25,"set"],[7615,26,7598,28],[7615,27,7598,29],[7615,40,7598,42],[7615,42,7598,44,"originalUrl"],[7615,53,7598,55],[7615,54,7598,56],[7616,6,7599,8],[7616,13,7599,15,"url"],[7616,16,7599,18],[7617,4,7600,4],[7618,4,7601,4],[7619,4,7602,4],[7620,4,7603,4],[7621,4,7604,4],[7621,10,7604,10,"_isAvailable"],[7621,22,7604,22,"_isAvailable"],[7621,23,7604,22],[7621,25,7604,25],[7622,6,7605,8],[7622,10,7605,12],[7622,17,7605,19,"isSecureContext"],[7622,32,7605,34],[7622,37,7605,39],[7622,46,7605,48],[7622,50,7605,52],[7622,51,7605,53,"isSecureContext"],[7622,66,7605,68],[7622,68,7605,70],[7623,8,7606,12],[7623,15,7606,19],[7623,20,7606,24],[7624,6,7607,8],[7625,6,7608,8],[7625,10,7608,12],[7625,17,7608,19,"navigator"],[7625,26,7608,28],[7625,31,7608,33],[7625,42,7608,44],[7625,46,7608,48],[7625,53,7608,55,"document"],[7625,61,7608,63],[7625,66,7608,68],[7625,77,7608,79],[7625,79,7608,81],[7626,8,7609,12],[7626,15,7609,19],[7626,20,7609,24],[7627,6,7610,8],[7628,6,7611,8],[7628,13,7611,15,"navigator"],[7628,22,7611,24],[7628,23,7611,25,"cookieEnabled"],[7628,36,7611,38],[7628,40,7611,42],[7628,44,7611,46],[7629,4,7612,4],[7630,4,7613,4],[7631,4,7614,4],[7631,10,7614,10,"_set"],[7631,14,7614,14,"_set"],[7631,15,7614,15,"_key"],[7631,19,7614,19],[7631,21,7614,21,"_value"],[7631,27,7614,27],[7631,29,7614,29],[7632,6,7615,8],[7633,4,7616,4],[7634,4,7617,4],[7635,4,7618,4],[7635,10,7618,10,"_get"],[7635,14,7618,14,"_get"],[7635,15,7618,15,"key"],[7635,18,7618,18],[7635,20,7618,20],[7636,6,7619,8],[7636,10,7619,12],[7636,11,7619,13],[7636,15,7619,17],[7636,16,7619,18,"_isAvailable"],[7636,28,7619,30],[7636,29,7619,31],[7636,30,7619,32],[7636,32,7619,34],[7637,8,7620,12],[7637,15,7620,19],[7637,19,7620,23],[7638,6,7621,8],[7639,6,7622,8],[7639,12,7622,14,"name"],[7639,16,7622,18],[7639,19,7622,21,"getCookieName"],[7639,32,7622,34],[7639,33,7622,35,"key"],[7639,36,7622,38],[7639,37,7622,39],[7640,6,7623,8],[7640,10,7623,12,"window"],[7640,16,7623,18],[7640,17,7623,19,"cookieStore"],[7640,28,7623,30],[7640,30,7623,32],[7641,8,7624,12],[7641,14,7624,18,"cookie"],[7641,20,7624,24],[7641,23,7624,27],[7641,29,7624,33,"window"],[7641,35,7624,39],[7641,36,7624,40,"cookieStore"],[7641,47,7624,51],[7641,48,7624,52,"get"],[7641,51,7624,55],[7641,52,7624,56,"name"],[7641,56,7624,60],[7641,57,7624,61],[7642,8,7625,12],[7642,15,7625,19,"cookie"],[7642,21,7625,25],[7642,23,7625,27,"value"],[7642,28,7625,32],[7643,6,7626,8],[7644,6,7627,8],[7644,13,7627,15,"getDocumentCookie"],[7644,30,7627,32],[7644,31,7627,33,"name"],[7644,35,7627,37],[7644,36,7627,38],[7645,4,7628,4],[7646,4,7629,4],[7647,4,7630,4],[7647,10,7630,10,"_remove"],[7647,17,7630,17,"_remove"],[7647,18,7630,18,"key"],[7647,21,7630,21],[7647,23,7630,23],[7648,6,7631,8],[7648,10,7631,12],[7648,11,7631,13],[7648,15,7631,17],[7648,16,7631,18,"_isAvailable"],[7648,28,7631,30],[7648,29,7631,31],[7648,30,7631,32],[7648,32,7631,34],[7649,8,7632,12],[7650,6,7633,8],[7651,6,7634,8],[7652,6,7635,8],[7653,6,7636,8],[7654,6,7637,8],[7654,12,7637,14,"existingValue"],[7654,25,7637,27],[7654,28,7637,30],[7654,34,7637,36],[7654,38,7637,40],[7654,39,7637,41,"_get"],[7654,43,7637,45],[7654,44,7637,46,"key"],[7654,47,7637,49],[7654,48,7637,50],[7655,6,7638,8],[7655,10,7638,12],[7655,11,7638,13,"existingValue"],[7655,24,7638,26],[7655,26,7638,28],[7656,8,7639,12],[7657,6,7640,8],[7658,6,7641,8],[7658,12,7641,14,"name"],[7658,16,7641,18],[7658,19,7641,21,"getCookieName"],[7658,32,7641,34],[7658,33,7641,35,"key"],[7658,36,7641,38],[7658,37,7641,39],[7659,6,7642,8,"document"],[7659,14,7642,16],[7659,15,7642,17,"cookie"],[7659,21,7642,23],[7659,24,7642,26],[7659,27,7642,29,"name"],[7659,31,7642,33],[7659,107,7642,109],[7660,6,7643,8],[7660,12,7643,14,"fetch"],[7660,17,7643,19],[7660,18,7643,20],[7660,32,7643,34],[7660,34,7643,36],[7661,8,7643,38,"method"],[7661,14,7643,44],[7661,16,7643,46],[7662,6,7643,55],[7662,7,7643,56],[7662,8,7643,57],[7662,9,7643,58,"catch"],[7662,14,7643,63],[7662,15,7643,64],[7662,21,7643,70,"undefined"],[7662,30,7643,79],[7662,31,7643,80],[7663,4,7644,4],[7664,4,7645,4],[7665,4,7646,4,"_addListener"],[7665,16,7646,16,"_addListener"],[7665,17,7646,17,"key"],[7665,20,7646,20],[7665,22,7646,22,"listener"],[7665,30,7646,30],[7665,32,7646,32],[7666,6,7647,8],[7666,10,7647,12],[7666,11,7647,13],[7666,15,7647,17],[7666,16,7647,18,"_isAvailable"],[7666,28,7647,30],[7666,29,7647,31],[7666,30,7647,32],[7666,32,7647,34],[7667,8,7648,12],[7668,6,7649,8],[7669,6,7650,8],[7669,12,7650,14,"name"],[7669,16,7650,18],[7669,19,7650,21,"getCookieName"],[7669,32,7650,34],[7669,33,7650,35,"key"],[7669,36,7650,38],[7669,37,7650,39],[7670,6,7651,8],[7670,10,7651,12,"window"],[7670,16,7651,18],[7670,17,7651,19,"cookieStore"],[7670,28,7651,30],[7670,30,7651,32],[7671,8,7652,12],[7671,14,7652,18,"cb"],[7671,16,7652,20],[7671,19,7652,25,"event"],[7671,24,7652,30],[7671,28,7652,35],[7672,10,7653,16],[7672,16,7653,22,"changedCookie"],[7672,29,7653,35],[7672,32,7653,38,"event"],[7672,37,7653,43],[7672,38,7653,44,"changed"],[7672,45,7653,51],[7672,46,7653,52,"find"],[7672,50,7653,56],[7672,51,7653,57,"change"],[7672,57,7653,63],[7672,61,7653,67,"change"],[7672,67,7653,73],[7672,68,7653,74,"name"],[7672,72,7653,78],[7672,77,7653,83,"name"],[7672,81,7653,87],[7672,82,7653,88],[7673,10,7654,16],[7673,14,7654,20,"changedCookie"],[7673,27,7654,33],[7673,29,7654,35],[7674,12,7655,20,"listener"],[7674,20,7655,28],[7674,21,7655,29,"changedCookie"],[7674,34,7655,42],[7674,35,7655,43,"value"],[7674,40,7655,48],[7674,41,7655,49],[7675,10,7656,16],[7676,10,7657,16],[7676,16,7657,22,"deletedCookie"],[7676,29,7657,35],[7676,32,7657,38,"event"],[7676,37,7657,43],[7676,38,7657,44,"deleted"],[7676,45,7657,51],[7676,46,7657,52,"find"],[7676,50,7657,56],[7676,51,7657,57,"change"],[7676,57,7657,63],[7676,61,7657,67,"change"],[7676,67,7657,73],[7676,68,7657,74,"name"],[7676,72,7657,78],[7676,77,7657,83,"name"],[7676,81,7657,87],[7676,82,7657,88],[7677,10,7658,16],[7677,14,7658,20,"deletedCookie"],[7677,27,7658,33],[7677,29,7658,35],[7678,12,7659,20,"listener"],[7678,20,7659,28],[7678,21,7659,29],[7678,25,7659,33],[7678,26,7659,34],[7679,10,7660,16],[7680,8,7661,12],[7680,9,7661,14],[7681,8,7662,12],[7681,14,7662,18,"unsubscribe"],[7681,25,7662,29],[7681,28,7662,32,"unsubscribe"],[7681,29,7662,32],[7681,34,7662,38,"window"],[7681,40,7662,44],[7681,41,7662,45,"cookieStore"],[7681,52,7662,56],[7681,53,7662,57,"removeEventListener"],[7681,72,7662,76],[7681,73,7662,77],[7681,81,7662,85],[7681,83,7662,87,"cb"],[7681,85,7662,89],[7681,86,7662,90],[7682,8,7663,12],[7682,12,7663,16],[7682,13,7663,17,"listenerUnsubscribes"],[7682,33,7663,37],[7682,34,7663,38,"set"],[7682,37,7663,41],[7682,38,7663,42,"listener"],[7682,46,7663,50],[7682,48,7663,52,"unsubscribe"],[7682,59,7663,63],[7682,60,7663,64],[7683,8,7664,12],[7683,15,7664,19,"window"],[7683,21,7664,25],[7683,22,7664,26,"cookieStore"],[7683,33,7664,37],[7683,34,7664,38,"addEventListener"],[7683,50,7664,54],[7683,51,7664,55],[7683,59,7664,63],[7683,61,7664,65,"cb"],[7683,63,7664,67],[7683,64,7664,68],[7684,6,7665,8],[7685,6,7666,8],[7685,10,7666,12,"lastValue"],[7685,19,7666,21],[7685,22,7666,24,"getDocumentCookie"],[7685,39,7666,41],[7685,40,7666,42,"name"],[7685,44,7666,46],[7685,45,7666,47],[7686,6,7667,8],[7686,12,7667,14,"interval"],[7686,20,7667,22],[7686,23,7667,25,"setInterval"],[7686,34,7667,36],[7686,35,7667,37],[7686,41,7667,43],[7687,8,7668,12],[7687,14,7668,18,"currentValue"],[7687,26,7668,30],[7687,29,7668,33,"getDocumentCookie"],[7687,46,7668,50],[7687,47,7668,51,"name"],[7687,51,7668,55],[7687,52,7668,56],[7688,8,7669,12],[7688,12,7669,16,"currentValue"],[7688,24,7669,28],[7688,29,7669,33,"lastValue"],[7688,38,7669,42],[7688,40,7669,44],[7689,10,7670,16,"listener"],[7689,18,7670,24],[7689,19,7670,25,"currentValue"],[7689,31,7670,37],[7689,32,7670,38],[7690,10,7671,16,"lastValue"],[7690,19,7671,25],[7690,22,7671,28,"currentValue"],[7690,34,7671,40],[7691,8,7672,12],[7692,6,7673,8],[7692,7,7673,9],[7692,9,7673,11,"POLLING_INTERVAL_MS"],[7692,28,7673,30],[7692,29,7673,31],[7693,6,7674,8],[7693,12,7674,14,"unsubscribe"],[7693,23,7674,25],[7693,26,7674,28,"unsubscribe"],[7693,27,7674,28],[7693,32,7674,34,"clearInterval"],[7693,45,7674,47],[7693,46,7674,48,"interval"],[7693,54,7674,56],[7693,55,7674,57],[7694,6,7675,8],[7694,10,7675,12],[7694,11,7675,13,"listenerUnsubscribes"],[7694,31,7675,33],[7694,32,7675,34,"set"],[7694,35,7675,37],[7694,36,7675,38,"listener"],[7694,44,7675,46],[7694,46,7675,48,"unsubscribe"],[7694,57,7675,59],[7694,58,7675,60],[7695,4,7676,4],[7696,4,7677,4,"_removeListener"],[7696,19,7677,19,"_removeListener"],[7696,20,7677,20,"_key"],[7696,24,7677,24],[7696,26,7677,26,"listener"],[7696,34,7677,34],[7696,36,7677,36],[7697,6,7678,8],[7697,12,7678,14,"unsubscribe"],[7697,23,7678,25],[7697,26,7678,28],[7697,30,7678,32],[7697,31,7678,33,"listenerUnsubscribes"],[7697,51,7678,53],[7697,52,7678,54,"get"],[7697,55,7678,57],[7697,56,7678,58,"listener"],[7697,64,7678,66],[7697,65,7678,67],[7698,6,7679,8],[7698,10,7679,12],[7698,11,7679,13,"unsubscribe"],[7698,22,7679,24],[7698,24,7679,26],[7699,8,7680,12],[7700,6,7681,8],[7701,6,7682,8,"unsubscribe"],[7701,17,7682,19],[7701,18,7682,20],[7701,19,7682,21],[7702,6,7683,8],[7702,10,7683,12],[7702,11,7683,13,"listenerUnsubscribes"],[7702,31,7683,33],[7702,32,7683,34,"delete"],[7702,38,7683,40],[7702,39,7683,41,"listener"],[7702,47,7683,49],[7702,48,7683,50],[7703,4,7684,4],[7704,2,7685,0],[7705,2,7686,0,"CookiePersistence"],[7705,19,7686,17],[7705,20,7686,18,"type"],[7705,24,7686,22],[7705,27,7686,25],[7705,35,7686,33],[7706,2,7687,0],[7707,0,7688,0],[7708,0,7689,0],[7709,0,7690,0],[7710,0,7691,0],[7711,0,7692,0],[7712,0,7693,0],[7713,0,7694,0],[7714,0,7695,0],[7715,2,7696,0],[7715,8,7696,6,"browserCookiePersistence"],[7715,32,7696,30],[7715,35,7696,30,"exports"],[7715,42,7696,30],[7715,43,7696,30,"a"],[7715,44,7696,30],[7715,47,7696,33,"CookiePersistence"],[7715,64,7696,50],[7717,2,7698,0],[7718,0,7699,0],[7719,0,7700,0],[7720,0,7701,0],[7721,0,7702,0],[7722,0,7703,0],[7723,0,7704,0],[7724,0,7705,0],[7725,0,7706,0],[7726,0,7707,0],[7727,0,7708,0],[7728,0,7709,0],[7729,0,7710,0],[7730,0,7711,0],[7731,0,7712,0],[7732,0,7713,0],[7733,2,7714,0],[7733,8,7714,6,"BrowserSessionPersistence"],[7733,33,7714,31],[7733,42,7714,40,"BrowserPersistenceClass"],[7733,65,7714,63],[7733,66,7714,64],[7734,4,7715,4,"constructor"],[7734,15,7715,15,"constructor"],[7734,16,7715,15],[7734,18,7715,18],[7735,6,7716,8],[7735,11,7716,13],[7735,12,7716,14],[7735,18,7716,20,"window"],[7735,24,7716,26],[7735,25,7716,27,"sessionStorage"],[7735,39,7716,41],[7735,41,7716,43],[7735,50,7716,52],[7735,51,7716,53],[7735,80,7716,82],[7735,81,7716,83],[7736,4,7717,4],[7737,4,7718,4,"_addListener"],[7737,16,7718,16,"_addListener"],[7737,17,7718,17,"_key"],[7737,21,7718,21],[7737,23,7718,23,"_listener"],[7737,32,7718,32],[7737,34,7718,34],[7738,6,7719,8],[7739,6,7720,8],[7740,4,7721,4],[7741,4,7722,4,"_removeListener"],[7741,19,7722,19,"_removeListener"],[7741,20,7722,20,"_key"],[7741,24,7722,24],[7741,26,7722,26,"_listener"],[7741,35,7722,35],[7741,37,7722,37],[7742,6,7723,8],[7743,6,7724,8],[7744,4,7725,4],[7745,2,7726,0],[7746,2,7727,0,"BrowserSessionPersistence"],[7746,27,7727,25],[7746,28,7727,26,"type"],[7746,32,7727,30],[7746,35,7727,33],[7746,44,7727,42],[7747,2,7728,0],[7748,0,7729,0],[7749,0,7730,0],[7750,0,7731,0],[7751,0,7732,0],[7752,0,7733,0],[7753,2,7734,0],[7753,8,7734,6,"browserSessionPersistence"],[7753,33,7734,31],[7753,36,7734,31,"exports"],[7753,43,7734,31],[7753,44,7734,31,"c"],[7753,45,7734,31],[7753,48,7734,34,"BrowserSessionPersistence"],[7753,73,7734,59],[7755,2,7736,0],[7756,0,7737,0],[7757,0,7738,0],[7758,0,7739,0],[7759,0,7740,0],[7760,0,7741,0],[7761,0,7742,0],[7762,0,7743,0],[7763,0,7744,0],[7764,0,7745,0],[7765,0,7746,0],[7766,0,7747,0],[7767,0,7748,0],[7768,0,7749,0],[7769,0,7750,0],[7770,0,7751,0],[7771,2,7752,0],[7772,0,7753,0],[7773,0,7754,0],[7774,0,7755,0],[7775,0,7756,0],[7776,2,7757,0],[7776,11,7757,9,"_allSettled"],[7776,22,7757,20,"_allSettled"],[7776,23,7757,21,"promises"],[7776,31,7757,29],[7776,33,7757,31],[7777,4,7758,4],[7777,11,7758,11,"Promise"],[7777,18,7758,18],[7777,19,7758,19,"all"],[7777,22,7758,22],[7777,23,7758,23,"promises"],[7777,31,7758,31],[7777,32,7758,32,"map"],[7777,35,7758,35],[7777,36,7758,36],[7777,42,7758,43,"promise"],[7777,49,7758,50],[7777,53,7758,55],[7778,6,7759,8],[7778,10,7759,12],[7779,8,7760,12],[7779,14,7760,18,"value"],[7779,19,7760,23],[7779,22,7760,26],[7779,28,7760,32,"promise"],[7779,35,7760,39],[7780,8,7761,12],[7780,15,7761,19],[7781,10,7762,16,"fulfilled"],[7781,19,7762,25],[7781,21,7762,27],[7781,25,7762,31],[7782,10,7763,16,"value"],[7783,8,7764,12],[7783,9,7764,13],[7784,6,7765,8],[7784,7,7765,9],[7784,8,7766,8],[7784,15,7766,15,"reason"],[7784,21,7766,21],[7784,23,7766,23],[7785,8,7767,12],[7785,15,7767,19],[7786,10,7768,16,"fulfilled"],[7786,19,7768,25],[7786,21,7768,27],[7786,26,7768,32],[7787,10,7769,16,"reason"],[7788,8,7770,12],[7788,9,7770,13],[7789,6,7771,8],[7790,4,7772,4],[7790,5,7772,5],[7790,6,7772,6],[7790,7,7772,7],[7791,2,7773,0],[7793,2,7775,0],[7794,0,7776,0],[7795,0,7777,0],[7796,0,7778,0],[7797,0,7779,0],[7798,0,7780,0],[7799,0,7781,0],[7800,0,7782,0],[7801,0,7783,0],[7802,0,7784,0],[7803,0,7785,0],[7804,0,7786,0],[7805,0,7787,0],[7806,0,7788,0],[7807,0,7789,0],[7808,0,7790,0],[7809,2,7791,0],[7810,0,7792,0],[7811,0,7793,0],[7812,0,7794,0],[7813,2,7795,0],[7813,8,7795,6,"Receiver"],[7813,16,7795,14],[7813,17,7795,15],[7814,4,7796,4,"constructor"],[7814,15,7796,15,"constructor"],[7814,16,7796,16,"eventTarget"],[7814,27,7796,27],[7814,29,7796,29],[7815,6,7797,8],[7815,10,7797,12],[7815,11,7797,13,"eventTarget"],[7815,22,7797,24],[7815,25,7797,27,"eventTarget"],[7815,36,7797,38],[7816,6,7798,8],[7816,10,7798,12],[7816,11,7798,13,"handlersMap"],[7816,22,7798,24],[7816,25,7798,27],[7816,26,7798,28],[7816,27,7798,29],[7817,6,7799,8],[7817,10,7799,12],[7817,11,7799,13,"boundEventHandler"],[7817,28,7799,30],[7817,31,7799,33],[7817,35,7799,37],[7817,36,7799,38,"handleEvent"],[7817,47,7799,49],[7817,48,7799,50,"bind"],[7817,52,7799,54],[7817,53,7799,55],[7817,57,7799,59],[7817,58,7799,60],[7818,4,7800,4],[7819,4,7801,4],[7820,0,7802,0],[7821,0,7803,0],[7822,0,7804,0],[7823,0,7805,0],[7824,0,7806,0],[7825,4,7807,4],[7825,11,7807,11,"_getInstance"],[7825,23,7807,23,"_getInstance"],[7825,24,7807,24,"eventTarget"],[7825,35,7807,35],[7825,37,7807,37],[7826,6,7808,8],[7827,6,7809,8],[7828,6,7810,8],[7829,6,7811,8],[7829,12,7811,14,"existingInstance"],[7829,28,7811,30],[7829,31,7811,33],[7829,35,7811,37],[7829,36,7811,38,"receivers"],[7829,45,7811,47],[7829,46,7811,48,"find"],[7829,50,7811,52],[7829,51,7811,53,"receiver"],[7829,59,7811,61],[7829,63,7811,65,"receiver"],[7829,71,7811,73],[7829,72,7811,74,"isListeningto"],[7829,85,7811,87],[7829,86,7811,88,"eventTarget"],[7829,97,7811,99],[7829,98,7811,100],[7829,99,7811,101],[7830,6,7812,8],[7830,10,7812,12,"existingInstance"],[7830,26,7812,28],[7830,28,7812,30],[7831,8,7813,12],[7831,15,7813,19,"existingInstance"],[7831,31,7813,35],[7832,6,7814,8],[7833,6,7815,8],[7833,12,7815,14,"newInstance"],[7833,23,7815,25],[7833,26,7815,28],[7833,30,7815,32,"Receiver"],[7833,38,7815,40],[7833,39,7815,41,"eventTarget"],[7833,50,7815,52],[7833,51,7815,53],[7834,6,7816,8],[7834,10,7816,12],[7834,11,7816,13,"receivers"],[7834,20,7816,22],[7834,21,7816,23,"push"],[7834,25,7816,27],[7834,26,7816,28,"newInstance"],[7834,37,7816,39],[7834,38,7816,40],[7835,6,7817,8],[7835,13,7817,15,"newInstance"],[7835,24,7817,26],[7836,4,7818,4],[7837,4,7819,4,"isListeningto"],[7837,17,7819,17,"isListeningto"],[7837,18,7819,18,"eventTarget"],[7837,29,7819,29],[7837,31,7819,31],[7838,6,7820,8],[7838,13,7820,15],[7838,17,7820,19],[7838,18,7820,20,"eventTarget"],[7838,29,7820,31],[7838,34,7820,36,"eventTarget"],[7838,45,7820,47],[7839,4,7821,4],[7840,4,7822,4],[7841,0,7823,0],[7842,0,7824,0],[7843,0,7825,0],[7844,0,7826,0],[7845,0,7827,0],[7846,0,7828,0],[7847,0,7829,0],[7848,0,7830,0],[7849,0,7831,0],[7850,4,7832,4],[7850,10,7832,10,"handleEvent"],[7850,21,7832,21,"handleEvent"],[7850,22,7832,22,"event"],[7850,27,7832,27],[7850,29,7832,29],[7851,6,7833,8],[7851,12,7833,14,"messageEvent"],[7851,24,7833,26],[7851,27,7833,29,"event"],[7851,32,7833,34],[7852,6,7834,8],[7852,12,7834,14],[7853,8,7834,16,"eventId"],[7853,15,7834,23],[7854,8,7834,25,"eventType"],[7854,17,7834,34],[7855,8,7834,36,"data"],[7856,6,7834,41],[7856,7,7834,42],[7856,10,7834,45,"messageEvent"],[7856,22,7834,57],[7856,23,7834,58,"data"],[7856,27,7834,62],[7857,6,7835,8],[7857,12,7835,14,"handlers"],[7857,20,7835,22],[7857,23,7835,25],[7857,27,7835,29],[7857,28,7835,30,"handlersMap"],[7857,39,7835,41],[7857,40,7835,42,"eventType"],[7857,49,7835,51],[7857,50,7835,52],[7858,6,7836,8],[7858,10,7836,12],[7858,11,7836,13,"handlers"],[7858,19,7836,21],[7858,21,7836,23,"size"],[7858,25,7836,27],[7858,27,7836,29],[7859,8,7837,12],[7860,6,7838,8],[7861,6,7839,8,"messageEvent"],[7861,18,7839,20],[7861,19,7839,21,"ports"],[7861,24,7839,26],[7861,25,7839,27],[7861,26,7839,28],[7861,27,7839,29],[7861,28,7839,30,"postMessage"],[7861,39,7839,41],[7861,40,7839,42],[7862,8,7840,12,"status"],[7862,14,7840,18],[7862,16,7840,20],[7862,21,7840,25],[7862,22,7840,26],[7863,8,7841,12,"eventId"],[7863,15,7841,19],[7864,8,7842,12,"eventType"],[7865,6,7843,8],[7865,7,7843,9],[7865,8,7843,10],[7866,6,7844,8],[7866,12,7844,14,"promises"],[7866,20,7844,22],[7866,23,7844,25,"Array"],[7866,28,7844,30],[7866,29,7844,31,"from"],[7866,33,7844,35],[7866,34,7844,36,"handlers"],[7866,42,7844,44],[7866,43,7844,45],[7866,44,7844,46,"map"],[7866,47,7844,49],[7866,48,7844,50],[7866,54,7844,57,"handler"],[7866,61,7844,64],[7866,65,7844,69,"handler"],[7866,72,7844,76],[7866,73,7844,77,"messageEvent"],[7866,85,7844,89],[7866,86,7844,90,"origin"],[7866,92,7844,96],[7866,94,7844,98,"data"],[7866,98,7844,102],[7866,99,7844,103],[7866,100,7844,104],[7867,6,7845,8],[7867,12,7845,14,"response"],[7867,20,7845,22],[7867,23,7845,25],[7867,29,7845,31,"_allSettled"],[7867,40,7845,42],[7867,41,7845,43,"promises"],[7867,49,7845,51],[7867,50,7845,52],[7868,6,7846,8,"messageEvent"],[7868,18,7846,20],[7868,19,7846,21,"ports"],[7868,24,7846,26],[7868,25,7846,27],[7868,26,7846,28],[7868,27,7846,29],[7868,28,7846,30,"postMessage"],[7868,39,7846,41],[7868,40,7846,42],[7869,8,7847,12,"status"],[7869,14,7847,18],[7869,16,7847,20],[7869,22,7847,26],[7869,23,7847,27],[7870,8,7848,12,"eventId"],[7870,15,7848,19],[7871,8,7849,12,"eventType"],[7871,17,7849,21],[7872,8,7850,12,"response"],[7873,6,7851,8],[7873,7,7851,9],[7873,8,7851,10],[7874,4,7852,4],[7875,4,7853,4],[7876,0,7854,0],[7877,0,7855,0],[7878,0,7856,0],[7879,0,7857,0],[7880,0,7858,0],[7881,0,7859,0],[7882,4,7860,4,"_subscribe"],[7882,14,7860,14,"_subscribe"],[7882,15,7860,15,"eventType"],[7882,24,7860,24],[7882,26,7860,26,"eventHandler"],[7882,38,7860,38],[7882,40,7860,40],[7883,6,7861,8],[7883,10,7861,12,"Object"],[7883,16,7861,18],[7883,17,7861,19,"keys"],[7883,21,7861,23],[7883,22,7861,24],[7883,26,7861,28],[7883,27,7861,29,"handlersMap"],[7883,38,7861,40],[7883,39,7861,41],[7883,40,7861,42,"length"],[7883,46,7861,48],[7883,51,7861,53],[7883,52,7861,54],[7883,54,7861,56],[7884,8,7862,12],[7884,12,7862,16],[7884,13,7862,17,"eventTarget"],[7884,24,7862,28],[7884,25,7862,29,"addEventListener"],[7884,41,7862,45],[7884,42,7862,46],[7884,51,7862,55],[7884,53,7862,57],[7884,57,7862,61],[7884,58,7862,62,"boundEventHandler"],[7884,75,7862,79],[7884,76,7862,80],[7885,6,7863,8],[7886,6,7864,8],[7886,10,7864,12],[7886,11,7864,13],[7886,15,7864,17],[7886,16,7864,18,"handlersMap"],[7886,27,7864,29],[7886,28,7864,30,"eventType"],[7886,37,7864,39],[7886,38,7864,40],[7886,40,7864,42],[7887,8,7865,12],[7887,12,7865,16],[7887,13,7865,17,"handlersMap"],[7887,24,7865,28],[7887,25,7865,29,"eventType"],[7887,34,7865,38],[7887,35,7865,39],[7887,38,7865,42],[7887,42,7865,46,"Set"],[7887,45,7865,49],[7887,46,7865,50],[7887,47,7865,51],[7888,6,7866,8],[7889,6,7867,8],[7889,10,7867,12],[7889,11,7867,13,"handlersMap"],[7889,22,7867,24],[7889,23,7867,25,"eventType"],[7889,32,7867,34],[7889,33,7867,35],[7889,34,7867,36,"add"],[7889,37,7867,39],[7889,38,7867,40,"eventHandler"],[7889,50,7867,52],[7889,51,7867,53],[7890,4,7868,4],[7891,4,7869,4],[7892,0,7870,0],[7893,0,7871,0],[7894,0,7872,0],[7895,0,7873,0],[7896,0,7874,0],[7897,0,7875,0],[7898,4,7876,4,"_unsubscribe"],[7898,16,7876,16,"_unsubscribe"],[7898,17,7876,17,"eventType"],[7898,26,7876,26],[7898,28,7876,28,"eventHandler"],[7898,40,7876,40],[7898,42,7876,42],[7899,6,7877,8],[7899,10,7877,12],[7899,14,7877,16],[7899,15,7877,17,"handlersMap"],[7899,26,7877,28],[7899,27,7877,29,"eventType"],[7899,36,7877,38],[7899,37,7877,39],[7899,41,7877,43,"eventHandler"],[7899,53,7877,55],[7899,55,7877,57],[7900,8,7878,12],[7900,12,7878,16],[7900,13,7878,17,"handlersMap"],[7900,24,7878,28],[7900,25,7878,29,"eventType"],[7900,34,7878,38],[7900,35,7878,39],[7900,36,7878,40,"delete"],[7900,42,7878,46],[7900,43,7878,47,"eventHandler"],[7900,55,7878,59],[7900,56,7878,60],[7901,6,7879,8],[7902,6,7880,8],[7902,10,7880,12],[7902,11,7880,13,"eventHandler"],[7902,23,7880,25],[7902,27,7880,29],[7902,31,7880,33],[7902,32,7880,34,"handlersMap"],[7902,43,7880,45],[7902,44,7880,46,"eventType"],[7902,53,7880,55],[7902,54,7880,56],[7902,55,7880,57,"size"],[7902,59,7880,61],[7902,64,7880,66],[7902,65,7880,67],[7902,67,7880,69],[7903,8,7881,12],[7903,15,7881,19],[7903,19,7881,23],[7903,20,7881,24,"handlersMap"],[7903,31,7881,35],[7903,32,7881,36,"eventType"],[7903,41,7881,45],[7903,42,7881,46],[7904,6,7882,8],[7905,6,7883,8],[7905,10,7883,12,"Object"],[7905,16,7883,18],[7905,17,7883,19,"keys"],[7905,21,7883,23],[7905,22,7883,24],[7905,26,7883,28],[7905,27,7883,29,"handlersMap"],[7905,38,7883,40],[7905,39,7883,41],[7905,40,7883,42,"length"],[7905,46,7883,48],[7905,51,7883,53],[7905,52,7883,54],[7905,54,7883,56],[7906,8,7884,12],[7906,12,7884,16],[7906,13,7884,17,"eventTarget"],[7906,24,7884,28],[7906,25,7884,29,"removeEventListener"],[7906,44,7884,48],[7906,45,7884,49],[7906,54,7884,58],[7906,56,7884,60],[7906,60,7884,64],[7906,61,7884,65,"boundEventHandler"],[7906,78,7884,82],[7906,79,7884,83],[7907,6,7885,8],[7908,4,7886,4],[7909,2,7887,0],[7910,2,7888,0,"Receiver"],[7910,10,7888,8],[7910,11,7888,9,"receivers"],[7910,20,7888,18],[7910,23,7888,21],[7910,25,7888,23],[7912,2,7890,0],[7913,0,7891,0],[7914,0,7892,0],[7915,0,7893,0],[7916,0,7894,0],[7917,0,7895,0],[7918,0,7896,0],[7919,0,7897,0],[7920,0,7898,0],[7921,0,7899,0],[7922,0,7900,0],[7923,0,7901,0],[7924,0,7902,0],[7925,0,7903,0],[7926,0,7904,0],[7927,0,7905,0],[7928,2,7906,0],[7928,11,7906,9,"_generateEventId"],[7928,27,7906,25,"_generateEventId"],[7928,28,7906,26,"prefix"],[7928,34,7906,32],[7928,37,7906,35],[7928,39,7906,37],[7928,41,7906,39,"digits"],[7928,47,7906,45],[7928,50,7906,48],[7928,52,7906,50],[7928,54,7906,52],[7929,4,7907,4],[7929,8,7907,8,"random"],[7929,14,7907,14],[7929,17,7907,17],[7929,19,7907,19],[7930,4,7908,4],[7930,9,7908,9],[7930,13,7908,13,"i"],[7930,14,7908,14],[7930,17,7908,17],[7930,18,7908,18],[7930,20,7908,20,"i"],[7930,21,7908,21],[7930,24,7908,24,"digits"],[7930,30,7908,30],[7930,32,7908,32,"i"],[7930,33,7908,33],[7930,35,7908,35],[7930,37,7908,37],[7931,6,7909,8,"random"],[7931,12,7909,14],[7931,16,7909,18,"Math"],[7931,20,7909,22],[7931,21,7909,23,"floor"],[7931,26,7909,28],[7931,27,7909,29,"Math"],[7931,31,7909,33],[7931,32,7909,34,"random"],[7931,38,7909,40],[7931,39,7909,41],[7931,40,7909,42],[7931,43,7909,45],[7931,45,7909,47],[7931,46,7909,48],[7932,4,7910,4],[7933,4,7911,4],[7933,11,7911,11,"prefix"],[7933,17,7911,17],[7933,20,7911,20,"random"],[7933,26,7911,26],[7934,2,7912,0],[7936,2,7914,0],[7937,0,7915,0],[7938,0,7916,0],[7939,0,7917,0],[7940,0,7918,0],[7941,0,7919,0],[7942,0,7920,0],[7943,0,7921,0],[7944,0,7922,0],[7945,0,7923,0],[7946,0,7924,0],[7947,0,7925,0],[7948,0,7926,0],[7949,0,7927,0],[7950,0,7928,0],[7951,0,7929,0],[7952,2,7930,0],[7953,0,7931,0],[7954,0,7932,0],[7955,0,7933,0],[7956,2,7934,0],[7956,8,7934,6,"Sender"],[7956,14,7934,12],[7956,15,7934,13],[7957,4,7935,4,"constructor"],[7957,15,7935,15,"constructor"],[7957,16,7935,16,"target"],[7957,22,7935,22],[7957,24,7935,24],[7958,6,7936,8],[7958,10,7936,12],[7958,11,7936,13,"target"],[7958,17,7936,19],[7958,20,7936,22,"target"],[7958,26,7936,28],[7959,6,7937,8],[7959,10,7937,12],[7959,11,7937,13,"handlers"],[7959,19,7937,21],[7959,22,7937,24],[7959,26,7937,28,"Set"],[7959,29,7937,31],[7959,30,7937,32],[7959,31,7937,33],[7960,4,7938,4],[7961,4,7939,4],[7962,0,7940,0],[7963,0,7941,0],[7964,0,7942,0],[7965,0,7943,0],[7966,4,7944,4,"removeMessageHandler"],[7966,24,7944,24,"removeMessageHandler"],[7966,25,7944,25,"handler"],[7966,32,7944,32],[7966,34,7944,34],[7967,6,7945,8],[7967,10,7945,12,"handler"],[7967,17,7945,19],[7967,18,7945,20,"messageChannel"],[7967,32,7945,34],[7967,34,7945,36],[7968,8,7946,12,"handler"],[7968,15,7946,19],[7968,16,7946,20,"messageChannel"],[7968,30,7946,34],[7968,31,7946,35,"port1"],[7968,36,7946,40],[7968,37,7946,41,"removeEventListener"],[7968,56,7946,60],[7968,57,7946,61],[7968,66,7946,70],[7968,68,7946,72,"handler"],[7968,75,7946,79],[7968,76,7946,80,"onMessage"],[7968,85,7946,89],[7968,86,7946,90],[7969,8,7947,12,"handler"],[7969,15,7947,19],[7969,16,7947,20,"messageChannel"],[7969,30,7947,34],[7969,31,7947,35,"port1"],[7969,36,7947,40],[7969,37,7947,41,"close"],[7969,42,7947,46],[7969,43,7947,47],[7969,44,7947,48],[7970,6,7948,8],[7971,6,7949,8],[7971,10,7949,12],[7971,11,7949,13,"handlers"],[7971,19,7949,21],[7971,20,7949,22,"delete"],[7971,26,7949,28],[7971,27,7949,29,"handler"],[7971,34,7949,36],[7971,35,7949,37],[7972,4,7950,4],[7973,4,7951,4],[7974,0,7952,0],[7975,0,7953,0],[7976,0,7954,0],[7977,0,7955,0],[7978,0,7956,0],[7979,0,7957,0],[7980,0,7958,0],[7981,0,7959,0],[7982,0,7960,0],[7983,0,7961,0],[7984,0,7962,0],[7985,0,7963,0],[7986,4,7964,4],[7986,10,7964,10,"_send"],[7986,15,7964,15,"_send"],[7986,16,7964,16,"eventType"],[7986,25,7964,25],[7986,27,7964,27,"data"],[7986,31,7964,31],[7986,33,7964,33,"timeout"],[7986,40,7964,40],[7986,43,7964,43],[7986,45,7964,45],[7986,46,7964,46],[7986,74,7964,74],[7987,6,7965,8],[7987,12,7965,14,"messageChannel"],[7987,26,7965,28],[7987,29,7965,31],[7987,36,7965,38,"MessageChannel"],[7987,50,7965,52],[7987,55,7965,57],[7987,66,7965,68],[7987,69,7965,71],[7987,73,7965,75,"MessageChannel"],[7987,87,7965,89],[7987,88,7965,90],[7987,89,7965,91],[7987,92,7965,94],[7987,96,7965,98],[7988,6,7966,8],[7988,10,7966,12],[7988,11,7966,13,"messageChannel"],[7988,25,7966,27],[7988,27,7966,29],[7989,8,7967,12],[7989,14,7967,18],[7989,18,7967,22,"Error"],[7989,23,7967,27],[7989,24,7967,28],[7989,48,7967,52],[7989,49,7967,53],[7989,91,7967,95],[7989,92,7967,96],[7990,6,7968,8],[7991,6,7969,8],[7992,6,7970,8],[7993,6,7971,8],[7994,6,7972,8],[7995,6,7973,8],[7995,10,7973,12,"completionTimer"],[7995,25,7973,27],[7996,6,7974,8],[7996,10,7974,12,"handler"],[7996,17,7974,19],[7997,6,7975,8],[7997,13,7975,15],[7997,17,7975,19,"Promise"],[7997,24,7975,26],[7997,25,7975,27],[7997,26,7975,28,"resolve"],[7997,33,7975,35],[7997,35,7975,37,"reject"],[7997,41,7975,43],[7997,46,7975,48],[7998,8,7976,12],[7998,14,7976,18,"eventId"],[7998,21,7976,25],[7998,24,7976,28,"_generateEventId"],[7998,40,7976,44],[7998,41,7976,45],[7998,43,7976,47],[7998,45,7976,49],[7998,47,7976,51],[7998,48,7976,52],[7999,8,7977,12,"messageChannel"],[7999,22,7977,26],[7999,23,7977,27,"port1"],[7999,28,7977,32],[7999,29,7977,33,"start"],[7999,34,7977,38],[7999,35,7977,39],[7999,36,7977,40],[8000,8,7978,12],[8000,14,7978,18,"ackTimer"],[8000,22,7978,26],[8000,25,7978,29,"setTimeout"],[8000,35,7978,39],[8000,36,7978,40],[8000,42,7978,46],[8001,10,7979,16,"reject"],[8001,16,7979,22],[8001,17,7979,23],[8001,21,7979,27,"Error"],[8001,26,7979,32],[8001,27,7979,33],[8001,46,7979,52],[8001,47,7979,53],[8001,84,7979,90],[8001,85,7979,91],[8001,86,7979,92],[8002,8,7980,12],[8002,9,7980,13],[8002,11,7980,15,"timeout"],[8002,18,7980,22],[8002,19,7980,23],[8003,8,7981,12,"handler"],[8003,15,7981,19],[8003,18,7981,22],[8004,10,7982,16,"messageChannel"],[8004,24,7982,30],[8005,10,7983,16,"onMessage"],[8005,19,7983,25,"onMessage"],[8005,20,7983,26,"event"],[8005,25,7983,31],[8005,27,7983,33],[8006,12,7984,20],[8006,18,7984,26,"messageEvent"],[8006,30,7984,38],[8006,33,7984,41,"event"],[8006,38,7984,46],[8007,12,7985,20],[8007,16,7985,24,"messageEvent"],[8007,28,7985,36],[8007,29,7985,37,"data"],[8007,33,7985,41],[8007,34,7985,42,"eventId"],[8007,41,7985,49],[8007,46,7985,54,"eventId"],[8007,53,7985,61],[8007,55,7985,63],[8008,14,7986,24],[8009,12,7987,20],[8010,12,7988,20],[8010,20,7988,28,"messageEvent"],[8010,32,7988,40],[8010,33,7988,41,"data"],[8010,37,7988,45],[8010,38,7988,46,"status"],[8010,44,7988,52],[8011,14,7989,24],[8011,19,7989,29],[8011,24,7989,34],[8011,25,7989,35],[8012,16,7990,28],[8013,16,7991,28,"clearTimeout"],[8013,28,7991,40],[8013,29,7991,41,"ackTimer"],[8013,37,7991,49],[8013,38,7991,50],[8014,16,7992,28,"completionTimer"],[8014,31,7992,43],[8014,34,7992,46,"setTimeout"],[8014,44,7992,56],[8014,45,7992,57],[8014,51,7992,63],[8015,18,7993,32,"reject"],[8015,24,7993,38],[8015,25,7993,39],[8015,29,7993,43,"Error"],[8015,34,7993,48],[8015,35,7993,49],[8015,44,7993,58],[8015,45,7993,59],[8015,72,7993,86],[8015,73,7993,87],[8015,74,7993,88],[8016,16,7994,28],[8016,17,7994,29],[8016,19,7994,31],[8016,23,7994,35],[8016,24,7994,36],[8016,57,7994,69],[8016,58,7994,70],[8017,16,7995,28],[8018,14,7996,24],[8018,19,7996,29],[8018,25,7996,35],[8018,26,7996,36],[8019,16,7997,28],[8020,16,7998,28,"clearTimeout"],[8020,28,7998,40],[8020,29,7998,41,"completionTimer"],[8020,44,7998,56],[8020,45,7998,57],[8021,16,7999,28,"resolve"],[8021,23,7999,35],[8021,24,7999,36,"messageEvent"],[8021,36,7999,48],[8021,37,7999,49,"data"],[8021,41,7999,53],[8021,42,7999,54,"response"],[8021,50,7999,62],[8021,51,7999,63],[8022,16,8000,28],[8023,14,8001,24],[8024,16,8002,28,"clearTimeout"],[8024,28,8002,40],[8024,29,8002,41,"ackTimer"],[8024,37,8002,49],[8024,38,8002,50],[8025,16,8003,28,"clearTimeout"],[8025,28,8003,40],[8025,29,8003,41,"completionTimer"],[8025,44,8003,56],[8025,45,8003,57],[8026,16,8004,28,"reject"],[8026,22,8004,34],[8026,23,8004,35],[8026,27,8004,39,"Error"],[8026,32,8004,44],[8026,33,8004,45],[8026,51,8004,63],[8026,52,8004,64],[8026,88,8004,100],[8026,89,8004,101],[8026,90,8004,102],[8027,16,8005,28],[8028,12,8006,20],[8029,10,8007,16],[8030,8,8008,12],[8030,9,8008,13],[8031,8,8009,12],[8031,12,8009,16],[8031,13,8009,17,"handlers"],[8031,21,8009,25],[8031,22,8009,26,"add"],[8031,25,8009,29],[8031,26,8009,30,"handler"],[8031,33,8009,37],[8031,34,8009,38],[8032,8,8010,12,"messageChannel"],[8032,22,8010,26],[8032,23,8010,27,"port1"],[8032,28,8010,32],[8032,29,8010,33,"addEventListener"],[8032,45,8010,49],[8032,46,8010,50],[8032,55,8010,59],[8032,57,8010,61,"handler"],[8032,64,8010,68],[8032,65,8010,69,"onMessage"],[8032,74,8010,78],[8032,75,8010,79],[8033,8,8011,12],[8033,12,8011,16],[8033,13,8011,17,"target"],[8033,19,8011,23],[8033,20,8011,24,"postMessage"],[8033,31,8011,35],[8033,32,8011,36],[8034,10,8012,16,"eventType"],[8034,19,8012,25],[8035,10,8013,16,"eventId"],[8035,17,8013,23],[8036,10,8014,16,"data"],[8037,8,8015,12],[8037,9,8015,13],[8037,11,8015,15],[8037,12,8015,16,"messageChannel"],[8037,26,8015,30],[8037,27,8015,31,"port2"],[8037,32,8015,36],[8037,33,8015,37],[8037,34,8015,38],[8038,6,8016,8],[8038,7,8016,9],[8038,8,8016,10],[8038,9,8016,11,"finally"],[8038,16,8016,18],[8038,17,8016,19],[8038,23,8016,25],[8039,8,8017,12],[8039,12,8017,16,"handler"],[8039,19,8017,23],[8039,21,8017,25],[8040,10,8018,16],[8040,14,8018,20],[8040,15,8018,21,"removeMessageHandler"],[8040,35,8018,41],[8040,36,8018,42,"handler"],[8040,43,8018,49],[8040,44,8018,50],[8041,8,8019,12],[8042,6,8020,8],[8042,7,8020,9],[8042,8,8020,10],[8043,4,8021,4],[8044,2,8022,0],[8046,2,8024,0],[8047,0,8025,0],[8048,0,8026,0],[8049,0,8027,0],[8050,0,8028,0],[8051,0,8029,0],[8052,0,8030,0],[8053,0,8031,0],[8054,0,8032,0],[8055,0,8033,0],[8056,0,8034,0],[8057,0,8035,0],[8058,0,8036,0],[8059,0,8037,0],[8060,0,8038,0],[8061,0,8039,0],[8062,2,8040,0],[8063,0,8041,0],[8064,0,8042,0],[8065,0,8043,0],[8066,2,8044,0],[8066,11,8044,9,"_window"],[8066,18,8044,16,"_window"],[8066,19,8044,16],[8066,21,8044,19],[8067,4,8045,4],[8067,11,8045,11,"window"],[8067,17,8045,17],[8068,2,8046,0],[8069,2,8047,0],[8069,11,8047,9,"_setWindowLocation"],[8069,29,8047,27,"_setWindowLocation"],[8069,30,8047,28,"url"],[8069,33,8047,31],[8069,35,8047,33],[8070,4,8048,4,"_window"],[8070,11,8048,11],[8070,12,8048,12],[8070,13,8048,13],[8070,14,8048,14,"location"],[8070,22,8048,22],[8070,23,8048,23,"href"],[8070,27,8048,27],[8070,30,8048,30,"url"],[8070,33,8048,33],[8071,2,8049,0],[8073,2,8051,0],[8074,0,8052,0],[8075,0,8053,0],[8076,0,8054,0],[8077,0,8055,0],[8078,0,8056,0],[8079,0,8057,0],[8080,0,8058,0],[8081,0,8059,0],[8082,0,8060,0],[8083,0,8061,0],[8084,0,8062,0],[8085,0,8063,0],[8086,0,8064,0],[8087,0,8065,0],[8088,0,8066,0],[8089,2,8067,0],[8089,11,8067,9,"_isWorker"],[8089,20,8067,18,"_isWorker"],[8089,21,8067,18],[8089,23,8067,21],[8090,4,8068,4],[8090,11,8068,12],[8090,18,8068,19,"_window"],[8090,25,8068,26],[8090,26,8068,27],[8090,27,8068,28],[8090,28,8068,29],[8090,47,8068,48],[8090,48,8068,49],[8090,53,8068,54],[8090,64,8068,65],[8090,68,8069,8],[8090,75,8069,15,"_window"],[8090,82,8069,22],[8090,83,8069,23],[8090,84,8069,24],[8090,85,8069,25],[8090,100,8069,40],[8090,101,8069,41],[8090,106,8069,46],[8090,116,8069,56],[8091,2,8070,0],[8092,2,8071,0],[8092,17,8071,15,"_getActiveServiceWorker"],[8092,40,8071,38,"_getActiveServiceWorker"],[8092,41,8071,38],[8092,43,8071,41],[8093,4,8072,4],[8093,8,8072,8],[8093,9,8072,9,"navigator"],[8093,18,8072,18],[8093,20,8072,20,"serviceWorker"],[8093,33,8072,33],[8093,35,8072,35],[8094,6,8073,8],[8094,13,8073,15],[8094,17,8073,19],[8095,4,8074,4],[8096,4,8075,4],[8096,8,8075,8],[8097,6,8076,8],[8097,12,8076,14,"registration"],[8097,24,8076,26],[8097,27,8076,29],[8097,33,8076,35,"navigator"],[8097,42,8076,44],[8097,43,8076,45,"serviceWorker"],[8097,56,8076,58],[8097,57,8076,59,"ready"],[8097,62,8076,64],[8098,6,8077,8],[8098,13,8077,15,"registration"],[8098,25,8077,27],[8098,26,8077,28,"active"],[8098,32,8077,34],[8099,4,8078,4],[8099,5,8078,5],[8099,6,8079,4],[8099,12,8079,10],[8100,6,8080,8],[8100,13,8080,15],[8100,17,8080,19],[8101,4,8081,4],[8102,2,8082,0],[8103,2,8083,0],[8103,11,8083,9,"_getServiceWorkerController"],[8103,38,8083,36,"_getServiceWorkerController"],[8103,39,8083,36],[8103,41,8083,39],[8104,4,8084,4],[8104,11,8084,11,"navigator"],[8104,20,8084,20],[8104,22,8084,22,"serviceWorker"],[8104,35,8084,35],[8104,37,8084,37,"controller"],[8104,47,8084,47],[8104,51,8084,51],[8104,55,8084,55],[8105,2,8085,0],[8106,2,8086,0],[8106,11,8086,9,"_getWorkerGlobalScope"],[8106,32,8086,30,"_getWorkerGlobalScope"],[8106,33,8086,30],[8106,35,8086,33],[8107,4,8087,4],[8107,11,8087,11,"_isWorker"],[8107,20,8087,20],[8107,21,8087,21],[8107,22,8087,22],[8107,25,8087,25,"self"],[8107,29,8087,29],[8107,32,8087,32],[8107,36,8087,36],[8108,2,8088,0],[8110,2,8090,0],[8111,0,8091,0],[8112,0,8092,0],[8113,0,8093,0],[8114,0,8094,0],[8115,0,8095,0],[8116,0,8096,0],[8117,0,8097,0],[8118,0,8098,0],[8119,0,8099,0],[8120,0,8100,0],[8121,0,8101,0],[8122,0,8102,0],[8123,0,8103,0],[8124,0,8104,0],[8125,0,8105,0],[8126,2,8106,0],[8126,8,8106,6,"DB_NAME"],[8126,15,8106,13],[8126,18,8106,16],[8126,42,8106,40],[8127,2,8107,0],[8127,8,8107,6,"DB_VERSION"],[8127,18,8107,16],[8127,21,8107,19],[8127,22,8107,20],[8128,2,8108,0],[8128,8,8108,6,"DB_OBJECTSTORE_NAME"],[8128,27,8108,25],[8128,30,8108,28],[8128,52,8108,50],[8129,2,8109,0],[8129,8,8109,6,"DB_DATA_KEYPATH"],[8129,23,8109,21],[8129,26,8109,24],[8129,37,8109,35],[8130,2,8110,0],[8131,0,8111,0],[8132,0,8112,0],[8133,0,8113,0],[8134,0,8114,0],[8135,0,8115,0],[8136,2,8116,0],[8136,8,8116,6,"DBPromise"],[8136,17,8116,15],[8136,18,8116,16],[8137,4,8117,4,"constructor"],[8137,15,8117,15,"constructor"],[8137,16,8117,16,"request"],[8137,23,8117,23],[8137,25,8117,25],[8138,6,8118,8],[8138,10,8118,12],[8138,11,8118,13,"request"],[8138,18,8118,20],[8138,21,8118,23,"request"],[8138,28,8118,30],[8139,4,8119,4],[8140,4,8120,4,"toPromise"],[8140,13,8120,13,"toPromise"],[8140,14,8120,13],[8140,16,8120,16],[8141,6,8121,8],[8141,13,8121,15],[8141,17,8121,19,"Promise"],[8141,24,8121,26],[8141,25,8121,27],[8141,26,8121,28,"resolve"],[8141,33,8121,35],[8141,35,8121,37,"reject"],[8141,41,8121,43],[8141,46,8121,48],[8142,8,8122,12],[8142,12,8122,16],[8142,13,8122,17,"request"],[8142,20,8122,24],[8142,21,8122,25,"addEventListener"],[8142,37,8122,41],[8142,38,8122,42],[8142,47,8122,51],[8142,49,8122,53],[8142,55,8122,59],[8143,10,8123,16,"resolve"],[8143,17,8123,23],[8143,18,8123,24],[8143,22,8123,28],[8143,23,8123,29,"request"],[8143,30,8123,36],[8143,31,8123,37,"result"],[8143,37,8123,43],[8143,38,8123,44],[8144,8,8124,12],[8144,9,8124,13],[8144,10,8124,14],[8145,8,8125,12],[8145,12,8125,16],[8145,13,8125,17,"request"],[8145,20,8125,24],[8145,21,8125,25,"addEventListener"],[8145,37,8125,41],[8145,38,8125,42],[8145,45,8125,49],[8145,47,8125,51],[8145,53,8125,57],[8146,10,8126,16,"reject"],[8146,16,8126,22],[8146,17,8126,23],[8146,21,8126,27],[8146,22,8126,28,"request"],[8146,29,8126,35],[8146,30,8126,36,"error"],[8146,35,8126,41],[8146,36,8126,42],[8147,8,8127,12],[8147,9,8127,13],[8147,10,8127,14],[8148,6,8128,8],[8148,7,8128,9],[8148,8,8128,10],[8149,4,8129,4],[8150,2,8130,0],[8151,2,8131,0],[8151,11,8131,9,"getObjectStore"],[8151,25,8131,23,"getObjectStore"],[8151,26,8131,24,"db"],[8151,28,8131,26],[8151,30,8131,28,"isReadWrite"],[8151,41,8131,39],[8151,43,8131,41],[8152,4,8132,4],[8152,11,8132,11,"db"],[8152,13,8132,13],[8152,14,8133,9,"transaction"],[8152,25,8133,20],[8152,26,8133,21],[8152,27,8133,22,"DB_OBJECTSTORE_NAME"],[8152,46,8133,41],[8152,47,8133,42],[8152,49,8133,44,"isReadWrite"],[8152,60,8133,55],[8152,63,8133,58],[8152,74,8133,69],[8152,77,8133,72],[8152,87,8133,82],[8152,88,8133,83],[8152,89,8134,9,"objectStore"],[8152,100,8134,20],[8152,101,8134,21,"DB_OBJECTSTORE_NAME"],[8152,120,8134,40],[8152,121,8134,41],[8153,2,8135,0],[8154,2,8136,0],[8154,11,8136,9,"_deleteDatabase"],[8154,26,8136,24,"_deleteDatabase"],[8154,27,8136,24],[8154,29,8136,27],[8155,4,8137,4],[8155,10,8137,10,"request"],[8155,17,8137,17],[8155,20,8137,20,"indexedDB"],[8155,29,8137,29],[8155,30,8137,30,"deleteDatabase"],[8155,44,8137,44],[8155,45,8137,45,"DB_NAME"],[8155,52,8137,52],[8155,53,8137,53],[8156,4,8138,4],[8156,11,8138,11],[8156,15,8138,15,"DBPromise"],[8156,24,8138,24],[8156,25,8138,25,"request"],[8156,32,8138,32],[8156,33,8138,33],[8156,34,8138,34,"toPromise"],[8156,43,8138,43],[8156,44,8138,44],[8156,45,8138,45],[8157,2,8139,0],[8158,2,8140,0],[8158,11,8140,9,"_openDatabase"],[8158,24,8140,22,"_openDatabase"],[8158,25,8140,22],[8158,27,8140,25],[8159,4,8141,4],[8159,10,8141,10,"request"],[8159,17,8141,17],[8159,20,8141,20,"indexedDB"],[8159,29,8141,29],[8159,30,8141,30,"open"],[8159,34,8141,34],[8159,35,8141,35,"DB_NAME"],[8159,42,8141,42],[8159,44,8141,44,"DB_VERSION"],[8159,54,8141,54],[8159,55,8141,55],[8160,4,8142,4],[8160,11,8142,11],[8160,15,8142,15,"Promise"],[8160,22,8142,22],[8160,23,8142,23],[8160,24,8142,24,"resolve"],[8160,31,8142,31],[8160,33,8142,33,"reject"],[8160,39,8142,39],[8160,44,8142,44],[8161,6,8143,8,"request"],[8161,13,8143,15],[8161,14,8143,16,"addEventListener"],[8161,30,8143,32],[8161,31,8143,33],[8161,38,8143,40],[8161,40,8143,42],[8161,46,8143,48],[8162,8,8144,12,"reject"],[8162,14,8144,18],[8162,15,8144,19,"request"],[8162,22,8144,26],[8162,23,8144,27,"error"],[8162,28,8144,32],[8162,29,8144,33],[8163,6,8145,8],[8163,7,8145,9],[8163,8,8145,10],[8164,6,8146,8,"request"],[8164,13,8146,15],[8164,14,8146,16,"addEventListener"],[8164,30,8146,32],[8164,31,8146,33],[8164,46,8146,48],[8164,48,8146,50],[8164,54,8146,56],[8165,8,8147,12],[8165,14,8147,18,"db"],[8165,16,8147,20],[8165,19,8147,23,"request"],[8165,26,8147,30],[8165,27,8147,31,"result"],[8165,33,8147,37],[8166,8,8148,12],[8166,12,8148,16],[8167,10,8149,16,"db"],[8167,12,8149,18],[8167,13,8149,19,"createObjectStore"],[8167,30,8149,36],[8167,31,8149,37,"DB_OBJECTSTORE_NAME"],[8167,50,8149,56],[8167,52,8149,58],[8168,12,8149,60,"keyPath"],[8168,19,8149,67],[8168,21,8149,69,"DB_DATA_KEYPATH"],[8169,10,8149,85],[8169,11,8149,86],[8169,12,8149,87],[8170,8,8150,12],[8170,9,8150,13],[8170,10,8151,12],[8170,17,8151,19,"e"],[8170,18,8151,20],[8170,20,8151,22],[8171,10,8152,16,"reject"],[8171,16,8152,22],[8171,17,8152,23,"e"],[8171,18,8152,24],[8171,19,8152,25],[8172,8,8153,12],[8173,6,8154,8],[8173,7,8154,9],[8173,8,8154,10],[8174,6,8155,8,"request"],[8174,13,8155,15],[8174,14,8155,16,"addEventListener"],[8174,30,8155,32],[8174,31,8155,33],[8174,40,8155,42],[8174,42,8155,44],[8174,54,8155,56],[8175,8,8156,12],[8175,14,8156,18,"db"],[8175,16,8156,20],[8175,19,8156,23,"request"],[8175,26,8156,30],[8175,27,8156,31,"result"],[8175,33,8156,37],[8176,8,8157,12],[8177,8,8158,12],[8178,8,8159,12],[8179,8,8160,12],[8180,8,8161,12],[8180,12,8161,16],[8180,13,8161,17,"db"],[8180,15,8161,19],[8180,16,8161,20,"objectStoreNames"],[8180,32,8161,36],[8180,33,8161,37,"contains"],[8180,41,8161,45],[8180,42,8161,46,"DB_OBJECTSTORE_NAME"],[8180,61,8161,65],[8180,62,8161,66],[8180,64,8161,68],[8181,10,8162,16],[8182,10,8163,16,"db"],[8182,12,8163,18],[8182,13,8163,19,"close"],[8182,18,8163,24],[8182,19,8163,25],[8182,20,8163,26],[8183,10,8164,16],[8183,16,8164,22,"_deleteDatabase"],[8183,31,8164,37],[8183,32,8164,38],[8183,33,8164,39],[8184,10,8165,16,"resolve"],[8184,17,8165,23],[8184,18,8165,24],[8184,24,8165,30,"_openDatabase"],[8184,37,8165,43],[8184,38,8165,44],[8184,39,8165,45],[8184,40,8165,46],[8185,8,8166,12],[8185,9,8166,13],[8185,15,8167,17],[8186,10,8168,16,"resolve"],[8186,17,8168,23],[8186,18,8168,24,"db"],[8186,20,8168,26],[8186,21,8168,27],[8187,8,8169,12],[8188,6,8170,8],[8188,7,8170,9],[8188,8,8170,10],[8189,4,8171,4],[8189,5,8171,5],[8189,6,8171,6],[8190,2,8172,0],[8191,2,8173,0],[8191,17,8173,15,"_putObject"],[8191,27,8173,25,"_putObject"],[8191,28,8173,26,"db"],[8191,30,8173,28],[8191,32,8173,30,"key"],[8191,35,8173,33],[8191,37,8173,35,"value"],[8191,42,8173,40],[8191,44,8173,42],[8192,4,8174,4],[8192,10,8174,10,"request"],[8192,17,8174,17],[8192,20,8174,20,"getObjectStore"],[8192,34,8174,34],[8192,35,8174,35,"db"],[8192,37,8174,37],[8192,39,8174,39],[8192,43,8174,43],[8192,44,8174,44],[8192,45,8174,45,"put"],[8192,48,8174,48],[8192,49,8174,49],[8193,6,8175,8],[8193,7,8175,9,"DB_DATA_KEYPATH"],[8193,22,8175,24],[8193,25,8175,27,"key"],[8193,28,8175,30],[8194,6,8176,8,"value"],[8195,4,8177,4],[8195,5,8177,5],[8195,6,8177,6],[8196,4,8178,4],[8196,11,8178,11],[8196,15,8178,15,"DBPromise"],[8196,24,8178,24],[8196,25,8178,25,"request"],[8196,32,8178,32],[8196,33,8178,33],[8196,34,8178,34,"toPromise"],[8196,43,8178,43],[8196,44,8178,44],[8196,45,8178,45],[8197,2,8179,0],[8198,2,8180,0],[8198,17,8180,15,"getObject"],[8198,26,8180,24,"getObject"],[8198,27,8180,25,"db"],[8198,29,8180,27],[8198,31,8180,29,"key"],[8198,34,8180,32],[8198,36,8180,34],[8199,4,8181,4],[8199,10,8181,10,"request"],[8199,17,8181,17],[8199,20,8181,20,"getObjectStore"],[8199,34,8181,34],[8199,35,8181,35,"db"],[8199,37,8181,37],[8199,39,8181,39],[8199,44,8181,44],[8199,45,8181,45],[8199,46,8181,46,"get"],[8199,49,8181,49],[8199,50,8181,50,"key"],[8199,53,8181,53],[8199,54,8181,54],[8200,4,8182,4],[8200,10,8182,10,"data"],[8200,14,8182,14],[8200,17,8182,17],[8200,23,8182,23],[8200,27,8182,27,"DBPromise"],[8200,36,8182,36],[8200,37,8182,37,"request"],[8200,44,8182,44],[8200,45,8182,45],[8200,46,8182,46,"toPromise"],[8200,55,8182,55],[8200,56,8182,56],[8200,57,8182,57],[8201,4,8183,4],[8201,11,8183,11,"data"],[8201,15,8183,15],[8201,20,8183,20,"undefined"],[8201,29,8183,29],[8201,32,8183,32],[8201,36,8183,36],[8201,39,8183,39,"data"],[8201,43,8183,43],[8201,44,8183,44,"value"],[8201,49,8183,49],[8202,2,8184,0],[8203,2,8185,0],[8203,11,8185,9,"_deleteObject"],[8203,24,8185,22,"_deleteObject"],[8203,25,8185,23,"db"],[8203,27,8185,25],[8203,29,8185,27,"key"],[8203,32,8185,30],[8203,34,8185,32],[8204,4,8186,4],[8204,10,8186,10,"request"],[8204,17,8186,17],[8204,20,8186,20,"getObjectStore"],[8204,34,8186,34],[8204,35,8186,35,"db"],[8204,37,8186,37],[8204,39,8186,39],[8204,43,8186,43],[8204,44,8186,44],[8204,45,8186,45,"delete"],[8204,51,8186,51],[8204,52,8186,52,"key"],[8204,55,8186,55],[8204,56,8186,56],[8205,4,8187,4],[8205,11,8187,11],[8205,15,8187,15,"DBPromise"],[8205,24,8187,24],[8205,25,8187,25,"request"],[8205,32,8187,32],[8205,33,8187,33],[8205,34,8187,34,"toPromise"],[8205,43,8187,43],[8205,44,8187,44],[8205,45,8187,45],[8206,2,8188,0],[8207,2,8189,0],[8207,8,8189,6,"_POLLING_INTERVAL_MS"],[8207,28,8189,26],[8207,31,8189,29],[8207,34,8189,32],[8208,2,8190,0],[8208,8,8190,6,"_TRANSACTION_RETRY_COUNT"],[8208,32,8190,30],[8208,35,8190,33],[8208,36,8190,34],[8209,2,8191,0],[8209,8,8191,6,"IndexedDBLocalPersistence"],[8209,33,8191,31],[8209,34,8191,32],[8210,4,8192,4,"constructor"],[8210,15,8192,15,"constructor"],[8210,16,8192,15],[8210,18,8192,18],[8211,6,8193,8],[8211,10,8193,12],[8211,11,8193,13,"type"],[8211,15,8193,17],[8211,18,8193,20],[8211,25,8193,27],[8211,26,8193,28],[8212,6,8194,8],[8212,10,8194,12],[8212,11,8194,13,"_shouldAllowMigration"],[8212,32,8194,34],[8212,35,8194,37],[8212,39,8194,41],[8213,6,8195,8],[8213,10,8195,12],[8213,11,8195,13,"listeners"],[8213,20,8195,22],[8213,23,8195,25],[8213,24,8195,26],[8213,25,8195,27],[8214,6,8196,8],[8214,10,8196,12],[8214,11,8196,13,"localCache"],[8214,21,8196,23],[8214,24,8196,26],[8214,25,8196,27],[8214,26,8196,28],[8215,6,8197,8],[8216,6,8198,8],[8217,6,8199,8],[8217,10,8199,12],[8217,11,8199,13,"pollTimer"],[8217,20,8199,22],[8217,23,8199,25],[8217,27,8199,29],[8218,6,8200,8],[8218,10,8200,12],[8218,11,8200,13,"pendingWrites"],[8218,24,8200,26],[8218,27,8200,29],[8218,28,8200,30],[8219,6,8201,8],[8219,10,8201,12],[8219,11,8201,13,"receiver"],[8219,19,8201,21],[8219,22,8201,24],[8219,26,8201,28],[8220,6,8202,8],[8220,10,8202,12],[8220,11,8202,13,"sender"],[8220,17,8202,19],[8220,20,8202,22],[8220,24,8202,26],[8221,6,8203,8],[8221,10,8203,12],[8221,11,8203,13,"serviceWorkerReceiverAvailable"],[8221,41,8203,43],[8221,44,8203,46],[8221,49,8203,51],[8222,6,8204,8],[8222,10,8204,12],[8222,11,8204,13,"activeServiceWorker"],[8222,30,8204,32],[8222,33,8204,35],[8222,37,8204,39],[8223,6,8205,8],[8224,6,8206,8],[8224,10,8206,12],[8224,11,8206,13,"_workerInitializationPromise"],[8224,39,8206,41],[8224,42,8207,12],[8224,46,8207,16],[8224,47,8207,17,"initializeServiceWorkerMessaging"],[8224,79,8207,49],[8224,80,8207,50],[8224,81,8207,51],[8224,82,8207,52,"then"],[8224,86,8207,56],[8224,87,8207,57],[8224,93,8207,63],[8224,94,8207,65],[8224,95,8207,66],[8224,97,8207,68],[8224,103,8207,74],[8224,104,8207,76],[8224,105,8207,77],[8224,106,8207,78],[8225,4,8208,4],[8226,4,8209,4],[8226,10,8209,10,"_openDb"],[8226,17,8209,17,"_openDb"],[8226,18,8209,17],[8226,20,8209,20],[8227,6,8210,8],[8227,10,8210,12],[8227,14,8210,16],[8227,15,8210,17,"db"],[8227,17,8210,19],[8227,19,8210,21],[8228,8,8211,12],[8228,15,8211,19],[8228,19,8211,23],[8228,20,8211,24,"db"],[8228,22,8211,26],[8229,6,8212,8],[8230,6,8213,8],[8230,10,8213,12],[8230,11,8213,13,"db"],[8230,13,8213,15],[8230,16,8213,18],[8230,22,8213,24,"_openDatabase"],[8230,35,8213,37],[8230,36,8213,38],[8230,37,8213,39],[8231,6,8214,8],[8231,13,8214,15],[8231,17,8214,19],[8231,18,8214,20,"db"],[8231,20,8214,22],[8232,4,8215,4],[8233,4,8216,4],[8233,10,8216,10,"_withRetries"],[8233,22,8216,22,"_withRetries"],[8233,23,8216,23,"op"],[8233,25,8216,25],[8233,27,8216,27],[8234,6,8217,8],[8234,10,8217,12,"numAttempts"],[8234,21,8217,23],[8234,24,8217,26],[8234,25,8217,27],[8235,6,8218,8],[8235,13,8218,15],[8235,17,8218,19],[8235,19,8218,21],[8236,8,8219,12],[8236,12,8219,16],[8237,10,8220,16],[8237,16,8220,22,"db"],[8237,18,8220,24],[8237,21,8220,27],[8237,27,8220,33],[8237,31,8220,37],[8237,32,8220,38,"_openDb"],[8237,39,8220,45],[8237,40,8220,46],[8237,41,8220,47],[8238,10,8221,16],[8238,17,8221,23],[8238,23,8221,29,"op"],[8238,25,8221,31],[8238,26,8221,32,"db"],[8238,28,8221,34],[8238,29,8221,35],[8239,8,8222,12],[8239,9,8222,13],[8239,10,8223,12],[8239,17,8223,19,"e"],[8239,18,8223,20],[8239,20,8223,22],[8240,10,8224,16],[8240,14,8224,20,"numAttempts"],[8240,25,8224,31],[8240,27,8224,33],[8240,30,8224,36,"_TRANSACTION_RETRY_COUNT"],[8240,54,8224,60],[8240,56,8224,62],[8241,12,8225,20],[8241,18,8225,26,"e"],[8241,19,8225,27],[8242,10,8226,16],[8243,10,8227,16],[8243,14,8227,20],[8243,18,8227,24],[8243,19,8227,25,"db"],[8243,21,8227,27],[8243,23,8227,29],[8244,12,8228,20],[8244,16,8228,24],[8244,17,8228,25,"db"],[8244,19,8228,27],[8244,20,8228,28,"close"],[8244,25,8228,33],[8244,26,8228,34],[8244,27,8228,35],[8245,12,8229,20],[8245,16,8229,24],[8245,17,8229,25,"db"],[8245,19,8229,27],[8245,22,8229,30,"undefined"],[8245,31,8229,39],[8246,10,8230,16],[8247,10,8231,16],[8248,8,8232,12],[8249,6,8233,8],[8250,4,8234,4],[8251,4,8235,4],[8252,0,8236,0],[8253,0,8237,0],[8254,0,8238,0],[8255,4,8239,4],[8255,10,8239,10,"initializeServiceWorkerMessaging"],[8255,42,8239,42,"initializeServiceWorkerMessaging"],[8255,43,8239,42],[8255,45,8239,45],[8256,6,8240,8],[8256,13,8240,15,"_isWorker"],[8256,22,8240,24],[8256,23,8240,25],[8256,24,8240,26],[8256,27,8240,29],[8256,31,8240,33],[8256,32,8240,34,"initializeReceiver"],[8256,50,8240,52],[8256,51,8240,53],[8256,52,8240,54],[8256,55,8240,57],[8256,59,8240,61],[8256,60,8240,62,"initializeSender"],[8256,76,8240,78],[8256,77,8240,79],[8256,78,8240,80],[8257,4,8241,4],[8258,4,8242,4],[8259,0,8243,0],[8260,0,8244,0],[8261,4,8245,4],[8261,10,8245,10,"initializeReceiver"],[8261,28,8245,28,"initializeReceiver"],[8261,29,8245,28],[8261,31,8245,31],[8262,6,8246,8],[8262,10,8246,12],[8262,11,8246,13,"receiver"],[8262,19,8246,21],[8262,22,8246,24,"Receiver"],[8262,30,8246,32],[8262,31,8246,33,"_getInstance"],[8262,43,8246,45],[8262,44,8246,46,"_getWorkerGlobalScope"],[8262,65,8246,67],[8262,66,8246,68],[8262,67,8246,69],[8262,68,8246,70],[8263,6,8247,8],[8264,6,8248,8],[8264,10,8248,12],[8264,11,8248,13,"receiver"],[8264,19,8248,21],[8264,20,8248,22,"_subscribe"],[8264,30,8248,32],[8264,31,8248,33],[8264,43,8248,45],[8264,44,8248,46],[8264,74,8248,76],[8264,81,8248,83,"_origin"],[8264,88,8248,90],[8264,90,8248,92,"data"],[8264,94,8248,96],[8264,99,8248,101],[8265,8,8249,12],[8265,14,8249,18,"keys"],[8265,18,8249,22],[8265,21,8249,25],[8265,27,8249,31],[8265,31,8249,35],[8265,32,8249,36,"_poll"],[8265,37,8249,41],[8265,38,8249,42],[8265,39,8249,43],[8266,8,8250,12],[8266,15,8250,19],[8267,10,8251,16,"keyProcessed"],[8267,22,8251,28],[8267,24,8251,30,"keys"],[8267,28,8251,34],[8267,29,8251,35,"includes"],[8267,37,8251,43],[8267,38,8251,44,"data"],[8267,42,8251,48],[8267,43,8251,49,"key"],[8267,46,8251,52],[8268,8,8252,12],[8268,9,8252,13],[8269,6,8253,8],[8269,7,8253,9],[8269,8,8253,10],[8270,6,8254,8],[8271,6,8255,8],[8271,10,8255,12],[8271,11,8255,13,"receiver"],[8271,19,8255,21],[8271,20,8255,22,"_subscribe"],[8271,30,8255,32],[8271,31,8255,33],[8271,37,8255,39],[8271,38,8255,40],[8271,61,8255,63],[8271,68,8255,70,"_origin"],[8271,75,8255,77],[8271,77,8255,79,"_data"],[8271,82,8255,84],[8271,87,8255,89],[8272,8,8256,12],[8272,15,8256,19],[8272,16,8256,20],[8272,28,8256,32],[8272,29,8256,33],[8272,58,8256,62],[8273,6,8257,8],[8273,7,8257,9],[8273,8,8257,10],[8274,4,8258,4],[8275,4,8259,4],[8276,0,8260,0],[8277,0,8261,0],[8278,0,8262,0],[8279,0,8263,0],[8280,0,8264,0],[8281,0,8265,0],[8282,4,8266,4],[8282,10,8266,10,"initializeSender"],[8282,26,8266,26,"initializeSender"],[8282,27,8266,26],[8282,29,8266,29],[8283,6,8267,8],[8284,6,8268,8],[8284,10,8268,12],[8284,11,8268,13,"activeServiceWorker"],[8284,30,8268,32],[8284,33,8268,35],[8284,39,8268,41,"_getActiveServiceWorker"],[8284,62,8268,64],[8284,63,8268,65],[8284,64,8268,66],[8285,6,8269,8],[8285,10,8269,12],[8285,11,8269,13],[8285,15,8269,17],[8285,16,8269,18,"activeServiceWorker"],[8285,35,8269,37],[8285,37,8269,39],[8286,8,8270,12],[8287,6,8271,8],[8288,6,8272,8],[8288,10,8272,12],[8288,11,8272,13,"sender"],[8288,17,8272,19],[8288,20,8272,22],[8288,24,8272,26,"Sender"],[8288,30,8272,32],[8288,31,8272,33],[8288,35,8272,37],[8288,36,8272,38,"activeServiceWorker"],[8288,55,8272,57],[8288,56,8272,58],[8289,6,8273,8],[8290,6,8274,8],[8290,12,8274,14,"results"],[8290,19,8274,21],[8290,22,8274,24],[8290,28,8274,30],[8290,32,8274,34],[8290,33,8274,35,"sender"],[8290,39,8274,41],[8290,40,8274,42,"_send"],[8290,45,8274,47],[8290,46,8274,48],[8290,52,8274,54],[8290,53,8274,55],[8290,76,8274,78],[8290,77,8274,79],[8290,78,8274,80],[8290,80,8274,82],[8290,83,8274,85],[8290,84,8274,86],[8290,115,8274,117],[8290,116,8274,118],[8291,6,8275,8],[8291,10,8275,12],[8291,11,8275,13,"results"],[8291,18,8275,20],[8291,20,8275,22],[8292,8,8276,12],[8293,6,8277,8],[8294,6,8278,8],[8294,10,8278,12,"results"],[8294,17,8278,19],[8294,18,8278,20],[8294,19,8278,21],[8294,20,8278,22],[8294,22,8278,24,"fulfilled"],[8294,31,8278,33],[8294,35,8279,12,"results"],[8294,42,8279,19],[8294,43,8279,20],[8294,44,8279,21],[8294,45,8279,22],[8294,47,8279,24,"value"],[8294,52,8279,29],[8294,53,8279,30,"includes"],[8294,61,8279,38],[8294,62,8279,39],[8294,74,8279,51],[8294,75,8279,52],[8294,103,8279,80],[8294,104,8279,81],[8294,106,8279,83],[8295,8,8280,12],[8295,12,8280,16],[8295,13,8280,17,"serviceWorkerReceiverAvailable"],[8295,43,8280,47],[8295,46,8280,50],[8295,50,8280,54],[8296,6,8281,8],[8297,4,8282,4],[8298,4,8283,4],[8299,0,8284,0],[8300,0,8285,0],[8301,0,8286,0],[8302,0,8287,0],[8303,0,8288,0],[8304,0,8289,0],[8305,0,8290,0],[8306,0,8291,0],[8307,4,8292,4],[8307,10,8292,10,"notifyServiceWorker"],[8307,29,8292,29,"notifyServiceWorker"],[8307,30,8292,30,"key"],[8307,33,8292,33],[8307,35,8292,35],[8308,6,8293,8],[8308,10,8293,12],[8308,11,8293,13],[8308,15,8293,17],[8308,16,8293,18,"sender"],[8308,22,8293,24],[8308,26,8294,12],[8308,27,8294,13],[8308,31,8294,17],[8308,32,8294,18,"activeServiceWorker"],[8308,51,8294,37],[8308,55,8295,12,"_getServiceWorkerController"],[8308,82,8295,39],[8308,83,8295,40],[8308,84,8295,41],[8308,89,8295,46],[8308,93,8295,50],[8308,94,8295,51,"activeServiceWorker"],[8308,113,8295,70],[8308,115,8295,72],[8309,8,8296,12],[8310,6,8297,8],[8311,6,8298,8],[8311,10,8298,12],[8312,8,8299,12],[8312,14,8299,18],[8312,18,8299,22],[8312,19,8299,23,"sender"],[8312,25,8299,29],[8312,26,8299,30,"_send"],[8312,31,8299,35],[8312,32,8299,36],[8312,44,8299,48],[8312,45,8299,49],[8312,75,8299,79],[8313,10,8299,81,"key"],[8314,8,8299,85],[8314,9,8299,86],[8315,8,8300,12],[8316,8,8301,12],[8316,12,8301,16],[8316,13,8301,17,"serviceWorkerReceiverAvailable"],[8316,43,8301,47],[8316,46,8302,18],[8316,49,8302,21],[8316,50,8302,22],[8316,84,8303,18],[8316,86,8303,20],[8316,87,8303,21],[8316,113,8303,47],[8316,114,8303,48],[8317,6,8304,8],[8317,7,8304,9],[8317,8,8305,8],[8317,14,8305,14],[8318,8,8306,12],[8319,6,8306,12],[8320,4,8308,4],[8321,4,8309,4],[8321,10,8309,10,"_isAvailable"],[8321,22,8309,22,"_isAvailable"],[8321,23,8309,22],[8321,25,8309,25],[8322,6,8310,8],[8322,10,8310,12],[8323,8,8311,12],[8323,12,8311,16],[8323,13,8311,17,"indexedDB"],[8323,22,8311,26],[8323,24,8311,28],[8324,10,8312,16],[8324,17,8312,23],[8324,22,8312,28],[8325,8,8313,12],[8326,8,8314,12],[8326,14,8314,18,"db"],[8326,16,8314,20],[8326,19,8314,23],[8326,25,8314,29,"_openDatabase"],[8326,38,8314,42],[8326,39,8314,43],[8326,40,8314,44],[8327,8,8315,12],[8327,14,8315,18,"_putObject"],[8327,24,8315,28],[8327,25,8315,29,"db"],[8327,27,8315,31],[8327,29,8315,33,"STORAGE_AVAILABLE_KEY"],[8327,50,8315,54],[8327,52,8315,56],[8327,55,8315,59],[8327,56,8315,60],[8328,8,8316,12],[8328,14,8316,18,"_deleteObject"],[8328,27,8316,31],[8328,28,8316,32,"db"],[8328,30,8316,34],[8328,32,8316,36,"STORAGE_AVAILABLE_KEY"],[8328,53,8316,57],[8328,54,8316,58],[8329,8,8317,12],[8329,15,8317,19],[8329,19,8317,23],[8330,6,8318,8],[8330,7,8318,9],[8330,8,8319,8],[8330,14,8319,14],[8330,15,8319,16],[8331,6,8320,8],[8331,13,8320,15],[8331,18,8320,20],[8332,4,8321,4],[8333,4,8322,4],[8333,10,8322,10,"_withPendingWrite"],[8333,27,8322,27,"_withPendingWrite"],[8333,28,8322,28,"write"],[8333,33,8322,33],[8333,35,8322,35],[8334,6,8323,8],[8334,10,8323,12],[8334,11,8323,13,"pendingWrites"],[8334,24,8323,26],[8334,26,8323,28],[8335,6,8324,8],[8335,10,8324,12],[8336,8,8325,12],[8336,14,8325,18,"write"],[8336,19,8325,23],[8336,20,8325,24],[8336,21,8325,25],[8337,6,8326,8],[8337,7,8326,9],[8337,16,8327,16],[8338,8,8328,12],[8338,12,8328,16],[8338,13,8328,17,"pendingWrites"],[8338,26,8328,30],[8338,28,8328,32],[8339,6,8329,8],[8340,4,8330,4],[8341,4,8331,4],[8341,10,8331,10,"_set"],[8341,14,8331,14,"_set"],[8341,15,8331,15,"key"],[8341,18,8331,18],[8341,20,8331,20,"value"],[8341,25,8331,25],[8341,27,8331,27],[8342,6,8332,8],[8342,13,8332,15],[8342,17,8332,19],[8342,18,8332,20,"_withPendingWrite"],[8342,35,8332,37],[8342,36,8332,38],[8342,48,8332,50],[8343,8,8333,12],[8343,14,8333,18],[8343,18,8333,22],[8343,19,8333,23,"_withRetries"],[8343,31,8333,35],[8343,32,8333,37,"db"],[8343,34,8333,39],[8343,38,8333,44,"_putObject"],[8343,48,8333,54],[8343,49,8333,55,"db"],[8343,51,8333,57],[8343,53,8333,59,"key"],[8343,56,8333,62],[8343,58,8333,64,"value"],[8343,63,8333,69],[8343,64,8333,70],[8343,65,8333,71],[8344,8,8334,12],[8344,12,8334,16],[8344,13,8334,17,"localCache"],[8344,23,8334,27],[8344,24,8334,28,"key"],[8344,27,8334,31],[8344,28,8334,32],[8344,31,8334,35,"value"],[8344,36,8334,40],[8345,8,8335,12],[8345,15,8335,19],[8345,19,8335,23],[8345,20,8335,24,"notifyServiceWorker"],[8345,39,8335,43],[8345,40,8335,44,"key"],[8345,43,8335,47],[8345,44,8335,48],[8346,6,8336,8],[8346,7,8336,9],[8346,8,8336,10],[8347,4,8337,4],[8348,4,8338,4],[8348,10,8338,10,"_get"],[8348,14,8338,14,"_get"],[8348,15,8338,15,"key"],[8348,18,8338,18],[8348,20,8338,20],[8349,6,8339,8],[8349,12,8339,14,"obj"],[8349,15,8339,17],[8349,18,8339,21],[8349,24,8339,27],[8349,28,8339,31],[8349,29,8339,32,"_withRetries"],[8349,41,8339,44],[8349,42,8339,46,"db"],[8349,44,8339,48],[8349,48,8339,53,"getObject"],[8349,57,8339,62],[8349,58,8339,63,"db"],[8349,60,8339,65],[8349,62,8339,67,"key"],[8349,65,8339,70],[8349,66,8339,71],[8349,67,8339,73],[8350,6,8340,8],[8350,10,8340,12],[8350,11,8340,13,"localCache"],[8350,21,8340,23],[8350,22,8340,24,"key"],[8350,25,8340,27],[8350,26,8340,28],[8350,29,8340,31,"obj"],[8350,32,8340,34],[8351,6,8341,8],[8351,13,8341,15,"obj"],[8351,16,8341,18],[8352,4,8342,4],[8353,4,8343,4],[8353,10,8343,10,"_remove"],[8353,17,8343,17,"_remove"],[8353,18,8343,18,"key"],[8353,21,8343,21],[8353,23,8343,23],[8354,6,8344,8],[8354,13,8344,15],[8354,17,8344,19],[8354,18,8344,20,"_withPendingWrite"],[8354,35,8344,37],[8354,36,8344,38],[8354,48,8344,50],[8355,8,8345,12],[8355,14,8345,18],[8355,18,8345,22],[8355,19,8345,23,"_withRetries"],[8355,31,8345,35],[8355,32,8345,37,"db"],[8355,34,8345,39],[8355,38,8345,44,"_deleteObject"],[8355,51,8345,57],[8355,52,8345,58,"db"],[8355,54,8345,60],[8355,56,8345,62,"key"],[8355,59,8345,65],[8355,60,8345,66],[8355,61,8345,67],[8356,8,8346,12],[8356,15,8346,19],[8356,19,8346,23],[8356,20,8346,24,"localCache"],[8356,30,8346,34],[8356,31,8346,35,"key"],[8356,34,8346,38],[8356,35,8346,39],[8357,8,8347,12],[8357,15,8347,19],[8357,19,8347,23],[8357,20,8347,24,"notifyServiceWorker"],[8357,39,8347,43],[8357,40,8347,44,"key"],[8357,43,8347,47],[8357,44,8347,48],[8358,6,8348,8],[8358,7,8348,9],[8358,8,8348,10],[8359,4,8349,4],[8360,4,8350,4],[8360,10,8350,10,"_poll"],[8360,15,8350,15,"_poll"],[8360,16,8350,15],[8360,18,8350,18],[8361,6,8351,8],[8362,6,8352,8],[8362,12,8352,14,"result"],[8362,18,8352,20],[8362,21,8352,23],[8362,27,8352,29],[8362,31,8352,33],[8362,32,8352,34,"_withRetries"],[8362,44,8352,46],[8362,45,8352,48,"db"],[8362,47,8352,50],[8362,51,8352,55],[8363,8,8353,12],[8363,14,8353,18,"getAllRequest"],[8363,27,8353,31],[8363,30,8353,34,"getObjectStore"],[8363,44,8353,48],[8363,45,8353,49,"db"],[8363,47,8353,51],[8363,49,8353,53],[8363,54,8353,58],[8363,55,8353,59],[8363,56,8353,60,"getAll"],[8363,62,8353,66],[8363,63,8353,67],[8363,64,8353,68],[8364,8,8354,12],[8364,15,8354,19],[8364,19,8354,23,"DBPromise"],[8364,28,8354,32],[8364,29,8354,33,"getAllRequest"],[8364,42,8354,46],[8364,43,8354,47],[8364,44,8354,48,"toPromise"],[8364,53,8354,57],[8364,54,8354,58],[8364,55,8354,59],[8365,6,8355,8],[8365,7,8355,9],[8365,8,8355,10],[8366,6,8356,8],[8366,10,8356,12],[8366,11,8356,13,"result"],[8366,17,8356,19],[8366,19,8356,21],[8367,8,8357,12],[8367,15,8357,19],[8367,17,8357,21],[8368,6,8358,8],[8369,6,8359,8],[8370,6,8360,8],[8370,10,8360,12],[8370,14,8360,16],[8370,15,8360,17,"pendingWrites"],[8370,28,8360,30],[8370,33,8360,35],[8370,34,8360,36],[8370,36,8360,38],[8371,8,8361,12],[8371,15,8361,19],[8371,17,8361,21],[8372,6,8362,8],[8373,6,8363,8],[8373,12,8363,14,"keys"],[8373,16,8363,18],[8373,19,8363,21],[8373,21,8363,23],[8374,6,8364,8],[8374,12,8364,14,"keysInResult"],[8374,24,8364,26],[8374,27,8364,29],[8374,31,8364,33,"Set"],[8374,34,8364,36],[8374,35,8364,37],[8374,36,8364,38],[8375,6,8365,8],[8375,10,8365,12,"result"],[8375,16,8365,18],[8375,17,8365,19,"length"],[8375,23,8365,25],[8375,28,8365,30],[8375,29,8365,31],[8375,31,8365,33],[8376,8,8366,12],[8376,13,8366,17],[8376,19,8366,23],[8377,10,8366,25,"fbase_key"],[8377,19,8366,34],[8377,21,8366,36,"key"],[8377,24,8366,39],[8378,10,8366,41,"value"],[8379,8,8366,47],[8379,9,8366,48],[8379,13,8366,52,"result"],[8379,19,8366,58],[8379,21,8366,60],[8380,10,8367,16,"keysInResult"],[8380,22,8367,28],[8380,23,8367,29,"add"],[8380,26,8367,32],[8380,27,8367,33,"key"],[8380,30,8367,36],[8380,31,8367,37],[8381,10,8368,16],[8381,14,8368,20,"JSON"],[8381,18,8368,24],[8381,19,8368,25,"stringify"],[8381,28,8368,34],[8381,29,8368,35],[8381,33,8368,39],[8381,34,8368,40,"localCache"],[8381,44,8368,50],[8381,45,8368,51,"key"],[8381,48,8368,54],[8381,49,8368,55],[8381,50,8368,56],[8381,55,8368,61,"JSON"],[8381,59,8368,65],[8381,60,8368,66,"stringify"],[8381,69,8368,75],[8381,70,8368,76,"value"],[8381,75,8368,81],[8381,76,8368,82],[8381,78,8368,84],[8382,12,8369,20],[8382,16,8369,24],[8382,17,8369,25,"notifyListeners"],[8382,32,8369,40],[8382,33,8369,41,"key"],[8382,36,8369,44],[8382,38,8369,46,"value"],[8382,43,8369,51],[8382,44,8369,52],[8383,12,8370,20,"keys"],[8383,16,8370,24],[8383,17,8370,25,"push"],[8383,21,8370,29],[8383,22,8370,30,"key"],[8383,25,8370,33],[8383,26,8370,34],[8384,10,8371,16],[8385,8,8372,12],[8386,6,8373,8],[8387,6,8374,8],[8387,11,8374,13],[8387,17,8374,19,"localKey"],[8387,25,8374,27],[8387,29,8374,31,"Object"],[8387,35,8374,37],[8387,36,8374,38,"keys"],[8387,40,8374,42],[8387,41,8374,43],[8387,45,8374,47],[8387,46,8374,48,"localCache"],[8387,56,8374,58],[8387,57,8374,59],[8387,59,8374,61],[8388,8,8375,12],[8388,12,8375,16],[8388,16,8375,20],[8388,17,8375,21,"localCache"],[8388,27,8375,31],[8388,28,8375,32,"localKey"],[8388,36,8375,40],[8388,37,8375,41],[8388,41,8375,45],[8388,42,8375,46,"keysInResult"],[8388,54,8375,58],[8388,55,8375,59,"has"],[8388,58,8375,62],[8388,59,8375,63,"localKey"],[8388,67,8375,71],[8388,68,8375,72],[8388,70,8375,74],[8389,10,8376,16],[8390,10,8377,16],[8390,14,8377,20],[8390,15,8377,21,"notifyListeners"],[8390,30,8377,36],[8390,31,8377,37,"localKey"],[8390,39,8377,45],[8390,41,8377,47],[8390,45,8377,51],[8390,46,8377,52],[8391,10,8378,16,"keys"],[8391,14,8378,20],[8391,15,8378,21,"push"],[8391,19,8378,25],[8391,20,8378,26,"localKey"],[8391,28,8378,34],[8391,29,8378,35],[8392,8,8379,12],[8393,6,8380,8],[8394,6,8381,8],[8394,13,8381,15,"keys"],[8394,17,8381,19],[8395,4,8382,4],[8396,4,8383,4,"notifyListeners"],[8396,19,8383,19,"notifyListeners"],[8396,20,8383,20,"key"],[8396,23,8383,23],[8396,25,8383,25,"newValue"],[8396,33,8383,33],[8396,35,8383,35],[8397,6,8384,8],[8397,10,8384,12],[8397,11,8384,13,"localCache"],[8397,21,8384,23],[8397,22,8384,24,"key"],[8397,25,8384,27],[8397,26,8384,28],[8397,29,8384,31,"newValue"],[8397,37,8384,39],[8398,6,8385,8],[8398,12,8385,14,"listeners"],[8398,21,8385,23],[8398,24,8385,26],[8398,28,8385,30],[8398,29,8385,31,"listeners"],[8398,38,8385,40],[8398,39,8385,41,"key"],[8398,42,8385,44],[8398,43,8385,45],[8399,6,8386,8],[8399,10,8386,12,"listeners"],[8399,19,8386,21],[8399,21,8386,23],[8400,8,8387,12],[8400,13,8387,17],[8400,19,8387,23,"listener"],[8400,27,8387,31],[8400,31,8387,35,"Array"],[8400,36,8387,40],[8400,37,8387,41,"from"],[8400,41,8387,45],[8400,42,8387,46,"listeners"],[8400,51,8387,55],[8400,52,8387,56],[8400,54,8387,58],[8401,10,8388,16,"listener"],[8401,18,8388,24],[8401,19,8388,25,"newValue"],[8401,27,8388,33],[8401,28,8388,34],[8402,8,8389,12],[8403,6,8390,8],[8404,4,8391,4],[8405,4,8392,4,"startPolling"],[8405,16,8392,16,"startPolling"],[8405,17,8392,16],[8405,19,8392,19],[8406,6,8393,8],[8406,10,8393,12],[8406,11,8393,13,"stopPolling"],[8406,22,8393,24],[8406,23,8393,25],[8406,24,8393,26],[8407,6,8394,8],[8407,10,8394,12],[8407,11,8394,13,"pollTimer"],[8407,20,8394,22],[8407,23,8394,25,"setInterval"],[8407,34,8394,36],[8407,35,8394,37],[8407,47,8394,49],[8407,51,8394,53],[8407,52,8394,54,"_poll"],[8407,57,8394,59],[8407,58,8394,60],[8407,59,8394,61],[8407,61,8394,63,"_POLLING_INTERVAL_MS"],[8407,81,8394,83],[8407,82,8394,84],[8408,4,8395,4],[8409,4,8396,4,"stopPolling"],[8409,15,8396,15,"stopPolling"],[8409,16,8396,15],[8409,18,8396,18],[8410,6,8397,8],[8410,10,8397,12],[8410,14,8397,16],[8410,15,8397,17,"pollTimer"],[8410,24,8397,26],[8410,26,8397,28],[8411,8,8398,12,"clearInterval"],[8411,21,8398,25],[8411,22,8398,26],[8411,26,8398,30],[8411,27,8398,31,"pollTimer"],[8411,36,8398,40],[8411,37,8398,41],[8412,8,8399,12],[8412,12,8399,16],[8412,13,8399,17,"pollTimer"],[8412,22,8399,26],[8412,25,8399,29],[8412,29,8399,33],[8413,6,8400,8],[8414,4,8401,4],[8415,4,8402,4,"_addListener"],[8415,16,8402,16,"_addListener"],[8415,17,8402,17,"key"],[8415,20,8402,20],[8415,22,8402,22,"listener"],[8415,30,8402,30],[8415,32,8402,32],[8416,6,8403,8],[8416,10,8403,12,"Object"],[8416,16,8403,18],[8416,17,8403,19,"keys"],[8416,21,8403,23],[8416,22,8403,24],[8416,26,8403,28],[8416,27,8403,29,"listeners"],[8416,36,8403,38],[8416,37,8403,39],[8416,38,8403,40,"length"],[8416,44,8403,46],[8416,49,8403,51],[8416,50,8403,52],[8416,52,8403,54],[8417,8,8404,12],[8417,12,8404,16],[8417,13,8404,17,"startPolling"],[8417,25,8404,29],[8417,26,8404,30],[8417,27,8404,31],[8418,6,8405,8],[8419,6,8406,8],[8419,10,8406,12],[8419,11,8406,13],[8419,15,8406,17],[8419,16,8406,18,"listeners"],[8419,25,8406,27],[8419,26,8406,28,"key"],[8419,29,8406,31],[8419,30,8406,32],[8419,32,8406,34],[8420,8,8407,12],[8420,12,8407,16],[8420,13,8407,17,"listeners"],[8420,22,8407,26],[8420,23,8407,27,"key"],[8420,26,8407,30],[8420,27,8407,31],[8420,30,8407,34],[8420,34,8407,38,"Set"],[8420,37,8407,41],[8420,38,8407,42],[8420,39,8407,43],[8421,8,8408,12],[8422,8,8409,12],[8422,13,8409,17],[8422,17,8409,21],[8422,18,8409,22,"_get"],[8422,22,8409,26],[8422,23,8409,27,"key"],[8422,26,8409,30],[8422,27,8409,31],[8422,28,8409,32],[8422,29,8409,33],[8423,6,8410,8],[8424,6,8411,8],[8424,10,8411,12],[8424,11,8411,13,"listeners"],[8424,20,8411,22],[8424,21,8411,23,"key"],[8424,24,8411,26],[8424,25,8411,27],[8424,26,8411,28,"add"],[8424,29,8411,31],[8424,30,8411,32,"listener"],[8424,38,8411,40],[8424,39,8411,41],[8425,4,8412,4],[8426,4,8413,4,"_removeListener"],[8426,19,8413,19,"_removeListener"],[8426,20,8413,20,"key"],[8426,23,8413,23],[8426,25,8413,25,"listener"],[8426,33,8413,33],[8426,35,8413,35],[8427,6,8414,8],[8427,10,8414,12],[8427,14,8414,16],[8427,15,8414,17,"listeners"],[8427,24,8414,26],[8427,25,8414,27,"key"],[8427,28,8414,30],[8427,29,8414,31],[8427,31,8414,33],[8428,8,8415,12],[8428,12,8415,16],[8428,13,8415,17,"listeners"],[8428,22,8415,26],[8428,23,8415,27,"key"],[8428,26,8415,30],[8428,27,8415,31],[8428,28,8415,32,"delete"],[8428,34,8415,38],[8428,35,8415,39,"listener"],[8428,43,8415,47],[8428,44,8415,48],[8429,8,8416,12],[8429,12,8416,16],[8429,16,8416,20],[8429,17,8416,21,"listeners"],[8429,26,8416,30],[8429,27,8416,31,"key"],[8429,30,8416,34],[8429,31,8416,35],[8429,32,8416,36,"size"],[8429,36,8416,40],[8429,41,8416,45],[8429,42,8416,46],[8429,44,8416,48],[8430,10,8417,16],[8430,17,8417,23],[8430,21,8417,27],[8430,22,8417,28,"listeners"],[8430,31,8417,37],[8430,32,8417,38,"key"],[8430,35,8417,41],[8430,36,8417,42],[8431,8,8418,12],[8432,6,8419,8],[8433,6,8420,8],[8433,10,8420,12,"Object"],[8433,16,8420,18],[8433,17,8420,19,"keys"],[8433,21,8420,23],[8433,22,8420,24],[8433,26,8420,28],[8433,27,8420,29,"listeners"],[8433,36,8420,38],[8433,37,8420,39],[8433,38,8420,40,"length"],[8433,44,8420,46],[8433,49,8420,51],[8433,50,8420,52],[8433,52,8420,54],[8434,8,8421,12],[8434,12,8421,16],[8434,13,8421,17,"stopPolling"],[8434,24,8421,28],[8434,25,8421,29],[8434,26,8421,30],[8435,6,8422,8],[8436,4,8423,4],[8437,2,8424,0],[8438,2,8425,0,"IndexedDBLocalPersistence"],[8438,27,8425,25],[8438,28,8425,26,"type"],[8438,32,8425,30],[8438,35,8425,33],[8438,42,8425,40],[8439,2,8426,0],[8440,0,8427,0],[8441,0,8428,0],[8442,0,8429,0],[8443,0,8430,0],[8444,0,8431,0],[8445,2,8432,0],[8445,8,8432,6,"indexedDBLocalPersistence"],[8445,33,8432,31],[8445,36,8432,31,"exports"],[8445,43,8432,31],[8445,44,8432,31,"i"],[8445,45,8432,31],[8445,48,8432,34,"IndexedDBLocalPersistence"],[8445,73,8432,59],[8447,2,8434,0],[8448,0,8435,0],[8449,0,8436,0],[8450,0,8437,0],[8451,0,8438,0],[8452,0,8439,0],[8453,0,8440,0],[8454,0,8441,0],[8455,0,8442,0],[8456,0,8443,0],[8457,0,8444,0],[8458,0,8445,0],[8459,0,8446,0],[8460,0,8447,0],[8461,0,8448,0],[8462,0,8449,0],[8463,2,8450,0],[8463,11,8450,9,"startSignInPhoneMfa"],[8463,30,8450,28,"startSignInPhoneMfa"],[8463,31,8450,29,"auth"],[8463,35,8450,33],[8463,37,8450,35,"request"],[8463,44,8450,42],[8463,46,8450,44],[8464,4,8451,4],[8464,11,8451,11,"_performApiRequest"],[8464,29,8451,29],[8464,30,8451,30,"auth"],[8464,34,8451,34],[8464,36,8451,36],[8464,42,8451,42],[8464,43,8451,43],[8464,66,8451,66],[8464,96,8451,96],[8464,97,8451,97],[8464,131,8451,131,"_addTidIfNecessary"],[8464,149,8451,149],[8464,150,8451,150,"auth"],[8464,154,8451,154],[8464,156,8451,156,"request"],[8464,163,8451,163],[8464,164,8451,164],[8464,165,8451,165],[8465,2,8452,0],[8466,2,8453,0],[8466,11,8453,9,"finalizeSignInPhoneMfa"],[8466,33,8453,31,"finalizeSignInPhoneMfa"],[8466,34,8453,32,"auth"],[8466,38,8453,36],[8466,40,8453,38,"request"],[8466,47,8453,45],[8466,49,8453,47],[8467,4,8454,4],[8467,11,8454,11,"_performApiRequest"],[8467,29,8454,29],[8467,30,8454,30,"auth"],[8467,34,8454,34],[8467,36,8454,36],[8467,42,8454,42],[8467,43,8454,43],[8467,66,8454,66],[8467,99,8454,99],[8467,100,8454,100],[8467,137,8454,137,"_addTidIfNecessary"],[8467,155,8454,155],[8467,156,8454,156,"auth"],[8467,160,8454,160],[8467,162,8454,162,"request"],[8467,169,8454,169],[8467,170,8454,170],[8467,171,8454,171],[8468,2,8455,0],[8469,2,8456,0],[8469,11,8456,9,"finalizeSignInTotpMfa"],[8469,32,8456,30,"finalizeSignInTotpMfa"],[8469,33,8456,31,"auth"],[8469,37,8456,35],[8469,39,8456,37,"request"],[8469,46,8456,44],[8469,48,8456,46],[8470,4,8457,4],[8470,11,8457,11,"_performApiRequest"],[8470,29,8457,29],[8470,30,8457,30,"auth"],[8470,34,8457,34],[8470,36,8457,36],[8470,42,8457,42],[8470,43,8457,43],[8470,66,8457,66],[8470,99,8457,99],[8470,100,8457,100],[8470,137,8457,137,"_addTidIfNecessary"],[8470,155,8457,155],[8470,156,8457,156,"auth"],[8470,160,8457,160],[8470,162,8457,162,"request"],[8470,169,8457,169],[8470,170,8457,170],[8470,171,8457,171],[8471,2,8458,0],[8473,2,8460,0],[8474,0,8461,0],[8475,0,8462,0],[8476,0,8463,0],[8477,0,8464,0],[8478,0,8465,0],[8479,0,8466,0],[8480,0,8467,0],[8481,0,8468,0],[8482,0,8469,0],[8483,0,8470,0],[8484,0,8471,0],[8485,0,8472,0],[8486,0,8473,0],[8487,0,8474,0],[8488,0,8475,0],[8489,2,8476,0],[8490,2,8477,0],[8491,2,8478,0],[8491,8,8478,6,"_JSLOAD_CALLBACK"],[8491,24,8478,22],[8491,27,8478,25,"_generateCallbackName"],[8491,48,8478,46],[8491,49,8478,47],[8491,54,8478,52],[8491,55,8478,53],[8492,2,8479,0],[8492,8,8479,6,"NETWORK_TIMEOUT_DELAY"],[8492,29,8479,27],[8492,32,8479,30],[8492,36,8479,34,"Delay"],[8492,41,8479,39],[8492,42,8479,40],[8492,47,8479,45],[8492,49,8479,47],[8492,54,8479,52],[8492,55,8479,53],[8493,2,8480,0],[8494,0,8481,0],[8495,0,8482,0],[8496,2,8483,0],[8496,8,8483,6,"ReCaptchaLoaderImpl"],[8496,27,8483,25],[8496,28,8483,26],[8497,4,8484,4,"constructor"],[8497,15,8484,15,"constructor"],[8497,16,8484,15],[8497,18,8484,18],[8498,6,8485,8],[8498,10,8485,12],[8498,11,8485,13,"hostLanguage"],[8498,23,8485,25],[8498,26,8485,28],[8498,28,8485,30],[8499,6,8486,8],[8499,10,8486,12],[8499,11,8486,13,"counter"],[8499,18,8486,20],[8499,21,8486,23],[8499,22,8486,24],[8500,6,8487,8],[8501,0,8488,0],[8502,0,8489,0],[8503,0,8490,0],[8504,0,8491,0],[8505,6,8492,8],[8505,10,8492,12],[8505,11,8492,13,"librarySeparatelyLoaded"],[8505,34,8492,36],[8505,37,8492,39],[8505,38,8492,40],[8505,39,8492,41,"_window"],[8505,46,8492,48],[8505,47,8492,49],[8505,48,8492,50],[8505,49,8492,51,"grecaptcha"],[8505,59,8492,61],[8505,61,8492,63,"render"],[8505,67,8492,69],[8506,4,8493,4],[8507,4,8494,4,"load"],[8507,8,8494,8,"load"],[8507,9,8494,9,"auth"],[8507,13,8494,13],[8507,15,8494,15,"hl"],[8507,17,8494,17],[8507,20,8494,20],[8507,22,8494,22],[8507,24,8494,24],[8508,6,8495,8,"_assert"],[8508,13,8495,15],[8508,14,8495,16,"isHostLanguageValid"],[8508,33,8495,35],[8508,34,8495,36,"hl"],[8508,36,8495,38],[8508,37,8495,39],[8508,39,8495,41,"auth"],[8508,43,8495,45],[8508,45,8495,47],[8508,61,8495,63],[8508,62,8495,64],[8508,96,8495,98],[8508,97,8495,99],[8509,6,8496,8],[8509,10,8496,12],[8509,14,8496,16],[8509,15,8496,17,"shouldResolveImmediately"],[8509,39,8496,41],[8509,40,8496,42,"hl"],[8509,42,8496,44],[8509,43,8496,45],[8509,47,8496,49,"isV2"],[8509,51,8496,53],[8509,52,8496,54,"_window"],[8509,59,8496,61],[8509,60,8496,62],[8509,61,8496,63],[8509,62,8496,64,"grecaptcha"],[8509,72,8496,74],[8509,73,8496,75],[8509,75,8496,77],[8510,8,8497,12],[8510,15,8497,19,"Promise"],[8510,22,8497,26],[8510,23,8497,27,"resolve"],[8510,30,8497,34],[8510,31,8497,35,"_window"],[8510,38,8497,42],[8510,39,8497,43],[8510,40,8497,44],[8510,41,8497,45,"grecaptcha"],[8510,51,8497,55],[8510,52,8497,56],[8511,6,8498,8],[8512,6,8499,8],[8512,13,8499,15],[8512,17,8499,19,"Promise"],[8512,24,8499,26],[8512,25,8499,27],[8512,26,8499,28,"resolve"],[8512,33,8499,35],[8512,35,8499,37,"reject"],[8512,41,8499,43],[8512,46,8499,48],[8513,8,8500,12],[8513,14,8500,18,"networkTimeout"],[8513,28,8500,32],[8513,31,8500,35,"_window"],[8513,38,8500,42],[8513,39,8500,43],[8513,40,8500,44],[8513,41,8500,45,"setTimeout"],[8513,51,8500,55],[8513,52,8500,56],[8513,58,8500,62],[8514,10,8501,16,"reject"],[8514,16,8501,22],[8514,17,8501,23,"_createError"],[8514,29,8501,35],[8514,30,8501,36,"auth"],[8514,34,8501,40],[8514,36,8501,42],[8514,60,8501,66],[8514,61,8501,67],[8514,103,8501,109],[8514,104,8501,110],[8514,105,8501,111],[8515,8,8502,12],[8515,9,8502,13],[8515,11,8502,15,"NETWORK_TIMEOUT_DELAY"],[8515,32,8502,36],[8515,33,8502,37,"get"],[8515,36,8502,40],[8515,37,8502,41],[8515,38,8502,42],[8515,39,8502,43],[8516,8,8503,12,"_window"],[8516,15,8503,19],[8516,16,8503,20],[8516,17,8503,21],[8516,18,8503,22,"_JSLOAD_CALLBACK"],[8516,34,8503,38],[8516,35,8503,39],[8516,38,8503,42],[8516,44,8503,48],[8517,10,8504,16,"_window"],[8517,17,8504,23],[8517,18,8504,24],[8517,19,8504,25],[8517,20,8504,26,"clearTimeout"],[8517,32,8504,38],[8517,33,8504,39,"networkTimeout"],[8517,47,8504,53],[8517,48,8504,54],[8518,10,8505,16],[8518,17,8505,23,"_window"],[8518,24,8505,30],[8518,25,8505,31],[8518,26,8505,32],[8518,27,8505,33,"_JSLOAD_CALLBACK"],[8518,43,8505,49],[8518,44,8505,50],[8519,10,8506,16],[8519,16,8506,22,"recaptcha"],[8519,25,8506,31],[8519,28,8506,34,"_window"],[8519,35,8506,41],[8519,36,8506,42],[8519,37,8506,43],[8519,38,8506,44,"grecaptcha"],[8519,48,8506,54],[8520,10,8507,16],[8520,14,8507,20],[8520,15,8507,21,"recaptcha"],[8520,24,8507,30],[8520,28,8507,34],[8520,29,8507,35,"isV2"],[8520,33,8507,39],[8520,34,8507,40,"recaptcha"],[8520,43,8507,49],[8520,44,8507,50],[8520,46,8507,52],[8521,12,8508,20,"reject"],[8521,18,8508,26],[8521,19,8508,27,"_createError"],[8521,31,8508,39],[8521,32,8508,40,"auth"],[8521,36,8508,44],[8521,38,8508,46],[8521,54,8508,62],[8521,55,8508,63],[8521,89,8508,97],[8521,90,8508,98],[8521,91,8508,99],[8522,12,8509,20],[8523,10,8510,16],[8524,10,8511,16],[8525,10,8512,16],[8526,10,8513,16],[8526,16,8513,22,"render"],[8526,22,8513,28],[8526,25,8513,31,"recaptcha"],[8526,34,8513,40],[8526,35,8513,41,"render"],[8526,41,8513,47],[8527,10,8514,16,"recaptcha"],[8527,19,8514,25],[8527,20,8514,26,"render"],[8527,26,8514,32],[8527,29,8514,35],[8527,30,8514,36,"container"],[8527,39,8514,45],[8527,41,8514,47,"params"],[8527,47,8514,53],[8527,52,8514,58],[8528,12,8515,20],[8528,18,8515,26,"widgetId"],[8528,26,8515,34],[8528,29,8515,37,"render"],[8528,35,8515,43],[8528,36,8515,44,"container"],[8528,45,8515,53],[8528,47,8515,55,"params"],[8528,53,8515,61],[8528,54,8515,62],[8529,12,8516,20],[8529,16,8516,24],[8529,17,8516,25,"counter"],[8529,24,8516,32],[8529,26,8516,34],[8530,12,8517,20],[8530,19,8517,27,"widgetId"],[8530,27,8517,35],[8531,10,8518,16],[8531,11,8518,17],[8532,10,8519,16],[8532,14,8519,20],[8532,15,8519,21,"hostLanguage"],[8532,27,8519,33],[8532,30,8519,36,"hl"],[8532,32,8519,38],[8533,10,8520,16,"resolve"],[8533,17,8520,23],[8533,18,8520,24,"recaptcha"],[8533,27,8520,33],[8533,28,8520,34],[8534,8,8521,12],[8534,9,8521,13],[8535,8,8522,12],[8535,14,8522,18,"url"],[8535,17,8522,21],[8535,20,8522,24],[8535,23,8522,27,"_recaptchaV2ScriptUrl"],[8535,44,8522,48],[8535,45,8522,49],[8535,46,8522,50],[8535,50,8522,54],[8535,54,8522,54,"querystring"],[8535,71,8522,65],[8535,73,8522,66],[8536,10,8523,16,"onload"],[8536,16,8523,22],[8536,18,8523,24,"_JSLOAD_CALLBACK"],[8536,34,8523,40],[8537,10,8524,16,"render"],[8537,16,8524,22],[8537,18,8524,24],[8537,28,8524,34],[8538,10,8525,16,"hl"],[8539,8,8526,12],[8539,9,8526,13],[8539,10,8526,14],[8539,12,8526,16],[8540,8,8527,12,"_loadJS"],[8540,15,8527,19],[8540,16,8527,20,"url"],[8540,19,8527,23],[8540,20,8527,24],[8540,21,8527,25,"catch"],[8540,26,8527,30],[8540,27,8527,31],[8540,33,8527,37],[8541,10,8528,16,"clearTimeout"],[8541,22,8528,28],[8541,23,8528,29,"networkTimeout"],[8541,37,8528,43],[8541,38,8528,44],[8542,10,8529,16,"reject"],[8542,16,8529,22],[8542,17,8529,23,"_createError"],[8542,29,8529,35],[8542,30,8529,36,"auth"],[8542,34,8529,40],[8542,36,8529,42],[8542,52,8529,58],[8542,53,8529,59],[8542,87,8529,93],[8542,88,8529,94],[8542,89,8529,95],[8543,8,8530,12],[8543,9,8530,13],[8543,10,8530,14],[8544,6,8531,8],[8544,7,8531,9],[8544,8,8531,10],[8545,4,8532,4],[8546,4,8533,4,"clearedOneInstance"],[8546,22,8533,22,"clearedOneInstance"],[8546,23,8533,22],[8546,25,8533,25],[8547,6,8534,8],[8547,10,8534,12],[8547,11,8534,13,"counter"],[8547,18,8534,20],[8547,20,8534,22],[8548,4,8535,4],[8549,4,8536,4,"shouldResolveImmediately"],[8549,28,8536,28,"shouldResolveImmediately"],[8549,29,8536,29,"hl"],[8549,31,8536,31],[8549,33,8536,33],[8550,6,8537,8],[8551,6,8538,8],[8552,6,8539,8],[8553,6,8540,8],[8554,6,8541,8],[8555,6,8542,8],[8556,6,8543,8],[8557,6,8544,8],[8557,13,8544,16],[8557,14,8544,17],[8557,15,8544,18,"_window"],[8557,22,8544,25],[8557,23,8544,26],[8557,24,8544,27],[8557,25,8544,28,"grecaptcha"],[8557,35,8544,38],[8557,37,8544,40,"render"],[8557,43,8544,46],[8557,48,8545,13,"hl"],[8557,50,8545,15],[8557,55,8545,20],[8557,59,8545,24],[8557,60,8545,25,"hostLanguage"],[8557,72,8545,37],[8557,76,8546,16],[8557,80,8546,20],[8557,81,8546,21,"counter"],[8557,88,8546,28],[8557,91,8546,31],[8557,92,8546,32],[8557,96,8547,16],[8557,100,8547,20],[8557,101,8547,21,"librarySeparatelyLoaded"],[8557,124,8547,44],[8557,125,8547,45],[8558,4,8548,4],[8559,2,8549,0],[8560,2,8550,0],[8560,11,8550,9,"isHostLanguageValid"],[8560,30,8550,28,"isHostLanguageValid"],[8560,31,8550,29,"hl"],[8560,33,8550,31],[8560,35,8550,33],[8561,4,8551,4],[8561,11,8551,11,"hl"],[8561,13,8551,13],[8561,14,8551,14,"length"],[8561,20,8551,20],[8561,24,8551,24],[8561,25,8551,25],[8561,29,8551,29],[8561,53,8551,53],[8561,54,8551,54,"test"],[8561,58,8551,58],[8561,59,8551,59,"hl"],[8561,61,8551,61],[8561,62,8551,62],[8562,2,8552,0],[8563,2,8553,0],[8563,8,8553,6,"MockReCaptchaLoaderImpl"],[8563,31,8553,29],[8563,32,8553,30],[8564,4,8554,4],[8564,10,8554,10,"load"],[8564,14,8554,14,"load"],[8564,15,8554,15,"auth"],[8564,19,8554,19],[8564,21,8554,21],[8565,6,8555,8],[8565,13,8555,15],[8565,17,8555,19,"MockReCaptcha"],[8565,30,8555,32],[8565,31,8555,33,"auth"],[8565,35,8555,37],[8565,36,8555,38],[8566,4,8556,4],[8567,4,8557,4,"clearedOneInstance"],[8567,22,8557,22,"clearedOneInstance"],[8567,23,8557,22],[8567,25,8557,25],[8567,26,8557,27],[8568,2,8558,0],[8570,2,8560,0],[8571,0,8561,0],[8572,0,8562,0],[8573,0,8563,0],[8574,0,8564,0],[8575,0,8565,0],[8576,0,8566,0],[8577,0,8567,0],[8578,0,8568,0],[8579,0,8569,0],[8580,0,8570,0],[8581,0,8571,0],[8582,0,8572,0],[8583,0,8573,0],[8584,0,8574,0],[8585,0,8575,0],[8586,2,8576,0],[8586,8,8576,6,"RECAPTCHA_VERIFIER_TYPE"],[8586,31,8576,29],[8586,34,8576,32],[8586,45,8576,43],[8587,2,8577,0],[8587,8,8577,6,"DEFAULT_PARAMS"],[8587,22,8577,20],[8587,25,8577,23],[8588,4,8578,4,"theme"],[8588,9,8578,9],[8588,11,8578,11],[8588,18,8578,18],[8589,4,8579,4,"type"],[8589,8,8579,8],[8589,10,8579,10],[8590,2,8580,0],[8590,3,8580,1],[8591,2,8581,0],[8592,0,8582,0],[8593,0,8583,0],[8594,0,8584,0],[8595,0,8585,0],[8596,0,8586,0],[8597,0,8587,0],[8598,0,8588,0],[8599,2,8589,0],[8599,8,8589,6,"RecaptchaVerifier"],[8599,25,8589,23],[8599,26,8589,24],[8600,4,8590,4],[8601,0,8591,0],[8602,0,8592,0],[8603,0,8593,0],[8604,0,8594,0],[8605,0,8595,0],[8606,0,8596,0],[8607,0,8597,0],[8608,0,8598,0],[8609,0,8599,0],[8610,0,8600,0],[8611,0,8601,0],[8612,0,8602,0],[8613,0,8603,0],[8614,0,8604,0],[8615,0,8605,0],[8616,0,8606,0],[8617,0,8607,0],[8618,0,8608,0],[8619,4,8609,4,"constructor"],[8619,15,8609,15,"constructor"],[8619,16,8609,16,"authExtern"],[8619,26,8609,26],[8619,28,8609,28,"containerOrId"],[8619,41,8609,41],[8619,43,8609,43,"parameters"],[8619,53,8609,53],[8619,56,8609,56],[8620,6,8610,8],[8620,9,8610,11,"DEFAULT_PARAMS"],[8621,4,8611,4],[8621,5,8611,5],[8621,7,8611,7],[8622,6,8612,8],[8622,10,8612,12],[8622,11,8612,13,"parameters"],[8622,21,8612,23],[8622,24,8612,26,"parameters"],[8622,34,8612,36],[8623,6,8613,8],[8624,0,8614,0],[8625,0,8615,0],[8626,0,8616,0],[8627,0,8617,0],[8628,0,8618,0],[8629,6,8619,8],[8629,10,8619,12],[8629,11,8619,13,"type"],[8629,15,8619,17],[8629,18,8619,20,"RECAPTCHA_VERIFIER_TYPE"],[8629,41,8619,43],[8630,6,8620,8],[8630,10,8620,12],[8630,11,8620,13,"destroyed"],[8630,20,8620,22],[8630,23,8620,25],[8630,28,8620,30],[8631,6,8621,8],[8631,10,8621,12],[8631,11,8621,13,"widgetId"],[8631,19,8621,21],[8631,22,8621,24],[8631,26,8621,28],[8632,6,8622,8],[8632,10,8622,12],[8632,11,8622,13,"tokenChangeListeners"],[8632,31,8622,33],[8632,34,8622,36],[8632,38,8622,40,"Set"],[8632,41,8622,43],[8632,42,8622,44],[8632,43,8622,45],[8633,6,8623,8],[8633,10,8623,12],[8633,11,8623,13,"renderPromise"],[8633,24,8623,26],[8633,27,8623,29],[8633,31,8623,33],[8634,6,8624,8],[8634,10,8624,12],[8634,11,8624,13,"recaptcha"],[8634,20,8624,22],[8634,23,8624,25],[8634,27,8624,29],[8635,6,8625,8],[8635,10,8625,12],[8635,11,8625,13,"auth"],[8635,15,8625,17],[8635,18,8625,20,"_castAuth"],[8635,27,8625,29],[8635,28,8625,30,"authExtern"],[8635,38,8625,40],[8635,39,8625,41],[8636,6,8626,8],[8636,10,8626,12],[8636,11,8626,13,"isInvisible"],[8636,22,8626,24],[8636,25,8626,27],[8636,29,8626,31],[8636,30,8626,32,"parameters"],[8636,40,8626,42],[8636,41,8626,43,"size"],[8636,45,8626,47],[8636,50,8626,52],[8636,61,8626,63],[8637,6,8627,8,"_assert"],[8637,13,8627,15],[8637,14,8627,16],[8637,21,8627,23,"document"],[8637,29,8627,31],[8637,34,8627,36],[8637,45,8627,47],[8637,47,8627,49],[8637,51,8627,53],[8637,52,8627,54,"auth"],[8637,56,8627,58],[8637,58,8627,60],[8637,103,8627,105],[8637,104,8627,106],[8637,147,8627,149],[8637,148,8627,150],[8638,6,8628,8],[8638,12,8628,14,"container"],[8638,21,8628,23],[8638,24,8628,26],[8638,31,8628,33,"containerOrId"],[8638,44,8628,46],[8638,49,8628,51],[8638,57,8628,59],[8638,60,8629,14,"document"],[8638,68,8629,22],[8638,69,8629,23,"getElementById"],[8638,83,8629,37],[8638,84,8629,38,"containerOrId"],[8638,97,8629,51],[8638,98,8629,52],[8638,101,8630,14,"containerOrId"],[8638,114,8630,27],[8639,6,8631,8,"_assert"],[8639,13,8631,15],[8639,14,8631,16,"container"],[8639,23,8631,25],[8639,25,8631,27],[8639,29,8631,31],[8639,30,8631,32,"auth"],[8639,34,8631,36],[8639,36,8631,38],[8639,52,8631,54],[8639,53,8631,55],[8639,87,8631,89],[8639,88,8631,90],[8640,6,8632,8],[8640,10,8632,12],[8640,11,8632,13,"container"],[8640,20,8632,22],[8640,23,8632,25,"container"],[8640,32,8632,34],[8641,6,8633,8],[8641,10,8633,12],[8641,11,8633,13,"parameters"],[8641,21,8633,23],[8641,22,8633,24,"callback"],[8641,30,8633,32],[8641,33,8633,35],[8641,37,8633,39],[8641,38,8633,40,"makeTokenCallback"],[8641,55,8633,57],[8641,56,8633,58],[8641,60,8633,62],[8641,61,8633,63,"parameters"],[8641,71,8633,73],[8641,72,8633,74,"callback"],[8641,80,8633,82],[8641,81,8633,83],[8642,6,8634,8],[8642,10,8634,12],[8642,11,8634,13,"_recaptchaLoader"],[8642,27,8634,29],[8642,30,8634,32],[8642,34,8634,36],[8642,35,8634,37,"auth"],[8642,39,8634,41],[8642,40,8634,42,"settings"],[8642,48,8634,50],[8642,49,8634,51,"appVerificationDisabledForTesting"],[8642,82,8634,84],[8642,85,8635,14],[8642,89,8635,18,"MockReCaptchaLoaderImpl"],[8642,112,8635,41],[8642,113,8635,42],[8642,114,8635,43],[8642,117,8636,14],[8642,121,8636,18,"ReCaptchaLoaderImpl"],[8642,140,8636,37],[8642,141,8636,38],[8642,142,8636,39],[8643,6,8637,8],[8643,10,8637,12],[8643,11,8637,13,"validateStartingState"],[8643,32,8637,34],[8643,33,8637,35],[8643,34,8637,36],[8644,6,8638,8],[8645,4,8639,4],[8646,4,8640,4],[8647,0,8641,0],[8648,0,8642,0],[8649,0,8643,0],[8650,0,8644,0],[8651,4,8645,4],[8651,10,8645,10,"verify"],[8651,16,8645,16,"verify"],[8651,17,8645,16],[8651,19,8645,19],[8652,6,8646,8],[8652,10,8646,12],[8652,11,8646,13,"assertNotDestroyed"],[8652,29,8646,31],[8652,30,8646,32],[8652,31,8646,33],[8653,6,8647,8],[8653,12,8647,14,"id"],[8653,14,8647,16],[8653,17,8647,19],[8653,23,8647,25],[8653,27,8647,29],[8653,28,8647,30,"render"],[8653,34,8647,36],[8653,35,8647,37],[8653,36,8647,38],[8654,6,8648,8],[8654,12,8648,14,"recaptcha"],[8654,21,8648,23],[8654,24,8648,26],[8654,28,8648,30],[8654,29,8648,31,"getAssertedRecaptcha"],[8654,49,8648,51],[8654,50,8648,52],[8654,51,8648,53],[8655,6,8649,8],[8655,12,8649,14,"response"],[8655,20,8649,22],[8655,23,8649,25,"recaptcha"],[8655,32,8649,34],[8655,33,8649,35,"getResponse"],[8655,44,8649,46],[8655,45,8649,47,"id"],[8655,47,8649,49],[8655,48,8649,50],[8656,6,8650,8],[8656,10,8650,12,"response"],[8656,18,8650,20],[8656,20,8650,22],[8657,8,8651,12],[8657,15,8651,19,"response"],[8657,23,8651,27],[8658,6,8652,8],[8659,6,8653,8],[8659,13,8653,15],[8659,17,8653,19,"Promise"],[8659,24,8653,26],[8659,25,8653,27,"resolve"],[8659,32,8653,34],[8659,36,8653,38],[8660,8,8654,12],[8660,14,8654,18,"tokenChange"],[8660,25,8654,29],[8660,28,8654,33,"token"],[8660,33,8654,38],[8660,37,8654,43],[8661,10,8655,16],[8661,14,8655,20],[8661,15,8655,21,"token"],[8661,20,8655,26],[8661,22,8655,28],[8662,12,8656,20],[8662,19,8656,27],[8662,20,8656,28],[8663,10,8657,16],[8664,10,8658,16],[8664,14,8658,20],[8664,15,8658,21,"tokenChangeListeners"],[8664,35,8658,41],[8664,36,8658,42,"delete"],[8664,42,8658,48],[8664,43,8658,49,"tokenChange"],[8664,54,8658,60],[8664,55,8658,61],[8665,10,8659,16,"resolve"],[8665,17,8659,23],[8665,18,8659,24,"token"],[8665,23,8659,29],[8665,24,8659,30],[8666,8,8660,12],[8666,9,8660,13],[8667,8,8661,12],[8667,12,8661,16],[8667,13,8661,17,"tokenChangeListeners"],[8667,33,8661,37],[8667,34,8661,38,"add"],[8667,37,8661,41],[8667,38,8661,42,"tokenChange"],[8667,49,8661,53],[8667,50,8661,54],[8668,8,8662,12],[8668,12,8662,16],[8668,16,8662,20],[8668,17,8662,21,"isInvisible"],[8668,28,8662,32],[8668,30,8662,34],[8669,10,8663,16,"recaptcha"],[8669,19,8663,25],[8669,20,8663,26,"execute"],[8669,27,8663,33],[8669,28,8663,34,"id"],[8669,30,8663,36],[8669,31,8663,37],[8670,8,8664,12],[8671,6,8665,8],[8671,7,8665,9],[8671,8,8665,10],[8672,4,8666,4],[8673,4,8667,4],[8674,0,8668,0],[8675,0,8669,0],[8676,0,8670,0],[8677,0,8671,0],[8678,4,8672,4,"render"],[8678,10,8672,10,"render"],[8678,11,8672,10],[8678,13,8672,13],[8679,6,8673,8],[8679,10,8673,12],[8680,8,8674,12],[8680,12,8674,16],[8680,13,8674,17,"assertNotDestroyed"],[8680,31,8674,35],[8680,32,8674,36],[8680,33,8674,37],[8681,6,8675,8],[8681,7,8675,9],[8681,8,8676,8],[8681,15,8676,15,"e"],[8681,16,8676,16],[8681,18,8676,18],[8682,8,8677,12],[8683,8,8678,12],[8684,8,8679,12],[8685,8,8680,12],[8685,15,8680,19,"Promise"],[8685,22,8680,26],[8685,23,8680,27,"reject"],[8685,29,8680,33],[8685,30,8680,34,"e"],[8685,31,8680,35],[8685,32,8680,36],[8686,6,8681,8],[8687,6,8682,8],[8687,10,8682,12],[8687,14,8682,16],[8687,15,8682,17,"renderPromise"],[8687,28,8682,30],[8687,30,8682,32],[8688,8,8683,12],[8688,15,8683,19],[8688,19,8683,23],[8688,20,8683,24,"renderPromise"],[8688,33,8683,37],[8689,6,8684,8],[8690,6,8685,8],[8690,10,8685,12],[8690,11,8685,13,"renderPromise"],[8690,24,8685,26],[8690,27,8685,29],[8690,31,8685,33],[8690,32,8685,34,"makeRenderPromise"],[8690,49,8685,51],[8690,50,8685,52],[8690,51,8685,53],[8690,52,8685,54,"catch"],[8690,57,8685,59],[8690,58,8685,60,"e"],[8690,59,8685,61],[8690,63,8685,65],[8691,8,8686,12],[8691,12,8686,16],[8691,13,8686,17,"renderPromise"],[8691,26,8686,30],[8691,29,8686,33],[8691,33,8686,37],[8692,8,8687,12],[8692,14,8687,18,"e"],[8692,15,8687,19],[8693,6,8688,8],[8693,7,8688,9],[8693,8,8688,10],[8694,6,8689,8],[8694,13,8689,15],[8694,17,8689,19],[8694,18,8689,20,"renderPromise"],[8694,31,8689,33],[8695,4,8690,4],[8696,4,8691,4],[8697,4,8692,4,"_reset"],[8697,10,8692,10,"_reset"],[8697,11,8692,10],[8697,13,8692,13],[8698,6,8693,8],[8698,10,8693,12],[8698,11,8693,13,"assertNotDestroyed"],[8698,29,8693,31],[8698,30,8693,32],[8698,31,8693,33],[8699,6,8694,8],[8699,10,8694,12],[8699,14,8694,16],[8699,15,8694,17,"widgetId"],[8699,23,8694,25],[8699,28,8694,30],[8699,32,8694,34],[8699,34,8694,36],[8700,8,8695,12],[8700,12,8695,16],[8700,13,8695,17,"getAssertedRecaptcha"],[8700,33,8695,37],[8700,34,8695,38],[8700,35,8695,39],[8700,36,8695,40,"reset"],[8700,41,8695,45],[8700,42,8695,46],[8700,46,8695,50],[8700,47,8695,51,"widgetId"],[8700,55,8695,59],[8700,56,8695,60],[8701,6,8696,8],[8702,4,8697,4],[8703,4,8698,4],[8704,0,8699,0],[8705,0,8700,0],[8706,4,8701,4,"clear"],[8706,9,8701,9,"clear"],[8706,10,8701,9],[8706,12,8701,12],[8707,6,8702,8],[8707,10,8702,12],[8707,11,8702,13,"assertNotDestroyed"],[8707,29,8702,31],[8707,30,8702,32],[8707,31,8702,33],[8708,6,8703,8],[8708,10,8703,12],[8708,11,8703,13,"destroyed"],[8708,20,8703,22],[8708,23,8703,25],[8708,27,8703,29],[8709,6,8704,8],[8709,10,8704,12],[8709,11,8704,13,"_recaptchaLoader"],[8709,27,8704,29],[8709,28,8704,30,"clearedOneInstance"],[8709,46,8704,48],[8709,47,8704,49],[8709,48,8704,50],[8710,6,8705,8],[8710,10,8705,12],[8710,11,8705,13],[8710,15,8705,17],[8710,16,8705,18,"isInvisible"],[8710,27,8705,29],[8710,29,8705,31],[8711,8,8706,12],[8711,12,8706,16],[8711,13,8706,17,"container"],[8711,22,8706,26],[8711,23,8706,27,"childNodes"],[8711,33,8706,37],[8711,34,8706,38,"forEach"],[8711,41,8706,45],[8711,42,8706,46,"node"],[8711,46,8706,50],[8711,50,8706,54],[8712,10,8707,16],[8712,14,8707,20],[8712,15,8707,21,"container"],[8712,24,8707,30],[8712,25,8707,31,"removeChild"],[8712,36,8707,42],[8712,37,8707,43,"node"],[8712,41,8707,47],[8712,42,8707,48],[8713,8,8708,12],[8713,9,8708,13],[8713,10,8708,14],[8714,6,8709,8],[8715,4,8710,4],[8716,4,8711,4,"validateStartingState"],[8716,25,8711,25,"validateStartingState"],[8716,26,8711,25],[8716,28,8711,28],[8717,6,8712,8,"_assert"],[8717,13,8712,15],[8717,14,8712,16],[8717,15,8712,17],[8717,19,8712,21],[8717,20,8712,22,"parameters"],[8717,30,8712,32],[8717,31,8712,33,"sitekey"],[8717,38,8712,40],[8717,40,8712,42],[8717,44,8712,46],[8717,45,8712,47,"auth"],[8717,49,8712,51],[8717,51,8712,53],[8717,67,8712,69],[8717,68,8712,70],[8717,102,8712,104],[8717,103,8712,105],[8718,6,8713,8,"_assert"],[8718,13,8713,15],[8718,14,8713,16],[8718,18,8713,20],[8718,19,8713,21,"isInvisible"],[8718,30,8713,32],[8718,34,8713,36],[8718,35,8713,37],[8718,39,8713,41],[8718,40,8713,42,"container"],[8718,49,8713,51],[8718,50,8713,52,"hasChildNodes"],[8718,63,8713,65],[8718,64,8713,66],[8718,65,8713,67],[8718,67,8713,69],[8718,71,8713,73],[8718,72,8713,74,"auth"],[8718,76,8713,78],[8718,78,8713,80],[8718,94,8713,96],[8718,95,8713,97],[8718,129,8713,131],[8718,130,8713,132],[8719,6,8714,8,"_assert"],[8719,13,8714,15],[8719,14,8714,16],[8719,21,8714,23,"document"],[8719,29,8714,31],[8719,34,8714,36],[8719,45,8714,47],[8719,47,8714,49],[8719,51,8714,53],[8719,52,8714,54,"auth"],[8719,56,8714,58],[8719,58,8714,60],[8719,103,8714,105],[8719,104,8714,106],[8719,147,8714,149],[8719,148,8714,150],[8720,4,8715,4],[8721,4,8716,4,"makeTokenCallback"],[8721,21,8716,21,"makeTokenCallback"],[8721,22,8716,22,"existing"],[8721,30,8716,30],[8721,32,8716,32],[8722,6,8717,8],[8722,13,8717,15,"token"],[8722,18,8717,20],[8722,22,8717,24],[8723,8,8718,12],[8723,12,8718,16],[8723,13,8718,17,"tokenChangeListeners"],[8723,33,8718,37],[8723,34,8718,38,"forEach"],[8723,41,8718,45],[8723,42,8718,46,"listener"],[8723,50,8718,54],[8723,54,8718,58,"listener"],[8723,62,8718,66],[8723,63,8718,67,"token"],[8723,68,8718,72],[8723,69,8718,73],[8723,70,8718,74],[8724,8,8719,12],[8724,12,8719,16],[8724,19,8719,23,"existing"],[8724,27,8719,31],[8724,32,8719,36],[8724,42,8719,46],[8724,44,8719,48],[8725,10,8720,16,"existing"],[8725,18,8720,24],[8725,19,8720,25,"token"],[8725,24,8720,30],[8725,25,8720,31],[8726,8,8721,12],[8726,9,8721,13],[8726,15,8722,17],[8726,19,8722,21],[8726,26,8722,28,"existing"],[8726,34,8722,36],[8726,39,8722,41],[8726,47,8722,49],[8726,49,8722,51],[8727,10,8723,16],[8727,16,8723,22,"globalFunc"],[8727,26,8723,32],[8727,29,8723,35,"_window"],[8727,36,8723,42],[8727,37,8723,43],[8727,38,8723,44],[8727,39,8723,45,"existing"],[8727,47,8723,53],[8727,48,8723,54],[8728,10,8724,16],[8728,14,8724,20],[8728,21,8724,27,"globalFunc"],[8728,31,8724,37],[8728,36,8724,42],[8728,46,8724,52],[8728,48,8724,54],[8729,12,8725,20,"globalFunc"],[8729,22,8725,30],[8729,23,8725,31,"token"],[8729,28,8725,36],[8729,29,8725,37],[8730,10,8726,16],[8731,8,8727,12],[8732,6,8728,8],[8732,7,8728,9],[8733,4,8729,4],[8734,4,8730,4,"assertNotDestroyed"],[8734,22,8730,22,"assertNotDestroyed"],[8734,23,8730,22],[8734,25,8730,25],[8735,6,8731,8,"_assert"],[8735,13,8731,15],[8735,14,8731,16],[8735,15,8731,17],[8735,19,8731,21],[8735,20,8731,22,"destroyed"],[8735,29,8731,31],[8735,31,8731,33],[8735,35,8731,37],[8735,36,8731,38,"auth"],[8735,40,8731,42],[8735,42,8731,44],[8735,58,8731,60],[8735,59,8731,61],[8735,93,8731,95],[8735,94,8731,96],[8736,4,8732,4],[8737,4,8733,4],[8737,10,8733,10,"makeRenderPromise"],[8737,27,8733,27,"makeRenderPromise"],[8737,28,8733,27],[8737,30,8733,30],[8738,6,8734,8],[8738,12,8734,14],[8738,16,8734,18],[8738,17,8734,19,"init"],[8738,21,8734,23],[8738,22,8734,24],[8738,23,8734,25],[8739,6,8735,8],[8739,10,8735,12],[8739,11,8735,13],[8739,15,8735,17],[8739,16,8735,18,"widgetId"],[8739,24,8735,26],[8739,26,8735,28],[8740,8,8736,12],[8740,12,8736,16,"container"],[8740,21,8736,25],[8740,24,8736,28],[8740,28,8736,32],[8740,29,8736,33,"container"],[8740,38,8736,42],[8741,8,8737,12],[8741,12,8737,16],[8741,13,8737,17],[8741,17,8737,21],[8741,18,8737,22,"isInvisible"],[8741,29,8737,33],[8741,31,8737,35],[8742,10,8738,16],[8742,16,8738,22,"guaranteedEmpty"],[8742,31,8738,37],[8742,34,8738,40,"document"],[8742,42,8738,48],[8742,43,8738,49,"createElement"],[8742,56,8738,62],[8742,57,8738,63],[8742,62,8738,68],[8742,63,8738,69],[8743,10,8739,16,"container"],[8743,19,8739,25],[8743,20,8739,26,"appendChild"],[8743,31,8739,37],[8743,32,8739,38,"guaranteedEmpty"],[8743,47,8739,53],[8743,48,8739,54],[8744,10,8740,16,"container"],[8744,19,8740,25],[8744,22,8740,28,"guaranteedEmpty"],[8744,37,8740,43],[8745,8,8741,12],[8746,8,8742,12],[8746,12,8742,16],[8746,13,8742,17,"widgetId"],[8746,21,8742,25],[8746,24,8742,28],[8746,28,8742,32],[8746,29,8742,33,"getAssertedRecaptcha"],[8746,49,8742,53],[8746,50,8742,54],[8746,51,8742,55],[8746,52,8742,56,"render"],[8746,58,8742,62],[8746,59,8742,63,"container"],[8746,68,8742,72],[8746,70,8742,74],[8746,74,8742,78],[8746,75,8742,79,"parameters"],[8746,85,8742,89],[8746,86,8742,90],[8747,6,8743,8],[8748,6,8744,8],[8748,13,8744,15],[8748,17,8744,19],[8748,18,8744,20,"widgetId"],[8748,26,8744,28],[8749,4,8745,4],[8750,4,8746,4],[8750,10,8746,10,"init"],[8750,14,8746,14,"init"],[8750,15,8746,14],[8750,17,8746,17],[8751,6,8747,8,"_assert"],[8751,13,8747,15],[8751,14,8747,16,"_isHttpOrHttps"],[8751,28,8747,30],[8751,29,8747,31],[8751,30,8747,32],[8751,34,8747,36],[8751,35,8747,37,"_isWorker"],[8751,44,8747,46],[8751,45,8747,47],[8751,46,8747,48],[8751,48,8747,50],[8751,52,8747,54],[8751,53,8747,55,"auth"],[8751,57,8747,59],[8751,59,8747,61],[8751,75,8747,77],[8751,76,8747,78],[8751,110,8747,112],[8751,111,8747,113],[8752,6,8748,8],[8752,12,8748,14,"domReady"],[8752,20,8748,22],[8752,21,8748,23],[8752,22,8748,24],[8753,6,8749,8],[8753,10,8749,12],[8753,11,8749,13,"recaptcha"],[8753,20,8749,22],[8753,23,8749,25],[8753,29,8749,31],[8753,33,8749,35],[8753,34,8749,36,"_recaptchaLoader"],[8753,50,8749,52],[8753,51,8749,53,"load"],[8753,55,8749,57],[8753,56,8749,58],[8753,60,8749,62],[8753,61,8749,63,"auth"],[8753,65,8749,67],[8753,67,8749,69],[8753,71,8749,73],[8753,72,8749,74,"auth"],[8753,76,8749,78],[8753,77,8749,79,"languageCode"],[8753,89,8749,91],[8753,93,8749,95,"undefined"],[8753,102,8749,104],[8753,103,8749,105],[8754,6,8750,8],[8754,12,8750,14,"siteKey"],[8754,19,8750,21],[8754,22,8750,24],[8754,28,8750,30,"getRecaptchaParams"],[8754,46,8750,48],[8754,47,8750,49],[8754,51,8750,53],[8754,52,8750,54,"auth"],[8754,56,8750,58],[8754,57,8750,59],[8755,6,8751,8,"_assert"],[8755,13,8751,15],[8755,14,8751,16,"siteKey"],[8755,21,8751,23],[8755,23,8751,25],[8755,27,8751,29],[8755,28,8751,30,"auth"],[8755,32,8751,34],[8755,34,8751,36],[8755,50,8751,52],[8755,51,8751,53],[8755,85,8751,87],[8755,86,8751,88],[8756,6,8752,8],[8756,10,8752,12],[8756,11,8752,13,"parameters"],[8756,21,8752,23],[8756,22,8752,24,"sitekey"],[8756,29,8752,31],[8756,32,8752,34,"siteKey"],[8756,39,8752,41],[8757,4,8753,4],[8758,4,8754,4,"getAssertedRecaptcha"],[8758,24,8754,24,"getAssertedRecaptcha"],[8758,25,8754,24],[8758,27,8754,27],[8759,6,8755,8,"_assert"],[8759,13,8755,15],[8759,14,8755,16],[8759,18,8755,20],[8759,19,8755,21,"recaptcha"],[8759,28,8755,30],[8759,30,8755,32],[8759,34,8755,36],[8759,35,8755,37,"auth"],[8759,39,8755,41],[8759,41,8755,43],[8759,57,8755,59],[8759,58,8755,60],[8759,92,8755,94],[8759,93,8755,95],[8760,6,8756,8],[8760,13,8756,15],[8760,17,8756,19],[8760,18,8756,20,"recaptcha"],[8760,27,8756,29],[8761,4,8757,4],[8762,2,8758,0],[8763,2,8758,1,"exports"],[8763,9,8758,1],[8763,10,8758,1,"R"],[8763,11,8758,1],[8763,14,8758,1,"RecaptchaVerifier"],[8763,31,8758,1],[8764,2,8759,0],[8764,11,8759,9,"domReady"],[8764,19,8759,17,"domReady"],[8764,20,8759,17],[8764,22,8759,20],[8765,4,8760,4],[8765,8,8760,8,"resolver"],[8765,16,8760,16],[8765,19,8760,19],[8765,23,8760,23],[8766,4,8761,4],[8766,11,8761,11],[8766,15,8761,15,"Promise"],[8766,22,8761,22],[8766,23,8761,23,"resolve"],[8766,30,8761,30],[8766,34,8761,34],[8767,6,8762,8],[8767,10,8762,12,"document"],[8767,18,8762,20],[8767,19,8762,21,"readyState"],[8767,29,8762,31],[8767,34,8762,36],[8767,44,8762,46],[8767,46,8762,48],[8768,8,8763,12,"resolve"],[8768,15,8763,19],[8768,16,8763,20],[8768,17,8763,21],[8769,8,8764,12],[8770,6,8765,8],[8771,6,8766,8],[8772,6,8767,8],[8773,6,8768,8],[8774,6,8769,8,"resolver"],[8774,14,8769,16],[8774,17,8769,19,"resolver"],[8774,18,8769,19],[8774,23,8769,25,"resolve"],[8774,30,8769,32],[8774,31,8769,33],[8774,32,8769,34],[8775,6,8770,8,"window"],[8775,12,8770,14],[8775,13,8770,15,"addEventListener"],[8775,29,8770,31],[8775,30,8770,32],[8775,36,8770,38],[8775,38,8770,40,"resolver"],[8775,46,8770,48],[8775,47,8770,49],[8776,4,8771,4],[8776,5,8771,5],[8776,6,8771,6],[8776,7,8771,7,"catch"],[8776,12,8771,12],[8776,13,8771,13,"e"],[8776,14,8771,14],[8776,18,8771,18],[8777,6,8772,8],[8777,10,8772,12,"resolver"],[8777,18,8772,20],[8777,20,8772,22],[8778,8,8773,12,"window"],[8778,14,8773,18],[8778,15,8773,19,"removeEventListener"],[8778,34,8773,38],[8778,35,8773,39],[8778,41,8773,45],[8778,43,8773,47,"resolver"],[8778,51,8773,55],[8778,52,8773,56],[8779,6,8774,8],[8780,6,8775,8],[8780,12,8775,14,"e"],[8780,13,8775,15],[8781,4,8776,4],[8781,5,8776,5],[8781,6,8776,6],[8782,2,8777,0],[8784,2,8779,0],[8785,0,8780,0],[8786,0,8781,0],[8787,0,8782,0],[8788,0,8783,0],[8789,0,8784,0],[8790,0,8785,0],[8791,0,8786,0],[8792,0,8787,0],[8793,0,8788,0],[8794,0,8789,0],[8795,0,8790,0],[8796,0,8791,0],[8797,0,8792,0],[8798,0,8793,0],[8799,0,8794,0],[8800,2,8795,0],[8800,8,8795,6,"ConfirmationResultImpl"],[8800,30,8795,28],[8800,31,8795,29],[8801,4,8796,4,"constructor"],[8801,15,8796,15,"constructor"],[8801,16,8796,16,"verificationId"],[8801,30,8796,30],[8801,32,8796,32,"onConfirmation"],[8801,46,8796,46],[8801,48,8796,48],[8802,6,8797,8],[8802,10,8797,12],[8802,11,8797,13,"verificationId"],[8802,25,8797,27],[8802,28,8797,30,"verificationId"],[8802,42,8797,44],[8803,6,8798,8],[8803,10,8798,12],[8803,11,8798,13,"onConfirmation"],[8803,25,8798,27],[8803,28,8798,30,"onConfirmation"],[8803,42,8798,44],[8804,4,8799,4],[8805,4,8800,4,"confirm"],[8805,11,8800,11,"confirm"],[8805,12,8800,12,"verificationCode"],[8805,28,8800,28],[8805,30,8800,30],[8806,6,8801,8],[8806,12,8801,14,"authCredential"],[8806,26,8801,28],[8806,29,8801,31,"PhoneAuthCredential"],[8806,48,8801,50],[8806,49,8801,51,"_fromVerification"],[8806,66,8801,68],[8806,67,8801,69],[8806,71,8801,73],[8806,72,8801,74,"verificationId"],[8806,86,8801,88],[8806,88,8801,90,"verificationCode"],[8806,104,8801,106],[8806,105,8801,107],[8807,6,8802,8],[8807,13,8802,15],[8807,17,8802,19],[8807,18,8802,20,"onConfirmation"],[8807,32,8802,34],[8807,33,8802,35,"authCredential"],[8807,47,8802,49],[8807,48,8802,50],[8808,4,8803,4],[8809,2,8804,0],[8810,2,8805,0],[8811,0,8806,0],[8812,0,8807,0],[8813,0,8808,0],[8814,0,8809,0],[8815,0,8810,0],[8816,0,8811,0],[8817,0,8812,0],[8818,0,8813,0],[8819,0,8814,0],[8820,0,8815,0],[8821,0,8816,0],[8822,0,8817,0],[8823,0,8818,0],[8824,0,8819,0],[8825,0,8820,0],[8826,0,8821,0],[8827,0,8822,0],[8828,0,8823,0],[8829,0,8824,0],[8830,0,8825,0],[8831,0,8826,0],[8832,0,8827,0],[8833,0,8828,0],[8834,0,8829,0],[8835,0,8830,0],[8836,0,8831,0],[8837,0,8832,0],[8838,0,8833,0],[8839,0,8834,0],[8840,0,8835,0],[8841,0,8836,0],[8842,0,8837,0],[8843,0,8838,0],[8844,0,8839,0],[8845,0,8840,0],[8846,2,8841,0],[8846,17,8841,15,"signInWithPhoneNumber"],[8846,38,8841,36,"signInWithPhoneNumber"],[8846,39,8841,37,"auth"],[8846,43,8841,41],[8846,45,8841,43,"phoneNumber"],[8846,56,8841,54],[8846,58,8841,56,"appVerifier"],[8846,69,8841,67],[8846,71,8841,69],[8847,4,8842,4],[8847,8,8842,8],[8847,12,8842,8,"_isFirebaseServerApp"],[8847,37,8842,28],[8847,39,8842,29,"auth"],[8847,43,8842,33],[8847,44,8842,34,"app"],[8847,47,8842,37],[8847,48,8842,38],[8847,50,8842,40],[8848,6,8843,8],[8848,13,8843,15,"Promise"],[8848,20,8843,22],[8848,21,8843,23,"reject"],[8848,27,8843,29],[8848,28,8843,30,"_serverAppCurrentUserOperationNotSupportedError"],[8848,75,8843,77],[8848,76,8843,78,"auth"],[8848,80,8843,82],[8848,81,8843,83],[8848,82,8843,84],[8849,4,8844,4],[8850,4,8845,4],[8850,10,8845,10,"authInternal"],[8850,22,8845,22],[8850,25,8845,25,"_castAuth"],[8850,34,8845,34],[8850,35,8845,35,"auth"],[8850,39,8845,39],[8850,40,8845,40],[8851,4,8846,4],[8851,10,8846,10,"verificationId"],[8851,24,8846,24],[8851,27,8846,27],[8851,33,8846,33,"_verifyPhoneNumber"],[8851,51,8846,51],[8851,52,8846,52,"authInternal"],[8851,64,8846,64],[8851,66,8846,66,"phoneNumber"],[8851,77,8846,77],[8851,79,8846,79],[8851,83,8846,79,"getModularInstance"],[8851,107,8846,97],[8851,109,8846,98,"appVerifier"],[8851,120,8846,109],[8851,121,8846,110],[8851,122,8846,111],[8852,4,8847,4],[8852,11,8847,11],[8852,15,8847,15,"ConfirmationResultImpl"],[8852,37,8847,37],[8852,38,8847,38,"verificationId"],[8852,52,8847,52],[8852,54,8847,54,"cred"],[8852,58,8847,58],[8852,62,8847,62,"signInWithCredential"],[8852,82,8847,82],[8852,83,8847,83,"authInternal"],[8852,95,8847,95],[8852,97,8847,97,"cred"],[8852,101,8847,101],[8852,102,8847,102],[8852,103,8847,103],[8853,2,8848,0],[8854,2,8849,0],[8855,0,8850,0],[8856,0,8851,0],[8857,0,8852,0],[8858,0,8853,0],[8859,0,8854,0],[8860,0,8855,0],[8861,0,8856,0],[8862,0,8857,0],[8863,0,8858,0],[8864,0,8859,0],[8865,0,8860,0],[8866,2,8861,0],[8866,17,8861,15,"linkWithPhoneNumber"],[8866,36,8861,34,"linkWithPhoneNumber"],[8866,37,8861,35,"user"],[8866,41,8861,39],[8866,43,8861,41,"phoneNumber"],[8866,54,8861,52],[8866,56,8861,54,"appVerifier"],[8866,67,8861,65],[8866,69,8861,67],[8867,4,8862,4],[8867,10,8862,10,"userInternal"],[8867,22,8862,22],[8867,25,8862,25],[8867,29,8862,25,"getModularInstance"],[8867,53,8862,43],[8867,55,8862,44,"user"],[8867,59,8862,48],[8867,60,8862,49],[8868,4,8863,4],[8868,10,8863,10,"_assertLinkedStatus"],[8868,29,8863,29],[8868,30,8863,30],[8868,35,8863,35],[8868,37,8863,37,"userInternal"],[8868,49,8863,49],[8868,51,8863,51],[8868,58,8863,58],[8868,59,8863,59],[8868,81,8863,81],[8868,82,8863,82],[8869,4,8864,4],[8869,10,8864,10,"verificationId"],[8869,24,8864,24],[8869,27,8864,27],[8869,33,8864,33,"_verifyPhoneNumber"],[8869,51,8864,51],[8869,52,8864,52,"userInternal"],[8869,64,8864,64],[8869,65,8864,65,"auth"],[8869,69,8864,69],[8869,71,8864,71,"phoneNumber"],[8869,82,8864,82],[8869,84,8864,84],[8869,88,8864,84,"getModularInstance"],[8869,112,8864,102],[8869,114,8864,103,"appVerifier"],[8869,125,8864,114],[8869,126,8864,115],[8869,127,8864,116],[8870,4,8865,4],[8870,11,8865,11],[8870,15,8865,15,"ConfirmationResultImpl"],[8870,37,8865,37],[8870,38,8865,38,"verificationId"],[8870,52,8865,52],[8870,54,8865,54,"cred"],[8870,58,8865,58],[8870,62,8865,62,"linkWithCredential"],[8870,80,8865,80],[8870,81,8865,81,"userInternal"],[8870,93,8865,93],[8870,95,8865,95,"cred"],[8870,99,8865,99],[8870,100,8865,100],[8870,101,8865,101],[8871,2,8866,0],[8872,2,8867,0],[8873,0,8868,0],[8874,0,8869,0],[8875,0,8870,0],[8876,0,8871,0],[8877,0,8872,0],[8878,0,8873,0],[8879,0,8874,0],[8880,0,8875,0],[8881,0,8876,0],[8882,0,8877,0],[8883,0,8878,0],[8884,0,8879,0],[8885,0,8880,0],[8886,0,8881,0],[8887,2,8882,0],[8887,17,8882,15,"reauthenticateWithPhoneNumber"],[8887,46,8882,44,"reauthenticateWithPhoneNumber"],[8887,47,8882,45,"user"],[8887,51,8882,49],[8887,53,8882,51,"phoneNumber"],[8887,64,8882,62],[8887,66,8882,64,"appVerifier"],[8887,77,8882,75],[8887,79,8882,77],[8888,4,8883,4],[8888,10,8883,10,"userInternal"],[8888,22,8883,22],[8888,25,8883,25],[8888,29,8883,25,"getModularInstance"],[8888,53,8883,43],[8888,55,8883,44,"user"],[8888,59,8883,48],[8888,60,8883,49],[8889,4,8884,4],[8889,8,8884,8],[8889,12,8884,8,"_isFirebaseServerApp"],[8889,37,8884,28],[8889,39,8884,29,"userInternal"],[8889,51,8884,41],[8889,52,8884,42,"auth"],[8889,56,8884,46],[8889,57,8884,47,"app"],[8889,60,8884,50],[8889,61,8884,51],[8889,63,8884,53],[8890,6,8885,8],[8890,13,8885,15,"Promise"],[8890,20,8885,22],[8890,21,8885,23,"reject"],[8890,27,8885,29],[8890,28,8885,30,"_serverAppCurrentUserOperationNotSupportedError"],[8890,75,8885,77],[8890,76,8885,78,"userInternal"],[8890,88,8885,90],[8890,89,8885,91,"auth"],[8890,93,8885,95],[8890,94,8885,96],[8890,95,8885,97],[8891,4,8886,4],[8892,4,8887,4],[8892,10,8887,10,"verificationId"],[8892,24,8887,24],[8892,27,8887,27],[8892,33,8887,33,"_verifyPhoneNumber"],[8892,51,8887,51],[8892,52,8887,52,"userInternal"],[8892,64,8887,64],[8892,65,8887,65,"auth"],[8892,69,8887,69],[8892,71,8887,71,"phoneNumber"],[8892,82,8887,82],[8892,84,8887,84],[8892,88,8887,84,"getModularInstance"],[8892,112,8887,102],[8892,114,8887,103,"appVerifier"],[8892,125,8887,114],[8892,126,8887,115],[8892,127,8887,116],[8893,4,8888,4],[8893,11,8888,11],[8893,15,8888,15,"ConfirmationResultImpl"],[8893,37,8888,37],[8893,38,8888,38,"verificationId"],[8893,52,8888,52],[8893,54,8888,54,"cred"],[8893,58,8888,58],[8893,62,8888,62,"reauthenticateWithCredential"],[8893,90,8888,90],[8893,91,8888,91,"userInternal"],[8893,103,8888,103],[8893,105,8888,105,"cred"],[8893,109,8888,109],[8893,110,8888,110],[8893,111,8888,111],[8894,2,8889,0],[8895,2,8890,0],[8896,0,8891,0],[8897,0,8892,0],[8898,0,8893,0],[8899,2,8894,0],[8899,17,8894,15,"_verifyPhoneNumber"],[8899,35,8894,33,"_verifyPhoneNumber"],[8899,36,8894,34,"auth"],[8899,40,8894,38],[8899,42,8894,40,"options"],[8899,49,8894,47],[8899,51,8894,49,"verifier"],[8899,59,8894,57],[8899,61,8894,59],[8900,4,8895,4],[8900,8,8895,8],[8900,9,8895,9,"auth"],[8900,13,8895,13],[8900,14,8895,14,"_getRecaptchaConfig"],[8900,33,8895,33],[8900,34,8895,34],[8900,35,8895,35],[8900,37,8895,37],[8901,6,8896,8],[8901,10,8896,12],[8902,8,8897,12],[8902,14,8897,18,"_initializeRecaptchaConfig"],[8902,40,8897,44],[8902,41,8897,45,"auth"],[8902,45,8897,49],[8902,46,8897,50],[8903,6,8898,8],[8903,7,8898,9],[8903,8,8899,8],[8903,15,8899,15,"error"],[8903,20,8899,20],[8903,22,8899,22],[8904,8,8900,12],[8905,8,8901,12],[8906,8,8902,12],[8907,8,8903,12],[8908,8,8904,12,"console"],[8908,15,8904,19],[8908,16,8904,20,"log"],[8908,19,8904,23],[8908,20,8904,24],[8908,113,8904,117],[8908,114,8904,118],[8909,6,8905,8],[8910,4,8906,4],[8911,4,8907,4],[8911,8,8907,8],[8912,6,8908,8],[8912,10,8908,12,"phoneInfoOptions"],[8912,26,8908,28],[8913,6,8909,8],[8913,10,8909,12],[8913,17,8909,19,"options"],[8913,24,8909,26],[8913,29,8909,31],[8913,37,8909,39],[8913,39,8909,41],[8914,8,8910,12,"phoneInfoOptions"],[8914,24,8910,28],[8914,27,8910,31],[8915,10,8911,16,"phoneNumber"],[8915,21,8911,27],[8915,23,8911,29,"options"],[8916,8,8912,12],[8916,9,8912,13],[8917,6,8913,8],[8917,7,8913,9],[8917,13,8914,13],[8918,8,8915,12,"phoneInfoOptions"],[8918,24,8915,28],[8918,27,8915,31,"options"],[8918,34,8915,38],[8919,6,8916,8],[8920,6,8917,8],[8920,10,8917,12],[8920,19,8917,21],[8920,23,8917,25,"phoneInfoOptions"],[8920,39,8917,41],[8920,41,8917,43],[8921,8,8918,12],[8921,14,8918,18,"session"],[8921,21,8918,25],[8921,24,8918,28,"phoneInfoOptions"],[8921,40,8918,44],[8921,41,8918,45,"session"],[8921,48,8918,52],[8922,8,8919,12],[8922,12,8919,16],[8922,25,8919,29],[8922,29,8919,33,"phoneInfoOptions"],[8922,45,8919,49],[8922,47,8919,51],[8923,10,8920,16,"_assert"],[8923,17,8920,23],[8923,18,8920,24,"session"],[8923,25,8920,31],[8923,26,8920,32,"type"],[8923,30,8920,36],[8923,35,8920,41],[8923,43,8920,49],[8923,44,8920,50],[8923,81,8920,87,"auth"],[8923,85,8920,91],[8923,87,8920,93],[8923,103,8920,109],[8923,104,8920,110],[8923,138,8920,144],[8923,139,8920,145],[8924,10,8921,16],[8924,16,8921,22,"startPhoneMfaEnrollmentRequest"],[8924,46,8921,52],[8924,49,8921,55],[8925,12,8922,20,"idToken"],[8925,19,8922,27],[8925,21,8922,29,"session"],[8925,28,8922,36],[8925,29,8922,37,"credential"],[8925,39,8922,47],[8926,12,8923,20,"phoneEnrollmentInfo"],[8926,31,8923,39],[8926,33,8923,41],[8927,14,8924,24,"phoneNumber"],[8927,25,8924,35],[8927,27,8924,37,"phoneInfoOptions"],[8927,43,8924,53],[8927,44,8924,54,"phoneNumber"],[8927,55,8924,65],[8928,14,8925,24,"clientType"],[8928,24,8925,34],[8928,26,8925,36],[8928,43,8925,53],[8928,44,8925,54],[8929,12,8926,20],[8930,10,8927,16],[8930,11,8927,17],[8931,10,8928,16],[8931,16,8928,22,"startEnrollPhoneMfaActionCallback"],[8931,49,8928,55],[8931,52,8928,58],[8931,58,8928,58,"startEnrollPhoneMfaActionCallback"],[8931,59,8928,65,"authInstance"],[8931,71,8928,77],[8931,73,8928,79,"request"],[8931,80,8928,86],[8931,85,8928,91],[8932,12,8929,20],[8933,12,8930,20],[8933,16,8930,24,"request"],[8933,23,8930,31],[8933,24,8930,32,"phoneEnrollmentInfo"],[8933,43,8930,51],[8933,44,8930,52,"captchaResponse"],[8933,59,8930,67],[8933,64,8930,72,"FAKE_TOKEN"],[8933,74,8930,82],[8933,76,8930,84],[8934,14,8931,24,"_assert"],[8934,21,8931,31],[8934,22,8931,32,"verifier"],[8934,30,8931,40],[8934,32,8931,42,"type"],[8934,36,8931,46],[8934,41,8931,51,"RECAPTCHA_VERIFIER_TYPE"],[8934,64,8931,74],[8934,66,8931,76,"authInstance"],[8934,78,8931,88],[8934,80,8931,90],[8934,96,8931,106],[8934,97,8931,107],[8934,131,8931,141],[8934,132,8931,142],[8935,14,8932,24],[8935,20,8932,30,"requestWithRecaptchaV2"],[8935,42,8932,52],[8935,45,8932,55],[8935,51,8932,61,"injectRecaptchaV2Token"],[8935,73,8932,83],[8935,74,8932,84,"authInstance"],[8935,86,8932,96],[8935,88,8932,98,"request"],[8935,95,8932,105],[8935,97,8932,107,"verifier"],[8935,105,8932,115],[8935,106,8932,116],[8936,14,8933,24],[8936,21,8933,31,"startEnrollPhoneMfa"],[8936,40,8933,50],[8936,41,8933,51,"authInstance"],[8936,53,8933,63],[8936,55,8933,65,"requestWithRecaptchaV2"],[8936,77,8933,87],[8936,78,8933,88],[8937,12,8934,20],[8938,12,8935,20],[8938,19,8935,27,"startEnrollPhoneMfa"],[8938,38,8935,46],[8938,39,8935,47,"authInstance"],[8938,51,8935,59],[8938,53,8935,61,"request"],[8938,60,8935,68],[8938,61,8935,69],[8939,10,8936,16],[8939,11,8936,17],[8940,10,8937,16],[8940,16,8937,22,"startPhoneMfaEnrollmentResponse"],[8940,47,8937,53],[8940,50,8937,56,"handleRecaptchaFlow"],[8940,69,8937,75],[8940,70,8937,76,"auth"],[8940,74,8937,80],[8940,76,8937,82,"startPhoneMfaEnrollmentRequest"],[8940,106,8937,112],[8940,108,8937,114],[8940,126,8937,132],[8940,127,8937,133],[8940,173,8937,179,"startEnrollPhoneMfaActionCallback"],[8940,206,8937,212],[8940,208,8937,214],[8940,224,8937,230],[8940,225,8937,231],[8940,267,8937,273],[8940,268,8937,274],[8941,10,8938,16],[8941,16,8938,22,"response"],[8941,24,8938,30],[8941,27,8938,33],[8941,33,8938,39,"startPhoneMfaEnrollmentResponse"],[8941,64,8938,70],[8941,65,8938,71,"catch"],[8941,70,8938,76],[8941,71,8938,77,"error"],[8941,76,8938,82],[8941,80,8938,86],[8942,12,8939,20],[8942,19,8939,27,"Promise"],[8942,26,8939,34],[8942,27,8939,35,"reject"],[8942,33,8939,41],[8942,34,8939,42,"error"],[8942,39,8939,47],[8942,40,8939,48],[8943,10,8940,16],[8943,11,8940,17],[8943,12,8940,18],[8944,10,8941,16],[8944,17,8941,23,"response"],[8944,25,8941,31],[8944,26,8941,32,"phoneSessionInfo"],[8944,42,8941,48],[8944,43,8941,49,"sessionInfo"],[8944,54,8941,60],[8945,8,8942,12],[8945,9,8942,13],[8945,15,8943,17],[8946,10,8944,16,"_assert"],[8946,17,8944,23],[8946,18,8944,24,"session"],[8946,25,8944,31],[8946,26,8944,32,"type"],[8946,30,8944,36],[8946,35,8944,41],[8946,43,8944,49],[8946,44,8944,50],[8946,82,8944,88,"auth"],[8946,86,8944,92],[8946,88,8944,94],[8946,104,8944,110],[8946,105,8944,111],[8946,139,8944,145],[8946,140,8944,146],[8947,10,8945,16],[8947,16,8945,22,"mfaEnrollmentId"],[8947,31,8945,37],[8947,34,8945,40,"phoneInfoOptions"],[8947,50,8945,56],[8947,51,8945,57,"multiFactorHint"],[8947,66,8945,72],[8947,68,8945,74,"uid"],[8947,71,8945,77],[8947,75,8946,20,"phoneInfoOptions"],[8947,91,8946,36],[8947,92,8946,37,"multiFactorUid"],[8947,106,8946,51],[8948,10,8947,16,"_assert"],[8948,17,8947,23],[8948,18,8947,24,"mfaEnrollmentId"],[8948,33,8947,39],[8948,35,8947,41,"auth"],[8948,39,8947,45],[8948,41,8947,47],[8948,68,8947,74],[8948,69,8947,75],[8948,105,8947,111],[8948,106,8947,112],[8949,10,8948,16],[8949,16,8948,22,"startPhoneMfaSignInRequest"],[8949,42,8948,48],[8949,45,8948,51],[8950,12,8949,20,"mfaPendingCredential"],[8950,32,8949,40],[8950,34,8949,42,"session"],[8950,41,8949,49],[8950,42,8949,50,"credential"],[8950,52,8949,60],[8951,12,8950,20,"mfaEnrollmentId"],[8951,27,8950,35],[8952,12,8951,20,"phoneSignInInfo"],[8952,27,8951,35],[8952,29,8951,37],[8953,14,8952,24,"clientType"],[8953,24,8952,34],[8953,26,8952,36],[8953,43,8952,53],[8953,44,8952,54],[8954,12,8953,20],[8955,10,8954,16],[8955,11,8954,17],[8956,10,8955,16],[8956,16,8955,22,"startSignInPhoneMfaActionCallback"],[8956,49,8955,55],[8956,52,8955,58],[8956,58,8955,58,"startSignInPhoneMfaActionCallback"],[8956,59,8955,65,"authInstance"],[8956,71,8955,77],[8956,73,8955,79,"request"],[8956,80,8955,86],[8956,85,8955,91],[8957,12,8956,20],[8958,12,8957,20],[8958,16,8957,24,"request"],[8958,23,8957,31],[8958,24,8957,32,"phoneSignInInfo"],[8958,39,8957,47],[8958,40,8957,48,"captchaResponse"],[8958,55,8957,63],[8958,60,8957,68,"FAKE_TOKEN"],[8958,70,8957,78],[8958,72,8957,80],[8959,14,8958,24,"_assert"],[8959,21,8958,31],[8959,22,8958,32,"verifier"],[8959,30,8958,40],[8959,32,8958,42,"type"],[8959,36,8958,46],[8959,41,8958,51,"RECAPTCHA_VERIFIER_TYPE"],[8959,64,8958,74],[8959,66,8958,76,"authInstance"],[8959,78,8958,88],[8959,80,8958,90],[8959,96,8958,106],[8959,97,8958,107],[8959,131,8958,141],[8959,132,8958,142],[8960,14,8959,24],[8960,20,8959,30,"requestWithRecaptchaV2"],[8960,42,8959,52],[8960,45,8959,55],[8960,51,8959,61,"injectRecaptchaV2Token"],[8960,73,8959,83],[8960,74,8959,84,"authInstance"],[8960,86,8959,96],[8960,88,8959,98,"request"],[8960,95,8959,105],[8960,97,8959,107,"verifier"],[8960,105,8959,115],[8960,106,8959,116],[8961,14,8960,24],[8961,21,8960,31,"startSignInPhoneMfa"],[8961,40,8960,50],[8961,41,8960,51,"authInstance"],[8961,53,8960,63],[8961,55,8960,65,"requestWithRecaptchaV2"],[8961,77,8960,87],[8961,78,8960,88],[8962,12,8961,20],[8963,12,8962,20],[8963,19,8962,27,"startSignInPhoneMfa"],[8963,38,8962,46],[8963,39,8962,47,"authInstance"],[8963,51,8962,59],[8963,53,8962,61,"request"],[8963,60,8962,68],[8963,61,8962,69],[8964,10,8963,16],[8964,11,8963,17],[8965,10,8964,16],[8965,16,8964,22,"startPhoneMfaSignInResponse"],[8965,43,8964,49],[8965,46,8964,52,"handleRecaptchaFlow"],[8965,65,8964,71],[8965,66,8964,72,"auth"],[8965,70,8964,76],[8965,72,8964,78,"startPhoneMfaSignInRequest"],[8965,98,8964,104],[8965,100,8964,106],[8965,114,8964,120],[8965,115,8964,121],[8965,157,8964,163,"startSignInPhoneMfaActionCallback"],[8965,190,8964,196],[8965,192,8964,198],[8965,208,8964,214],[8965,209,8964,215],[8965,251,8964,257],[8965,252,8964,258],[8966,10,8965,16],[8966,16,8965,22,"response"],[8966,24,8965,30],[8966,27,8965,33],[8966,33,8965,39,"startPhoneMfaSignInResponse"],[8966,60,8965,66],[8966,61,8965,67,"catch"],[8966,66,8965,72],[8966,67,8965,73,"error"],[8966,72,8965,78],[8966,76,8965,82],[8967,12,8966,20],[8967,19,8966,27,"Promise"],[8967,26,8966,34],[8967,27,8966,35,"reject"],[8967,33,8966,41],[8967,34,8966,42,"error"],[8967,39,8966,47],[8967,40,8966,48],[8968,10,8967,16],[8968,11,8967,17],[8968,12,8967,18],[8969,10,8968,16],[8969,17,8968,23,"response"],[8969,25,8968,31],[8969,26,8968,32,"phoneResponseInfo"],[8969,43,8968,49],[8969,44,8968,50,"sessionInfo"],[8969,55,8968,61],[8970,8,8969,12],[8971,6,8970,8],[8971,7,8970,9],[8971,13,8971,13],[8972,8,8972,12],[8972,14,8972,18,"sendPhoneVerificationCodeRequest"],[8972,46,8972,50],[8972,49,8972,53],[8973,10,8973,16,"phoneNumber"],[8973,21,8973,27],[8973,23,8973,29,"phoneInfoOptions"],[8973,39,8973,45],[8973,40,8973,46,"phoneNumber"],[8973,51,8973,57],[8974,10,8974,16,"clientType"],[8974,20,8974,26],[8974,22,8974,28],[8974,39,8974,45],[8974,40,8974,46],[8975,8,8975,12],[8975,9,8975,13],[8976,8,8976,12],[8976,14,8976,18,"sendPhoneVerificationCodeActionCallback"],[8976,53,8976,57],[8976,56,8976,60],[8976,62,8976,60,"sendPhoneVerificationCodeActionCallback"],[8976,63,8976,67,"authInstance"],[8976,75,8976,79],[8976,77,8976,81,"request"],[8976,84,8976,88],[8976,89,8976,93],[8977,10,8977,16],[8978,10,8978,16],[8978,14,8978,20,"request"],[8978,21,8978,27],[8978,22,8978,28,"captchaResponse"],[8978,37,8978,43],[8978,42,8978,48,"FAKE_TOKEN"],[8978,52,8978,58],[8978,54,8978,60],[8979,12,8979,20,"_assert"],[8979,19,8979,27],[8979,20,8979,28,"verifier"],[8979,28,8979,36],[8979,30,8979,38,"type"],[8979,34,8979,42],[8979,39,8979,47,"RECAPTCHA_VERIFIER_TYPE"],[8979,62,8979,70],[8979,64,8979,72,"authInstance"],[8979,76,8979,84],[8979,78,8979,86],[8979,94,8979,102],[8979,95,8979,103],[8979,129,8979,137],[8979,130,8979,138],[8980,12,8980,20],[8980,18,8980,26,"requestWithRecaptchaV2"],[8980,40,8980,48],[8980,43,8980,51],[8980,49,8980,57,"injectRecaptchaV2Token"],[8980,71,8980,79],[8980,72,8980,80,"authInstance"],[8980,84,8980,92],[8980,86,8980,94,"request"],[8980,93,8980,101],[8980,95,8980,103,"verifier"],[8980,103,8980,111],[8980,104,8980,112],[8981,12,8981,20],[8981,19,8981,27,"sendPhoneVerificationCode"],[8981,44,8981,52],[8981,45,8981,53,"authInstance"],[8981,57,8981,65],[8981,59,8981,67,"requestWithRecaptchaV2"],[8981,81,8981,89],[8981,82,8981,90],[8982,10,8982,16],[8983,10,8983,16],[8983,17,8983,23,"sendPhoneVerificationCode"],[8983,42,8983,48],[8983,43,8983,49,"authInstance"],[8983,55,8983,61],[8983,57,8983,63,"request"],[8983,64,8983,70],[8983,65,8983,71],[8984,8,8984,12],[8984,9,8984,13],[8985,8,8985,12],[8985,14,8985,18,"sendPhoneVerificationCodeResponse"],[8985,47,8985,51],[8985,50,8985,54,"handleRecaptchaFlow"],[8985,69,8985,73],[8985,70,8985,74,"auth"],[8985,74,8985,78],[8985,76,8985,80,"sendPhoneVerificationCodeRequest"],[8985,108,8985,112],[8985,110,8985,114],[8985,132,8985,136],[8985,133,8985,137],[8985,183,8985,187,"sendPhoneVerificationCodeActionCallback"],[8985,222,8985,226],[8985,224,8985,228],[8985,240,8985,244],[8985,241,8985,245],[8985,283,8985,287],[8985,284,8985,288],[8986,8,8986,12],[8986,14,8986,18,"response"],[8986,22,8986,26],[8986,25,8986,29],[8986,31,8986,35,"sendPhoneVerificationCodeResponse"],[8986,64,8986,68],[8986,65,8986,69,"catch"],[8986,70,8986,74],[8986,71,8986,75,"error"],[8986,76,8986,80],[8986,80,8986,84],[8987,10,8987,16],[8987,17,8987,23,"Promise"],[8987,24,8987,30],[8987,25,8987,31,"reject"],[8987,31,8987,37],[8987,32,8987,38,"error"],[8987,37,8987,43],[8987,38,8987,44],[8988,8,8988,12],[8988,9,8988,13],[8988,10,8988,14],[8989,8,8989,12],[8989,15,8989,19,"response"],[8989,23,8989,27],[8989,24,8989,28,"sessionInfo"],[8989,35,8989,39],[8990,6,8990,8],[8991,4,8991,4],[8991,5,8991,5],[8991,14,8992,12],[8992,6,8993,8,"verifier"],[8992,14,8993,16],[8992,16,8993,18,"_reset"],[8992,22,8993,24],[8992,23,8993,25],[8992,24,8993,26],[8993,4,8994,4],[8994,2,8995,0],[8995,2,8996,0],[8996,0,8997,0],[8997,0,8998,0],[8998,0,8999,0],[8999,0,9000,0],[9000,0,9001,0],[9001,0,9002,0],[9002,0,9003,0],[9003,0,9004,0],[9004,0,9005,0],[9005,0,9006,0],[9006,0,9007,0],[9007,0,9008,0],[9008,0,9009,0],[9009,0,9010,0],[9010,0,9011,0],[9011,0,9012,0],[9012,0,9013,0],[9013,0,9014,0],[9014,0,9015,0],[9015,0,9016,0],[9016,0,9017,0],[9017,0,9018,0],[9018,2,9019,0],[9018,17,9019,15,"updatePhoneNumber"],[9018,34,9019,32,"updatePhoneNumber"],[9018,35,9019,33,"user"],[9018,39,9019,37],[9018,41,9019,39,"credential"],[9018,51,9019,49],[9018,53,9019,51],[9019,4,9020,4],[9019,10,9020,10,"userInternal"],[9019,22,9020,22],[9019,25,9020,25],[9019,29,9020,25,"getModularInstance"],[9019,53,9020,43],[9019,55,9020,44,"user"],[9019,59,9020,48],[9019,60,9020,49],[9020,4,9021,4],[9020,8,9021,8],[9020,12,9021,8,"_isFirebaseServerApp"],[9020,37,9021,28],[9020,39,9021,29,"userInternal"],[9020,51,9021,41],[9020,52,9021,42,"auth"],[9020,56,9021,46],[9020,57,9021,47,"app"],[9020,60,9021,50],[9020,61,9021,51],[9020,63,9021,53],[9021,6,9022,8],[9021,13,9022,15,"Promise"],[9021,20,9022,22],[9021,21,9022,23,"reject"],[9021,27,9022,29],[9021,28,9022,30,"_serverAppCurrentUserOperationNotSupportedError"],[9021,75,9022,77],[9021,76,9022,78,"userInternal"],[9021,88,9022,90],[9021,89,9022,91,"auth"],[9021,93,9022,95],[9021,94,9022,96],[9021,95,9022,97],[9022,4,9023,4],[9023,4,9024,4],[9023,10,9024,10,"_link$1"],[9023,17,9024,17],[9023,18,9024,18,"userInternal"],[9023,30,9024,30],[9023,32,9024,32,"credential"],[9023,42,9024,42],[9023,43,9024,43],[9024,2,9025,0],[9025,2,9026,0],[9026,2,9027,0],[9026,17,9027,15,"injectRecaptchaV2Token"],[9026,39,9027,37,"injectRecaptchaV2Token"],[9026,40,9027,38,"auth"],[9026,44,9027,42],[9026,46,9027,44,"request"],[9026,53,9027,51],[9026,55,9027,53,"recaptchaV2Verifier"],[9026,74,9027,72],[9026,76,9027,74],[9027,4,9028,4,"_assert"],[9027,11,9028,11],[9027,12,9028,12,"recaptchaV2Verifier"],[9027,31,9028,31],[9027,32,9028,32,"type"],[9027,36,9028,36],[9027,41,9028,41,"RECAPTCHA_VERIFIER_TYPE"],[9027,64,9028,64],[9027,66,9028,66,"auth"],[9027,70,9028,70],[9027,72,9028,72],[9027,88,9028,88],[9027,89,9028,89],[9027,123,9028,123],[9027,124,9028,124],[9028,4,9029,4],[9028,10,9029,10,"recaptchaV2Token"],[9028,26,9029,26],[9028,29,9029,29],[9028,35,9029,35,"recaptchaV2Verifier"],[9028,54,9029,54],[9028,55,9029,55,"verify"],[9028,61,9029,61],[9028,62,9029,62],[9028,63,9029,63],[9029,4,9030,4,"_assert"],[9029,11,9030,11],[9029,12,9030,12],[9029,19,9030,19,"recaptchaV2Token"],[9029,35,9030,35],[9029,40,9030,40],[9029,48,9030,48],[9029,50,9030,50,"auth"],[9029,54,9030,54],[9029,56,9030,56],[9029,72,9030,72],[9029,73,9030,73],[9029,107,9030,107],[9029,108,9030,108],[9030,4,9031,4],[9030,10,9031,10,"newRequest"],[9030,20,9031,20],[9030,23,9031,23],[9031,6,9031,25],[9031,9,9031,28,"request"],[9032,4,9031,36],[9032,5,9031,37],[9033,4,9032,4],[9033,8,9032,8],[9033,29,9032,29],[9033,33,9032,33,"newRequest"],[9033,43,9032,43],[9033,45,9032,45],[9034,6,9033,8],[9034,12,9033,14,"phoneNumber"],[9034,23,9033,25],[9034,26,9033,28,"newRequest"],[9034,36,9033,38],[9034,37,9033,39,"phoneEnrollmentInfo"],[9034,56,9033,58],[9034,57,9033,59,"phoneNumber"],[9034,68,9033,70],[9035,6,9034,8],[9035,12,9034,14,"captchaResponse"],[9035,27,9034,29],[9035,30,9034,32,"newRequest"],[9035,40,9034,42],[9035,41,9034,43,"phoneEnrollmentInfo"],[9035,60,9034,62],[9035,61,9034,63,"captchaResponse"],[9035,76,9034,78],[9036,6,9035,8],[9036,12,9035,14,"clientType"],[9036,22,9035,24],[9036,25,9035,27,"newRequest"],[9036,35,9035,37],[9036,36,9036,13,"phoneEnrollmentInfo"],[9036,55,9036,32],[9036,56,9036,33,"clientType"],[9036,66,9036,43],[9037,6,9037,8],[9037,12,9037,14,"recaptchaVersion"],[9037,28,9037,30],[9037,31,9037,33,"newRequest"],[9037,41,9037,43],[9037,42,9037,44,"phoneEnrollmentInfo"],[9037,61,9037,63],[9037,62,9037,64,"recaptchaVersion"],[9037,78,9037,80],[9038,6,9038,8,"Object"],[9038,12,9038,14],[9038,13,9038,15,"assign"],[9038,19,9038,21],[9038,20,9038,22,"newRequest"],[9038,30,9038,32],[9038,32,9038,34],[9039,8,9039,12],[9039,29,9039,33],[9039,31,9039,35],[9040,10,9040,16,"phoneNumber"],[9040,21,9040,27],[9041,10,9041,16,"recaptchaToken"],[9041,24,9041,30],[9041,26,9041,32,"recaptchaV2Token"],[9041,42,9041,48],[9042,10,9042,16,"captchaResponse"],[9042,25,9042,31],[9043,10,9043,16,"clientType"],[9043,20,9043,26],[9044,10,9044,16,"recaptchaVersion"],[9045,8,9045,12],[9046,6,9046,8],[9046,7,9046,9],[9046,8,9046,10],[9047,6,9047,8],[9047,13,9047,15,"newRequest"],[9047,23,9047,25],[9048,4,9048,4],[9048,5,9048,5],[9048,11,9049,9],[9048,15,9049,13],[9048,32,9049,30],[9048,36,9049,34,"newRequest"],[9048,46,9049,44],[9048,48,9049,46],[9049,6,9050,8],[9049,12,9050,14,"captchaResponse"],[9049,27,9050,29],[9049,30,9050,32,"newRequest"],[9049,40,9050,42],[9049,41,9050,43,"phoneSignInInfo"],[9049,56,9050,58],[9049,57,9050,59,"captchaResponse"],[9049,72,9050,74],[9050,6,9051,8],[9050,12,9051,14,"clientType"],[9050,22,9051,24],[9050,25,9051,27,"newRequest"],[9050,35,9051,37],[9050,36,9052,13,"phoneSignInInfo"],[9050,51,9052,28],[9050,52,9052,29,"clientType"],[9050,62,9052,39],[9051,6,9053,8],[9051,12,9053,14,"recaptchaVersion"],[9051,28,9053,30],[9051,31,9053,33,"newRequest"],[9051,41,9053,43],[9051,42,9053,44,"phoneSignInInfo"],[9051,57,9053,59],[9051,58,9053,60,"recaptchaVersion"],[9051,74,9053,76],[9052,6,9054,8,"Object"],[9052,12,9054,14],[9052,13,9054,15,"assign"],[9052,19,9054,21],[9052,20,9054,22,"newRequest"],[9052,30,9054,32],[9052,32,9054,34],[9053,8,9055,12],[9053,25,9055,29],[9053,27,9055,31],[9054,10,9056,16,"recaptchaToken"],[9054,24,9056,30],[9054,26,9056,32,"recaptchaV2Token"],[9054,42,9056,48],[9055,10,9057,16,"captchaResponse"],[9055,25,9057,31],[9056,10,9058,16,"clientType"],[9056,20,9058,26],[9057,10,9059,16,"recaptchaVersion"],[9058,8,9060,12],[9059,6,9061,8],[9059,7,9061,9],[9059,8,9061,10],[9060,6,9062,8],[9060,13,9062,15,"newRequest"],[9060,23,9062,25],[9061,4,9063,4],[9061,5,9063,5],[9061,11,9064,9],[9062,6,9065,8,"Object"],[9062,12,9065,14],[9062,13,9065,15,"assign"],[9062,19,9065,21],[9062,20,9065,22,"newRequest"],[9062,30,9065,32],[9062,32,9065,34],[9063,8,9065,36],[9063,24,9065,52],[9063,26,9065,54,"recaptchaV2Token"],[9064,6,9065,71],[9064,7,9065,72],[9064,8,9065,73],[9065,6,9066,8],[9065,13,9066,15,"newRequest"],[9065,23,9066,25],[9066,4,9067,4],[9067,2,9068,0],[9069,2,9070,0],[9070,0,9071,0],[9071,0,9072,0],[9072,0,9073,0],[9073,0,9074,0],[9074,0,9075,0],[9075,0,9076,0],[9076,0,9077,0],[9077,0,9078,0],[9078,0,9079,0],[9079,0,9080,0],[9080,0,9081,0],[9081,0,9082,0],[9082,0,9083,0],[9083,0,9084,0],[9084,0,9085,0],[9085,2,9086,0],[9086,0,9087,0],[9087,0,9088,0],[9088,0,9089,0],[9089,0,9090,0],[9090,0,9091,0],[9091,0,9092,0],[9092,0,9093,0],[9093,0,9094,0],[9094,0,9095,0],[9095,0,9096,0],[9096,0,9097,0],[9097,0,9098,0],[9098,0,9099,0],[9099,0,9100,0],[9100,0,9101,0],[9101,0,9102,0],[9102,0,9103,0],[9103,0,9104,0],[9104,2,9105,0],[9104,8,9105,6,"PhoneAuthProvider"],[9104,25,9105,23],[9104,26,9105,24],[9105,4,9106,4],[9106,0,9107,0],[9107,0,9108,0],[9108,0,9109,0],[9109,4,9110,4,"constructor"],[9109,15,9110,15,"constructor"],[9109,16,9110,16,"auth"],[9109,20,9110,20],[9109,22,9110,22],[9110,6,9111,8],[9111,6,9112,8],[9111,10,9112,12],[9111,11,9112,13,"providerId"],[9111,21,9112,23],[9111,24,9112,26,"PhoneAuthProvider"],[9111,41,9112,43],[9111,42,9112,44,"PROVIDER_ID"],[9111,53,9112,55],[9112,6,9113,8],[9112,10,9113,12],[9112,11,9113,13,"auth"],[9112,15,9113,17],[9112,18,9113,20,"_castAuth"],[9112,27,9113,29],[9112,28,9113,30,"auth"],[9112,32,9113,34],[9112,33,9113,35],[9113,4,9114,4],[9114,4,9115,4],[9115,0,9116,0],[9116,0,9117,0],[9117,0,9118,0],[9118,0,9119,0],[9119,0,9120,0],[9120,0,9121,0],[9121,0,9122,0],[9122,0,9123,0],[9123,0,9124,0],[9124,0,9125,0],[9125,0,9126,0],[9126,0,9127,0],[9127,0,9128,0],[9128,0,9129,0],[9129,0,9130,0],[9130,0,9131,0],[9131,0,9132,0],[9132,0,9133,0],[9133,0,9134,0],[9134,0,9135,0],[9135,0,9136,0],[9136,0,9137,0],[9137,0,9138,0],[9138,0,9139,0],[9139,0,9140,0],[9140,0,9141,0],[9141,0,9142,0],[9142,0,9143,0],[9143,0,9144,0],[9144,0,9145,0],[9145,0,9146,0],[9146,0,9147,0],[9147,4,9148,4,"verifyPhoneNumber"],[9147,21,9148,21,"verifyPhoneNumber"],[9147,22,9148,22,"phoneOptions"],[9147,34,9148,34],[9147,36,9148,36,"applicationVerifier"],[9147,55,9148,55],[9147,57,9148,57],[9148,6,9149,8],[9148,13,9149,15,"_verifyPhoneNumber"],[9148,31,9149,33],[9148,32,9149,34],[9148,36,9149,38],[9148,37,9149,39,"auth"],[9148,41,9149,43],[9148,43,9149,45,"phoneOptions"],[9148,55,9149,57],[9148,57,9149,59],[9148,61,9149,59,"getModularInstance"],[9148,85,9149,77],[9148,87,9149,78,"applicationVerifier"],[9148,106,9149,97],[9148,107,9149,98],[9148,108,9149,99],[9149,4,9150,4],[9150,4,9151,4],[9151,0,9152,0],[9152,0,9153,0],[9153,0,9154,0],[9154,0,9155,0],[9155,0,9156,0],[9156,0,9157,0],[9157,0,9158,0],[9158,0,9159,0],[9159,0,9160,0],[9160,0,9161,0],[9161,0,9162,0],[9162,0,9163,0],[9163,0,9164,0],[9164,0,9165,0],[9165,0,9166,0],[9166,0,9167,0],[9167,0,9168,0],[9168,0,9169,0],[9169,0,9170,0],[9170,0,9171,0],[9171,0,9172,0],[9172,0,9173,0],[9173,0,9174,0],[9174,0,9175,0],[9175,0,9176,0],[9176,0,9177,0],[9177,4,9178,4],[9177,11,9178,11,"credential"],[9177,21,9178,21,"credential"],[9177,22,9178,22,"verificationId"],[9177,36,9178,36],[9177,38,9178,38,"verificationCode"],[9177,54,9178,54],[9177,56,9178,56],[9178,6,9179,8],[9178,13,9179,15,"PhoneAuthCredential"],[9178,32,9179,34],[9178,33,9179,35,"_fromVerification"],[9178,50,9179,52],[9178,51,9179,53,"verificationId"],[9178,65,9179,67],[9178,67,9179,69,"verificationCode"],[9178,83,9179,85],[9178,84,9179,86],[9179,4,9180,4],[9180,4,9181,4],[9181,0,9182,0],[9182,0,9183,0],[9183,0,9184,0],[9184,4,9185,4],[9184,11,9185,11,"credentialFromResult"],[9184,31,9185,31,"credentialFromResult"],[9184,32,9185,32,"userCredential"],[9184,46,9185,46],[9184,48,9185,48],[9185,6,9186,8],[9185,12,9186,14,"credential"],[9185,22,9186,24],[9185,25,9186,27,"userCredential"],[9185,39,9186,41],[9186,6,9187,8],[9186,13,9187,15,"PhoneAuthProvider"],[9186,30,9187,32],[9186,31,9187,33,"credentialFromTaggedObject"],[9186,57,9187,59],[9186,58,9187,60,"credential"],[9186,68,9187,70],[9186,69,9187,71],[9187,4,9188,4],[9188,4,9189,4],[9189,0,9190,0],[9190,0,9191,0],[9191,0,9192,0],[9192,0,9193,0],[9193,0,9194,0],[9194,0,9195,0],[9195,0,9196,0],[9196,0,9197,0],[9197,0,9198,0],[9198,0,9199,0],[9199,0,9200,0],[9200,0,9201,0],[9201,0,9202,0],[9202,0,9203,0],[9203,0,9204,0],[9204,0,9205,0],[9205,0,9206,0],[9206,0,9207,0],[9207,0,9208,0],[9208,0,9209,0],[9209,0,9210,0],[9210,0,9211,0],[9211,0,9212,0],[9212,0,9213,0],[9213,0,9214,0],[9214,0,9215,0],[9215,0,9216,0],[9216,0,9217,0],[9217,0,9218,0],[9218,0,9219,0],[9219,0,9220,0],[9220,4,9221,4],[9220,11,9221,11,"credentialFromError"],[9220,30,9221,30,"credentialFromError"],[9220,31,9221,31,"error"],[9220,36,9221,36],[9220,38,9221,38],[9221,6,9222,8],[9221,13,9222,15,"PhoneAuthProvider"],[9221,30,9222,32],[9221,31,9222,33,"credentialFromTaggedObject"],[9221,57,9222,59],[9221,58,9222,61,"error"],[9221,63,9222,66],[9221,64,9222,67,"customData"],[9221,74,9222,77],[9221,78,9222,81],[9221,79,9222,82],[9221,80,9222,84],[9221,81,9222,85],[9222,4,9223,4],[9223,4,9224,4],[9223,11,9224,11,"credentialFromTaggedObject"],[9223,37,9224,37,"credentialFromTaggedObject"],[9223,38,9224,38],[9224,6,9224,40,"_tokenResponse"],[9224,20,9224,54],[9224,22,9224,56,"tokenResponse"],[9225,4,9224,70],[9225,5,9224,71],[9225,7,9224,73],[9226,6,9225,8],[9226,10,9225,12],[9226,11,9225,13,"tokenResponse"],[9226,24,9225,26],[9226,26,9225,28],[9227,8,9226,12],[9227,15,9226,19],[9227,19,9226,23],[9228,6,9227,8],[9229,6,9228,8],[9229,12,9228,14],[9230,8,9228,16,"phoneNumber"],[9230,19,9228,27],[9231,8,9228,29,"temporaryProof"],[9232,6,9228,44],[9232,7,9228,45],[9232,10,9228,48,"tokenResponse"],[9232,23,9228,61],[9233,6,9229,8],[9233,10,9229,12,"phoneNumber"],[9233,21,9229,23],[9233,25,9229,27,"temporaryProof"],[9233,39,9229,41],[9233,41,9229,43],[9234,8,9230,12],[9234,15,9230,19,"PhoneAuthCredential"],[9234,34,9230,38],[9234,35,9230,39,"_fromTokenResponse"],[9234,53,9230,57],[9234,54,9230,58,"phoneNumber"],[9234,65,9230,69],[9234,67,9230,71,"temporaryProof"],[9234,81,9230,85],[9234,82,9230,86],[9235,6,9231,8],[9236,6,9232,8],[9236,13,9232,15],[9236,17,9232,19],[9237,4,9233,4],[9238,2,9234,0],[9239,2,9235,0],[9240,2,9235,0,"exports"],[9240,9,9235,0],[9240,10,9235,0,"P"],[9240,11,9235,0],[9240,14,9235,0,"PhoneAuthProvider"],[9240,31,9235,0],[9241,2,9236,0,"PhoneAuthProvider"],[9241,19,9236,17],[9241,20,9236,18,"PROVIDER_ID"],[9241,31,9236,29],[9241,34,9236,32],[9241,41,9236,39],[9241,42,9236,40],[9242,2,9237,0],[9243,2,9238,0,"PhoneAuthProvider"],[9243,19,9238,17],[9243,20,9238,18,"PHONE_SIGN_IN_METHOD"],[9243,40,9238,38],[9243,43,9238,41],[9243,50,9238,48],[9243,51,9238,49],[9245,2,9240,0],[9246,0,9241,0],[9247,0,9242,0],[9248,0,9243,0],[9249,0,9244,0],[9250,0,9245,0],[9251,0,9246,0],[9252,0,9247,0],[9253,0,9248,0],[9254,0,9249,0],[9255,0,9250,0],[9256,0,9251,0],[9257,0,9252,0],[9258,0,9253,0],[9259,0,9254,0],[9260,0,9255,0],[9261,2,9256,0],[9262,0,9257,0],[9263,0,9258,0],[9264,0,9259,0],[9265,0,9260,0],[9266,2,9261,0],[9266,11,9261,9,"_withDefaultResolver"],[9266,31,9261,29,"_withDefaultResolver"],[9266,32,9261,30,"auth"],[9266,36,9261,34],[9266,38,9261,36,"resolverOverride"],[9266,54,9261,52],[9266,56,9261,54],[9267,4,9262,4],[9267,8,9262,8,"resolverOverride"],[9267,24,9262,24],[9267,26,9262,26],[9268,6,9263,8],[9268,13,9263,15,"_getInstance"],[9268,25,9263,27],[9268,26,9263,28,"resolverOverride"],[9268,42,9263,44],[9268,43,9263,45],[9269,4,9264,4],[9270,4,9265,4,"_assert"],[9270,11,9265,11],[9270,12,9265,12,"auth"],[9270,16,9265,16],[9270,17,9265,17,"_popupRedirectResolver"],[9270,39,9265,39],[9270,41,9265,41,"auth"],[9270,45,9265,45],[9270,47,9265,47],[9270,63,9265,63],[9270,64,9265,64],[9270,98,9265,98],[9270,99,9265,99],[9271,4,9266,4],[9271,11,9266,11,"auth"],[9271,15,9266,15],[9271,16,9266,16,"_popupRedirectResolver"],[9271,38,9266,38],[9272,2,9267,0],[9274,2,9269,0],[9275,0,9270,0],[9276,0,9271,0],[9277,0,9272,0],[9278,0,9273,0],[9279,0,9274,0],[9280,0,9275,0],[9281,0,9276,0],[9282,0,9277,0],[9283,0,9278,0],[9284,0,9279,0],[9285,0,9280,0],[9286,0,9281,0],[9287,0,9282,0],[9288,0,9283,0],[9289,0,9284,0],[9290,2,9285,0],[9290,8,9285,6,"IdpCredential"],[9290,21,9285,19],[9290,30,9285,28,"AuthCredential"],[9290,44,9285,42],[9290,45,9285,43],[9291,4,9286,4,"constructor"],[9291,15,9286,15,"constructor"],[9291,16,9286,16,"params"],[9291,22,9286,22],[9291,24,9286,24],[9292,6,9287,8],[9292,11,9287,13],[9292,12,9287,14],[9292,20,9287,22],[9292,21,9287,23],[9292,46,9287,48],[9292,54,9287,56],[9292,55,9287,57],[9292,78,9287,80],[9292,79,9287,81],[9293,6,9288,8],[9293,10,9288,12],[9293,11,9288,13,"params"],[9293,17,9288,19],[9293,20,9288,22,"params"],[9293,26,9288,28],[9294,4,9289,4],[9295,4,9290,4,"_getIdTokenResponse"],[9295,23,9290,23,"_getIdTokenResponse"],[9295,24,9290,24,"auth"],[9295,28,9290,28],[9295,30,9290,30],[9296,6,9291,8],[9296,13,9291,15,"signInWithIdp"],[9296,26,9291,28],[9296,27,9291,29,"auth"],[9296,31,9291,33],[9296,33,9291,35],[9296,37,9291,39],[9296,38,9291,40,"_buildIdpRequest"],[9296,54,9291,56],[9296,55,9291,57],[9296,56,9291,58],[9296,57,9291,59],[9297,4,9292,4],[9298,4,9293,4,"_linkToIdToken"],[9298,18,9293,18,"_linkToIdToken"],[9298,19,9293,19,"auth"],[9298,23,9293,23],[9298,25,9293,25,"idToken"],[9298,32,9293,32],[9298,34,9293,34],[9299,6,9294,8],[9299,13,9294,15,"signInWithIdp"],[9299,26,9294,28],[9299,27,9294,29,"auth"],[9299,31,9294,33],[9299,33,9294,35],[9299,37,9294,39],[9299,38,9294,40,"_buildIdpRequest"],[9299,54,9294,56],[9299,55,9294,57,"idToken"],[9299,62,9294,64],[9299,63,9294,65],[9299,64,9294,66],[9300,4,9295,4],[9301,4,9296,4,"_getReauthenticationResolver"],[9301,32,9296,32,"_getReauthenticationResolver"],[9301,33,9296,33,"auth"],[9301,37,9296,37],[9301,39,9296,39],[9302,6,9297,8],[9302,13,9297,15,"signInWithIdp"],[9302,26,9297,28],[9302,27,9297,29,"auth"],[9302,31,9297,33],[9302,33,9297,35],[9302,37,9297,39],[9302,38,9297,40,"_buildIdpRequest"],[9302,54,9297,56],[9302,55,9297,57],[9302,56,9297,58],[9302,57,9297,59],[9303,4,9298,4],[9304,4,9299,4,"_buildIdpRequest"],[9304,20,9299,20,"_buildIdpRequest"],[9304,21,9299,21,"idToken"],[9304,28,9299,28],[9304,30,9299,30],[9305,6,9300,8],[9305,12,9300,14,"request"],[9305,19,9300,21],[9305,22,9300,24],[9306,8,9301,12,"requestUri"],[9306,18,9301,22],[9306,20,9301,24],[9306,24,9301,28],[9306,25,9301,29,"params"],[9306,31,9301,35],[9306,32,9301,36,"requestUri"],[9306,42,9301,46],[9307,8,9302,12,"sessionId"],[9307,17,9302,21],[9307,19,9302,23],[9307,23,9302,27],[9307,24,9302,28,"params"],[9307,30,9302,34],[9307,31,9302,35,"sessionId"],[9307,40,9302,44],[9308,8,9303,12,"postBody"],[9308,16,9303,20],[9308,18,9303,22],[9308,22,9303,26],[9308,23,9303,27,"params"],[9308,29,9303,33],[9308,30,9303,34,"postBody"],[9308,38,9303,42],[9309,8,9304,12,"tenantId"],[9309,16,9304,20],[9309,18,9304,22],[9309,22,9304,26],[9309,23,9304,27,"params"],[9309,29,9304,33],[9309,30,9304,34,"tenantId"],[9309,38,9304,42],[9310,8,9305,12,"pendingToken"],[9310,20,9305,24],[9310,22,9305,26],[9310,26,9305,30],[9310,27,9305,31,"params"],[9310,33,9305,37],[9310,34,9305,38,"pendingToken"],[9310,46,9305,50],[9311,8,9306,12,"returnSecureToken"],[9311,25,9306,29],[9311,27,9306,31],[9311,31,9306,35],[9312,8,9307,12,"returnIdpCredential"],[9312,27,9307,31],[9312,29,9307,33],[9313,6,9308,8],[9313,7,9308,9],[9314,6,9309,8],[9314,10,9309,12,"idToken"],[9314,17,9309,19],[9314,19,9309,21],[9315,8,9310,12,"request"],[9315,15,9310,19],[9315,16,9310,20,"idToken"],[9315,23,9310,27],[9315,26,9310,30,"idToken"],[9315,33,9310,37],[9316,6,9311,8],[9317,6,9312,8],[9317,13,9312,15,"request"],[9317,20,9312,22],[9318,4,9313,4],[9319,2,9314,0],[9320,2,9315,0],[9320,11,9315,9,"_signIn"],[9320,18,9315,16,"_signIn"],[9320,19,9315,17,"params"],[9320,25,9315,23],[9320,27,9315,25],[9321,4,9316,4],[9321,11,9316,11,"_signInWithCredential"],[9321,32,9316,32],[9321,33,9316,33,"params"],[9321,39,9316,39],[9321,40,9316,40,"auth"],[9321,44,9316,44],[9321,46,9316,46],[9321,50,9316,50,"IdpCredential"],[9321,63,9316,63],[9321,64,9316,64,"params"],[9321,70,9316,70],[9321,71,9316,71],[9321,73,9316,73,"params"],[9321,79,9316,79],[9321,80,9316,80,"bypassAuthState"],[9321,95,9316,95],[9321,96,9316,96],[9322,2,9317,0],[9323,2,9318,0],[9323,11,9318,9,"_reauth"],[9323,18,9318,16,"_reauth"],[9323,19,9318,17,"params"],[9323,25,9318,23],[9323,27,9318,25],[9324,4,9319,4],[9324,10,9319,10],[9325,6,9319,12,"auth"],[9325,10,9319,16],[9326,6,9319,18,"user"],[9327,4,9319,23],[9327,5,9319,24],[9327,8,9319,27,"params"],[9327,14,9319,33],[9328,4,9320,4,"_assert"],[9328,11,9320,11],[9328,12,9320,12,"user"],[9328,16,9320,16],[9328,18,9320,18,"auth"],[9328,22,9320,22],[9328,24,9320,24],[9328,40,9320,40],[9328,41,9320,41],[9328,75,9320,75],[9328,76,9320,76],[9329,4,9321,4],[9329,11,9321,11,"_reauthenticate"],[9329,26,9321,26],[9329,27,9321,27,"user"],[9329,31,9321,31],[9329,33,9321,33],[9329,37,9321,37,"IdpCredential"],[9329,50,9321,50],[9329,51,9321,51,"params"],[9329,57,9321,57],[9329,58,9321,58],[9329,60,9321,60,"params"],[9329,66,9321,66],[9329,67,9321,67,"bypassAuthState"],[9329,82,9321,82],[9329,83,9321,83],[9330,2,9322,0],[9331,2,9323,0],[9331,17,9323,15,"_link"],[9331,22,9323,20,"_link"],[9331,23,9323,21,"params"],[9331,29,9323,27],[9331,31,9323,29],[9332,4,9324,4],[9332,10,9324,10],[9333,6,9324,12,"auth"],[9333,10,9324,16],[9334,6,9324,18,"user"],[9335,4,9324,23],[9335,5,9324,24],[9335,8,9324,27,"params"],[9335,14,9324,33],[9336,4,9325,4,"_assert"],[9336,11,9325,11],[9336,12,9325,12,"user"],[9336,16,9325,16],[9336,18,9325,18,"auth"],[9336,22,9325,22],[9336,24,9325,24],[9336,40,9325,40],[9336,41,9325,41],[9336,75,9325,75],[9336,76,9325,76],[9337,4,9326,4],[9337,11,9326,11,"_link$1"],[9337,18,9326,18],[9337,19,9326,19,"user"],[9337,23,9326,23],[9337,25,9326,25],[9337,29,9326,29,"IdpCredential"],[9337,42,9326,42],[9337,43,9326,43,"params"],[9337,49,9326,49],[9337,50,9326,50],[9337,52,9326,52,"params"],[9337,58,9326,58],[9337,59,9326,59,"bypassAuthState"],[9337,74,9326,74],[9337,75,9326,75],[9338,2,9327,0],[9340,2,9329,0],[9341,0,9330,0],[9342,0,9331,0],[9343,0,9332,0],[9344,0,9333,0],[9345,0,9334,0],[9346,0,9335,0],[9347,0,9336,0],[9348,0,9337,0],[9349,0,9338,0],[9350,0,9339,0],[9351,0,9340,0],[9352,0,9341,0],[9353,0,9342,0],[9354,0,9343,0],[9355,0,9344,0],[9356,2,9345,0],[9357,0,9346,0],[9358,0,9347,0],[9359,0,9348,0],[9360,2,9349,0],[9360,8,9349,6,"AbstractPopupRedirectOperation"],[9360,38,9349,36],[9360,39,9349,37],[9361,4,9350,4,"constructor"],[9361,15,9350,15,"constructor"],[9361,16,9350,16,"auth"],[9361,20,9350,20],[9361,22,9350,22,"filter"],[9361,28,9350,28],[9361,30,9350,30,"resolver"],[9361,38,9350,38],[9361,40,9350,40,"user"],[9361,44,9350,44],[9361,46,9350,46,"bypassAuthState"],[9361,61,9350,61],[9361,64,9350,64],[9361,69,9350,69],[9361,71,9350,71],[9362,6,9351,8],[9362,10,9351,12],[9362,11,9351,13,"auth"],[9362,15,9351,17],[9362,18,9351,20,"auth"],[9362,22,9351,24],[9363,6,9352,8],[9363,10,9352,12],[9363,11,9352,13,"resolver"],[9363,19,9352,21],[9363,22,9352,24,"resolver"],[9363,30,9352,32],[9364,6,9353,8],[9364,10,9353,12],[9364,11,9353,13,"user"],[9364,15,9353,17],[9364,18,9353,20,"user"],[9364,22,9353,24],[9365,6,9354,8],[9365,10,9354,12],[9365,11,9354,13,"bypassAuthState"],[9365,26,9354,28],[9365,29,9354,31,"bypassAuthState"],[9365,44,9354,46],[9366,6,9355,8],[9366,10,9355,12],[9366,11,9355,13,"pendingPromise"],[9366,25,9355,27],[9366,28,9355,30],[9366,32,9355,34],[9367,6,9356,8],[9367,10,9356,12],[9367,11,9356,13,"eventManager"],[9367,23,9356,25],[9367,26,9356,28],[9367,30,9356,32],[9368,6,9357,8],[9368,10,9357,12],[9368,11,9357,13,"filter"],[9368,17,9357,19],[9368,20,9357,22,"Array"],[9368,25,9357,27],[9368,26,9357,28,"isArray"],[9368,33,9357,35],[9368,34,9357,36,"filter"],[9368,40,9357,42],[9368,41,9357,43],[9368,44,9357,46,"filter"],[9368,50,9357,52],[9368,53,9357,55],[9368,54,9357,56,"filter"],[9368,60,9357,62],[9368,61,9357,63],[9369,4,9358,4],[9370,4,9359,4,"execute"],[9370,11,9359,11,"execute"],[9370,12,9359,11],[9370,14,9359,14],[9371,6,9360,8],[9371,13,9360,15],[9371,17,9360,19,"Promise"],[9371,24,9360,26],[9371,25,9360,27],[9371,32,9360,34,"resolve"],[9371,39,9360,41],[9371,41,9360,43,"reject"],[9371,47,9360,49],[9371,52,9360,54],[9372,8,9361,12],[9372,12,9361,16],[9372,13,9361,17,"pendingPromise"],[9372,27,9361,31],[9372,30,9361,34],[9373,10,9361,36,"resolve"],[9373,17,9361,43],[9374,10,9361,45,"reject"],[9375,8,9361,52],[9375,9,9361,53],[9376,8,9362,12],[9376,12,9362,16],[9377,10,9363,16],[9377,14,9363,20],[9377,15,9363,21,"eventManager"],[9377,27,9363,33],[9377,30,9363,36],[9377,36,9363,42],[9377,40,9363,46],[9377,41,9363,47,"resolver"],[9377,49,9363,55],[9377,50,9363,56,"_initialize"],[9377,61,9363,67],[9377,62,9363,68],[9377,66,9363,72],[9377,67,9363,73,"auth"],[9377,71,9363,77],[9377,72,9363,78],[9378,10,9364,16],[9378,16,9364,22],[9378,20,9364,26],[9378,21,9364,27,"onExecution"],[9378,32,9364,38],[9378,33,9364,39],[9378,34,9364,40],[9379,10,9365,16],[9379,14,9365,20],[9379,15,9365,21,"eventManager"],[9379,27,9365,33],[9379,28,9365,34,"registerConsumer"],[9379,44,9365,50],[9379,45,9365,51],[9379,49,9365,55],[9379,50,9365,56],[9380,8,9366,12],[9380,9,9366,13],[9380,10,9367,12],[9380,17,9367,19,"e"],[9380,18,9367,20],[9380,20,9367,22],[9381,10,9368,16],[9381,14,9368,20],[9381,15,9368,21,"reject"],[9381,21,9368,27],[9381,22,9368,28,"e"],[9381,23,9368,29],[9381,24,9368,30],[9382,8,9369,12],[9383,6,9370,8],[9383,7,9370,9],[9383,8,9370,10],[9384,4,9371,4],[9385,4,9372,4],[9385,10,9372,10,"onAuthEvent"],[9385,21,9372,21,"onAuthEvent"],[9385,22,9372,22,"event"],[9385,27,9372,27],[9385,29,9372,29],[9386,6,9373,8],[9386,12,9373,14],[9387,8,9373,16,"urlResponse"],[9387,19,9373,27],[9388,8,9373,29,"sessionId"],[9388,17,9373,38],[9389,8,9373,40,"postBody"],[9389,16,9373,48],[9390,8,9373,50,"tenantId"],[9390,16,9373,58],[9391,8,9373,60,"error"],[9391,13,9373,65],[9392,8,9373,67,"type"],[9393,6,9373,72],[9393,7,9373,73],[9393,10,9373,76,"event"],[9393,15,9373,81],[9394,6,9374,8],[9394,10,9374,12,"error"],[9394,15,9374,17],[9394,17,9374,19],[9395,8,9375,12],[9395,12,9375,16],[9395,13,9375,17,"reject"],[9395,19,9375,23],[9395,20,9375,24,"error"],[9395,25,9375,29],[9395,26,9375,30],[9396,8,9376,12],[9397,6,9377,8],[9398,6,9378,8],[9398,12,9378,14,"params"],[9398,18,9378,20],[9398,21,9378,23],[9399,8,9379,12,"auth"],[9399,12,9379,16],[9399,14,9379,18],[9399,18,9379,22],[9399,19,9379,23,"auth"],[9399,23,9379,27],[9400,8,9380,12,"requestUri"],[9400,18,9380,22],[9400,20,9380,24,"urlResponse"],[9400,31,9380,35],[9401,8,9381,12,"sessionId"],[9401,17,9381,21],[9401,19,9381,23,"sessionId"],[9401,28,9381,32],[9402,8,9382,12,"tenantId"],[9402,16,9382,20],[9402,18,9382,22,"tenantId"],[9402,26,9382,30],[9402,30,9382,34,"undefined"],[9402,39,9382,43],[9403,8,9383,12,"postBody"],[9403,16,9383,20],[9403,18,9383,22,"postBody"],[9403,26,9383,30],[9403,30,9383,34,"undefined"],[9403,39,9383,43],[9404,8,9384,12,"user"],[9404,12,9384,16],[9404,14,9384,18],[9404,18,9384,22],[9404,19,9384,23,"user"],[9404,23,9384,27],[9405,8,9385,12,"bypassAuthState"],[9405,23,9385,27],[9405,25,9385,29],[9405,29,9385,33],[9405,30,9385,34,"bypassAuthState"],[9406,6,9386,8],[9406,7,9386,9],[9407,6,9387,8],[9407,10,9387,12],[9408,8,9388,12],[9408,12,9388,16],[9408,13,9388,17,"resolve"],[9408,20,9388,24],[9408,21,9388,25],[9408,27,9388,31],[9408,31,9388,35],[9408,32,9388,36,"getIdpTask"],[9408,42,9388,46],[9408,43,9388,47,"type"],[9408,47,9388,51],[9408,48,9388,52],[9408,49,9388,53,"params"],[9408,55,9388,59],[9408,56,9388,60],[9408,57,9388,61],[9409,6,9389,8],[9409,7,9389,9],[9409,8,9390,8],[9409,15,9390,15,"e"],[9409,16,9390,16],[9409,18,9390,18],[9410,8,9391,12],[9410,12,9391,16],[9410,13,9391,17,"reject"],[9410,19,9391,23],[9410,20,9391,24,"e"],[9410,21,9391,25],[9410,22,9391,26],[9411,6,9392,8],[9412,4,9393,4],[9413,4,9394,4,"onError"],[9413,11,9394,11,"onError"],[9413,12,9394,12,"error"],[9413,17,9394,17],[9413,19,9394,19],[9414,6,9395,8],[9414,10,9395,12],[9414,11,9395,13,"reject"],[9414,17,9395,19],[9414,18,9395,20,"error"],[9414,23,9395,25],[9414,24,9395,26],[9415,4,9396,4],[9416,4,9397,4,"getIdpTask"],[9416,14,9397,14,"getIdpTask"],[9416,15,9397,15,"type"],[9416,19,9397,19],[9416,21,9397,21],[9417,6,9398,8],[9417,14,9398,16,"type"],[9417,18,9398,20],[9418,8,9399,12],[9418,13,9399,17],[9418,29,9399,33],[9418,30,9399,34],[9419,8,9400,12],[9419,13,9400,17],[9419,32,9400,36],[9419,33,9400,37],[9420,10,9401,16],[9420,17,9401,23,"_signIn"],[9420,24,9401,30],[9421,8,9402,12],[9421,13,9402,17],[9421,27,9402,31],[9421,28,9402,32],[9422,8,9403,12],[9422,13,9403,17],[9422,30,9403,34],[9422,31,9403,35],[9423,10,9404,16],[9423,17,9404,23,"_link"],[9423,22,9404,28],[9424,8,9405,12],[9424,13,9405,17],[9424,29,9405,33],[9424,30,9405,34],[9425,8,9406,12],[9425,13,9406,17],[9425,32,9406,36],[9425,33,9406,37],[9426,10,9407,16],[9426,17,9407,23,"_reauth"],[9426,24,9407,30],[9427,8,9408,12],[9428,10,9409,16,"_fail"],[9428,15,9409,21],[9428,16,9409,22],[9428,20,9409,26],[9428,21,9409,27,"auth"],[9428,25,9409,31],[9428,27,9409,33],[9428,43,9409,49],[9428,44,9409,50],[9428,78,9409,84],[9428,79,9409,85],[9429,6,9410,8],[9430,4,9411,4],[9431,4,9412,4,"resolve"],[9431,11,9412,11,"resolve"],[9431,12,9412,12,"cred"],[9431,16,9412,16],[9431,18,9412,18],[9432,6,9413,8,"debugAssert"],[9432,17,9413,19],[9432,18,9413,20],[9432,22,9413,24],[9432,23,9413,25,"pendingPromise"],[9432,37,9413,39],[9432,39,9413,41],[9432,70,9413,72],[9432,71,9413,73],[9433,6,9414,8],[9433,10,9414,12],[9433,11,9414,13,"pendingPromise"],[9433,25,9414,27],[9433,26,9414,28,"resolve"],[9433,33,9414,35],[9433,34,9414,36,"cred"],[9433,38,9414,40],[9433,39,9414,41],[9434,6,9415,8],[9434,10,9415,12],[9434,11,9415,13,"unregisterAndCleanUp"],[9434,31,9415,33],[9434,32,9415,34],[9434,33,9415,35],[9435,4,9416,4],[9436,4,9417,4,"reject"],[9436,10,9417,10,"reject"],[9436,11,9417,11,"error"],[9436,16,9417,16],[9436,18,9417,18],[9437,6,9418,8,"debugAssert"],[9437,17,9418,19],[9437,18,9418,20],[9437,22,9418,24],[9437,23,9418,25,"pendingPromise"],[9437,37,9418,39],[9437,39,9418,41],[9437,70,9418,72],[9437,71,9418,73],[9438,6,9419,8],[9438,10,9419,12],[9438,11,9419,13,"pendingPromise"],[9438,25,9419,27],[9438,26,9419,28,"reject"],[9438,32,9419,34],[9438,33,9419,35,"error"],[9438,38,9419,40],[9438,39,9419,41],[9439,6,9420,8],[9439,10,9420,12],[9439,11,9420,13,"unregisterAndCleanUp"],[9439,31,9420,33],[9439,32,9420,34],[9439,33,9420,35],[9440,4,9421,4],[9441,4,9422,4,"unregisterAndCleanUp"],[9441,24,9422,24,"unregisterAndCleanUp"],[9441,25,9422,24],[9441,27,9422,27],[9442,6,9423,8],[9442,10,9423,12],[9442,14,9423,16],[9442,15,9423,17,"eventManager"],[9442,27,9423,29],[9442,29,9423,31],[9443,8,9424,12],[9443,12,9424,16],[9443,13,9424,17,"eventManager"],[9443,25,9424,29],[9443,26,9424,30,"unregisterConsumer"],[9443,44,9424,48],[9443,45,9424,49],[9443,49,9424,53],[9443,50,9424,54],[9444,6,9425,8],[9445,6,9426,8],[9445,10,9426,12],[9445,11,9426,13,"pendingPromise"],[9445,25,9426,27],[9445,28,9426,30],[9445,32,9426,34],[9446,6,9427,8],[9446,10,9427,12],[9446,11,9427,13,"cleanUp"],[9446,18,9427,20],[9446,19,9427,21],[9446,20,9427,22],[9447,4,9428,4],[9448,2,9429,0],[9450,2,9431,0],[9451,0,9432,0],[9452,0,9433,0],[9453,0,9434,0],[9454,0,9435,0],[9455,0,9436,0],[9456,0,9437,0],[9457,0,9438,0],[9458,0,9439,0],[9459,0,9440,0],[9460,0,9441,0],[9461,0,9442,0],[9462,0,9443,0],[9463,0,9444,0],[9464,0,9445,0],[9465,0,9446,0],[9466,2,9447,0],[9466,8,9447,6,"_POLL_WINDOW_CLOSE_TIMEOUT"],[9466,34,9447,32],[9466,37,9447,35],[9466,41,9447,39,"Delay"],[9466,46,9447,44],[9466,47,9447,45],[9466,51,9447,49],[9466,53,9447,51],[9466,58,9447,56],[9466,59,9447,57],[9467,2,9448,0],[9468,0,9449,0],[9469,0,9450,0],[9470,0,9451,0],[9471,0,9452,0],[9472,0,9453,0],[9473,0,9454,0],[9474,0,9455,0],[9475,0,9456,0],[9476,0,9457,0],[9477,0,9458,0],[9478,0,9459,0],[9479,0,9460,0],[9480,0,9461,0],[9481,0,9462,0],[9482,0,9463,0],[9483,0,9464,0],[9484,0,9465,0],[9485,0,9466,0],[9486,0,9467,0],[9487,0,9468,0],[9488,0,9469,0],[9489,0,9470,0],[9490,0,9471,0],[9491,0,9472,0],[9492,0,9473,0],[9493,0,9474,0],[9494,0,9475,0],[9495,0,9476,0],[9496,0,9477,0],[9497,0,9478,0],[9498,2,9479,0],[9498,17,9479,15,"signInWithPopup"],[9498,32,9479,30,"signInWithPopup"],[9498,33,9479,31,"auth"],[9498,37,9479,35],[9498,39,9479,37,"provider"],[9498,47,9479,45],[9498,49,9479,47,"resolver"],[9498,57,9479,55],[9498,59,9479,57],[9499,4,9480,4],[9499,8,9480,8],[9499,12,9480,8,"_isFirebaseServerApp"],[9499,37,9480,28],[9499,39,9480,29,"auth"],[9499,43,9480,33],[9499,44,9480,34,"app"],[9499,47,9480,37],[9499,48,9480,38],[9499,50,9480,40],[9500,6,9481,8],[9500,13,9481,15,"Promise"],[9500,20,9481,22],[9500,21,9481,23,"reject"],[9500,27,9481,29],[9500,28,9481,30,"_createError"],[9500,40,9481,42],[9500,41,9481,43,"auth"],[9500,45,9481,47],[9500,47,9481,49],[9500,92,9481,94],[9500,93,9481,95],[9500,136,9481,138],[9500,137,9481,139],[9500,138,9481,140],[9501,4,9482,4],[9502,4,9483,4],[9502,10,9483,10,"authInternal"],[9502,22,9483,22],[9502,25,9483,25,"_castAuth"],[9502,34,9483,34],[9502,35,9483,35,"auth"],[9502,39,9483,39],[9502,40,9483,40],[9503,4,9484,4,"_assertInstanceOf"],[9503,21,9484,21],[9503,22,9484,22,"auth"],[9503,26,9484,26],[9503,28,9484,28,"provider"],[9503,36,9484,36],[9503,38,9484,38,"FederatedAuthProvider"],[9503,59,9484,59],[9503,60,9484,60],[9504,4,9485,4],[9504,10,9485,10,"resolverInternal"],[9504,26,9485,26],[9504,29,9485,29,"_withDefaultResolver"],[9504,49,9485,49],[9504,50,9485,50,"authInternal"],[9504,62,9485,62],[9504,64,9485,64,"resolver"],[9504,72,9485,72],[9504,73,9485,73],[9505,4,9486,4],[9505,10,9486,10,"action"],[9505,16,9486,16],[9505,19,9486,19],[9505,23,9486,23,"PopupOperation"],[9505,37,9486,37],[9505,38,9486,38,"authInternal"],[9505,50,9486,50],[9505,52,9486,52],[9505,68,9486,68],[9505,69,9486,69],[9505,108,9486,108,"provider"],[9505,116,9486,116],[9505,118,9486,118,"resolverInternal"],[9505,134,9486,134],[9505,135,9486,135],[9506,4,9487,4],[9506,11,9487,11,"action"],[9506,17,9487,17],[9506,18,9487,18,"executeNotNull"],[9506,32,9487,32],[9506,33,9487,33],[9506,34,9487,34],[9507,2,9488,0],[9508,2,9489,0],[9509,0,9490,0],[9510,0,9491,0],[9511,0,9492,0],[9512,0,9493,0],[9513,0,9494,0],[9514,0,9495,0],[9515,0,9496,0],[9516,0,9497,0],[9517,0,9498,0],[9518,0,9499,0],[9519,0,9500,0],[9520,0,9501,0],[9521,0,9502,0],[9522,0,9503,0],[9523,0,9504,0],[9524,0,9505,0],[9525,0,9506,0],[9526,0,9507,0],[9527,0,9508,0],[9528,0,9509,0],[9529,0,9510,0],[9530,0,9511,0],[9531,0,9512,0],[9532,0,9513,0],[9533,0,9514,0],[9534,0,9515,0],[9535,0,9516,0],[9536,2,9517,0],[9536,17,9517,15,"reauthenticateWithPopup"],[9536,40,9517,38,"reauthenticateWithPopup"],[9536,41,9517,39,"user"],[9536,45,9517,43],[9536,47,9517,45,"provider"],[9536,55,9517,53],[9536,57,9517,55,"resolver"],[9536,65,9517,63],[9536,67,9517,65],[9537,4,9518,4],[9537,10,9518,10,"userInternal"],[9537,22,9518,22],[9537,25,9518,25],[9537,29,9518,25,"getModularInstance"],[9537,53,9518,43],[9537,55,9518,44,"user"],[9537,59,9518,48],[9537,60,9518,49],[9538,4,9519,4],[9538,8,9519,8],[9538,12,9519,8,"_isFirebaseServerApp"],[9538,37,9519,28],[9538,39,9519,29,"userInternal"],[9538,51,9519,41],[9538,52,9519,42,"auth"],[9538,56,9519,46],[9538,57,9519,47,"app"],[9538,60,9519,50],[9538,61,9519,51],[9538,63,9519,53],[9539,6,9520,8],[9539,13,9520,15,"Promise"],[9539,20,9520,22],[9539,21,9520,23,"reject"],[9539,27,9520,29],[9539,28,9520,30,"_createError"],[9539,40,9520,42],[9539,41,9520,43,"userInternal"],[9539,53,9520,55],[9539,54,9520,56,"auth"],[9539,58,9520,60],[9539,60,9520,62],[9539,105,9520,107],[9539,106,9520,108],[9539,149,9520,151],[9539,150,9520,152],[9539,151,9520,153],[9540,4,9521,4],[9541,4,9522,4,"_assertInstanceOf"],[9541,21,9522,21],[9541,22,9522,22,"userInternal"],[9541,34,9522,34],[9541,35,9522,35,"auth"],[9541,39,9522,39],[9541,41,9522,41,"provider"],[9541,49,9522,49],[9541,51,9522,51,"FederatedAuthProvider"],[9541,72,9522,72],[9541,73,9522,73],[9542,4,9523,4],[9542,10,9523,10,"resolverInternal"],[9542,26,9523,26],[9542,29,9523,29,"_withDefaultResolver"],[9542,49,9523,49],[9542,50,9523,50,"userInternal"],[9542,62,9523,62],[9542,63,9523,63,"auth"],[9542,67,9523,67],[9542,69,9523,69,"resolver"],[9542,77,9523,77],[9542,78,9523,78],[9543,4,9524,4],[9543,10,9524,10,"action"],[9543,16,9524,16],[9543,19,9524,19],[9543,23,9524,23,"PopupOperation"],[9543,37,9524,37],[9543,38,9524,38,"userInternal"],[9543,50,9524,50],[9543,51,9524,51,"auth"],[9543,55,9524,55],[9543,57,9524,57],[9543,73,9524,73],[9543,74,9524,74],[9543,112,9524,112,"provider"],[9543,120,9524,120],[9543,122,9524,122,"resolverInternal"],[9543,138,9524,138],[9543,140,9524,140,"userInternal"],[9543,152,9524,152],[9543,153,9524,153],[9544,4,9525,4],[9544,11,9525,11,"action"],[9544,17,9525,17],[9544,18,9525,18,"executeNotNull"],[9544,32,9525,32],[9544,33,9525,33],[9544,34,9525,34],[9545,2,9526,0],[9546,2,9527,0],[9547,0,9528,0],[9548,0,9529,0],[9549,0,9530,0],[9550,0,9531,0],[9551,0,9532,0],[9552,0,9533,0],[9553,0,9534,0],[9554,0,9535,0],[9555,0,9536,0],[9556,0,9537,0],[9557,0,9538,0],[9558,0,9539,0],[9559,0,9540,0],[9560,0,9541,0],[9561,0,9542,0],[9562,0,9543,0],[9563,0,9544,0],[9564,0,9545,0],[9565,0,9546,0],[9566,0,9547,0],[9567,0,9548,0],[9568,0,9549,0],[9569,0,9550,0],[9570,0,9551,0],[9571,2,9552,0],[9571,17,9552,15,"linkWithPopup"],[9571,30,9552,28,"linkWithPopup"],[9571,31,9552,29,"user"],[9571,35,9552,33],[9571,37,9552,35,"provider"],[9571,45,9552,43],[9571,47,9552,45,"resolver"],[9571,55,9552,53],[9571,57,9552,55],[9572,4,9553,4],[9572,10,9553,10,"userInternal"],[9572,22,9553,22],[9572,25,9553,25],[9572,29,9553,25,"getModularInstance"],[9572,53,9553,43],[9572,55,9553,44,"user"],[9572,59,9553,48],[9572,60,9553,49],[9573,4,9554,4,"_assertInstanceOf"],[9573,21,9554,21],[9573,22,9554,22,"userInternal"],[9573,34,9554,34],[9573,35,9554,35,"auth"],[9573,39,9554,39],[9573,41,9554,41,"provider"],[9573,49,9554,49],[9573,51,9554,51,"FederatedAuthProvider"],[9573,72,9554,72],[9573,73,9554,73],[9574,4,9555,4],[9574,10,9555,10,"resolverInternal"],[9574,26,9555,26],[9574,29,9555,29,"_withDefaultResolver"],[9574,49,9555,49],[9574,50,9555,50,"userInternal"],[9574,62,9555,62],[9574,63,9555,63,"auth"],[9574,67,9555,67],[9574,69,9555,69,"resolver"],[9574,77,9555,77],[9574,78,9555,78],[9575,4,9556,4],[9575,10,9556,10,"action"],[9575,16,9556,16],[9575,19,9556,19],[9575,23,9556,23,"PopupOperation"],[9575,37,9556,37],[9575,38,9556,38,"userInternal"],[9575,50,9556,50],[9575,51,9556,51,"auth"],[9575,55,9556,55],[9575,57,9556,57],[9575,71,9556,71],[9575,72,9556,72],[9575,108,9556,108,"provider"],[9575,116,9556,116],[9575,118,9556,118,"resolverInternal"],[9575,134,9556,134],[9575,136,9556,136,"userInternal"],[9575,148,9556,148],[9575,149,9556,149],[9576,4,9557,4],[9576,11,9557,11,"action"],[9576,17,9557,17],[9576,18,9557,18,"executeNotNull"],[9576,32,9557,32],[9576,33,9557,33],[9576,34,9557,34],[9577,2,9558,0],[9578,2,9559,0],[9579,0,9560,0],[9580,0,9561,0],[9581,0,9562,0],[9582,0,9563,0],[9583,2,9564,0],[9583,8,9564,6,"PopupOperation"],[9583,22,9564,20],[9583,31,9564,29,"AbstractPopupRedirectOperation"],[9583,61,9564,59],[9583,62,9564,60],[9584,4,9565,4,"constructor"],[9584,15,9565,15,"constructor"],[9584,16,9565,16,"auth"],[9584,20,9565,20],[9584,22,9565,22,"filter"],[9584,28,9565,28],[9584,30,9565,30,"provider"],[9584,38,9565,38],[9584,40,9565,40,"resolver"],[9584,48,9565,48],[9584,50,9565,50,"user"],[9584,54,9565,54],[9584,56,9565,56],[9585,6,9566,8],[9585,11,9566,13],[9585,12,9566,14,"auth"],[9585,16,9566,18],[9585,18,9566,20,"filter"],[9585,24,9566,26],[9585,26,9566,28,"resolver"],[9585,34,9566,36],[9585,36,9566,38,"user"],[9585,40,9566,42],[9585,41,9566,43],[9586,6,9567,8],[9586,10,9567,12],[9586,11,9567,13,"provider"],[9586,19,9567,21],[9586,22,9567,24,"provider"],[9586,30,9567,32],[9587,6,9568,8],[9587,10,9568,12],[9587,11,9568,13,"authWindow"],[9587,21,9568,23],[9587,24,9568,26],[9587,28,9568,30],[9588,6,9569,8],[9588,10,9569,12],[9588,11,9569,13,"pollId"],[9588,17,9569,19],[9588,20,9569,22],[9588,24,9569,26],[9589,6,9570,8],[9589,10,9570,12,"PopupOperation"],[9589,24,9570,26],[9589,25,9570,27,"currentPopupAction"],[9589,43,9570,45],[9589,45,9570,47],[9590,8,9571,12,"PopupOperation"],[9590,22,9571,26],[9590,23,9571,27,"currentPopupAction"],[9590,41,9571,45],[9590,42,9571,46,"cancel"],[9590,48,9571,52],[9590,49,9571,53],[9590,50,9571,54],[9591,6,9572,8],[9592,6,9573,8,"PopupOperation"],[9592,20,9573,22],[9592,21,9573,23,"currentPopupAction"],[9592,39,9573,41],[9592,42,9573,44],[9592,46,9573,48],[9593,4,9574,4],[9594,4,9575,4],[9594,10,9575,10,"executeNotNull"],[9594,24,9575,24,"executeNotNull"],[9594,25,9575,24],[9594,27,9575,27],[9595,6,9576,8],[9595,12,9576,14,"result"],[9595,18,9576,20],[9595,21,9576,23],[9595,27,9576,29],[9595,31,9576,33],[9595,32,9576,34,"execute"],[9595,39,9576,41],[9595,40,9576,42],[9595,41,9576,43],[9596,6,9577,8,"_assert"],[9596,13,9577,15],[9596,14,9577,16,"result"],[9596,20,9577,22],[9596,22,9577,24],[9596,26,9577,28],[9596,27,9577,29,"auth"],[9596,31,9577,33],[9596,33,9577,35],[9596,49,9577,51],[9596,50,9577,52],[9596,84,9577,86],[9596,85,9577,87],[9597,6,9578,8],[9597,13,9578,15,"result"],[9597,19,9578,21],[9598,4,9579,4],[9599,4,9580,4],[9599,10,9580,10,"onExecution"],[9599,21,9580,21,"onExecution"],[9599,22,9580,21],[9599,24,9580,24],[9600,6,9581,8,"debugAssert"],[9600,17,9581,19],[9600,18,9581,20],[9600,22,9581,24],[9600,23,9581,25,"filter"],[9600,29,9581,31],[9600,30,9581,32,"length"],[9600,36,9581,38],[9600,41,9581,43],[9600,42,9581,44],[9600,44,9581,46],[9600,84,9581,86],[9600,85,9581,87],[9601,6,9582,8],[9601,12,9582,14,"eventId"],[9601,19,9582,21],[9601,22,9582,24,"_generateEventId"],[9601,38,9582,40],[9601,39,9582,41],[9601,40,9582,42],[9602,6,9583,8],[9602,10,9583,12],[9602,11,9583,13,"authWindow"],[9602,21,9583,23],[9602,24,9583,26],[9602,30,9583,32],[9602,34,9583,36],[9602,35,9583,37,"resolver"],[9602,43,9583,45],[9602,44,9583,46,"_openPopup"],[9602,54,9583,56],[9602,55,9583,57],[9602,59,9583,61],[9602,60,9583,62,"auth"],[9602,64,9583,66],[9602,66,9583,68],[9602,70,9583,72],[9602,71,9583,73,"provider"],[9602,79,9583,81],[9602,81,9583,83],[9602,85,9583,87],[9602,86,9583,88,"filter"],[9602,92,9583,94],[9602,93,9583,95],[9602,94,9583,96],[9602,95,9583,97],[9603,6,9583,99],[9604,6,9584,8,"eventId"],[9604,13,9584,15],[9604,14,9584,16],[9605,6,9585,8],[9605,10,9585,12],[9605,11,9585,13,"authWindow"],[9605,21,9585,23],[9605,22,9585,24,"associatedEvent"],[9605,37,9585,39],[9605,40,9585,42,"eventId"],[9605,47,9585,49],[9606,6,9586,8],[9607,6,9587,8],[9608,6,9588,8],[9609,6,9589,8],[9610,6,9590,8],[9611,6,9591,8],[9612,6,9592,8],[9613,6,9593,8],[9613,10,9593,12],[9613,11,9593,13,"resolver"],[9613,19,9593,21],[9613,20,9593,22,"_originValidation"],[9613,37,9593,39],[9613,38,9593,40],[9613,42,9593,44],[9613,43,9593,45,"auth"],[9613,47,9593,49],[9613,48,9593,50],[9613,49,9593,51,"catch"],[9613,54,9593,56],[9613,55,9593,57,"e"],[9613,56,9593,58],[9613,60,9593,62],[9614,8,9594,12],[9614,12,9594,16],[9614,13,9594,17,"reject"],[9614,19,9594,23],[9614,20,9594,24,"e"],[9614,21,9594,25],[9614,22,9594,26],[9615,6,9595,8],[9615,7,9595,9],[9615,8,9595,10],[9616,6,9596,8],[9616,10,9596,12],[9616,11,9596,13,"resolver"],[9616,19,9596,21],[9616,20,9596,22,"_isIframeWebStorageSupported"],[9616,48,9596,50],[9616,49,9596,51],[9616,53,9596,55],[9616,54,9596,56,"auth"],[9616,58,9596,60],[9616,60,9596,62,"isSupported"],[9616,71,9596,73],[9616,75,9596,77],[9617,8,9597,12],[9617,12,9597,16],[9617,13,9597,17,"isSupported"],[9617,24,9597,28],[9617,26,9597,30],[9618,10,9598,16],[9618,14,9598,20],[9618,15,9598,21,"reject"],[9618,21,9598,27],[9618,22,9598,28,"_createError"],[9618,34,9598,40],[9618,35,9598,41],[9618,39,9598,45],[9618,40,9598,46,"auth"],[9618,44,9598,50],[9618,46,9598,52],[9618,71,9598,77],[9618,72,9598,78],[9618,115,9598,121],[9618,116,9598,122],[9618,117,9598,123],[9619,8,9599,12],[9620,6,9600,8],[9620,7,9600,9],[9620,8,9600,10],[9621,6,9601,8],[9622,6,9602,8],[9622,10,9602,12],[9622,11,9602,13,"pollUserCancellation"],[9622,31,9602,33],[9622,32,9602,34],[9622,33,9602,35],[9623,4,9603,4],[9624,4,9604,4],[9624,8,9604,8,"eventId"],[9624,15,9604,15,"eventId"],[9624,16,9604,15],[9624,18,9604,18],[9625,6,9605,8],[9625,13,9605,15],[9625,17,9605,19],[9625,18,9605,20,"authWindow"],[9625,28,9605,30],[9625,30,9605,32,"associatedEvent"],[9625,45,9605,47],[9625,49,9605,51],[9625,53,9605,55],[9626,4,9606,4],[9627,4,9607,4,"cancel"],[9627,10,9607,10,"cancel"],[9627,11,9607,10],[9627,13,9607,13],[9628,6,9608,8],[9628,10,9608,12],[9628,11,9608,13,"reject"],[9628,17,9608,19],[9628,18,9608,20,"_createError"],[9628,30,9608,32],[9628,31,9608,33],[9628,35,9608,37],[9628,36,9608,38,"auth"],[9628,40,9608,42],[9628,42,9608,44],[9628,67,9608,69],[9628,68,9608,70],[9628,109,9608,111],[9628,110,9608,112],[9628,111,9608,113],[9629,4,9609,4],[9630,4,9610,4,"cleanUp"],[9630,11,9610,11,"cleanUp"],[9630,12,9610,11],[9630,14,9610,14],[9631,6,9611,8],[9631,10,9611,12],[9631,14,9611,16],[9631,15,9611,17,"authWindow"],[9631,25,9611,27],[9631,27,9611,29],[9632,8,9612,12],[9632,12,9612,16],[9632,13,9612,17,"authWindow"],[9632,23,9612,27],[9632,24,9612,28,"close"],[9632,29,9612,33],[9632,30,9612,34],[9632,31,9612,35],[9633,6,9613,8],[9634,6,9614,8],[9634,10,9614,12],[9634,14,9614,16],[9634,15,9614,17,"pollId"],[9634,21,9614,23],[9634,23,9614,25],[9635,8,9615,12,"window"],[9635,14,9615,18],[9635,15,9615,19,"clearTimeout"],[9635,27,9615,31],[9635,28,9615,32],[9635,32,9615,36],[9635,33,9615,37,"pollId"],[9635,39,9615,43],[9635,40,9615,44],[9636,6,9616,8],[9637,6,9617,8],[9637,10,9617,12],[9637,11,9617,13,"authWindow"],[9637,21,9617,23],[9637,24,9617,26],[9637,28,9617,30],[9638,6,9618,8],[9638,10,9618,12],[9638,11,9618,13,"pollId"],[9638,17,9618,19],[9638,20,9618,22],[9638,24,9618,26],[9639,6,9619,8,"PopupOperation"],[9639,20,9619,22],[9639,21,9619,23,"currentPopupAction"],[9639,39,9619,41],[9639,42,9619,44],[9639,46,9619,48],[9640,4,9620,4],[9641,4,9621,4,"pollUserCancellation"],[9641,24,9621,24,"pollUserCancellation"],[9641,25,9621,24],[9641,27,9621,27],[9642,6,9622,8],[9642,12,9622,14,"poll"],[9642,16,9622,18],[9642,19,9622,21,"poll"],[9642,20,9622,21],[9642,25,9622,27],[9643,8,9623,12],[9643,12,9623,16],[9643,16,9623,20],[9643,17,9623,21,"authWindow"],[9643,27,9623,31],[9643,29,9623,33,"window"],[9643,35,9623,39],[9643,37,9623,41,"closed"],[9643,43,9623,47],[9643,45,9623,49],[9644,10,9624,16],[9645,10,9625,16],[9646,10,9626,16],[9647,10,9627,16],[9648,10,9628,16],[9649,10,9629,16],[9649,14,9629,20],[9649,15,9629,21,"pollId"],[9649,21,9629,27],[9649,24,9629,30,"window"],[9649,30,9629,36],[9649,31,9629,37,"setTimeout"],[9649,41,9629,47],[9649,42,9629,48],[9649,48,9629,54],[9650,12,9630,20],[9650,16,9630,24],[9650,17,9630,25,"pollId"],[9650,23,9630,31],[9650,26,9630,34],[9650,30,9630,38],[9651,12,9631,20],[9651,16,9631,24],[9651,17,9631,25,"reject"],[9651,23,9631,31],[9651,24,9631,32,"_createError"],[9651,36,9631,44],[9651,37,9631,45],[9651,41,9631,49],[9651,42,9631,50,"auth"],[9651,46,9631,54],[9651,48,9631,56],[9651,70,9631,78],[9651,71,9631,79],[9651,111,9631,119],[9651,112,9631,120],[9651,113,9631,121],[9652,10,9632,16],[9652,11,9632,17],[9652,13,9632,19],[9652,17,9632,23],[9652,18,9632,24],[9652,43,9632,49],[9652,44,9632,50],[9653,10,9633,16],[9654,8,9634,12],[9655,8,9635,12],[9655,12,9635,16],[9655,13,9635,17,"pollId"],[9655,19,9635,23],[9655,22,9635,26,"window"],[9655,28,9635,32],[9655,29,9635,33,"setTimeout"],[9655,39,9635,43],[9655,40,9635,44,"poll"],[9655,44,9635,48],[9655,46,9635,50,"_POLL_WINDOW_CLOSE_TIMEOUT"],[9655,72,9635,76],[9655,73,9635,77,"get"],[9655,76,9635,80],[9655,77,9635,81],[9655,78,9635,82],[9655,79,9635,83],[9656,6,9636,8],[9656,7,9636,9],[9657,6,9637,8,"poll"],[9657,10,9637,12],[9657,11,9637,13],[9657,12,9637,14],[9658,4,9638,4],[9659,2,9639,0],[9660,2,9640,0],[9661,2,9641,0],[9662,2,9642,0,"PopupOperation"],[9662,16,9642,14],[9662,17,9642,15,"currentPopupAction"],[9662,35,9642,33],[9662,38,9642,36],[9662,42,9642,40],[9664,2,9644,0],[9665,0,9645,0],[9666,0,9646,0],[9667,0,9647,0],[9668,0,9648,0],[9669,0,9649,0],[9670,0,9650,0],[9671,0,9651,0],[9672,0,9652,0],[9673,0,9653,0],[9674,0,9654,0],[9675,0,9655,0],[9676,0,9656,0],[9677,0,9657,0],[9678,0,9658,0],[9679,0,9659,0],[9680,2,9660,0],[9680,8,9660,6,"PENDING_REDIRECT_KEY"],[9680,28,9660,26],[9680,31,9660,29],[9680,48,9660,46],[9681,2,9661,0],[9682,2,9662,0],[9683,2,9663,0],[9683,8,9663,6,"redirectOutcomeMap"],[9683,26,9663,24],[9683,29,9663,27],[9683,33,9663,31,"Map"],[9683,36,9663,34],[9683,37,9663,35],[9683,38,9663,36],[9684,2,9664,0],[9684,8,9664,6,"RedirectAction"],[9684,22,9664,20],[9684,31,9664,29,"AbstractPopupRedirectOperation"],[9684,61,9664,59],[9684,62,9664,60],[9685,4,9665,4,"constructor"],[9685,15,9665,15,"constructor"],[9685,16,9665,16,"auth"],[9685,20,9665,20],[9685,22,9665,22,"resolver"],[9685,30,9665,30],[9685,32,9665,32,"bypassAuthState"],[9685,47,9665,47],[9685,50,9665,50],[9685,55,9665,55],[9685,57,9665,57],[9686,6,9666,8],[9686,11,9666,13],[9686,12,9666,14,"auth"],[9686,16,9666,18],[9686,18,9666,20],[9686,19,9667,12],[9686,38,9667,31],[9686,39,9667,32],[9686,81,9668,12],[9686,98,9668,29],[9686,99,9668,30],[9686,138,9669,12],[9686,157,9669,31],[9686,158,9669,32],[9686,199,9670,12],[9686,208,9670,21],[9686,209,9670,22],[9686,237,9671,9],[9686,239,9671,11,"resolver"],[9686,247,9671,19],[9686,249,9671,21,"undefined"],[9686,258,9671,30],[9686,260,9671,32,"bypassAuthState"],[9686,275,9671,47],[9686,276,9671,48],[9687,6,9672,8],[9687,10,9672,12],[9687,11,9672,13,"eventId"],[9687,18,9672,20],[9687,21,9672,23],[9687,25,9672,27],[9688,4,9673,4],[9689,4,9674,4],[9690,0,9675,0],[9691,0,9676,0],[9692,0,9677,0],[9693,4,9678,4],[9693,10,9678,10,"execute"],[9693,17,9678,17,"execute"],[9693,18,9678,17],[9693,20,9678,20],[9694,6,9679,8],[9694,10,9679,12,"readyOutcome"],[9694,22,9679,24],[9694,25,9679,27,"redirectOutcomeMap"],[9694,43,9679,45],[9694,44,9679,46,"get"],[9694,47,9679,49],[9694,48,9679,50],[9694,52,9679,54],[9694,53,9679,55,"auth"],[9694,57,9679,59],[9694,58,9679,60,"_key"],[9694,62,9679,64],[9694,63,9679,65],[9694,64,9679,66],[9694,65,9679,67],[9695,6,9680,8],[9695,10,9680,12],[9695,11,9680,13,"readyOutcome"],[9695,23,9680,25],[9695,25,9680,27],[9696,8,9681,12],[9696,12,9681,16],[9697,10,9682,16],[9697,16,9682,22,"hasPendingRedirect"],[9697,34,9682,40],[9697,37,9682,43],[9697,43,9682,49,"_getAndClearPendingRedirectStatus"],[9697,76,9682,82],[9697,77,9682,83],[9697,81,9682,87],[9697,82,9682,88,"resolver"],[9697,90,9682,96],[9697,92,9682,98],[9697,96,9682,102],[9697,97,9682,103,"auth"],[9697,101,9682,107],[9697,102,9682,108],[9698,10,9683,16],[9698,16,9683,22,"result"],[9698,22,9683,28],[9698,25,9683,31,"hasPendingRedirect"],[9698,43,9683,49],[9698,46,9683,52],[9698,52,9683,58],[9698,57,9683,63],[9698,58,9683,64,"execute"],[9698,65,9683,71],[9698,66,9683,72],[9698,67,9683,73],[9698,70,9683,76],[9698,74,9683,80],[9699,10,9684,16,"readyOutcome"],[9699,22,9684,28],[9699,25,9684,31,"readyOutcome"],[9699,26,9684,31],[9699,31,9684,37,"Promise"],[9699,38,9684,44],[9699,39,9684,45,"resolve"],[9699,46,9684,52],[9699,47,9684,53,"result"],[9699,53,9684,59],[9699,54,9684,60],[9700,8,9685,12],[9700,9,9685,13],[9700,10,9686,12],[9700,17,9686,19,"e"],[9700,18,9686,20],[9700,20,9686,22],[9701,10,9687,16,"readyOutcome"],[9701,22,9687,28],[9701,25,9687,31,"readyOutcome"],[9701,26,9687,31],[9701,31,9687,37,"Promise"],[9701,38,9687,44],[9701,39,9687,45,"reject"],[9701,45,9687,51],[9701,46,9687,52,"e"],[9701,47,9687,53],[9701,48,9687,54],[9702,8,9688,12],[9703,8,9689,12,"redirectOutcomeMap"],[9703,26,9689,30],[9703,27,9689,31,"set"],[9703,30,9689,34],[9703,31,9689,35],[9703,35,9689,39],[9703,36,9689,40,"auth"],[9703,40,9689,44],[9703,41,9689,45,"_key"],[9703,45,9689,49],[9703,46,9689,50],[9703,47,9689,51],[9703,49,9689,53,"readyOutcome"],[9703,61,9689,65],[9703,62,9689,66],[9704,6,9690,8],[9705,6,9691,8],[9706,6,9692,8],[9707,6,9693,8],[9707,10,9693,12],[9707,11,9693,13],[9707,15,9693,17],[9707,16,9693,18,"bypassAuthState"],[9707,31,9693,33],[9707,33,9693,35],[9708,8,9694,12,"redirectOutcomeMap"],[9708,26,9694,30],[9708,27,9694,31,"set"],[9708,30,9694,34],[9708,31,9694,35],[9708,35,9694,39],[9708,36,9694,40,"auth"],[9708,40,9694,44],[9708,41,9694,45,"_key"],[9708,45,9694,49],[9708,46,9694,50],[9708,47,9694,51],[9708,49,9694,53],[9708,55,9694,59,"Promise"],[9708,62,9694,66],[9708,63,9694,67,"resolve"],[9708,70,9694,74],[9708,71,9694,75],[9708,75,9694,79],[9708,76,9694,80],[9708,77,9694,81],[9709,6,9695,8],[9710,6,9696,8],[9710,13,9696,15,"readyOutcome"],[9710,25,9696,27],[9710,26,9696,28],[9710,27,9696,29],[9711,4,9697,4],[9712,4,9698,4],[9712,10,9698,10,"onAuthEvent"],[9712,21,9698,21,"onAuthEvent"],[9712,22,9698,22,"event"],[9712,27,9698,27],[9712,29,9698,29],[9713,6,9699,8],[9713,10,9699,12,"event"],[9713,15,9699,17],[9713,16,9699,18,"type"],[9713,20,9699,22],[9713,25,9699,27],[9713,44,9699,46],[9713,45,9699,47],[9713,87,9699,89],[9714,8,9700,12],[9714,15,9700,19],[9714,20,9700,24],[9714,21,9700,25,"onAuthEvent"],[9714,32,9700,36],[9714,33,9700,37,"event"],[9714,38,9700,42],[9714,39,9700,43],[9715,6,9701,8],[9715,7,9701,9],[9715,13,9702,13],[9715,17,9702,17,"event"],[9715,22,9702,22],[9715,23,9702,23,"type"],[9715,27,9702,27],[9715,32,9702,32],[9715,41,9702,41],[9715,42,9702,42],[9715,71,9702,71],[9716,8,9703,12],[9717,8,9704,12],[9717,12,9704,16],[9717,13,9704,17,"resolve"],[9717,20,9704,24],[9717,21,9704,25],[9717,25,9704,29],[9717,26,9704,30],[9718,8,9705,12],[9719,6,9706,8],[9720,6,9707,8],[9720,10,9707,12,"event"],[9720,15,9707,17],[9720,16,9707,18,"eventId"],[9720,23,9707,25],[9720,25,9707,27],[9721,8,9708,12],[9721,14,9708,18,"user"],[9721,18,9708,22],[9721,21,9708,25],[9721,27,9708,31],[9721,31,9708,35],[9721,32,9708,36,"auth"],[9721,36,9708,40],[9721,37,9708,41,"_redirectUserForId"],[9721,55,9708,59],[9721,56,9708,60,"event"],[9721,61,9708,65],[9721,62,9708,66,"eventId"],[9721,69,9708,73],[9721,70,9708,74],[9722,8,9709,12],[9722,12,9709,16,"user"],[9722,16,9709,20],[9722,18,9709,22],[9723,10,9710,16],[9723,14,9710,20],[9723,15,9710,21,"user"],[9723,19,9710,25],[9723,22,9710,28,"user"],[9723,26,9710,32],[9724,10,9711,16],[9724,17,9711,23],[9724,22,9711,28],[9724,23,9711,29,"onAuthEvent"],[9724,34,9711,40],[9724,35,9711,41,"event"],[9724,40,9711,46],[9724,41,9711,47],[9725,8,9712,12],[9725,9,9712,13],[9725,15,9713,17],[9726,10,9714,16],[9726,14,9714,20],[9726,15,9714,21,"resolve"],[9726,22,9714,28],[9726,23,9714,29],[9726,27,9714,33],[9726,28,9714,34],[9727,8,9715,12],[9728,6,9716,8],[9729,4,9717,4],[9730,4,9718,4],[9730,10,9718,10,"onExecution"],[9730,21,9718,21,"onExecution"],[9730,22,9718,21],[9730,24,9718,24],[9730,25,9718,26],[9731,4,9719,4,"cleanUp"],[9731,11,9719,11,"cleanUp"],[9731,12,9719,11],[9731,14,9719,14],[9731,15,9719,16],[9732,2,9720,0],[9733,2,9721,0],[9733,17,9721,15,"_getAndClearPendingRedirectStatus"],[9733,50,9721,48,"_getAndClearPendingRedirectStatus"],[9733,51,9721,49,"resolver"],[9733,59,9721,57],[9733,61,9721,59,"auth"],[9733,65,9721,63],[9733,67,9721,65],[9734,4,9722,4],[9734,10,9722,10,"key"],[9734,13,9722,13],[9734,16,9722,16,"pendingRedirectKey"],[9734,34,9722,34],[9734,35,9722,35,"auth"],[9734,39,9722,39],[9734,40,9722,40],[9735,4,9723,4],[9735,10,9723,10,"persistence"],[9735,21,9723,21],[9735,24,9723,24,"resolverPersistence"],[9735,43,9723,43],[9735,44,9723,44,"resolver"],[9735,52,9723,52],[9735,53,9723,53],[9736,4,9724,4],[9736,8,9724,8],[9736,10,9724,10],[9736,16,9724,16,"persistence"],[9736,27,9724,27],[9736,28,9724,28,"_isAvailable"],[9736,40,9724,40],[9736,41,9724,41],[9736,42,9724,42],[9736,43,9724,43],[9736,45,9724,45],[9737,6,9725,8],[9737,13,9725,15],[9737,18,9725,20],[9738,4,9726,4],[9739,4,9727,4],[9739,10,9727,10,"hasPendingRedirect"],[9739,28,9727,28],[9739,31,9727,31],[9739,32,9727,32],[9739,38,9727,38,"persistence"],[9739,49,9727,49],[9739,50,9727,50,"_get"],[9739,54,9727,54],[9739,55,9727,55,"key"],[9739,58,9727,58],[9739,59,9727,59],[9739,65,9727,65],[9739,71,9727,71],[9740,4,9728,4],[9740,10,9728,10,"persistence"],[9740,21,9728,21],[9740,22,9728,22,"_remove"],[9740,29,9728,29],[9740,30,9728,30,"key"],[9740,33,9728,33],[9740,34,9728,34],[9741,4,9729,4],[9741,11,9729,11,"hasPendingRedirect"],[9741,29,9729,29],[9742,2,9730,0],[9743,2,9731,0],[9743,17,9731,15,"_setPendingRedirectStatus"],[9743,42,9731,40,"_setPendingRedirectStatus"],[9743,43,9731,41,"resolver"],[9743,51,9731,49],[9743,53,9731,51,"auth"],[9743,57,9731,55],[9743,59,9731,57],[9744,4,9732,4],[9744,11,9732,11,"resolverPersistence"],[9744,30,9732,30],[9744,31,9732,31,"resolver"],[9744,39,9732,39],[9744,40,9732,40],[9744,41,9732,41,"_set"],[9744,45,9732,45],[9744,46,9732,46,"pendingRedirectKey"],[9744,64,9732,64],[9744,65,9732,65,"auth"],[9744,69,9732,69],[9744,70,9732,70],[9744,72,9732,72],[9744,78,9732,78],[9744,79,9732,79],[9745,2,9733,0],[9746,2,9734,0],[9746,11,9734,9,"_clearRedirectOutcomes"],[9746,33,9734,31,"_clearRedirectOutcomes"],[9746,34,9734,31],[9746,36,9734,34],[9747,4,9735,4,"redirectOutcomeMap"],[9747,22,9735,22],[9747,23,9735,23,"clear"],[9747,28,9735,28],[9747,29,9735,29],[9747,30,9735,30],[9748,2,9736,0],[9749,2,9737,0],[9749,11,9737,9,"_overrideRedirectResult"],[9749,34,9737,32,"_overrideRedirectResult"],[9749,35,9737,33,"auth"],[9749,39,9737,37],[9749,41,9737,39,"result"],[9749,47,9737,45],[9749,49,9737,47],[9750,4,9738,4,"redirectOutcomeMap"],[9750,22,9738,22],[9750,23,9738,23,"set"],[9750,26,9738,26],[9750,27,9738,27,"auth"],[9750,31,9738,31],[9750,32,9738,32,"_key"],[9750,36,9738,36],[9750,37,9738,37],[9750,38,9738,38],[9750,40,9738,40,"result"],[9750,46,9738,46],[9750,47,9738,47],[9751,2,9739,0],[9752,2,9740,0],[9752,11,9740,9,"resolverPersistence"],[9752,30,9740,28,"resolverPersistence"],[9752,31,9740,29,"resolver"],[9752,39,9740,37],[9752,41,9740,39],[9753,4,9741,4],[9753,11,9741,11,"_getInstance"],[9753,23,9741,23],[9753,24,9741,24,"resolver"],[9753,32,9741,32],[9753,33,9741,33,"_redirectPersistence"],[9753,53,9741,53],[9753,54,9741,54],[9754,2,9742,0],[9755,2,9743,0],[9755,11,9743,9,"pendingRedirectKey"],[9755,29,9743,27,"pendingRedirectKey"],[9755,30,9743,28,"auth"],[9755,34,9743,32],[9755,36,9743,34],[9756,4,9744,4],[9756,11,9744,11,"_persistenceKeyName"],[9756,30,9744,30],[9756,31,9744,31,"PENDING_REDIRECT_KEY"],[9756,51,9744,51],[9756,53,9744,53,"auth"],[9756,57,9744,57],[9756,58,9744,58,"config"],[9756,64,9744,64],[9756,65,9744,65,"apiKey"],[9756,71,9744,71],[9756,73,9744,73,"auth"],[9756,77,9744,77],[9756,78,9744,78,"name"],[9756,82,9744,82],[9756,83,9744,83],[9757,2,9745,0],[9759,2,9747,0],[9760,0,9748,0],[9761,0,9749,0],[9762,0,9750,0],[9763,0,9751,0],[9764,0,9752,0],[9765,0,9753,0],[9766,0,9754,0],[9767,0,9755,0],[9768,0,9756,0],[9769,0,9757,0],[9770,0,9758,0],[9771,0,9759,0],[9772,0,9760,0],[9773,0,9761,0],[9774,0,9762,0],[9775,2,9763,0],[9776,0,9764,0],[9777,0,9765,0],[9778,0,9766,0],[9779,0,9767,0],[9780,0,9768,0],[9781,0,9769,0],[9782,0,9770,0],[9783,0,9771,0],[9784,0,9772,0],[9785,0,9773,0],[9786,0,9774,0],[9787,0,9775,0],[9788,0,9776,0],[9789,0,9777,0],[9790,0,9778,0],[9791,0,9779,0],[9792,0,9780,0],[9793,0,9781,0],[9794,0,9782,0],[9795,0,9783,0],[9796,0,9784,0],[9797,0,9785,0],[9798,0,9786,0],[9799,0,9787,0],[9800,0,9788,0],[9801,0,9789,0],[9802,0,9790,0],[9803,0,9791,0],[9804,0,9792,0],[9805,0,9793,0],[9806,0,9794,0],[9807,0,9795,0],[9808,0,9796,0],[9809,0,9797,0],[9810,0,9798,0],[9811,0,9799,0],[9812,0,9800,0],[9813,0,9801,0],[9814,0,9802,0],[9815,0,9803,0],[9816,0,9804,0],[9817,0,9805,0],[9818,0,9806,0],[9819,2,9807,0],[9819,11,9807,9,"signInWithRedirect"],[9819,29,9807,27,"signInWithRedirect"],[9819,30,9807,28,"auth"],[9819,34,9807,32],[9819,36,9807,34,"provider"],[9819,44,9807,42],[9819,46,9807,44,"resolver"],[9819,54,9807,52],[9819,56,9807,54],[9820,4,9808,4],[9820,11,9808,11,"_signInWithRedirect"],[9820,30,9808,30],[9820,31,9808,31,"auth"],[9820,35,9808,35],[9820,37,9808,37,"provider"],[9820,45,9808,45],[9820,47,9808,47,"resolver"],[9820,55,9808,55],[9820,56,9808,56],[9821,2,9809,0],[9822,2,9810,0],[9822,17,9810,15,"_signInWithRedirect"],[9822,36,9810,34,"_signInWithRedirect"],[9822,37,9810,35,"auth"],[9822,41,9810,39],[9822,43,9810,41,"provider"],[9822,51,9810,49],[9822,53,9810,51,"resolver"],[9822,61,9810,59],[9822,63,9810,61],[9823,4,9811,4],[9823,8,9811,8],[9823,12,9811,8,"_isFirebaseServerApp"],[9823,37,9811,28],[9823,39,9811,29,"auth"],[9823,43,9811,33],[9823,44,9811,34,"app"],[9823,47,9811,37],[9823,48,9811,38],[9823,50,9811,40],[9824,6,9812,8],[9824,13,9812,15,"Promise"],[9824,20,9812,22],[9824,21,9812,23,"reject"],[9824,27,9812,29],[9824,28,9812,30,"_serverAppCurrentUserOperationNotSupportedError"],[9824,75,9812,77],[9824,76,9812,78,"auth"],[9824,80,9812,82],[9824,81,9812,83],[9824,82,9812,84],[9825,4,9813,4],[9826,4,9814,4],[9826,10,9814,10,"authInternal"],[9826,22,9814,22],[9826,25,9814,25,"_castAuth"],[9826,34,9814,34],[9826,35,9814,35,"auth"],[9826,39,9814,39],[9826,40,9814,40],[9827,4,9815,4,"_assertInstanceOf"],[9827,21,9815,21],[9827,22,9815,22,"auth"],[9827,26,9815,26],[9827,28,9815,28,"provider"],[9827,36,9815,36],[9827,38,9815,38,"FederatedAuthProvider"],[9827,59,9815,59],[9827,60,9815,60],[9828,4,9816,4],[9829,4,9817,4],[9830,4,9818,4],[9831,4,9819,4],[9831,10,9819,10,"authInternal"],[9831,22,9819,22],[9831,23,9819,23,"_initializationPromise"],[9831,45,9819,45],[9832,4,9820,4],[9832,10,9820,10,"resolverInternal"],[9832,26,9820,26],[9832,29,9820,29,"_withDefaultResolver"],[9832,49,9820,49],[9832,50,9820,50,"authInternal"],[9832,62,9820,62],[9832,64,9820,64,"resolver"],[9832,72,9820,72],[9832,73,9820,73],[9833,4,9821,4],[9833,10,9821,10,"_setPendingRedirectStatus"],[9833,35,9821,35],[9833,36,9821,36,"resolverInternal"],[9833,52,9821,52],[9833,54,9821,54,"authInternal"],[9833,66,9821,66],[9833,67,9821,67],[9834,4,9822,4],[9834,11,9822,11,"resolverInternal"],[9834,27,9822,27],[9834,28,9822,28,"_openRedirect"],[9834,41,9822,41],[9834,42,9822,42,"authInternal"],[9834,54,9822,54],[9834,56,9822,56,"provider"],[9834,64,9822,64],[9834,66,9822,66],[9834,85,9822,85],[9834,86,9822,86],[9834,126,9822,126],[9834,127,9822,127],[9835,2,9823,0],[9836,2,9824,0],[9837,0,9825,0],[9838,0,9826,0],[9839,0,9827,0],[9840,0,9828,0],[9841,0,9829,0],[9842,0,9830,0],[9843,0,9831,0],[9844,0,9832,0],[9845,0,9833,0],[9846,0,9834,0],[9847,0,9835,0],[9848,0,9836,0],[9849,0,9837,0],[9850,0,9838,0],[9851,0,9839,0],[9852,0,9840,0],[9853,0,9841,0],[9854,0,9842,0],[9855,0,9843,0],[9856,0,9844,0],[9857,0,9845,0],[9858,0,9846,0],[9859,0,9847,0],[9860,0,9848,0],[9861,0,9849,0],[9862,0,9850,0],[9863,0,9851,0],[9864,0,9852,0],[9865,0,9853,0],[9866,0,9854,0],[9867,0,9855,0],[9868,0,9856,0],[9869,0,9857,0],[9870,0,9858,0],[9871,2,9859,0],[9871,11,9859,9,"reauthenticateWithRedirect"],[9871,37,9859,35,"reauthenticateWithRedirect"],[9871,38,9859,36,"user"],[9871,42,9859,40],[9871,44,9859,42,"provider"],[9871,52,9859,50],[9871,54,9859,52,"resolver"],[9871,62,9859,60],[9871,64,9859,62],[9872,4,9860,4],[9872,11,9860,11,"_reauthenticateWithRedirect"],[9872,38,9860,38],[9872,39,9860,39,"user"],[9872,43,9860,43],[9872,45,9860,45,"provider"],[9872,53,9860,53],[9872,55,9860,55,"resolver"],[9872,63,9860,63],[9872,64,9860,64],[9873,2,9861,0],[9874,2,9862,0],[9874,17,9862,15,"_reauthenticateWithRedirect"],[9874,44,9862,42,"_reauthenticateWithRedirect"],[9874,45,9862,43,"user"],[9874,49,9862,47],[9874,51,9862,49,"provider"],[9874,59,9862,57],[9874,61,9862,59,"resolver"],[9874,69,9862,67],[9874,71,9862,69],[9875,4,9863,4],[9875,10,9863,10,"userInternal"],[9875,22,9863,22],[9875,25,9863,25],[9875,29,9863,25,"getModularInstance"],[9875,53,9863,43],[9875,55,9863,44,"user"],[9875,59,9863,48],[9875,60,9863,49],[9876,4,9864,4,"_assertInstanceOf"],[9876,21,9864,21],[9876,22,9864,22,"userInternal"],[9876,34,9864,34],[9876,35,9864,35,"auth"],[9876,39,9864,39],[9876,41,9864,41,"provider"],[9876,49,9864,49],[9876,51,9864,51,"FederatedAuthProvider"],[9876,72,9864,72],[9876,73,9864,73],[9877,4,9865,4],[9877,8,9865,8],[9877,12,9865,8,"_isFirebaseServerApp"],[9877,37,9865,28],[9877,39,9865,29,"userInternal"],[9877,51,9865,41],[9877,52,9865,42,"auth"],[9877,56,9865,46],[9877,57,9865,47,"app"],[9877,60,9865,50],[9877,61,9865,51],[9877,63,9865,53],[9878,6,9866,8],[9878,13,9866,15,"Promise"],[9878,20,9866,22],[9878,21,9866,23,"reject"],[9878,27,9866,29],[9878,28,9866,30,"_serverAppCurrentUserOperationNotSupportedError"],[9878,75,9866,77],[9878,76,9866,78,"userInternal"],[9878,88,9866,90],[9878,89,9866,91,"auth"],[9878,93,9866,95],[9878,94,9866,96],[9878,95,9866,97],[9879,4,9867,4],[9880,4,9868,4],[9881,4,9869,4],[9882,4,9870,4],[9883,4,9871,4],[9883,10,9871,10,"userInternal"],[9883,22,9871,22],[9883,23,9871,23,"auth"],[9883,27,9871,27],[9883,28,9871,28,"_initializationPromise"],[9883,50,9871,50],[9884,4,9872,4],[9885,4,9873,4],[9885,10,9873,10,"resolverInternal"],[9885,26,9873,26],[9885,29,9873,29,"_withDefaultResolver"],[9885,49,9873,49],[9885,50,9873,50,"userInternal"],[9885,62,9873,62],[9885,63,9873,63,"auth"],[9885,67,9873,67],[9885,69,9873,69,"resolver"],[9885,77,9873,77],[9885,78,9873,78],[9886,4,9874,4],[9886,10,9874,10,"_setPendingRedirectStatus"],[9886,35,9874,35],[9886,36,9874,36,"resolverInternal"],[9886,52,9874,52],[9886,54,9874,54,"userInternal"],[9886,66,9874,66],[9886,67,9874,67,"auth"],[9886,71,9874,71],[9886,72,9874,72],[9887,4,9875,4],[9887,10,9875,10,"eventId"],[9887,17,9875,17],[9887,20,9875,20],[9887,26,9875,26,"prepareUserForRedirect"],[9887,48,9875,48],[9887,49,9875,49,"userInternal"],[9887,61,9875,61],[9887,62,9875,62],[9888,4,9876,4],[9888,11,9876,11,"resolverInternal"],[9888,27,9876,27],[9888,28,9876,28,"_openRedirect"],[9888,41,9876,41],[9888,42,9876,42,"userInternal"],[9888,54,9876,54],[9888,55,9876,55,"auth"],[9888,59,9876,59],[9888,61,9876,61,"provider"],[9888,69,9876,69],[9888,71,9876,71],[9888,90,9876,90],[9888,91,9876,91],[9888,132,9876,132,"eventId"],[9888,139,9876,139],[9888,140,9876,140],[9889,2,9877,0],[9890,2,9878,0],[9891,0,9879,0],[9892,0,9880,0],[9893,0,9881,0],[9894,0,9882,0],[9895,0,9883,0],[9896,0,9884,0],[9897,0,9885,0],[9898,0,9886,0],[9899,0,9887,0],[9900,0,9888,0],[9901,0,9889,0],[9902,0,9890,0],[9903,0,9891,0],[9904,0,9892,0],[9905,0,9893,0],[9906,0,9894,0],[9907,0,9895,0],[9908,0,9896,0],[9909,0,9897,0],[9910,0,9898,0],[9911,0,9899,0],[9912,0,9900,0],[9913,0,9901,0],[9914,0,9902,0],[9915,0,9903,0],[9916,0,9904,0],[9917,0,9905,0],[9918,0,9906,0],[9919,0,9907,0],[9920,0,9908,0],[9921,2,9909,0],[9921,11,9909,9,"linkWithRedirect"],[9921,27,9909,25,"linkWithRedirect"],[9921,28,9909,26,"user"],[9921,32,9909,30],[9921,34,9909,32,"provider"],[9921,42,9909,40],[9921,44,9909,42,"resolver"],[9921,52,9909,50],[9921,54,9909,52],[9922,4,9910,4],[9922,11,9910,11,"_linkWithRedirect"],[9922,28,9910,28],[9922,29,9910,29,"user"],[9922,33,9910,33],[9922,35,9910,35,"provider"],[9922,43,9910,43],[9922,45,9910,45,"resolver"],[9922,53,9910,53],[9922,54,9910,54],[9923,2,9911,0],[9924,2,9912,0],[9924,17,9912,15,"_linkWithRedirect"],[9924,34,9912,32,"_linkWithRedirect"],[9924,35,9912,33,"user"],[9924,39,9912,37],[9924,41,9912,39,"provider"],[9924,49,9912,47],[9924,51,9912,49,"resolver"],[9924,59,9912,57],[9924,61,9912,59],[9925,4,9913,4],[9925,10,9913,10,"userInternal"],[9925,22,9913,22],[9925,25,9913,25],[9925,29,9913,25,"getModularInstance"],[9925,53,9913,43],[9925,55,9913,44,"user"],[9925,59,9913,48],[9925,60,9913,49],[9926,4,9914,4,"_assertInstanceOf"],[9926,21,9914,21],[9926,22,9914,22,"userInternal"],[9926,34,9914,34],[9926,35,9914,35,"auth"],[9926,39,9914,39],[9926,41,9914,41,"provider"],[9926,49,9914,49],[9926,51,9914,51,"FederatedAuthProvider"],[9926,72,9914,72],[9926,73,9914,73],[9927,4,9915,4],[9928,4,9916,4],[9929,4,9917,4],[9930,4,9918,4],[9930,10,9918,10,"userInternal"],[9930,22,9918,22],[9930,23,9918,23,"auth"],[9930,27,9918,27],[9930,28,9918,28,"_initializationPromise"],[9930,50,9918,50],[9931,4,9919,4],[9932,4,9920,4],[9932,10,9920,10,"resolverInternal"],[9932,26,9920,26],[9932,29,9920,29,"_withDefaultResolver"],[9932,49,9920,49],[9932,50,9920,50,"userInternal"],[9932,62,9920,62],[9932,63,9920,63,"auth"],[9932,67,9920,67],[9932,69,9920,69,"resolver"],[9932,77,9920,77],[9932,78,9920,78],[9933,4,9921,4],[9933,10,9921,10,"_assertLinkedStatus"],[9933,29,9921,29],[9933,30,9921,30],[9933,35,9921,35],[9933,37,9921,37,"userInternal"],[9933,49,9921,49],[9933,51,9921,51,"provider"],[9933,59,9921,59],[9933,60,9921,60,"providerId"],[9933,70,9921,70],[9933,71,9921,71],[9934,4,9922,4],[9934,10,9922,10,"_setPendingRedirectStatus"],[9934,35,9922,35],[9934,36,9922,36,"resolverInternal"],[9934,52,9922,52],[9934,54,9922,54,"userInternal"],[9934,66,9922,66],[9934,67,9922,67,"auth"],[9934,71,9922,71],[9934,72,9922,72],[9935,4,9923,4],[9935,10,9923,10,"eventId"],[9935,17,9923,17],[9935,20,9923,20],[9935,26,9923,26,"prepareUserForRedirect"],[9935,48,9923,48],[9935,49,9923,49,"userInternal"],[9935,61,9923,61],[9935,62,9923,62],[9936,4,9924,4],[9936,11,9924,11,"resolverInternal"],[9936,27,9924,27],[9936,28,9924,28,"_openRedirect"],[9936,41,9924,41],[9936,42,9924,42,"userInternal"],[9936,54,9924,54],[9936,55,9924,55,"auth"],[9936,59,9924,59],[9936,61,9924,61,"provider"],[9936,69,9924,69],[9936,71,9924,71],[9936,88,9924,88],[9936,89,9924,89],[9936,128,9924,128,"eventId"],[9936,135,9924,135],[9936,136,9924,136],[9937,2,9925,0],[9938,2,9926,0],[9939,0,9927,0],[9940,0,9928,0],[9941,0,9929,0],[9942,0,9930,0],[9943,0,9931,0],[9944,0,9932,0],[9945,0,9933,0],[9946,0,9934,0],[9947,0,9935,0],[9948,0,9936,0],[9949,0,9937,0],[9950,0,9938,0],[9951,0,9939,0],[9952,0,9940,0],[9953,0,9941,0],[9954,0,9942,0],[9955,0,9943,0],[9956,0,9944,0],[9957,0,9945,0],[9958,0,9946,0],[9959,0,9947,0],[9960,0,9948,0],[9961,0,9949,0],[9962,0,9950,0],[9963,0,9951,0],[9964,0,9952,0],[9965,0,9953,0],[9966,0,9954,0],[9967,0,9955,0],[9968,0,9956,0],[9969,0,9957,0],[9970,0,9958,0],[9971,0,9959,0],[9972,0,9960,0],[9973,0,9961,0],[9974,0,9962,0],[9975,0,9963,0],[9976,0,9964,0],[9977,0,9965,0],[9978,0,9966,0],[9979,2,9967,0],[9979,17,9967,15,"getRedirectResult"],[9979,34,9967,32,"getRedirectResult"],[9979,35,9967,33,"auth"],[9979,39,9967,37],[9979,41,9967,39,"resolver"],[9979,49,9967,47],[9979,51,9967,49],[9980,4,9968,4],[9980,10,9968,10,"_castAuth"],[9980,19,9968,19],[9980,20,9968,20,"auth"],[9980,24,9968,24],[9980,25,9968,25],[9980,26,9968,26,"_initializationPromise"],[9980,48,9968,48],[9981,4,9969,4],[9981,11,9969,11,"_getRedirectResult"],[9981,29,9969,29],[9981,30,9969,30,"auth"],[9981,34,9969,34],[9981,36,9969,36,"resolver"],[9981,44,9969,44],[9981,46,9969,46],[9981,51,9969,51],[9981,52,9969,52],[9982,2,9970,0],[9983,2,9971,0],[9983,17,9971,15,"_getRedirectResult"],[9983,35,9971,33,"_getRedirectResult"],[9983,36,9971,34,"auth"],[9983,40,9971,38],[9983,42,9971,40,"resolverExtern"],[9983,56,9971,54],[9983,58,9971,56,"bypassAuthState"],[9983,73,9971,71],[9983,76,9971,74],[9983,81,9971,79],[9983,83,9971,81],[9984,4,9972,4],[9984,8,9972,8],[9984,12,9972,8,"_isFirebaseServerApp"],[9984,37,9972,28],[9984,39,9972,29,"auth"],[9984,43,9972,33],[9984,44,9972,34,"app"],[9984,47,9972,37],[9984,48,9972,38],[9984,50,9972,40],[9985,6,9973,8],[9985,13,9973,15,"Promise"],[9985,20,9973,22],[9985,21,9973,23,"reject"],[9985,27,9973,29],[9985,28,9973,30,"_serverAppCurrentUserOperationNotSupportedError"],[9985,75,9973,77],[9985,76,9973,78,"auth"],[9985,80,9973,82],[9985,81,9973,83],[9985,82,9973,84],[9986,4,9974,4],[9987,4,9975,4],[9987,10,9975,10,"authInternal"],[9987,22,9975,22],[9987,25,9975,25,"_castAuth"],[9987,34,9975,34],[9987,35,9975,35,"auth"],[9987,39,9975,39],[9987,40,9975,40],[9988,4,9976,4],[9988,10,9976,10,"resolver"],[9988,18,9976,18],[9988,21,9976,21,"_withDefaultResolver"],[9988,41,9976,41],[9988,42,9976,42,"authInternal"],[9988,54,9976,54],[9988,56,9976,56,"resolverExtern"],[9988,70,9976,70],[9988,71,9976,71],[9989,4,9977,4],[9989,10,9977,10,"action"],[9989,16,9977,16],[9989,19,9977,19],[9989,23,9977,23,"RedirectAction"],[9989,37,9977,37],[9989,38,9977,38,"authInternal"],[9989,50,9977,50],[9989,52,9977,52,"resolver"],[9989,60,9977,60],[9989,62,9977,62,"bypassAuthState"],[9989,77,9977,77],[9989,78,9977,78],[9990,4,9978,4],[9990,10,9978,10,"result"],[9990,16,9978,16],[9990,19,9978,19],[9990,25,9978,25,"action"],[9990,31,9978,31],[9990,32,9978,32,"execute"],[9990,39,9978,39],[9990,40,9978,40],[9990,41,9978,41],[9991,4,9979,4],[9991,8,9979,8,"result"],[9991,14,9979,14],[9991,18,9979,18],[9991,19,9979,19,"bypassAuthState"],[9991,34,9979,34],[9991,36,9979,36],[9992,6,9980,8],[9992,13,9980,15,"result"],[9992,19,9980,21],[9992,20,9980,22,"user"],[9992,24,9980,26],[9992,25,9980,27,"_redirectEventId"],[9992,41,9980,43],[9993,6,9981,8],[9993,12,9981,14,"authInternal"],[9993,24,9981,26],[9993,25,9981,27,"_persistUserIfCurrent"],[9993,46,9981,48],[9993,47,9981,49,"result"],[9993,53,9981,55],[9993,54,9981,56,"user"],[9993,58,9981,60],[9993,59,9981,61],[9994,6,9982,8],[9994,12,9982,14,"authInternal"],[9994,24,9982,26],[9994,25,9982,27,"_setRedirectUser"],[9994,41,9982,43],[9994,42,9982,44],[9994,46,9982,48],[9994,48,9982,50,"resolverExtern"],[9994,62,9982,64],[9994,63,9982,65],[9995,4,9983,4],[9996,4,9984,4],[9996,11,9984,11,"result"],[9996,17,9984,17],[9997,2,9985,0],[9998,2,9986,0],[9998,17,9986,15,"prepareUserForRedirect"],[9998,39,9986,37,"prepareUserForRedirect"],[9998,40,9986,38,"user"],[9998,44,9986,42],[9998,46,9986,44],[9999,4,9987,4],[9999,10,9987,10,"eventId"],[9999,17,9987,17],[9999,20,9987,20,"_generateEventId"],[9999,36,9987,36],[9999,37,9987,37],[9999,40,9987,40,"user"],[9999,44,9987,44],[9999,45,9987,45,"uid"],[9999,48,9987,48],[9999,53,9987,53],[9999,54,9987,54],[10000,4,9988,4,"user"],[10000,8,9988,8],[10000,9,9988,9,"_redirectEventId"],[10000,25,9988,25],[10000,28,9988,28,"eventId"],[10000,35,9988,35],[10001,4,9989,4],[10001,10,9989,10,"user"],[10001,14,9989,14],[10001,15,9989,15,"auth"],[10001,19,9989,19],[10001,20,9989,20,"_setRedirectUser"],[10001,36,9989,36],[10001,37,9989,37,"user"],[10001,41,9989,41],[10001,42,9989,42],[10002,4,9990,4],[10002,10,9990,10,"user"],[10002,14,9990,14],[10002,15,9990,15,"auth"],[10002,19,9990,19],[10002,20,9990,20,"_persistUserIfCurrent"],[10002,41,9990,41],[10002,42,9990,42,"user"],[10002,46,9990,46],[10002,47,9990,47],[10003,4,9991,4],[10003,11,9991,11,"eventId"],[10003,18,9991,18],[10004,2,9992,0],[10006,2,9994,0],[10007,0,9995,0],[10008,0,9996,0],[10009,0,9997,0],[10010,0,9998,0],[10011,0,9999,0],[10012,0,10000,0],[10013,0,10001,0],[10014,0,10002,0],[10015,0,10003,0],[10016,0,10004,0],[10017,0,10005,0],[10018,0,10006,0],[10019,0,10007,0],[10020,0,10008,0],[10021,0,10009,0],[10022,2,10010,0],[10023,2,10011,0],[10024,2,10012,0],[10024,8,10012,6,"EVENT_DUPLICATION_CACHE_DURATION_MS"],[10024,43,10012,41],[10024,46,10012,44],[10024,48,10012,46],[10024,51,10012,49],[10024,53,10012,51],[10024,56,10012,54],[10024,60,10012,58],[10025,2,10013,0],[10025,8,10013,6,"AuthEventManager"],[10025,24,10013,22],[10025,25,10013,23],[10026,4,10014,4,"constructor"],[10026,15,10014,15,"constructor"],[10026,16,10014,16,"auth"],[10026,20,10014,20],[10026,22,10014,22],[10027,6,10015,8],[10027,10,10015,12],[10027,11,10015,13,"auth"],[10027,15,10015,17],[10027,18,10015,20,"auth"],[10027,22,10015,24],[10028,6,10016,8],[10028,10,10016,12],[10028,11,10016,13,"cachedEventUids"],[10028,26,10016,28],[10028,29,10016,31],[10028,33,10016,35,"Set"],[10028,36,10016,38],[10028,37,10016,39],[10028,38,10016,40],[10029,6,10017,8],[10029,10,10017,12],[10029,11,10017,13,"consumers"],[10029,20,10017,22],[10029,23,10017,25],[10029,27,10017,29,"Set"],[10029,30,10017,32],[10029,31,10017,33],[10029,32,10017,34],[10030,6,10018,8],[10030,10,10018,12],[10030,11,10018,13,"queuedRedirectEvent"],[10030,30,10018,32],[10030,33,10018,35],[10030,37,10018,39],[10031,6,10019,8],[10031,10,10019,12],[10031,11,10019,13,"hasHandledPotentialRedirect"],[10031,38,10019,40],[10031,41,10019,43],[10031,46,10019,48],[10032,6,10020,8],[10032,10,10020,12],[10032,11,10020,13,"lastProcessedEventTime"],[10032,33,10020,35],[10032,36,10020,38,"Date"],[10032,40,10020,42],[10032,41,10020,43,"now"],[10032,44,10020,46],[10032,45,10020,47],[10032,46,10020,48],[10033,4,10021,4],[10034,4,10022,4,"registerConsumer"],[10034,20,10022,20,"registerConsumer"],[10034,21,10022,21,"authEventConsumer"],[10034,38,10022,38],[10034,40,10022,40],[10035,6,10023,8],[10035,10,10023,12],[10035,11,10023,13,"consumers"],[10035,20,10023,22],[10035,21,10023,23,"add"],[10035,24,10023,26],[10035,25,10023,27,"authEventConsumer"],[10035,42,10023,44],[10035,43,10023,45],[10036,6,10024,8],[10036,10,10024,12],[10036,14,10024,16],[10036,15,10024,17,"queuedRedirectEvent"],[10036,34,10024,36],[10036,38,10025,12],[10036,42,10025,16],[10036,43,10025,17,"isEventForConsumer"],[10036,61,10025,35],[10036,62,10025,36],[10036,66,10025,40],[10036,67,10025,41,"queuedRedirectEvent"],[10036,86,10025,60],[10036,88,10025,62,"authEventConsumer"],[10036,105,10025,79],[10036,106,10025,80],[10036,108,10025,82],[10037,8,10026,12],[10037,12,10026,16],[10037,13,10026,17,"sendToConsumer"],[10037,27,10026,31],[10037,28,10026,32],[10037,32,10026,36],[10037,33,10026,37,"queuedRedirectEvent"],[10037,52,10026,56],[10037,54,10026,58,"authEventConsumer"],[10037,71,10026,75],[10037,72,10026,76],[10038,8,10027,12],[10038,12,10027,16],[10038,13,10027,17,"saveEventToCache"],[10038,29,10027,33],[10038,30,10027,34],[10038,34,10027,38],[10038,35,10027,39,"queuedRedirectEvent"],[10038,54,10027,58],[10038,55,10027,59],[10039,8,10028,12],[10039,12,10028,16],[10039,13,10028,17,"queuedRedirectEvent"],[10039,32,10028,36],[10039,35,10028,39],[10039,39,10028,43],[10040,6,10029,8],[10041,4,10030,4],[10042,4,10031,4,"unregisterConsumer"],[10042,22,10031,22,"unregisterConsumer"],[10042,23,10031,23,"authEventConsumer"],[10042,40,10031,40],[10042,42,10031,42],[10043,6,10032,8],[10043,10,10032,12],[10043,11,10032,13,"consumers"],[10043,20,10032,22],[10043,21,10032,23,"delete"],[10043,27,10032,29],[10043,28,10032,30,"authEventConsumer"],[10043,45,10032,47],[10043,46,10032,48],[10044,4,10033,4],[10045,4,10034,4,"onEvent"],[10045,11,10034,11,"onEvent"],[10045,12,10034,12,"event"],[10045,17,10034,17],[10045,19,10034,19],[10046,6,10035,8],[10047,6,10036,8],[10047,10,10036,12],[10047,14,10036,16],[10047,15,10036,17,"hasEventBeenHandled"],[10047,34,10036,36],[10047,35,10036,37,"event"],[10047,40,10036,42],[10047,41,10036,43],[10047,43,10036,45],[10048,8,10037,12],[10048,15,10037,19],[10048,20,10037,24],[10049,6,10038,8],[10050,6,10039,8],[10050,10,10039,12,"handled"],[10050,17,10039,19],[10050,20,10039,22],[10050,25,10039,27],[10051,6,10040,8],[10051,10,10040,12],[10051,11,10040,13,"consumers"],[10051,20,10040,22],[10051,21,10040,23,"forEach"],[10051,28,10040,30],[10051,29,10040,31,"consumer"],[10051,37,10040,39],[10051,41,10040,43],[10052,8,10041,12],[10052,12,10041,16],[10052,16,10041,20],[10052,17,10041,21,"isEventForConsumer"],[10052,35,10041,39],[10052,36,10041,40,"event"],[10052,41,10041,45],[10052,43,10041,47,"consumer"],[10052,51,10041,55],[10052,52,10041,56],[10052,54,10041,58],[10053,10,10042,16,"handled"],[10053,17,10042,23],[10053,20,10042,26],[10053,24,10042,30],[10054,10,10043,16],[10054,14,10043,20],[10054,15,10043,21,"sendToConsumer"],[10054,29,10043,35],[10054,30,10043,36,"event"],[10054,35,10043,41],[10054,37,10043,43,"consumer"],[10054,45,10043,51],[10054,46,10043,52],[10055,10,10044,16],[10055,14,10044,20],[10055,15,10044,21,"saveEventToCache"],[10055,31,10044,37],[10055,32,10044,38,"event"],[10055,37,10044,43],[10055,38,10044,44],[10056,8,10045,12],[10057,6,10046,8],[10057,7,10046,9],[10057,8,10046,10],[10058,6,10047,8],[10058,10,10047,12],[10058,14,10047,16],[10058,15,10047,17,"hasHandledPotentialRedirect"],[10058,42,10047,44],[10058,46,10047,48],[10058,47,10047,49,"isRedirectEvent"],[10058,62,10047,64],[10058,63,10047,65,"event"],[10058,68,10047,70],[10058,69,10047,71],[10058,71,10047,73],[10059,8,10048,12],[10060,8,10049,12],[10061,8,10050,12],[10061,15,10050,19,"handled"],[10061,22,10050,26],[10062,6,10051,8],[10063,6,10052,8],[10063,10,10052,12],[10063,11,10052,13,"hasHandledPotentialRedirect"],[10063,38,10052,40],[10063,41,10052,43],[10063,45,10052,47],[10064,6,10053,8],[10065,6,10054,8],[10065,10,10054,12],[10065,11,10054,13,"handled"],[10065,18,10054,20],[10065,20,10054,22],[10066,8,10055,12],[10066,12,10055,16],[10066,13,10055,17,"queuedRedirectEvent"],[10066,32,10055,36],[10066,35,10055,39,"event"],[10066,40,10055,44],[10067,8,10056,12,"handled"],[10067,15,10056,19],[10067,18,10056,22],[10067,22,10056,26],[10068,6,10057,8],[10069,6,10058,8],[10069,13,10058,15,"handled"],[10069,20,10058,22],[10070,4,10059,4],[10071,4,10060,4,"sendToConsumer"],[10071,18,10060,18,"sendToConsumer"],[10071,19,10060,19,"event"],[10071,24,10060,24],[10071,26,10060,26,"consumer"],[10071,34,10060,34],[10071,36,10060,36],[10072,6,10061,8],[10072,10,10061,12,"event"],[10072,15,10061,17],[10072,16,10061,18,"error"],[10072,21,10061,23],[10072,25,10061,27],[10072,26,10061,28,"isNullRedirectEvent"],[10072,45,10061,47],[10072,46,10061,48,"event"],[10072,51,10061,53],[10072,52,10061,54],[10072,54,10061,56],[10073,8,10062,12],[10073,14,10062,18,"code"],[10073,18,10062,22],[10073,21,10062,25,"event"],[10073,26,10062,30],[10073,27,10062,31,"error"],[10073,32,10062,36],[10073,33,10062,37,"code"],[10073,37,10062,41],[10073,39,10062,43,"split"],[10073,44,10062,48],[10073,45,10062,49],[10073,52,10062,56],[10073,53,10062,57],[10073,54,10062,58],[10073,55,10062,59],[10073,56,10062,60],[10073,60,10063,16],[10073,76,10063,32],[10073,77,10063,33],[10074,8,10064,12,"consumer"],[10074,16,10064,20],[10074,17,10064,21,"onError"],[10074,24,10064,28],[10074,25,10064,29,"_createError"],[10074,37,10064,41],[10074,38,10064,42],[10074,42,10064,46],[10074,43,10064,47,"auth"],[10074,47,10064,51],[10074,49,10064,53,"code"],[10074,53,10064,57],[10074,54,10064,58],[10074,55,10064,59],[10075,6,10065,8],[10075,7,10065,9],[10075,13,10066,13],[10076,8,10067,12,"consumer"],[10076,16,10067,20],[10076,17,10067,21,"onAuthEvent"],[10076,28,10067,32],[10076,29,10067,33,"event"],[10076,34,10067,38],[10076,35,10067,39],[10077,6,10068,8],[10078,4,10069,4],[10079,4,10070,4,"isEventForConsumer"],[10079,22,10070,22,"isEventForConsumer"],[10079,23,10070,23,"event"],[10079,28,10070,28],[10079,30,10070,30,"consumer"],[10079,38,10070,38],[10079,40,10070,40],[10080,6,10071,8],[10080,12,10071,14,"eventIdMatches"],[10080,26,10071,28],[10080,29,10071,31,"consumer"],[10080,37,10071,39],[10080,38,10071,40,"eventId"],[10080,45,10071,47],[10080,50,10071,52],[10080,54,10071,56],[10080,58,10072,13],[10080,59,10072,14],[10080,60,10072,15,"event"],[10080,65,10072,20],[10080,66,10072,21,"eventId"],[10080,73,10072,28],[10080,77,10072,32,"event"],[10080,82,10072,37],[10080,83,10072,38,"eventId"],[10080,90,10072,45],[10080,95,10072,50,"consumer"],[10080,103,10072,58],[10080,104,10072,59,"eventId"],[10080,111,10072,67],[10081,6,10073,8],[10081,13,10073,15,"consumer"],[10081,21,10073,23],[10081,22,10073,24,"filter"],[10081,28,10073,30],[10081,29,10073,31,"includes"],[10081,37,10073,39],[10081,38,10073,40,"event"],[10081,43,10073,45],[10081,44,10073,46,"type"],[10081,48,10073,50],[10081,49,10073,51],[10081,53,10073,55,"eventIdMatches"],[10081,67,10073,69],[10082,4,10074,4],[10083,4,10075,4,"hasEventBeenHandled"],[10083,23,10075,23,"hasEventBeenHandled"],[10083,24,10075,24,"event"],[10083,29,10075,29],[10083,31,10075,31],[10084,6,10076,8],[10084,10,10076,12,"Date"],[10084,14,10076,16],[10084,15,10076,17,"now"],[10084,18,10076,20],[10084,19,10076,21],[10084,20,10076,22],[10084,23,10076,25],[10084,27,10076,29],[10084,28,10076,30,"lastProcessedEventTime"],[10084,50,10076,52],[10084,54,10077,12,"EVENT_DUPLICATION_CACHE_DURATION_MS"],[10084,89,10077,47],[10084,91,10077,49],[10085,8,10078,12],[10085,12,10078,16],[10085,13,10078,17,"cachedEventUids"],[10085,28,10078,32],[10085,29,10078,33,"clear"],[10085,34,10078,38],[10085,35,10078,39],[10085,36,10078,40],[10086,6,10079,8],[10087,6,10080,8],[10087,13,10080,15],[10087,17,10080,19],[10087,18,10080,20,"cachedEventUids"],[10087,33,10080,35],[10087,34,10080,36,"has"],[10087,37,10080,39],[10087,38,10080,40,"eventUid"],[10087,46,10080,48],[10087,47,10080,49,"event"],[10087,52,10080,54],[10087,53,10080,55],[10087,54,10080,56],[10088,4,10081,4],[10089,4,10082,4,"saveEventToCache"],[10089,20,10082,20,"saveEventToCache"],[10089,21,10082,21,"event"],[10089,26,10082,26],[10089,28,10082,28],[10090,6,10083,8],[10090,10,10083,12],[10090,11,10083,13,"cachedEventUids"],[10090,26,10083,28],[10090,27,10083,29,"add"],[10090,30,10083,32],[10090,31,10083,33,"eventUid"],[10090,39,10083,41],[10090,40,10083,42,"event"],[10090,45,10083,47],[10090,46,10083,48],[10090,47,10083,49],[10091,6,10084,8],[10091,10,10084,12],[10091,11,10084,13,"lastProcessedEventTime"],[10091,33,10084,35],[10091,36,10084,38,"Date"],[10091,40,10084,42],[10091,41,10084,43,"now"],[10091,44,10084,46],[10091,45,10084,47],[10091,46,10084,48],[10092,4,10085,4],[10093,2,10086,0],[10094,2,10086,1,"exports"],[10094,9,10086,1],[10094,10,10086,1,"aE"],[10094,12,10086,1],[10094,15,10086,1,"AuthEventManager"],[10094,31,10086,1],[10095,2,10087,0],[10095,11,10087,9,"eventUid"],[10095,19,10087,17,"eventUid"],[10095,20,10087,18,"e"],[10095,21,10087,19],[10095,23,10087,21],[10096,4,10088,4],[10096,11,10088,11],[10096,12,10088,12,"e"],[10096,13,10088,13],[10096,14,10088,14,"type"],[10096,18,10088,18],[10096,20,10088,20,"e"],[10096,21,10088,21],[10096,22,10088,22,"eventId"],[10096,29,10088,29],[10096,31,10088,31,"e"],[10096,32,10088,32],[10096,33,10088,33,"sessionId"],[10096,42,10088,42],[10096,44,10088,44,"e"],[10096,45,10088,45],[10096,46,10088,46,"tenantId"],[10096,54,10088,54],[10096,55,10088,55],[10096,56,10088,56,"filter"],[10096,62,10088,62],[10096,63,10088,63,"v"],[10096,64,10088,64],[10096,68,10088,68,"v"],[10096,69,10088,69],[10096,70,10088,70],[10096,71,10088,71,"join"],[10096,75,10088,75],[10096,76,10088,76],[10096,79,10088,79],[10096,80,10088,80],[10097,2,10089,0],[10098,2,10090,0],[10098,11,10090,9,"isNullRedirectEvent"],[10098,30,10090,28,"isNullRedirectEvent"],[10098,31,10090,29],[10099,4,10090,31,"type"],[10099,8,10090,35],[10100,4,10090,37,"error"],[10101,2,10090,43],[10101,3,10090,44],[10101,5,10090,46],[10102,4,10091,4],[10102,11,10091,12,"type"],[10102,15,10091,16],[10102,20,10091,21],[10102,29,10091,30],[10102,30,10091,31],[10102,61,10092,8,"error"],[10102,66,10092,13],[10102,68,10092,15,"code"],[10102,72,10092,19],[10102,77,10092,24],[10102,85,10092,32],[10102,100,10092,47],[10102,101,10092,48],[10102,136,10092,83],[10103,2,10093,0],[10104,2,10094,0],[10104,11,10094,9,"isRedirectEvent"],[10104,26,10094,24,"isRedirectEvent"],[10104,27,10094,25,"event"],[10104,32,10094,30],[10104,34,10094,32],[10105,4,10095,4],[10105,12,10095,12,"event"],[10105,17,10095,17],[10105,18,10095,18,"type"],[10105,22,10095,22],[10106,6,10096,8],[10106,11,10096,13],[10106,30,10096,32],[10106,31,10096,33],[10107,6,10097,8],[10107,11,10097,13],[10107,28,10097,30],[10107,29,10097,31],[10108,6,10098,8],[10108,11,10098,13],[10108,30,10098,32],[10108,31,10098,33],[10109,8,10099,12],[10109,15,10099,19],[10109,19,10099,23],[10110,6,10100,8],[10110,11,10100,13],[10110,20,10100,22],[10110,21,10100,23],[10111,8,10101,12],[10111,15,10101,19,"isNullRedirectEvent"],[10111,34,10101,38],[10111,35,10101,39,"event"],[10111,40,10101,44],[10111,41,10101,45],[10112,6,10102,8],[10113,8,10103,12],[10113,15,10103,19],[10113,20,10103,24],[10114,4,10104,4],[10115,2,10105,0],[10117,2,10107,0],[10118,0,10108,0],[10119,0,10109,0],[10120,0,10110,0],[10121,0,10111,0],[10122,0,10112,0],[10123,0,10113,0],[10124,0,10114,0],[10125,0,10115,0],[10126,0,10116,0],[10127,0,10117,0],[10128,0,10118,0],[10129,0,10119,0],[10130,0,10120,0],[10131,0,10121,0],[10132,0,10122,0],[10133,2,10123,0],[10133,17,10123,15,"_getProjectConfig"],[10133,34,10123,32,"_getProjectConfig"],[10133,35,10123,33,"auth"],[10133,39,10123,37],[10133,41,10123,39,"request"],[10133,48,10123,46],[10133,51,10123,49],[10133,52,10123,50],[10133,53,10123,51],[10133,55,10123,53],[10134,4,10124,4],[10134,11,10124,11,"_performApiRequest"],[10134,29,10124,29],[10134,30,10124,30,"auth"],[10134,34,10124,34],[10134,36,10124,36],[10134,41,10124,41],[10134,42,10124,42],[10134,64,10124,64],[10134,78,10124,78],[10134,79,10124,79],[10134,114,10124,114,"request"],[10134,121,10124,121],[10134,122,10124,122],[10135,2,10125,0],[10137,2,10127,0],[10138,0,10128,0],[10139,0,10129,0],[10140,0,10130,0],[10141,0,10131,0],[10142,0,10132,0],[10143,0,10133,0],[10144,0,10134,0],[10145,0,10135,0],[10146,0,10136,0],[10147,0,10137,0],[10148,0,10138,0],[10149,0,10139,0],[10150,0,10140,0],[10151,0,10141,0],[10152,0,10142,0],[10153,2,10143,0],[10153,8,10143,6,"IP_ADDRESS_REGEX"],[10153,24,10143,22],[10153,27,10143,25],[10153,65,10143,63],[10154,2,10144,0],[10154,8,10144,6,"HTTP_REGEX"],[10154,18,10144,16],[10154,21,10144,19],[10154,30,10144,28],[10155,2,10145,0],[10155,17,10145,15,"_validateOrigin"],[10155,32,10145,30,"_validateOrigin"],[10155,33,10145,31,"auth"],[10155,37,10145,35],[10155,39,10145,37],[10156,4,10146,4],[10157,4,10147,4],[10157,8,10147,8,"auth"],[10157,12,10147,12],[10157,13,10147,13,"config"],[10157,19,10147,19],[10157,20,10147,20,"emulator"],[10157,28,10147,28],[10157,30,10147,30],[10158,6,10148,8],[10159,4,10149,4],[10160,4,10150,4],[10160,10,10150,10],[10161,6,10150,12,"authorizedDomains"],[10162,4,10150,30],[10162,5,10150,31],[10162,8,10150,34],[10162,14,10150,40,"_getProjectConfig"],[10162,31,10150,57],[10162,32,10150,58,"auth"],[10162,36,10150,62],[10162,37,10150,63],[10163,4,10151,4],[10163,9,10151,9],[10163,15,10151,15,"domain"],[10163,21,10151,21],[10163,25,10151,25,"authorizedDomains"],[10163,42,10151,42],[10163,44,10151,44],[10164,6,10152,8],[10164,10,10152,12],[10165,8,10153,12],[10165,12,10153,16,"matchDomain"],[10165,23,10153,27],[10165,24,10153,28,"domain"],[10165,30,10153,34],[10165,31,10153,35],[10165,33,10153,37],[10166,10,10154,16],[10167,8,10155,12],[10168,6,10156,8],[10168,7,10156,9],[10168,8,10157,8],[10168,14,10157,14],[10169,8,10158,12],[10170,6,10158,12],[10171,4,10160,4],[10172,4,10161,4],[10173,4,10162,4,"_fail"],[10173,9,10162,9],[10173,10,10162,10,"auth"],[10173,14,10162,14],[10173,16,10162,16],[10173,37,10162,37],[10173,38,10162,38],[10173,72,10162,72],[10173,73,10162,73],[10174,2,10163,0],[10175,2,10164,0],[10175,11,10164,9,"matchDomain"],[10175,22,10164,20,"matchDomain"],[10175,23,10164,21,"expected"],[10175,31,10164,29],[10175,33,10164,31],[10176,4,10165,4],[10176,10,10165,10,"currentUrl"],[10176,20,10165,20],[10176,23,10165,23,"_getCurrentUrl"],[10176,37,10165,37],[10176,38,10165,38],[10176,39,10165,39],[10177,4,10166,4],[10177,10,10166,10],[10178,6,10166,12,"protocol"],[10178,14,10166,20],[10179,6,10166,22,"hostname"],[10180,4,10166,31],[10180,5,10166,32],[10180,8,10166,35],[10180,12,10166,39,"URL"],[10180,15,10166,42],[10180,16,10166,43,"currentUrl"],[10180,26,10166,53],[10180,27,10166,54],[10181,4,10167,4],[10181,8,10167,8,"expected"],[10181,16,10167,16],[10181,17,10167,17,"startsWith"],[10181,27,10167,27],[10181,28,10167,28],[10181,49,10167,49],[10181,50,10167,50],[10181,52,10167,52],[10182,6,10168,8],[10182,12,10168,14,"ceUrl"],[10182,17,10168,19],[10182,20,10168,22],[10182,24,10168,26,"URL"],[10182,27,10168,29],[10182,28,10168,30,"expected"],[10182,36,10168,38],[10182,37,10168,39],[10183,6,10169,8],[10183,10,10169,12,"ceUrl"],[10183,15,10169,17],[10183,16,10169,18,"hostname"],[10183,24,10169,26],[10183,29,10169,31],[10183,31,10169,33],[10183,35,10169,37,"hostname"],[10183,43,10169,45],[10183,48,10169,50],[10183,50,10169,52],[10183,52,10169,54],[10184,8,10170,12],[10185,8,10171,12],[10185,15,10171,20,"protocol"],[10185,23,10171,28],[10185,28,10171,33],[10185,47,10171,52],[10185,51,10172,16,"expected"],[10185,59,10172,24],[10185,60,10172,25,"replace"],[10185,67,10172,32],[10185,68,10172,33],[10185,89,10172,54],[10185,91,10172,56],[10185,93,10172,58],[10185,94,10172,59],[10185,99,10173,20,"currentUrl"],[10185,109,10173,30],[10185,110,10173,31,"replace"],[10185,117,10173,38],[10185,118,10173,39],[10185,139,10173,60],[10185,141,10173,62],[10185,143,10173,64],[10185,144,10173,65],[10186,6,10174,8],[10187,6,10175,8],[10187,13,10175,15,"protocol"],[10187,21,10175,23],[10187,26,10175,28],[10187,45,10175,47],[10187,49,10175,51,"ceUrl"],[10187,54,10175,56],[10187,55,10175,57,"hostname"],[10187,63,10175,65],[10187,68,10175,70,"hostname"],[10187,76,10175,78],[10188,4,10176,4],[10189,4,10177,4],[10189,8,10177,8],[10189,9,10177,9,"HTTP_REGEX"],[10189,19,10177,19],[10189,20,10177,20,"test"],[10189,24,10177,24],[10189,25,10177,25,"protocol"],[10189,33,10177,33],[10189,34,10177,34],[10189,36,10177,36],[10190,6,10178,8],[10190,13,10178,15],[10190,18,10178,20],[10191,4,10179,4],[10192,4,10180,4],[10192,8,10180,8,"IP_ADDRESS_REGEX"],[10192,24,10180,24],[10192,25,10180,25,"test"],[10192,29,10180,29],[10192,30,10180,30,"expected"],[10192,38,10180,38],[10192,39,10180,39],[10192,41,10180,41],[10193,6,10181,8],[10194,6,10182,8],[10195,6,10183,8],[10195,13,10183,15,"hostname"],[10195,21,10183,23],[10195,26,10183,28,"expected"],[10195,34,10183,36],[10196,4,10184,4],[10197,4,10185,4],[10198,4,10186,4],[10198,10,10186,10,"escapedDomainPattern"],[10198,30,10186,30],[10198,33,10186,33,"expected"],[10198,41,10186,41],[10198,42,10186,42,"replace"],[10198,49,10186,49],[10198,50,10186,50],[10198,55,10186,55],[10198,57,10186,57],[10198,62,10186,62],[10198,63,10186,63],[10199,4,10187,4],[10200,4,10188,4],[10201,4,10189,4],[10201,10,10189,10,"re"],[10201,12,10189,12],[10201,15,10189,15],[10201,19,10189,19,"RegExp"],[10201,25,10189,25],[10201,26,10189,26],[10201,35,10189,35],[10201,38,10189,38,"escapedDomainPattern"],[10201,58,10189,58],[10201,61,10189,61],[10201,64,10189,64],[10201,67,10189,67,"escapedDomainPattern"],[10201,87,10189,87],[10201,90,10189,90],[10201,94,10189,94],[10201,96,10189,96],[10201,99,10189,99],[10201,100,10189,100],[10202,4,10190,4],[10202,11,10190,11,"re"],[10202,13,10190,13],[10202,14,10190,14,"test"],[10202,18,10190,18],[10202,19,10190,19,"hostname"],[10202,27,10190,27],[10202,28,10190,28],[10203,2,10191,0],[10205,2,10193,0],[10206,0,10194,0],[10207,0,10195,0],[10208,0,10196,0],[10209,0,10197,0],[10210,0,10198,0],[10211,0,10199,0],[10212,0,10200,0],[10213,0,10201,0],[10214,0,10202,0],[10215,0,10203,0],[10216,0,10204,0],[10217,0,10205,0],[10218,0,10206,0],[10219,0,10207,0],[10220,0,10208,0],[10221,2,10209,0],[10221,8,10209,6,"NETWORK_TIMEOUT"],[10221,23,10209,21],[10221,26,10209,24],[10221,30,10209,28,"Delay"],[10221,35,10209,33],[10221,36,10209,34],[10221,41,10209,39],[10221,43,10209,41],[10221,48,10209,46],[10221,49,10209,47],[10222,2,10210,0],[10223,0,10211,0],[10224,0,10212,0],[10225,0,10213,0],[10226,2,10214,0],[10226,11,10214,9,"resetUnloadedGapiModules"],[10226,35,10214,33,"resetUnloadedGapiModules"],[10226,36,10214,33],[10226,38,10214,36],[10227,4,10215,4],[10228,4,10216,4],[10229,4,10217,4],[10230,4,10218,4],[10230,10,10218,10,"beacon"],[10230,16,10218,16],[10230,19,10218,19,"_window"],[10230,26,10218,26],[10230,27,10218,27],[10230,28,10218,28],[10230,29,10218,29,"___jsl"],[10230,35,10218,35],[10231,4,10219,4],[10232,4,10220,4],[10232,8,10220,8,"beacon"],[10232,14,10220,14],[10232,16,10220,16,"H"],[10232,17,10220,17],[10232,19,10220,19],[10233,6,10221,8],[10234,6,10222,8],[10234,11,10222,13],[10234,17,10222,19,"hint"],[10234,21,10222,23],[10234,25,10222,27,"Object"],[10234,31,10222,33],[10234,32,10222,34,"keys"],[10234,36,10222,38],[10234,37,10222,39,"beacon"],[10234,43,10222,45],[10234,44,10222,46,"H"],[10234,45,10222,47],[10234,46,10222,48],[10234,48,10222,50],[10235,8,10223,12],[10236,8,10224,12,"beacon"],[10236,14,10224,18],[10236,15,10224,19,"H"],[10236,16,10224,20],[10236,17,10224,21,"hint"],[10236,21,10224,25],[10236,22,10224,26],[10236,23,10224,27,"r"],[10236,24,10224,28],[10236,27,10224,31,"beacon"],[10236,33,10224,37],[10236,34,10224,38,"H"],[10236,35,10224,39],[10236,36,10224,40,"hint"],[10236,40,10224,44],[10236,41,10224,45],[10236,42,10224,46,"r"],[10236,43,10224,47],[10236,47,10224,51],[10236,49,10224,53],[10237,8,10225,12],[10238,8,10226,12,"beacon"],[10238,14,10226,18],[10238,15,10226,19,"H"],[10238,16,10226,20],[10238,17,10226,21,"hint"],[10238,21,10226,25],[10238,22,10226,26],[10238,23,10226,27,"L"],[10238,24,10226,28],[10238,27,10226,31,"beacon"],[10238,33,10226,37],[10238,34,10226,38,"H"],[10238,35,10226,39],[10238,36,10226,40,"hint"],[10238,40,10226,44],[10238,41,10226,45],[10238,42,10226,46,"L"],[10238,43,10226,47],[10238,47,10226,51],[10238,49,10226,53],[10239,8,10227,12],[10240,8,10228,12,"beacon"],[10240,14,10228,18],[10240,15,10228,19,"H"],[10240,16,10228,20],[10240,17,10228,21,"hint"],[10240,21,10228,25],[10240,22,10228,26],[10240,23,10228,27,"r"],[10240,24,10228,28],[10240,27,10228,31],[10240,28,10228,32],[10240,31,10228,35,"beacon"],[10240,37,10228,41],[10240,38,10228,42,"H"],[10240,39,10228,43],[10240,40,10228,44,"hint"],[10240,44,10228,48],[10240,45,10228,49],[10240,46,10228,50,"L"],[10240,47,10228,51],[10240,48,10228,52],[10241,8,10229,12],[10242,8,10230,12],[10242,12,10230,16,"beacon"],[10242,18,10230,22],[10242,19,10230,23,"CP"],[10242,21,10230,25],[10242,23,10230,27],[10243,10,10231,16],[10243,15,10231,21],[10243,19,10231,25,"i"],[10243,20,10231,26],[10243,23,10231,29],[10243,24,10231,30],[10243,26,10231,32,"i"],[10243,27,10231,33],[10243,30,10231,36,"beacon"],[10243,36,10231,42],[10243,37,10231,43,"CP"],[10243,39,10231,45],[10243,40,10231,46,"length"],[10243,46,10231,52],[10243,48,10231,54,"i"],[10243,49,10231,55],[10243,51,10231,57],[10243,53,10231,59],[10244,12,10232,20],[10245,12,10233,20,"beacon"],[10245,18,10233,26],[10245,19,10233,27,"CP"],[10245,21,10233,29],[10245,22,10233,30,"i"],[10245,23,10233,31],[10245,24,10233,32],[10245,27,10233,35],[10245,31,10233,39],[10246,10,10234,16],[10247,8,10235,12],[10248,6,10236,8],[10249,4,10237,4],[10250,2,10238,0],[10251,2,10239,0],[10251,11,10239,9,"loadGapi"],[10251,19,10239,17,"loadGapi"],[10251,20,10239,18,"auth"],[10251,24,10239,22],[10251,26,10239,24],[10252,4,10240,4],[10252,11,10240,11],[10252,15,10240,15,"Promise"],[10252,22,10240,22],[10252,23,10240,23],[10252,24,10240,24,"resolve"],[10252,31,10240,31],[10252,33,10240,33,"reject"],[10252,39,10240,39],[10252,44,10240,44],[10253,6,10241,8],[10254,6,10242,8],[10254,15,10242,17,"loadGapiIframe"],[10254,29,10242,31,"loadGapiIframe"],[10254,30,10242,31],[10254,32,10242,34],[10255,8,10243,12],[10256,8,10244,12],[10257,8,10245,12,"resetUnloadedGapiModules"],[10257,32,10245,36],[10257,33,10245,37],[10257,34,10245,38],[10258,8,10246,12,"gapi"],[10258,12,10246,16],[10258,13,10246,17,"load"],[10258,17,10246,21],[10258,18,10246,22],[10258,32,10246,36],[10258,34,10246,38],[10259,10,10247,16,"callback"],[10259,18,10247,24],[10259,20,10247,26,"callback"],[10259,21,10247,26],[10259,26,10247,32],[10260,12,10248,20,"resolve"],[10260,19,10248,27],[10260,20,10248,28,"gapi"],[10260,24,10248,32],[10260,25,10248,33,"iframes"],[10260,32,10248,40],[10260,33,10248,41,"getContext"],[10260,43,10248,51],[10260,44,10248,52],[10260,45,10248,53],[10260,46,10248,54],[10261,10,10249,16],[10261,11,10249,17],[10262,10,10250,16,"ontimeout"],[10262,19,10250,25],[10262,21,10250,27,"ontimeout"],[10262,22,10250,27],[10262,27,10250,33],[10263,12,10251,20],[10264,12,10252,20],[10265,12,10253,20],[10266,12,10254,20],[10267,12,10255,20],[10268,12,10256,20],[10269,12,10257,20,"resetUnloadedGapiModules"],[10269,36,10257,44],[10269,37,10257,45],[10269,38,10257,46],[10270,12,10258,20,"reject"],[10270,18,10258,26],[10270,19,10258,27,"_createError"],[10270,31,10258,39],[10270,32,10258,40,"auth"],[10270,36,10258,44],[10270,38,10258,46],[10270,62,10258,70],[10270,63,10258,71],[10270,105,10258,113],[10270,106,10258,114],[10270,107,10258,115],[10271,10,10259,16],[10271,11,10259,17],[10272,10,10260,16,"timeout"],[10272,17,10260,23],[10272,19,10260,25,"NETWORK_TIMEOUT"],[10272,34,10260,40],[10272,35,10260,41,"get"],[10272,38,10260,44],[10272,39,10260,45],[10273,8,10261,12],[10273,9,10261,13],[10273,10,10261,14],[10274,6,10262,8],[10275,6,10263,8],[10275,10,10263,12,"_window"],[10275,17,10263,19],[10275,18,10263,20],[10275,19,10263,21],[10275,20,10263,22,"gapi"],[10275,24,10263,26],[10275,26,10263,28,"iframes"],[10275,33,10263,35],[10275,35,10263,37,"Iframe"],[10275,41,10263,43],[10275,43,10263,45],[10276,8,10264,12],[10277,8,10265,12,"resolve"],[10277,15,10265,19],[10277,16,10265,20,"gapi"],[10277,20,10265,24],[10277,21,10265,25,"iframes"],[10277,28,10265,32],[10277,29,10265,33,"getContext"],[10277,39,10265,43],[10277,40,10265,44],[10277,41,10265,45],[10277,42,10265,46],[10278,6,10266,8],[10278,7,10266,9],[10278,13,10267,13],[10278,17,10267,17],[10278,18,10267,18],[10278,19,10267,19,"_window"],[10278,26,10267,26],[10278,27,10267,27],[10278,28,10267,28],[10278,29,10267,29,"gapi"],[10278,33,10267,33],[10278,35,10267,35,"load"],[10278,39,10267,39],[10278,41,10267,41],[10279,8,10268,12],[10280,8,10269,12,"loadGapiIframe"],[10280,22,10269,26],[10280,23,10269,27],[10280,24,10269,28],[10281,6,10270,8],[10281,7,10270,9],[10281,13,10271,13],[10282,8,10272,12],[10283,8,10273,12],[10284,8,10274,12],[10285,8,10275,12],[10286,8,10276,12],[10287,8,10277,12],[10287,14,10277,18,"cbName"],[10287,20,10277,24],[10287,23,10277,27,"_generateCallbackName"],[10287,44,10277,48],[10287,45,10277,49],[10287,56,10277,60],[10287,57,10277,61],[10288,8,10278,12],[10289,8,10279,12,"_window"],[10289,15,10279,19],[10289,16,10279,20],[10289,17,10279,21],[10289,18,10279,22,"cbName"],[10289,24,10279,28],[10289,25,10279,29],[10289,28,10279,32],[10289,34,10279,38],[10290,10,10280,16],[10291,10,10281,16],[10291,14,10281,20],[10291,15,10281,21],[10291,16,10281,22,"gapi"],[10291,20,10281,26],[10291,21,10281,27,"load"],[10291,25,10281,31],[10291,27,10281,33],[10292,12,10282,20,"loadGapiIframe"],[10292,26,10282,34],[10292,27,10282,35],[10292,28,10282,36],[10293,10,10283,16],[10293,11,10283,17],[10293,17,10284,21],[10294,12,10285,20],[10295,12,10286,20,"reject"],[10295,18,10286,26],[10295,19,10286,27,"_createError"],[10295,31,10286,39],[10295,32,10286,40,"auth"],[10295,36,10286,44],[10295,38,10286,46],[10295,62,10286,70],[10295,63,10286,71],[10295,105,10286,113],[10295,106,10286,114],[10295,107,10286,115],[10296,10,10287,16],[10297,8,10288,12],[10297,9,10288,13],[10298,8,10289,12],[10299,8,10290,12],[10299,15,10290,19,"_loadJS"],[10299,22,10290,26],[10299,23,10290,27],[10299,26,10290,30,"_gapiScriptUrl"],[10299,40,10290,44],[10299,41,10290,45],[10299,42,10290,46],[10299,53,10290,57,"cbName"],[10299,59,10290,63],[10299,61,10290,65],[10299,62,10290,66],[10299,63,10291,17,"catch"],[10299,68,10291,22],[10299,69,10291,23,"e"],[10299,70,10291,24],[10299,74,10291,28,"reject"],[10299,80,10291,34],[10299,81,10291,35,"e"],[10299,82,10291,36],[10299,83,10291,37],[10299,84,10291,38],[10300,6,10292,8],[10301,4,10293,4],[10301,5,10293,5],[10301,6,10293,6],[10301,7,10293,7,"catch"],[10301,12,10293,12],[10301,13,10293,13,"error"],[10301,18,10293,18],[10301,22,10293,22],[10302,6,10294,8],[10303,6,10295,8,"cachedGApiLoader"],[10303,22,10295,24],[10303,25,10295,27],[10303,29,10295,31],[10304,6,10296,8],[10304,12,10296,14,"error"],[10304,17,10296,19],[10305,4,10297,4],[10305,5,10297,5],[10305,6,10297,6],[10306,2,10298,0],[10307,2,10299,0],[10307,6,10299,4,"cachedGApiLoader"],[10307,22,10299,20],[10307,25,10299,23],[10307,29,10299,27],[10308,2,10300,0],[10308,11,10300,9,"_loadGapi"],[10308,20,10300,18,"_loadGapi"],[10308,21,10300,19,"auth"],[10308,25,10300,23],[10308,27,10300,25],[10309,4,10301,4,"cachedGApiLoader"],[10309,20,10301,20],[10309,23,10301,23,"cachedGApiLoader"],[10309,39,10301,39],[10309,43,10301,43,"loadGapi"],[10309,51,10301,51],[10309,52,10301,52,"auth"],[10309,56,10301,56],[10309,57,10301,57],[10310,4,10302,4],[10310,11,10302,11,"cachedGApiLoader"],[10310,27,10302,27],[10311,2,10303,0],[10313,2,10305,0],[10314,0,10306,0],[10315,0,10307,0],[10316,0,10308,0],[10317,0,10309,0],[10318,0,10310,0],[10319,0,10311,0],[10320,0,10312,0],[10321,0,10313,0],[10322,0,10314,0],[10323,0,10315,0],[10324,0,10316,0],[10325,0,10317,0],[10326,0,10318,0],[10327,0,10319,0],[10328,0,10320,0],[10329,2,10321,0],[10329,8,10321,6,"PING_TIMEOUT"],[10329,20,10321,18],[10329,23,10321,21],[10329,27,10321,25,"Delay"],[10329,32,10321,30],[10329,33,10321,31],[10329,37,10321,35],[10329,39,10321,37],[10329,44,10321,42],[10329,45,10321,43],[10330,2,10322,0],[10330,8,10322,6,"IFRAME_PATH"],[10330,19,10322,17],[10330,22,10322,20],[10330,38,10322,36],[10331,2,10323,0],[10331,8,10323,6,"EMULATED_IFRAME_PATH"],[10331,28,10323,26],[10331,31,10323,29],[10331,53,10323,51],[10332,2,10324,0],[10332,8,10324,6,"IFRAME_ATTRIBUTES"],[10332,25,10324,23],[10332,28,10324,26],[10333,4,10325,4,"style"],[10333,9,10325,9],[10333,11,10325,11],[10334,6,10326,8,"position"],[10334,14,10326,16],[10334,16,10326,18],[10334,26,10326,28],[10335,6,10327,8,"top"],[10335,9,10327,11],[10335,11,10327,13],[10335,19,10327,21],[10336,6,10328,8,"width"],[10336,11,10328,13],[10336,13,10328,15],[10336,18,10328,20],[10337,6,10329,8,"height"],[10337,12,10329,14],[10337,14,10329,16],[10338,4,10330,4],[10338,5,10330,5],[10339,4,10331,4],[10339,17,10331,17],[10339,19,10331,19],[10339,25,10331,25],[10340,4,10332,4,"tabindex"],[10340,12,10332,12],[10340,14,10332,14],[10341,2,10333,0],[10341,3,10333,1],[10342,2,10334,0],[10343,2,10335,0],[10344,2,10336,0],[10344,8,10336,6,"EID_FROM_APIHOST"],[10344,24,10336,22],[10344,27,10336,25],[10344,31,10336,29,"Map"],[10344,34,10336,32],[10344,35,10336,33],[10344,36,10337,4],[10344,37,10337,5],[10344,69,10337,37],[10344,70,10337,38],[10344,100,10337,68],[10344,103,10337,71],[10344,104,10337,72],[10345,2,10337,74],[10346,2,10338,4],[10346,3,10338,5],[10346,51,10338,53],[10346,53,10338,55],[10346,56,10338,58],[10346,57,10338,59],[10347,2,10338,61],[10348,2,10339,4],[10348,3,10339,5],[10348,48,10339,50],[10348,50,10339,52],[10348,53,10339,55],[10348,54,10339,56],[10348,55,10339,57],[10349,2,10339,57],[10349,3,10340,1],[10349,4,10340,2],[10350,2,10341,0],[10350,11,10341,9,"getIframeUrl"],[10350,23,10341,21,"getIframeUrl"],[10350,24,10341,22,"auth"],[10350,28,10341,26],[10350,30,10341,28],[10351,4,10342,4],[10351,10,10342,10,"config"],[10351,16,10342,16],[10351,19,10342,19,"auth"],[10351,23,10342,23],[10351,24,10342,24,"config"],[10351,30,10342,30],[10352,4,10343,4,"_assert"],[10352,11,10343,11],[10352,12,10343,12,"config"],[10352,18,10343,18],[10352,19,10343,19,"authDomain"],[10352,29,10343,29],[10352,31,10343,31,"auth"],[10352,35,10343,35],[10352,37,10343,37],[10352,66,10343,66],[10352,67,10343,67],[10352,106,10343,106],[10352,107,10343,107],[10353,4,10344,4],[10353,10,10344,10,"url"],[10353,13,10344,13],[10353,16,10344,16,"config"],[10353,22,10344,22],[10353,23,10344,23,"emulator"],[10353,31,10344,31],[10353,34,10345,10,"_emulatorUrl"],[10353,46,10345,22],[10353,47,10345,23,"config"],[10353,53,10345,29],[10353,55,10345,31,"EMULATED_IFRAME_PATH"],[10353,75,10345,51],[10353,76,10345,52],[10353,79,10346,10],[10353,90,10346,21,"auth"],[10353,94,10346,25],[10353,95,10346,26,"config"],[10353,101,10346,32],[10353,102,10346,33,"authDomain"],[10353,112,10346,43],[10353,116,10346,47,"IFRAME_PATH"],[10353,127,10346,58],[10353,129,10346,60],[10354,4,10347,4],[10354,10,10347,10,"params"],[10354,16,10347,16],[10354,19,10347,19],[10355,6,10348,8,"apiKey"],[10355,12,10348,14],[10355,14,10348,16,"config"],[10355,20,10348,22],[10355,21,10348,23,"apiKey"],[10355,27,10348,29],[10356,6,10349,8,"appName"],[10356,13,10349,15],[10356,15,10349,17,"auth"],[10356,19,10349,21],[10356,20,10349,22,"name"],[10356,24,10349,26],[10357,6,10350,8,"v"],[10357,7,10350,9],[10357,9,10350,11,"SDK_VERSION"],[10358,4,10351,4],[10358,5,10351,5],[10359,4,10352,4],[10359,10,10352,10,"eid"],[10359,13,10352,13],[10359,16,10352,16,"EID_FROM_APIHOST"],[10359,32,10352,32],[10359,33,10352,33,"get"],[10359,36,10352,36],[10359,37,10352,37,"auth"],[10359,41,10352,41],[10359,42,10352,42,"config"],[10359,48,10352,48],[10359,49,10352,49,"apiHost"],[10359,56,10352,56],[10359,57,10352,57],[10360,4,10353,4],[10360,8,10353,8,"eid"],[10360,11,10353,11],[10360,13,10353,13],[10361,6,10354,8,"params"],[10361,12,10354,14],[10361,13,10354,15,"eid"],[10361,16,10354,18],[10361,19,10354,21,"eid"],[10361,22,10354,24],[10362,4,10355,4],[10363,4,10356,4],[10363,10,10356,10,"frameworks"],[10363,20,10356,20],[10363,23,10356,23,"auth"],[10363,27,10356,27],[10363,28,10356,28,"_getFrameworks"],[10363,42,10356,42],[10363,43,10356,43],[10363,44,10356,44],[10364,4,10357,4],[10364,8,10357,8,"frameworks"],[10364,18,10357,18],[10364,19,10357,19,"length"],[10364,25,10357,25],[10364,27,10357,27],[10365,6,10358,8,"params"],[10365,12,10358,14],[10365,13,10358,15,"fw"],[10365,15,10358,17],[10365,18,10358,20,"frameworks"],[10365,28,10358,30],[10365,29,10358,31,"join"],[10365,33,10358,35],[10365,34,10358,36],[10365,37,10358,39],[10365,38,10358,40],[10366,4,10359,4],[10367,4,10360,4],[10367,11,10360,11],[10367,14,10360,14,"url"],[10367,17,10360,17],[10367,21,10360,21],[10367,25,10360,21,"querystring"],[10367,42,10360,32],[10367,44,10360,33,"params"],[10367,50,10360,39],[10367,51,10360,40],[10367,52,10360,41,"slice"],[10367,57,10360,46],[10367,58,10360,47],[10367,59,10360,48],[10367,60,10360,49],[10367,62,10360,51],[10368,2,10361,0],[10369,2,10362,0],[10369,17,10362,15,"_openIframe"],[10369,28,10362,26,"_openIframe"],[10369,29,10362,27,"auth"],[10369,33,10362,31],[10369,35,10362,33],[10370,4,10363,4],[10370,10,10363,10,"context"],[10370,17,10363,17],[10370,20,10363,20],[10370,26,10363,26,"_loadGapi"],[10370,35,10363,35],[10370,36,10363,36,"auth"],[10370,40,10363,40],[10370,41,10363,41],[10371,4,10364,4],[10371,10,10364,10,"gapi"],[10371,14,10364,14],[10371,17,10364,17,"_window"],[10371,24,10364,24],[10371,25,10364,25],[10371,26,10364,26],[10371,27,10364,27,"gapi"],[10371,31,10364,31],[10372,4,10365,4,"_assert"],[10372,11,10365,11],[10372,12,10365,12,"gapi"],[10372,16,10365,16],[10372,18,10365,18,"auth"],[10372,22,10365,22],[10372,24,10365,24],[10372,40,10365,40],[10372,41,10365,41],[10372,75,10365,75],[10372,76,10365,76],[10373,4,10366,4],[10373,11,10366,11,"context"],[10373,18,10366,18],[10373,19,10366,19,"open"],[10373,23,10366,23],[10373,24,10366,24],[10374,6,10367,8,"where"],[10374,11,10367,13],[10374,13,10367,15,"document"],[10374,21,10367,23],[10374,22,10367,24,"body"],[10374,26,10367,28],[10375,6,10368,8,"url"],[10375,9,10368,11],[10375,11,10368,13,"getIframeUrl"],[10375,23,10368,25],[10375,24,10368,26,"auth"],[10375,28,10368,30],[10375,29,10368,31],[10376,6,10369,8,"messageHandlersFilter"],[10376,27,10369,29],[10376,29,10369,31,"gapi"],[10376,33,10369,35],[10376,34,10369,36,"iframes"],[10376,41,10369,43],[10376,42,10369,44,"CROSS_ORIGIN_IFRAMES_FILTER"],[10376,69,10369,71],[10377,6,10370,8,"attributes"],[10377,16,10370,18],[10377,18,10370,20,"IFRAME_ATTRIBUTES"],[10377,35,10370,37],[10378,6,10371,8,"dontclear"],[10378,15,10371,17],[10378,17,10371,19],[10379,4,10372,4],[10379,5,10372,5],[10379,7,10372,8,"iframe"],[10379,13,10372,14],[10379,17,10372,19],[10379,21,10372,23,"Promise"],[10379,28,10372,30],[10379,29,10372,31],[10379,36,10372,38,"resolve"],[10379,43,10372,45],[10379,45,10372,47,"reject"],[10379,51,10372,53],[10379,56,10372,58],[10380,6,10373,8],[10380,12,10373,14,"iframe"],[10380,18,10373,20],[10380,19,10373,21,"restyle"],[10380,26,10373,28],[10380,27,10373,29],[10381,8,10374,12],[10382,8,10375,12,"setHideOnLeave"],[10382,22,10375,26],[10382,24,10375,28],[10383,6,10376,8],[10383,7,10376,9],[10383,8,10376,10],[10384,6,10377,8],[10384,12,10377,14,"networkError"],[10384,24,10377,26],[10384,27,10377,29,"_createError"],[10384,39,10377,41],[10384,40,10377,42,"auth"],[10384,44,10377,46],[10384,46,10377,48],[10384,70,10377,72],[10384,71,10377,73],[10384,113,10377,115],[10384,114,10377,116],[10385,6,10378,8],[10386,6,10379,8],[10387,6,10380,8],[10387,12,10380,14,"networkErrorTimer"],[10387,29,10380,31],[10387,32,10380,34,"_window"],[10387,39,10380,41],[10387,40,10380,42],[10387,41,10380,43],[10387,42,10380,44,"setTimeout"],[10387,52,10380,54],[10387,53,10380,55],[10387,59,10380,61],[10388,8,10381,12,"reject"],[10388,14,10381,18],[10388,15,10381,19,"networkError"],[10388,27,10381,31],[10388,28,10381,32],[10389,6,10382,8],[10389,7,10382,9],[10389,9,10382,11,"PING_TIMEOUT"],[10389,21,10382,23],[10389,22,10382,24,"get"],[10389,25,10382,27],[10389,26,10382,28],[10389,27,10382,29],[10389,28,10382,30],[10390,6,10383,8],[10391,6,10384,8],[10391,15,10384,17,"clearTimerAndResolve"],[10391,35,10384,37,"clearTimerAndResolve"],[10391,36,10384,37],[10391,38,10384,40],[10392,8,10385,12,"_window"],[10392,15,10385,19],[10392,16,10385,20],[10392,17,10385,21],[10392,18,10385,22,"clearTimeout"],[10392,30,10385,34],[10392,31,10385,35,"networkErrorTimer"],[10392,48,10385,52],[10392,49,10385,53],[10393,8,10386,12,"resolve"],[10393,15,10386,19],[10393,16,10386,20,"iframe"],[10393,22,10386,26],[10393,23,10386,27],[10394,6,10387,8],[10395,6,10388,8],[10396,6,10389,8],[10397,6,10390,8,"iframe"],[10397,12,10390,14],[10397,13,10390,15,"ping"],[10397,17,10390,19],[10397,18,10390,20,"clearTimerAndResolve"],[10397,38,10390,40],[10397,39,10390,41],[10397,40,10390,42,"then"],[10397,44,10390,46],[10397,45,10390,47,"clearTimerAndResolve"],[10397,65,10390,67],[10397,67,10390,69],[10397,73,10390,75],[10398,8,10391,12,"reject"],[10398,14,10391,18],[10398,15,10391,19,"networkError"],[10398,27,10391,31],[10398,28,10391,32],[10399,6,10392,8],[10399,7,10392,9],[10399,8,10392,10],[10400,4,10393,4],[10400,5,10393,5],[10400,6,10393,6],[10400,7,10393,7],[10401,2,10394,0],[10403,2,10396,0],[10404,0,10397,0],[10405,0,10398,0],[10406,0,10399,0],[10407,0,10400,0],[10408,0,10401,0],[10409,0,10402,0],[10410,0,10403,0],[10411,0,10404,0],[10412,0,10405,0],[10413,0,10406,0],[10414,0,10407,0],[10415,0,10408,0],[10416,0,10409,0],[10417,0,10410,0],[10418,0,10411,0],[10419,2,10412,0],[10419,8,10412,6,"BASE_POPUP_OPTIONS"],[10419,26,10412,24],[10419,29,10412,27],[10420,4,10413,4,"location"],[10420,12,10413,12],[10420,14,10413,14],[10420,19,10413,19],[10421,4,10414,4,"resizable"],[10421,13,10414,13],[10421,15,10414,15],[10421,20,10414,20],[10422,4,10415,4,"statusbar"],[10422,13,10415,13],[10422,15,10415,15],[10422,20,10415,20],[10423,4,10416,4,"toolbar"],[10423,11,10416,11],[10423,13,10416,13],[10424,2,10417,0],[10424,3,10417,1],[10425,2,10418,0],[10425,8,10418,6,"DEFAULT_WIDTH"],[10425,21,10418,19],[10425,24,10418,22],[10425,27,10418,25],[10426,2,10419,0],[10426,8,10419,6,"DEFAULT_HEIGHT"],[10426,22,10419,20],[10426,25,10419,23],[10426,28,10419,26],[10427,2,10420,0],[10427,8,10420,6,"TARGET_BLANK"],[10427,20,10420,18],[10427,23,10420,21],[10427,31,10420,29],[10428,2,10421,0],[10428,8,10421,6,"FIREFOX_EMPTY_URL"],[10428,25,10421,23],[10428,28,10421,26],[10428,46,10421,44],[10429,2,10422,0],[10429,8,10422,6,"AuthPopup"],[10429,17,10422,15],[10429,18,10422,16],[10430,4,10423,4,"constructor"],[10430,15,10423,15,"constructor"],[10430,16,10423,16,"window"],[10430,22,10423,22],[10430,24,10423,24],[10431,6,10424,8],[10431,10,10424,12],[10431,11,10424,13,"window"],[10431,17,10424,19],[10431,20,10424,22,"window"],[10431,26,10424,28],[10432,6,10425,8],[10432,10,10425,12],[10432,11,10425,13,"associatedEvent"],[10432,26,10425,28],[10432,29,10425,31],[10432,33,10425,35],[10433,4,10426,4],[10434,4,10427,4,"close"],[10434,9,10427,9,"close"],[10434,10,10427,9],[10434,12,10427,12],[10435,6,10428,8],[10435,10,10428,12],[10435,14,10428,16],[10435,15,10428,17,"window"],[10435,21,10428,23],[10435,23,10428,25],[10436,8,10429,12],[10436,12,10429,16],[10437,10,10430,16],[10437,14,10430,20],[10437,15,10430,21,"window"],[10437,21,10430,27],[10437,22,10430,28,"close"],[10437,27,10430,33],[10437,28,10430,34],[10437,29,10430,35],[10438,8,10431,12],[10438,9,10431,13],[10438,10,10432,12],[10438,17,10432,19,"e"],[10438,18,10432,20],[10438,20,10432,22],[10438,21,10432,24],[10439,6,10433,8],[10440,4,10434,4],[10441,2,10435,0],[10442,2,10435,1,"exports"],[10442,9,10435,1],[10442,10,10435,1,"aP"],[10442,12,10435,1],[10442,15,10435,1,"AuthPopup"],[10442,24,10435,1],[10443,2,10436,0],[10443,11,10436,9,"_open"],[10443,16,10436,14,"_open"],[10443,17,10436,15,"auth"],[10443,21,10436,19],[10443,23,10436,21,"url"],[10443,26,10436,24],[10443,28,10436,26,"name"],[10443,32,10436,30],[10443,34,10436,32,"width"],[10443,39,10436,37],[10443,42,10436,40,"DEFAULT_WIDTH"],[10443,55,10436,53],[10443,57,10436,55,"height"],[10443,63,10436,61],[10443,66,10436,64,"DEFAULT_HEIGHT"],[10443,80,10436,78],[10443,82,10436,80],[10444,4,10437,4],[10444,10,10437,10,"top"],[10444,13,10437,13],[10444,16,10437,16,"Math"],[10444,20,10437,20],[10444,21,10437,21,"max"],[10444,24,10437,24],[10444,25,10437,25],[10444,26,10437,26,"window"],[10444,32,10437,32],[10444,33,10437,33,"screen"],[10444,39,10437,39],[10444,40,10437,40,"availHeight"],[10444,51,10437,51],[10444,54,10437,54,"height"],[10444,60,10437,60],[10444,64,10437,64],[10444,65,10437,65],[10444,67,10437,67],[10444,68,10437,68],[10444,69,10437,69],[10444,70,10437,70,"toString"],[10444,78,10437,78],[10444,79,10437,79],[10444,80,10437,80],[10445,4,10438,4],[10445,10,10438,10,"left"],[10445,14,10438,14],[10445,17,10438,17,"Math"],[10445,21,10438,21],[10445,22,10438,22,"max"],[10445,25,10438,25],[10445,26,10438,26],[10445,27,10438,27,"window"],[10445,33,10438,33],[10445,34,10438,34,"screen"],[10445,40,10438,40],[10445,41,10438,41,"availWidth"],[10445,51,10438,51],[10445,54,10438,54,"width"],[10445,59,10438,59],[10445,63,10438,63],[10445,64,10438,64],[10445,66,10438,66],[10445,67,10438,67],[10445,68,10438,68],[10445,69,10438,69,"toString"],[10445,77,10438,77],[10445,78,10438,78],[10445,79,10438,79],[10446,4,10439,4],[10446,8,10439,8,"target"],[10446,14,10439,14],[10446,17,10439,17],[10446,19,10439,19],[10447,4,10440,4],[10447,10,10440,10,"options"],[10447,17,10440,17],[10447,20,10440,20],[10448,6,10441,8],[10448,9,10441,11,"BASE_POPUP_OPTIONS"],[10448,27,10441,29],[10449,6,10442,8,"width"],[10449,11,10442,13],[10449,13,10442,15,"width"],[10449,18,10442,20],[10449,19,10442,21,"toString"],[10449,27,10442,29],[10449,28,10442,30],[10449,29,10442,31],[10450,6,10443,8,"height"],[10450,12,10443,14],[10450,14,10443,16,"height"],[10450,20,10443,22],[10450,21,10443,23,"toString"],[10450,29,10443,31],[10450,30,10443,32],[10450,31,10443,33],[10451,6,10444,8,"top"],[10451,9,10444,11],[10452,6,10445,8,"left"],[10453,4,10446,4],[10453,5,10446,5],[10454,4,10447,4],[10455,4,10448,4],[10456,4,10449,4],[10456,10,10449,10,"ua"],[10456,12,10449,12],[10456,15,10449,15],[10456,19,10449,15,"getUA"],[10456,30,10449,20],[10456,32,10449,21],[10456,33,10449,22],[10456,34,10449,23,"toLowerCase"],[10456,45,10449,34],[10456,46,10449,35],[10456,47,10449,36],[10457,4,10450,4],[10457,8,10450,8,"name"],[10457,12,10450,12],[10457,14,10450,14],[10458,6,10451,8,"target"],[10458,12,10451,14],[10458,15,10451,17,"_isChromeIOS"],[10458,27,10451,29],[10458,28,10451,30,"ua"],[10458,30,10451,32],[10458,31,10451,33],[10458,34,10451,36,"TARGET_BLANK"],[10458,46,10451,48],[10458,49,10451,51,"name"],[10458,53,10451,55],[10459,4,10452,4],[10460,4,10453,4],[10460,8,10453,8,"_isFirefox"],[10460,18,10453,18],[10460,19,10453,19,"ua"],[10460,21,10453,21],[10460,22,10453,22],[10460,24,10453,24],[10461,6,10454,8],[10462,6,10455,8,"url"],[10462,9,10455,11],[10462,12,10455,14,"url"],[10462,15,10455,17],[10462,19,10455,21,"FIREFOX_EMPTY_URL"],[10462,36,10455,38],[10463,6,10456,8],[10464,6,10457,8],[10465,6,10458,8,"options"],[10465,13,10458,15],[10465,14,10458,16,"scrollbars"],[10465,24,10458,26],[10465,27,10458,29],[10465,32,10458,34],[10466,4,10459,4],[10467,4,10460,4],[10467,10,10460,10,"optionsString"],[10467,23,10460,23],[10467,26,10460,26,"Object"],[10467,32,10460,32],[10467,33,10460,33,"entries"],[10467,40,10460,40],[10467,41,10460,41,"options"],[10467,48,10460,48],[10467,49,10460,49],[10467,50,10460,50,"reduce"],[10467,56,10460,56],[10467,57,10460,57],[10467,58,10460,58,"accum"],[10467,63,10460,63],[10467,65,10460,65],[10467,66,10460,66,"key"],[10467,69,10460,69],[10467,71,10460,71,"value"],[10467,76,10460,76],[10467,77,10460,77],[10467,82,10460,82],[10467,85,10460,85,"accum"],[10467,90,10460,90],[10467,93,10460,93,"key"],[10467,96,10460,96],[10467,100,10460,100,"value"],[10467,105,10460,105],[10467,108,10460,108],[10467,110,10460,110],[10467,112,10460,112],[10467,113,10460,113],[10468,4,10461,4],[10468,8,10461,8,"_isIOSStandalone"],[10468,24,10461,24],[10468,25,10461,25,"ua"],[10468,27,10461,27],[10468,28,10461,28],[10468,32,10461,32,"target"],[10468,38,10461,38],[10468,43,10461,43],[10468,50,10461,50],[10468,52,10461,52],[10469,6,10462,8,"openAsNewWindowIOS"],[10469,24,10462,26],[10469,25,10462,27,"url"],[10469,28,10462,30],[10469,32,10462,34],[10469,34,10462,36],[10469,36,10462,38,"target"],[10469,42,10462,44],[10469,43,10462,45],[10470,6,10463,8],[10470,13,10463,15],[10470,17,10463,19,"AuthPopup"],[10470,26,10463,28],[10470,27,10463,29],[10470,31,10463,33],[10470,32,10463,34],[10471,4,10464,4],[10472,4,10465,4],[10473,4,10466,4],[10474,4,10467,4],[10474,10,10467,10,"newWin"],[10474,16,10467,16],[10474,19,10467,19,"window"],[10474,25,10467,25],[10474,26,10467,26,"open"],[10474,30,10467,30],[10474,31,10467,31,"url"],[10474,34,10467,34],[10474,38,10467,38],[10474,40,10467,40],[10474,42,10467,42,"target"],[10474,48,10467,48],[10474,50,10467,50,"optionsString"],[10474,63,10467,63],[10474,64,10467,64],[10475,4,10468,4,"_assert"],[10475,11,10468,11],[10475,12,10468,12,"newWin"],[10475,18,10468,18],[10475,20,10468,20,"auth"],[10475,24,10468,24],[10475,26,10468,26],[10475,41,10468,41],[10475,42,10468,42],[10475,75,10468,75],[10475,76,10468,76],[10476,4,10469,4],[10477,4,10470,4],[10477,8,10470,8],[10478,6,10471,8,"newWin"],[10478,12,10471,14],[10478,13,10471,15,"focus"],[10478,18,10471,20],[10478,19,10471,21],[10478,20,10471,22],[10479,4,10472,4],[10479,5,10472,5],[10479,6,10473,4],[10479,13,10473,11,"e"],[10479,14,10473,12],[10479,16,10473,14],[10479,17,10473,16],[10480,4,10474,4],[10480,11,10474,11],[10480,15,10474,15,"AuthPopup"],[10480,24,10474,24],[10480,25,10474,25,"newWin"],[10480,31,10474,31],[10480,32,10474,32],[10481,2,10475,0],[10482,2,10476,0],[10482,11,10476,9,"openAsNewWindowIOS"],[10482,29,10476,27,"openAsNewWindowIOS"],[10482,30,10476,28,"url"],[10482,33,10476,31],[10482,35,10476,33,"target"],[10482,41,10476,39],[10482,43,10476,41],[10483,4,10477,4],[10483,10,10477,10,"el"],[10483,12,10477,12],[10483,15,10477,15,"document"],[10483,23,10477,23],[10483,24,10477,24,"createElement"],[10483,37,10477,37],[10483,38,10477,38],[10483,41,10477,41],[10483,42,10477,42],[10484,4,10478,4,"el"],[10484,6,10478,6],[10484,7,10478,7,"href"],[10484,11,10478,11],[10484,14,10478,14,"url"],[10484,17,10478,17],[10485,4,10479,4,"el"],[10485,6,10479,6],[10485,7,10479,7,"target"],[10485,13,10479,13],[10485,16,10479,16,"target"],[10485,22,10479,22],[10486,4,10480,4],[10486,10,10480,10,"click"],[10486,15,10480,15],[10486,18,10480,18,"document"],[10486,26,10480,26],[10486,27,10480,27,"createEvent"],[10486,38,10480,38],[10486,39,10480,39],[10486,51,10480,51],[10486,52,10480,52],[10487,4,10481,4,"click"],[10487,9,10481,9],[10487,10,10481,10,"initMouseEvent"],[10487,24,10481,24],[10487,25,10481,25],[10487,32,10481,32],[10487,34,10481,34],[10487,38,10481,38],[10487,40,10481,40],[10487,44,10481,44],[10487,46,10481,46,"window"],[10487,52,10481,52],[10487,54,10481,54],[10487,55,10481,55],[10487,57,10481,57],[10487,58,10481,58],[10487,60,10481,60],[10487,61,10481,61],[10487,63,10481,63],[10487,64,10481,64],[10487,66,10481,66],[10487,67,10481,67],[10487,69,10481,69],[10487,74,10481,74],[10487,76,10481,76],[10487,81,10481,81],[10487,83,10481,83],[10487,88,10481,88],[10487,90,10481,90],[10487,95,10481,95],[10487,97,10481,97],[10487,98,10481,98],[10487,100,10481,100],[10487,104,10481,104],[10487,105,10481,105],[10488,4,10482,4,"el"],[10488,6,10482,6],[10488,7,10482,7,"dispatchEvent"],[10488,20,10482,20],[10488,21,10482,21,"click"],[10488,26,10482,26],[10488,27,10482,27],[10489,2,10483,0],[10491,2,10485,0],[10492,0,10486,0],[10493,0,10487,0],[10494,0,10488,0],[10495,0,10489,0],[10496,0,10490,0],[10497,0,10491,0],[10498,0,10492,0],[10499,0,10493,0],[10500,0,10494,0],[10501,0,10495,0],[10502,0,10496,0],[10503,0,10497,0],[10504,0,10498,0],[10505,0,10499,0],[10506,0,10500,0],[10507,2,10501,0],[10508,0,10502,0],[10509,0,10503,0],[10510,0,10504,0],[10511,0,10505,0],[10512,2,10506,0],[10512,8,10506,6,"WIDGET_PATH"],[10512,19,10506,17],[10512,22,10506,20],[10512,39,10506,37],[10513,2,10507,0],[10514,0,10508,0],[10515,0,10509,0],[10516,0,10510,0],[10517,0,10511,0],[10518,2,10512,0],[10518,8,10512,6,"EMULATOR_WIDGET_PATH"],[10518,28,10512,26],[10518,31,10512,29],[10518,54,10512,52],[10519,2,10513,0],[10520,0,10514,0],[10521,0,10515,0],[10522,0,10516,0],[10523,0,10517,0],[10524,2,10518,0],[10524,8,10518,6,"FIREBASE_APP_CHECK_FRAGMENT_ID"],[10524,38,10518,36],[10524,41,10518,39,"encodeURIComponent"],[10524,59,10518,57],[10524,60,10518,58],[10524,65,10518,63],[10524,66,10518,64],[10525,2,10519,0],[10525,17,10519,15,"_getRedirectUrl"],[10525,32,10519,30,"_getRedirectUrl"],[10525,33,10519,31,"auth"],[10525,37,10519,35],[10525,39,10519,37,"provider"],[10525,47,10519,45],[10525,49,10519,47,"authType"],[10525,57,10519,55],[10525,59,10519,57,"redirectUrl"],[10525,70,10519,68],[10525,72,10519,70,"eventId"],[10525,79,10519,77],[10525,81,10519,79,"additionalParams"],[10525,97,10519,95],[10525,99,10519,97],[10526,4,10520,4,"_assert"],[10526,11,10520,11],[10526,12,10520,12,"auth"],[10526,16,10520,16],[10526,17,10520,17,"config"],[10526,23,10520,23],[10526,24,10520,24,"authDomain"],[10526,34,10520,34],[10526,36,10520,36,"auth"],[10526,40,10520,40],[10526,42,10520,42],[10526,71,10520,71],[10526,72,10520,72],[10526,111,10520,111],[10526,112,10520,112],[10527,4,10521,4,"_assert"],[10527,11,10521,11],[10527,12,10521,12,"auth"],[10527,16,10521,16],[10527,17,10521,17,"config"],[10527,23,10521,23],[10527,24,10521,24,"apiKey"],[10527,30,10521,30],[10527,32,10521,32,"auth"],[10527,36,10521,36],[10527,38,10521,38],[10527,55,10521,55],[10527,56,10521,56],[10527,91,10521,91],[10527,92,10521,92],[10528,4,10522,4],[10528,10,10522,10,"params"],[10528,16,10522,16],[10528,19,10522,19],[10529,6,10523,8,"apiKey"],[10529,12,10523,14],[10529,14,10523,16,"auth"],[10529,18,10523,20],[10529,19,10523,21,"config"],[10529,25,10523,27],[10529,26,10523,28,"apiKey"],[10529,32,10523,34],[10530,6,10524,8,"appName"],[10530,13,10524,15],[10530,15,10524,17,"auth"],[10530,19,10524,21],[10530,20,10524,22,"name"],[10530,24,10524,26],[10531,6,10525,8,"authType"],[10531,14,10525,16],[10532,6,10526,8,"redirectUrl"],[10532,17,10526,19],[10533,6,10527,8,"v"],[10533,7,10527,9],[10533,9,10527,11,"SDK_VERSION"],[10533,25,10527,22],[10534,6,10528,8,"eventId"],[10535,4,10529,4],[10535,5,10529,5],[10536,4,10530,4],[10536,8,10530,8,"provider"],[10536,16,10530,16],[10536,28,10530,28,"FederatedAuthProvider"],[10536,49,10530,49],[10536,51,10530,51],[10537,6,10531,8,"provider"],[10537,14,10531,16],[10537,15,10531,17,"setDefaultLanguage"],[10537,33,10531,35],[10537,34,10531,36,"auth"],[10537,38,10531,40],[10537,39,10531,41,"languageCode"],[10537,51,10531,53],[10537,52,10531,54],[10538,6,10532,8,"params"],[10538,12,10532,14],[10538,13,10532,15,"providerId"],[10538,23,10532,25],[10538,26,10532,28,"provider"],[10538,34,10532,36],[10538,35,10532,37,"providerId"],[10538,45,10532,47],[10538,49,10532,51],[10538,51,10532,53],[10539,6,10533,8],[10539,10,10533,12],[10539,11,10533,13],[10539,15,10533,13,"isEmpty"],[10539,28,10533,20],[10539,30,10533,21,"provider"],[10539,38,10533,29],[10539,39,10533,30,"getCustomParameters"],[10539,58,10533,49],[10539,59,10533,50],[10539,60,10533,51],[10539,61,10533,52],[10539,63,10533,54],[10540,8,10534,12,"params"],[10540,14,10534,18],[10540,15,10534,19,"customParameters"],[10540,31,10534,35],[10540,34,10534,38,"JSON"],[10540,38,10534,42],[10540,39,10534,43,"stringify"],[10540,48,10534,52],[10540,49,10534,53,"provider"],[10540,57,10534,61],[10540,58,10534,62,"getCustomParameters"],[10540,77,10534,81],[10540,78,10534,82],[10540,79,10534,83],[10540,80,10534,84],[10541,6,10535,8],[10542,6,10536,8],[10543,6,10537,8],[10543,11,10537,13],[10543,17,10537,19],[10543,18,10537,20,"key"],[10543,21,10537,23],[10543,23,10537,25,"value"],[10543,28,10537,30],[10543,29,10537,31],[10543,33,10537,35,"Object"],[10543,39,10537,41],[10543,40,10537,42,"entries"],[10543,47,10537,49],[10543,48,10537,50,"additionalParams"],[10543,64,10537,66],[10543,68,10537,70],[10543,69,10537,71],[10543,70,10537,72],[10543,71,10537,73],[10543,73,10537,75],[10544,8,10538,12,"params"],[10544,14,10538,18],[10544,15,10538,19,"key"],[10544,18,10538,22],[10544,19,10538,23],[10544,22,10538,26,"value"],[10544,27,10538,31],[10545,6,10539,8],[10546,4,10540,4],[10547,4,10541,4],[10547,8,10541,8,"provider"],[10547,16,10541,16],[10547,28,10541,28,"BaseOAuthProvider"],[10547,45,10541,45],[10547,47,10541,47],[10548,6,10542,8],[10548,12,10542,14,"scopes"],[10548,18,10542,20],[10548,21,10542,23,"provider"],[10548,29,10542,31],[10548,30,10542,32,"getScopes"],[10548,39,10542,41],[10548,40,10542,42],[10548,41,10542,43],[10548,42,10542,44,"filter"],[10548,48,10542,50],[10548,49,10542,51,"scope"],[10548,54,10542,56],[10548,58,10542,60,"scope"],[10548,63,10542,65],[10548,68,10542,70],[10548,70,10542,72],[10548,71,10542,73],[10549,6,10543,8],[10549,10,10543,12,"scopes"],[10549,16,10543,18],[10549,17,10543,19,"length"],[10549,23,10543,25],[10549,26,10543,28],[10549,27,10543,29],[10549,29,10543,31],[10550,8,10544,12,"params"],[10550,14,10544,18],[10550,15,10544,19,"scopes"],[10550,21,10544,25],[10550,24,10544,28,"scopes"],[10550,30,10544,34],[10550,31,10544,35,"join"],[10550,35,10544,39],[10550,36,10544,40],[10550,39,10544,43],[10550,40,10544,44],[10551,6,10545,8],[10552,4,10546,4],[10553,4,10547,4],[10553,8,10547,8,"auth"],[10553,12,10547,12],[10553,13,10547,13,"tenantId"],[10553,21,10547,21],[10553,23,10547,23],[10554,6,10548,8,"params"],[10554,12,10548,14],[10554,13,10548,15,"tid"],[10554,16,10548,18],[10554,19,10548,21,"auth"],[10554,23,10548,25],[10554,24,10548,26,"tenantId"],[10554,32,10548,34],[10555,4,10549,4],[10556,4,10550,4],[10557,4,10551,4],[10558,4,10552,4],[10558,10,10552,10,"paramsDict"],[10558,20,10552,20],[10558,23,10552,23,"params"],[10558,29,10552,29],[10559,4,10553,4],[10559,9,10553,9],[10559,15,10553,15,"key"],[10559,18,10553,18],[10559,22,10553,22,"Object"],[10559,28,10553,28],[10559,29,10553,29,"keys"],[10559,33,10553,33],[10559,34,10553,34,"paramsDict"],[10559,44,10553,44],[10559,45,10553,45],[10559,47,10553,47],[10560,6,10554,8],[10560,10,10554,12,"paramsDict"],[10560,20,10554,22],[10560,21,10554,23,"key"],[10560,24,10554,26],[10560,25,10554,27],[10560,30,10554,32,"undefined"],[10560,39,10554,41],[10560,41,10554,43],[10561,8,10555,12],[10561,15,10555,19,"paramsDict"],[10561,25,10555,29],[10561,26,10555,30,"key"],[10561,29,10555,33],[10561,30,10555,34],[10562,6,10556,8],[10563,4,10557,4],[10564,4,10558,4],[10565,4,10559,4],[10565,10,10559,10,"appCheckToken"],[10565,23,10559,23],[10565,26,10559,26],[10565,32,10559,32,"auth"],[10565,36,10559,36],[10565,37,10559,37,"_getAppCheckToken"],[10565,54,10559,54],[10565,55,10559,55],[10565,56,10559,56],[10566,4,10560,4],[10566,10,10560,10,"appCheckTokenFragment"],[10566,31,10560,31],[10566,34,10560,34,"appCheckToken"],[10566,47,10560,47],[10566,50,10561,10],[10566,54,10561,14,"FIREBASE_APP_CHECK_FRAGMENT_ID"],[10566,84,10561,44],[10566,88,10561,48,"encodeURIComponent"],[10566,106,10561,66],[10566,107,10561,67,"appCheckToken"],[10566,120,10561,80],[10566,121,10561,81],[10566,123,10561,83],[10566,126,10562,10],[10566,128,10562,12],[10567,4,10563,4],[10568,4,10564,4],[10568,11,10564,11],[10568,14,10564,14,"getHandlerBase"],[10568,28,10564,28],[10568,29,10564,29,"auth"],[10568,33,10564,33],[10568,34,10564,34],[10568,38,10564,38],[10568,42,10564,38,"querystring"],[10568,59,10564,49],[10568,61,10564,50,"paramsDict"],[10568,71,10564,60],[10568,72,10564,61],[10568,73,10564,62,"slice"],[10568,78,10564,67],[10568,79,10564,68],[10568,80,10564,69],[10568,81,10564,70],[10568,84,10564,73,"appCheckTokenFragment"],[10568,105,10564,94],[10568,107,10564,96],[10569,2,10565,0],[10570,2,10566,0],[10570,11,10566,9,"getHandlerBase"],[10570,25,10566,23,"getHandlerBase"],[10570,26,10566,24],[10571,4,10566,26,"config"],[10572,2,10566,33],[10572,3,10566,34],[10572,5,10566,36],[10573,4,10567,4],[10573,8,10567,8],[10573,9,10567,9,"config"],[10573,15,10567,15],[10573,16,10567,16,"emulator"],[10573,24,10567,24],[10573,26,10567,26],[10574,6,10568,8],[10574,13,10568,15],[10574,24,10568,26,"config"],[10574,30,10568,32],[10574,31,10568,33,"authDomain"],[10574,41,10568,43],[10574,45,10568,47,"WIDGET_PATH"],[10574,56,10568,58],[10574,58,10568,60],[10575,4,10569,4],[10576,4,10570,4],[10576,11,10570,11,"_emulatorUrl"],[10576,23,10570,23],[10576,24,10570,24,"config"],[10576,30,10570,30],[10576,32,10570,32,"EMULATOR_WIDGET_PATH"],[10576,52,10570,52],[10576,53,10570,53],[10577,2,10571,0],[10579,2,10573,0],[10580,0,10574,0],[10581,0,10575,0],[10582,0,10576,0],[10583,0,10577,0],[10584,0,10578,0],[10585,0,10579,0],[10586,0,10580,0],[10587,0,10581,0],[10588,0,10582,0],[10589,0,10583,0],[10590,0,10584,0],[10591,0,10585,0],[10592,0,10586,0],[10593,0,10587,0],[10594,0,10588,0],[10595,2,10589,0],[10596,0,10590,0],[10597,0,10591,0],[10598,0,10592,0],[10599,2,10593,0],[10599,8,10593,6,"WEB_STORAGE_SUPPORT_KEY"],[10599,31,10593,29],[10599,34,10593,32],[10599,53,10593,51],[10600,2,10594,0],[10600,8,10594,6,"BrowserPopupRedirectResolver"],[10600,36,10594,34],[10600,37,10594,35],[10601,4,10595,4,"constructor"],[10601,15,10595,15,"constructor"],[10601,16,10595,15],[10601,18,10595,18],[10602,6,10596,8],[10602,10,10596,12],[10602,11,10596,13,"eventManagers"],[10602,24,10596,26],[10602,27,10596,29],[10602,28,10596,30],[10602,29,10596,31],[10603,6,10597,8],[10603,10,10597,12],[10603,11,10597,13,"iframes"],[10603,18,10597,20],[10603,21,10597,23],[10603,22,10597,24],[10603,23,10597,25],[10604,6,10598,8],[10604,10,10598,12],[10604,11,10598,13,"originValidationPromises"],[10604,35,10598,37],[10604,38,10598,40],[10604,39,10598,41],[10604,40,10598,42],[10605,6,10599,8],[10605,10,10599,12],[10605,11,10599,13,"_redirectPersistence"],[10605,31,10599,33],[10605,34,10599,36,"browserSessionPersistence"],[10605,59,10599,61],[10606,6,10600,8],[10606,10,10600,12],[10606,11,10600,13,"_completeRedirectFn"],[10606,30,10600,32],[10606,33,10600,35,"_getRedirectResult"],[10606,51,10600,53],[10607,6,10601,8],[10607,10,10601,12],[10607,11,10601,13,"_overrideRedirectResult"],[10607,34,10601,36],[10607,37,10601,39,"_overrideRedirectResult"],[10607,60,10601,62],[10608,4,10602,4],[10609,4,10603,4],[10610,4,10604,4],[10611,4,10605,4],[10611,10,10605,10,"_openPopup"],[10611,20,10605,20,"_openPopup"],[10611,21,10605,21,"auth"],[10611,25,10605,25],[10611,27,10605,27,"provider"],[10611,35,10605,35],[10611,37,10605,37,"authType"],[10611,45,10605,45],[10611,47,10605,47,"eventId"],[10611,54,10605,54],[10611,56,10605,56],[10612,6,10606,8,"debugAssert"],[10612,17,10606,19],[10612,18,10606,20],[10612,22,10606,24],[10612,23,10606,25,"eventManagers"],[10612,36,10606,38],[10612,37,10606,39,"auth"],[10612,41,10606,43],[10612,42,10606,44,"_key"],[10612,46,10606,48],[10612,47,10606,49],[10612,48,10606,50],[10612,49,10606,51],[10612,51,10606,53,"manager"],[10612,58,10606,60],[10612,60,10606,62],[10612,106,10606,108],[10612,107,10606,109],[10613,6,10607,8],[10613,12,10607,14,"url"],[10613,15,10607,17],[10613,18,10607,20],[10613,24,10607,26,"_getRedirectUrl"],[10613,39,10607,41],[10613,40,10607,42,"auth"],[10613,44,10607,46],[10613,46,10607,48,"provider"],[10613,54,10607,56],[10613,56,10607,58,"authType"],[10613,64,10607,66],[10613,66,10607,68,"_getCurrentUrl"],[10613,80,10607,82],[10613,81,10607,83],[10613,82,10607,84],[10613,84,10607,86,"eventId"],[10613,91,10607,93],[10613,92,10607,94],[10614,6,10608,8],[10614,13,10608,15,"_open"],[10614,18,10608,20],[10614,19,10608,21,"auth"],[10614,23,10608,25],[10614,25,10608,27,"url"],[10614,28,10608,30],[10614,30,10608,32,"_generateEventId"],[10614,46,10608,48],[10614,47,10608,49],[10614,48,10608,50],[10614,49,10608,51],[10615,4,10609,4],[10616,4,10610,4],[10616,10,10610,10,"_openRedirect"],[10616,23,10610,23,"_openRedirect"],[10616,24,10610,24,"auth"],[10616,28,10610,28],[10616,30,10610,30,"provider"],[10616,38,10610,38],[10616,40,10610,40,"authType"],[10616,48,10610,48],[10616,50,10610,50,"eventId"],[10616,57,10610,57],[10616,59,10610,59],[10617,6,10611,8],[10617,12,10611,14],[10617,16,10611,18],[10617,17,10611,19,"_originValidation"],[10617,34,10611,36],[10617,35,10611,37,"auth"],[10617,39,10611,41],[10617,40,10611,42],[10618,6,10612,8],[10618,12,10612,14,"url"],[10618,15,10612,17],[10618,18,10612,20],[10618,24,10612,26,"_getRedirectUrl"],[10618,39,10612,41],[10618,40,10612,42,"auth"],[10618,44,10612,46],[10618,46,10612,48,"provider"],[10618,54,10612,56],[10618,56,10612,58,"authType"],[10618,64,10612,66],[10618,66,10612,68,"_getCurrentUrl"],[10618,80,10612,82],[10618,81,10612,83],[10618,82,10612,84],[10618,84,10612,86,"eventId"],[10618,91,10612,93],[10618,92,10612,94],[10619,6,10613,8,"_setWindowLocation"],[10619,24,10613,26],[10619,25,10613,27,"url"],[10619,28,10613,30],[10619,29,10613,31],[10620,6,10614,8],[10620,13,10614,15],[10620,17,10614,19,"Promise"],[10620,24,10614,26],[10620,25,10614,27],[10620,31,10614,33],[10620,32,10614,35],[10620,33,10614,36],[10620,34,10614,37],[10621,4,10615,4],[10622,4,10616,4,"_initialize"],[10622,15,10616,15,"_initialize"],[10622,16,10616,16,"auth"],[10622,20,10616,20],[10622,22,10616,22],[10623,6,10617,8],[10623,12,10617,14,"key"],[10623,15,10617,17],[10623,18,10617,20,"auth"],[10623,22,10617,24],[10623,23,10617,25,"_key"],[10623,27,10617,29],[10623,28,10617,30],[10623,29,10617,31],[10624,6,10618,8],[10624,10,10618,12],[10624,14,10618,16],[10624,15,10618,17,"eventManagers"],[10624,28,10618,30],[10624,29,10618,31,"key"],[10624,32,10618,34],[10624,33,10618,35],[10624,35,10618,37],[10625,8,10619,12],[10625,14,10619,18],[10626,10,10619,20,"manager"],[10626,17,10619,27],[10627,10,10619,29,"promise"],[10628,8,10619,37],[10628,9,10619,38],[10628,12,10619,41],[10628,16,10619,45],[10628,17,10619,46,"eventManagers"],[10628,30,10619,59],[10628,31,10619,60,"key"],[10628,34,10619,63],[10628,35,10619,64],[10629,8,10620,12],[10629,12,10620,16,"manager"],[10629,19,10620,23],[10629,21,10620,25],[10630,10,10621,16],[10630,17,10621,23,"Promise"],[10630,24,10621,30],[10630,25,10621,31,"resolve"],[10630,32,10621,38],[10630,33,10621,39,"manager"],[10630,40,10621,46],[10630,41,10621,47],[10631,8,10622,12],[10631,9,10622,13],[10631,15,10623,17],[10632,10,10624,16,"debugAssert"],[10632,21,10624,27],[10632,22,10624,28,"promise"],[10632,29,10624,35],[10632,31,10624,37],[10632,73,10624,79],[10632,74,10624,80],[10633,10,10625,16],[10633,17,10625,23,"promise"],[10633,24,10625,30],[10634,8,10626,12],[10635,6,10627,8],[10636,6,10628,8],[10636,12,10628,14,"promise"],[10636,19,10628,21],[10636,22,10628,24],[10636,26,10628,28],[10636,27,10628,29,"initAndGetManager"],[10636,44,10628,46],[10636,45,10628,47,"auth"],[10636,49,10628,51],[10636,50,10628,52],[10637,6,10629,8],[10637,10,10629,12],[10637,11,10629,13,"eventManagers"],[10637,24,10629,26],[10637,25,10629,27,"key"],[10637,28,10629,30],[10637,29,10629,31],[10637,32,10629,34],[10638,8,10629,36,"promise"],[10639,6,10629,44],[10639,7,10629,45],[10640,6,10630,8],[10641,6,10631,8],[10642,6,10632,8,"promise"],[10642,13,10632,15],[10642,14,10632,16,"catch"],[10642,19,10632,21],[10642,20,10632,22],[10642,26,10632,28],[10643,8,10633,12],[10643,15,10633,19],[10643,19,10633,23],[10643,20,10633,24,"eventManagers"],[10643,33,10633,37],[10643,34,10633,38,"key"],[10643,37,10633,41],[10643,38,10633,42],[10644,6,10634,8],[10644,7,10634,9],[10644,8,10634,10],[10645,6,10635,8],[10645,13,10635,15,"promise"],[10645,20,10635,22],[10646,4,10636,4],[10647,4,10637,4],[10647,10,10637,10,"initAndGetManager"],[10647,27,10637,27,"initAndGetManager"],[10647,28,10637,28,"auth"],[10647,32,10637,32],[10647,34,10637,34],[10648,6,10638,8],[10648,12,10638,14,"iframe"],[10648,18,10638,20],[10648,21,10638,23],[10648,27,10638,29,"_openIframe"],[10648,38,10638,40],[10648,39,10638,41,"auth"],[10648,43,10638,45],[10648,44,10638,46],[10649,6,10639,8],[10649,12,10639,14,"manager"],[10649,19,10639,21],[10649,22,10639,24],[10649,26,10639,28,"AuthEventManager"],[10649,42,10639,44],[10649,43,10639,45,"auth"],[10649,47,10639,49],[10649,48,10639,50],[10650,6,10640,8,"iframe"],[10650,12,10640,14],[10650,13,10640,15,"register"],[10650,21,10640,23],[10650,22,10640,24],[10650,33,10640,35],[10650,35,10640,38,"iframeEvent"],[10650,46,10640,49],[10650,50,10640,54],[10651,8,10641,12,"_assert"],[10651,15,10641,19],[10651,16,10641,20,"iframeEvent"],[10651,27,10641,31],[10651,29,10641,33,"authEvent"],[10651,38,10641,42],[10651,40,10641,44,"auth"],[10651,44,10641,48],[10651,46,10641,50],[10651,66,10641,70],[10651,67,10641,71],[10651,105,10641,109],[10651,106,10641,110],[10652,8,10642,12],[10653,8,10643,12],[10653,14,10643,18,"handled"],[10653,21,10643,25],[10653,24,10643,28,"manager"],[10653,31,10643,35],[10653,32,10643,36,"onEvent"],[10653,39,10643,43],[10653,40,10643,44,"iframeEvent"],[10653,51,10643,55],[10653,52,10643,56,"authEvent"],[10653,61,10643,65],[10653,62,10643,66],[10654,8,10644,12],[10654,15,10644,19],[10655,10,10644,21,"status"],[10655,16,10644,27],[10655,18,10644,29,"handled"],[10655,25,10644,36],[10655,28,10644,39],[10655,33,10644,44],[10655,34,10644,45],[10655,58,10644,69],[10655,65,10644,76],[10655,66,10644,77],[10656,8,10644,101],[10656,9,10644,102],[10657,6,10645,8],[10657,7,10645,9],[10657,9,10645,11,"gapi"],[10657,13,10645,15],[10657,14,10645,16,"iframes"],[10657,21,10645,23],[10657,22,10645,24,"CROSS_ORIGIN_IFRAMES_FILTER"],[10657,49,10645,51],[10657,50,10645,52],[10658,6,10646,8],[10658,10,10646,12],[10658,11,10646,13,"eventManagers"],[10658,24,10646,26],[10658,25,10646,27,"auth"],[10658,29,10646,31],[10658,30,10646,32,"_key"],[10658,34,10646,36],[10658,35,10646,37],[10658,36,10646,38],[10658,37,10646,39],[10658,40,10646,42],[10659,8,10646,44,"manager"],[10660,6,10646,52],[10660,7,10646,53],[10661,6,10647,8],[10661,10,10647,12],[10661,11,10647,13,"iframes"],[10661,18,10647,20],[10661,19,10647,21,"auth"],[10661,23,10647,25],[10661,24,10647,26,"_key"],[10661,28,10647,30],[10661,29,10647,31],[10661,30,10647,32],[10661,31,10647,33],[10661,34,10647,36,"iframe"],[10661,40,10647,42],[10662,6,10648,8],[10662,13,10648,15,"manager"],[10662,20,10648,22],[10663,4,10649,4],[10664,4,10650,4,"_isIframeWebStorageSupported"],[10664,32,10650,32,"_isIframeWebStorageSupported"],[10664,33,10650,33,"auth"],[10664,37,10650,37],[10664,39,10650,39,"cb"],[10664,41,10650,41],[10664,43,10650,43],[10665,6,10651,8],[10665,12,10651,14,"iframe"],[10665,18,10651,20],[10665,21,10651,23],[10665,25,10651,27],[10665,26,10651,28,"iframes"],[10665,33,10651,35],[10665,34,10651,36,"auth"],[10665,38,10651,40],[10665,39,10651,41,"_key"],[10665,43,10651,45],[10665,44,10651,46],[10665,45,10651,47],[10665,46,10651,48],[10666,6,10652,8,"iframe"],[10666,12,10652,14],[10666,13,10652,15,"send"],[10666,17,10652,19],[10666,18,10652,20,"WEB_STORAGE_SUPPORT_KEY"],[10666,41,10652,43],[10666,43,10652,45],[10667,8,10652,47,"type"],[10667,12,10652,51],[10667,14,10652,53,"WEB_STORAGE_SUPPORT_KEY"],[10668,6,10652,77],[10668,7,10652,78],[10668,9,10652,80,"result"],[10668,15,10652,86],[10668,19,10652,90],[10669,8,10653,12],[10669,14,10653,18,"isSupported"],[10669,25,10653,29],[10669,28,10653,32,"result"],[10669,34,10653,38],[10669,37,10653,41],[10669,38,10653,42],[10669,39,10653,43],[10669,42,10653,46,"WEB_STORAGE_SUPPORT_KEY"],[10669,65,10653,69],[10669,66,10653,70],[10670,8,10654,12],[10670,12,10654,16,"isSupported"],[10670,23,10654,27],[10670,28,10654,32,"undefined"],[10670,37,10654,41],[10670,39,10654,43],[10671,10,10655,16,"cb"],[10671,12,10655,18],[10671,13,10655,19],[10671,14,10655,20],[10671,15,10655,21,"isSupported"],[10671,26,10655,32],[10671,27,10655,33],[10672,8,10656,12],[10673,8,10657,12,"_fail"],[10673,13,10657,17],[10673,14,10657,18,"auth"],[10673,18,10657,22],[10673,20,10657,24],[10673,36,10657,40],[10673,37,10657,41],[10673,71,10657,75],[10673,72,10657,76],[10674,6,10658,8],[10674,7,10658,9],[10674,9,10658,11,"gapi"],[10674,13,10658,15],[10674,14,10658,16,"iframes"],[10674,21,10658,23],[10674,22,10658,24,"CROSS_ORIGIN_IFRAMES_FILTER"],[10674,49,10658,51],[10674,50,10658,52],[10675,4,10659,4],[10676,4,10660,4,"_originValidation"],[10676,21,10660,21,"_originValidation"],[10676,22,10660,22,"auth"],[10676,26,10660,26],[10676,28,10660,28],[10677,6,10661,8],[10677,12,10661,14,"key"],[10677,15,10661,17],[10677,18,10661,20,"auth"],[10677,22,10661,24],[10677,23,10661,25,"_key"],[10677,27,10661,29],[10677,28,10661,30],[10677,29,10661,31],[10678,6,10662,8],[10678,10,10662,12],[10678,11,10662,13],[10678,15,10662,17],[10678,16,10662,18,"originValidationPromises"],[10678,40,10662,42],[10678,41,10662,43,"key"],[10678,44,10662,46],[10678,45,10662,47],[10678,47,10662,49],[10679,8,10663,12],[10679,12,10663,16],[10679,13,10663,17,"originValidationPromises"],[10679,37,10663,41],[10679,38,10663,42,"key"],[10679,41,10663,45],[10679,42,10663,46],[10679,45,10663,49,"_validateOrigin"],[10679,60,10663,64],[10679,61,10663,65,"auth"],[10679,65,10663,69],[10679,66,10663,70],[10680,6,10664,8],[10681,6,10665,8],[10681,13,10665,15],[10681,17,10665,19],[10681,18,10665,20,"originValidationPromises"],[10681,42,10665,44],[10681,43,10665,45,"key"],[10681,46,10665,48],[10681,47,10665,49],[10682,4,10666,4],[10683,4,10667,4],[10683,8,10667,8,"_shouldInitProactively"],[10683,30,10667,30,"_shouldInitProactively"],[10683,31,10667,30],[10683,33,10667,33],[10684,6,10668,8],[10685,6,10669,8],[10685,13,10669,15,"_isMobileBrowser"],[10685,29,10669,31],[10685,30,10669,32],[10685,31,10669,33],[10685,35,10669,37,"_isSafari"],[10685,44,10669,46],[10685,45,10669,47],[10685,46,10669,48],[10685,50,10669,52,"_isIOS"],[10685,56,10669,58],[10685,57,10669,59],[10685,58,10669,60],[10686,4,10670,4],[10687,2,10671,0],[10688,2,10672,0],[10689,0,10673,0],[10690,0,10674,0],[10691,0,10675,0],[10692,0,10676,0],[10693,0,10677,0],[10694,0,10678,0],[10695,0,10679,0],[10696,0,10680,0],[10697,2,10681,0],[10697,8,10681,6,"browserPopupRedirectResolver"],[10697,36,10681,34],[10697,39,10681,34,"exports"],[10697,46,10681,34],[10697,47,10681,34,"m"],[10697,48,10681,34],[10697,51,10681,37,"BrowserPopupRedirectResolver"],[10697,79,10681,65],[10698,2,10683,0],[10698,8,10683,6,"MultiFactorAssertionImpl"],[10698,32,10683,30],[10698,33,10683,31],[10699,4,10684,4,"constructor"],[10699,15,10684,15,"constructor"],[10699,16,10684,16,"factorId"],[10699,24,10684,24],[10699,26,10684,26],[10700,6,10685,8],[10700,10,10685,12],[10700,11,10685,13,"factorId"],[10700,19,10685,21],[10700,22,10685,24,"factorId"],[10700,30,10685,32],[10701,4,10686,4],[10702,4,10687,4,"_process"],[10702,12,10687,12,"_process"],[10702,13,10687,13,"auth"],[10702,17,10687,17],[10702,19,10687,19,"session"],[10702,26,10687,26],[10702,28,10687,28,"displayName"],[10702,39,10687,39],[10702,41,10687,41],[10703,6,10688,8],[10703,14,10688,16,"session"],[10703,21,10688,23],[10703,22,10688,24,"type"],[10703,26,10688,28],[10704,8,10689,12],[10704,13,10689,17],[10704,21,10689,25],[10704,22,10689,26],[10705,10,10690,16],[10705,17,10690,23],[10705,21,10690,27],[10705,22,10690,28,"_finalizeEnroll"],[10705,37,10690,43],[10705,38,10690,44,"auth"],[10705,42,10690,48],[10705,44,10690,50,"session"],[10705,51,10690,57],[10705,52,10690,58,"credential"],[10705,62,10690,68],[10705,64,10690,70,"displayName"],[10705,75,10690,81],[10705,76,10690,82],[10706,8,10691,12],[10706,13,10691,17],[10706,21,10691,25],[10706,22,10691,26],[10707,10,10692,16],[10707,17,10692,23],[10707,21,10692,27],[10707,22,10692,28,"_finalizeSignIn"],[10707,37,10692,43],[10707,38,10692,44,"auth"],[10707,42,10692,48],[10707,44,10692,50,"session"],[10707,51,10692,57],[10707,52,10692,58,"credential"],[10707,62,10692,68],[10707,63,10692,69],[10708,8,10693,12],[10709,10,10694,16],[10709,17,10694,23,"debugFail"],[10709,26,10694,32],[10709,27,10694,33],[10709,62,10694,68],[10709,63,10694,69],[10710,6,10695,8],[10711,4,10696,4],[10712,2,10697,0],[10714,2,10699,0],[10715,0,10700,0],[10716,0,10701,0],[10717,0,10702,0],[10718,0,10703,0],[10719,2,10704,0],[10719,8,10704,6,"PhoneMultiFactorAssertionImpl"],[10719,37,10704,35],[10719,46,10704,44,"MultiFactorAssertionImpl"],[10719,70,10704,68],[10719,71,10704,69],[10720,4,10705,4,"constructor"],[10720,15,10705,15,"constructor"],[10720,16,10705,16,"credential"],[10720,26,10705,26],[10720,28,10705,28],[10721,6,10706,8],[10721,11,10706,13],[10721,12,10706,14],[10721,19,10706,21],[10721,20,10706,22],[10721,40,10706,42],[10721,41,10706,43],[10722,6,10707,8],[10722,10,10707,12],[10722,11,10707,13,"credential"],[10722,21,10707,23],[10722,24,10707,26,"credential"],[10722,34,10707,36],[10723,4,10708,4],[10724,4,10709,4],[10725,4,10710,4],[10725,11,10710,11,"_fromCredential"],[10725,26,10710,26,"_fromCredential"],[10725,27,10710,27,"credential"],[10725,37,10710,37],[10725,39,10710,39],[10726,6,10711,8],[10726,13,10711,15],[10726,17,10711,19,"PhoneMultiFactorAssertionImpl"],[10726,46,10711,48],[10726,47,10711,49,"credential"],[10726,57,10711,59],[10726,58,10711,60],[10727,4,10712,4],[10728,4,10713,4],[10729,4,10714,4,"_finalizeEnroll"],[10729,19,10714,19,"_finalizeEnroll"],[10729,20,10714,20,"auth"],[10729,24,10714,24],[10729,26,10714,26,"idToken"],[10729,33,10714,33],[10729,35,10714,35,"displayName"],[10729,46,10714,46],[10729,48,10714,48],[10730,6,10715,8],[10730,13,10715,15,"finalizeEnrollPhoneMfa"],[10730,35,10715,37],[10730,36,10715,38,"auth"],[10730,40,10715,42],[10730,42,10715,44],[10731,8,10716,12,"idToken"],[10731,15,10716,19],[10732,8,10717,12,"displayName"],[10732,19,10717,23],[10733,8,10718,12,"phoneVerificationInfo"],[10733,29,10718,33],[10733,31,10718,35],[10733,35,10718,39],[10733,36,10718,40,"credential"],[10733,46,10718,50],[10733,47,10718,51,"_makeVerificationRequest"],[10733,71,10718,75],[10733,72,10718,76],[10734,6,10719,8],[10734,7,10719,9],[10734,8,10719,10],[10735,4,10720,4],[10736,4,10721,4],[10737,4,10722,4,"_finalizeSignIn"],[10737,19,10722,19,"_finalizeSignIn"],[10737,20,10722,20,"auth"],[10737,24,10722,24],[10737,26,10722,26,"mfaPendingCredential"],[10737,46,10722,46],[10737,48,10722,48],[10738,6,10723,8],[10738,13,10723,15,"finalizeSignInPhoneMfa"],[10738,35,10723,37],[10738,36,10723,38,"auth"],[10738,40,10723,42],[10738,42,10723,44],[10739,8,10724,12,"mfaPendingCredential"],[10739,28,10724,32],[10740,8,10725,12,"phoneVerificationInfo"],[10740,29,10725,33],[10740,31,10725,35],[10740,35,10725,39],[10740,36,10725,40,"credential"],[10740,46,10725,50],[10740,47,10725,51,"_makeVerificationRequest"],[10740,71,10725,75],[10740,72,10725,76],[10741,6,10726,8],[10741,7,10726,9],[10741,8,10726,10],[10742,4,10727,4],[10743,2,10728,0],[10744,2,10729,0],[10745,0,10730,0],[10746,0,10731,0],[10747,0,10732,0],[10748,0,10733,0],[10749,2,10734,0],[10749,8,10734,6,"PhoneMultiFactorGenerator"],[10749,33,10734,31],[10749,34,10734,32],[10750,4,10735,4,"constructor"],[10750,15,10735,15,"constructor"],[10750,16,10735,15],[10750,18,10735,18],[10750,19,10735,20],[10751,4,10736,4],[10752,0,10737,0],[10753,0,10738,0],[10754,0,10739,0],[10755,0,10740,0],[10756,0,10741,0],[10757,0,10742,0],[10758,0,10743,0],[10759,0,10744,0],[10760,0,10745,0],[10761,4,10746,4],[10761,11,10746,11,"assertion"],[10761,20,10746,20,"assertion"],[10761,21,10746,21,"credential"],[10761,31,10746,31],[10761,33,10746,33],[10762,6,10747,8],[10762,13,10747,15,"PhoneMultiFactorAssertionImpl"],[10762,42,10747,44],[10762,43,10747,45,"_fromCredential"],[10762,58,10747,60],[10762,59,10747,61,"credential"],[10762,69,10747,71],[10762,70,10747,72],[10763,4,10748,4],[10764,2,10749,0],[10765,2,10750,0],[10766,0,10751,0],[10767,0,10752,0],[10768,2,10750,0,"exports"],[10768,9,10750,0],[10768,10,10750,0,"n"],[10768,11,10750,0],[10768,14,10750,0,"PhoneMultiFactorGenerator"],[10768,39,10750,0],[10769,2,10753,0,"PhoneMultiFactorGenerator"],[10769,27,10753,25],[10769,28,10753,26,"FACTOR_ID"],[10769,37,10753,35],[10769,40,10753,38],[10769,47,10753,45],[10771,2,10755,0],[10772,0,10756,0],[10773,0,10757,0],[10774,0,10758,0],[10775,0,10759,0],[10776,2,10760,0],[10776,8,10760,6,"TotpMultiFactorGenerator"],[10776,32,10760,30],[10776,33,10760,31],[10777,4,10761,4],[10778,0,10762,0],[10779,0,10763,0],[10780,0,10764,0],[10781,0,10765,0],[10782,0,10766,0],[10783,0,10767,0],[10784,0,10768,0],[10785,0,10769,0],[10786,0,10770,0],[10787,4,10771,4],[10787,11,10771,11,"assertionForEnrollment"],[10787,33,10771,33,"assertionForEnrollment"],[10787,34,10771,34,"secret"],[10787,40,10771,40],[10787,42,10771,42,"oneTimePassword"],[10787,57,10771,57],[10787,59,10771,59],[10788,6,10772,8],[10788,13,10772,15,"TotpMultiFactorAssertionImpl"],[10788,41,10772,43],[10788,42,10772,44,"_fromSecret"],[10788,53,10772,55],[10788,54,10772,56,"secret"],[10788,60,10772,62],[10788,62,10772,64,"oneTimePassword"],[10788,77,10772,79],[10788,78,10772,80],[10789,4,10773,4],[10790,4,10774,4],[10791,0,10775,0],[10792,0,10776,0],[10793,0,10777,0],[10794,0,10778,0],[10795,0,10779,0],[10796,0,10780,0],[10797,0,10781,0],[10798,0,10782,0],[10799,4,10783,4],[10799,11,10783,11,"assertionForSignIn"],[10799,29,10783,29,"assertionForSignIn"],[10799,30,10783,30,"enrollmentId"],[10799,42,10783,42],[10799,44,10783,44,"oneTimePassword"],[10799,59,10783,59],[10799,61,10783,61],[10800,6,10784,8],[10800,13,10784,15,"TotpMultiFactorAssertionImpl"],[10800,41,10784,43],[10800,42,10784,44,"_fromEnrollmentId"],[10800,59,10784,61],[10800,60,10784,62,"enrollmentId"],[10800,72,10784,74],[10800,74,10784,76,"oneTimePassword"],[10800,89,10784,91],[10800,90,10784,92],[10801,4,10785,4],[10802,4,10786,4],[10803,0,10787,0],[10804,0,10788,0],[10805,0,10789,0],[10806,0,10790,0],[10807,0,10791,0],[10808,0,10792,0],[10809,0,10793,0],[10810,0,10794,0],[10811,4,10795,4],[10811,17,10795,17,"generateSecret"],[10811,31,10795,31,"generateSecret"],[10811,32,10795,32,"session"],[10811,39,10795,39],[10811,41,10795,41],[10812,6,10796,8],[10812,12,10796,14,"mfaSession"],[10812,22,10796,24],[10812,25,10796,27,"session"],[10812,32,10796,34],[10813,6,10797,8,"_assert"],[10813,13,10797,15],[10813,14,10797,16],[10813,21,10797,23,"mfaSession"],[10813,31,10797,33],[10813,32,10797,34,"user"],[10813,36,10797,38],[10813,38,10797,40,"auth"],[10813,42,10797,44],[10813,47,10797,49],[10813,58,10797,60],[10813,60,10797,62],[10813,76,10797,78],[10813,77,10797,79],[10813,111,10797,113],[10813,112,10797,114],[10814,6,10798,8],[10814,12,10798,14,"response"],[10814,20,10798,22],[10814,23,10798,25],[10814,29,10798,31,"startEnrollTotpMfa"],[10814,47,10798,49],[10814,48,10798,50,"mfaSession"],[10814,58,10798,60],[10814,59,10798,61,"user"],[10814,63,10798,65],[10814,64,10798,66,"auth"],[10814,68,10798,70],[10814,70,10798,72],[10815,8,10799,12,"idToken"],[10815,15,10799,19],[10815,17,10799,21,"mfaSession"],[10815,27,10799,31],[10815,28,10799,32,"credential"],[10815,38,10799,42],[10816,8,10800,12,"totpEnrollmentInfo"],[10816,26,10800,30],[10816,28,10800,32],[10816,29,10800,33],[10817,6,10801,8],[10817,7,10801,9],[10817,8,10801,10],[10818,6,10802,8],[10818,13,10802,15,"TotpSecret"],[10818,23,10802,25],[10818,24,10802,26,"_fromStartTotpMfaEnrollmentResponse"],[10818,59,10802,61],[10818,60,10802,62,"response"],[10818,68,10802,70],[10818,70,10802,72,"mfaSession"],[10818,80,10802,82],[10818,81,10802,83,"user"],[10818,85,10802,87],[10818,86,10802,88,"auth"],[10818,90,10802,92],[10818,91,10802,93],[10819,4,10803,4],[10820,2,10804,0],[10821,2,10805,0],[10822,0,10806,0],[10823,0,10807,0],[10824,2,10805,0,"exports"],[10824,9,10805,0],[10824,10,10805,0,"T"],[10824,11,10805,0],[10824,14,10805,0,"TotpMultiFactorGenerator"],[10824,38,10805,0],[10825,2,10808,0,"TotpMultiFactorGenerator"],[10825,26,10808,24],[10825,27,10808,25,"FACTOR_ID"],[10825,36,10808,34],[10825,39,10808,37],[10825,45,10808,43],[10825,46,10808,44],[10826,2,10809,0],[10826,8,10809,6,"TotpMultiFactorAssertionImpl"],[10826,36,10809,34],[10826,45,10809,43,"MultiFactorAssertionImpl"],[10826,69,10809,67],[10826,70,10809,68],[10827,4,10810,4,"constructor"],[10827,15,10810,15,"constructor"],[10827,16,10810,16,"otp"],[10827,19,10810,19],[10827,21,10810,21,"enrollmentId"],[10827,33,10810,33],[10827,35,10810,35,"secret"],[10827,41,10810,41],[10827,43,10810,43],[10828,6,10811,8],[10828,11,10811,13],[10828,12,10811,14],[10828,18,10811,20],[10828,19,10811,21],[10828,38,10811,40],[10828,39,10811,41],[10829,6,10812,8],[10829,10,10812,12],[10829,11,10812,13,"otp"],[10829,14,10812,16],[10829,17,10812,19,"otp"],[10829,20,10812,22],[10830,6,10813,8],[10830,10,10813,12],[10830,11,10813,13,"enrollmentId"],[10830,23,10813,25],[10830,26,10813,28,"enrollmentId"],[10830,38,10813,40],[10831,6,10814,8],[10831,10,10814,12],[10831,11,10814,13,"secret"],[10831,17,10814,19],[10831,20,10814,22,"secret"],[10831,26,10814,28],[10832,4,10815,4],[10833,4,10816,4],[10834,4,10817,4],[10834,11,10817,11,"_fromSecret"],[10834,22,10817,22,"_fromSecret"],[10834,23,10817,23,"secret"],[10834,29,10817,29],[10834,31,10817,31,"otp"],[10834,34,10817,34],[10834,36,10817,36],[10835,6,10818,8],[10835,13,10818,15],[10835,17,10818,19,"TotpMultiFactorAssertionImpl"],[10835,45,10818,47],[10835,46,10818,48,"otp"],[10835,49,10818,51],[10835,51,10818,53,"undefined"],[10835,60,10818,62],[10835,62,10818,64,"secret"],[10835,68,10818,70],[10835,69,10818,71],[10836,4,10819,4],[10837,4,10820,4],[10838,4,10821,4],[10838,11,10821,11,"_fromEnrollmentId"],[10838,28,10821,28,"_fromEnrollmentId"],[10838,29,10821,29,"enrollmentId"],[10838,41,10821,41],[10838,43,10821,43,"otp"],[10838,46,10821,46],[10838,48,10821,48],[10839,6,10822,8],[10839,13,10822,15],[10839,17,10822,19,"TotpMultiFactorAssertionImpl"],[10839,45,10822,47],[10839,46,10822,48,"otp"],[10839,49,10822,51],[10839,51,10822,53,"enrollmentId"],[10839,63,10822,65],[10839,64,10822,66],[10840,4,10823,4],[10841,4,10824,4],[10842,4,10825,4],[10842,10,10825,10,"_finalizeEnroll"],[10842,25,10825,25,"_finalizeEnroll"],[10842,26,10825,26,"auth"],[10842,30,10825,30],[10842,32,10825,32,"idToken"],[10842,39,10825,39],[10842,41,10825,41,"displayName"],[10842,52,10825,52],[10842,54,10825,54],[10843,6,10826,8,"_assert"],[10843,13,10826,15],[10843,14,10826,16],[10843,21,10826,23],[10843,25,10826,27],[10843,26,10826,28,"secret"],[10843,32,10826,34],[10843,37,10826,39],[10843,48,10826,50],[10843,50,10826,52,"auth"],[10843,54,10826,56],[10843,56,10826,58],[10843,72,10826,74],[10843,73,10826,75],[10843,107,10826,109],[10843,108,10826,110],[10844,6,10827,8],[10844,13,10827,15,"finalizeEnrollTotpMfa"],[10844,34,10827,36],[10844,35,10827,37,"auth"],[10844,39,10827,41],[10844,41,10827,43],[10845,8,10828,12,"idToken"],[10845,15,10828,19],[10846,8,10829,12,"displayName"],[10846,19,10829,23],[10847,8,10830,12,"totpVerificationInfo"],[10847,28,10830,32],[10847,30,10830,34],[10847,34,10830,38],[10847,35,10830,39,"secret"],[10847,41,10830,45],[10847,42,10830,46,"_makeTotpVerificationInfo"],[10847,67,10830,71],[10847,68,10830,72],[10847,72,10830,76],[10847,73,10830,77,"otp"],[10847,76,10830,80],[10848,6,10831,8],[10848,7,10831,9],[10848,8,10831,10],[10849,4,10832,4],[10850,4,10833,4],[10851,4,10834,4],[10851,10,10834,10,"_finalizeSignIn"],[10851,25,10834,25,"_finalizeSignIn"],[10851,26,10834,26,"auth"],[10851,30,10834,30],[10851,32,10834,32,"mfaPendingCredential"],[10851,52,10834,52],[10851,54,10834,54],[10852,6,10835,8,"_assert"],[10852,13,10835,15],[10852,14,10835,16],[10852,18,10835,20],[10852,19,10835,21,"enrollmentId"],[10852,31,10835,33],[10852,36,10835,38,"undefined"],[10852,45,10835,47],[10852,49,10835,51],[10852,53,10835,55],[10852,54,10835,56,"otp"],[10852,57,10835,59],[10852,62,10835,64,"undefined"],[10852,71,10835,73],[10852,73,10835,75,"auth"],[10852,77,10835,79],[10852,79,10835,81],[10852,95,10835,97],[10852,96,10835,98],[10852,130,10835,132],[10852,131,10835,133],[10853,6,10836,8],[10853,12,10836,14,"totpVerificationInfo"],[10853,32,10836,34],[10853,35,10836,37],[10854,8,10836,39,"verificationCode"],[10854,24,10836,55],[10854,26,10836,57],[10854,30,10836,61],[10854,31,10836,62,"otp"],[10855,6,10836,66],[10855,7,10836,67],[10856,6,10837,8],[10856,13,10837,15,"finalizeSignInTotpMfa"],[10856,34,10837,36],[10856,35,10837,37,"auth"],[10856,39,10837,41],[10856,41,10837,43],[10857,8,10838,12,"mfaPendingCredential"],[10857,28,10838,32],[10858,8,10839,12,"mfaEnrollmentId"],[10858,23,10839,27],[10858,25,10839,29],[10858,29,10839,33],[10858,30,10839,34,"enrollmentId"],[10858,42,10839,46],[10859,8,10840,12,"totpVerificationInfo"],[10860,6,10841,8],[10860,7,10841,9],[10860,8,10841,10],[10861,4,10842,4],[10862,2,10843,0],[10863,2,10844,0],[10864,0,10845,0],[10865,0,10846,0],[10866,0,10847,0],[10867,0,10848,0],[10868,0,10849,0],[10869,0,10850,0],[10870,2,10851,0],[10870,8,10851,6,"TotpSecret"],[10870,18,10851,16],[10870,19,10851,17],[10871,4,10852,4],[10872,4,10853,4,"constructor"],[10872,15,10853,15,"constructor"],[10872,16,10853,16,"secretKey"],[10872,25,10853,25],[10872,27,10853,27,"hashingAlgorithm"],[10872,43,10853,43],[10872,45,10853,45,"codeLength"],[10872,55,10853,55],[10872,57,10853,57,"codeIntervalSeconds"],[10872,76,10853,76],[10872,78,10853,78,"enrollmentCompletionDeadline"],[10872,106,10853,106],[10872,108,10853,108,"sessionInfo"],[10872,119,10853,119],[10872,121,10853,121,"auth"],[10872,125,10853,125],[10872,127,10853,127],[10873,6,10854,8],[10873,10,10854,12],[10873,11,10854,13,"sessionInfo"],[10873,22,10854,24],[10873,25,10854,27,"sessionInfo"],[10873,36,10854,38],[10874,6,10855,8],[10874,10,10855,12],[10874,11,10855,13,"auth"],[10874,15,10855,17],[10874,18,10855,20,"auth"],[10874,22,10855,24],[10875,6,10856,8],[10875,10,10856,12],[10875,11,10856,13,"secretKey"],[10875,20,10856,22],[10875,23,10856,25,"secretKey"],[10875,32,10856,34],[10876,6,10857,8],[10876,10,10857,12],[10876,11,10857,13,"hashingAlgorithm"],[10876,27,10857,29],[10876,30,10857,32,"hashingAlgorithm"],[10876,46,10857,48],[10877,6,10858,8],[10877,10,10858,12],[10877,11,10858,13,"codeLength"],[10877,21,10858,23],[10877,24,10858,26,"codeLength"],[10877,34,10858,36],[10878,6,10859,8],[10878,10,10859,12],[10878,11,10859,13,"codeIntervalSeconds"],[10878,30,10859,32],[10878,33,10859,35,"codeIntervalSeconds"],[10878,52,10859,54],[10879,6,10860,8],[10879,10,10860,12],[10879,11,10860,13,"enrollmentCompletionDeadline"],[10879,39,10860,41],[10879,42,10860,44,"enrollmentCompletionDeadline"],[10879,70,10860,72],[10880,4,10861,4],[10881,4,10862,4],[10882,4,10863,4],[10882,11,10863,11,"_fromStartTotpMfaEnrollmentResponse"],[10882,46,10863,46,"_fromStartTotpMfaEnrollmentResponse"],[10882,47,10863,47,"response"],[10882,55,10863,55],[10882,57,10863,57,"auth"],[10882,61,10863,61],[10882,63,10863,63],[10883,6,10864,8],[10883,13,10864,15],[10883,17,10864,19,"TotpSecret"],[10883,27,10864,29],[10883,28,10864,30,"response"],[10883,36,10864,38],[10883,37,10864,39,"totpSessionInfo"],[10883,52,10864,54],[10883,53,10864,55,"sharedSecretKey"],[10883,68,10864,70],[10883,70,10864,72,"response"],[10883,78,10864,80],[10883,79,10864,81,"totpSessionInfo"],[10883,94,10864,96],[10883,95,10864,97,"hashingAlgorithm"],[10883,111,10864,113],[10883,113,10864,115,"response"],[10883,121,10864,123],[10883,122,10864,124,"totpSessionInfo"],[10883,137,10864,139],[10883,138,10864,140,"verificationCodeLength"],[10883,160,10864,162],[10883,162,10864,164,"response"],[10883,170,10864,172],[10883,171,10864,173,"totpSessionInfo"],[10883,186,10864,188],[10883,187,10864,189,"periodSec"],[10883,196,10864,198],[10883,198,10864,200],[10883,202,10864,204,"Date"],[10883,206,10864,208],[10883,207,10864,209,"response"],[10883,215,10864,217],[10883,216,10864,218,"totpSessionInfo"],[10883,231,10864,233],[10883,232,10864,234,"finalizeEnrollmentTime"],[10883,254,10864,256],[10883,255,10864,257],[10883,256,10864,258,"toUTCString"],[10883,267,10864,269],[10883,268,10864,270],[10883,269,10864,271],[10883,271,10864,273,"response"],[10883,279,10864,281],[10883,280,10864,282,"totpSessionInfo"],[10883,295,10864,297],[10883,296,10864,298,"sessionInfo"],[10883,307,10864,309],[10883,309,10864,311,"auth"],[10883,313,10864,315],[10883,314,10864,316],[10884,4,10865,4],[10885,4,10866,4],[10886,4,10867,4,"_makeTotpVerificationInfo"],[10886,29,10867,29,"_makeTotpVerificationInfo"],[10886,30,10867,30,"otp"],[10886,33,10867,33],[10886,35,10867,35],[10887,6,10868,8],[10887,13,10868,15],[10888,8,10868,17,"sessionInfo"],[10888,19,10868,28],[10888,21,10868,30],[10888,25,10868,34],[10888,26,10868,35,"sessionInfo"],[10888,37,10868,46],[10889,8,10868,48,"verificationCode"],[10889,24,10868,64],[10889,26,10868,66,"otp"],[10890,6,10868,70],[10890,7,10868,71],[10891,4,10869,4],[10892,4,10870,4],[10893,0,10871,0],[10894,0,10872,0],[10895,0,10873,0],[10896,0,10874,0],[10897,0,10875,0],[10898,0,10876,0],[10899,0,10877,0],[10900,0,10878,0],[10901,0,10879,0],[10902,4,10880,4,"generateQrCodeUrl"],[10902,21,10880,21,"generateQrCodeUrl"],[10902,22,10880,22,"accountName"],[10902,33,10880,33],[10902,35,10880,35,"issuer"],[10902,41,10880,41],[10902,43,10880,43],[10903,6,10881,8],[10903,10,10881,12,"useDefaults"],[10903,21,10881,23],[10903,24,10881,26],[10903,29,10881,31],[10904,6,10882,8],[10904,10,10882,12,"_isEmptyString"],[10904,24,10882,26],[10904,25,10882,27,"accountName"],[10904,36,10882,38],[10904,37,10882,39],[10904,41,10882,43,"_isEmptyString"],[10904,55,10882,57],[10904,56,10882,58,"issuer"],[10904,62,10882,64],[10904,63,10882,65],[10904,65,10882,67],[10905,8,10883,12,"useDefaults"],[10905,19,10883,23],[10905,22,10883,26],[10905,26,10883,30],[10906,6,10884,8],[10907,6,10885,8],[10907,10,10885,12,"useDefaults"],[10907,21,10885,23],[10907,23,10885,25],[10908,8,10886,12],[10908,12,10886,16,"_isEmptyString"],[10908,26,10886,30],[10908,27,10886,31,"accountName"],[10908,38,10886,42],[10908,39,10886,43],[10908,41,10886,45],[10909,10,10887,16,"accountName"],[10909,21,10887,27],[10909,24,10887,30],[10909,28,10887,34],[10909,29,10887,35,"auth"],[10909,33,10887,39],[10909,34,10887,40,"currentUser"],[10909,45,10887,51],[10909,47,10887,53,"email"],[10909,52,10887,58],[10909,56,10887,62],[10909,69,10887,75],[10910,8,10888,12],[10911,8,10889,12],[10911,12,10889,16,"_isEmptyString"],[10911,26,10889,30],[10911,27,10889,31,"issuer"],[10911,33,10889,37],[10911,34,10889,38],[10911,36,10889,40],[10912,10,10890,16,"issuer"],[10912,16,10890,22],[10912,19,10890,25],[10912,23,10890,29],[10912,24,10890,30,"auth"],[10912,28,10890,34],[10912,29,10890,35,"name"],[10912,33,10890,39],[10913,8,10891,12],[10914,6,10892,8],[10915,6,10893,8],[10915,13,10893,15],[10915,31,10893,33,"issuer"],[10915,37,10893,39],[10915,41,10893,43,"accountName"],[10915,52,10893,54],[10915,63,10893,65],[10915,67,10893,69],[10915,68,10893,70,"secretKey"],[10915,77,10893,79],[10915,88,10893,90,"issuer"],[10915,94,10893,96],[10915,108,10893,110],[10915,112,10893,114],[10915,113,10893,115,"hashingAlgorithm"],[10915,129,10893,131],[10915,140,10893,142],[10915,144,10893,146],[10915,145,10893,147,"codeLength"],[10915,155,10893,157],[10915,157,10893,159],[10916,4,10894,4],[10917,2,10895,0],[10918,2,10896,0],[10919,2,10896,0,"exports"],[10919,9,10896,0],[10919,10,10896,0,"o"],[10919,11,10896,0],[10919,14,10896,0,"TotpSecret"],[10919,24,10896,0],[10920,2,10897,0],[10920,11,10897,9,"_isEmptyString"],[10920,25,10897,23,"_isEmptyString"],[10920,26,10897,24,"input"],[10920,31,10897,29],[10920,33,10897,31],[10921,4,10898,4],[10921,11,10898,11],[10921,18,10898,18,"input"],[10921,23,10898,23],[10921,28,10898,28],[10921,39,10898,39],[10921,43,10898,43,"input"],[10921,48,10898,48],[10921,50,10898,50,"length"],[10921,56,10898,56],[10921,61,10898,61],[10921,62,10898,62],[10922,2,10899,0],[10923,2,10901,0],[10923,6,10901,4,"name"],[10923,10,10901,8],[10923,13,10901,11],[10923,29,10901,27],[10924,2,10902,0],[10924,6,10902,4,"version"],[10924,13,10902,11],[10924,16,10902,14],[10924,24,10902,22],[10926,2,10904,0],[10927,0,10905,0],[10928,0,10906,0],[10929,0,10907,0],[10930,0,10908,0],[10931,0,10909,0],[10932,0,10910,0],[10933,0,10911,0],[10934,0,10912,0],[10935,0,10913,0],[10936,0,10914,0],[10937,0,10915,0],[10938,0,10916,0],[10939,0,10917,0],[10940,0,10918,0],[10941,0,10919,0],[10942,2,10920,0],[10942,8,10920,6,"AuthInterop"],[10942,19,10920,17],[10942,20,10920,18],[10943,4,10921,4,"constructor"],[10943,15,10921,15,"constructor"],[10943,16,10921,16,"auth"],[10943,20,10921,20],[10943,22,10921,22],[10944,6,10922,8],[10944,10,10922,12],[10944,11,10922,13,"auth"],[10944,15,10922,17],[10944,18,10922,20,"auth"],[10944,22,10922,24],[10945,6,10923,8],[10945,10,10923,12],[10945,11,10923,13,"internalListeners"],[10945,28,10923,30],[10945,31,10923,33],[10945,35,10923,37,"Map"],[10945,38,10923,40],[10945,39,10923,41],[10945,40,10923,42],[10946,4,10924,4],[10947,4,10925,4,"getUid"],[10947,10,10925,10,"getUid"],[10947,11,10925,10],[10947,13,10925,13],[10948,6,10926,8],[10948,10,10926,12],[10948,11,10926,13,"assertAuthConfigured"],[10948,31,10926,33],[10948,32,10926,34],[10948,33,10926,35],[10949,6,10927,8],[10949,13,10927,15],[10949,17,10927,19],[10949,18,10927,20,"auth"],[10949,22,10927,24],[10949,23,10927,25,"currentUser"],[10949,34,10927,36],[10949,36,10927,38,"uid"],[10949,39,10927,41],[10949,43,10927,45],[10949,47,10927,49],[10950,4,10928,4],[10951,4,10929,4],[10951,10,10929,10,"getToken"],[10951,18,10929,18,"getToken"],[10951,19,10929,19,"forceRefresh"],[10951,31,10929,31],[10951,33,10929,33],[10952,6,10930,8],[10952,10,10930,12],[10952,11,10930,13,"assertAuthConfigured"],[10952,31,10930,33],[10952,32,10930,34],[10952,33,10930,35],[10953,6,10931,8],[10953,12,10931,14],[10953,16,10931,18],[10953,17,10931,19,"auth"],[10953,21,10931,23],[10953,22,10931,24,"_initializationPromise"],[10953,44,10931,46],[10954,6,10932,8],[10954,10,10932,12],[10954,11,10932,13],[10954,15,10932,17],[10954,16,10932,18,"auth"],[10954,20,10932,22],[10954,21,10932,23,"currentUser"],[10954,32,10932,34],[10954,34,10932,36],[10955,8,10933,12],[10955,15,10933,19],[10955,19,10933,23],[10956,6,10934,8],[10957,6,10935,8],[10957,12,10935,14,"accessToken"],[10957,23,10935,25],[10957,26,10935,28],[10957,32,10935,34],[10957,36,10935,38],[10957,37,10935,39,"auth"],[10957,41,10935,43],[10957,42,10935,44,"currentUser"],[10957,53,10935,55],[10957,54,10935,56,"getIdToken"],[10957,64,10935,66],[10957,65,10935,67,"forceRefresh"],[10957,77,10935,79],[10957,78,10935,80],[10958,6,10936,8],[10958,13,10936,15],[10959,8,10936,17,"accessToken"],[10960,6,10936,29],[10960,7,10936,30],[10961,4,10937,4],[10962,4,10938,4,"addAuthTokenListener"],[10962,24,10938,24,"addAuthTokenListener"],[10962,25,10938,25,"listener"],[10962,33,10938,33],[10962,35,10938,35],[10963,6,10939,8],[10963,10,10939,12],[10963,11,10939,13,"assertAuthConfigured"],[10963,31,10939,33],[10963,32,10939,34],[10963,33,10939,35],[10964,6,10940,8],[10964,10,10940,12],[10964,14,10940,16],[10964,15,10940,17,"internalListeners"],[10964,32,10940,34],[10964,33,10940,35,"has"],[10964,36,10940,38],[10964,37,10940,39,"listener"],[10964,45,10940,47],[10964,46,10940,48],[10964,48,10940,50],[10965,8,10941,12],[10966,6,10942,8],[10967,6,10943,8],[10967,12,10943,14,"unsubscribe"],[10967,23,10943,25],[10967,26,10943,28],[10967,30,10943,32],[10967,31,10943,33,"auth"],[10967,35,10943,37],[10967,36,10943,38,"onIdTokenChanged"],[10967,52,10943,54],[10967,53,10943,55,"user"],[10967,57,10943,59],[10967,61,10943,63],[10968,8,10944,12,"listener"],[10968,16,10944,20],[10968,17,10944,21,"user"],[10968,21,10944,25],[10968,23,10944,27,"stsTokenManager"],[10968,38,10944,42],[10968,39,10944,43,"accessToken"],[10968,50,10944,54],[10968,54,10944,58],[10968,58,10944,62],[10968,59,10944,63],[10969,6,10945,8],[10969,7,10945,9],[10969,8,10945,10],[10970,6,10946,8],[10970,10,10946,12],[10970,11,10946,13,"internalListeners"],[10970,28,10946,30],[10970,29,10946,31,"set"],[10970,32,10946,34],[10970,33,10946,35,"listener"],[10970,41,10946,43],[10970,43,10946,45,"unsubscribe"],[10970,54,10946,56],[10970,55,10946,57],[10971,6,10947,8],[10971,10,10947,12],[10971,11,10947,13,"updateProactiveRefresh"],[10971,33,10947,35],[10971,34,10947,36],[10971,35,10947,37],[10972,4,10948,4],[10973,4,10949,4,"removeAuthTokenListener"],[10973,27,10949,27,"removeAuthTokenListener"],[10973,28,10949,28,"listener"],[10973,36,10949,36],[10973,38,10949,38],[10974,6,10950,8],[10974,10,10950,12],[10974,11,10950,13,"assertAuthConfigured"],[10974,31,10950,33],[10974,32,10950,34],[10974,33,10950,35],[10975,6,10951,8],[10975,12,10951,14,"unsubscribe"],[10975,23,10951,25],[10975,26,10951,28],[10975,30,10951,32],[10975,31,10951,33,"internalListeners"],[10975,48,10951,50],[10975,49,10951,51,"get"],[10975,52,10951,54],[10975,53,10951,55,"listener"],[10975,61,10951,63],[10975,62,10951,64],[10976,6,10952,8],[10976,10,10952,12],[10976,11,10952,13,"unsubscribe"],[10976,22,10952,24],[10976,24,10952,26],[10977,8,10953,12],[10978,6,10954,8],[10979,6,10955,8],[10979,10,10955,12],[10979,11,10955,13,"internalListeners"],[10979,28,10955,30],[10979,29,10955,31,"delete"],[10979,35,10955,37],[10979,36,10955,38,"listener"],[10979,44,10955,46],[10979,45,10955,47],[10980,6,10956,8,"unsubscribe"],[10980,17,10956,19],[10980,18,10956,20],[10980,19,10956,21],[10981,6,10957,8],[10981,10,10957,12],[10981,11,10957,13,"updateProactiveRefresh"],[10981,33,10957,35],[10981,34,10957,36],[10981,35,10957,37],[10982,4,10958,4],[10983,4,10959,4,"assertAuthConfigured"],[10983,24,10959,24,"assertAuthConfigured"],[10983,25,10959,24],[10983,27,10959,27],[10984,6,10960,8,"_assert"],[10984,13,10960,15],[10984,14,10960,16],[10984,18,10960,20],[10984,19,10960,21,"auth"],[10984,23,10960,25],[10984,24,10960,26,"_initializationPromise"],[10984,46,10960,48],[10984,48,10960,50],[10984,87,10960,89],[10984,88,10960,90],[10984,138,10960,140],[10984,139,10960,141],[10985,4,10961,4],[10986,4,10962,4,"updateProactiveRefresh"],[10986,26,10962,26,"updateProactiveRefresh"],[10986,27,10962,26],[10986,29,10962,29],[10987,6,10963,8],[10987,10,10963,12],[10987,14,10963,16],[10987,15,10963,17,"internalListeners"],[10987,32,10963,34],[10987,33,10963,35,"size"],[10987,37,10963,39],[10987,40,10963,42],[10987,41,10963,43],[10987,43,10963,45],[10988,8,10964,12],[10988,12,10964,16],[10988,13,10964,17,"auth"],[10988,17,10964,21],[10988,18,10964,22,"_startProactiveRefresh"],[10988,40,10964,44],[10988,41,10964,45],[10988,42,10964,46],[10989,6,10965,8],[10989,7,10965,9],[10989,13,10966,13],[10990,8,10967,12],[10990,12,10967,16],[10990,13,10967,17,"auth"],[10990,17,10967,21],[10990,18,10967,22,"_stopProactiveRefresh"],[10990,39,10967,43],[10990,40,10967,44],[10990,41,10967,45],[10991,6,10968,8],[10992,4,10969,4],[10993,2,10970,0],[10995,2,10972,0],[10996,0,10973,0],[10997,0,10974,0],[10998,0,10975,0],[10999,0,10976,0],[11000,0,10977,0],[11001,0,10978,0],[11002,0,10979,0],[11003,0,10980,0],[11004,0,10981,0],[11005,0,10982,0],[11006,0,10983,0],[11007,0,10984,0],[11008,0,10985,0],[11009,0,10986,0],[11010,0,10987,0],[11011,2,10988,0],[11011,11,10988,9,"getVersionForPlatform"],[11011,32,10988,30,"getVersionForPlatform"],[11011,33,10988,31,"clientPlatform"],[11011,47,10988,45],[11011,49,10988,47],[11012,4,10989,4],[11012,12,10989,12,"clientPlatform"],[11012,26,10989,26],[11013,6,10990,8],[11013,11,10990,13],[11013,17,10990,19],[11013,18,10990,20],[11014,8,10991,12],[11014,15,10991,19],[11014,21,10991,25],[11015,6,10992,8],[11015,11,10992,13],[11015,24,10992,26],[11015,25,10992,27],[11016,8,10993,12],[11016,15,10993,19],[11016,19,10993,23],[11017,6,10994,8],[11017,11,10994,13],[11017,19,10994,21],[11017,20,10994,22],[11018,8,10995,12],[11018,15,10995,19],[11018,26,10995,30],[11019,6,10996,8],[11019,11,10996,13],[11019,20,10996,22],[11019,21,10996,23],[11020,8,10997,12],[11020,15,10997,19],[11020,24,10997,28],[11021,6,10998,8],[11021,11,10998,13],[11021,25,10998,27],[11021,26,10998,28],[11022,8,10999,12],[11022,15,10999,19],[11022,30,10999,34],[11023,6,11000,8],[11024,8,11001,12],[11024,15,11001,19,"undefined"],[11024,24,11001,28],[11025,4,11002,4],[11026,2,11003,0],[11027,2,11004,0],[11028,2,11005,0],[11028,11,11005,9,"registerAuth"],[11028,23,11005,21,"registerAuth"],[11028,24,11005,22,"clientPlatform"],[11028,38,11005,36],[11028,40,11005,38],[11029,4,11006,4],[11029,8,11006,4,"_registerComponent"],[11029,31,11006,22],[11029,33,11006,23],[11029,37,11006,27,"Component"],[11029,57,11006,36],[11029,58,11006,37],[11029,64,11006,43],[11029,65,11006,44],[11029,92,11006,71],[11029,93,11006,72,"container"],[11029,102,11006,81],[11029,104,11006,83],[11030,6,11006,85,"options"],[11030,13,11006,92],[11030,15,11006,94,"deps"],[11031,4,11006,99],[11031,5,11006,100],[11031,10,11006,105],[11032,6,11007,8],[11032,12,11007,14,"app"],[11032,15,11007,17],[11032,18,11007,20,"container"],[11032,27,11007,29],[11032,28,11007,30,"getProvider"],[11032,39,11007,41],[11032,40,11007,42],[11032,45,11007,47],[11032,46,11007,48],[11032,47,11007,49,"getImmediate"],[11032,59,11007,61],[11032,60,11007,62],[11032,61,11007,63],[11033,6,11008,8],[11033,12,11008,14,"heartbeatServiceProvider"],[11033,36,11008,38],[11033,39,11008,41,"container"],[11033,48,11008,50],[11033,49,11008,51,"getProvider"],[11033,60,11008,62],[11033,61,11008,63],[11033,72,11008,74],[11033,73,11008,75],[11034,6,11009,8],[11034,12,11009,14,"appCheckServiceProvider"],[11034,35,11009,37],[11034,38,11009,40,"container"],[11034,47,11009,49],[11034,48,11009,50,"getProvider"],[11034,59,11009,61],[11034,60,11009,62],[11034,80,11009,82],[11034,81,11009,83],[11035,6,11010,8],[11035,12,11010,14],[11036,8,11010,16,"apiKey"],[11036,14,11010,22],[11037,8,11010,24,"authDomain"],[11038,6,11010,35],[11038,7,11010,36],[11038,10,11010,39,"app"],[11038,13,11010,42],[11038,14,11010,43,"options"],[11038,21,11010,50],[11039,6,11011,8,"_assert"],[11039,13,11011,15],[11039,14,11011,16,"apiKey"],[11039,20,11011,22],[11039,24,11011,26],[11039,25,11011,27,"apiKey"],[11039,31,11011,33],[11039,32,11011,34,"includes"],[11039,40,11011,42],[11039,41,11011,43],[11039,44,11011,46],[11039,45,11011,47],[11039,47,11011,49],[11039,64,11011,66],[11039,65,11011,67],[11039,102,11011,104],[11040,8,11011,106,"appName"],[11040,15,11011,113],[11040,17,11011,115,"app"],[11040,20,11011,118],[11040,21,11011,119,"name"],[11041,6,11011,124],[11041,7,11011,125],[11041,8,11011,126],[11042,6,11012,8],[11042,12,11012,14,"config"],[11042,18,11012,20],[11042,21,11012,23],[11043,8,11013,12,"apiKey"],[11043,14,11013,18],[11044,8,11014,12,"authDomain"],[11044,18,11014,22],[11045,8,11015,12,"clientPlatform"],[11045,22,11015,26],[11046,8,11016,12,"apiHost"],[11046,15,11016,19],[11046,17,11016,21],[11046,49,11016,53],[11046,50,11016,54],[11047,8,11017,12,"tokenApiHost"],[11047,20,11017,24],[11047,22,11017,26],[11047,50,11017,54],[11047,51,11017,55],[11048,8,11018,12,"apiScheme"],[11048,17,11018,21],[11048,19,11018,23],[11048,26,11018,30],[11048,27,11018,31],[11049,8,11019,12,"sdkClientVersion"],[11049,24,11019,28],[11049,26,11019,30,"_getClientVersion"],[11049,43,11019,47],[11049,44,11019,48,"clientPlatform"],[11049,58,11019,62],[11050,6,11020,8],[11050,7,11020,9],[11051,6,11021,8],[11051,12,11021,14,"authInstance"],[11051,24,11021,26],[11051,27,11021,29],[11051,31,11021,33,"AuthImpl"],[11051,39,11021,41],[11051,40,11021,42,"app"],[11051,43,11021,45],[11051,45,11021,47,"heartbeatServiceProvider"],[11051,69,11021,71],[11051,71,11021,73,"appCheckServiceProvider"],[11051,94,11021,96],[11051,96,11021,98,"config"],[11051,102,11021,104],[11051,103,11021,105],[11052,6,11022,8,"_initializeAuthInstance"],[11052,29,11022,31],[11052,30,11022,32,"authInstance"],[11052,42,11022,44],[11052,44,11022,46,"deps"],[11052,48,11022,50],[11052,49,11022,51],[11053,6,11023,8],[11053,13,11023,15,"authInstance"],[11053,25,11023,27],[11054,4,11024,4],[11054,5,11024,5],[11054,7,11024,7],[11054,15,11024,15],[11054,16,11024,16],[11054,42,11024,42],[11055,4,11025,8],[11056,0,11026,0],[11057,0,11027,0],[11058,0,11028,0],[11058,7,11025,8],[11058,8,11029,9,"setInstantiationMode"],[11058,28,11029,29],[11058,29,11029,30],[11058,39,11029,40],[11058,40,11029,41],[11058,72,11029,73],[11059,4,11030,8],[11060,0,11031,0],[11061,0,11032,0],[11062,0,11033,0],[11062,7,11030,8],[11062,8,11034,9,"setInstanceCreatedCallback"],[11062,34,11034,35],[11062,35,11034,36],[11062,36,11034,37,"container"],[11062,45,11034,46],[11062,47,11034,48,"_instanceIdentifier"],[11062,66,11034,67],[11062,68,11034,69,"_instance"],[11062,77,11034,78],[11062,82,11034,83],[11063,6,11035,8],[11063,12,11035,14,"authInternalProvider"],[11063,32,11035,34],[11063,35,11035,37,"container"],[11063,44,11035,46],[11063,45,11035,47,"getProvider"],[11063,56,11035,58],[11063,57,11035,59],[11063,72,11035,74],[11063,73,11035,75],[11063,107,11035,109],[11063,108,11035,110],[11064,6,11036,8,"authInternalProvider"],[11064,26,11036,28],[11064,27,11036,29,"initialize"],[11064,37,11036,39],[11064,38,11036,40],[11064,39,11036,41],[11065,4,11037,4],[11065,5,11037,5],[11065,6,11037,6],[11065,7,11037,7],[11066,4,11038,4],[11066,8,11038,4,"_registerComponent"],[11066,31,11038,22],[11066,33,11038,23],[11066,37,11038,27,"Component"],[11066,57,11038,36],[11066,58,11038,37],[11066,73,11038,52],[11066,74,11038,53],[11066,110,11038,89,"container"],[11066,119,11038,98],[11066,123,11038,102],[11067,6,11039,8],[11067,12,11039,14,"auth"],[11067,16,11039,18],[11067,19,11039,21,"_castAuth"],[11067,28,11039,30],[11067,29,11039,31,"container"],[11067,38,11039,40],[11067,39,11039,41,"getProvider"],[11067,50,11039,52],[11067,51,11039,53],[11067,57,11039,59],[11067,58,11039,60],[11067,83,11039,85],[11067,84,11039,86],[11067,85,11039,87,"getImmediate"],[11067,97,11039,99],[11067,98,11039,100],[11067,99,11039,101],[11067,100,11039,102],[11068,6,11040,8],[11068,13,11040,15],[11068,14,11040,16,"auth"],[11068,18,11040,20],[11068,22,11040,24],[11068,26,11040,28,"AuthInterop"],[11068,37,11040,39],[11068,38,11040,40,"auth"],[11068,42,11040,44],[11068,43,11040,45],[11068,45,11040,47,"auth"],[11068,49,11040,51],[11068,50,11040,52],[11069,4,11041,4],[11069,5,11041,5],[11069,7,11041,7],[11069,16,11041,16],[11069,17,11041,17],[11069,44,11041,44],[11069,45,11041,45],[11069,46,11041,46,"setInstantiationMode"],[11069,66,11041,66],[11069,67,11041,67],[11069,77,11041,77],[11069,78,11041,78],[11069,110,11041,110],[11069,111,11041,111],[11069,112,11041,112],[11070,4,11042,4],[11070,8,11042,4,"registerVersion"],[11070,28,11042,19],[11070,30,11042,20,"name"],[11070,34,11042,24],[11070,36,11042,26,"version"],[11070,43,11042,33],[11070,45,11042,35,"getVersionForPlatform"],[11070,66,11042,56],[11070,67,11042,57,"clientPlatform"],[11070,81,11042,71],[11070,82,11042,72],[11070,83,11042,73],[11071,4,11043,4],[11072,4,11044,4],[11072,8,11044,4,"registerVersion"],[11072,28,11044,19],[11072,30,11044,20,"name"],[11072,34,11044,24],[11072,36,11044,26,"version"],[11072,43,11044,33],[11072,45,11044,35],[11072,54,11044,44],[11072,55,11044,45],[11073,2,11045,0],[11075,2,11047,0],[11076,0,11048,0],[11077,0,11049,0],[11078,0,11050,0],[11079,0,11051,0],[11080,0,11052,0],[11081,0,11053,0],[11082,0,11054,0],[11083,0,11055,0],[11084,0,11056,0],[11085,0,11057,0],[11086,0,11058,0],[11087,0,11059,0],[11088,0,11060,0],[11089,0,11061,0],[11090,0,11062,0],[11091,2,11063,0],[11091,8,11063,6,"DEFAULT_ID_TOKEN_MAX_AGE"],[11091,32,11063,30],[11091,35,11063,33],[11091,36,11063,34],[11091,39,11063,37],[11091,41,11063,39],[11092,2,11064,0],[11092,8,11064,6,"authIdTokenMaxAge"],[11092,25,11064,23],[11092,28,11064,26],[11092,32,11064,26,"getExperimentalSetting"],[11092,60,11064,48],[11092,62,11064,49],[11092,81,11064,68],[11092,82,11064,69],[11092,86,11064,73,"DEFAULT_ID_TOKEN_MAX_AGE"],[11092,110,11064,97],[11093,2,11065,0],[11093,6,11065,4,"lastPostedIdToken"],[11093,23,11065,21],[11093,26,11065,24],[11093,30,11065,28],[11094,2,11066,0],[11094,8,11066,6,"mintCookieFactory"],[11094,25,11066,23],[11094,28,11066,27,"url"],[11094,31,11066,30],[11094,35,11066,35],[11094,41,11066,42,"user"],[11094,45,11066,46],[11094,49,11066,51],[11095,4,11067,4],[11095,10,11067,10,"idTokenResult"],[11095,23,11067,23],[11095,26,11067,26,"user"],[11095,30,11067,30],[11095,35,11067,35],[11095,41,11067,41,"user"],[11095,45,11067,45],[11095,46,11067,46,"getIdTokenResult"],[11095,62,11067,62],[11095,63,11067,63],[11095,64,11067,64],[11095,65,11067,65],[11096,4,11068,4],[11096,10,11068,10,"idTokenAge"],[11096,20,11068,20],[11096,23,11068,23,"idTokenResult"],[11096,36,11068,36],[11096,40,11069,8],[11096,41,11069,9],[11096,45,11069,13,"Date"],[11096,49,11069,17],[11096,50,11069,18],[11096,51,11069,19],[11096,52,11069,20,"getTime"],[11096,59,11069,27],[11096,60,11069,28],[11096,61,11069,29],[11096,64,11069,32,"Date"],[11096,68,11069,36],[11096,69,11069,37,"parse"],[11096,74,11069,42],[11096,75,11069,43,"idTokenResult"],[11096,88,11069,56],[11096,89,11069,57,"issuedAtTime"],[11096,101,11069,69],[11096,102,11069,70],[11096,106,11069,74],[11096,110,11069,78],[11097,4,11070,4],[11097,8,11070,8,"idTokenAge"],[11097,18,11070,18],[11097,22,11070,22,"idTokenAge"],[11097,32,11070,32],[11097,35,11070,35,"authIdTokenMaxAge"],[11097,52,11070,52],[11097,54,11070,54],[11098,6,11071,8],[11099,4,11072,4],[11100,4,11073,4],[11101,4,11074,4],[11101,10,11074,10,"idToken"],[11101,17,11074,17],[11101,20,11074,20,"idTokenResult"],[11101,33,11074,33],[11101,35,11074,35,"token"],[11101,40,11074,40],[11102,4,11075,4],[11102,8,11075,8,"lastPostedIdToken"],[11102,25,11075,25],[11102,30,11075,30,"idToken"],[11102,37,11075,37],[11102,39,11075,39],[11103,6,11076,8],[11104,4,11077,4],[11105,4,11078,4,"lastPostedIdToken"],[11105,21,11078,21],[11105,24,11078,24,"idToken"],[11105,31,11078,31],[11106,4,11079,4],[11106,10,11079,10,"fetch"],[11106,15,11079,15],[11106,16,11079,16,"url"],[11106,19,11079,19],[11106,21,11079,21],[11107,6,11080,8,"method"],[11107,12,11080,14],[11107,14,11080,16,"idToken"],[11107,21,11080,23],[11107,24,11080,26],[11107,30,11080,32],[11107,33,11080,35],[11107,41,11080,43],[11108,6,11081,8,"headers"],[11108,13,11081,15],[11108,15,11081,17,"idToken"],[11108,22,11081,24],[11108,25,11082,14],[11109,8,11083,16],[11109,23,11083,31],[11109,25,11083,33],[11109,35,11083,43,"idToken"],[11109,42,11083,50],[11110,6,11084,12],[11110,7,11084,13],[11110,10,11085,14],[11110,11,11085,15],[11111,4,11086,4],[11111,5,11086,5],[11111,6,11086,6],[11112,2,11087,0],[11112,3,11087,1],[11113,2,11088,0],[11114,0,11089,0],[11115,0,11090,0],[11116,0,11091,0],[11117,0,11092,0],[11118,0,11093,0],[11119,0,11094,0],[11120,0,11095,0],[11121,2,11096,0],[11121,11,11096,9,"getAuth"],[11121,18,11096,16,"getAuth"],[11121,19,11096,17,"app"],[11121,22,11096,20],[11121,25,11096,23],[11121,29,11096,23,"getApp"],[11121,40,11096,29],[11121,42,11096,30],[11121,43,11096,31],[11121,45,11096,33],[11122,4,11097,4],[11122,10,11097,10,"provider"],[11122,18,11097,18],[11122,21,11097,21],[11122,25,11097,21,"_getProvider"],[11122,42,11097,33],[11122,44,11097,34,"app"],[11122,47,11097,37],[11122,49,11097,39],[11122,55,11097,45],[11122,56,11097,46],[11123,4,11098,4],[11123,8,11098,8,"provider"],[11123,16,11098,16],[11123,17,11098,17,"isInitialized"],[11123,30,11098,30],[11123,31,11098,31],[11123,32,11098,32],[11123,34,11098,34],[11124,6,11099,8],[11124,13,11099,15,"provider"],[11124,21,11099,23],[11124,22,11099,24,"getImmediate"],[11124,34,11099,36],[11124,35,11099,37],[11124,36,11099,38],[11125,4,11100,4],[11126,4,11101,4],[11126,10,11101,10,"auth"],[11126,14,11101,14],[11126,17,11101,17,"initializeAuth"],[11126,31,11101,31],[11126,32,11101,32,"app"],[11126,35,11101,35],[11126,37,11101,37],[11127,6,11102,8,"popupRedirectResolver"],[11127,27,11102,29],[11127,29,11102,31,"browserPopupRedirectResolver"],[11127,57,11102,59],[11128,6,11103,8,"persistence"],[11128,17,11103,19],[11128,19,11103,21],[11128,20,11104,12,"indexedDBLocalPersistence"],[11128,45,11104,37],[11128,47,11105,12,"browserLocalPersistence"],[11128,70,11105,35],[11128,72,11106,12,"browserSessionPersistence"],[11128,97,11106,37],[11129,4,11108,4],[11129,5,11108,5],[11129,6,11108,6],[11130,4,11109,4],[11130,10,11109,10,"authTokenSyncPath"],[11130,27,11109,27],[11130,30,11109,30],[11130,34,11109,30,"getExperimentalSetting"],[11130,62,11109,52],[11130,64,11109,53],[11130,82,11109,71],[11130,83,11109,72],[11131,4,11110,4],[11132,4,11111,4],[11132,8,11111,8,"authTokenSyncPath"],[11132,25,11111,25],[11132,29,11112,8],[11132,36,11112,15,"isSecureContext"],[11132,51,11112,30],[11132,56,11112,35],[11132,65,11112,44],[11132,69,11113,8,"isSecureContext"],[11132,84,11113,23],[11132,86,11113,25],[11133,6,11114,8],[11134,6,11115,8],[11134,12,11115,14,"authTokenSyncUrl"],[11134,28,11115,30],[11134,31,11115,33],[11134,35,11115,37,"URL"],[11134,38,11115,40],[11134,39,11115,41,"authTokenSyncPath"],[11134,56,11115,58],[11134,58,11115,60,"location"],[11134,66,11115,68],[11134,67,11115,69,"origin"],[11134,73,11115,75],[11134,74,11115,76],[11135,6,11116,8],[11135,10,11116,12,"location"],[11135,18,11116,20],[11135,19,11116,21,"origin"],[11135,25,11116,27],[11135,30,11116,32,"authTokenSyncUrl"],[11135,46,11116,48],[11135,47,11116,49,"origin"],[11135,53,11116,55],[11135,55,11116,57],[11136,8,11117,12],[11136,14,11117,18,"mintCookie"],[11136,24,11117,28],[11136,27,11117,31,"mintCookieFactory"],[11136,44,11117,48],[11136,45,11117,49,"authTokenSyncUrl"],[11136,61,11117,65],[11136,62,11117,66,"toString"],[11136,70,11117,74],[11136,71,11117,75],[11136,72,11117,76],[11136,73,11117,77],[11137,8,11118,12,"beforeAuthStateChanged"],[11137,30,11118,34],[11137,31,11118,35,"auth"],[11137,35,11118,39],[11137,37,11118,41,"mintCookie"],[11137,47,11118,51],[11137,49,11118,53],[11137,55,11118,59,"mintCookie"],[11137,65,11118,69],[11137,66,11118,70,"auth"],[11137,70,11118,74],[11137,71,11118,75,"currentUser"],[11137,82,11118,86],[11137,83,11118,87],[11137,84,11118,88],[11138,8,11119,12,"onIdTokenChanged"],[11138,24,11119,28],[11138,25,11119,29,"auth"],[11138,29,11119,33],[11138,31,11119,35,"user"],[11138,35,11119,39],[11138,39,11119,43,"mintCookie"],[11138,49,11119,53],[11138,50,11119,54,"user"],[11138,54,11119,58],[11138,55,11119,59],[11138,56,11119,60],[11139,6,11120,8],[11140,4,11121,4],[11141,4,11122,4],[11141,10,11122,10,"authEmulatorHost"],[11141,26,11122,26],[11141,29,11122,29],[11141,33,11122,29,"getDefaultEmulatorHost"],[11141,61,11122,51],[11141,63,11122,52],[11141,69,11122,58],[11141,70,11122,59],[11142,4,11123,4],[11142,8,11123,8,"authEmulatorHost"],[11142,24,11123,24],[11142,26,11123,26],[11143,6,11124,8,"connectAuthEmulator"],[11143,25,11124,27],[11143,26,11124,28,"auth"],[11143,30,11124,32],[11143,32,11124,34],[11143,42,11124,44,"authEmulatorHost"],[11143,58,11124,60],[11143,60,11124,62],[11143,61,11124,63],[11144,4,11125,4],[11145,4,11126,4],[11145,11,11126,11,"auth"],[11145,15,11126,15],[11146,2,11127,0],[11147,2,11128,0],[11147,11,11128,9,"getScriptParentElement"],[11147,33,11128,31,"getScriptParentElement"],[11147,34,11128,31],[11147,36,11128,34],[11148,4,11129,4],[11148,11,11129,11,"document"],[11148,19,11129,19],[11148,20,11129,20,"getElementsByTagName"],[11148,40,11129,40],[11148,41,11129,41],[11148,47,11129,47],[11148,48,11129,48],[11148,51,11129,51],[11148,52,11129,52],[11148,53,11129,53],[11148,57,11129,57,"document"],[11148,65,11129,65],[11149,2,11130,0],[11150,2,11131,0,"_setExternalJSProvider"],[11150,24,11131,22],[11150,25,11131,23],[11151,4,11132,4,"loadJS"],[11151,10,11132,10,"loadJS"],[11151,11,11132,11,"url"],[11151,14,11132,14],[11151,16,11132,16],[11152,6,11133,8],[11153,6,11134,8],[11153,13,11134,15],[11153,17,11134,19,"Promise"],[11153,24,11134,26],[11153,25,11134,27],[11153,26,11134,28,"resolve"],[11153,33,11134,35],[11153,35,11134,37,"reject"],[11153,41,11134,43],[11153,46,11134,48],[11154,8,11135,12],[11154,14,11135,18,"el"],[11154,16,11135,20],[11154,19,11135,23,"document"],[11154,27,11135,31],[11154,28,11135,32,"createElement"],[11154,41,11135,45],[11154,42,11135,46],[11154,50,11135,54],[11154,51,11135,55],[11155,8,11136,12,"el"],[11155,10,11136,14],[11155,11,11136,15,"setAttribute"],[11155,23,11136,27],[11155,24,11136,28],[11155,29,11136,33],[11155,31,11136,35,"url"],[11155,34,11136,38],[11155,35,11136,39],[11156,8,11137,12,"el"],[11156,10,11137,14],[11156,11,11137,15,"onload"],[11156,17,11137,21],[11156,20,11137,24,"resolve"],[11156,27,11137,31],[11157,8,11138,12,"el"],[11157,10,11138,14],[11157,11,11138,15,"onerror"],[11157,18,11138,22],[11157,21,11138,25,"e"],[11157,22,11138,26],[11157,26,11138,30],[11158,10,11139,16],[11158,16,11139,22,"error"],[11158,21,11139,27],[11158,24,11139,30,"_createError"],[11158,36,11139,42],[11158,37,11139,43],[11158,53,11139,59],[11158,54,11139,60],[11158,88,11139,94],[11158,89,11139,95],[11159,10,11140,16,"error"],[11159,15,11140,21],[11159,16,11140,22,"customData"],[11159,26,11140,32],[11159,29,11140,35,"e"],[11159,30,11140,36],[11160,10,11141,16,"reject"],[11160,16,11141,22],[11160,17,11141,23,"error"],[11160,22,11141,28],[11160,23,11141,29],[11161,8,11142,12],[11161,9,11142,13],[11162,8,11143,12,"el"],[11162,10,11143,14],[11162,11,11143,15,"type"],[11162,15,11143,19],[11162,18,11143,22],[11162,35,11143,39],[11163,8,11144,12,"el"],[11163,10,11144,14],[11163,11,11144,15,"charset"],[11163,18,11144,22],[11163,21,11144,25],[11163,28,11144,32],[11164,8,11145,12,"getScriptParentElement"],[11164,30,11145,34],[11164,31,11145,35],[11164,32,11145,36],[11164,33,11145,37,"appendChild"],[11164,44,11145,48],[11164,45,11145,49,"el"],[11164,47,11145,51],[11164,48,11145,52],[11165,6,11146,8],[11165,7,11146,9],[11165,8,11146,10],[11166,4,11147,4],[11166,5,11147,5],[11167,4,11148,4,"gapiScript"],[11167,14,11148,14],[11167,16,11148,16],[11167,51,11148,51],[11168,4,11149,4,"recaptchaV2Script"],[11168,21,11149,21],[11168,23,11149,23],[11168,64,11149,64],[11169,4,11150,4,"recaptchaEnterpriseScript"],[11169,29,11150,29],[11169,31,11150,31],[11170,2,11151,0],[11170,3,11151,1],[11170,4,11151,2],[11171,2,11152,0,"registerAuth"],[11171,14,11152,12],[11171,15,11152,13],[11171,24,11152,22],[11171,25,11152,23],[11171,53,11152,51],[11171,54,11152,52],[11172,0,11152,53],[11172,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isV2","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaParams","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIOSStandalone","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_setExternalJSProvider","_loadJS","_recaptchaV2ScriptUrl","_recaptchaEnterpriseScriptUrl","_gapiScriptUrl","_generateCallbackName","MockReCaptcha","MockReCaptcha#constructor","MockReCaptcha#render","MockReCaptcha#reset","MockReCaptcha#getResponse","MockReCaptcha#execute","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","MockWidget","MockWidget#constructor","clickHandler","MockWidget#getResponse","MockWidget#_delete","MockWidget#execute","window.setTimeout$argument_0","MockWidget#checkIfDeleted","generateRandomAlphaNumericString","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","sendPhoneVerificationCode","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link$1","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollPhoneMfa","finalizeEnrollPhoneMfa","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","BrowserPersistenceClass","BrowserPersistenceClass#constructor","BrowserPersistenceClass#_isAvailable","BrowserPersistenceClass#_set","BrowserPersistenceClass#_get","BrowserPersistenceClass#_remove","BrowserPersistenceClass#get__storage","BrowserLocalPersistence","BrowserLocalPersistence#constructor","boundEventHandler","BrowserLocalPersistence#forAllChangedKeys","BrowserLocalPersistence#onStorageEvent","forAllChangedKeys$argument_0","triggerListeners","BrowserLocalPersistence#notifyListeners","BrowserLocalPersistence#startPolling","setInterval$argument_0","BrowserLocalPersistence#stopPolling","BrowserLocalPersistence#attachListener","BrowserLocalPersistence#detachListener","BrowserLocalPersistence#_addListener","BrowserLocalPersistence#_removeListener","BrowserLocalPersistence#_set","BrowserLocalPersistence#_get","BrowserLocalPersistence#_remove","getDocumentCookie","getCookieName","CookiePersistence","CookiePersistence#constructor","CookiePersistence#_getFinalTarget","CookiePersistence#_isAvailable","CookiePersistence#_set","CookiePersistence#_get","CookiePersistence#_remove","fetch._catch$argument_0","CookiePersistence#_addListener","cb","event.changed.find$argument_0","event.deleted.find$argument_0","unsubscribe","CookiePersistence#_removeListener","BrowserSessionPersistence","BrowserSessionPersistence#constructor","BrowserSessionPersistence#_addListener","BrowserSessionPersistence#_removeListener","_allSettled","promises.map$argument_0","Receiver","Receiver#constructor","Receiver._getInstance","receivers.find$argument_0","Receiver#isListeningto","Receiver#handleEvent","Array.from.map$argument_0","Receiver#_subscribe","Receiver#_unsubscribe","_generateEventId","Sender","Sender#constructor","Sender#removeMessageHandler","Sender#_send","handler.onMessage","Promise._finally$argument_0","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getServiceWorkerController","_getWorkerGlobalScope","DBPromise","DBPromise#constructor","DBPromise#toPromise","request.addEventListener$argument_1","getObjectStore","_deleteDatabase","_openDatabase","_putObject","getObject","_deleteObject","IndexedDBLocalPersistence","IndexedDBLocalPersistence#constructor","initializeServiceWorkerMessaging.then$argument_0","initializeServiceWorkerMessaging.then$argument_1","IndexedDBLocalPersistence#_openDb","IndexedDBLocalPersistence#_withRetries","IndexedDBLocalPersistence#initializeServiceWorkerMessaging","IndexedDBLocalPersistence#initializeReceiver","receiver._subscribe$argument_1","IndexedDBLocalPersistence#initializeSender","IndexedDBLocalPersistence#notifyServiceWorker","IndexedDBLocalPersistence#_isAvailable","IndexedDBLocalPersistence#_withPendingWrite","IndexedDBLocalPersistence#_set","_withPendingWrite$argument_0","_withRetries$argument_0","IndexedDBLocalPersistence#_get","IndexedDBLocalPersistence#_remove","IndexedDBLocalPersistence#_poll","IndexedDBLocalPersistence#notifyListeners","IndexedDBLocalPersistence#startPolling","IndexedDBLocalPersistence#stopPolling","IndexedDBLocalPersistence#_addListener","IndexedDBLocalPersistence#_removeListener","startSignInPhoneMfa","finalizeSignInPhoneMfa","finalizeSignInTotpMfa","ReCaptchaLoaderImpl","ReCaptchaLoaderImpl#constructor","ReCaptchaLoaderImpl#load","_window.setTimeout$argument_0","_window._JSLOAD_CALLBACK","recaptcha.render","_loadJS._catch$argument_0","ReCaptchaLoaderImpl#clearedOneInstance","ReCaptchaLoaderImpl#shouldResolveImmediately","isHostLanguageValid","MockReCaptchaLoaderImpl","MockReCaptchaLoaderImpl#load","MockReCaptchaLoaderImpl#clearedOneInstance","RecaptchaVerifier","RecaptchaVerifier#constructor","RecaptchaVerifier#verify","tokenChange","RecaptchaVerifier#render","makeRenderPromise._catch$argument_0","RecaptchaVerifier#_reset","RecaptchaVerifier#clear","container.childNodes.forEach$argument_0","RecaptchaVerifier#validateStartingState","RecaptchaVerifier#makeTokenCallback","tokenChangeListeners.forEach$argument_0","RecaptchaVerifier#assertNotDestroyed","RecaptchaVerifier#makeRenderPromise","RecaptchaVerifier#init","RecaptchaVerifier#getAssertedRecaptcha","domReady","resolver","Promise._catch$argument_0","ConfirmationResultImpl","ConfirmationResultImpl#constructor","ConfirmationResultImpl#confirm","signInWithPhoneNumber","ConfirmationResultImpl$argument_1","linkWithPhoneNumber","reauthenticateWithPhoneNumber","_verifyPhoneNumber","startEnrollPhoneMfaActionCallback","startPhoneMfaEnrollmentResponse._catch$argument_0","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse._catch$argument_0","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse._catch$argument_0","updatePhoneNumber","injectRecaptchaV2Token","PhoneAuthProvider","PhoneAuthProvider#constructor","PhoneAuthProvider#verifyPhoneNumber","PhoneAuthProvider.credential","PhoneAuthProvider.credentialFromResult","PhoneAuthProvider.credentialFromError","PhoneAuthProvider.credentialFromTaggedObject","_withDefaultResolver","IdpCredential","IdpCredential#constructor","IdpCredential#_getIdTokenResponse","IdpCredential#_linkToIdToken","IdpCredential#_getReauthenticationResolver","IdpCredential#_buildIdpRequest","_signIn","_reauth","_link","AbstractPopupRedirectOperation","AbstractPopupRedirectOperation#constructor","AbstractPopupRedirectOperation#execute","AbstractPopupRedirectOperation#onAuthEvent","AbstractPopupRedirectOperation#onError","AbstractPopupRedirectOperation#getIdpTask","AbstractPopupRedirectOperation#resolve","AbstractPopupRedirectOperation#reject","AbstractPopupRedirectOperation#unregisterAndCleanUp","signInWithPopup","reauthenticateWithPopup","linkWithPopup","PopupOperation","PopupOperation#constructor","PopupOperation#executeNotNull","PopupOperation#onExecution","resolver._originValidation._catch$argument_0","resolver._isIframeWebStorageSupported$argument_1","PopupOperation#get__eventId","PopupOperation#cancel","PopupOperation#cleanUp","PopupOperation#pollUserCancellation","poll","RedirectAction","RedirectAction#constructor","RedirectAction#execute","readyOutcome","redirectOutcomeMap.set$argument_1","RedirectAction#onAuthEvent","RedirectAction#onExecution","RedirectAction#cleanUp","_getAndClearPendingRedirectStatus","_setPendingRedirectStatus","_clearRedirectOutcomes","_overrideRedirectResult","resolverPersistence","pendingRedirectKey","signInWithRedirect","_signInWithRedirect","reauthenticateWithRedirect","_reauthenticateWithRedirect","linkWithRedirect","_linkWithRedirect","getRedirectResult","_getRedirectResult","prepareUserForRedirect","AuthEventManager","AuthEventManager#constructor","AuthEventManager#registerConsumer","AuthEventManager#unregisterConsumer","AuthEventManager#onEvent","consumers.forEach$argument_0","AuthEventManager#sendToConsumer","AuthEventManager#isEventForConsumer","AuthEventManager#hasEventBeenHandled","AuthEventManager#saveEventToCache","eventUid","isNullRedirectEvent","isRedirectEvent","_getProjectConfig","_validateOrigin","matchDomain","resetUnloadedGapiModules","loadGapi","loadGapiIframe","gapi.load$argument_1.callback","gapi.load$argument_1.ontimeout","_window.cbName","_loadGapi","getIframeUrl","_openIframe","context.open$argument_1","clearTimerAndResolve","iframe.ping.then$argument_1","AuthPopup","AuthPopup#constructor","AuthPopup#close","_open","Object.entries.reduce$argument_0","openAsNewWindowIOS","_getRedirectUrl","provider.getScopes.filter$argument_0","getHandlerBase","BrowserPopupRedirectResolver","BrowserPopupRedirectResolver#constructor","BrowserPopupRedirectResolver#_openPopup","BrowserPopupRedirectResolver#_openRedirect","BrowserPopupRedirectResolver#_initialize","promise._catch$argument_0","BrowserPopupRedirectResolver#initAndGetManager","iframe.register$argument_1","BrowserPopupRedirectResolver#_isIframeWebStorageSupported","iframe.send$argument_2","BrowserPopupRedirectResolver#_originValidation","BrowserPopupRedirectResolver#get___shouldInitProactively","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","PhoneMultiFactorAssertionImpl","PhoneMultiFactorAssertionImpl#constructor","PhoneMultiFactorAssertionImpl._fromCredential","PhoneMultiFactorAssertionImpl#_finalizeEnroll","PhoneMultiFactorAssertionImpl#_finalizeSignIn","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator#constructor","PhoneMultiFactorGenerator.assertion","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","Component$argument_1","Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","mintCookieFactory","getAuth","beforeAuthStateChanged$argument_2","onIdTokenChanged$argument_1","getScriptParentElement","_setExternalJSProvider$argument_0.loadJS","el.onerror"],"mappings":"AAA;ACwH;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTS;AUC;CVU;AWC;CXI;AYO;CZS;AaQ;CbI;AckB;CdE;AeC;CfE;AgBC;ChBE;AiBqB;CjBe;AkBC;ClBa;AmBuB;ICC;KDM;IEC;KFU;CnBC;AsBkB;CtBO;AuBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CvBC;A4ByH;C5BQ;A6BC;gECC;KDsC;C7BC;A+BC;C/BoD;AgCC;ChCQ;AiCC;CjCmB;AkCC;ClCW;AmCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;CnCC;AwCC;CxCc;AyCkB;CzCG;A0CC;C1CG;A2CC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;C3CC;AgDkB;ChDE;AiDC;CjDE;AkDkB;ClDE;AmDC;CnDE;AoDC;CpDE;AqDkB;CrDiB;AsD8B;CtDE;AuDa;CvDgB;AwDC;CxDE;AyDC;CzDoB;A0DI;C1DM;A2DkB;C3De;A4DC;C5DG;A6DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kC3BM;S2BE;KLC;IMC;KNa;C7DC;AoEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CpEC;AyEkB;CzEgC;A0EQ;C1EQ;A2EC;oCCC,mBC,kCD,CD;C3EE;A8EC;yBCC;KDS;C9EC;AgFkB;oElDC;KkDmB;ChFO;AiFC;CjFE;AkFwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;ClFC;AgGkB;ChGE;AiGC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;CjGC;AqHmB;CrHU;AsHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CtHC;A8HyB;C9HE;A+HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C/HC;A4IqB;C5IiD;A6IC;C7IE;A8IC;C9IM;A+IC;C/IE;AgJC;ChJE;AiJC;CjJE;AkJC;ClJE;AmJC;CnJE;AoJC;CpJG;AqJC;CrJG;AsJC;CtJE;AuJC;CvJE;AwJC;CxJQ;AyJqB;CzJoB;A0JkB;ICC;KDG;IEC;gCCG,sBvH;SuHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;C1JC;AiKyB;CjKE;AkKyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;ClKC;AwKkB;ICC;wDnIuC,+DmI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCxIM;+BCC,2ED;iBwIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2B5JC;4D6JK;iB7JG;S4JE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CxKC;AyNO;CzNE;A0NE;ICC;2CCG,sCD;KDC;IGC;KHG;C1NC;I8NmB;K9NE;A+NK;C/NE;AgOC;ChOE;AiOC;CjOE;AkOC;ClOE;AmOC;CnOE;AoOC;CpOE;AqOqB;ICC;KDI;IEC;KFK;IGC;KHI;IIC;KJG;IKC;KLI;CrOC;A2OC;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C3OC;AgPC;ICC;KDE;IEC;KFI;IGC;KHI;ChPC;AoPC;ICC;4BCK;SDE;KDa;IGC;KHG;IIC;KJQ;IKC;yCCK;SDsB;KLC;IOC;KPI;CpPC;A4PC;C5PO;A6PK;ICM;KDM;IEM;QCC;+B1NU;0B2NK;iB3Nc;2B4NC;iB5NE;a0NC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BzNM;sBiOE;8BCc;qBDE;+BEC;qBFE;ajOE;uBoOC;apOE;SyNC;KFC;C7PC;A2QC;C3QsD;A4QC;6DCS;aDS;0ECQ;aDoB;C5Qc;A8QC;C9QiB;A+Q2C;C/Qc;AgRC;ChRU;AiRwB;CjRuC;AkRC;ClRG;AmRC;CnRgB;AoRC;CpRS;AqRC;ICC;KDiB;CrRc;AuR0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;CvRC;A6RkB;C7RE;A8RC;C9RE;A+RG;C/RE;AgSC;ChSE;AiSkB;CjSE;AkSC;ClSE;AmSC;CnSE;AoSC;CpSE;AqSC;CrSE;AsSC;CtSE;AuSkB;CvSE;AwSC;CxSE;AyS4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;CzSC;AkTkB;ClTE;AmT2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;CnTC;A4TkB;C5TE;A6TC;C7TE;A8TC;C9TM;A+TI;C/TM;AgUuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;ChUC;A0UuB;C1UiB;A2UM;C3UY;A4UO;ICO;KDa;IEU;KFQ;C5UC;A+UO;C/UE;AgVuB;ICC;KDK;IEmB;KFE;IGuB;KHI;ChVC;AoVqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;CpVC;AyVwB;ICC;KDI;IEM;KFM;IGI;KHE;CzVC;A6VyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;C7VC;AoWyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CpWC;A0W+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;C1WC;AgXgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;ChXC;AsX0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;CtXC;A+XwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;C/XC;AqYyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;CrYC;A2YsB;C3YE;A4YkB;ICC;KDK;IEC;KFU;IGC;KHS;C5YC;AgZC;ChZQ;AiZgC;CjZoB;AkZkB;ICC;KDY;IEC;KFE;ClZC;AqZC;iCCI;KDK;CrZC;AuZqB;avSE,8BuS;gBCC,YD;CvZC;AyZ0B;iECQ,sCD;CzZM;A2ZC;C3ZG;A4ZC;C5ZO;A6ZkB;C7ZsB;A8ZkB;C9ZW;A+Ze;C/ZE;AgaY;ChaI;AiaiB;CjaE;AkakB;ClaE;AmaqC;CnaY;AoakB;ICC;KDK;IEC;KFQ;CpaC;AuaC;ICC;KDG;IEC;KFE;CvaC;A0aC;ICC;KDE;IEC;KFE;C1aC;A6akB;C7aqB;A8a+B;C9aK;A+aoC;C/aW;AgbU;eCK;KDM;ChbE;AkbS;ClbE;AmbW;CnbwC;AobW;CpbI;AqbqB;gDCY;KDK;CrbI;AubwB;+GCI;KDK;CvbC;AybwD;ICO;KDK;CzbG;A2bS;C3bG;A4b0C;C5bU;A6bkB;C7bE;A8bsC;C9bW;A+b+B;C/bc;AgcmC;ChciB;AickB;CjcE;Akc0B;4DCgB,6CD;ClcM;AocyB;CpcM;Aqcc;CrcE;AscC;Ctce;AucsB;CvcuC;AwcC;ICC;KDI;CxcC;A0cC;ICC;KDG;C1cC;A4cC;ICC;KDE;C5cC;A8cC;ICC;KDE;C9cC;AgdC;ICC;KDE;ChdC;AkdC;ICC;KDE;CldC;AodQ;CpdY;Aqd2C;CrdE;Asd4B;CtdE;AudwB;CvdG;AwdiB;CxdE;AydW;CzdE;A0dgB;C1dE;A2dQ;C3dE;A4dsB;C5dE;A6dY;C7dE;A8dS;C9dG;A+da;C/dE;AgekB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CheC;AsekB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;CteC;A4eW;C5eM;A6ekB;C7eE;A8eC;C9eE;A+eC;C/eE;AgfC;ChfE;AifC;CjfE;AkfE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;ClfC;A2fY;C3fM;A4fuB;ICC;KDG;IEC;KFY;IGC;KHG;IIC;KJG;IKC;KLG;IMC;KNE;C5fC;AmgBsB;ICC;ctWC,yBsW;iCCC,iDD;KDS;IGC;KHY;IIC;mCCG;aDE;iCEgB;SFU;KJc;IOC;KPQ;IQC;qCCE;mCJC;aIO;SDC;KRC;IUC;KVK;IWC;KXE;IYC;KZE;IaC;KbmB;IcC;KdW;IeE;KfG;IgBC;KhBI;IiBC;KjBG;CngBC;AqhB4B;CrhBI;AshBE;CthBM;AuhBC;ICC;KDG;IEE;KFO;IGI;KHQ;IIE;KJE;IKE;KLU;IME;gECa,eD;KNC;IQE;wBCM;yDCC,8BD;yDEI,8BF;aDI;gCIC,0DJ;qCnBK;SmBM;4BIC,6BJ;KRE;IaC;KbO;CvhBC;AqiB6B;ICC;cxYC,2BwY;KDC;IEC;KFG;IGC;KHG;CriBC;AyiB+B;oCCC;KDc;CziBC;A2iBsB;ICC;KDI;IEO;qDCI,+CD;KFO;IIC;KJE;IKW;kDCY,qDD;KLQ;IOQ;KPQ;IQQ;KRU;C3iBC;AojBmB;CpjBM;AqjBsB;ICC;KDG;IEM;KFM;IGc;2BlhBW;wCCG;aDE;gBmhBG;yDlhBS;6BkhBE;iBnhBa;SkhBS,UE;SFI;KHC;CrjBC;A2jBsB;C3jBE;A4jBC;C5jBE;A6jBkB;C7jBG;A8jBC;C9jBW;A+jBC;C/jBE;AgkBC;ChkBE;AikB4B;ICC;KDE;IEC;2B7hBC;qD8hBC;a9hBE;mD8hBC;a9hBE;S6hBC;KFC;CjkBC;AqkBC;CrkBI;AskBC;CtkBG;AukBC;uBjiBE;0C8hBC;S9hBE;kD8hBC;S9hBQ;4C8hBC;S9hBe;KiiBC;CvkBC;AwkBC;CxkBM;AykBC;CzkBI;A0kBC;C1kBG;A2kBG;ICC;yDCe,SD,EE,SF;KDC;IIC;KJM;IKC;KLkB;IMK;KNE;IOI;4ECG;SDK;+DCE;SDE;KPC;ISQ;KTgB;IUU;KVgB;IWC;KXY;IYC;KZQ;IaC;sCCC;oCCC,kCD;SDG;KbC;IgBC;6CDC,0BC;KhBG;IiBC;sCHC;oCCC,8BD;SGG;KjBC;IkBC;+CHE;SGG;KlB2B;ImBC;KnBQ;IoBC;qCnFE,wBmF;KpBC;IqBC;KrBK;IsBC;KtBU;IuBC;KvBU;C3kBC;AmmB0B;CnmBE;AomBC;CpmBE;AqmBC;CrmBE;AsmByB;ICC;KDS;IEC;2BlkBK;wDmkBC;ankBE;0CokBC;mCCW;iBDI;apkBG;+BskBM;atkBG;SkkBC;KFC;IOC;KPE;IQC;KRY;CtmBC;A+mBC;C/mBE;AgnBC;ICC;KDE;IEC,wBF;ChnBC;AmnB+B;ICoB;KD8B;IEM;2B/kBQ;gCglBC;ahlBM;S+kBK;KFC;IIM;4DCa;SDG;KJE;IME;KNK;IOI;8CCK;aDE;KPE;ISC;KTI;IUC;e/dC;8CgeC,2Bhe;S+dU;KVC;IYC;KZE;IaC;KbY;IcC;KdO;IeC;KfG;CnnBC;AmoBC;uB7lBE;mB8lBQ,e9lB;K6lBE,QE;KFK;CnoBC;AsoBkB;ICC;KDG;IEC;KFG;CtoBC;AyoBqC;sDCM,gDD;CzoBC;A2oBa;sDDI,8CC;C3oBC;A4oBgB;sDFM,wDE;C5oBC;A6oBK;0DCkC;iBDQ;6EEE;iBFE;0DGe;iBHQ;yEIE;iBJE;4DKS;aLQ;2EME;aNE;C7oBO;AopBwB;CppBM;AqpBE;CrpByC;AspBqC;ICK;KDI;IEkC;KFE;IG4B;KHE;IIK;KJG;IKiC;KLE;IMC;KNS;CtpBC;A6pB2B;C7pBM;A8pBkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJE;IKC;KLc;C9pBC;AoqBC;CpqBE;AqqBC;CrqBI;AsqBC;CtqBI;AuqBsB;ICC;KDQ;IEC;2BnoBC;SmoBU;KFC;IGC;KHqB;IIC;KJE;IKC;KLc;IMC;KNI;IOC;KPI;IQC;KRM;CvqBC;AgrBkD;ChrBS;AirB6B;CjrBS;AkrB0B;ClrBM;AmrBM;ICC;KDS;IEC;KFI;IGC;yDCa;SDE;8DEC;SFI;KHG;IMC;KNE;IOC;KPE;IQC;KRU;ISC;qBCC;gDncO;iBmcG;SDI;KTE;CnrBC;A8rByB;ICC;KDQ;IEK;+BCM,6BD;+BCG,uBD;qDEO,2BF;KFG;IKC;KLmB;IMC,uBN;IOC,aP;C9rBC;AssBC;CtsBS;AusBC;CvsBE;AwsBC;CxsBE;AysBC;CzsBE;A0sBC;C1sBE;A2sBC;C3sBE;A4sB8D;C5sBE;A6sBC;C7sBa;A8sBoC;C9sBE;A+sBC;C/sBe;AgtBgC;ChtBE;AitBC;CjtBa;AktB0C;CltBG;AmtBC;CntBc;AotBC;CptBM;AqtBqB;ICC;KDO;IEC;KFQ;IGC;KHE;IIC;+BCM;SDM;KJa;IMC;KNS;IOC;KPI;IQC;KRM;ISC;KTG;CrtBC;A+tBC;+DrlBC,MqlB;C/tBC;AguBC;ChuBG;AiuBC;CjuBW;AkuBkB;CluBE;AmuBoB;CnuBkB;AouBC;CpuB2B;AquBuB;CruBwB;AsuBC;uBhsBC;QisBE;0BCK;iBDE;2BEC;iBFS;SjsBG;gCosBiB;apsBS;uBskBG,ctkB;KgsBE,QjG;KiGI;CtuBC;A2uBE;C3uBG;A4uBsC;C5uBoB;A6uBC;OCU,wBxsB;uDmkBQ;SnkBE;QysBE;SzsBG;qE0sBG;S1sBE;KwsBC,CD;C7uBC;AivB4B;ICC;KDG;IEC;KFO;CjvBC;AovBC;yDCwB,mDD;CpvBe;AsvBC;CtvBO;AuvBoC;mDCuB,qBD;CvvBuB;AyvBC;CzvBK;A0vBuB;ICC;KDO;IEG;KFI;IGC;2BvtBI,SutB;KHC;IIC;sBCgB;SDE;KJE;IMC;qCCG;SDK;KNI;IQC;gFCE;SDM;KRC;IUC;KVM;IWC;KXG;C1vBC;AswBY;ICC;KDE;IEC;KFS;CtwBC;AywBO;ICC;KDG;IEE;KFE;IGE;KHM;IIE;KJK;CzwBC;A8wBM;ICC,iBD;IEW;KFE;C9wBC;AixBW;ICW;KDE;IEU;KFE;IGU;KHQ;CjxBC;AqxBK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;CrxBC;A2xBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;C3xBC;AgyBE;ChyBE;AiyBqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;CjyBC;A0yBkB;C1yBe;A2yBE;uECC;KDkB;oCEU;KFG;yFCC;gB9oBE,6B8oB;KDC;C3yBI;0B8yBqB,ShpB;C9JqB;A+yBS;qDCsB,kCD;mCEC,wBF;C/yBQ;AkzBC;ClzBE;ImzBE;2B7wBE;yB8wBI;a9wBI;S6wBI;KnzBC"}},"type":"js/module"}]}