{"dependencies":[{"name":"zlib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":13,"index":761},"end":{"line":20,"column":28,"index":776}}],"key":"7ZGzBJgs2mS8aYt35oOcBHDVVuM=","exportNames":["*"]}},{"name":"./compression-algorithms","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":33,"index":811},"end":{"line":21,"column":68,"index":846}}],"key":"oO81fwNv9+G5clBysOSCU+BSPSg=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":20,"index":868},"end":{"line":22,"column":42,"index":890}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./filter","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":17,"index":909},"end":{"line":23,"column":36,"index":928}}],"key":"6OjBbU9voLUG+vlH0XBRs3eQWwY=","exportNames":["*"]}},{"name":"./logging","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":16,"index":946},"end":{"line":24,"column":36,"index":966}}],"key":"IuCQ7u+XFj9mcNQiMAuOpQn/EDM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CompressionFilterFactory = exports.CompressionFilter = void 0;\n  const zlib = require(_dependencyMap[0], \"zlib\");\n  const compression_algorithms_1 = require(_dependencyMap[1], \"./compression-algorithms\");\n  const constants_1 = require(_dependencyMap[2], \"./constants\");\n  const filter_1 = require(_dependencyMap[3], \"./filter\");\n  const logging = require(_dependencyMap[4], \"./logging\");\n  const isCompressionAlgorithmKey = key => {\n    return typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string';\n  };\n  class CompressionHandler {\n    /**\n     * @param message Raw uncompressed message bytes\n     * @param compress Indicates whether the message should be compressed\n     * @return Framed message, compressed if applicable\n     */\n    async writeMessage(message, compress) {\n      let messageBuffer = message;\n      if (compress) {\n        messageBuffer = await this.compressMessage(messageBuffer);\n      }\n      const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n      output.writeUInt8(compress ? 1 : 0, 0);\n      output.writeUInt32BE(messageBuffer.length, 1);\n      messageBuffer.copy(output, 5);\n      return output;\n    }\n    /**\n     * @param data Framed message, possibly compressed\n     * @return Uncompressed message\n     */\n    async readMessage(data) {\n      const compressed = data.readUInt8(0) === 1;\n      let messageBuffer = data.slice(5);\n      if (compressed) {\n        messageBuffer = await this.decompressMessage(messageBuffer);\n      }\n      return messageBuffer;\n    }\n  }\n  class IdentityHandler extends CompressionHandler {\n    async compressMessage(message) {\n      return message;\n    }\n    async writeMessage(message, compress) {\n      const output = Buffer.allocUnsafe(message.length + 5);\n      /* With \"identity\" compression, messages should always be marked as\n       * uncompressed */\n      output.writeUInt8(0, 0);\n      output.writeUInt32BE(message.length, 1);\n      message.copy(output, 5);\n      return output;\n    }\n    decompressMessage(message) {\n      return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n    }\n  }\n  class DeflateHandler extends CompressionHandler {\n    constructor(maxRecvMessageLength) {\n      super();\n      this.maxRecvMessageLength = maxRecvMessageLength;\n    }\n    compressMessage(message) {\n      return new Promise((resolve, reject) => {\n        zlib.deflate(message, (err, output) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(output);\n          }\n        });\n      });\n    }\n    decompressMessage(message) {\n      return new Promise((resolve, reject) => {\n        let totalLength = 0;\n        const messageParts = [];\n        const decompresser = zlib.createInflate();\n        decompresser.on('data', chunk => {\n          messageParts.push(chunk);\n          totalLength += chunk.byteLength;\n          if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n            decompresser.destroy();\n            reject({\n              code: constants_1.Status.RESOURCE_EXHAUSTED,\n              details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n            });\n          }\n        });\n        decompresser.on('end', () => {\n          resolve(Buffer.concat(messageParts));\n        });\n        decompresser.write(message);\n        decompresser.end();\n      });\n    }\n  }\n  class GzipHandler extends CompressionHandler {\n    constructor(maxRecvMessageLength) {\n      super();\n      this.maxRecvMessageLength = maxRecvMessageLength;\n    }\n    compressMessage(message) {\n      return new Promise((resolve, reject) => {\n        zlib.gzip(message, (err, output) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(output);\n          }\n        });\n      });\n    }\n    decompressMessage(message) {\n      return new Promise((resolve, reject) => {\n        let totalLength = 0;\n        const messageParts = [];\n        const decompresser = zlib.createGunzip();\n        decompresser.on('data', chunk => {\n          messageParts.push(chunk);\n          totalLength += chunk.byteLength;\n          if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n            decompresser.destroy();\n            reject({\n              code: constants_1.Status.RESOURCE_EXHAUSTED,\n              details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n            });\n          }\n        });\n        decompresser.on('end', () => {\n          resolve(Buffer.concat(messageParts));\n        });\n        decompresser.write(message);\n        decompresser.end();\n      });\n    }\n  }\n  class UnknownHandler extends CompressionHandler {\n    constructor(compressionName) {\n      super();\n      this.compressionName = compressionName;\n    }\n    compressMessage(message) {\n      return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n    }\n    decompressMessage(message) {\n      // This should be unreachable\n      return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n    }\n  }\n  function getCompressionHandler(compressionName, maxReceiveMessageSize) {\n    switch (compressionName) {\n      case 'identity':\n        return new IdentityHandler();\n      case 'deflate':\n        return new DeflateHandler(maxReceiveMessageSize);\n      case 'gzip':\n        return new GzipHandler(maxReceiveMessageSize);\n      default:\n        return new UnknownHandler(compressionName);\n    }\n  }\n  class CompressionFilter extends filter_1.BaseFilter {\n    constructor(channelOptions, sharedFilterConfig) {\n      var _a, _b;\n      super();\n      this.sharedFilterConfig = sharedFilterConfig;\n      this.sendCompression = new IdentityHandler();\n      this.receiveCompression = new IdentityHandler();\n      this.currentCompressionAlgorithm = 'identity';\n      const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n      this.maxReceiveMessageLength = (_a = channelOptions['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n      if (compressionAlgorithmKey !== undefined) {\n        if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n          const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n          const serverSupportedEncodings = (_b = sharedFilterConfig.serverSupportedEncodingHeader) === null || _b === void 0 ? void 0 : _b.split(',');\n          /**\n           * There are two possible situations here:\n           * 1) We don't have any info yet from the server about what compression it supports\n           *    In that case we should just use what the client tells us to use\n           * 2) We've previously received a response from the server including a grpc-accept-encoding header\n           *    In that case we only want to use the encoding chosen by the client if the server supports it\n           */\n          if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n            this.currentCompressionAlgorithm = clientSelectedEncoding;\n            this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);\n          }\n        } else {\n          logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n        }\n      }\n    }\n    async sendMetadata(metadata) {\n      const headers = await metadata;\n      headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n      headers.set('accept-encoding', 'identity');\n      // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n      if (this.currentCompressionAlgorithm === 'identity') {\n        headers.remove('grpc-encoding');\n      } else {\n        headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n      }\n      return headers;\n    }\n    receiveMetadata(metadata) {\n      const receiveEncoding = metadata.get('grpc-encoding');\n      if (receiveEncoding.length > 0) {\n        const encoding = receiveEncoding[0];\n        if (typeof encoding === 'string') {\n          this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);\n        }\n      }\n      metadata.remove('grpc-encoding');\n      /* Check to see if the compression we're using to send messages is supported by the server\n       * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n      const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\n      if (serverSupportedEncodingsHeader) {\n        this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n        const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n        if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n          this.sendCompression = new IdentityHandler();\n          this.currentCompressionAlgorithm = 'identity';\n        }\n      }\n      metadata.remove('grpc-accept-encoding');\n      return metadata;\n    }\n    async sendMessage(message) {\n      var _a;\n      /* This filter is special. The input message is the bare message bytes,\n       * and the output is a framed and possibly compressed message. For this\n       * reason, this filter should be at the bottom of the filter stack */\n      const resolvedMessage = await message;\n      let compress;\n      if (this.sendCompression instanceof IdentityHandler) {\n        compress = false;\n      } else {\n        compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;\n      }\n      return {\n        message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n        flags: resolvedMessage.flags\n      };\n    }\n    async receiveMessage(message) {\n      /* This filter is also special. The input message is framed and possibly\n       * compressed, and the output message is deframed and uncompressed. So\n       * this is another reason that this filter should be at the bottom of the\n       * filter stack. */\n      return this.receiveCompression.readMessage(await message);\n    }\n  }\n  exports.CompressionFilter = CompressionFilter;\n  class CompressionFilterFactory {\n    constructor(channel, options) {\n      this.options = options;\n      this.sharedFilterConfig = {};\n    }\n    createFilter() {\n      return new CompressionFilter(this.options, this.sharedFilterConfig);\n    }\n  }\n  exports.CompressionFilterFactory = CompressionFilterFactory;\n});","lineCount":285,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"CompressionFilterFactory"],[23,34,19,32],[23,37,19,35,"exports"],[23,44,19,42],[23,45,19,43,"CompressionFilter"],[23,62,19,60],[23,65,19,63],[23,70,19,68],[23,71,19,69],[24,2,20,0],[24,8,20,6,"zlib"],[24,12,20,10],[24,15,20,13,"require"],[24,22,20,20],[24,23,20,20,"_dependencyMap"],[24,37,20,20],[24,48,20,27],[24,49,20,28],[25,2,21,0],[25,8,21,6,"compression_algorithms_1"],[25,32,21,30],[25,35,21,33,"require"],[25,42,21,40],[25,43,21,40,"_dependencyMap"],[25,57,21,40],[25,88,21,67],[25,89,21,68],[26,2,22,0],[26,8,22,6,"constants_1"],[26,19,22,17],[26,22,22,20,"require"],[26,29,22,27],[26,30,22,27,"_dependencyMap"],[26,44,22,27],[26,62,22,41],[26,63,22,42],[27,2,23,0],[27,8,23,6,"filter_1"],[27,16,23,14],[27,19,23,17,"require"],[27,26,23,24],[27,27,23,24,"_dependencyMap"],[27,41,23,24],[27,56,23,35],[27,57,23,36],[28,2,24,0],[28,8,24,6,"logging"],[28,15,24,13],[28,18,24,16,"require"],[28,25,24,23],[28,26,24,23,"_dependencyMap"],[28,40,24,23],[28,56,24,35],[28,57,24,36],[29,2,25,0],[29,8,25,6,"isCompressionAlgorithmKey"],[29,33,25,31],[29,36,25,35,"key"],[29,39,25,38],[29,43,25,43],[30,4,26,4],[30,11,26,12],[30,18,26,19,"key"],[30,21,26,22],[30,26,26,27],[30,34,26,35],[30,38,26,39],[30,45,26,46,"compression_algorithms_1"],[30,69,26,70],[30,70,26,71,"CompressionAlgorithms"],[30,91,26,92],[30,92,26,93,"key"],[30,95,26,96],[30,96,26,97],[30,101,26,102],[30,109,26,110],[31,2,27,0],[31,3,27,1],[32,2,28,0],[32,8,28,6,"CompressionHandler"],[32,26,28,24],[32,27,28,25],[33,4,29,4],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,4,34,4],[38,10,34,10,"writeMessage"],[38,22,34,22,"writeMessage"],[38,23,34,23,"message"],[38,30,34,30],[38,32,34,32,"compress"],[38,40,34,40],[38,42,34,42],[39,6,35,8],[39,10,35,12,"messageBuffer"],[39,23,35,25],[39,26,35,28,"message"],[39,33,35,35],[40,6,36,8],[40,10,36,12,"compress"],[40,18,36,20],[40,20,36,22],[41,8,37,12,"messageBuffer"],[41,21,37,25],[41,24,37,28],[41,30,37,34],[41,34,37,38],[41,35,37,39,"compressMessage"],[41,50,37,54],[41,51,37,55,"messageBuffer"],[41,64,37,68],[41,65,37,69],[42,6,38,8],[43,6,39,8],[43,12,39,14,"output"],[43,18,39,20],[43,21,39,23,"Buffer"],[43,27,39,29],[43,28,39,30,"allocUnsafe"],[43,39,39,41],[43,40,39,42,"messageBuffer"],[43,53,39,55],[43,54,39,56,"length"],[43,60,39,62],[43,63,39,65],[43,64,39,66],[43,65,39,67],[44,6,40,8,"output"],[44,12,40,14],[44,13,40,15,"writeUInt8"],[44,23,40,25],[44,24,40,26,"compress"],[44,32,40,34],[44,35,40,37],[44,36,40,38],[44,39,40,41],[44,40,40,42],[44,42,40,44],[44,43,40,45],[44,44,40,46],[45,6,41,8,"output"],[45,12,41,14],[45,13,41,15,"writeUInt32BE"],[45,26,41,28],[45,27,41,29,"messageBuffer"],[45,40,41,42],[45,41,41,43,"length"],[45,47,41,49],[45,49,41,51],[45,50,41,52],[45,51,41,53],[46,6,42,8,"messageBuffer"],[46,19,42,21],[46,20,42,22,"copy"],[46,24,42,26],[46,25,42,27,"output"],[46,31,42,33],[46,33,42,35],[46,34,42,36],[46,35,42,37],[47,6,43,8],[47,13,43,15,"output"],[47,19,43,21],[48,4,44,4],[49,4,45,4],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,4,49,4],[53,10,49,10,"readMessage"],[53,21,49,21,"readMessage"],[53,22,49,22,"data"],[53,26,49,26],[53,28,49,28],[54,6,50,8],[54,12,50,14,"compressed"],[54,22,50,24],[54,25,50,27,"data"],[54,29,50,31],[54,30,50,32,"readUInt8"],[54,39,50,41],[54,40,50,42],[54,41,50,43],[54,42,50,44],[54,47,50,49],[54,48,50,50],[55,6,51,8],[55,10,51,12,"messageBuffer"],[55,23,51,25],[55,26,51,28,"data"],[55,30,51,32],[55,31,51,33,"slice"],[55,36,51,38],[55,37,51,39],[55,38,51,40],[55,39,51,41],[56,6,52,8],[56,10,52,12,"compressed"],[56,20,52,22],[56,22,52,24],[57,8,53,12,"messageBuffer"],[57,21,53,25],[57,24,53,28],[57,30,53,34],[57,34,53,38],[57,35,53,39,"decompressMessage"],[57,52,53,56],[57,53,53,57,"messageBuffer"],[57,66,53,70],[57,67,53,71],[58,6,54,8],[59,6,55,8],[59,13,55,15,"messageBuffer"],[59,26,55,28],[60,4,56,4],[61,2,57,0],[62,2,58,0],[62,8,58,6,"IdentityHandler"],[62,23,58,21],[62,32,58,30,"CompressionHandler"],[62,50,58,48],[62,51,58,49],[63,4,59,4],[63,10,59,10,"compressMessage"],[63,25,59,25,"compressMessage"],[63,26,59,26,"message"],[63,33,59,33],[63,35,59,35],[64,6,60,8],[64,13,60,15,"message"],[64,20,60,22],[65,4,61,4],[66,4,62,4],[66,10,62,10,"writeMessage"],[66,22,62,22,"writeMessage"],[66,23,62,23,"message"],[66,30,62,30],[66,32,62,32,"compress"],[66,40,62,40],[66,42,62,42],[67,6,63,8],[67,12,63,14,"output"],[67,18,63,20],[67,21,63,23,"Buffer"],[67,27,63,29],[67,28,63,30,"allocUnsafe"],[67,39,63,41],[67,40,63,42,"message"],[67,47,63,49],[67,48,63,50,"length"],[67,54,63,56],[67,57,63,59],[67,58,63,60],[67,59,63,61],[68,6,64,8],[69,0,65,0],[70,6,66,8,"output"],[70,12,66,14],[70,13,66,15,"writeUInt8"],[70,23,66,25],[70,24,66,26],[70,25,66,27],[70,27,66,29],[70,28,66,30],[70,29,66,31],[71,6,67,8,"output"],[71,12,67,14],[71,13,67,15,"writeUInt32BE"],[71,26,67,28],[71,27,67,29,"message"],[71,34,67,36],[71,35,67,37,"length"],[71,41,67,43],[71,43,67,45],[71,44,67,46],[71,45,67,47],[72,6,68,8,"message"],[72,13,68,15],[72,14,68,16,"copy"],[72,18,68,20],[72,19,68,21,"output"],[72,25,68,27],[72,27,68,29],[72,28,68,30],[72,29,68,31],[73,6,69,8],[73,13,69,15,"output"],[73,19,69,21],[74,4,70,4],[75,4,71,4,"decompressMessage"],[75,21,71,21,"decompressMessage"],[75,22,71,22,"message"],[75,29,71,29],[75,31,71,31],[76,6,72,8],[76,13,72,15,"Promise"],[76,20,72,22],[76,21,72,23,"reject"],[76,27,72,29],[76,28,72,30],[76,32,72,34,"Error"],[76,37,72,39],[76,38,72,40],[76,107,72,109],[76,108,72,110],[76,109,72,111],[77,4,73,4],[78,2,74,0],[79,2,75,0],[79,8,75,6,"DeflateHandler"],[79,22,75,20],[79,31,75,29,"CompressionHandler"],[79,49,75,47],[79,50,75,48],[80,4,76,4,"constructor"],[80,15,76,15,"constructor"],[80,16,76,16,"maxRecvMessageLength"],[80,36,76,36],[80,38,76,38],[81,6,77,8],[81,11,77,13],[81,12,77,14],[81,13,77,15],[82,6,78,8],[82,10,78,12],[82,11,78,13,"maxRecvMessageLength"],[82,31,78,33],[82,34,78,36,"maxRecvMessageLength"],[82,54,78,56],[83,4,79,4],[84,4,80,4,"compressMessage"],[84,19,80,19,"compressMessage"],[84,20,80,20,"message"],[84,27,80,27],[84,29,80,29],[85,6,81,8],[85,13,81,15],[85,17,81,19,"Promise"],[85,24,81,26],[85,25,81,27],[85,26,81,28,"resolve"],[85,33,81,35],[85,35,81,37,"reject"],[85,41,81,43],[85,46,81,48],[86,8,82,12,"zlib"],[86,12,82,16],[86,13,82,17,"deflate"],[86,20,82,24],[86,21,82,25,"message"],[86,28,82,32],[86,30,82,34],[86,31,82,35,"err"],[86,34,82,38],[86,36,82,40,"output"],[86,42,82,46],[86,47,82,51],[87,10,83,16],[87,14,83,20,"err"],[87,17,83,23],[87,19,83,25],[88,12,84,20,"reject"],[88,18,84,26],[88,19,84,27,"err"],[88,22,84,30],[88,23,84,31],[89,10,85,16],[89,11,85,17],[89,17,86,21],[90,12,87,20,"resolve"],[90,19,87,27],[90,20,87,28,"output"],[90,26,87,34],[90,27,87,35],[91,10,88,16],[92,8,89,12],[92,9,89,13],[92,10,89,14],[93,6,90,8],[93,7,90,9],[93,8,90,10],[94,4,91,4],[95,4,92,4,"decompressMessage"],[95,21,92,21,"decompressMessage"],[95,22,92,22,"message"],[95,29,92,29],[95,31,92,31],[96,6,93,8],[96,13,93,15],[96,17,93,19,"Promise"],[96,24,93,26],[96,25,93,27],[96,26,93,28,"resolve"],[96,33,93,35],[96,35,93,37,"reject"],[96,41,93,43],[96,46,93,48],[97,8,94,12],[97,12,94,16,"totalLength"],[97,23,94,27],[97,26,94,30],[97,27,94,31],[98,8,95,12],[98,14,95,18,"messageParts"],[98,26,95,30],[98,29,95,33],[98,31,95,35],[99,8,96,12],[99,14,96,18,"decompresser"],[99,26,96,30],[99,29,96,33,"zlib"],[99,33,96,37],[99,34,96,38,"createInflate"],[99,47,96,51],[99,48,96,52],[99,49,96,53],[100,8,97,12,"decompresser"],[100,20,97,24],[100,21,97,25,"on"],[100,23,97,27],[100,24,97,28],[100,30,97,34],[100,32,97,37,"chunk"],[100,37,97,42],[100,41,97,47],[101,10,98,16,"messageParts"],[101,22,98,28],[101,23,98,29,"push"],[101,27,98,33],[101,28,98,34,"chunk"],[101,33,98,39],[101,34,98,40],[102,10,99,16,"totalLength"],[102,21,99,27],[102,25,99,31,"chunk"],[102,30,99,36],[102,31,99,37,"byteLength"],[102,41,99,47],[103,10,100,16],[103,14,100,20],[103,18,100,24],[103,19,100,25,"maxRecvMessageLength"],[103,39,100,45],[103,44,100,50],[103,45,100,51],[103,46,100,52],[103,50,100,56,"totalLength"],[103,61,100,67],[103,64,100,70],[103,68,100,74],[103,69,100,75,"maxRecvMessageLength"],[103,89,100,95],[103,91,100,97],[104,12,101,20,"decompresser"],[104,24,101,32],[104,25,101,33,"destroy"],[104,32,101,40],[104,33,101,41],[104,34,101,42],[105,12,102,20,"reject"],[105,18,102,26],[105,19,102,27],[106,14,103,24,"code"],[106,18,103,28],[106,20,103,30,"constants_1"],[106,31,103,41],[106,32,103,42,"Status"],[106,38,103,48],[106,39,103,49,"RESOURCE_EXHAUSTED"],[106,57,103,67],[107,14,104,24,"details"],[107,21,104,31],[107,23,104,33],[107,83,104,93],[107,87,104,97],[107,88,104,98,"maxRecvMessageLength"],[107,108,104,118],[108,12,105,20],[108,13,105,21],[108,14,105,22],[109,10,106,16],[110,8,107,12],[110,9,107,13],[110,10,107,14],[111,8,108,12,"decompresser"],[111,20,108,24],[111,21,108,25,"on"],[111,23,108,27],[111,24,108,28],[111,29,108,33],[111,31,108,35],[111,37,108,41],[112,10,109,16,"resolve"],[112,17,109,23],[112,18,109,24,"Buffer"],[112,24,109,30],[112,25,109,31,"concat"],[112,31,109,37],[112,32,109,38,"messageParts"],[112,44,109,50],[112,45,109,51],[112,46,109,52],[113,8,110,12],[113,9,110,13],[113,10,110,14],[114,8,111,12,"decompresser"],[114,20,111,24],[114,21,111,25,"write"],[114,26,111,30],[114,27,111,31,"message"],[114,34,111,38],[114,35,111,39],[115,8,112,12,"decompresser"],[115,20,112,24],[115,21,112,25,"end"],[115,24,112,28],[115,25,112,29],[115,26,112,30],[116,6,113,8],[116,7,113,9],[116,8,113,10],[117,4,114,4],[118,2,115,0],[119,2,116,0],[119,8,116,6,"GzipHandler"],[119,19,116,17],[119,28,116,26,"CompressionHandler"],[119,46,116,44],[119,47,116,45],[120,4,117,4,"constructor"],[120,15,117,15,"constructor"],[120,16,117,16,"maxRecvMessageLength"],[120,36,117,36],[120,38,117,38],[121,6,118,8],[121,11,118,13],[121,12,118,14],[121,13,118,15],[122,6,119,8],[122,10,119,12],[122,11,119,13,"maxRecvMessageLength"],[122,31,119,33],[122,34,119,36,"maxRecvMessageLength"],[122,54,119,56],[123,4,120,4],[124,4,121,4,"compressMessage"],[124,19,121,19,"compressMessage"],[124,20,121,20,"message"],[124,27,121,27],[124,29,121,29],[125,6,122,8],[125,13,122,15],[125,17,122,19,"Promise"],[125,24,122,26],[125,25,122,27],[125,26,122,28,"resolve"],[125,33,122,35],[125,35,122,37,"reject"],[125,41,122,43],[125,46,122,48],[126,8,123,12,"zlib"],[126,12,123,16],[126,13,123,17,"gzip"],[126,17,123,21],[126,18,123,22,"message"],[126,25,123,29],[126,27,123,31],[126,28,123,32,"err"],[126,31,123,35],[126,33,123,37,"output"],[126,39,123,43],[126,44,123,48],[127,10,124,16],[127,14,124,20,"err"],[127,17,124,23],[127,19,124,25],[128,12,125,20,"reject"],[128,18,125,26],[128,19,125,27,"err"],[128,22,125,30],[128,23,125,31],[129,10,126,16],[129,11,126,17],[129,17,127,21],[130,12,128,20,"resolve"],[130,19,128,27],[130,20,128,28,"output"],[130,26,128,34],[130,27,128,35],[131,10,129,16],[132,8,130,12],[132,9,130,13],[132,10,130,14],[133,6,131,8],[133,7,131,9],[133,8,131,10],[134,4,132,4],[135,4,133,4,"decompressMessage"],[135,21,133,21,"decompressMessage"],[135,22,133,22,"message"],[135,29,133,29],[135,31,133,31],[136,6,134,8],[136,13,134,15],[136,17,134,19,"Promise"],[136,24,134,26],[136,25,134,27],[136,26,134,28,"resolve"],[136,33,134,35],[136,35,134,37,"reject"],[136,41,134,43],[136,46,134,48],[137,8,135,12],[137,12,135,16,"totalLength"],[137,23,135,27],[137,26,135,30],[137,27,135,31],[138,8,136,12],[138,14,136,18,"messageParts"],[138,26,136,30],[138,29,136,33],[138,31,136,35],[139,8,137,12],[139,14,137,18,"decompresser"],[139,26,137,30],[139,29,137,33,"zlib"],[139,33,137,37],[139,34,137,38,"createGunzip"],[139,46,137,50],[139,47,137,51],[139,48,137,52],[140,8,138,12,"decompresser"],[140,20,138,24],[140,21,138,25,"on"],[140,23,138,27],[140,24,138,28],[140,30,138,34],[140,32,138,37,"chunk"],[140,37,138,42],[140,41,138,47],[141,10,139,16,"messageParts"],[141,22,139,28],[141,23,139,29,"push"],[141,27,139,33],[141,28,139,34,"chunk"],[141,33,139,39],[141,34,139,40],[142,10,140,16,"totalLength"],[142,21,140,27],[142,25,140,31,"chunk"],[142,30,140,36],[142,31,140,37,"byteLength"],[142,41,140,47],[143,10,141,16],[143,14,141,20],[143,18,141,24],[143,19,141,25,"maxRecvMessageLength"],[143,39,141,45],[143,44,141,50],[143,45,141,51],[143,46,141,52],[143,50,141,56,"totalLength"],[143,61,141,67],[143,64,141,70],[143,68,141,74],[143,69,141,75,"maxRecvMessageLength"],[143,89,141,95],[143,91,141,97],[144,12,142,20,"decompresser"],[144,24,142,32],[144,25,142,33,"destroy"],[144,32,142,40],[144,33,142,41],[144,34,142,42],[145,12,143,20,"reject"],[145,18,143,26],[145,19,143,27],[146,14,144,24,"code"],[146,18,144,28],[146,20,144,30,"constants_1"],[146,31,144,41],[146,32,144,42,"Status"],[146,38,144,48],[146,39,144,49,"RESOURCE_EXHAUSTED"],[146,57,144,67],[147,14,145,24,"details"],[147,21,145,31],[147,23,145,33],[147,83,145,93],[147,87,145,97],[147,88,145,98,"maxRecvMessageLength"],[147,108,145,118],[148,12,146,20],[148,13,146,21],[148,14,146,22],[149,10,147,16],[150,8,148,12],[150,9,148,13],[150,10,148,14],[151,8,149,12,"decompresser"],[151,20,149,24],[151,21,149,25,"on"],[151,23,149,27],[151,24,149,28],[151,29,149,33],[151,31,149,35],[151,37,149,41],[152,10,150,16,"resolve"],[152,17,150,23],[152,18,150,24,"Buffer"],[152,24,150,30],[152,25,150,31,"concat"],[152,31,150,37],[152,32,150,38,"messageParts"],[152,44,150,50],[152,45,150,51],[152,46,150,52],[153,8,151,12],[153,9,151,13],[153,10,151,14],[154,8,152,12,"decompresser"],[154,20,152,24],[154,21,152,25,"write"],[154,26,152,30],[154,27,152,31,"message"],[154,34,152,38],[154,35,152,39],[155,8,153,12,"decompresser"],[155,20,153,24],[155,21,153,25,"end"],[155,24,153,28],[155,25,153,29],[155,26,153,30],[156,6,154,8],[156,7,154,9],[156,8,154,10],[157,4,155,4],[158,2,156,0],[159,2,157,0],[159,8,157,6,"UnknownHandler"],[159,22,157,20],[159,31,157,29,"CompressionHandler"],[159,49,157,47],[159,50,157,48],[160,4,158,4,"constructor"],[160,15,158,15,"constructor"],[160,16,158,16,"compressionName"],[160,31,158,31],[160,33,158,33],[161,6,159,8],[161,11,159,13],[161,12,159,14],[161,13,159,15],[162,6,160,8],[162,10,160,12],[162,11,160,13,"compressionName"],[162,26,160,28],[162,29,160,31,"compressionName"],[162,44,160,46],[163,4,161,4],[164,4,162,4,"compressMessage"],[164,19,162,19,"compressMessage"],[164,20,162,20,"message"],[164,27,162,27],[164,29,162,29],[165,6,163,8],[165,13,163,15,"Promise"],[165,20,163,22],[165,21,163,23,"reject"],[165,27,163,29],[165,28,163,30],[165,32,163,34,"Error"],[165,37,163,39],[165,38,163,40],[165,105,163,107],[165,109,163,111],[165,110,163,112,"compressionName"],[165,125,163,127],[165,127,163,129],[165,128,163,130],[165,129,163,131],[166,4,164,4],[167,4,165,4,"decompressMessage"],[167,21,165,21,"decompressMessage"],[167,22,165,22,"message"],[167,29,165,29],[167,31,165,31],[168,6,166,8],[169,6,167,8],[169,13,167,15,"Promise"],[169,20,167,22],[169,21,167,23,"reject"],[169,27,167,29],[169,28,167,30],[169,32,167,34,"Error"],[169,37,167,39],[169,38,167,40],[169,75,167,77],[169,79,167,81],[169,80,167,82,"compressionName"],[169,95,167,97],[169,97,167,99],[169,98,167,100],[169,99,167,101],[170,4,168,4],[171,2,169,0],[172,2,170,0],[172,11,170,9,"getCompressionHandler"],[172,32,170,30,"getCompressionHandler"],[172,33,170,31,"compressionName"],[172,48,170,46],[172,50,170,48,"maxReceiveMessageSize"],[172,71,170,69],[172,73,170,71],[173,4,171,4],[173,12,171,12,"compressionName"],[173,27,171,27],[174,6,172,8],[174,11,172,13],[174,21,172,23],[175,8,173,12],[175,15,173,19],[175,19,173,23,"IdentityHandler"],[175,34,173,38],[175,35,173,39],[175,36,173,40],[176,6,174,8],[176,11,174,13],[176,20,174,22],[177,8,175,12],[177,15,175,19],[177,19,175,23,"DeflateHandler"],[177,33,175,37],[177,34,175,38,"maxReceiveMessageSize"],[177,55,175,59],[177,56,175,60],[178,6,176,8],[178,11,176,13],[178,17,176,19],[179,8,177,12],[179,15,177,19],[179,19,177,23,"GzipHandler"],[179,30,177,34],[179,31,177,35,"maxReceiveMessageSize"],[179,52,177,56],[179,53,177,57],[180,6,178,8],[181,8,179,12],[181,15,179,19],[181,19,179,23,"UnknownHandler"],[181,33,179,37],[181,34,179,38,"compressionName"],[181,49,179,53],[181,50,179,54],[182,4,180,4],[183,2,181,0],[184,2,182,0],[184,8,182,6,"CompressionFilter"],[184,25,182,23],[184,34,182,32,"filter_1"],[184,42,182,40],[184,43,182,41,"BaseFilter"],[184,53,182,51],[184,54,182,52],[185,4,183,4,"constructor"],[185,15,183,15,"constructor"],[185,16,183,16,"channelOptions"],[185,30,183,30],[185,32,183,32,"sharedFilterConfig"],[185,50,183,50],[185,52,183,52],[186,6,184,8],[186,10,184,12,"_a"],[186,12,184,14],[186,14,184,16,"_b"],[186,16,184,18],[187,6,185,8],[187,11,185,13],[187,12,185,14],[187,13,185,15],[188,6,186,8],[188,10,186,12],[188,11,186,13,"sharedFilterConfig"],[188,29,186,31],[188,32,186,34,"sharedFilterConfig"],[188,50,186,52],[189,6,187,8],[189,10,187,12],[189,11,187,13,"sendCompression"],[189,26,187,28],[189,29,187,31],[189,33,187,35,"IdentityHandler"],[189,48,187,50],[189,49,187,51],[189,50,187,52],[190,6,188,8],[190,10,188,12],[190,11,188,13,"receiveCompression"],[190,29,188,31],[190,32,188,34],[190,36,188,38,"IdentityHandler"],[190,51,188,53],[190,52,188,54],[190,53,188,55],[191,6,189,8],[191,10,189,12],[191,11,189,13,"currentCompressionAlgorithm"],[191,38,189,40],[191,41,189,43],[191,51,189,53],[192,6,190,8],[192,12,190,14,"compressionAlgorithmKey"],[192,35,190,37],[192,38,190,40,"channelOptions"],[192,52,190,54],[192,53,190,55],[192,89,190,91],[192,90,190,92],[193,6,191,8],[193,10,191,12],[193,11,191,13,"maxReceiveMessageLength"],[193,34,191,36],[193,37,191,39],[193,38,191,40,"_a"],[193,40,191,42],[193,43,191,45,"channelOptions"],[193,57,191,59],[193,58,191,60],[193,91,191,93],[193,92,191,94],[193,98,191,100],[193,102,191,104],[193,106,191,108,"_a"],[193,108,191,110],[193,113,191,115],[193,118,191,120],[193,119,191,121],[193,122,191,124,"_a"],[193,124,191,126],[193,127,191,129,"constants_1"],[193,138,191,140],[193,139,191,141,"DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH"],[193,173,191,175],[194,6,192,8],[194,10,192,12,"compressionAlgorithmKey"],[194,33,192,35],[194,38,192,40,"undefined"],[194,47,192,49],[194,49,192,51],[195,8,193,12],[195,12,193,16,"isCompressionAlgorithmKey"],[195,37,193,41],[195,38,193,42,"compressionAlgorithmKey"],[195,61,193,65],[195,62,193,66],[195,64,193,68],[196,10,194,16],[196,16,194,22,"clientSelectedEncoding"],[196,38,194,44],[196,41,194,47,"compression_algorithms_1"],[196,65,194,71],[196,66,194,72,"CompressionAlgorithms"],[196,87,194,93],[196,88,194,94,"compressionAlgorithmKey"],[196,111,194,117],[196,112,194,118],[197,10,195,16],[197,16,195,22,"serverSupportedEncodings"],[197,40,195,46],[197,43,195,49],[197,44,195,50,"_b"],[197,46,195,52],[197,49,195,55,"sharedFilterConfig"],[197,67,195,73],[197,68,195,74,"serverSupportedEncodingHeader"],[197,97,195,103],[197,103,195,109],[197,107,195,113],[197,111,195,117,"_b"],[197,113,195,119],[197,118,195,124],[197,123,195,129],[197,124,195,130],[197,127,195,133],[197,132,195,138],[197,133,195,139],[197,136,195,142,"_b"],[197,138,195,144],[197,139,195,145,"split"],[197,144,195,150],[197,145,195,151],[197,148,195,154],[197,149,195,155],[198,10,196,16],[199,0,197,0],[200,0,198,0],[201,0,199,0],[202,0,200,0],[203,0,201,0],[204,0,202,0],[205,10,203,16],[205,14,203,20],[205,15,203,21,"serverSupportedEncodings"],[205,39,203,45],[205,43,204,20,"serverSupportedEncodings"],[205,67,204,44],[205,68,204,45,"includes"],[205,76,204,53],[205,77,204,54,"clientSelectedEncoding"],[205,99,204,76],[205,100,204,77],[205,102,204,79],[206,12,205,20],[206,16,205,24],[206,17,205,25,"currentCompressionAlgorithm"],[206,44,205,52],[206,47,205,55,"clientSelectedEncoding"],[206,69,205,77],[207,12,206,20],[207,16,206,24],[207,17,206,25,"sendCompression"],[207,32,206,40],[207,35,206,43,"getCompressionHandler"],[207,56,206,64],[207,57,206,65],[207,61,206,69],[207,62,206,70,"currentCompressionAlgorithm"],[207,89,206,97],[207,91,206,99],[207,92,206,100],[207,93,206,101],[207,94,206,102],[208,10,207,16],[209,8,208,12],[209,9,208,13],[209,15,209,17],[210,10,210,16,"logging"],[210,17,210,23],[210,18,210,24,"log"],[210,21,210,27],[210,22,210,28,"constants_1"],[210,33,210,39],[210,34,210,40,"LogVerbosity"],[210,46,210,52],[210,47,210,53,"ERROR"],[210,52,210,58],[210,54,210,60],[210,127,210,133,"compressionAlgorithmKey"],[210,150,210,156],[210,152,210,158],[210,153,210,159],[211,8,211,12],[212,6,212,8],[213,4,213,4],[214,4,214,4],[214,10,214,10,"sendMetadata"],[214,22,214,22,"sendMetadata"],[214,23,214,23,"metadata"],[214,31,214,31],[214,33,214,33],[215,6,215,8],[215,12,215,14,"headers"],[215,19,215,21],[215,22,215,24],[215,28,215,30,"metadata"],[215,36,215,38],[216,6,216,8,"headers"],[216,13,216,15],[216,14,216,16,"set"],[216,17,216,19],[216,18,216,20],[216,40,216,42],[216,42,216,44],[216,65,216,67],[216,66,216,68],[217,6,217,8,"headers"],[217,13,217,15],[217,14,217,16,"set"],[217,17,217,19],[217,18,217,20],[217,35,217,37],[217,37,217,39],[217,47,217,49],[217,48,217,50],[218,6,218,8],[219,6,219,8],[219,10,219,12],[219,14,219,16],[219,15,219,17,"currentCompressionAlgorithm"],[219,42,219,44],[219,47,219,49],[219,57,219,59],[219,59,219,61],[220,8,220,12,"headers"],[220,15,220,19],[220,16,220,20,"remove"],[220,22,220,26],[220,23,220,27],[220,38,220,42],[220,39,220,43],[221,6,221,8],[221,7,221,9],[221,13,222,13],[222,8,223,12,"headers"],[222,15,223,19],[222,16,223,20,"set"],[222,19,223,23],[222,20,223,24],[222,35,223,39],[222,37,223,41],[222,41,223,45],[222,42,223,46,"currentCompressionAlgorithm"],[222,69,223,73],[222,70,223,74],[223,6,224,8],[224,6,225,8],[224,13,225,15,"headers"],[224,20,225,22],[225,4,226,4],[226,4,227,4,"receiveMetadata"],[226,19,227,19,"receiveMetadata"],[226,20,227,20,"metadata"],[226,28,227,28],[226,30,227,30],[227,6,228,8],[227,12,228,14,"receiveEncoding"],[227,27,228,29],[227,30,228,32,"metadata"],[227,38,228,40],[227,39,228,41,"get"],[227,42,228,44],[227,43,228,45],[227,58,228,60],[227,59,228,61],[228,6,229,8],[228,10,229,12,"receiveEncoding"],[228,25,229,27],[228,26,229,28,"length"],[228,32,229,34],[228,35,229,37],[228,36,229,38],[228,38,229,40],[229,8,230,12],[229,14,230,18,"encoding"],[229,22,230,26],[229,25,230,29,"receiveEncoding"],[229,40,230,44],[229,41,230,45],[229,42,230,46],[229,43,230,47],[230,8,231,12],[230,12,231,16],[230,19,231,23,"encoding"],[230,27,231,31],[230,32,231,36],[230,40,231,44],[230,42,231,46],[231,10,232,16],[231,14,232,20],[231,15,232,21,"receiveCompression"],[231,33,232,39],[231,36,232,42,"getCompressionHandler"],[231,57,232,63],[231,58,232,64,"encoding"],[231,66,232,72],[231,68,232,74],[231,72,232,78],[231,73,232,79,"maxReceiveMessageLength"],[231,96,232,102],[231,97,232,103],[232,8,233,12],[233,6,234,8],[234,6,235,8,"metadata"],[234,14,235,16],[234,15,235,17,"remove"],[234,21,235,23],[234,22,235,24],[234,37,235,39],[234,38,235,40],[235,6,236,8],[236,0,237,0],[237,6,238,8],[237,12,238,14,"serverSupportedEncodingsHeader"],[237,42,238,44],[237,45,238,47,"metadata"],[237,53,238,55],[237,54,238,56,"get"],[237,57,238,59],[237,58,238,60],[237,80,238,82],[237,81,238,83],[237,82,238,84],[237,83,238,85],[237,84,238,86],[238,6,239,8],[238,10,239,12,"serverSupportedEncodingsHeader"],[238,40,239,42],[238,42,239,44],[239,8,240,12],[239,12,240,16],[239,13,240,17,"sharedFilterConfig"],[239,31,240,35],[239,32,240,36,"serverSupportedEncodingHeader"],[239,61,240,65],[239,64,241,16,"serverSupportedEncodingsHeader"],[239,94,241,46],[240,8,242,12],[240,14,242,18,"serverSupportedEncodings"],[240,38,242,42],[240,41,242,45,"serverSupportedEncodingsHeader"],[240,71,242,75],[240,72,242,76,"split"],[240,77,242,81],[240,78,242,82],[240,81,242,85],[240,82,242,86],[241,8,243,12],[241,12,243,16],[241,13,243,17,"serverSupportedEncodings"],[241,37,243,41],[241,38,243,42,"includes"],[241,46,243,50],[241,47,243,51],[241,51,243,55],[241,52,243,56,"currentCompressionAlgorithm"],[241,79,243,83],[241,80,243,84],[241,82,243,86],[242,10,244,16],[242,14,244,20],[242,15,244,21,"sendCompression"],[242,30,244,36],[242,33,244,39],[242,37,244,43,"IdentityHandler"],[242,52,244,58],[242,53,244,59],[242,54,244,60],[243,10,245,16],[243,14,245,20],[243,15,245,21,"currentCompressionAlgorithm"],[243,42,245,48],[243,45,245,51],[243,55,245,61],[244,8,246,12],[245,6,247,8],[246,6,248,8,"metadata"],[246,14,248,16],[246,15,248,17,"remove"],[246,21,248,23],[246,22,248,24],[246,44,248,46],[246,45,248,47],[247,6,249,8],[247,13,249,15,"metadata"],[247,21,249,23],[248,4,250,4],[249,4,251,4],[249,10,251,10,"sendMessage"],[249,21,251,21,"sendMessage"],[249,22,251,22,"message"],[249,29,251,29],[249,31,251,31],[250,6,252,8],[250,10,252,12,"_a"],[250,12,252,14],[251,6,253,8],[252,0,254,0],[253,0,255,0],[254,6,256,8],[254,12,256,14,"resolvedMessage"],[254,27,256,29],[254,30,256,32],[254,36,256,38,"message"],[254,43,256,45],[255,6,257,8],[255,10,257,12,"compress"],[255,18,257,20],[256,6,258,8],[256,10,258,12],[256,14,258,16],[256,15,258,17,"sendCompression"],[256,30,258,32],[256,42,258,44,"IdentityHandler"],[256,57,258,59],[256,59,258,61],[257,8,259,12,"compress"],[257,16,259,20],[257,19,259,23],[257,24,259,28],[258,6,260,8],[258,7,260,9],[258,13,261,13],[259,8,262,12,"compress"],[259,16,262,20],[259,19,262,23],[259,20,262,24],[259,21,262,25],[259,22,262,26,"_a"],[259,24,262,28],[259,27,262,31,"resolvedMessage"],[259,42,262,46],[259,43,262,47,"flags"],[259,48,262,52],[259,54,262,58],[259,58,262,62],[259,62,262,66,"_a"],[259,64,262,68],[259,69,262,73],[259,74,262,78],[259,75,262,79],[259,78,262,82,"_a"],[259,80,262,84],[259,83,262,87],[259,84,262,88],[259,88,262,92],[259,89,262,93],[259,90,262,94],[259,123,262,127],[259,124,262,128],[260,6,263,8],[261,6,264,8],[261,13,264,15],[262,8,265,12,"message"],[262,15,265,19],[262,17,265,21],[262,23,265,27],[262,27,265,31],[262,28,265,32,"sendCompression"],[262,43,265,47],[262,44,265,48,"writeMessage"],[262,56,265,60],[262,57,265,61,"resolvedMessage"],[262,72,265,76],[262,73,265,77,"message"],[262,80,265,84],[262,82,265,86,"compress"],[262,90,265,94],[262,91,265,95],[263,8,266,12,"flags"],[263,13,266,17],[263,15,266,19,"resolvedMessage"],[263,30,266,34],[263,31,266,35,"flags"],[264,6,267,8],[264,7,267,9],[265,4,268,4],[266,4,269,4],[266,10,269,10,"receiveMessage"],[266,24,269,24,"receiveMessage"],[266,25,269,25,"message"],[266,32,269,32],[266,34,269,34],[267,6,270,8],[268,0,271,0],[269,0,272,0],[270,0,273,0],[271,6,274,8],[271,13,274,15],[271,17,274,19],[271,18,274,20,"receiveCompression"],[271,36,274,38],[271,37,274,39,"readMessage"],[271,48,274,50],[271,49,274,51],[271,55,274,57,"message"],[271,62,274,64],[271,63,274,65],[272,4,275,4],[273,2,276,0],[274,2,277,0,"exports"],[274,9,277,7],[274,10,277,8,"CompressionFilter"],[274,27,277,25],[274,30,277,28,"CompressionFilter"],[274,47,277,45],[275,2,278,0],[275,8,278,6,"CompressionFilterFactory"],[275,32,278,30],[275,33,278,31],[276,4,279,4,"constructor"],[276,15,279,15,"constructor"],[276,16,279,16,"channel"],[276,23,279,23],[276,25,279,25,"options"],[276,32,279,32],[276,34,279,34],[277,6,280,8],[277,10,280,12],[277,11,280,13,"options"],[277,18,280,20],[277,21,280,23,"options"],[277,28,280,30],[278,6,281,8],[278,10,281,12],[278,11,281,13,"sharedFilterConfig"],[278,29,281,31],[278,32,281,34],[278,33,281,35],[278,34,281,36],[279,4,282,4],[280,4,283,4,"createFilter"],[280,16,283,16,"createFilter"],[280,17,283,16],[280,19,283,19],[281,6,284,8],[281,13,284,15],[281,17,284,19,"CompressionFilter"],[281,34,284,36],[281,35,284,37],[281,39,284,41],[281,40,284,42,"options"],[281,47,284,49],[281,49,284,51],[281,53,284,55],[281,54,284,56,"sharedFilterConfig"],[281,72,284,74],[281,73,284,75],[282,4,285,4],[283,2,286,0],[284,2,287,0,"exports"],[284,9,287,7],[284,10,287,8,"CompressionFilterFactory"],[284,34,287,32],[284,37,287,35,"CompressionFilterFactory"],[284,61,287,59],[285,0,287,60],[285,3]],"functionMap":{"names":["<global>","isCompressionAlgorithmKey","CompressionHandler","CompressionHandler#writeMessage","CompressionHandler#readMessage","IdentityHandler","IdentityHandler#compressMessage","IdentityHandler#writeMessage","IdentityHandler#decompressMessage","DeflateHandler","DeflateHandler#constructor","DeflateHandler#compressMessage","Promise$argument_0","zlib.deflate$argument_1","DeflateHandler#decompressMessage","decompresser.on$argument_1","GzipHandler","GzipHandler#constructor","GzipHandler#compressMessage","zlib.gzip$argument_1","GzipHandler#decompressMessage","UnknownHandler","UnknownHandler#constructor","UnknownHandler#compressMessage","UnknownHandler#decompressMessage","getCompressionHandler","CompressionFilter","CompressionFilter#constructor","CompressionFilter#sendMetadata","CompressionFilter#receiveMetadata","CompressionFilter#sendMessage","CompressionFilter#receiveMessage","CompressionFilterFactory","CompressionFilterFactory#constructor","CompressionFilterFactory#createFilter"],"mappings":"AAA;kCCwB;CDE;AEC;ICM;KDU;IEK;KFO;CFC;AKC;ICC;KDE;IEC;KFQ;IGC;KHE;CLC;ASC;ICC;KDG;IEC;2BCC;kCCC;aDO;SDC;KFC;IKC;2BFC;oCGI;aHU;mCGC;aHE;SEG;KLC;CTC;AgBC;ICC;KDG;IEC;2BNC;+BOC;aPO;SMC;KFC;IIC;2BRC;oCGI;aHU;mCGC;aHE;SQG;KJC;ChBC;AqBC;ICC;KDG;IEC;KFE;IGC;KHG;CrBC;AyBC;CzBW;A0BC;ICC;KD8B;IEC;KFY;IGC;KHuB;IIC;KJiB;IKC;KLM;C1BC;AgCE;ICC;KDG;IEC;KFE;ChCC"}},"type":"js/module"}]}