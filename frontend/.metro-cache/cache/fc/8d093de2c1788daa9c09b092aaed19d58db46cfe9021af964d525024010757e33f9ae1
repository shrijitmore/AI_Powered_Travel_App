{"dependencies":[{"name":"./connectivity-state","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":29,"index":735},"end":{"line":20,"column":60,"index":766}}],"key":"jyxLDTe7V7Ou6ov9nXyoEe1g9Sg=","exportNames":["*"]}},{"name":"./backoff-timeout","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":26,"index":794},"end":{"line":21,"column":54,"index":822}}],"key":"2lhPQUNStqxtTZnZ5ZoNGEFu/ZQ=","exportNames":["*"]}},{"name":"./logging","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":16,"index":840},"end":{"line":22,"column":36,"index":860}}],"key":"IuCQ7u+XFj9mcNQiMAuOpQn/EDM=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":20,"index":882},"end":{"line":23,"column":42,"index":904}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./uri-parser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":21,"index":927},"end":{"line":24,"column":44,"index":950}}],"key":"esiO732HplrDMf1oXKGdpawa/aM=","exportNames":["*"]}},{"name":"./subchannel-address","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":25,"column":29,"index":981},"end":{"line":25,"column":60,"index":1012}}],"key":"s7maFfe6oUZ6E4vQAG2rWwUHpfM=","exportNames":["*"]}},{"name":"./channelz","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":26,"column":19,"index":1033},"end":{"line":26,"column":40,"index":1054}}],"key":"ZTEjc4aKWFPq/AqobFh2ozhHNks=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Subchannel = void 0;\n  const connectivity_state_1 = require(_dependencyMap[0], \"./connectivity-state\");\n  const backoff_timeout_1 = require(_dependencyMap[1], \"./backoff-timeout\");\n  const logging = require(_dependencyMap[2], \"./logging\");\n  const constants_1 = require(_dependencyMap[3], \"./constants\");\n  const uri_parser_1 = require(_dependencyMap[4], \"./uri-parser\");\n  const subchannel_address_1 = require(_dependencyMap[5], \"./subchannel-address\");\n  const channelz_1 = require(_dependencyMap[6], \"./channelz\");\n  const TRACER_NAME = 'subchannel';\n  /* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n   * have a constant for the max signed 32 bit integer, so this is a simple way\n   * to calculate it */\n  const KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\n  class Subchannel {\n    /**\n     * A class representing a connection to a single backend.\n     * @param channelTarget The target string for the channel as a whole\n     * @param subchannelAddress The address for the backend that this subchannel\n     *     will connect to\n     * @param options The channel options, plus any specific subchannel options\n     *     for this subchannel\n     * @param credentials The channel credentials used to establish this\n     *     connection\n     */\n    constructor(channelTarget, subchannelAddress, options, credentials, connector) {\n      var _a;\n      this.channelTarget = channelTarget;\n      this.subchannelAddress = subchannelAddress;\n      this.options = options;\n      this.credentials = credentials;\n      this.connector = connector;\n      /**\n       * The subchannel's current connectivity state. Invariant: `session` === `null`\n       * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\n       */\n      this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n      /**\n       * The underlying http2 session used to make requests.\n       */\n      this.transport = null;\n      /**\n       * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\n       * CONNECTING instead of IDLE when the backoff timeout ends.\n       */\n      this.continueConnecting = false;\n      /**\n       * A list of listener functions that will be called whenever the connectivity\n       * state changes. Will be modified by `addConnectivityStateListener` and\n       * `removeConnectivityStateListener`\n       */\n      this.stateListeners = new Set();\n      /**\n       * Tracks channels and subchannel pools with references to this subchannel\n       */\n      this.refcount = 0;\n      // Channelz info\n      this.channelzEnabled = true;\n      this.callTracker = new channelz_1.ChannelzCallTracker();\n      this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n      // Channelz socket info\n      this.streamTracker = new channelz_1.ChannelzCallTracker();\n      const backoffOptions = {\n        initialDelay: options['grpc.initial_reconnect_backoff_ms'],\n        maxDelay: options['grpc.max_reconnect_backoff_ms']\n      };\n      this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\n        this.handleBackoffTimer();\n      }, backoffOptions);\n      this.backoffTimeout.unref();\n      this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n      this.keepaliveTime = (_a = options['grpc.keepalive_time_ms']) !== null && _a !== void 0 ? _a : -1;\n      if (options['grpc.enable_channelz'] === 0) {\n        this.channelzEnabled = false;\n      }\n      this.channelzTrace = new channelz_1.ChannelzTrace();\n      this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Subchannel created');\n      }\n      this.trace('Subchannel constructed with options ' + JSON.stringify(options, undefined, 2));\n    }\n    getChannelzInfo() {\n      return {\n        state: this.connectivityState,\n        trace: this.channelzTrace,\n        callTracker: this.callTracker,\n        children: this.childrenTracker.getChildLists(),\n        target: this.subchannelAddressString\n      };\n    }\n    trace(text) {\n      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n    }\n    refTrace(text) {\n      logging.trace(constants_1.LogVerbosity.DEBUG, 'subchannel_refcount', '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n    }\n    handleBackoffTimer() {\n      if (this.continueConnecting) {\n        this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\n      } else {\n        this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);\n      }\n    }\n    /**\n     * Start a backoff timer with the current nextBackoff timeout\n     */\n    startBackoff() {\n      this.backoffTimeout.runOnce();\n    }\n    stopBackoff() {\n      this.backoffTimeout.stop();\n      this.backoffTimeout.reset();\n    }\n    startConnectingInternal() {\n      let options = this.options;\n      if (options['grpc.keepalive_time_ms']) {\n        const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);\n        options = Object.assign(Object.assign({}, options), {\n          'grpc.keepalive_time_ms': adjustedKeepaliveTime\n        });\n      }\n      this.connector.connect(this.subchannelAddress, this.credentials, options).then(transport => {\n        if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {\n          this.transport = transport;\n          if (this.channelzEnabled) {\n            this.childrenTracker.refChild(transport.getChannelzRef());\n          }\n          transport.addDisconnectListener(tooManyPings => {\n            this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\n            if (tooManyPings && this.keepaliveTime > 0) {\n              this.keepaliveTime *= 2;\n              logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);\n            }\n          });\n        } else {\n          /* If we can't transition from CONNECTING to READY here, we will\n           * not be using this transport, so release its resources. */\n          transport.shutdown();\n        }\n      }, error => {\n        this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);\n      });\n    }\n    /**\n     * Initiate a state transition from any element of oldStates to the new\n     * state. If the current connectivityState is not in oldStates, do nothing.\n     * @param oldStates The set of states to transition from\n     * @param newState The state to transition to\n     * @returns True if the state changed, false otherwise\n     */\n    transitionToState(oldStates, newState, errorMessage) {\n      var _a, _b;\n      if (oldStates.indexOf(this.connectivityState) === -1) {\n        return false;\n      }\n      this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\n      }\n      const previousState = this.connectivityState;\n      this.connectivityState = newState;\n      switch (newState) {\n        case connectivity_state_1.ConnectivityState.READY:\n          this.stopBackoff();\n          break;\n        case connectivity_state_1.ConnectivityState.CONNECTING:\n          this.startBackoff();\n          this.startConnectingInternal();\n          this.continueConnecting = false;\n          break;\n        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n          if (this.channelzEnabled && this.transport) {\n            this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n          }\n          (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();\n          this.transport = null;\n          /* If the backoff timer has already ended by the time we get to the\n           * TRANSIENT_FAILURE state, we want to immediately transition out of\n           * TRANSIENT_FAILURE as though the backoff timer is ending right now */\n          if (!this.backoffTimeout.isRunning()) {\n            process.nextTick(() => {\n              this.handleBackoffTimer();\n            });\n          }\n          break;\n        case connectivity_state_1.ConnectivityState.IDLE:\n          if (this.channelzEnabled && this.transport) {\n            this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n          }\n          (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();\n          this.transport = null;\n          break;\n        default:\n          throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\n      }\n      for (const listener of this.stateListeners) {\n        listener(this, previousState, newState, this.keepaliveTime, errorMessage);\n      }\n      return true;\n    }\n    ref() {\n      this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount + 1));\n      this.refcount += 1;\n    }\n    unref() {\n      this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount - 1));\n      this.refcount -= 1;\n      if (this.refcount === 0) {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Shutting down');\n        }\n        if (this.channelzEnabled) {\n          (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n        }\n        process.nextTick(() => {\n          this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\n        });\n      }\n    }\n    unrefIfOneRef() {\n      if (this.refcount === 1) {\n        this.unref();\n        return true;\n      }\n      return false;\n    }\n    createCall(metadata, host, method, listener) {\n      if (!this.transport) {\n        throw new Error('Cannot create call, subchannel not READY');\n      }\n      let statsTracker;\n      if (this.channelzEnabled) {\n        this.callTracker.addCallStarted();\n        this.streamTracker.addCallStarted();\n        statsTracker = {\n          onCallEnd: status => {\n            if (status.code === constants_1.Status.OK) {\n              this.callTracker.addCallSucceeded();\n            } else {\n              this.callTracker.addCallFailed();\n            }\n          }\n        };\n      } else {\n        statsTracker = {};\n      }\n      return this.transport.createCall(metadata, host, method, listener, statsTracker);\n    }\n    /**\n     * If the subchannel is currently IDLE, start connecting and switch to the\n     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\n     * the next time it would transition to IDLE, start connecting again instead.\n     * Otherwise, do nothing.\n     */\n    startConnecting() {\n      process.nextTick(() => {\n        /* First, try to transition from IDLE to connecting. If that doesn't happen\n         * because the state is not currently IDLE, check if it is\n         * TRANSIENT_FAILURE, and if so indicate that it should go back to\n         * connecting after the backoff timer ends. Otherwise do nothing */\n        if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {\n          if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            this.continueConnecting = true;\n          }\n        }\n      });\n    }\n    /**\n     * Get the subchannel's current connectivity state.\n     */\n    getConnectivityState() {\n      return this.connectivityState;\n    }\n    /**\n     * Add a listener function to be called whenever the subchannel's\n     * connectivity state changes.\n     * @param listener\n     */\n    addConnectivityStateListener(listener) {\n      this.stateListeners.add(listener);\n    }\n    /**\n     * Remove a listener previously added with `addConnectivityStateListener`\n     * @param listener A reference to a function previously passed to\n     *     `addConnectivityStateListener`\n     */\n    removeConnectivityStateListener(listener) {\n      this.stateListeners.delete(listener);\n    }\n    /**\n     * Reset the backoff timeout, and immediately start connecting if in backoff.\n     */\n    resetBackoff() {\n      process.nextTick(() => {\n        this.backoffTimeout.reset();\n        this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\n      });\n    }\n    getAddress() {\n      return this.subchannelAddressString;\n    }\n    getChannelzRef() {\n      return this.channelzRef;\n    }\n    getRealSubchannel() {\n      return this;\n    }\n    realSubchannelEquals(other) {\n      return other.getRealSubchannel() === this;\n    }\n    throttleKeepalive(newKeepaliveTime) {\n      if (newKeepaliveTime > this.keepaliveTime) {\n        this.keepaliveTime = newKeepaliveTime;\n      }\n    }\n  }\n  exports.Subchannel = Subchannel;\n});","lineCount":340,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"Subchannel"],[23,20,19,18],[23,23,19,21],[23,28,19,26],[23,29,19,27],[24,2,20,0],[24,8,20,6,"connectivity_state_1"],[24,28,20,26],[24,31,20,29,"require"],[24,38,20,36],[24,39,20,36,"_dependencyMap"],[24,53,20,36],[24,80,20,59],[24,81,20,60],[25,2,21,0],[25,8,21,6,"backoff_timeout_1"],[25,25,21,23],[25,28,21,26,"require"],[25,35,21,33],[25,36,21,33,"_dependencyMap"],[25,50,21,33],[25,74,21,53],[25,75,21,54],[26,2,22,0],[26,8,22,6,"logging"],[26,15,22,13],[26,18,22,16,"require"],[26,25,22,23],[26,26,22,23,"_dependencyMap"],[26,40,22,23],[26,56,22,35],[26,57,22,36],[27,2,23,0],[27,8,23,6,"constants_1"],[27,19,23,17],[27,22,23,20,"require"],[27,29,23,27],[27,30,23,27,"_dependencyMap"],[27,44,23,27],[27,62,23,41],[27,63,23,42],[28,2,24,0],[28,8,24,6,"uri_parser_1"],[28,20,24,18],[28,23,24,21,"require"],[28,30,24,28],[28,31,24,28,"_dependencyMap"],[28,45,24,28],[28,64,24,43],[28,65,24,44],[29,2,25,0],[29,8,25,6,"subchannel_address_1"],[29,28,25,26],[29,31,25,29,"require"],[29,38,25,36],[29,39,25,36,"_dependencyMap"],[29,53,25,36],[29,80,25,59],[29,81,25,60],[30,2,26,0],[30,8,26,6,"channelz_1"],[30,18,26,16],[30,21,26,19,"require"],[30,28,26,26],[30,29,26,26,"_dependencyMap"],[30,43,26,26],[30,60,26,39],[30,61,26,40],[31,2,27,0],[31,8,27,6,"TRACER_NAME"],[31,19,27,17],[31,22,27,20],[31,34,27,32],[32,2,28,0],[33,0,29,0],[34,0,30,0],[35,2,31,0],[35,8,31,6,"KEEPALIVE_MAX_TIME_MS"],[35,29,31,27],[35,32,31,30],[35,34,31,32],[35,35,31,33],[35,39,31,37],[35,41,31,39],[35,42,31,40],[36,2,32,0],[36,8,32,6,"Subchannel"],[36,18,32,16],[36,19,32,17],[37,4,33,4],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,4,43,4,"constructor"],[47,15,43,15,"constructor"],[47,16,43,16,"channelTarget"],[47,29,43,29],[47,31,43,31,"subchannelAddress"],[47,48,43,48],[47,50,43,50,"options"],[47,57,43,57],[47,59,43,59,"credentials"],[47,70,43,70],[47,72,43,72,"connector"],[47,81,43,81],[47,83,43,83],[48,6,44,8],[48,10,44,12,"_a"],[48,12,44,14],[49,6,45,8],[49,10,45,12],[49,11,45,13,"channelTarget"],[49,24,45,26],[49,27,45,29,"channelTarget"],[49,40,45,42],[50,6,46,8],[50,10,46,12],[50,11,46,13,"subchannelAddress"],[50,28,46,30],[50,31,46,33,"subchannelAddress"],[50,48,46,50],[51,6,47,8],[51,10,47,12],[51,11,47,13,"options"],[51,18,47,20],[51,21,47,23,"options"],[51,28,47,30],[52,6,48,8],[52,10,48,12],[52,11,48,13,"credentials"],[52,22,48,24],[52,25,48,27,"credentials"],[52,36,48,38],[53,6,49,8],[53,10,49,12],[53,11,49,13,"connector"],[53,20,49,22],[53,23,49,25,"connector"],[53,32,49,34],[54,6,50,8],[55,0,51,0],[56,0,52,0],[57,0,53,0],[58,6,54,8],[58,10,54,12],[58,11,54,13,"connectivityState"],[58,28,54,30],[58,31,54,33,"connectivity_state_1"],[58,51,54,53],[58,52,54,54,"ConnectivityState"],[58,69,54,71],[58,70,54,72,"IDLE"],[58,74,54,76],[59,6,55,8],[60,0,56,0],[61,0,57,0],[62,6,58,8],[62,10,58,12],[62,11,58,13,"transport"],[62,20,58,22],[62,23,58,25],[62,27,58,29],[63,6,59,8],[64,0,60,0],[65,0,61,0],[66,0,62,0],[67,6,63,8],[67,10,63,12],[67,11,63,13,"continueConnecting"],[67,29,63,31],[67,32,63,34],[67,37,63,39],[68,6,64,8],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,6,69,8],[73,10,69,12],[73,11,69,13,"stateListeners"],[73,25,69,27],[73,28,69,30],[73,32,69,34,"Set"],[73,35,69,37],[73,36,69,38],[73,37,69,39],[74,6,70,8],[75,0,71,0],[76,0,72,0],[77,6,73,8],[77,10,73,12],[77,11,73,13,"refcount"],[77,19,73,21],[77,22,73,24],[77,23,73,25],[78,6,74,8],[79,6,75,8],[79,10,75,12],[79,11,75,13,"channelzEnabled"],[79,26,75,28],[79,29,75,31],[79,33,75,35],[80,6,76,8],[80,10,76,12],[80,11,76,13,"callTracker"],[80,22,76,24],[80,25,76,27],[80,29,76,31,"channelz_1"],[80,39,76,41],[80,40,76,42,"ChannelzCallTracker"],[80,59,76,61],[80,60,76,62],[80,61,76,63],[81,6,77,8],[81,10,77,12],[81,11,77,13,"childrenTracker"],[81,26,77,28],[81,29,77,31],[81,33,77,35,"channelz_1"],[81,43,77,45],[81,44,77,46,"ChannelzChildrenTracker"],[81,67,77,69],[81,68,77,70],[81,69,77,71],[82,6,78,8],[83,6,79,8],[83,10,79,12],[83,11,79,13,"streamTracker"],[83,24,79,26],[83,27,79,29],[83,31,79,33,"channelz_1"],[83,41,79,43],[83,42,79,44,"ChannelzCallTracker"],[83,61,79,63],[83,62,79,64],[83,63,79,65],[84,6,80,8],[84,12,80,14,"backoffOptions"],[84,26,80,28],[84,29,80,31],[85,8,81,12,"initialDelay"],[85,20,81,24],[85,22,81,26,"options"],[85,29,81,33],[85,30,81,34],[85,65,81,69],[85,66,81,70],[86,8,82,12,"maxDelay"],[86,16,82,20],[86,18,82,22,"options"],[86,25,82,29],[86,26,82,30],[86,57,82,61],[87,6,83,8],[87,7,83,9],[88,6,84,8],[88,10,84,12],[88,11,84,13,"backoffTimeout"],[88,25,84,27],[88,28,84,30],[88,32,84,34,"backoff_timeout_1"],[88,49,84,51],[88,50,84,52,"BackoffTimeout"],[88,64,84,66],[88,65,84,67],[88,71,84,73],[89,8,85,12],[89,12,85,16],[89,13,85,17,"handleBackoffTimer"],[89,31,85,35],[89,32,85,36],[89,33,85,37],[90,6,86,8],[90,7,86,9],[90,9,86,11,"backoffOptions"],[90,23,86,25],[90,24,86,26],[91,6,87,8],[91,10,87,12],[91,11,87,13,"backoffTimeout"],[91,25,87,27],[91,26,87,28,"unref"],[91,31,87,33],[91,32,87,34],[91,33,87,35],[92,6,88,8],[92,10,88,12],[92,11,88,13,"subchannelAddressString"],[92,34,88,36],[92,37,88,39],[92,38,88,40],[92,39,88,41],[92,41,88,43,"subchannel_address_1"],[92,61,88,63],[92,62,88,64,"subchannelAddressToString"],[92,87,88,89],[92,89,88,91,"subchannelAddress"],[92,106,88,108],[92,107,88,109],[93,6,89,8],[93,10,89,12],[93,11,89,13,"keepaliveTime"],[93,24,89,26],[93,27,89,29],[93,28,89,30,"_a"],[93,30,89,32],[93,33,89,35,"options"],[93,40,89,42],[93,41,89,43],[93,65,89,67],[93,66,89,68],[93,72,89,74],[93,76,89,78],[93,80,89,82,"_a"],[93,82,89,84],[93,87,89,89],[93,92,89,94],[93,93,89,95],[93,96,89,98,"_a"],[93,98,89,100],[93,101,89,103],[93,102,89,104],[93,103,89,105],[94,6,90,8],[94,10,90,12,"options"],[94,17,90,19],[94,18,90,20],[94,40,90,42],[94,41,90,43],[94,46,90,48],[94,47,90,49],[94,49,90,51],[95,8,91,12],[95,12,91,16],[95,13,91,17,"channelzEnabled"],[95,28,91,32],[95,31,91,35],[95,36,91,40],[96,6,92,8],[97,6,93,8],[97,10,93,12],[97,11,93,13,"channelzTrace"],[97,24,93,26],[97,27,93,29],[97,31,93,33,"channelz_1"],[97,41,93,43],[97,42,93,44,"ChannelzTrace"],[97,55,93,57],[97,56,93,58],[97,57,93,59],[98,6,94,8],[98,10,94,12],[98,11,94,13,"channelzRef"],[98,22,94,24],[98,25,94,27],[98,26,94,28],[98,27,94,29],[98,29,94,31,"channelz_1"],[98,39,94,41],[98,40,94,42,"registerChannelzSubchannel"],[98,66,94,68],[98,68,94,70],[98,72,94,74],[98,73,94,75,"subchannelAddressString"],[98,96,94,98],[98,98,94,100],[98,104,94,106],[98,108,94,110],[98,109,94,111,"getChannelzInfo"],[98,124,94,126],[98,125,94,127],[98,126,94,128],[98,128,94,130],[98,132,94,134],[98,133,94,135,"channelzEnabled"],[98,148,94,150],[98,149,94,151],[99,6,95,8],[99,10,95,12],[99,14,95,16],[99,15,95,17,"channelzEnabled"],[99,30,95,32],[99,32,95,34],[100,8,96,12],[100,12,96,16],[100,13,96,17,"channelzTrace"],[100,26,96,30],[100,27,96,31,"addTrace"],[100,35,96,39],[100,36,96,40],[100,45,96,49],[100,47,96,51],[100,67,96,71],[100,68,96,72],[101,6,97,8],[102,6,98,8],[102,10,98,12],[102,11,98,13,"trace"],[102,16,98,18],[102,17,98,19],[102,55,98,57],[102,58,99,12,"JSON"],[102,62,99,16],[102,63,99,17,"stringify"],[102,72,99,26],[102,73,99,27,"options"],[102,80,99,34],[102,82,99,36,"undefined"],[102,91,99,45],[102,93,99,47],[102,94,99,48],[102,95,99,49],[102,96,99,50],[103,4,100,4],[104,4,101,4,"getChannelzInfo"],[104,19,101,19,"getChannelzInfo"],[104,20,101,19],[104,22,101,22],[105,6,102,8],[105,13,102,15],[106,8,103,12,"state"],[106,13,103,17],[106,15,103,19],[106,19,103,23],[106,20,103,24,"connectivityState"],[106,37,103,41],[107,8,104,12,"trace"],[107,13,104,17],[107,15,104,19],[107,19,104,23],[107,20,104,24,"channelzTrace"],[107,33,104,37],[108,8,105,12,"callTracker"],[108,19,105,23],[108,21,105,25],[108,25,105,29],[108,26,105,30,"callTracker"],[108,37,105,41],[109,8,106,12,"children"],[109,16,106,20],[109,18,106,22],[109,22,106,26],[109,23,106,27,"childrenTracker"],[109,38,106,42],[109,39,106,43,"getChildLists"],[109,52,106,56],[109,53,106,57],[109,54,106,58],[110,8,107,12,"target"],[110,14,107,18],[110,16,107,20],[110,20,107,24],[110,21,107,25,"subchannelAddressString"],[111,6,108,8],[111,7,108,9],[112,4,109,4],[113,4,110,4,"trace"],[113,9,110,9,"trace"],[113,10,110,10,"text"],[113,14,110,14],[113,16,110,16],[114,6,111,8,"logging"],[114,13,111,15],[114,14,111,16,"trace"],[114,19,111,21],[114,20,111,22,"constants_1"],[114,31,111,33],[114,32,111,34,"LogVerbosity"],[114,44,111,46],[114,45,111,47,"DEBUG"],[114,50,111,52],[114,52,111,54,"TRACER_NAME"],[114,63,111,65],[114,65,111,67],[114,68,111,70],[114,71,112,12],[114,75,112,16],[114,76,112,17,"channelzRef"],[114,87,112,28],[114,88,112,29,"id"],[114,90,112,31],[114,93,113,12],[114,97,113,16],[114,100,114,12],[114,104,114,16],[114,105,114,17,"subchannelAddressString"],[114,128,114,40],[114,131,115,12],[114,134,115,15],[114,137,116,12,"text"],[114,141,116,16],[114,142,116,17],[115,4,117,4],[116,4,118,4,"refTrace"],[116,12,118,12,"refTrace"],[116,13,118,13,"text"],[116,17,118,17],[116,19,118,19],[117,6,119,8,"logging"],[117,13,119,15],[117,14,119,16,"trace"],[117,19,119,21],[117,20,119,22,"constants_1"],[117,31,119,33],[117,32,119,34,"LogVerbosity"],[117,44,119,46],[117,45,119,47,"DEBUG"],[117,50,119,52],[117,52,119,54],[117,73,119,75],[117,75,119,77],[117,78,119,80],[117,81,120,12],[117,85,120,16],[117,86,120,17,"channelzRef"],[117,97,120,28],[117,98,120,29,"id"],[117,100,120,31],[117,103,121,12],[117,107,121,16],[117,110,122,12],[117,114,122,16],[117,115,122,17,"subchannelAddressString"],[117,138,122,40],[117,141,123,12],[117,144,123,15],[117,147,124,12,"text"],[117,151,124,16],[117,152,124,17],[118,4,125,4],[119,4,126,4,"handleBackoffTimer"],[119,22,126,22,"handleBackoffTimer"],[119,23,126,22],[119,25,126,25],[120,6,127,8],[120,10,127,12],[120,14,127,16],[120,15,127,17,"continueConnecting"],[120,33,127,35],[120,35,127,37],[121,8,128,12],[121,12,128,16],[121,13,128,17,"transitionToState"],[121,30,128,34],[121,31,128,35],[121,32,128,36,"connectivity_state_1"],[121,52,128,56],[121,53,128,57,"ConnectivityState"],[121,70,128,74],[121,71,128,75,"TRANSIENT_FAILURE"],[121,88,128,92],[121,89,128,93],[121,91,128,95,"connectivity_state_1"],[121,111,128,115],[121,112,128,116,"ConnectivityState"],[121,129,128,133],[121,130,128,134,"CONNECTING"],[121,140,128,144],[121,141,128,145],[122,6,129,8],[122,7,129,9],[122,13,130,13],[123,8,131,12],[123,12,131,16],[123,13,131,17,"transitionToState"],[123,30,131,34],[123,31,131,35],[123,32,131,36,"connectivity_state_1"],[123,52,131,56],[123,53,131,57,"ConnectivityState"],[123,70,131,74],[123,71,131,75,"TRANSIENT_FAILURE"],[123,88,131,92],[123,89,131,93],[123,91,131,95,"connectivity_state_1"],[123,111,131,115],[123,112,131,116,"ConnectivityState"],[123,129,131,133],[123,130,131,134,"IDLE"],[123,134,131,138],[123,135,131,139],[124,6,132,8],[125,4,133,4],[126,4,134,4],[127,0,135,0],[128,0,136,0],[129,4,137,4,"startBackoff"],[129,16,137,16,"startBackoff"],[129,17,137,16],[129,19,137,19],[130,6,138,8],[130,10,138,12],[130,11,138,13,"backoffTimeout"],[130,25,138,27],[130,26,138,28,"runOnce"],[130,33,138,35],[130,34,138,36],[130,35,138,37],[131,4,139,4],[132,4,140,4,"stopBackoff"],[132,15,140,15,"stopBackoff"],[132,16,140,15],[132,18,140,18],[133,6,141,8],[133,10,141,12],[133,11,141,13,"backoffTimeout"],[133,25,141,27],[133,26,141,28,"stop"],[133,30,141,32],[133,31,141,33],[133,32,141,34],[134,6,142,8],[134,10,142,12],[134,11,142,13,"backoffTimeout"],[134,25,142,27],[134,26,142,28,"reset"],[134,31,142,33],[134,32,142,34],[134,33,142,35],[135,4,143,4],[136,4,144,4,"startConnectingInternal"],[136,27,144,27,"startConnectingInternal"],[136,28,144,27],[136,30,144,30],[137,6,145,8],[137,10,145,12,"options"],[137,17,145,19],[137,20,145,22],[137,24,145,26],[137,25,145,27,"options"],[137,32,145,34],[138,6,146,8],[138,10,146,12,"options"],[138,17,146,19],[138,18,146,20],[138,42,146,44],[138,43,146,45],[138,45,146,47],[139,8,147,12],[139,14,147,18,"adjustedKeepaliveTime"],[139,35,147,39],[139,38,147,42,"Math"],[139,42,147,46],[139,43,147,47,"min"],[139,46,147,50],[139,47,147,51],[139,51,147,55],[139,52,147,56,"keepaliveTime"],[139,65,147,69],[139,67,147,71,"KEEPALIVE_MAX_TIME_MS"],[139,88,147,92],[139,89,147,93],[140,8,148,12,"options"],[140,15,148,19],[140,18,148,22,"Object"],[140,24,148,28],[140,25,148,29,"assign"],[140,31,148,35],[140,32,148,36,"Object"],[140,38,148,42],[140,39,148,43,"assign"],[140,45,148,49],[140,46,148,50],[140,47,148,51],[140,48,148,52],[140,50,148,54,"options"],[140,57,148,61],[140,58,148,62],[140,60,148,64],[141,10,148,66],[141,34,148,90],[141,36,148,92,"adjustedKeepaliveTime"],[142,8,148,114],[142,9,148,115],[142,10,148,116],[143,6,149,8],[144,6,150,8],[144,10,150,12],[144,11,150,13,"connector"],[144,20,150,22],[144,21,151,13,"connect"],[144,28,151,20],[144,29,151,21],[144,33,151,25],[144,34,151,26,"subchannelAddress"],[144,51,151,43],[144,53,151,45],[144,57,151,49],[144,58,151,50,"credentials"],[144,69,151,61],[144,71,151,63,"options"],[144,78,151,70],[144,79,151,71],[144,80,152,13,"then"],[144,84,152,17],[144,85,152,18,"transport"],[144,94,152,27],[144,98,152,31],[145,8,153,12],[145,12,153,16],[145,16,153,20],[145,17,153,21,"transitionToState"],[145,34,153,38],[145,35,153,39],[145,36,153,40,"connectivity_state_1"],[145,56,153,60],[145,57,153,61,"ConnectivityState"],[145,74,153,78],[145,75,153,79,"CONNECTING"],[145,85,153,89],[145,86,153,90],[145,88,153,92,"connectivity_state_1"],[145,108,153,112],[145,109,153,113,"ConnectivityState"],[145,126,153,130],[145,127,153,131,"READY"],[145,132,153,136],[145,133,153,137],[145,135,153,139],[146,10,154,16],[146,14,154,20],[146,15,154,21,"transport"],[146,24,154,30],[146,27,154,33,"transport"],[146,36,154,42],[147,10,155,16],[147,14,155,20],[147,18,155,24],[147,19,155,25,"channelzEnabled"],[147,34,155,40],[147,36,155,42],[148,12,156,20],[148,16,156,24],[148,17,156,25,"childrenTracker"],[148,32,156,40],[148,33,156,41,"refChild"],[148,41,156,49],[148,42,156,50,"transport"],[148,51,156,59],[148,52,156,60,"getChannelzRef"],[148,66,156,74],[148,67,156,75],[148,68,156,76],[148,69,156,77],[149,10,157,16],[150,10,158,16,"transport"],[150,19,158,25],[150,20,158,26,"addDisconnectListener"],[150,41,158,47],[150,42,158,48,"tooManyPings"],[150,54,158,60],[150,58,158,64],[151,12,159,20],[151,16,159,24],[151,17,159,25,"transitionToState"],[151,34,159,42],[151,35,159,43],[151,36,159,44,"connectivity_state_1"],[151,56,159,64],[151,57,159,65,"ConnectivityState"],[151,74,159,82],[151,75,159,83,"READY"],[151,80,159,88],[151,81,159,89],[151,83,159,91,"connectivity_state_1"],[151,103,159,111],[151,104,159,112,"ConnectivityState"],[151,121,159,129],[151,122,159,130,"IDLE"],[151,126,159,134],[151,127,159,135],[152,12,160,20],[152,16,160,24,"tooManyPings"],[152,28,160,36],[152,32,160,40],[152,36,160,44],[152,37,160,45,"keepaliveTime"],[152,50,160,58],[152,53,160,61],[152,54,160,62],[152,56,160,64],[153,14,161,24],[153,18,161,28],[153,19,161,29,"keepaliveTime"],[153,32,161,42],[153,36,161,46],[153,37,161,47],[154,14,162,24,"logging"],[154,21,162,31],[154,22,162,32,"log"],[154,25,162,35],[154,26,162,36,"constants_1"],[154,37,162,47],[154,38,162,48,"LogVerbosity"],[154,50,162,60],[154,51,162,61,"ERROR"],[154,56,162,66],[154,58,162,68],[154,75,162,85],[154,76,162,86],[154,77,162,87],[154,79,162,89,"uri_parser_1"],[154,91,162,101],[154,92,162,102,"uriToString"],[154,103,162,113],[154,105,162,115],[154,109,162,119],[154,110,162,120,"channelTarget"],[154,123,162,133],[154,124,162,134],[154,131,162,141],[154,135,162,145],[154,136,162,146,"subchannelAddressString"],[154,159,162,169],[154,235,162,245],[154,239,162,249],[154,240,162,250,"keepaliveTime"],[154,253,162,263],[154,258,162,268],[154,259,162,269],[155,12,163,20],[156,10,164,16],[156,11,164,17],[156,12,164,18],[157,8,165,12],[157,9,165,13],[157,15,166,17],[158,10,167,16],[159,0,168,0],[160,10,169,16,"transport"],[160,19,169,25],[160,20,169,26,"shutdown"],[160,28,169,34],[160,29,169,35],[160,30,169,36],[161,8,170,12],[162,6,171,8],[162,7,171,9],[162,9,171,11,"error"],[162,14,171,16],[162,18,171,20],[163,8,172,12],[163,12,172,16],[163,13,172,17,"transitionToState"],[163,30,172,34],[163,31,172,35],[163,32,172,36,"connectivity_state_1"],[163,52,172,56],[163,53,172,57,"ConnectivityState"],[163,70,172,74],[163,71,172,75,"CONNECTING"],[163,81,172,85],[163,82,172,86],[163,84,172,88,"connectivity_state_1"],[163,104,172,108],[163,105,172,109,"ConnectivityState"],[163,122,172,126],[163,123,172,127,"TRANSIENT_FAILURE"],[163,140,172,144],[163,142,172,146],[163,145,172,149,"error"],[163,150,172,154],[163,152,172,156],[163,153,172,157],[164,6,173,8],[164,7,173,9],[164,8,173,10],[165,4,174,4],[166,4,175,4],[167,0,176,0],[168,0,177,0],[169,0,178,0],[170,0,179,0],[171,0,180,0],[172,0,181,0],[173,4,182,4,"transitionToState"],[173,21,182,21,"transitionToState"],[173,22,182,22,"oldStates"],[173,31,182,31],[173,33,182,33,"newState"],[173,41,182,41],[173,43,182,43,"errorMessage"],[173,55,182,55],[173,57,182,57],[174,6,183,8],[174,10,183,12,"_a"],[174,12,183,14],[174,14,183,16,"_b"],[174,16,183,18],[175,6,184,8],[175,10,184,12,"oldStates"],[175,19,184,21],[175,20,184,22,"indexOf"],[175,27,184,29],[175,28,184,30],[175,32,184,34],[175,33,184,35,"connectivityState"],[175,50,184,52],[175,51,184,53],[175,56,184,58],[175,57,184,59],[175,58,184,60],[175,60,184,62],[176,8,185,12],[176,15,185,19],[176,20,185,24],[177,6,186,8],[178,6,187,8],[178,10,187,12],[178,11,187,13,"trace"],[178,16,187,18],[178,17,187,19,"connectivity_state_1"],[178,37,187,39],[178,38,187,40,"ConnectivityState"],[178,55,187,57],[178,56,187,58],[178,60,187,62],[178,61,187,63,"connectivityState"],[178,78,187,80],[178,79,187,81],[178,82,188,12],[178,88,188,18],[178,91,189,12,"connectivity_state_1"],[178,111,189,32],[178,112,189,33,"ConnectivityState"],[178,129,189,50],[178,130,189,51,"newState"],[178,138,189,59],[178,139,189,60],[178,140,189,61],[179,6,190,8],[179,10,190,12],[179,14,190,16],[179,15,190,17,"channelzEnabled"],[179,30,190,32],[179,32,190,34],[180,8,191,12],[180,12,191,16],[180,13,191,17,"channelzTrace"],[180,26,191,30],[180,27,191,31,"addTrace"],[180,35,191,39],[180,36,191,40],[180,45,191,49],[180,47,191,51],[180,78,191,82],[180,81,191,85,"connectivity_state_1"],[180,101,191,105],[180,102,191,106,"ConnectivityState"],[180,119,191,123],[180,120,191,124,"newState"],[180,128,191,132],[180,129,191,133],[180,130,191,134],[181,6,192,8],[182,6,193,8],[182,12,193,14,"previousState"],[182,25,193,27],[182,28,193,30],[182,32,193,34],[182,33,193,35,"connectivityState"],[182,50,193,52],[183,6,194,8],[183,10,194,12],[183,11,194,13,"connectivityState"],[183,28,194,30],[183,31,194,33,"newState"],[183,39,194,41],[184,6,195,8],[184,14,195,16,"newState"],[184,22,195,24],[185,8,196,12],[185,13,196,17,"connectivity_state_1"],[185,33,196,37],[185,34,196,38,"ConnectivityState"],[185,51,196,55],[185,52,196,56,"READY"],[185,57,196,61],[186,10,197,16],[186,14,197,20],[186,15,197,21,"stopBackoff"],[186,26,197,32],[186,27,197,33],[186,28,197,34],[187,10,198,16],[188,8,199,12],[188,13,199,17,"connectivity_state_1"],[188,33,199,37],[188,34,199,38,"ConnectivityState"],[188,51,199,55],[188,52,199,56,"CONNECTING"],[188,62,199,66],[189,10,200,16],[189,14,200,20],[189,15,200,21,"startBackoff"],[189,27,200,33],[189,28,200,34],[189,29,200,35],[190,10,201,16],[190,14,201,20],[190,15,201,21,"startConnectingInternal"],[190,38,201,44],[190,39,201,45],[190,40,201,46],[191,10,202,16],[191,14,202,20],[191,15,202,21,"continueConnecting"],[191,33,202,39],[191,36,202,42],[191,41,202,47],[192,10,203,16],[193,8,204,12],[193,13,204,17,"connectivity_state_1"],[193,33,204,37],[193,34,204,38,"ConnectivityState"],[193,51,204,55],[193,52,204,56,"TRANSIENT_FAILURE"],[193,69,204,73],[194,10,205,16],[194,14,205,20],[194,18,205,24],[194,19,205,25,"channelzEnabled"],[194,34,205,40],[194,38,205,44],[194,42,205,48],[194,43,205,49,"transport"],[194,52,205,58],[194,54,205,60],[195,12,206,20],[195,16,206,24],[195,17,206,25,"childrenTracker"],[195,32,206,40],[195,33,206,41,"unrefChild"],[195,43,206,51],[195,44,206,52],[195,48,206,56],[195,49,206,57,"transport"],[195,58,206,66],[195,59,206,67,"getChannelzRef"],[195,73,206,81],[195,74,206,82],[195,75,206,83],[195,76,206,84],[196,10,207,16],[197,10,208,16],[197,11,208,17,"_a"],[197,13,208,19],[197,16,208,22],[197,20,208,26],[197,21,208,27,"transport"],[197,30,208,36],[197,36,208,42],[197,40,208,46],[197,44,208,50,"_a"],[197,46,208,52],[197,51,208,57],[197,56,208,62],[197,57,208,63],[197,60,208,66],[197,65,208,71],[197,66,208,72],[197,69,208,75,"_a"],[197,71,208,77],[197,72,208,78,"shutdown"],[197,80,208,86],[197,81,208,87],[197,82,208,88],[198,10,209,16],[198,14,209,20],[198,15,209,21,"transport"],[198,24,209,30],[198,27,209,33],[198,31,209,37],[199,10,210,16],[200,0,211,0],[201,0,212,0],[202,10,213,16],[202,14,213,20],[202,15,213,21],[202,19,213,25],[202,20,213,26,"backoffTimeout"],[202,34,213,40],[202,35,213,41,"isRunning"],[202,44,213,50],[202,45,213,51],[202,46,213,52],[202,48,213,54],[203,12,214,20,"process"],[203,19,214,27],[203,20,214,28,"nextTick"],[203,28,214,36],[203,29,214,37],[203,35,214,43],[204,14,215,24],[204,18,215,28],[204,19,215,29,"handleBackoffTimer"],[204,37,215,47],[204,38,215,48],[204,39,215,49],[205,12,216,20],[205,13,216,21],[205,14,216,22],[206,10,217,16],[207,10,218,16],[208,8,219,12],[208,13,219,17,"connectivity_state_1"],[208,33,219,37],[208,34,219,38,"ConnectivityState"],[208,51,219,55],[208,52,219,56,"IDLE"],[208,56,219,60],[209,10,220,16],[209,14,220,20],[209,18,220,24],[209,19,220,25,"channelzEnabled"],[209,34,220,40],[209,38,220,44],[209,42,220,48],[209,43,220,49,"transport"],[209,52,220,58],[209,54,220,60],[210,12,221,20],[210,16,221,24],[210,17,221,25,"childrenTracker"],[210,32,221,40],[210,33,221,41,"unrefChild"],[210,43,221,51],[210,44,221,52],[210,48,221,56],[210,49,221,57,"transport"],[210,58,221,66],[210,59,221,67,"getChannelzRef"],[210,73,221,81],[210,74,221,82],[210,75,221,83],[210,76,221,84],[211,10,222,16],[212,10,223,16],[212,11,223,17,"_b"],[212,13,223,19],[212,16,223,22],[212,20,223,26],[212,21,223,27,"transport"],[212,30,223,36],[212,36,223,42],[212,40,223,46],[212,44,223,50,"_b"],[212,46,223,52],[212,51,223,57],[212,56,223,62],[212,57,223,63],[212,60,223,66],[212,65,223,71],[212,66,223,72],[212,69,223,75,"_b"],[212,71,223,77],[212,72,223,78,"shutdown"],[212,80,223,86],[212,81,223,87],[212,82,223,88],[213,10,224,16],[213,14,224,20],[213,15,224,21,"transport"],[213,24,224,30],[213,27,224,33],[213,31,224,37],[214,10,225,16],[215,8,226,12],[216,10,227,16],[216,16,227,22],[216,20,227,26,"Error"],[216,25,227,31],[216,26,227,32],[216,70,227,76,"newState"],[216,78,227,84],[216,80,227,86],[216,81,227,87],[217,6,228,8],[218,6,229,8],[218,11,229,13],[218,17,229,19,"listener"],[218,25,229,27],[218,29,229,31],[218,33,229,35],[218,34,229,36,"stateListeners"],[218,48,229,50],[218,50,229,52],[219,8,230,12,"listener"],[219,16,230,20],[219,17,230,21],[219,21,230,25],[219,23,230,27,"previousState"],[219,36,230,40],[219,38,230,42,"newState"],[219,46,230,50],[219,48,230,52],[219,52,230,56],[219,53,230,57,"keepaliveTime"],[219,66,230,70],[219,68,230,72,"errorMessage"],[219,80,230,84],[219,81,230,85],[220,6,231,8],[221,6,232,8],[221,13,232,15],[221,17,232,19],[222,4,233,4],[223,4,234,4,"ref"],[223,7,234,7,"ref"],[223,8,234,7],[223,10,234,10],[224,6,235,8],[224,10,235,12],[224,11,235,13,"refTrace"],[224,19,235,21],[224,20,235,22],[224,31,235,33],[224,34,235,36],[224,38,235,40],[224,39,235,41,"refcount"],[224,47,235,49],[224,50,235,52],[224,56,235,58],[224,60,235,62],[224,64,235,66],[224,65,235,67,"refcount"],[224,73,235,75],[224,76,235,78],[224,77,235,79],[224,78,235,80],[224,79,235,81],[225,6,236,8],[225,10,236,12],[225,11,236,13,"refcount"],[225,19,236,21],[225,23,236,25],[225,24,236,26],[226,4,237,4],[227,4,238,4,"unref"],[227,9,238,9,"unref"],[227,10,238,9],[227,12,238,12],[228,6,239,8],[228,10,239,12],[228,11,239,13,"refTrace"],[228,19,239,21],[228,20,239,22],[228,31,239,33],[228,34,239,36],[228,38,239,40],[228,39,239,41,"refcount"],[228,47,239,49],[228,50,239,52],[228,56,239,58],[228,60,239,62],[228,64,239,66],[228,65,239,67,"refcount"],[228,73,239,75],[228,76,239,78],[228,77,239,79],[228,78,239,80],[228,79,239,81],[229,6,240,8],[229,10,240,12],[229,11,240,13,"refcount"],[229,19,240,21],[229,23,240,25],[229,24,240,26],[230,6,241,8],[230,10,241,12],[230,14,241,16],[230,15,241,17,"refcount"],[230,23,241,25],[230,28,241,30],[230,29,241,31],[230,31,241,33],[231,8,242,12],[231,12,242,16],[231,16,242,20],[231,17,242,21,"channelzEnabled"],[231,32,242,36],[231,34,242,38],[232,10,243,16],[232,14,243,20],[232,15,243,21,"channelzTrace"],[232,28,243,34],[232,29,243,35,"addTrace"],[232,37,243,43],[232,38,243,44],[232,47,243,53],[232,49,243,55],[232,64,243,70],[232,65,243,71],[233,8,244,12],[234,8,245,12],[234,12,245,16],[234,16,245,20],[234,17,245,21,"channelzEnabled"],[234,32,245,36],[234,34,245,38],[235,10,246,16],[235,11,246,17],[235,12,246,18],[235,14,246,20,"channelz_1"],[235,24,246,30],[235,25,246,31,"unregisterChannelzRef"],[235,46,246,52],[235,48,246,54],[235,52,246,58],[235,53,246,59,"channelzRef"],[235,64,246,70],[235,65,246,71],[236,8,247,12],[237,8,248,12,"process"],[237,15,248,19],[237,16,248,20,"nextTick"],[237,24,248,28],[237,25,248,29],[237,31,248,35],[238,10,249,16],[238,14,249,20],[238,15,249,21,"transitionToState"],[238,32,249,38],[238,33,249,39],[238,34,249,40,"connectivity_state_1"],[238,54,249,60],[238,55,249,61,"ConnectivityState"],[238,72,249,78],[238,73,249,79,"CONNECTING"],[238,83,249,89],[238,85,249,91,"connectivity_state_1"],[238,105,249,111],[238,106,249,112,"ConnectivityState"],[238,123,249,129],[238,124,249,130,"READY"],[238,129,249,135],[238,130,249,136],[238,132,249,138,"connectivity_state_1"],[238,152,249,158],[238,153,249,159,"ConnectivityState"],[238,170,249,176],[238,171,249,177,"IDLE"],[238,175,249,181],[238,176,249,182],[239,8,250,12],[239,9,250,13],[239,10,250,14],[240,6,251,8],[241,4,252,4],[242,4,253,4,"unrefIfOneRef"],[242,17,253,17,"unrefIfOneRef"],[242,18,253,17],[242,20,253,20],[243,6,254,8],[243,10,254,12],[243,14,254,16],[243,15,254,17,"refcount"],[243,23,254,25],[243,28,254,30],[243,29,254,31],[243,31,254,33],[244,8,255,12],[244,12,255,16],[244,13,255,17,"unref"],[244,18,255,22],[244,19,255,23],[244,20,255,24],[245,8,256,12],[245,15,256,19],[245,19,256,23],[246,6,257,8],[247,6,258,8],[247,13,258,15],[247,18,258,20],[248,4,259,4],[249,4,260,4,"createCall"],[249,14,260,14,"createCall"],[249,15,260,15,"metadata"],[249,23,260,23],[249,25,260,25,"host"],[249,29,260,29],[249,31,260,31,"method"],[249,37,260,37],[249,39,260,39,"listener"],[249,47,260,47],[249,49,260,49],[250,6,261,8],[250,10,261,12],[250,11,261,13],[250,15,261,17],[250,16,261,18,"transport"],[250,25,261,27],[250,27,261,29],[251,8,262,12],[251,14,262,18],[251,18,262,22,"Error"],[251,23,262,27],[251,24,262,28],[251,66,262,70],[251,67,262,71],[252,6,263,8],[253,6,264,8],[253,10,264,12,"statsTracker"],[253,22,264,24],[254,6,265,8],[254,10,265,12],[254,14,265,16],[254,15,265,17,"channelzEnabled"],[254,30,265,32],[254,32,265,34],[255,8,266,12],[255,12,266,16],[255,13,266,17,"callTracker"],[255,24,266,28],[255,25,266,29,"addCallStarted"],[255,39,266,43],[255,40,266,44],[255,41,266,45],[256,8,267,12],[256,12,267,16],[256,13,267,17,"streamTracker"],[256,26,267,30],[256,27,267,31,"addCallStarted"],[256,41,267,45],[256,42,267,46],[256,43,267,47],[257,8,268,12,"statsTracker"],[257,20,268,24],[257,23,268,27],[258,10,269,16,"onCallEnd"],[258,19,269,25],[258,21,269,27,"status"],[258,27,269,33],[258,31,269,37],[259,12,270,20],[259,16,270,24,"status"],[259,22,270,30],[259,23,270,31,"code"],[259,27,270,35],[259,32,270,40,"constants_1"],[259,43,270,51],[259,44,270,52,"Status"],[259,50,270,58],[259,51,270,59,"OK"],[259,53,270,61],[259,55,270,63],[260,14,271,24],[260,18,271,28],[260,19,271,29,"callTracker"],[260,30,271,40],[260,31,271,41,"addCallSucceeded"],[260,47,271,57],[260,48,271,58],[260,49,271,59],[261,12,272,20],[261,13,272,21],[261,19,273,25],[262,14,274,24],[262,18,274,28],[262,19,274,29,"callTracker"],[262,30,274,40],[262,31,274,41,"addCallFailed"],[262,44,274,54],[262,45,274,55],[262,46,274,56],[263,12,275,20],[264,10,276,16],[265,8,277,12],[265,9,277,13],[266,6,278,8],[266,7,278,9],[266,13,279,13],[267,8,280,12,"statsTracker"],[267,20,280,24],[267,23,280,27],[267,24,280,28],[267,25,280,29],[268,6,281,8],[269,6,282,8],[269,13,282,15],[269,17,282,19],[269,18,282,20,"transport"],[269,27,282,29],[269,28,282,30,"createCall"],[269,38,282,40],[269,39,282,41,"metadata"],[269,47,282,49],[269,49,282,51,"host"],[269,53,282,55],[269,55,282,57,"method"],[269,61,282,63],[269,63,282,65,"listener"],[269,71,282,73],[269,73,282,75,"statsTracker"],[269,85,282,87],[269,86,282,88],[270,4,283,4],[271,4,284,4],[272,0,285,0],[273,0,286,0],[274,0,287,0],[275,0,288,0],[276,0,289,0],[277,4,290,4,"startConnecting"],[277,19,290,19,"startConnecting"],[277,20,290,19],[277,22,290,22],[278,6,291,8,"process"],[278,13,291,15],[278,14,291,16,"nextTick"],[278,22,291,24],[278,23,291,25],[278,29,291,31],[279,8,292,12],[280,0,293,0],[281,0,294,0],[282,0,295,0],[283,8,296,12],[283,12,296,16],[283,13,296,17],[283,17,296,21],[283,18,296,22,"transitionToState"],[283,35,296,39],[283,36,296,40],[283,37,296,41,"connectivity_state_1"],[283,57,296,61],[283,58,296,62,"ConnectivityState"],[283,75,296,79],[283,76,296,80,"IDLE"],[283,80,296,84],[283,81,296,85],[283,83,296,87,"connectivity_state_1"],[283,103,296,107],[283,104,296,108,"ConnectivityState"],[283,121,296,125],[283,122,296,126,"CONNECTING"],[283,132,296,136],[283,133,296,137],[283,135,296,139],[284,10,297,16],[284,14,297,20],[284,18,297,24],[284,19,297,25,"connectivityState"],[284,36,297,42],[284,41,297,47,"connectivity_state_1"],[284,61,297,67],[284,62,297,68,"ConnectivityState"],[284,79,297,85],[284,80,297,86,"TRANSIENT_FAILURE"],[284,97,297,103],[284,99,297,105],[285,12,298,20],[285,16,298,24],[285,17,298,25,"continueConnecting"],[285,35,298,43],[285,38,298,46],[285,42,298,50],[286,10,299,16],[287,8,300,12],[288,6,301,8],[288,7,301,9],[288,8,301,10],[289,4,302,4],[290,4,303,4],[291,0,304,0],[292,0,305,0],[293,4,306,4,"getConnectivityState"],[293,24,306,24,"getConnectivityState"],[293,25,306,24],[293,27,306,27],[294,6,307,8],[294,13,307,15],[294,17,307,19],[294,18,307,20,"connectivityState"],[294,35,307,37],[295,4,308,4],[296,4,309,4],[297,0,310,0],[298,0,311,0],[299,0,312,0],[300,0,313,0],[301,4,314,4,"addConnectivityStateListener"],[301,32,314,32,"addConnectivityStateListener"],[301,33,314,33,"listener"],[301,41,314,41],[301,43,314,43],[302,6,315,8],[302,10,315,12],[302,11,315,13,"stateListeners"],[302,25,315,27],[302,26,315,28,"add"],[302,29,315,31],[302,30,315,32,"listener"],[302,38,315,40],[302,39,315,41],[303,4,316,4],[304,4,317,4],[305,0,318,0],[306,0,319,0],[307,0,320,0],[308,0,321,0],[309,4,322,4,"removeConnectivityStateListener"],[309,35,322,35,"removeConnectivityStateListener"],[309,36,322,36,"listener"],[309,44,322,44],[309,46,322,46],[310,6,323,8],[310,10,323,12],[310,11,323,13,"stateListeners"],[310,25,323,27],[310,26,323,28,"delete"],[310,32,323,34],[310,33,323,35,"listener"],[310,41,323,43],[310,42,323,44],[311,4,324,4],[312,4,325,4],[313,0,326,0],[314,0,327,0],[315,4,328,4,"resetBackoff"],[315,16,328,16,"resetBackoff"],[315,17,328,16],[315,19,328,19],[316,6,329,8,"process"],[316,13,329,15],[316,14,329,16,"nextTick"],[316,22,329,24],[316,23,329,25],[316,29,329,31],[317,8,330,12],[317,12,330,16],[317,13,330,17,"backoffTimeout"],[317,27,330,31],[317,28,330,32,"reset"],[317,33,330,37],[317,34,330,38],[317,35,330,39],[318,8,331,12],[318,12,331,16],[318,13,331,17,"transitionToState"],[318,30,331,34],[318,31,331,35],[318,32,331,36,"connectivity_state_1"],[318,52,331,56],[318,53,331,57,"ConnectivityState"],[318,70,331,74],[318,71,331,75,"TRANSIENT_FAILURE"],[318,88,331,92],[318,89,331,93],[318,91,331,95,"connectivity_state_1"],[318,111,331,115],[318,112,331,116,"ConnectivityState"],[318,129,331,133],[318,130,331,134,"CONNECTING"],[318,140,331,144],[318,141,331,145],[319,6,332,8],[319,7,332,9],[319,8,332,10],[320,4,333,4],[321,4,334,4,"getAddress"],[321,14,334,14,"getAddress"],[321,15,334,14],[321,17,334,17],[322,6,335,8],[322,13,335,15],[322,17,335,19],[322,18,335,20,"subchannelAddressString"],[322,41,335,43],[323,4,336,4],[324,4,337,4,"getChannelzRef"],[324,18,337,18,"getChannelzRef"],[324,19,337,18],[324,21,337,21],[325,6,338,8],[325,13,338,15],[325,17,338,19],[325,18,338,20,"channelzRef"],[325,29,338,31],[326,4,339,4],[327,4,340,4,"getRealSubchannel"],[327,21,340,21,"getRealSubchannel"],[327,22,340,21],[327,24,340,24],[328,6,341,8],[328,13,341,15],[328,17,341,19],[329,4,342,4],[330,4,343,4,"realSubchannelEquals"],[330,24,343,24,"realSubchannelEquals"],[330,25,343,25,"other"],[330,30,343,30],[330,32,343,32],[331,6,344,8],[331,13,344,15,"other"],[331,18,344,20],[331,19,344,21,"getRealSubchannel"],[331,36,344,38],[331,37,344,39],[331,38,344,40],[331,43,344,45],[331,47,344,49],[332,4,345,4],[333,4,346,4,"throttleKeepalive"],[333,21,346,21,"throttleKeepalive"],[333,22,346,22,"newKeepaliveTime"],[333,38,346,38],[333,40,346,40],[334,6,347,8],[334,10,347,12,"newKeepaliveTime"],[334,26,347,28],[334,29,347,31],[334,33,347,35],[334,34,347,36,"keepaliveTime"],[334,47,347,49],[334,49,347,51],[335,8,348,12],[335,12,348,16],[335,13,348,17,"keepaliveTime"],[335,26,348,30],[335,29,348,33,"newKeepaliveTime"],[335,45,348,49],[336,6,349,8],[337,4,350,4],[338,2,351,0],[339,2,352,0,"exports"],[339,9,352,7],[339,10,352,8,"Subchannel"],[339,20,352,18],[339,23,352,21,"Subchannel"],[339,33,352,31],[340,0,352,32],[340,3]],"functionMap":{"names":["<global>","Subchannel","Subchannel#constructor","backoff_timeout_1.BackoffTimeout$argument_0","<anonymous>","Subchannel#getChannelzInfo","Subchannel#trace","Subchannel#refTrace","Subchannel#handleBackoffTimer","Subchannel#startBackoff","Subchannel#stopBackoff","Subchannel#startConnectingInternal","connector.connect.then$argument_0","transport.addDisconnectListener$argument_0","connector.connect.then$argument_1","Subchannel#transitionToState","process.nextTick$argument_0","Subchannel#ref","Subchannel#unref","Subchannel#unrefIfOneRef","Subchannel#createCall","statsTracker.onCallEnd","Subchannel#startConnecting","Subchannel#getConnectivityState","Subchannel#addConnectivityStateListener","Subchannel#removeConnectivityStateListener","Subchannel#resetBackoff","Subchannel#getAddress","Subchannel#getChannelzRef","Subchannel#getRealSubchannel","Subchannel#realSubchannelEquals","Subchannel#throttleKeepalive"],"mappings":"AAA;AC+B;ICW;mECyC;SDE;oGEQ,4BF;KDM;IIC;KJQ;IKC;KLO;IMC;KNO;IOC;KPO;IQI;KRE;ISC;KTG;IUC;kBCQ;gDCM;iBDM;SDO,EG;SHE;KVC;IcQ;qCCgC;qBDE;KdiB;IgBC;KhBG;IiBC;6BFU;aEE;KjBE;IkBC;KlBM;ImBC;2BCS;iBDO;KnBO;IqBO;yBNC;SMU;KrBC;IsBI;KtBE;IuBM;KvBE;IwBM;KxBE;IyBI;yBVC;SUG;KzBC;I0BC;K1BE;I2BC;K3BE;I4BC;K5BE;I6BC;K7BE;I8BC;K9BI;CDC"}},"type":"js/module"}]}