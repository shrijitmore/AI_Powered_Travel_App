{"dependencies":[{"name":"./field","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":71},"end":{"line":5,"column":30,"index":89}}],"key":"NvI2xXoYDS7eVNBPYDi7RsbVioc=","exportNames":["*"]}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":209},"end":{"line":8,"column":32,"index":227}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":14,"index":243},"end":{"line":9,"column":31,"index":260}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = MapField;\n\n  // extends Field\n  var Field = require(_dependencyMap[0], \"./field\");\n  ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n  var types = require(_dependencyMap[1], \"./types\"),\n    util = require(_dependencyMap[2], \"./util\");\n\n  /**\n   * Constructs a new map field instance.\n   * @classdesc Reflected map field.\n   * @extends FieldBase\n   * @constructor\n   * @param {string} name Unique name within its namespace\n   * @param {number} id Unique id within its namespace\n   * @param {string} keyType Key type\n   * @param {string} type Value type\n   * @param {Object.<string,*>} [options] Declared options\n   * @param {string} [comment] Comment associated with this field\n   */\n  function MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n  }\n\n  /**\n   * Map field descriptor.\n   * @interface IMapField\n   * @extends {IField}\n   * @property {string} keyType Key type\n   */\n\n  /**\n   * Extension map field descriptor.\n   * @interface IExtensionMapField\n   * @extends IMapField\n   * @property {string} extend Extended type\n   */\n\n  /**\n   * Constructs a map field from a map field descriptor.\n   * @param {string} name Field name\n   * @param {IMapField} json Map field descriptor\n   * @returns {MapField} Created map field\n   * @throws {TypeError} If arguments are invalid\n   */\n  MapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n  };\n\n  /**\n   * Converts this map field to a map field descriptor.\n   * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n   * @returns {IMapField} Map field descriptor\n   */\n  MapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\"keyType\", this.keyType, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n  };\n\n  /**\n   * @override\n   */\n  MapField.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n    return Field.prototype.resolve.call(this);\n  };\n\n  /**\n   * Map field decorator (TypeScript).\n   * @name MapField.d\n   * @function\n   * @param {number} fieldId Field id\n   * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n   * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n   * @returns {FieldDecorator} Decorator function\n   * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n   */\n  MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n    return function mapFieldDecorator(prototype, fieldName) {\n      util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n  };\n});","lineCount":112,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"MapField"],[4,27,2,25],[6,2,4,0],[7,2,5,0],[7,6,5,4,"Field"],[7,11,5,9],[7,14,5,12,"require"],[7,21,5,19],[7,22,5,19,"_dependencyMap"],[7,36,5,19],[7,50,5,29],[7,51,5,30],[8,2,6,0],[8,3,6,1],[8,4,6,2,"MapField"],[8,12,6,10],[8,13,6,11,"prototype"],[8,22,6,20],[8,25,6,23,"Object"],[8,31,6,29],[8,32,6,30,"create"],[8,38,6,36],[8,39,6,37,"Field"],[8,44,6,42],[8,45,6,43,"prototype"],[8,54,6,52],[8,55,6,53],[8,57,6,55,"constructor"],[8,68,6,66],[8,71,6,69,"MapField"],[8,79,6,77],[8,81,6,79,"className"],[8,90,6,88],[8,93,6,91],[8,103,6,101],[9,2,8,0],[9,6,8,4,"types"],[9,11,8,9],[9,14,8,14,"require"],[9,21,8,21],[9,22,8,21,"_dependencyMap"],[9,36,8,21],[9,50,8,31],[9,51,8,32],[10,4,9,4,"util"],[10,8,9,8],[10,11,9,14,"require"],[10,18,9,21],[10,19,9,21,"_dependencyMap"],[10,33,9,21],[10,46,9,30],[10,47,9,31],[12,2,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,2,23,0],[24,11,23,9,"MapField"],[24,19,23,17,"MapField"],[24,20,23,18,"name"],[24,24,23,22],[24,26,23,24,"id"],[24,28,23,26],[24,30,23,28,"keyType"],[24,37,23,35],[24,39,23,37,"type"],[24,43,23,41],[24,45,23,43,"options"],[24,52,23,50],[24,54,23,52,"comment"],[24,61,23,59],[24,63,23,61],[25,4,24,4,"Field"],[25,9,24,9],[25,10,24,10,"call"],[25,14,24,14],[25,15,24,15],[25,19,24,19],[25,21,24,21,"name"],[25,25,24,25],[25,27,24,27,"id"],[25,29,24,29],[25,31,24,31,"type"],[25,35,24,35],[25,37,24,37,"undefined"],[25,46,24,46],[25,48,24,48,"undefined"],[25,57,24,57],[25,59,24,59,"options"],[25,66,24,66],[25,68,24,68,"comment"],[25,75,24,75],[25,76,24,76],[27,4,26,4],[28,4,27,4],[28,8,27,8],[28,9,27,9,"util"],[28,13,27,13],[28,14,27,14,"isString"],[28,22,27,22],[28,23,27,23,"keyType"],[28,30,27,30],[28,31,27,31],[28,33,28,8],[28,39,28,14,"TypeError"],[28,48,28,23],[28,49,28,24],[28,75,28,50],[28,76,28,51],[30,4,30,4],[31,0,31,0],[32,0,32,0],[33,0,33,0],[34,4,34,4],[34,8,34,8],[34,9,34,9,"keyType"],[34,16,34,16],[34,19,34,19,"keyType"],[34,26,34,26],[34,27,34,27],[34,28,34,28],[36,4,36,4],[37,0,37,0],[38,0,38,0],[39,0,39,0],[40,4,40,4],[40,8,40,8],[40,9,40,9,"resolvedKeyType"],[40,24,40,24],[40,27,40,27],[40,31,40,31],[42,4,42,4],[43,4,43,4],[43,8,43,8],[43,9,43,9,"map"],[43,12,43,12],[43,15,43,15],[43,19,43,19],[44,2,44,0],[46,2,46,0],[47,0,47,0],[48,0,48,0],[49,0,49,0],[50,0,50,0],[51,0,51,0],[53,2,53,0],[54,0,54,0],[55,0,55,0],[56,0,56,0],[57,0,57,0],[58,0,58,0],[60,2,60,0],[61,0,61,0],[62,0,62,0],[63,0,63,0],[64,0,64,0],[65,0,65,0],[66,0,66,0],[67,2,67,0,"MapField"],[67,10,67,8],[67,11,67,9,"fromJSON"],[67,19,67,17],[67,22,67,20],[67,31,67,29,"fromJSON"],[67,39,67,37,"fromJSON"],[67,40,67,38,"name"],[67,44,67,42],[67,46,67,44,"json"],[67,50,67,48],[67,52,67,50],[68,4,68,4],[68,11,68,11],[68,15,68,15,"MapField"],[68,23,68,23],[68,24,68,24,"name"],[68,28,68,28],[68,30,68,30,"json"],[68,34,68,34],[68,35,68,35,"id"],[68,37,68,37],[68,39,68,39,"json"],[68,43,68,43],[68,44,68,44,"keyType"],[68,51,68,51],[68,53,68,53,"json"],[68,57,68,57],[68,58,68,58,"type"],[68,62,68,62],[68,64,68,64,"json"],[68,68,68,68],[68,69,68,69,"options"],[68,76,68,76],[68,78,68,78,"json"],[68,82,68,82],[68,83,68,83,"comment"],[68,90,68,90],[68,91,68,91],[69,2,69,0],[69,3,69,1],[71,2,71,0],[72,0,72,0],[73,0,73,0],[74,0,74,0],[75,0,75,0],[76,2,76,0,"MapField"],[76,10,76,8],[76,11,76,9,"prototype"],[76,20,76,18],[76,21,76,19,"toJSON"],[76,27,76,25],[76,30,76,28],[76,39,76,37,"toJSON"],[76,45,76,43,"toJSON"],[76,46,76,44,"toJSONOptions"],[76,59,76,57],[76,61,76,59],[77,4,77,4],[77,8,77,8,"keepComments"],[77,20,77,20],[77,23,77,23,"toJSONOptions"],[77,36,77,36],[77,39,77,39,"Boolean"],[77,46,77,46],[77,47,77,47,"toJSONOptions"],[77,60,77,60],[77,61,77,61,"keepComments"],[77,73,77,73],[77,74,77,74],[77,77,77,77],[77,82,77,82],[78,4,78,4],[78,11,78,11,"util"],[78,15,78,15],[78,16,78,16,"toObject"],[78,24,78,24],[78,25,78,25],[78,26,79,8],[78,35,79,17],[78,37,79,20],[78,41,79,24],[78,42,79,25,"keyType"],[78,49,79,32],[78,51,80,8],[78,57,80,14],[78,59,80,20],[78,63,80,24],[78,64,80,25,"type"],[78,68,80,29],[78,70,81,8],[78,74,81,12],[78,76,81,20],[78,80,81,24],[78,81,81,25,"id"],[78,83,81,27],[78,85,82,8],[78,93,82,16],[78,95,82,20],[78,99,82,24],[78,100,82,25,"extend"],[78,106,82,31],[78,108,83,8],[78,117,83,17],[78,119,83,20],[78,123,83,24],[78,124,83,25,"options"],[78,131,83,32],[78,133,84,8],[78,142,84,17],[78,144,84,20,"keepComments"],[78,156,84,32],[78,159,84,35],[78,163,84,39],[78,164,84,40,"comment"],[78,171,84,47],[78,174,84,50,"undefined"],[78,183,84,59],[78,184,85,5],[78,185,85,6],[79,2,86,0],[79,3,86,1],[81,2,88,0],[82,0,89,0],[83,0,90,0],[84,2,91,0,"MapField"],[84,10,91,8],[84,11,91,9,"prototype"],[84,20,91,18],[84,21,91,19,"resolve"],[84,28,91,26],[84,31,91,29],[84,40,91,38,"resolve"],[84,47,91,45,"resolve"],[84,48,91,45],[84,50,91,48],[85,4,92,4],[85,8,92,8],[85,12,92,12],[85,13,92,13,"resolved"],[85,21,92,21],[85,23,93,8],[85,30,93,15],[85,34,93,19],[87,4,95,4],[88,4,96,4],[88,8,96,8,"types"],[88,13,96,13],[88,14,96,14,"mapKey"],[88,20,96,20],[88,21,96,21],[88,25,96,25],[88,26,96,26,"keyType"],[88,33,96,33],[88,34,96,34],[88,39,96,39,"undefined"],[88,48,96,48],[88,50,97,8],[88,56,97,14,"Error"],[88,61,97,19],[88,62,97,20],[88,82,97,40],[88,85,97,43],[88,89,97,47],[88,90,97,48,"keyType"],[88,97,97,55],[88,98,97,56],[89,4,99,4],[89,11,99,11,"Field"],[89,16,99,16],[89,17,99,17,"prototype"],[89,26,99,26],[89,27,99,27,"resolve"],[89,34,99,34],[89,35,99,35,"call"],[89,39,99,39],[89,40,99,40],[89,44,99,44],[89,45,99,45],[90,2,100,0],[90,3,100,1],[92,2,102,0],[93,0,103,0],[94,0,104,0],[95,0,105,0],[96,0,106,0],[97,0,107,0],[98,0,108,0],[99,0,109,0],[100,0,110,0],[101,0,111,0],[102,2,112,0,"MapField"],[102,10,112,8],[102,11,112,9,"d"],[102,12,112,10],[102,15,112,13],[102,24,112,22,"decorateMapField"],[102,40,112,38,"decorateMapField"],[102,41,112,39,"fieldId"],[102,48,112,46],[102,50,112,48,"fieldKeyType"],[102,62,112,60],[102,64,112,62,"fieldValueType"],[102,78,112,76],[102,80,112,78],[103,4,114,4],[104,4,115,4],[104,8,115,8],[104,15,115,15,"fieldValueType"],[104,29,115,29],[104,34,115,34],[104,44,115,44],[104,46,116,8,"fieldValueType"],[104,60,116,22],[104,63,116,25,"util"],[104,67,116,29],[104,68,116,30,"decorateType"],[104,80,116,42],[104,81,116,43,"fieldValueType"],[104,95,116,57],[104,96,116,58],[104,97,116,59,"name"],[104,101,116,63],[106,4,118,4],[107,4,118,4],[107,9,119,9],[107,13,119,13,"fieldValueType"],[107,27,119,27],[107,31,119,31],[107,38,119,38,"fieldValueType"],[107,52,119,52],[107,57,119,57],[107,65,119,65],[107,67,120,8,"fieldValueType"],[107,81,120,22],[107,84,120,25,"util"],[107,88,120,29],[107,89,120,30,"decorateEnum"],[107,101,120,42],[107,102,120,43,"fieldValueType"],[107,116,120,57],[107,117,120,58],[107,118,120,59,"name"],[107,122,120,63],[108,4,122,4],[108,11,122,11],[108,20,122,20,"mapFieldDecorator"],[108,37,122,37,"mapFieldDecorator"],[108,38,122,38,"prototype"],[108,47,122,47],[108,49,122,49,"fieldName"],[108,58,122,58],[108,60,122,60],[109,6,123,8,"util"],[109,10,123,12],[109,11,123,13,"decorateType"],[109,23,123,25],[109,24,123,26,"prototype"],[109,33,123,35],[109,34,123,36,"constructor"],[109,45,123,47],[109,46,123,48],[109,47,124,13,"add"],[109,50,124,16],[109,51,124,17],[109,55,124,21,"MapField"],[109,63,124,29],[109,64,124,30,"fieldName"],[109,73,124,39],[109,75,124,41,"fieldId"],[109,82,124,48],[109,84,124,50,"fieldKeyType"],[109,96,124,62],[109,98,124,64,"fieldValueType"],[109,112,124,78],[109,113,124,79],[109,114,124,80],[110,4,125,4],[110,5,125,5],[111,2,126,0],[111,3,126,1],[112,0,126,2],[112,3]],"functionMap":{"names":["<global>","MapField","fromJSON","toJSON","resolve","decorateMapField","mapFieldDecorator"],"mappings":"AAA;ACsB;CDqB;oBEuB;CFE;4BGO;CHU;6BIK;CJS;aKY;WCU;KDG;CLC"}},"type":"js/module"}]}