{"dependencies":[{"name":"./load-balancer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":24,"index":758},"end":{"line":20,"column":50,"index":784}}],"key":"uOBAJTyNQHYWLk8tq5Ek7vETkD0=","exportNames":["*"]}},{"name":"./connectivity-state","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":29,"index":815},"end":{"line":21,"column":60,"index":846}}],"key":"jyxLDTe7V7Ou6ov9nXyoEe1g9Sg=","exportNames":["*"]}},{"name":"./picker","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":17,"index":865},"end":{"line":22,"column":36,"index":884}}],"key":"drq9s9jHKAQmdw2pWLLHD5nwu4I=","exportNames":["*"]}},{"name":"./subchannel-address","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":29,"index":915},"end":{"line":23,"column":60,"index":946}}],"key":"s7maFfe6oUZ6E4vQAG2rWwUHpfM=","exportNames":["*"]}},{"name":"./logging","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":16,"index":964},"end":{"line":24,"column":36,"index":984}}],"key":"IuCQ7u+XFj9mcNQiMAuOpQn/EDM=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":25,"column":20,"index":1006},"end":{"line":25,"column":42,"index":1028}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.setup = exports.RoundRobinLoadBalancer = void 0;\n  const load_balancer_1 = require(_dependencyMap[0], \"./load-balancer\");\n  const connectivity_state_1 = require(_dependencyMap[1], \"./connectivity-state\");\n  const picker_1 = require(_dependencyMap[2], \"./picker\");\n  const subchannel_address_1 = require(_dependencyMap[3], \"./subchannel-address\");\n  const logging = require(_dependencyMap[4], \"./logging\");\n  const constants_1 = require(_dependencyMap[5], \"./constants\");\n  const TRACER_NAME = 'round_robin';\n  function trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n  }\n  const TYPE_NAME = 'round_robin';\n  class RoundRobinLoadBalancingConfig {\n    getLoadBalancerName() {\n      return TYPE_NAME;\n    }\n    constructor() {}\n    toJsonObject() {\n      return {\n        [TYPE_NAME]: {}\n      };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n      return new RoundRobinLoadBalancingConfig();\n    }\n  }\n  class RoundRobinPicker {\n    constructor(subchannelList, nextIndex = 0) {\n      this.subchannelList = subchannelList;\n      this.nextIndex = nextIndex;\n    }\n    pick(pickArgs) {\n      const pickedSubchannel = this.subchannelList[this.nextIndex];\n      this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;\n      return {\n        pickResultType: picker_1.PickResultType.COMPLETE,\n        subchannel: pickedSubchannel,\n        status: null,\n        onCallStarted: null,\n        onCallEnded: null\n      };\n    }\n    /**\n     * Check what the next subchannel returned would be. Used by the load\n     * balancer implementation to preserve this part of the picker state if\n     * possible when a subchannel connects or disconnects.\n     */\n    peekNextSubchannel() {\n      return this.subchannelList[this.nextIndex];\n    }\n  }\n  class RoundRobinLoadBalancer {\n    constructor(channelControlHelper) {\n      this.channelControlHelper = channelControlHelper;\n      this.subchannels = [];\n      this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n      this.currentReadyPicker = null;\n      this.lastError = null;\n      this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\n        this.calculateAndUpdateState();\n        if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE || newState === connectivity_state_1.ConnectivityState.IDLE) {\n          if (errorMessage) {\n            this.lastError = errorMessage;\n          }\n          this.channelControlHelper.requestReresolution();\n          subchannel.startConnecting();\n        }\n      };\n    }\n    countSubchannelsWithState(state) {\n      return this.subchannels.filter(subchannel => subchannel.getConnectivityState() === state).length;\n    }\n    calculateAndUpdateState() {\n      if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\n        const readySubchannels = this.subchannels.filter(subchannel => subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n        let index = 0;\n        if (this.currentReadyPicker !== null) {\n          index = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());\n          if (index < 0) {\n            index = 0;\n          }\n        }\n        this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index));\n      } else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\n        this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n      } else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\n        this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n          details: `No connection established. Last error: ${this.lastError}`\n        }));\n      } else {\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n      }\n    }\n    updateState(newState, picker) {\n      trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n      if (newState === connectivity_state_1.ConnectivityState.READY) {\n        this.currentReadyPicker = picker;\n      } else {\n        this.currentReadyPicker = null;\n      }\n      this.currentState = newState;\n      this.channelControlHelper.updateState(newState, picker);\n    }\n    resetSubchannelList() {\n      for (const subchannel of this.subchannels) {\n        subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n        subchannel.unref();\n        this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n      }\n      this.subchannels = [];\n    }\n    updateAddressList(addressList, lbConfig) {\n      this.resetSubchannelList();\n      trace('Connect to address list ' + addressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)));\n      this.subchannels = addressList.map(address => this.channelControlHelper.createSubchannel(address, {}));\n      for (const subchannel of this.subchannels) {\n        subchannel.ref();\n        subchannel.addConnectivityStateListener(this.subchannelStateListener);\n        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        const subchannelState = subchannel.getConnectivityState();\n        if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n          subchannel.startConnecting();\n        }\n      }\n      this.calculateAndUpdateState();\n    }\n    exitIdle() {\n      for (const subchannel of this.subchannels) {\n        subchannel.startConnecting();\n      }\n    }\n    resetBackoff() {\n      /* The pick first load balancer does not have a connection backoff, so this\n       * does nothing */\n    }\n    destroy() {\n      this.resetSubchannelList();\n    }\n    getTypeName() {\n      return TYPE_NAME;\n    }\n  }\n  exports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\n  function setup() {\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n  }\n  exports.setup = setup;\n});","lineCount":171,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"setup"],[23,15,19,13],[23,18,19,16,"exports"],[23,25,19,23],[23,26,19,24,"RoundRobinLoadBalancer"],[23,48,19,46],[23,51,19,49],[23,56,19,54],[23,57,19,55],[24,2,20,0],[24,8,20,6,"load_balancer_1"],[24,23,20,21],[24,26,20,24,"require"],[24,33,20,31],[24,34,20,31,"_dependencyMap"],[24,48,20,31],[24,70,20,49],[24,71,20,50],[25,2,21,0],[25,8,21,6,"connectivity_state_1"],[25,28,21,26],[25,31,21,29,"require"],[25,38,21,36],[25,39,21,36,"_dependencyMap"],[25,53,21,36],[25,80,21,59],[25,81,21,60],[26,2,22,0],[26,8,22,6,"picker_1"],[26,16,22,14],[26,19,22,17,"require"],[26,26,22,24],[26,27,22,24,"_dependencyMap"],[26,41,22,24],[26,56,22,35],[26,57,22,36],[27,2,23,0],[27,8,23,6,"subchannel_address_1"],[27,28,23,26],[27,31,23,29,"require"],[27,38,23,36],[27,39,23,36,"_dependencyMap"],[27,53,23,36],[27,80,23,59],[27,81,23,60],[28,2,24,0],[28,8,24,6,"logging"],[28,15,24,13],[28,18,24,16,"require"],[28,25,24,23],[28,26,24,23,"_dependencyMap"],[28,40,24,23],[28,56,24,35],[28,57,24,36],[29,2,25,0],[29,8,25,6,"constants_1"],[29,19,25,17],[29,22,25,20,"require"],[29,29,25,27],[29,30,25,27,"_dependencyMap"],[29,44,25,27],[29,62,25,41],[29,63,25,42],[30,2,26,0],[30,8,26,6,"TRACER_NAME"],[30,19,26,17],[30,22,26,20],[30,35,26,33],[31,2,27,0],[31,11,27,9,"trace"],[31,16,27,14,"trace"],[31,17,27,15,"text"],[31,21,27,19],[31,23,27,21],[32,4,28,4,"logging"],[32,11,28,11],[32,12,28,12,"trace"],[32,17,28,17],[32,18,28,18,"constants_1"],[32,29,28,29],[32,30,28,30,"LogVerbosity"],[32,42,28,42],[32,43,28,43,"DEBUG"],[32,48,28,48],[32,50,28,50,"TRACER_NAME"],[32,61,28,61],[32,63,28,63,"text"],[32,67,28,67],[32,68,28,68],[33,2,29,0],[34,2,30,0],[34,8,30,6,"TYPE_NAME"],[34,17,30,15],[34,20,30,18],[34,33,30,31],[35,2,31,0],[35,8,31,6,"RoundRobinLoadBalancingConfig"],[35,37,31,35],[35,38,31,36],[36,4,32,4,"getLoadBalancerName"],[36,23,32,23,"getLoadBalancerName"],[36,24,32,23],[36,26,32,26],[37,6,33,8],[37,13,33,15,"TYPE_NAME"],[37,22,33,24],[38,4,34,4],[39,4,35,4,"constructor"],[39,15,35,15,"constructor"],[39,16,35,15],[39,18,35,18],[39,19,35,20],[40,4,36,4,"toJsonObject"],[40,16,36,16,"toJsonObject"],[40,17,36,16],[40,19,36,19],[41,6,37,8],[41,13,37,15],[42,8,38,12],[42,9,38,13,"TYPE_NAME"],[42,18,38,22],[42,21,38,25],[42,22,38,26],[43,6,39,8],[43,7,39,9],[44,4,40,4],[45,4,41,4],[46,4,42,4],[46,11,42,11,"createFromJson"],[46,25,42,25,"createFromJson"],[46,26,42,26,"obj"],[46,29,42,29],[46,31,42,31],[47,6,43,8],[47,13,43,15],[47,17,43,19,"RoundRobinLoadBalancingConfig"],[47,46,43,48],[47,47,43,49],[47,48,43,50],[48,4,44,4],[49,2,45,0],[50,2,46,0],[50,8,46,6,"RoundRobinPicker"],[50,24,46,22],[50,25,46,23],[51,4,47,4,"constructor"],[51,15,47,15,"constructor"],[51,16,47,16,"subchannelList"],[51,30,47,30],[51,32,47,32,"nextIndex"],[51,41,47,41],[51,44,47,44],[51,45,47,45],[51,47,47,47],[52,6,48,8],[52,10,48,12],[52,11,48,13,"subchannelList"],[52,25,48,27],[52,28,48,30,"subchannelList"],[52,42,48,44],[53,6,49,8],[53,10,49,12],[53,11,49,13,"nextIndex"],[53,20,49,22],[53,23,49,25,"nextIndex"],[53,32,49,34],[54,4,50,4],[55,4,51,4,"pick"],[55,8,51,8,"pick"],[55,9,51,9,"pickArgs"],[55,17,51,17],[55,19,51,19],[56,6,52,8],[56,12,52,14,"pickedSubchannel"],[56,28,52,30],[56,31,52,33],[56,35,52,37],[56,36,52,38,"subchannelList"],[56,50,52,52],[56,51,52,53],[56,55,52,57],[56,56,52,58,"nextIndex"],[56,65,52,67],[56,66,52,68],[57,6,53,8],[57,10,53,12],[57,11,53,13,"nextIndex"],[57,20,53,22],[57,23,53,25],[57,24,53,26],[57,28,53,30],[57,29,53,31,"nextIndex"],[57,38,53,40],[57,41,53,43],[57,42,53,44],[57,46,53,48],[57,50,53,52],[57,51,53,53,"subchannelList"],[57,65,53,67],[57,66,53,68,"length"],[57,72,53,74],[58,6,54,8],[58,13,54,15],[59,8,55,12,"pickResultType"],[59,22,55,26],[59,24,55,28,"picker_1"],[59,32,55,36],[59,33,55,37,"PickResultType"],[59,47,55,51],[59,48,55,52,"COMPLETE"],[59,56,55,60],[60,8,56,12,"subchannel"],[60,18,56,22],[60,20,56,24,"pickedSubchannel"],[60,36,56,40],[61,8,57,12,"status"],[61,14,57,18],[61,16,57,20],[61,20,57,24],[62,8,58,12,"onCallStarted"],[62,21,58,25],[62,23,58,27],[62,27,58,31],[63,8,59,12,"onCallEnded"],[63,19,59,23],[63,21,59,25],[64,6,60,8],[64,7,60,9],[65,4,61,4],[66,4,62,4],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,4,67,4,"peekNextSubchannel"],[71,22,67,22,"peekNextSubchannel"],[71,23,67,22],[71,25,67,25],[72,6,68,8],[72,13,68,15],[72,17,68,19],[72,18,68,20,"subchannelList"],[72,32,68,34],[72,33,68,35],[72,37,68,39],[72,38,68,40,"nextIndex"],[72,47,68,49],[72,48,68,50],[73,4,69,4],[74,2,70,0],[75,2,71,0],[75,8,71,6,"RoundRobinLoadBalancer"],[75,30,71,28],[75,31,71,29],[76,4,72,4,"constructor"],[76,15,72,15,"constructor"],[76,16,72,16,"channelControlHelper"],[76,36,72,36],[76,38,72,38],[77,6,73,8],[77,10,73,12],[77,11,73,13,"channelControlHelper"],[77,31,73,33],[77,34,73,36,"channelControlHelper"],[77,54,73,56],[78,6,74,8],[78,10,74,12],[78,11,74,13,"subchannels"],[78,22,74,24],[78,25,74,27],[78,27,74,29],[79,6,75,8],[79,10,75,12],[79,11,75,13,"currentState"],[79,23,75,25],[79,26,75,28,"connectivity_state_1"],[79,46,75,48],[79,47,75,49,"ConnectivityState"],[79,64,75,66],[79,65,75,67,"IDLE"],[79,69,75,71],[80,6,76,8],[80,10,76,12],[80,11,76,13,"currentReadyPicker"],[80,29,76,31],[80,32,76,34],[80,36,76,38],[81,6,77,8],[81,10,77,12],[81,11,77,13,"lastError"],[81,20,77,22],[81,23,77,25],[81,27,77,29],[82,6,78,8],[82,10,78,12],[82,11,78,13,"subchannelStateListener"],[82,34,78,36],[82,37,78,39],[82,38,78,40,"subchannel"],[82,48,78,50],[82,50,78,52,"previousState"],[82,63,78,65],[82,65,78,67,"newState"],[82,73,78,75],[82,75,78,77,"keepaliveTime"],[82,88,78,90],[82,90,78,92,"errorMessage"],[82,102,78,104],[82,107,78,109],[83,8,79,12],[83,12,79,16],[83,13,79,17,"calculateAndUpdateState"],[83,36,79,40],[83,37,79,41],[83,38,79,42],[84,8,80,12],[84,12,80,16,"newState"],[84,20,80,24],[84,25,80,29,"connectivity_state_1"],[84,45,80,49],[84,46,80,50,"ConnectivityState"],[84,63,80,67],[84,64,80,68,"TRANSIENT_FAILURE"],[84,81,80,85],[84,85,81,16,"newState"],[84,93,81,24],[84,98,81,29,"connectivity_state_1"],[84,118,81,49],[84,119,81,50,"ConnectivityState"],[84,136,81,67],[84,137,81,68,"IDLE"],[84,141,81,72],[84,143,81,74],[85,10,82,16],[85,14,82,20,"errorMessage"],[85,26,82,32],[85,28,82,34],[86,12,83,20],[86,16,83,24],[86,17,83,25,"lastError"],[86,26,83,34],[86,29,83,37,"errorMessage"],[86,41,83,49],[87,10,84,16],[88,10,85,16],[88,14,85,20],[88,15,85,21,"channelControlHelper"],[88,35,85,41],[88,36,85,42,"requestReresolution"],[88,55,85,61],[88,56,85,62],[88,57,85,63],[89,10,86,16,"subchannel"],[89,20,86,26],[89,21,86,27,"startConnecting"],[89,36,86,42],[89,37,86,43],[89,38,86,44],[90,8,87,12],[91,6,88,8],[91,7,88,9],[92,4,89,4],[93,4,90,4,"countSubchannelsWithState"],[93,29,90,29,"countSubchannelsWithState"],[93,30,90,30,"state"],[93,35,90,35],[93,37,90,37],[94,6,91,8],[94,13,91,15],[94,17,91,19],[94,18,91,20,"subchannels"],[94,29,91,31],[94,30,91,32,"filter"],[94,36,91,38],[94,37,91,39,"subchannel"],[94,47,91,49],[94,51,91,53,"subchannel"],[94,61,91,63],[94,62,91,64,"getConnectivityState"],[94,82,91,84],[94,83,91,85],[94,84,91,86],[94,89,91,91,"state"],[94,94,91,96],[94,95,91,97],[94,96,91,98,"length"],[94,102,91,104],[95,4,92,4],[96,4,93,4,"calculateAndUpdateState"],[96,27,93,27,"calculateAndUpdateState"],[96,28,93,27],[96,30,93,30],[97,6,94,8],[97,10,94,12],[97,14,94,16],[97,15,94,17,"countSubchannelsWithState"],[97,40,94,42],[97,41,94,43,"connectivity_state_1"],[97,61,94,63],[97,62,94,64,"ConnectivityState"],[97,79,94,81],[97,80,94,82,"READY"],[97,85,94,87],[97,86,94,88],[97,89,94,91],[97,90,94,92],[97,92,94,94],[98,8,95,12],[98,14,95,18,"readySubchannels"],[98,30,95,34],[98,33,95,37],[98,37,95,41],[98,38,95,42,"subchannels"],[98,49,95,53],[98,50,95,54,"filter"],[98,56,95,60],[98,57,95,61,"subchannel"],[98,67,95,71],[98,71,95,75,"subchannel"],[98,81,95,85],[98,82,95,86,"getConnectivityState"],[98,102,95,106],[98,103,95,107],[98,104,95,108],[98,109,95,113,"connectivity_state_1"],[98,129,95,133],[98,130,95,134,"ConnectivityState"],[98,147,95,151],[98,148,95,152,"READY"],[98,153,95,157],[98,154,95,158],[99,8,96,12],[99,12,96,16,"index"],[99,17,96,21],[99,20,96,24],[99,21,96,25],[100,8,97,12],[100,12,97,16],[100,16,97,20],[100,17,97,21,"currentReadyPicker"],[100,35,97,39],[100,40,97,44],[100,44,97,48],[100,46,97,50],[101,10,98,16,"index"],[101,15,98,21],[101,18,98,24,"readySubchannels"],[101,34,98,40],[101,35,98,41,"indexOf"],[101,42,98,48],[101,43,98,49],[101,47,98,53],[101,48,98,54,"currentReadyPicker"],[101,66,98,72],[101,67,98,73,"peekNextSubchannel"],[101,85,98,91],[101,86,98,92],[101,87,98,93],[101,88,98,94],[102,10,99,16],[102,14,99,20,"index"],[102,19,99,25],[102,22,99,28],[102,23,99,29],[102,25,99,31],[103,12,100,20,"index"],[103,17,100,25],[103,20,100,28],[103,21,100,29],[104,10,101,16],[105,8,102,12],[106,8,103,12],[106,12,103,16],[106,13,103,17,"updateState"],[106,24,103,28],[106,25,103,29,"connectivity_state_1"],[106,45,103,49],[106,46,103,50,"ConnectivityState"],[106,63,103,67],[106,64,103,68,"READY"],[106,69,103,73],[106,71,103,75],[106,75,103,79,"RoundRobinPicker"],[106,91,103,95],[106,92,103,96,"readySubchannels"],[106,108,103,112],[106,110,103,114,"index"],[106,115,103,119],[106,116,103,120],[106,117,103,121],[107,6,104,8],[107,7,104,9],[107,13,105,13],[107,17,105,17],[107,21,105,21],[107,22,105,22,"countSubchannelsWithState"],[107,47,105,47],[107,48,105,48,"connectivity_state_1"],[107,68,105,68],[107,69,105,69,"ConnectivityState"],[107,86,105,86],[107,87,105,87,"CONNECTING"],[107,97,105,97],[107,98,105,98],[107,101,105,101],[107,102,105,102],[107,104,105,104],[108,8,106,12],[108,12,106,16],[108,13,106,17,"updateState"],[108,24,106,28],[108,25,106,29,"connectivity_state_1"],[108,45,106,49],[108,46,106,50,"ConnectivityState"],[108,63,106,67],[108,64,106,68,"CONNECTING"],[108,74,106,78],[108,76,106,80],[108,80,106,84,"picker_1"],[108,88,106,92],[108,89,106,93,"QueuePicker"],[108,100,106,104],[108,101,106,105],[108,105,106,109],[108,106,106,110],[108,107,106,111],[109,6,107,8],[109,7,107,9],[109,13,108,13],[109,17,108,17],[109,21,108,21],[109,22,108,22,"countSubchannelsWithState"],[109,47,108,47],[109,48,108,48,"connectivity_state_1"],[109,68,108,68],[109,69,108,69,"ConnectivityState"],[109,86,108,86],[109,87,108,87,"TRANSIENT_FAILURE"],[109,104,108,104],[109,105,108,105],[109,108,108,108],[109,109,108,109],[109,111,108,111],[110,8,109,12],[110,12,109,16],[110,13,109,17,"updateState"],[110,24,109,28],[110,25,109,29,"connectivity_state_1"],[110,45,109,49],[110,46,109,50,"ConnectivityState"],[110,63,109,67],[110,64,109,68,"TRANSIENT_FAILURE"],[110,81,109,85],[110,83,109,87],[110,87,109,91,"picker_1"],[110,95,109,99],[110,96,109,100,"UnavailablePicker"],[110,113,109,117],[110,114,109,118],[111,10,109,120,"details"],[111,17,109,127],[111,19,109,129],[111,61,109,171],[111,65,109,175],[111,66,109,176,"lastError"],[111,75,109,185],[112,8,109,188],[112,9,109,189],[112,10,109,190],[112,11,109,191],[113,6,110,8],[113,7,110,9],[113,13,111,13],[114,8,112,12],[114,12,112,16],[114,13,112,17,"updateState"],[114,24,112,28],[114,25,112,29,"connectivity_state_1"],[114,45,112,49],[114,46,112,50,"ConnectivityState"],[114,63,112,67],[114,64,112,68,"IDLE"],[114,68,112,72],[114,70,112,74],[114,74,112,78,"picker_1"],[114,82,112,86],[114,83,112,87,"QueuePicker"],[114,94,112,98],[114,95,112,99],[114,99,112,103],[114,100,112,104],[114,101,112,105],[115,6,113,8],[116,4,114,4],[117,4,115,4,"updateState"],[117,15,115,15,"updateState"],[117,16,115,16,"newState"],[117,24,115,24],[117,26,115,26,"picker"],[117,32,115,32],[117,34,115,34],[118,6,116,8,"trace"],[118,11,116,13],[118,12,116,14,"connectivity_state_1"],[118,32,116,34],[118,33,116,35,"ConnectivityState"],[118,50,116,52],[118,51,116,53],[118,55,116,57],[118,56,116,58,"currentState"],[118,68,116,70],[118,69,116,71],[118,72,117,12],[118,78,117,18],[118,81,118,12,"connectivity_state_1"],[118,101,118,32],[118,102,118,33,"ConnectivityState"],[118,119,118,50],[118,120,118,51,"newState"],[118,128,118,59],[118,129,118,60],[118,130,118,61],[119,6,119,8],[119,10,119,12,"newState"],[119,18,119,20],[119,23,119,25,"connectivity_state_1"],[119,43,119,45],[119,44,119,46,"ConnectivityState"],[119,61,119,63],[119,62,119,64,"READY"],[119,67,119,69],[119,69,119,71],[120,8,120,12],[120,12,120,16],[120,13,120,17,"currentReadyPicker"],[120,31,120,35],[120,34,120,38,"picker"],[120,40,120,44],[121,6,121,8],[121,7,121,9],[121,13,122,13],[122,8,123,12],[122,12,123,16],[122,13,123,17,"currentReadyPicker"],[122,31,123,35],[122,34,123,38],[122,38,123,42],[123,6,124,8],[124,6,125,8],[124,10,125,12],[124,11,125,13,"currentState"],[124,23,125,25],[124,26,125,28,"newState"],[124,34,125,36],[125,6,126,8],[125,10,126,12],[125,11,126,13,"channelControlHelper"],[125,31,126,33],[125,32,126,34,"updateState"],[125,43,126,45],[125,44,126,46,"newState"],[125,52,126,54],[125,54,126,56,"picker"],[125,60,126,62],[125,61,126,63],[126,4,127,4],[127,4,128,4,"resetSubchannelList"],[127,23,128,23,"resetSubchannelList"],[127,24,128,23],[127,26,128,26],[128,6,129,8],[128,11,129,13],[128,17,129,19,"subchannel"],[128,27,129,29],[128,31,129,33],[128,35,129,37],[128,36,129,38,"subchannels"],[128,47,129,49],[128,49,129,51],[129,8,130,12,"subchannel"],[129,18,130,22],[129,19,130,23,"removeConnectivityStateListener"],[129,50,130,54],[129,51,130,55],[129,55,130,59],[129,56,130,60,"subchannelStateListener"],[129,79,130,83],[129,80,130,84],[130,8,131,12,"subchannel"],[130,18,131,22],[130,19,131,23,"unref"],[130,24,131,28],[130,25,131,29],[130,26,131,30],[131,8,132,12],[131,12,132,16],[131,13,132,17,"channelControlHelper"],[131,33,132,37],[131,34,132,38,"removeChannelzChild"],[131,53,132,57],[131,54,132,58,"subchannel"],[131,64,132,68],[131,65,132,69,"getChannelzRef"],[131,79,132,83],[131,80,132,84],[131,81,132,85],[131,82,132,86],[132,6,133,8],[133,6,134,8],[133,10,134,12],[133,11,134,13,"subchannels"],[133,22,134,24],[133,25,134,27],[133,27,134,29],[134,4,135,4],[135,4,136,4,"updateAddressList"],[135,21,136,21,"updateAddressList"],[135,22,136,22,"addressList"],[135,33,136,33],[135,35,136,35,"lbConfig"],[135,43,136,43],[135,45,136,45],[136,6,137,8],[136,10,137,12],[136,11,137,13,"resetSubchannelList"],[136,30,137,32],[136,31,137,33],[136,32,137,34],[137,6,138,8,"trace"],[137,11,138,13],[137,12,138,14],[137,38,138,40],[137,41,139,12,"addressList"],[137,52,139,23],[137,53,139,24,"map"],[137,56,139,27],[137,57,139,28,"address"],[137,64,139,35],[137,68,139,39],[137,69,139,40],[137,70,139,41],[137,72,139,43,"subchannel_address_1"],[137,92,139,63],[137,93,139,64,"subchannelAddressToString"],[137,118,139,89],[137,120,139,91,"address"],[137,127,139,98],[137,128,139,99],[137,129,139,100],[137,130,139,101],[138,6,140,8],[138,10,140,12],[138,11,140,13,"subchannels"],[138,22,140,24],[138,25,140,27,"addressList"],[138,36,140,38],[138,37,140,39,"map"],[138,40,140,42],[138,41,140,43,"address"],[138,48,140,50],[138,52,140,54],[138,56,140,58],[138,57,140,59,"channelControlHelper"],[138,77,140,79],[138,78,140,80,"createSubchannel"],[138,94,140,96],[138,95,140,97,"address"],[138,102,140,104],[138,104,140,106],[138,105,140,107],[138,106,140,108],[138,107,140,109],[138,108,140,110],[139,6,141,8],[139,11,141,13],[139,17,141,19,"subchannel"],[139,27,141,29],[139,31,141,33],[139,35,141,37],[139,36,141,38,"subchannels"],[139,47,141,49],[139,49,141,51],[140,8,142,12,"subchannel"],[140,18,142,22],[140,19,142,23,"ref"],[140,22,142,26],[140,23,142,27],[140,24,142,28],[141,8,143,12,"subchannel"],[141,18,143,22],[141,19,143,23,"addConnectivityStateListener"],[141,47,143,51],[141,48,143,52],[141,52,143,56],[141,53,143,57,"subchannelStateListener"],[141,76,143,80],[141,77,143,81],[142,8,144,12],[142,12,144,16],[142,13,144,17,"channelControlHelper"],[142,33,144,37],[142,34,144,38,"addChannelzChild"],[142,50,144,54],[142,51,144,55,"subchannel"],[142,61,144,65],[142,62,144,66,"getChannelzRef"],[142,76,144,80],[142,77,144,81],[142,78,144,82],[142,79,144,83],[143,8,145,12],[143,14,145,18,"subchannelState"],[143,29,145,33],[143,32,145,36,"subchannel"],[143,42,145,46],[143,43,145,47,"getConnectivityState"],[143,63,145,67],[143,64,145,68],[143,65,145,69],[144,8,146,12],[144,12,146,16,"subchannelState"],[144,27,146,31],[144,32,146,36,"connectivity_state_1"],[144,52,146,56],[144,53,146,57,"ConnectivityState"],[144,70,146,74],[144,71,146,75,"IDLE"],[144,75,146,79],[144,79,147,16,"subchannelState"],[144,94,147,31],[144,99,147,36,"connectivity_state_1"],[144,119,147,56],[144,120,147,57,"ConnectivityState"],[144,137,147,74],[144,138,147,75,"TRANSIENT_FAILURE"],[144,155,147,92],[144,157,147,94],[145,10,148,16,"subchannel"],[145,20,148,26],[145,21,148,27,"startConnecting"],[145,36,148,42],[145,37,148,43],[145,38,148,44],[146,8,149,12],[147,6,150,8],[148,6,151,8],[148,10,151,12],[148,11,151,13,"calculateAndUpdateState"],[148,34,151,36],[148,35,151,37],[148,36,151,38],[149,4,152,4],[150,4,153,4,"exitIdle"],[150,12,153,12,"exitIdle"],[150,13,153,12],[150,15,153,15],[151,6,154,8],[151,11,154,13],[151,17,154,19,"subchannel"],[151,27,154,29],[151,31,154,33],[151,35,154,37],[151,36,154,38,"subchannels"],[151,47,154,49],[151,49,154,51],[152,8,155,12,"subchannel"],[152,18,155,22],[152,19,155,23,"startConnecting"],[152,34,155,38],[152,35,155,39],[152,36,155,40],[153,6,156,8],[154,4,157,4],[155,4,158,4,"resetBackoff"],[155,16,158,16,"resetBackoff"],[155,17,158,16],[155,19,158,19],[156,6,159,8],[157,0,160,0],[158,4,159,8],[159,4,162,4,"destroy"],[159,11,162,11,"destroy"],[159,12,162,11],[159,14,162,14],[160,6,163,8],[160,10,163,12],[160,11,163,13,"resetSubchannelList"],[160,30,163,32],[160,31,163,33],[160,32,163,34],[161,4,164,4],[162,4,165,4,"getTypeName"],[162,15,165,15,"getTypeName"],[162,16,165,15],[162,18,165,18],[163,6,166,8],[163,13,166,15,"TYPE_NAME"],[163,22,166,24],[164,4,167,4],[165,2,168,0],[166,2,169,0,"exports"],[166,9,169,7],[166,10,169,8,"RoundRobinLoadBalancer"],[166,32,169,30],[166,35,169,33,"RoundRobinLoadBalancer"],[166,57,169,55],[167,2,170,0],[167,11,170,9,"setup"],[167,16,170,14,"setup"],[167,17,170,14],[167,19,170,17],[168,4,171,4],[168,5,171,5],[168,6,171,6],[168,8,171,8,"load_balancer_1"],[168,23,171,23],[168,24,171,24,"registerLoadBalancerType"],[168,48,171,48],[168,50,171,50,"TYPE_NAME"],[168,59,171,59],[168,61,171,61,"RoundRobinLoadBalancer"],[168,83,171,83],[168,85,171,85,"RoundRobinLoadBalancingConfig"],[168,114,171,114],[168,115,171,115],[169,2,172,0],[170,2,173,0,"exports"],[170,9,173,7],[170,10,173,8,"setup"],[170,15,173,13],[170,18,173,16,"setup"],[170,23,173,21],[171,0,173,22],[171,3]],"functionMap":{"names":["<global>","trace","RoundRobinLoadBalancingConfig","RoundRobinLoadBalancingConfig#getLoadBalancerName","RoundRobinLoadBalancingConfig#constructor","RoundRobinLoadBalancingConfig#toJsonObject","RoundRobinLoadBalancingConfig.createFromJson","RoundRobinPicker","RoundRobinPicker#constructor","RoundRobinPicker#pick","RoundRobinPicker#peekNextSubchannel","RoundRobinLoadBalancer","RoundRobinLoadBalancer#constructor","subchannelStateListener","RoundRobinLoadBalancer#countSubchannelsWithState","subchannels.filter$argument_0","RoundRobinLoadBalancer#calculateAndUpdateState","RoundRobinLoadBalancer#updateState","RoundRobinLoadBalancer#resetSubchannelList","RoundRobinLoadBalancer#updateAddressList","addressList.map$argument_0","RoundRobinLoadBalancer#exitIdle","RoundRobinLoadBalancer#resetBackoff","RoundRobinLoadBalancer#destroy","RoundRobinLoadBalancer#getTypeName","setup"],"mappings":"AAA;AC0B;CDE;AEE;ICC;KDE;IEC,iBF;IGC;KHI;IIE;KJE;CFC;AOC;ICC;KDG;IEC;KFU;IGM;KHE;CPC;AWC;ICC;uCCM;SDU;KDC;IGC;uCCC,yDD;KHC;IKC;6DDE,gGC;KLmB;IMC;KNY;IOC;KPO;IQC;4BCG,uED;2CCC,kED;KRY;IUC;KVI;IWC;KXG;IYC;KZE;IaC;KbE;CXC;AyBE;CzBE"}},"type":"js/module"}]}