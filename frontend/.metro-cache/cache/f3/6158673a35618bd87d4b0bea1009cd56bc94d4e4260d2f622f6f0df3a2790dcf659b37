{"dependencies":[{"name":"./enum","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":55},"end":{"line":4,"column":31,"index":72}}],"key":"gyum9HaiytxYUYAerYZvNHG09ko=","exportNames":["*"]}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":14,"index":88},"end":{"line":5,"column":32,"index":106}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":14,"index":122},"end":{"line":6,"column":31,"index":139}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = decoder;\n  var Enum = require(_dependencyMap[0], \"./enum\"),\n    types = require(_dependencyMap[1], \"./types\"),\n    util = require(_dependencyMap[2], \"./util\");\n  function missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n  }\n\n  /**\n   * Generates a decoder specific to the specified message type.\n   * @param {Type} mtype Message type\n   * @returns {Codegen} Codegen instance\n   */\n  function decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\", \"e\"], mtype.name + \"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function (field) {\n      return field.map;\n    }).length ? \",k,value\" : \"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\")(\"if(t===e)\")(\"break\")(\"switch(t>>>3){\");\n    var i = 0;\n    for (; i < /* initializes */mtype.fieldsArray.length; ++i) {\n      var field = mtype._fieldsArray[i].resolve(),\n        type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n        ref = \"m\" + util.safeProp(field.name);\n      gen(\"case %i: {\", field.id);\n\n      // Map fields\n      if (field.map) {\n        gen(\"if(%s===util.emptyObject)\", ref)(\"%s={}\", ref)(\"var c2 = r.uint32()+r.pos\");\n        if (types.defaults[field.keyType] !== undefined) gen(\"k=%j\", types.defaults[field.keyType]);else gen(\"k=null\");\n        if (types.defaults[type] !== undefined) gen(\"value=%j\", types.defaults[type]);else gen(\"value=null\");\n        gen(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\", field.keyType)(\"case 2:\");\n        if (types.basic[type] === undefined) gen(\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n        else gen(\"value=r.%s()\", type);\n        gen(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\");\n        if (types.long[field.keyType] !== undefined) gen(\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=value\", ref);else gen(\"%s[k]=value\", ref);\n\n        // Repeated fields\n      } else if (field.repeated) {\n        gen(\"if(!(%s&&%s.length))\", ref, ref)(\"%s=[]\", ref);\n\n        // Packable (always check for forward and backward compatiblity)\n        if (types.packed[type] !== undefined) gen(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\", ref, type)(\"}else\");\n\n        // Non-packed\n        if (types.basic[type] === undefined) gen(field.delimited ? \"%s.push(types[%i].decode(r,undefined,((t&~7)|4)))\" : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);else gen(\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n      } else if (types.basic[type] === undefined) gen(field.delimited ? \"%s=types[%i].decode(r,undefined,((t&~7)|4))\" : \"%s=types[%i].decode(r,r.uint32())\", ref, i);else gen(\"%s=r.%s()\", ref, type);\n      gen(\"break\")(\"}\");\n      // Unknown fields\n    }\n    gen(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n      var rfield = mtype._fieldsArray[i];\n      if (rfield.required) gen(\"if(!m.hasOwnProperty(%j))\", rfield.name)(\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n    return gen(\"return m\");\n    /* eslint-enable no-unexpected-multiline */\n  }\n});","lineCount":65,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"decoder"],[4,26,2,24],[5,2,4,0],[5,6,4,4,"Enum"],[5,10,4,8],[5,13,4,14,"require"],[5,20,4,21],[5,21,4,21,"_dependencyMap"],[5,35,4,21],[5,48,4,30],[5,49,4,31],[6,4,5,4,"types"],[6,9,5,9],[6,12,5,14,"require"],[6,19,5,21],[6,20,5,21,"_dependencyMap"],[6,34,5,21],[6,48,5,31],[6,49,5,32],[7,4,6,4,"util"],[7,8,6,8],[7,11,6,14,"require"],[7,18,6,21],[7,19,6,21,"_dependencyMap"],[7,33,6,21],[7,46,6,30],[7,47,6,31],[8,2,8,0],[8,11,8,9,"missing"],[8,18,8,16,"missing"],[8,19,8,17,"field"],[8,24,8,22],[8,26,8,24],[9,4,9,4],[9,11,9,11],[9,31,9,31],[9,34,9,34,"field"],[9,39,9,39],[9,40,9,40,"name"],[9,44,9,44],[9,47,9,47],[9,50,9,50],[10,2,10,0],[12,2,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[17,2,17,0],[17,11,17,9,"decoder"],[17,18,17,16,"decoder"],[17,19,17,17,"mtype"],[17,24,17,22],[17,26,17,24],[18,4,18,4],[19,4,19,4],[19,8,19,8,"gen"],[19,11,19,11],[19,14,19,14,"util"],[19,18,19,18],[19,19,19,19,"codegen"],[19,26,19,26],[19,27,19,27],[19,28,19,28],[19,31,19,31],[19,33,19,33],[19,36,19,36],[19,38,19,38],[19,41,19,41],[19,42,19,42],[19,44,19,44,"mtype"],[19,49,19,49],[19,50,19,50,"name"],[19,54,19,54],[19,57,19,57],[19,66,19,66],[19,67,19,67],[19,68,20,5],[19,96,20,33],[19,97,20,34],[19,98,21,9],[19,118,21,29],[19,119,21,30],[19,120,22,5],[19,171,22,56],[19,175,22,60,"mtype"],[19,180,22,65],[19,181,22,66,"fieldsArray"],[19,192,22,77],[19,193,22,78,"filter"],[19,199,22,84],[19,200,22,85],[19,210,22,94,"field"],[19,215,22,99],[19,217,22,101],[20,6,22,103],[20,13,22,110,"field"],[20,18,22,115],[20,19,22,116,"map"],[20,22,22,119],[21,4,22,121],[21,5,22,122],[21,6,22,123],[21,7,22,124,"length"],[21,13,22,130],[21,16,22,133],[21,26,22,143],[21,29,22,146],[21,31,22,148],[21,32,22,149],[21,33,22,150],[21,34,23,5],[21,51,23,22],[21,52,23,23],[21,53,24,9],[21,71,24,27],[21,72,24,28],[21,73,25,9],[21,84,25,20],[21,85,25,21],[21,86,26,13],[21,93,26,20],[21,94,26,21],[21,95,27,9],[21,111,27,25],[21,112,27,26],[22,4,29,4],[22,8,29,8,"i"],[22,9,29,9],[22,12,29,12],[22,13,29,13],[23,4,30,4],[23,11,30,11,"i"],[23,12,30,12],[23,15,30,15],[23,32,30,33,"mtype"],[23,37,30,38],[23,38,30,39,"fieldsArray"],[23,49,30,50],[23,50,30,51,"length"],[23,56,30,57],[23,58,30,59],[23,60,30,61,"i"],[23,61,30,62],[23,63,30,64],[24,6,31,8],[24,10,31,12,"field"],[24,15,31,17],[24,18,31,20,"mtype"],[24,23,31,25],[24,24,31,26,"_fieldsArray"],[24,36,31,38],[24,37,31,39,"i"],[24,38,31,40],[24,39,31,41],[24,40,31,42,"resolve"],[24,47,31,49],[24,48,31,50],[24,49,31,51],[25,8,32,12,"type"],[25,12,32,16],[25,15,32,20,"field"],[25,20,32,25],[25,21,32,26,"resolvedType"],[25,33,32,38],[25,45,32,50,"Enum"],[25,49,32,54],[25,52,32,57],[25,59,32,64],[25,62,32,67,"field"],[25,67,32,72],[25,68,32,73,"type"],[25,72,32,77],[26,8,33,12,"ref"],[26,11,33,15],[26,14,33,20],[26,17,33,23],[26,20,33,26,"util"],[26,24,33,30],[26,25,33,31,"safeProp"],[26,33,33,39],[26,34,33,40,"field"],[26,39,33,45],[26,40,33,46,"name"],[26,44,33,50],[26,45,33,51],[27,6,33,53,"gen"],[27,9,33,56],[27,10,34,13],[27,22,34,25],[27,24,34,27,"field"],[27,29,34,32],[27,30,34,33,"id"],[27,32,34,35],[27,33,34,36],[29,6,36,8],[30,6,37,8],[30,10,37,12,"field"],[30,15,37,17],[30,16,37,18,"map"],[30,19,37,21],[30,21,37,23],[31,8,37,25,"gen"],[31,11,37,28],[31,12,38,17],[31,39,38,44],[31,41,38,46,"ref"],[31,44,38,49],[31,45,38,50],[31,46,39,21],[31,53,39,28],[31,55,39,30,"ref"],[31,58,39,33],[31,59,39,34],[31,60,40,17],[31,87,40,44],[31,88,40,45],[32,8,42,12],[32,12,42,16,"types"],[32,17,42,21],[32,18,42,22,"defaults"],[32,26,42,30],[32,27,42,31,"field"],[32,32,42,36],[32,33,42,37,"keyType"],[32,40,42,44],[32,41,42,45],[32,46,42,50,"undefined"],[32,55,42,59],[32,57,42,61,"gen"],[32,60,42,64],[32,61,43,17],[32,67,43,23],[32,69,43,25,"types"],[32,74,43,30],[32,75,43,31,"defaults"],[32,83,43,39],[32,84,43,40,"field"],[32,89,43,45],[32,90,43,46,"keyType"],[32,97,43,53],[32,98,43,54],[32,99,43,55],[32,100,43,56],[32,105,44,17,"gen"],[32,108,44,20],[32,109,45,17],[32,117,45,25],[32,118,45,26],[33,8,47,12],[33,12,47,16,"types"],[33,17,47,21],[33,18,47,22,"defaults"],[33,26,47,30],[33,27,47,31,"type"],[33,31,47,35],[33,32,47,36],[33,37,47,41,"undefined"],[33,46,47,50],[33,48,47,52,"gen"],[33,51,47,55],[33,52,48,17],[33,62,48,27],[33,64,48,29,"types"],[33,69,48,34],[33,70,48,35,"defaults"],[33,78,48,43],[33,79,48,44,"type"],[33,83,48,48],[33,84,48,49],[33,85,48,50],[33,86,48,51],[33,91,49,17,"gen"],[33,94,49,20],[33,95,50,17],[33,107,50,29],[33,108,50,30],[34,8,52,12,"gen"],[34,11,52,15],[34,12,53,17],[34,30,53,35],[34,31,53,36],[34,32,54,21],[34,53,54,42],[34,54,54,43],[34,55,55,21],[34,74,55,40],[34,75,55,41],[34,76,56,25],[34,101,56,50],[34,103,56,52,"field"],[34,108,56,57],[34,109,56,58,"keyType"],[34,116,56,65],[34,117,56,66],[34,118,57,25],[34,127,57,34],[34,128,57,35],[35,8,59,12],[35,12,59,16,"types"],[35,17,59,21],[35,18,59,22,"basic"],[35,23,59,27],[35,24,59,28,"type"],[35,28,59,32],[35,29,59,33],[35,34,59,38,"undefined"],[35,43,59,47],[35,45,59,49,"gen"],[35,48,59,52],[35,49,60,29],[35,87,60,67],[35,89,60,69,"i"],[35,90,60,70],[35,91,60,71],[35,92,60,72],[35,93,60,73],[36,8,60,73],[36,13,61,17,"gen"],[36,16,61,20],[36,17,62,29],[36,31,62,43],[36,33,62,45,"type"],[36,37,62,49],[36,38,62,50],[37,8,64,12,"gen"],[37,11,64,15],[37,12,65,29],[37,19,65,36],[37,20,65,37],[37,21,66,25],[37,31,66,35],[37,32,66,36],[37,33,67,29],[37,53,67,49],[37,54,67,50],[37,55,68,29],[37,62,68,36],[37,63,68,37],[37,64,69,21],[37,67,69,24],[37,68,69,25],[37,69,70,17],[37,72,70,20],[37,73,70,21],[38,8,72,12],[38,12,72,16,"types"],[38,17,72,21],[38,18,72,22,"long"],[38,22,72,26],[38,23,72,27,"field"],[38,28,72,32],[38,29,72,33,"keyType"],[38,36,72,40],[38,37,72,41],[38,42,72,46,"undefined"],[38,51,72,55],[38,53,72,57,"gen"],[38,56,72,60],[38,57,73,17],[38,111,73,71],[38,113,73,73,"ref"],[38,116,73,76],[38,117,73,77],[38,118,73,78],[38,123,74,17,"gen"],[38,126,74,20],[38,127,75,17],[38,140,75,30],[38,142,75,32,"ref"],[38,145,75,35],[38,146,75,36],[40,8,77,8],[41,6,78,8],[41,7,78,9],[41,13,78,15],[41,17,78,19,"field"],[41,22,78,24],[41,23,78,25,"repeated"],[41,31,78,33],[41,33,78,35],[42,8,78,37,"gen"],[42,11,78,40],[42,12,80,17],[42,34,80,39],[42,36,80,41,"ref"],[42,39,80,44],[42,41,80,46,"ref"],[42,44,80,49],[42,45,80,50],[42,46,81,21],[42,53,81,28],[42,55,81,30,"ref"],[42,58,81,33],[42,59,81,34],[44,8,83,12],[45,8,84,12],[45,12,84,16,"types"],[45,17,84,21],[45,18,84,22,"packed"],[45,24,84,28],[45,25,84,29,"type"],[45,29,84,33],[45,30,84,34],[45,35,84,39,"undefined"],[45,44,84,48],[45,46,84,50,"gen"],[45,49,84,53],[45,50,85,17],[45,66,85,33],[45,67,85,34],[45,68,86,21],[45,93,86,46],[45,94,86,47],[45,95,87,21],[45,112,87,38],[45,113,87,39],[45,114,88,25],[45,131,88,42],[45,133,88,44,"ref"],[45,136,88,47],[45,138,88,49,"type"],[45,142,88,53],[45,143,88,54],[45,144,89,17],[45,151,89,24],[45,152,89,25],[47,8,91,12],[48,8,92,12],[48,12,92,16,"types"],[48,17,92,21],[48,18,92,22,"basic"],[48,23,92,27],[48,24,92,28,"type"],[48,28,92,32],[48,29,92,33],[48,34,92,38,"undefined"],[48,43,92,47],[48,45,92,49,"gen"],[48,48,92,52],[48,49,92,53,"field"],[48,54,92,58],[48,55,92,59,"delimited"],[48,64,92,68],[48,67,93,22],[48,118,93,73],[48,121,94,22],[48,162,94,63],[48,164,94,65,"ref"],[48,167,94,68],[48,169,94,70,"i"],[48,170,94,71],[48,171,94,72],[48,172,94,73],[48,177,95,17,"gen"],[48,180,95,20],[48,181,96,21],[48,198,96,38],[48,200,96,40,"ref"],[48,203,96,43],[48,205,96,45,"type"],[48,209,96,49],[48,210,96,50],[50,8,98,8],[51,6,99,8],[51,7,99,9],[51,13,99,15],[51,17,99,19,"types"],[51,22,99,24],[51,23,99,25,"basic"],[51,28,99,30],[51,29,99,31,"type"],[51,33,99,35],[51,34,99,36],[51,39,99,41,"undefined"],[51,48,99,50],[51,50,99,52,"gen"],[51,53,99,55],[51,54,99,56,"field"],[51,59,99,61],[51,60,99,62,"delimited"],[51,69,99,71],[51,72,100,18],[51,117,100,63],[51,120,101,18],[51,155,101,53],[51,157,101,55,"ref"],[51,160,101,58],[51,162,101,60,"i"],[51,163,101,61],[51,164,101,62],[51,165,101,63],[51,170,102,13,"gen"],[51,173,102,16],[51,174,103,17],[51,185,103,28],[51,187,103,30,"ref"],[51,190,103,33],[51,192,103,35,"type"],[51,196,103,39],[51,197,103,40],[52,6,104,8,"gen"],[52,9,104,11],[52,10,105,17],[52,17,105,24],[52,18,105,25],[52,19,106,13],[52,22,106,16],[52,23,106,17],[53,6,107,8],[54,4,108,4],[55,4,108,6,"gen"],[55,7,108,9],[55,8,109,13],[55,18,109,23],[55,19,109,24],[55,20,110,17],[55,37,110,34],[55,38,110,35],[55,39,111,17],[55,46,111,24],[55,47,111,25],[55,48,113,9],[55,51,113,12],[55,52,113,13],[55,53,114,5],[55,56,114,8],[55,57,114,9],[57,4,116,4],[58,4,117,4],[58,9,117,9,"i"],[58,10,117,10],[58,13,117,13],[58,14,117,14],[58,16,117,16,"i"],[58,17,117,17],[58,20,117,20,"mtype"],[58,25,117,25],[58,26,117,26,"_fieldsArray"],[58,38,117,38],[58,39,117,39,"length"],[58,45,117,45],[58,47,117,47],[58,49,117,49,"i"],[58,50,117,50],[58,52,117,52],[59,6,118,8],[59,10,118,12,"rfield"],[59,16,118,18],[59,19,118,21,"mtype"],[59,24,118,26],[59,25,118,27,"_fieldsArray"],[59,37,118,39],[59,38,118,40,"i"],[59,39,118,41],[59,40,118,42],[60,6,119,8],[60,10,119,12,"rfield"],[60,16,119,18],[60,17,119,19,"required"],[60,25,119,27],[60,27,119,29,"gen"],[60,30,119,32],[60,31,120,5],[60,58,120,32],[60,60,120,34,"rfield"],[60,66,120,40],[60,67,120,41,"name"],[60,71,120,45],[60,72,120,46],[60,73,121,9],[60,116,121,52],[60,118,121,54,"missing"],[60,125,121,61],[60,126,121,62,"rfield"],[60,132,121,68],[60,133,121,69],[60,134,121,70],[61,4,122,4],[62,4,124,4],[62,11,124,11,"gen"],[62,14,124,14],[62,15,125,5],[62,25,125,15],[62,26,125,16],[63,4,126,4],[64,2,127,0],[65,0,127,1],[65,3]],"functionMap":{"names":["<global>","missing","decoder","mtype.fieldsArray.filter$argument_0"],"mappings":"AAA;ACO;CDE;AEO;qFCK,qCD;CFyG"}},"type":"js/module"}]}