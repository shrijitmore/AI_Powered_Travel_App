{"dependencies":[{"name":"@firebase/app","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":125,"index":125}}],"key":"yqoiliQRTUQ9dvZxqpPLznnKsQ4=","exportNames":["*"]}},{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":126},"end":{"line":2,"column":338,"index":464}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"]}},{"name":"@firebase/component","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":465},"end":{"line":3,"column":48,"index":513}}],"key":"Us9erpYucP7UHYJWKKSJ2tNZDvI=","exportNames":["*"]}},{"name":"@firebase/logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":514},"end":{"line":4,"column":52,"index":566}}],"key":"ORGtDHPxrSEUSLP9WZfOMGsHx5g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.A = exports.$ = void 0;\n  exports.B = useDeviceLanguage;\n  exports.C = updateCurrentUser;\n  exports.D = signOut;\n  exports.E = revokeAccessToken;\n  exports.F = void 0;\n  exports.G = deleteUser;\n  exports.J = exports.I = exports.H = void 0;\n  exports.K = initializeAuth;\n  exports.L = connectAuthEmulator;\n  exports.a0 = exports.a = exports._ = exports.Z = exports.Y = exports.X = exports.W = exports.V = exports.U = exports.T = exports.S = exports.R = exports.Q = exports.P = exports.O = exports.N = exports.M = void 0;\n  exports.a1 = signInAnonymously;\n  exports.a2 = signInWithCredential;\n  exports.a3 = linkWithCredential;\n  exports.a4 = reauthenticateWithCredential;\n  exports.a5 = signInWithCustomToken;\n  exports.a6 = sendPasswordResetEmail;\n  exports.a7 = confirmPasswordReset;\n  exports.a8 = applyActionCode;\n  exports.a9 = checkActionCode;\n  exports.aA = signInWithIdp;\n  exports.aB = _fail;\n  exports.aC = debugAssert;\n  exports.aD = _persistenceKeyName;\n  exports.aE = _serverAppCurrentUserOperationNotSupportedError;\n  exports.aF = _castAuth;\n  exports.aH = exports.aG = void 0;\n  exports.aI = _emulatorUrl;\n  exports.aJ = _performApiRequest;\n  exports.aK = _isIOS;\n  exports.aL = _isAndroid;\n  exports.aM = _isIOS7Or8;\n  exports.aN = _createError;\n  exports.aO = _isMobileBrowser;\n  exports.aP = _isIE10;\n  exports.aR = exports.aQ = void 0;\n  exports.aS = _getClientVersion;\n  exports.aU = exports.aT = void 0;\n  exports.aa = verifyPasswordResetCode;\n  exports.ab = createUserWithEmailAndPassword;\n  exports.ac = signInWithEmailAndPassword;\n  exports.ad = sendSignInLinkToEmail;\n  exports.ae = isSignInWithEmailLink;\n  exports.af = signInWithEmailLink;\n  exports.ag = fetchSignInMethodsForEmail;\n  exports.ah = sendEmailVerification;\n  exports.ai = verifyBeforeUpdateEmail;\n  exports.aj = void 0;\n  exports.ak = parseActionCodeURL;\n  exports.al = updateProfile;\n  exports.am = updateEmail;\n  exports.an = updatePassword;\n  exports.ao = getIdToken;\n  exports.ap = getIdTokenResult;\n  exports.aq = unlink;\n  exports.ar = getAdditionalUserInfo;\n  exports.as = reload;\n  exports.at = getMultiFactorResolver;\n  exports.au = multiFactor;\n  exports.av = _getInstance;\n  exports.aw = _assert;\n  exports.ax = _signInWithCredential;\n  exports.ay = _reauthenticate;\n  exports.az = _link;\n  exports.o = exports.n = exports.m = exports.l = exports.k = exports.j = exports.i = exports.h = exports.g = exports.f = exports.e = exports.d = exports.c = exports.b = void 0;\n  exports.p = getAuth;\n  exports.s = exports.r = exports.q = void 0;\n  exports.t = setPersistence;\n  exports.u = void 0;\n  exports.v = initializeRecaptchaConfig;\n  exports.w = validatePassword;\n  exports.x = onIdTokenChanged;\n  exports.y = beforeAuthStateChanged;\n  exports.z = onAuthStateChanged;\n  var _app = require(_dependencyMap[0], \"@firebase/app\");\n  var _util = require(_dependencyMap[1], \"@firebase/util\");\n  var _component = require(_dependencyMap[2], \"@firebase/component\");\n  var _logger = require(_dependencyMap[3], \"@firebase/logger\");\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * An enum of factors that may be used for multifactor authentication.\n   *\n   * @public\n   */\n  const FactorId = exports.F = {\n    /** Phone as second factor */\n    PHONE: 'phone',\n    TOTP: 'totp'\n  };\n  /**\n   * Enumeration of supported providers.\n   *\n   * @public\n   */\n  const ProviderId = exports.q = {\n    /** Facebook provider ID */\n    FACEBOOK: 'facebook.com',\n    /** GitHub provider ID */\n    GITHUB: 'github.com',\n    /** Google provider ID */\n    GOOGLE: 'google.com',\n    /** Password provider */\n    PASSWORD: 'password',\n    /** Phone provider */\n    PHONE: 'phone',\n    /** Twitter provider ID */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported sign-in methods.\n   *\n   * @public\n   */\n  const SignInMethod = exports.S = {\n    /** Email link sign in method */\n    EMAIL_LINK: 'emailLink',\n    /** Email/password sign in method */\n    EMAIL_PASSWORD: 'password',\n    /** Facebook sign in method */\n    FACEBOOK: 'facebook.com',\n    /** GitHub sign in method */\n    GITHUB: 'github.com',\n    /** Google sign in method */\n    GOOGLE: 'google.com',\n    /** Phone sign in method */\n    PHONE: 'phone',\n    /** Twitter sign in method */\n    TWITTER: 'twitter.com'\n  };\n  /**\n   * Enumeration of supported operation types.\n   *\n   * @public\n   */\n  const OperationType = exports.O = {\n    /** Operation involving linking an additional provider to an already signed-in user. */\n    LINK: 'link',\n    /** Operation involving using a provider to reauthenticate an already signed-in user. */\n    REAUTHENTICATE: 'reauthenticate',\n    /** Operation involving signing in a user. */\n    SIGN_IN: 'signIn'\n  };\n  /**\n   * An enumeration of the possible email action types.\n   *\n   * @public\n   */\n  const ActionCodeOperation = exports.A = {\n    /** The email link sign-in action. */\n    EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n    /** The password reset action. */\n    PASSWORD_RESET: 'PASSWORD_RESET',\n    /** The email revocation action. */\n    RECOVER_EMAIL: 'RECOVER_EMAIL',\n    /** The revert second factor addition email action. */\n    REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n    /** The revert second factor addition email action. */\n    VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n    /** The email verification action. */\n    VERIFY_EMAIL: 'VERIFY_EMAIL'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _debugErrorMap() {\n    return {\n      [\"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',\n      [\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */]: '',\n      [\"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */]: \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.',\n      [\"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.',\n      [\"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.',\n      [\"code-expired\" /* AuthErrorCode.CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' + 'again.',\n      [\"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',\n      [\"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */]: 'This browser is not supported.',\n      [\"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',\n      [\"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',\n      [\"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.',\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.',\n      [\"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.',\n      [\"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',\n      [\"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */]: 'The email address is already in use by another account.',\n      [\"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.',\n      [\"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */]: 'The action code has expired.',\n      [\"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',\n      [\"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */]: 'An internal AuthError has occurred.',\n      [\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.',\n      [\"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */]: 'The mobile app identifier is not registered for the current project.',\n      [\"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */]: \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.',\n      [\"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.',\n      [\"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',\n      [\"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.',\n      [\"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',\n      [\"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',\n      [\"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */]: 'The email address is badly formatted.',\n      [\"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',\n      [\"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',\n      [\"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',\n      [\"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */]: 'The supplied auth credential is incorrect, malformed or has expired.',\n      [\"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',\n      [\"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.',\n      [\"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.',\n      [\"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.',\n      [\"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.',\n      [\"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',\n      [\"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',\n      [\"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].',\n      [\"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',\n      [\"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.',\n      [\"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.',\n      [\"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',\n      [\"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */]: \"The Auth instance's tenant ID is invalid.\",\n      [\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */]: 'Login blocked by user-provided method: {$originalMessage}',\n      [\"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',\n      [\"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.',\n      [\"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.',\n      [\"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',\n      [\"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',\n      [\"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',\n      [\"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',\n      [\"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.',\n      [\"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */]: 'A non-empty password must be provided',\n      [\"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */]: 'No second factor identifier is provided.',\n      [\"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',\n      [\"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',\n      [\"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',\n      [\"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',\n      [\"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',\n      [\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',\n      [\"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.',\n      [\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n      [\"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',\n      [\"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',\n      [\"null-user\" /* AuthErrorCode.NULL_USER */]: 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.',\n      [\"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.',\n      [\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.',\n      [\"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n      [\"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',\n      [\"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',\n      [\"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */]: \"The project's quota for this operation has been exceeded.\",\n      [\"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',\n      [\"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',\n      [\"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',\n      [\"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',\n      [\"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',\n      [\"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */]: \"The provided tenant ID does not match the Auth instance's tenant ID\",\n      [\"timeout\" /* AuthErrorCode.TIMEOUT */]: 'The operation has timed out.',\n      [\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */]: \"The user's credential is no longer valid. The user must sign in again.\",\n      [\"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.',\n      [\"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.',\n      [\"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n      [\"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',\n      [\"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',\n      [\"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',\n      [\"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',\n      [\"user-not-found\" /* AuthErrorCode.USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.',\n      [\"user-disabled\" /* AuthErrorCode.USER_DISABLED */]: 'The user account has been disabled by an administrator.',\n      [\"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',\n      [\"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */]: '',\n      [\"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',\n      [\"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',\n      [\"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.',\n      [\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is missing when sending request to the backend.',\n      [\"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */]: 'The reCAPTCHA token is invalid when sending request to the backend.',\n      [\"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */]: 'The reCAPTCHA action is invalid when sending request to the backend.',\n      [\"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */]: 'reCAPTCHA Enterprise integration is not enabled for this project.',\n      [\"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */]: 'The reCAPTCHA client type is missing when sending request to the backend.',\n      [\"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is missing when sending request to the backend.',\n      [\"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */]: 'Invalid request parameters.',\n      [\"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */]: 'The reCAPTCHA version is invalid when sending request to the backend.',\n      [\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n      [\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: 'The password does not meet the requirements.',\n      [\"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */]: 'The provided Hosting link domain is not configured in Firebase Hosting or is not owned by ' + 'the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`).'\n    };\n  }\n  function _prodErrorMap() {\n    // We will include this one message in the prod error map since by the very\n    // nature of this error, developers will never be able to see the message\n    // using the debugErrorMap (which is installed during auth initialization).\n    return {\n      [\"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'\n    };\n  }\n  /**\n   * A verbose error map with detailed descriptions for most error codes.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const debugErrorMap = exports.H = _debugErrorMap;\n  /**\n   * A minimal error map with all verbose error messages stripped.\n   *\n   * See discussion at {@link AuthErrorMap}\n   *\n   * @public\n   */\n  const prodErrorMap = exports.I = _prodErrorMap;\n  const _DEFAULT_AUTH_ERROR_FACTORY = new _util.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n  /**\n   * A map of potential `Auth` error codes, for easier comparison with errors\n   * thrown by the SDK.\n   *\n   * @remarks\n   * Note that you can't tree-shake individual keys\n   * in the map, so by using the map you might substantially increase your\n   * bundle size.\n   *\n   * @public\n   */\n  const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = exports.J = {\n    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n    ARGUMENT_ERROR: 'auth/argument-error',\n    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n    APP_NOT_INSTALLED: 'auth/app-not-installed',\n    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n    CODE_EXPIRED: 'auth/code-expired',\n    CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n    CORS_UNSUPPORTED: 'auth/cors-unsupported',\n    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n    EMAIL_EXISTS: 'auth/email-already-in-use',\n    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n    EXPIRED_OOB_CODE: 'auth/expired-action-code',\n    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n    INTERNAL_ERROR: 'auth/internal-error',\n    INVALID_API_KEY: 'auth/invalid-api-key',\n    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n    INVALID_APP_ID: 'auth/invalid-app-id',\n    INVALID_AUTH: 'auth/invalid-user-token',\n    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n    INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n    INVALID_CODE: 'auth/invalid-verification-code',\n    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n    INVALID_EMAIL: 'auth/invalid-email',\n    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n    INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n    INVALID_OOB_CODE: 'auth/invalid-action-code',\n    INVALID_ORIGIN: 'auth/unauthorized-domain',\n    INVALID_PASSWORD: 'auth/wrong-password',\n    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n    INVALID_SENDER: 'auth/invalid-sender',\n    INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n    INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n    MFA_REQUIRED: 'auth/multi-factor-auth-required',\n    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n    MISSING_CODE: 'auth/missing-verification-code',\n    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n    MISSING_IFRAME_START: 'auth/missing-iframe-start',\n    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n    MISSING_SESSION_INFO: 'auth/missing-verification-id',\n    MODULE_DESTROYED: 'auth/app-deleted',\n    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n    NULL_USER: 'auth/null-user',\n    NO_AUTH_EVENT: 'auth/no-auth-event',\n    NO_SUCH_PROVIDER: 'auth/no-such-provider',\n    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n    POPUP_BLOCKED: 'auth/popup-blocked',\n    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n    QUOTA_EXCEEDED: 'auth/quota-exceeded',\n    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n    REJECTED_CREDENTIAL: 'auth/rejected-credential',\n    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n    TIMEOUT: 'auth/timeout',\n    TOKEN_EXPIRED: 'auth/user-token-expired',\n    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n    UNVERIFIED_EMAIL: 'auth/unverified-email',\n    USER_CANCELLED: 'auth/user-cancelled',\n    USER_DELETED: 'auth/user-not-found',\n    USER_DISABLED: 'auth/user-disabled',\n    USER_MISMATCH: 'auth/user-mismatch',\n    USER_SIGNED_OUT: 'auth/user-signed-out',\n    WEAK_PASSWORD: 'auth/weak-password',\n    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n    ALREADY_INITIALIZED: 'auth/already-initialized',\n    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n    MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n    INVALID_REQ_TYPE: 'auth/invalid-req-type',\n    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const logClient = new _logger.Logger('@firebase/auth');\n  function _logWarn(msg, ...args) {\n    if (logClient.logLevel <= _logger.LogLevel.WARN) {\n      logClient.warn(`Auth (${_app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n  function _logError(msg, ...args) {\n    if (logClient.logLevel <= _logger.LogLevel.ERROR) {\n      logClient.error(`Auth (${_app.SDK_VERSION}): ${msg}`, ...args);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _fail(authOrCode, ...rest) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n  function _createError(authOrCode, ...rest) {\n    return createErrorInternal(authOrCode, ...rest);\n  }\n  function _errorWithCustomMessage(auth, code, message) {\n    const errorMap = {\n      ...prodErrorMap(),\n      [code]: message\n    };\n    const factory = new _util.ErrorFactory('auth', 'Firebase', errorMap);\n    return factory.create(code, {\n      appName: auth.name\n    });\n  }\n  function _serverAppCurrentUserOperationNotSupportedError(auth) {\n    return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n  }\n  function createErrorInternal(authOrCode, ...rest) {\n    if (typeof authOrCode !== 'string') {\n      const code = rest[0];\n      const fullParams = [...rest.slice(1)];\n      if (fullParams[0]) {\n        fullParams[0].appName = authOrCode.name;\n      }\n      return authOrCode._errorFactory.create(code, ...fullParams);\n    }\n    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);\n  }\n  function _assert(assertion, authOrCode, ...rest) {\n    if (!assertion) {\n      throw createErrorInternal(authOrCode, ...rest);\n    }\n  }\n  /**\n   * Unconditionally fails, throwing an internal error with the given message.\n   *\n   * @param failure type of failure encountered\n   * @throws Error\n   */\n  function debugFail(failure) {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const message = `INTERNAL ASSERTION FAILED: ` + failure;\n    _logError(message);\n    // NOTE: We don't use FirebaseError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw new Error(message);\n  }\n  /**\n   * Fails if the given assertion condition is false, throwing an Error with the\n   * given message if it did.\n   *\n   * @param assertion\n   * @param message\n   */\n  function debugAssert(assertion, message) {\n    if (!assertion) {\n      debugFail(message);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _getCurrentUrl() {\n    return typeof self !== 'undefined' && self.location?.href || '';\n  }\n  function _isHttpOrHttps() {\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n  }\n  function _getCurrentScheme() {\n    return typeof self !== 'undefined' && self.location?.protocol || null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine whether the browser is working online\n   */\n  function _isOnline() {\n    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    _isHttpOrHttps() || (0, _util.isBrowserExtension)() || 'connection' in navigator)) {\n      return navigator.onLine;\n    }\n    // If we can't determine the state, assume it is online.\n    return true;\n  }\n  function _getUserLanguage() {\n    if (typeof navigator === 'undefined') {\n      return null;\n    }\n    const navigatorLanguage = navigator;\n    return (\n      // Most reliable, but only supported in Chrome/Firefox.\n      navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n      // Supported in most browsers, but returns the language of the browser\n      // UI, not the language set in browser settings.\n      navigatorLanguage.language ||\n      // Couldn't determine language.\n      null\n    );\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * A structure to help pick between a range of long and short delay durations\n   * depending on the current environment. In general, the long delay is used for\n   * mobile environments whereas short delays are used for desktop environments.\n   */\n  class Delay {\n    constructor(shortDelay, longDelay) {\n      this.shortDelay = shortDelay;\n      this.longDelay = longDelay;\n      // Internal error when improperly initialized.\n      debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n      this.isMobile = (0, _util.isMobileCordova)() || (0, _util.isReactNative)();\n    }\n    get() {\n      if (!_isOnline()) {\n        // Pick the shorter timeout.\n        return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n      }\n      // If running in a mobile environment, return the long delay, otherwise\n      // return the short delay.\n      // This could be improved in the future to dynamically change based on other\n      // variables instead of just reading the current environment.\n      return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _emulatorUrl(config, path) {\n    debugAssert(config.emulator, 'Emulator should always be set here');\n    const {\n      url\n    } = config.emulator;\n    if (!path) {\n      return url;\n    }\n    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class FetchProvider {\n    static initialize(fetchImpl, headersImpl, responseImpl) {\n      this.fetchImpl = fetchImpl;\n      if (headersImpl) {\n        this.headersImpl = headersImpl;\n      }\n      if (responseImpl) {\n        this.responseImpl = responseImpl;\n      }\n    }\n    static fetch() {\n      if (this.fetchImpl) {\n        return this.fetchImpl;\n      }\n      if (typeof self !== 'undefined' && 'fetch' in self) {\n        return self.fetch;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n        return globalThis.fetch;\n      }\n      if (typeof fetch !== 'undefined') {\n        return fetch;\n      }\n      debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static headers() {\n      if (this.headersImpl) {\n        return this.headersImpl;\n      }\n      if (typeof self !== 'undefined' && 'Headers' in self) {\n        return self.Headers;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n        return globalThis.Headers;\n      }\n      if (typeof Headers !== 'undefined') {\n        return Headers;\n      }\n      debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n    static response() {\n      if (this.responseImpl) {\n        return this.responseImpl;\n      }\n      if (typeof self !== 'undefined' && 'Response' in self) {\n        return self.Response;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Response) {\n        return globalThis.Response;\n      }\n      if (typeof Response !== 'undefined') {\n        return Response;\n      }\n      debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Map from errors returned by the server to errors to developer visible errors\n   */\n  exports.aT = FetchProvider;\n  const SERVER_ERROR_MAP = {\n    // Custom token errors.\n    [\"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */]: \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Create Auth URI errors.\n    [\"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */]: \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Sign in with email and password errors (some apply to sign up too).\n    [\"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */]: \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */]: \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */,\n\n    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n    // invalid.\n    [\"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n\n    // Sign up with email and password errors.\n    [\"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */]: \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */,\n    [\"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */]: \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,\n\n    // Verify assertion for sign in with credential errors:\n    [\"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Send Password reset email errors:\n    [\"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */,\n    [\"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */]: \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */,\n    [\"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */]: \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */,\n\n    // This can only happen if the SDK sends a bad request.\n    [\"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Operations that require ID token in request:\n    [\"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,\n    [\"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */]: \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */,\n    [\"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */,\n\n    // Other errors.\n    [\"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,\n    [\"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,\n\n    // Phone Auth related errors.\n    [\"INVALID_CODE\" /* ServerError.INVALID_CODE */]: \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */,\n    [\"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */]: \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */,\n    [\"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */]: \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */,\n    [\"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */]: \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */,\n    [\"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */]: \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */,\n\n    // Other action code errors when additional settings passed.\n    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n    // This is OK as this error will be caught by client side validation.\n    [\"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,\n    [\"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */]: \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,\n\n    // getProjectConfig errors when clientId is passed.\n    [\"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,\n\n    // User actions (sign-up or deletion) disabled errors.\n    [\"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */]: \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,\n\n    // Multi factor related errors.\n    [\"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */,\n    [\"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,\n    [\"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */,\n    [\"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */,\n    [\"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */]: \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,\n    [\"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,\n\n    // Blocking functions related errors.\n    [\"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */,\n\n    // Recaptcha related errors.\n    [\"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */]: \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,\n    [\"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,\n    [\"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */]: \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,\n    [\"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */]: \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */,\n    [\"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */]: \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,\n    [\"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */]: \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,\n    [\"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */]: \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */\n  };\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const CookieAuthProxiedEndpoints = [\"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, \"/v1/token\" /* Endpoint.TOKEN */];\n  const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\n  function _addTidIfNecessary(auth, request) {\n    if (auth.tenantId && !request.tenantId) {\n      return {\n        ...request,\n        tenantId: auth.tenantId\n      };\n    }\n    return request;\n  }\n  async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {\n    return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n      let body = {};\n      let params = {};\n      if (request) {\n        if (method === \"GET\" /* HttpMethod.GET */) {\n          params = request;\n        } else {\n          body = {\n            body: JSON.stringify(request)\n          };\n        }\n      }\n      const query = (0, _util.querystring)({\n        key: auth.config.apiKey,\n        ...params\n      }).slice(1);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n      if (auth.languageCode) {\n        headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n      }\n      const fetchArgs = {\n        method,\n        headers,\n        ...body\n      };\n      /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n         problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n         'RequestInitializerDict' is not implemented.\"\n         https://github.com/cloudflare/next-on-pages/issues/487 */\n      if (!(0, _util.isCloudflareWorker)()) {\n        fetchArgs.referrerPolicy = 'no-referrer';\n      }\n      if (auth.emulatorConfig && (0, _util.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        fetchArgs.credentials = 'include';\n      }\n      return FetchProvider.fetch()(await _getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);\n    });\n  }\n  async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {\n    auth._canInitEmulator = false;\n    const errorMap = {\n      ...SERVER_ERROR_MAP,\n      ...customErrorMap\n    };\n    try {\n      const networkTimeout = new NetworkTimeout(auth);\n      const response = await Promise.race([fetchFn(), networkTimeout.promise]);\n      // If we've reached this point, the fetch succeeded and the networkTimeout\n      // didn't throw; clear the network timeout delay so that Node won't hang\n      networkTimeout.clearNetworkTimeout();\n      const json = await response.json();\n      if ('needConfirmation' in json) {\n        throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n      }\n      if (response.ok && !('errorMessage' in json)) {\n        return json;\n      } else {\n        const errorMessage = response.ok ? json.errorMessage : json.error.message;\n        const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n        if (serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {\n          throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n        } else if (serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */) {\n          throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n        } else if (serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */) {\n          throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n        }\n        const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n        if (serverErrorMessage) {\n          throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n        } else {\n          _fail(auth, authError);\n        }\n      }\n    } catch (e) {\n      if (e instanceof _util.FirebaseError) {\n        throw e;\n      }\n      // Changing this to a different error code will log user out when there is a network error\n      // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n      // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n      _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n        'message': String(e)\n      });\n    }\n  }\n  async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {\n    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);\n    if ('mfaPendingCredential' in serverResponse) {\n      _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n        _serverResponse: serverResponse\n      });\n    }\n    return serverResponse;\n  }\n  async function _getFinalTarget(auth, host, path, query) {\n    const base = `${host}${path}?${query}`;\n    const authInternal = auth;\n    const finalTarget = authInternal.config.emulator ? _emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;\n    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,\n    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken\n    // from the response\n    if (CookieAuthProxiedEndpoints.includes(path)) {\n      // Persistence manager is async, we need to await it. We can't just wait for auth initialized\n      // here since auth initialization calls this function.\n      await authInternal._persistenceManagerAvailable;\n      if (authInternal._getPersistenceType() === \"COOKIE\" /* PersistenceType.COOKIE */) {\n        const cookiePersistence = authInternal._getPersistence();\n        return cookiePersistence._getFinalTarget(finalTarget).toString();\n      }\n    }\n    return finalTarget;\n  }\n  function _parseEnforcementState(enforcementStateStr) {\n    switch (enforcementStateStr) {\n      case 'ENFORCE':\n        return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n      case 'AUDIT':\n        return \"AUDIT\" /* EnforcementState.AUDIT */;\n      case 'OFF':\n        return \"OFF\" /* EnforcementState.OFF */;\n      default:\n        return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n    }\n  }\n  class NetworkTimeout {\n    clearNetworkTimeout() {\n      clearTimeout(this.timer);\n    }\n    constructor(auth) {\n      this.auth = auth;\n      // Node timers and browser timers are fundamentally incompatible, but we\n      // don't care about the value here\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timer = null;\n      this.promise = new Promise((_, reject) => {\n        this.timer = setTimeout(() => {\n          return reject(_createError(this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n        }, DEFAULT_API_TIMEOUT_MS.get());\n      });\n    }\n  }\n  function _makeTaggedError(auth, code, response) {\n    const errorParams = {\n      appName: auth.name\n    };\n    if (response.email) {\n      errorParams.email = response.email;\n    }\n    if (response.phoneNumber) {\n      errorParams.phoneNumber = response.phoneNumber;\n    }\n    const error = _createError(auth, code, errorParams);\n    // We know customData is defined on error because errorParams is defined\n    error.customData._tokenResponse = response;\n    return error;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function isEnterprise(grecaptcha) {\n    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n  }\n  class RecaptchaConfig {\n    constructor(response) {\n      /**\n       * The reCAPTCHA site key.\n       */\n      this.siteKey = '';\n      /**\n       * The list of providers and their enablement status for reCAPTCHA Enterprise.\n       */\n      this.recaptchaEnforcementState = [];\n      if (response.recaptchaKey === undefined) {\n        throw new Error('recaptchaKey undefined');\n      }\n      // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n      this.siteKey = response.recaptchaKey.split('/')[3];\n      this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n    }\n    /**\n     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n     *\n     * @param providerStr - The provider whose enforcement state is to be returned.\n     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n     */\n    getProviderEnforcementState(providerStr) {\n      if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n        return null;\n      }\n      for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n        if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n          return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n        }\n      }\n      return null;\n    }\n    /**\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n     *\n     * @param providerStr - The provider whose enablement state is to be returned.\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n     */\n    isProviderEnabled(providerStr) {\n      return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n    }\n    /**\n     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n     * returns false.\n     *\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n     */\n    isAnyProviderEnabled() {\n      return this.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) || this.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function getRecaptchaConfig(auth, request) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function deleteAccount(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request);\n  }\n  async function deleteLinkedAccounts(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  async function getAccountInfo(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function utcTimestampToDateString(utcTimestamp) {\n    if (!utcTimestamp) {\n      return undefined;\n    }\n    try {\n      // Convert to date object.\n      const date = new Date(Number(utcTimestamp));\n      // Test date is valid.\n      if (!isNaN(date.getTime())) {\n        // Convert to UTC date string.\n        return date.toUTCString();\n      }\n    } catch (e) {\n      // Do nothing. undefined will be returned.\n    }\n    return undefined;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  function getIdToken(user, forceRefresh = false) {\n    return (0, _util.getModularInstance)(user).getIdToken(forceRefresh);\n  }\n  /**\n   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n   *\n   * @remarks\n   * Returns the current token if it has not expired or if it will not expire in the next five\n   * minutes. Otherwise, this will refresh the token and return a new one.\n   *\n   * @param user - The user.\n   * @param forceRefresh - Force refresh regardless of token expiration.\n   *\n   * @public\n   */\n  async function getIdTokenResult(user, forceRefresh = false) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    const token = await userInternal.getIdToken(forceRefresh);\n    const claims = _parseToken(token);\n    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;\n    const signInProvider = firebase?.['sign_in_provider'];\n    return {\n      claims,\n      token,\n      authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n      issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n      expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n      signInProvider: signInProvider || null,\n      signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n    };\n  }\n  function secondsStringToMilliseconds(seconds) {\n    return Number(seconds) * 1000;\n  }\n  function _parseToken(token) {\n    const [algorithm, payload, signature] = token.split('.');\n    if (algorithm === undefined || payload === undefined || signature === undefined) {\n      _logError('JWT malformed, contained fewer than 3 sections');\n      return null;\n    }\n    try {\n      const decoded = (0, _util.base64Decode)(payload);\n      if (!decoded) {\n        _logError('Failed to decode base64 JWT payload');\n        return null;\n      }\n      return JSON.parse(decoded);\n    } catch (e) {\n      _logError('Caught error parsing JWT payload as JSON', e?.toString());\n      return null;\n    }\n  }\n  /**\n   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n   */\n  function _tokenExpiresIn(token) {\n    const parsedToken = _parseToken(token);\n    _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    return Number(parsedToken.exp) - Number(parsedToken.iat);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {\n    if (bypassAuthState) {\n      return promise;\n    }\n    try {\n      return await promise;\n    } catch (e) {\n      if (e instanceof _util.FirebaseError && isUserInvalidated(e)) {\n        if (user.auth.currentUser === user) {\n          await user.auth.signOut();\n        }\n      }\n      throw e;\n    }\n  }\n  function isUserInvalidated({\n    code\n  }) {\n    return code === `auth/${\"user-disabled\" /* AuthErrorCode.USER_DISABLED */}` || code === `auth/${\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class ProactiveRefresh {\n    constructor(user) {\n      this.user = user;\n      this.isRunning = false;\n      // Node timers and browser timers return fundamentally different types.\n      // We don't actually care what the value is but TS won't accept unknown and\n      // we can't cast properly in both environments.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.timerId = null;\n      this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n    }\n    _start() {\n      if (this.isRunning) {\n        return;\n      }\n      this.isRunning = true;\n      this.schedule();\n    }\n    _stop() {\n      if (!this.isRunning) {\n        return;\n      }\n      this.isRunning = false;\n      if (this.timerId !== null) {\n        clearTimeout(this.timerId);\n      }\n    }\n    getInterval(wasError) {\n      if (wasError) {\n        const interval = this.errorBackoff;\n        this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n        return interval;\n      } else {\n        // Reset the error backoff\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n        const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n        const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n        return Math.max(0, interval);\n      }\n    }\n    schedule(wasError = false) {\n      if (!this.isRunning) {\n        // Just in case...\n        return;\n      }\n      const interval = this.getInterval(wasError);\n      this.timerId = setTimeout(async () => {\n        await this.iteration();\n      }, interval);\n    }\n    async iteration() {\n      try {\n        await this.user.getIdToken(true);\n      } catch (e) {\n        // Only retry on network errors\n        if (e?.code === `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          this.schedule(/* wasError */true);\n        }\n        return;\n      }\n      this.schedule();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserMetadata {\n    constructor(createdAt, lastLoginAt) {\n      this.createdAt = createdAt;\n      this.lastLoginAt = lastLoginAt;\n      this._initializeTime();\n    }\n    _initializeTime() {\n      this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n      this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n    _copy(metadata) {\n      this.createdAt = metadata.createdAt;\n      this.lastLoginAt = metadata.lastLoginAt;\n      this._initializeTime();\n    }\n    toJSON() {\n      return {\n        createdAt: this.createdAt,\n        lastLoginAt: this.lastLoginAt\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reloadWithoutSaving(user) {\n    const auth = user.auth;\n    const idToken = await user.getIdToken();\n    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {\n      idToken\n    }));\n    _assert(response?.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    const coreAccount = response.users[0];\n    user._notifyReloadListener(coreAccount);\n    const newProviderData = coreAccount.providerUserInfo?.length ? extractProviderData(coreAccount.providerUserInfo) : [];\n    const providerData = mergeProviderData(user.providerData, newProviderData);\n    // Preserves the non-nonymous status of the stored user, even if no more\n    // credentials (federated or email/password) are linked to the user. If\n    // the user was previously anonymous, then use provider data to update.\n    // On the other hand, if it was not anonymous before, it should never be\n    // considered anonymous now.\n    const oldIsAnonymous = user.isAnonymous;\n    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !providerData?.length;\n    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n    const updates = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n      isAnonymous\n    };\n    Object.assign(user, updates);\n  }\n  /**\n   * Reloads user account data, if signed in.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function reload(user) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _reloadWithoutSaving(userInternal);\n    // Even though the current user hasn't changed, update\n    // current user will trigger a persistence update w/ the\n    // new info.\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    userInternal.auth._notifyListenersIfCurrent(userInternal);\n  }\n  function mergeProviderData(original, newData) {\n    const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));\n    return [...deduped, ...newData];\n  }\n  function extractProviderData(providers) {\n    return providers.map(({\n      providerId,\n      ...provider\n    }) => {\n      return {\n        providerId,\n        uid: provider.rawId || '',\n        displayName: provider.displayName || null,\n        email: provider.email || null,\n        phoneNumber: provider.phoneNumber || null,\n        photoURL: provider.photoUrl || null\n      };\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function requestStsToken(auth, refreshToken) {\n    const response = await _performFetchWithErrorHandling(auth, {}, async () => {\n      const body = (0, _util.querystring)({\n        'grant_type': 'refresh_token',\n        'refresh_token': refreshToken\n      }).slice(1);\n      const {\n        tokenApiHost,\n        apiKey\n      } = auth.config;\n      const url = await _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, `key=${apiKey}`);\n      const headers = await auth._getAdditionalHeaders();\n      headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n      const options = {\n        method: \"POST\" /* HttpMethod.POST */,\n        headers,\n        body\n      };\n      if (auth.emulatorConfig && (0, _util.isCloudWorkstation)(auth.emulatorConfig.host)) {\n        options.credentials = 'include';\n      }\n      return FetchProvider.fetch()(url, options);\n    });\n    // The response comes back in snake_case. Convert to camel:\n    return {\n      accessToken: response.access_token,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token\n    };\n  }\n  async function revokeToken(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * We need to mark this class as internal explicitly to exclude it in the public typings, because\n   * it references AuthInternal which has a circular dependency with UserInternal.\n   *\n   * @internal\n   */\n  class StsTokenManager {\n    constructor() {\n      this.refreshToken = null;\n      this.accessToken = null;\n      this.expirationTime = null;\n    }\n    get isExpired() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    }\n    updateFromServerResponse(response) {\n      _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n      this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n    updateFromIdToken(idToken) {\n      _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const expiresIn = _tokenExpiresIn(idToken);\n      this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n    async getToken(auth, forceRefresh = false) {\n      if (!forceRefresh && this.accessToken && !this.isExpired) {\n        return this.accessToken;\n      }\n      _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n      if (this.refreshToken) {\n        await this.refresh(auth, this.refreshToken);\n        return this.accessToken;\n      }\n      return null;\n    }\n    clearRefreshToken() {\n      this.refreshToken = null;\n    }\n    async refresh(auth, oldToken) {\n      const {\n        accessToken,\n        refreshToken,\n        expiresIn\n      } = await requestStsToken(auth, oldToken);\n      this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n    }\n    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n      this.refreshToken = refreshToken || null;\n      this.accessToken = accessToken || null;\n      this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n    static fromJSON(appName, object) {\n      const {\n        refreshToken,\n        accessToken,\n        expirationTime\n      } = object;\n      const manager = new StsTokenManager();\n      if (refreshToken) {\n        _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.refreshToken = refreshToken;\n      }\n      if (accessToken) {\n        _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.accessToken = accessToken;\n      }\n      if (expirationTime) {\n        _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName\n        });\n        manager.expirationTime = expirationTime;\n      }\n      return manager;\n    }\n    toJSON() {\n      return {\n        refreshToken: this.refreshToken,\n        accessToken: this.accessToken,\n        expirationTime: this.expirationTime\n      };\n    }\n    _assign(stsTokenManager) {\n      this.accessToken = stsTokenManager.accessToken;\n      this.refreshToken = stsTokenManager.refreshToken;\n      this.expirationTime = stsTokenManager.expirationTime;\n    }\n    _clone() {\n      return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n    _performRefresh() {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function assertStringOrUndefined(assertion, appName) {\n    _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n      appName\n    });\n  }\n  class UserImpl {\n    constructor({\n      uid,\n      auth,\n      stsTokenManager,\n      ...opt\n    }) {\n      // For the user object, provider is always Firebase.\n      this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n      this.proactiveRefresh = new ProactiveRefresh(this);\n      this.reloadUserInfo = null;\n      this.reloadListener = null;\n      this.uid = uid;\n      this.auth = auth;\n      this.stsTokenManager = stsTokenManager;\n      this.accessToken = stsTokenManager.accessToken;\n      this.displayName = opt.displayName || null;\n      this.email = opt.email || null;\n      this.emailVerified = opt.emailVerified || false;\n      this.phoneNumber = opt.phoneNumber || null;\n      this.photoURL = opt.photoURL || null;\n      this.isAnonymous = opt.isAnonymous || false;\n      this.tenantId = opt.tenantId || null;\n      this.providerData = opt.providerData ? [...opt.providerData] : [];\n      this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n    }\n    async getIdToken(forceRefresh) {\n      const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n      _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      if (this.accessToken !== accessToken) {\n        this.accessToken = accessToken;\n        await this.auth._persistUserIfCurrent(this);\n        this.auth._notifyListenersIfCurrent(this);\n      }\n      return accessToken;\n    }\n    getIdTokenResult(forceRefresh) {\n      return getIdTokenResult(this, forceRefresh);\n    }\n    reload() {\n      return reload(this);\n    }\n    _assign(user) {\n      if (this === user) {\n        return;\n      }\n      _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.displayName = user.displayName;\n      this.photoURL = user.photoURL;\n      this.email = user.email;\n      this.emailVerified = user.emailVerified;\n      this.phoneNumber = user.phoneNumber;\n      this.isAnonymous = user.isAnonymous;\n      this.tenantId = user.tenantId;\n      this.providerData = user.providerData.map(userInfo => ({\n        ...userInfo\n      }));\n      this.metadata._copy(user.metadata);\n      this.stsTokenManager._assign(user.stsTokenManager);\n    }\n    _clone(auth) {\n      const newUser = new UserImpl({\n        ...this,\n        auth,\n        stsTokenManager: this.stsTokenManager._clone()\n      });\n      newUser.metadata._copy(this.metadata);\n      return newUser;\n    }\n    _onReload(callback) {\n      // There should only ever be one listener, and that is a single instance of MultiFactorUser\n      _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.reloadListener = callback;\n      if (this.reloadUserInfo) {\n        this._notifyReloadListener(this.reloadUserInfo);\n        this.reloadUserInfo = null;\n      }\n    }\n    _notifyReloadListener(userInfo) {\n      if (this.reloadListener) {\n        this.reloadListener(userInfo);\n      } else {\n        // If no listener is subscribed yet, save the result so it's available when they do subscribe\n        this.reloadUserInfo = userInfo;\n      }\n    }\n    _startProactiveRefresh() {\n      this.proactiveRefresh._start();\n    }\n    _stopProactiveRefresh() {\n      this.proactiveRefresh._stop();\n    }\n    async _updateTokensIfNecessary(response, reload = false) {\n      let tokensRefreshed = false;\n      if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n        this.stsTokenManager.updateFromServerResponse(response);\n        tokensRefreshed = true;\n      }\n      if (reload) {\n        await _reloadWithoutSaving(this);\n      }\n      await this.auth._persistUserIfCurrent(this);\n      if (tokensRefreshed) {\n        this.auth._notifyListenersIfCurrent(this);\n      }\n    }\n    async delete() {\n      if ((0, _app._isFirebaseServerApp)(this.auth.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));\n      }\n      const idToken = await this.getIdToken();\n      await _logoutIfInvalidated(this, deleteAccount(this.auth, {\n        idToken\n      }));\n      this.stsTokenManager.clearRefreshToken();\n      // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n      //       cancels pending actions...\n      return this.auth.signOut();\n    }\n    toJSON() {\n      return {\n        uid: this.uid,\n        email: this.email || undefined,\n        emailVerified: this.emailVerified,\n        displayName: this.displayName || undefined,\n        isAnonymous: this.isAnonymous,\n        photoURL: this.photoURL || undefined,\n        phoneNumber: this.phoneNumber || undefined,\n        tenantId: this.tenantId || undefined,\n        providerData: this.providerData.map(userInfo => ({\n          ...userInfo\n        })),\n        stsTokenManager: this.stsTokenManager.toJSON(),\n        // Redirect event ID must be maintained in case there is a pending\n        // redirect event.\n        _redirectEventId: this._redirectEventId,\n        ...this.metadata.toJSON(),\n        // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n        apiKey: this.auth.config.apiKey,\n        appName: this.auth.name\n        // Missing authDomain will be tolerated by the legacy SDK.\n        // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n      };\n    }\n    get refreshToken() {\n      return this.stsTokenManager.refreshToken || '';\n    }\n    static _fromJSON(auth, object) {\n      const displayName = object.displayName ?? undefined;\n      const email = object.email ?? undefined;\n      const phoneNumber = object.phoneNumber ?? undefined;\n      const photoURL = object.photoURL ?? undefined;\n      const tenantId = object.tenantId ?? undefined;\n      const _redirectEventId = object._redirectEventId ?? undefined;\n      const createdAt = object.createdAt ?? undefined;\n      const lastLoginAt = object.lastLoginAt ?? undefined;\n      const {\n        uid,\n        emailVerified,\n        isAnonymous,\n        providerData,\n        stsTokenManager: plainObjectTokenManager\n      } = object;\n      _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n      _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(displayName, auth.name);\n      assertStringOrUndefined(email, auth.name);\n      _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(phoneNumber, auth.name);\n      assertStringOrUndefined(photoURL, auth.name);\n      assertStringOrUndefined(tenantId, auth.name);\n      assertStringOrUndefined(_redirectEventId, auth.name);\n      assertStringOrUndefined(createdAt, auth.name);\n      assertStringOrUndefined(lastLoginAt, auth.name);\n      const user = new UserImpl({\n        uid,\n        auth,\n        email,\n        emailVerified,\n        displayName,\n        isAnonymous,\n        photoURL,\n        phoneNumber,\n        tenantId,\n        stsTokenManager,\n        createdAt,\n        lastLoginAt\n      });\n      if (providerData && Array.isArray(providerData)) {\n        user.providerData = providerData.map(userInfo => ({\n          ...userInfo\n        }));\n      }\n      if (_redirectEventId) {\n        user._redirectEventId = _redirectEventId;\n      }\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromServerResponse(idTokenResponse);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: idTokenResponse.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // Updates the user info and data and resolves with a user instance.\n      await _reloadWithoutSaving(user);\n      return user;\n    }\n    /**\n     * Initialize a User from an idToken server response\n     * @param auth\n     * @param idTokenResponse\n     */\n    static async _fromGetAccountInfoResponse(auth, response, idToken) {\n      const coreAccount = response.users[0];\n      _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n      const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n      const stsTokenManager = new StsTokenManager();\n      stsTokenManager.updateFromIdToken(idToken);\n      // Initialize the Firebase Auth user.\n      const user = new UserImpl({\n        uid: coreAccount.localId,\n        auth,\n        stsTokenManager,\n        isAnonymous\n      });\n      // update the user with data from the GetAccountInfo response.\n      const updates = {\n        uid: coreAccount.localId,\n        displayName: coreAccount.displayName || null,\n        photoURL: coreAccount.photoUrl || null,\n        email: coreAccount.email || null,\n        emailVerified: coreAccount.emailVerified || false,\n        phoneNumber: coreAccount.phoneNumber || null,\n        tenantId: coreAccount.tenantId || null,\n        providerData,\n        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n        isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length\n      };\n      Object.assign(user, updates);\n      return user;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.aQ = UserImpl;\n  const instanceCache = new Map();\n  function _getInstance(cls) {\n    debugAssert(cls instanceof Function, 'Expected a class definition');\n    let instance = instanceCache.get(cls);\n    if (instance) {\n      debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n      return instance;\n    }\n    instance = new cls();\n    instanceCache.set(cls, instance);\n    return instance;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class InMemoryPersistence {\n    constructor() {\n      this.type = \"NONE\" /* PersistenceType.NONE */;\n      this.storage = {};\n    }\n    async _isAvailable() {\n      return true;\n    }\n    async _set(key, value) {\n      this.storage[key] = value;\n    }\n    async _get(key) {\n      const value = this.storage[key];\n      return value === undefined ? null : value;\n    }\n    async _remove(key) {\n      delete this.storage[key];\n    }\n    _addListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n    _removeListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }\n  InMemoryPersistence.type = 'NONE';\n  /**\n   * An implementation of {@link Persistence} of type 'NONE'.\n   *\n   * @public\n   */\n  const inMemoryPersistence = exports.V = InMemoryPersistence;\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _persistenceKeyName(key, apiKey, appName) {\n    return `${\"firebase\" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;\n  }\n  class PersistenceUserManager {\n    constructor(persistence, auth, userKey) {\n      this.persistence = persistence;\n      this.auth = auth;\n      this.userKey = userKey;\n      const {\n        config,\n        name\n      } = this.auth;\n      this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n      this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n      this.boundEventHandler = auth._onStorageEvent.bind(auth);\n      this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n    }\n    setCurrentUser(user) {\n      return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n    async getCurrentUser() {\n      const blob = await this.persistence._get(this.fullUserKey);\n      if (!blob) {\n        return null;\n      }\n      if (typeof blob === 'string') {\n        const response = await getAccountInfo(this.auth, {\n          idToken: blob\n        }).catch(() => undefined);\n        if (!response) {\n          return null;\n        }\n        return UserImpl._fromGetAccountInfoResponse(this.auth, response, blob);\n      }\n      return UserImpl._fromJSON(this.auth, blob);\n    }\n    removeCurrentUser() {\n      return this.persistence._remove(this.fullUserKey);\n    }\n    savePersistenceForRedirect() {\n      return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n    async setPersistence(newPersistence) {\n      if (this.persistence === newPersistence) {\n        return;\n      }\n      const currentUser = await this.getCurrentUser();\n      await this.removeCurrentUser();\n      this.persistence = newPersistence;\n      if (currentUser) {\n        return this.setCurrentUser(currentUser);\n      }\n    }\n    delete() {\n      this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n    static async create(auth, persistenceHierarchy, userKey = \"authUser\" /* KeyName.AUTH_USER */) {\n      if (!persistenceHierarchy.length) {\n        return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);\n      }\n      // Eliminate any persistences that are not available\n      const availablePersistences = (await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (await persistence._isAvailable()) {\n          return persistence;\n        }\n        return undefined;\n      }))).filter(persistence => persistence);\n      // Fall back to the first persistence listed, or in memory if none available\n      let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n      const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n      // Pull out the existing user, setting the chosen persistence to that\n      // persistence if the user exists.\n      let userToMigrate = null;\n      // Note, here we check for a user in _all_ persistences, not just the\n      // ones deemed available. If we can migrate a user out of a broken\n      // persistence, we will (but only if that persistence supports migration).\n      for (const persistence of persistenceHierarchy) {\n        try {\n          const blob = await persistence._get(key);\n          if (blob) {\n            let user;\n            if (typeof blob === 'string') {\n              const response = await getAccountInfo(auth, {\n                idToken: blob\n              }).catch(() => undefined);\n              if (!response) {\n                break;\n              }\n              user = await UserImpl._fromGetAccountInfoResponse(auth, response, blob);\n            } else {\n              user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n            }\n            if (persistence !== selectedPersistence) {\n              userToMigrate = user;\n            }\n            selectedPersistence = persistence;\n            break;\n          }\n        } catch {}\n      }\n      // If we find the user in a persistence that does support migration, use\n      // that migration path (of only persistences that support migration)\n      const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);\n      // If the persistence does _not_ allow migration, just finish off here\n      if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {\n        return new PersistenceUserManager(selectedPersistence, auth, userKey);\n      }\n      selectedPersistence = migrationHierarchy[0];\n      if (userToMigrate) {\n        // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n        // we'll just let it bubble to surface the error.\n        await selectedPersistence._set(key, userToMigrate.toJSON());\n      }\n      // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n      // such as users getting stuck with a previous account after signing out and refreshing the tab.\n      await Promise.all(persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      }));\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Determine the browser for the purposes of reporting usage to the API\n   */\n  function _getBrowserName(userAgent) {\n    const ua = userAgent.toLowerCase();\n    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n      return \"Opera\" /* BrowserName.OPERA */;\n    } else if (_isIEMobile(ua)) {\n      // Windows phone IEMobile browser.\n      return \"IEMobile\" /* BrowserName.IEMOBILE */;\n    } else if (ua.includes('msie') || ua.includes('trident/')) {\n      return \"IE\" /* BrowserName.IE */;\n    } else if (ua.includes('edge/')) {\n      return \"Edge\" /* BrowserName.EDGE */;\n    } else if (_isFirefox(ua)) {\n      return \"Firefox\" /* BrowserName.FIREFOX */;\n    } else if (ua.includes('silk/')) {\n      return \"Silk\" /* BrowserName.SILK */;\n    } else if (_isBlackBerry(ua)) {\n      // Blackberry browser.\n      return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n    } else if (_isWebOS(ua)) {\n      // WebOS default browser.\n      return \"Webos\" /* BrowserName.WEBOS */;\n    } else if (_isSafari(ua)) {\n      return \"Safari\" /* BrowserName.SAFARI */;\n    } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n      return \"Chrome\" /* BrowserName.CHROME */;\n    } else if (_isAndroid(ua)) {\n      // Android stock browser.\n      return \"Android\" /* BrowserName.ANDROID */;\n    } else {\n      // Most modern browsers have name/version at end of user agent string.\n      const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n      const matches = userAgent.match(re);\n      if (matches?.length === 2) {\n        return matches[1];\n      }\n    }\n    return \"Other\" /* BrowserName.OTHER */;\n  }\n  function _isFirefox(ua = (0, _util.getUA)()) {\n    return /firefox\\//i.test(ua);\n  }\n  function _isSafari(userAgent = (0, _util.getUA)()) {\n    const ua = userAgent.toLowerCase();\n    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n  }\n  function _isChromeIOS(ua = (0, _util.getUA)()) {\n    return /crios\\//i.test(ua);\n  }\n  function _isIEMobile(ua = (0, _util.getUA)()) {\n    return /iemobile/i.test(ua);\n  }\n  function _isAndroid(ua = (0, _util.getUA)()) {\n    return /android/i.test(ua);\n  }\n  function _isBlackBerry(ua = (0, _util.getUA)()) {\n    return /blackberry/i.test(ua);\n  }\n  function _isWebOS(ua = (0, _util.getUA)()) {\n    return /webos/i.test(ua);\n  }\n  function _isIOS(ua = (0, _util.getUA)()) {\n    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n  }\n  function _isIOS7Or8(ua = (0, _util.getUA)()) {\n    return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n  }\n  function _isIE10() {\n    return (0, _util.isIE)() && document.documentMode === 10;\n  }\n  function _isMobileBrowser(ua = (0, _util.getUA)()) {\n    // TODO: implement getBrowserName equivalent for OS.\n    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /*\n   * Determine the SDK version string\n   */\n  function _getClientVersion(clientPlatform, frameworks = []) {\n    let reportedPlatform;\n    switch (clientPlatform) {\n      case \"Browser\" /* ClientPlatform.BROWSER */:\n        // In a browser environment, report the browser name.\n        reportedPlatform = _getBrowserName((0, _util.getUA)());\n        break;\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        // Technically a worker runs from a browser but we need to differentiate a\n        // worker from a browser.\n        // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n        reportedPlatform = `${_getBrowserName((0, _util.getUA)())}-${clientPlatform}`;\n        break;\n      default:\n        reportedPlatform = clientPlatform;\n    }\n    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n    return `${reportedPlatform}/${\"JsCore\" /* ClientImplementation.CORE */}/${_app.SDK_VERSION}/${reportedFrameworks}`;\n  }\n\n  /**\n   * @license\n   * Copyright 2022 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthMiddlewareQueue {\n    constructor(auth) {\n      this.auth = auth;\n      this.queue = [];\n    }\n    pushCallback(callback, onAbort) {\n      // The callback could be sync or async. Wrap it into a\n      // function that is always async.\n      const wrappedCallback = user => new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n      // Attach the onAbort if present\n      wrappedCallback.onAbort = onAbort;\n      this.queue.push(wrappedCallback);\n      const index = this.queue.length - 1;\n      return () => {\n        // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n        // indexing of other elements.\n        this.queue[index] = () => Promise.resolve();\n      };\n    }\n    async runMiddleware(nextUser) {\n      if (this.auth.currentUser === nextUser) {\n        return;\n      }\n      // While running the middleware, build a temporary stack of onAbort\n      // callbacks to call if one middleware callback rejects.\n      const onAbortStack = [];\n      try {\n        for (const beforeStateCallback of this.queue) {\n          await beforeStateCallback(nextUser);\n          // Only push the onAbort if the callback succeeds\n          if (beforeStateCallback.onAbort) {\n            onAbortStack.push(beforeStateCallback.onAbort);\n          }\n        }\n      } catch (e) {\n        // Run all onAbort, with separate try/catch to ignore any errors and\n        // continue\n        onAbortStack.reverse();\n        for (const onAbort of onAbortStack) {\n          try {\n            onAbort();\n          } catch (_) {\n            /* swallow error */\n          }\n        }\n        throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n          originalMessage: e?.message\n        });\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n   *\n   * @param auth Auth object.\n   * @param request Password policy request.\n   * @returns Password policy response.\n   */\n  async function _getPasswordPolicy(auth, request = {}) {\n    return _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2023 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Minimum min password length enforced by the backend, even if no minimum length is set.\n  const MINIMUM_MIN_PASSWORD_LENGTH = 6;\n  /**\n   * Stores password policy requirements and provides password validation against the policy.\n   *\n   * @internal\n   */\n  class PasswordPolicyImpl {\n    constructor(response) {\n      // Only include custom strength options defined in the response.\n      const responseOptions = response.customStrengthOptions;\n      this.customStrengthOptions = {};\n      // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n      this.customStrengthOptions.minPasswordLength = responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n      if (responseOptions.maxPasswordLength) {\n        this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n      }\n      if (responseOptions.containsLowercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n      }\n      if (responseOptions.containsUppercaseCharacter !== undefined) {\n        this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n      }\n      if (responseOptions.containsNumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n      }\n      if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n        this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n      }\n      this.enforcementState = response.enforcementState;\n      if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n        this.enforcementState = 'OFF';\n      }\n      // Use an empty string if no non-alphanumeric characters are specified in the response.\n      this.allowedNonAlphanumericCharacters = response.allowedNonAlphanumericCharacters?.join('') ?? '';\n      this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n      this.schemaVersion = response.schemaVersion;\n    }\n    validatePassword(password) {\n      const status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      // Check the password length and character options.\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      // Combine the status into single isValid property.\n      status.isValid && (status.isValid = status.meetsMinPasswordLength ?? true);\n      status.isValid && (status.isValid = status.meetsMaxPasswordLength ?? true);\n      status.isValid && (status.isValid = status.containsLowercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsUppercaseLetter ?? true);\n      status.isValid && (status.isValid = status.containsNumericCharacter ?? true);\n      status.isValid && (status.isValid = status.containsNonAlphanumericCharacter ?? true);\n      return status;\n    }\n    /**\n     * Validates that the password meets the length options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordLengthOptions(password, status) {\n      const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n    /**\n     * Validates that the password meets the character options for the policy.\n     *\n     * @param password Password to validate.\n     * @param status Validation status.\n     */\n    validatePasswordCharacterOptions(password, status) {\n      // Assign statuses for requirements even if the password is an empty string.\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n      let passwordChar;\n      for (let i = 0; i < password.length; i++) {\n        passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n    /**\n     * Updates the running validation status with the statuses for the character options.\n     * Expected to be called each time a character is processed to update each option status\n     * based on the current character.\n     *\n     * @param status Validation status.\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n     * @param containsNumericCharacter Whether the character is a numeric character.\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n     */\n    updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthImpl {\n    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n      this.app = app;\n      this.heartbeatServiceProvider = heartbeatServiceProvider;\n      this.appCheckServiceProvider = appCheckServiceProvider;\n      this.config = config;\n      this.currentUser = null;\n      this.emulatorConfig = null;\n      this.operations = Promise.resolve();\n      this.authStateSubscription = new Subscription(this);\n      this.idTokenSubscription = new Subscription(this);\n      this.beforeStateQueue = new AuthMiddlewareQueue(this);\n      this.redirectUser = null;\n      this.isProactiveRefreshEnabled = false;\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n      // Any network calls will set this to true and prevent subsequent emulator\n      // initialization\n      this._canInitEmulator = true;\n      this._isInitialized = false;\n      this._deleted = false;\n      this._initializationPromise = null;\n      this._popupRedirectResolver = null;\n      this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n      this._agentRecaptchaConfig = null;\n      this._tenantRecaptchaConfigs = {};\n      this._projectPasswordPolicy = null;\n      this._tenantPasswordPolicies = {};\n      this._resolvePersistenceManagerAvailable = undefined;\n      // Tracks the last notified UID for state change listeners to prevent\n      // repeated calls to the callbacks. Undefined means it's never been\n      // called, whereas null means it's been called with a signed out user\n      this.lastNotifiedUid = undefined;\n      this.languageCode = null;\n      this.tenantId = null;\n      this.settings = {\n        appVerificationDisabledForTesting: false\n      };\n      this.frameworks = [];\n      this.name = app.name;\n      this.clientVersion = config.sdkClientVersion;\n      // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs\n      // persistenceMananger to be available. see _getFinalTarget for more context\n      this._persistenceManagerAvailable = new Promise(resolve => this._resolvePersistenceManagerAvailable = resolve);\n    }\n    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n      if (popupRedirectResolver) {\n        this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n      }\n      // Have to check for app deletion throughout initialization (after each\n      // promise resolution)\n      this._initializationPromise = this.queue(async () => {\n        if (this._deleted) {\n          return;\n        }\n        this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);\n        this._resolvePersistenceManagerAvailable?.();\n        if (this._deleted) {\n          return;\n        }\n        // Initialize the resolver early if necessary (only applicable to web:\n        // this will cause the iframe to load immediately in certain cases)\n        if (this._popupRedirectResolver?._shouldInitProactively) {\n          // If this fails, don't halt auth loading\n          try {\n            await this._popupRedirectResolver._initialize(this);\n          } catch (e) {\n            /* Ignore the error */\n          }\n        }\n        await this.initializeCurrentUser(popupRedirectResolver);\n        this.lastNotifiedUid = this.currentUser?.uid || null;\n        if (this._deleted) {\n          return;\n        }\n        this._isInitialized = true;\n      });\n      return this._initializationPromise;\n    }\n    /**\n     * If the persistence is changed in another window, the user manager will let us know\n     */\n    async _onStorageEvent() {\n      if (this._deleted) {\n        return;\n      }\n      const user = await this.assertedPersistence.getCurrentUser();\n      if (!this.currentUser && !user) {\n        // No change, do nothing (was signed out and remained signed out).\n        return;\n      }\n      // If the same user is to be synchronized.\n      if (this.currentUser && user && this.currentUser.uid === user.uid) {\n        // Data update, simply copy data changes.\n        this._currentUser._assign(user);\n        // If tokens changed from previous user tokens, this will trigger\n        // notifyAuthListeners_.\n        await this.currentUser.getIdToken();\n        return;\n      }\n      // Update current Auth state. Either a new login or logout.\n      // Skip blocking callbacks, they should not apply to a change in another tab.\n      await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n    }\n    async initializeCurrentUserFromIdToken(idToken) {\n      try {\n        const response = await getAccountInfo(this, {\n          idToken\n        });\n        const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n        await this.directlySetCurrentUser(user);\n      } catch (err) {\n        console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);\n        await this.directlySetCurrentUser(null);\n      }\n    }\n    async initializeCurrentUser(popupRedirectResolver) {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        const idToken = this.app.settings.authIdToken;\n        if (idToken) {\n          // Start the auth operation in the next tick to allow a moment for the customer's app to\n          // attach an emulator, if desired.\n          return new Promise(resolve => {\n            setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));\n          });\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      // First check to see if we have a pending redirect event.\n      const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();\n      let futureCurrentUser = previouslyStoredUser;\n      let needsTocheckMiddleware = false;\n      if (popupRedirectResolver && this.config.authDomain) {\n        await this.getOrInitRedirectPersistenceManager();\n        const redirectUserEventId = this.redirectUser?._redirectEventId;\n        const storedUserEventId = futureCurrentUser?._redirectEventId;\n        const result = await this.tryRedirectSignIn(popupRedirectResolver);\n        // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n        // matches the redirect user, then we want to initially sign in with the\n        // new user object from result.\n        // TODO(samgho): More thoroughly test all of this\n        if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && result?.user) {\n          futureCurrentUser = result.user;\n          needsTocheckMiddleware = true;\n        }\n      }\n      // If no user in persistence, there is no current user. Set to null.\n      if (!futureCurrentUser) {\n        return this.directlySetCurrentUser(null);\n      }\n      if (!futureCurrentUser._redirectEventId) {\n        // This isn't a redirect link operation, we can reload and bail.\n        // First though, ensure that we check the middleware is happy.\n        if (needsTocheckMiddleware) {\n          try {\n            await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n          } catch (e) {\n            futureCurrentUser = previouslyStoredUser;\n            // We know this is available since the bit is only set when the\n            // resolver is available\n            this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));\n          }\n        }\n        if (futureCurrentUser) {\n          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n        } else {\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      await this.getOrInitRedirectPersistenceManager();\n      // If the redirect user's event ID matches the current user's event ID,\n      // DO NOT reload the current user, otherwise they'll be cleared from storage.\n      // This is important for the reauthenticateWithRedirect() flow.\n      if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {\n        return this.directlySetCurrentUser(futureCurrentUser);\n      }\n      return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n    }\n    async tryRedirectSignIn(redirectResolver) {\n      // The redirect user needs to be checked (and signed in if available)\n      // during auth initialization. All of the normal sign in and link/reauth\n      // flows call back into auth and push things onto the promise queue. We\n      // need to await the result of the redirect sign in *inside the promise\n      // queue*. This presents a problem: we run into deadlock. See:\n      //    ┌> [Initialization] ─────┐\n      //    ┌> [<other queue tasks>] │\n      //    └─ [getRedirectResult] <─┘\n      //    where [] are tasks on the queue and arrows denote awaits\n      // Initialization will never complete because it's waiting on something\n      // that's waiting for initialization to complete!\n      //\n      // Instead, this method calls getRedirectResult() (stored in\n      // _completeRedirectFn) with an optional parameter that instructs all of\n      // the underlying auth operations to skip anything that mutates auth state.\n      let result = null;\n      try {\n        // We know this._popupRedirectResolver is set since redirectResolver\n        // is passed in. The _completeRedirectFn expects the unwrapped extern.\n        result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n      } catch (e) {\n        // Swallow any errors here; the code can retrieve them in\n        // getRedirectResult().\n        await this._setRedirectUser(null);\n      }\n      return result;\n    }\n    async reloadAndSetCurrentUserOrClear(user) {\n      try {\n        await _reloadWithoutSaving(user);\n      } catch (e) {\n        if (e?.code !== `auth/${\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {\n          // Something's wrong with the user's token. Log them out and remove\n          // them from storage\n          return this.directlySetCurrentUser(null);\n        }\n      }\n      return this.directlySetCurrentUser(user);\n    }\n    useDeviceLanguage() {\n      this.languageCode = _getUserLanguage();\n    }\n    async _delete() {\n      this._deleted = true;\n    }\n    async updateCurrentUser(userExtern) {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // The public updateCurrentUser method needs to make a copy of the user,\n      // and also check that the project matches\n      const user = userExtern ? (0, _util.getModularInstance)(userExtern) : null;\n      if (user) {\n        _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n      }\n      return this._updateCurrentUser(user && user._clone(this));\n    }\n    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {\n      if (this._deleted) {\n        return;\n      }\n      if (user) {\n        _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n      }\n      if (!skipBeforeStateCallbacks) {\n        await this.beforeStateQueue.runMiddleware(user);\n      }\n      return this.queue(async () => {\n        await this.directlySetCurrentUser(user);\n        this.notifyAuthListeners();\n      });\n    }\n    async signOut() {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      // Run first, to block _setRedirectUser() if any callbacks fail.\n      await this.beforeStateQueue.runMiddleware(null);\n      // Clear the redirect user when signOut is called\n      if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n        await this._setRedirectUser(null);\n      }\n      // Prevent callbacks from being called again in _updateCurrentUser, as\n      // they were already called in the first line.\n      return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true);\n    }\n    setPersistence(persistence) {\n      if ((0, _app._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      return this.queue(async () => {\n        await this.assertedPersistence.setPersistence(_getInstance(persistence));\n      });\n    }\n    _getRecaptchaConfig() {\n      if (this.tenantId == null) {\n        return this._agentRecaptchaConfig;\n      } else {\n        return this._tenantRecaptchaConfigs[this.tenantId];\n      }\n    }\n    async validatePassword(password) {\n      if (!this._getPasswordPolicyInternal()) {\n        await this._updatePasswordPolicy();\n      }\n      // Password policy will be defined after fetching.\n      const passwordPolicy = this._getPasswordPolicyInternal();\n      // Check that the policy schema version is supported by the SDK.\n      // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n      if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {\n        return Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));\n      }\n      return passwordPolicy.validatePassword(password);\n    }\n    _getPasswordPolicyInternal() {\n      if (this.tenantId === null) {\n        return this._projectPasswordPolicy;\n      } else {\n        return this._tenantPasswordPolicies[this.tenantId];\n      }\n    }\n    async _updatePasswordPolicy() {\n      const response = await _getPasswordPolicy(this);\n      const passwordPolicy = new PasswordPolicyImpl(response);\n      if (this.tenantId === null) {\n        this._projectPasswordPolicy = passwordPolicy;\n      } else {\n        this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n      }\n    }\n    _getPersistenceType() {\n      return this.assertedPersistence.persistence.type;\n    }\n    _getPersistence() {\n      return this.assertedPersistence.persistence;\n    }\n    _updateErrorMap(errorMap) {\n      this._errorFactory = new _util.ErrorFactory('auth', 'Firebase', errorMap());\n    }\n    onAuthStateChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n    beforeAuthStateChanged(callback, onAbort) {\n      return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n    onIdTokenChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n    authStateReady() {\n      return new Promise((resolve, reject) => {\n        if (this.currentUser) {\n          resolve();\n        } else {\n          const unsubscribe = this.onAuthStateChanged(() => {\n            unsubscribe();\n            resolve();\n          }, reject);\n        }\n      });\n    }\n    /**\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n     */\n    async revokeAccessToken(token) {\n      if (this.currentUser) {\n        const idToken = await this.currentUser.getIdToken();\n        // Generalize this to accept other providers once supported.\n        const request = {\n          providerId: 'apple.com',\n          tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n          token,\n          idToken\n        };\n        if (this.tenantId != null) {\n          request.tenantId = this.tenantId;\n        }\n        await revokeToken(this, request);\n      }\n    }\n    toJSON() {\n      return {\n        apiKey: this.config.apiKey,\n        authDomain: this.config.authDomain,\n        appName: this.name,\n        currentUser: this._currentUser?.toJSON()\n      };\n    }\n    async _setRedirectUser(user, popupRedirectResolver) {\n      const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n      return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);\n    }\n    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {\n      if (!this.redirectPersistenceManager) {\n        const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n        _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n        this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n        this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();\n      }\n      return this.redirectPersistenceManager;\n    }\n    async _redirectUserForId(id) {\n      // Make sure we've cleared any pending persistence actions if we're not in\n      // the initializer\n      if (this._isInitialized) {\n        await this.queue(async () => {});\n      }\n      if (this._currentUser?._redirectEventId === id) {\n        return this._currentUser;\n      }\n      if (this.redirectUser?._redirectEventId === id) {\n        return this.redirectUser;\n      }\n      return null;\n    }\n    async _persistUserIfCurrent(user) {\n      if (user === this.currentUser) {\n        return this.queue(async () => this.directlySetCurrentUser(user));\n      }\n    }\n    /** Notifies listeners only if the user is current */\n    _notifyListenersIfCurrent(user) {\n      if (user === this.currentUser) {\n        this.notifyAuthListeners();\n      }\n    }\n    _key() {\n      return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n    }\n    _startProactiveRefresh() {\n      this.isProactiveRefreshEnabled = true;\n      if (this.currentUser) {\n        this._currentUser._startProactiveRefresh();\n      }\n    }\n    _stopProactiveRefresh() {\n      this.isProactiveRefreshEnabled = false;\n      if (this.currentUser) {\n        this._currentUser._stopProactiveRefresh();\n      }\n    }\n    /** Returns the current user cast as the internal type */\n    get _currentUser() {\n      return this.currentUser;\n    }\n    notifyAuthListeners() {\n      if (!this._isInitialized) {\n        return;\n      }\n      this.idTokenSubscription.next(this.currentUser);\n      const currentUid = this.currentUser?.uid ?? null;\n      if (this.lastNotifiedUid !== currentUid) {\n        this.lastNotifiedUid = currentUid;\n        this.authStateSubscription.next(this.currentUser);\n      }\n    }\n    registerStateListener(subscription, nextOrObserver, error, completed) {\n      if (this._deleted) {\n        return () => {};\n      }\n      const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n      let isUnsubscribed = false;\n      const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n      _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // The callback needs to be called asynchronously per the spec.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      promise.then(() => {\n        if (isUnsubscribed) {\n          return;\n        }\n        cb(this.currentUser);\n      });\n      if (typeof nextOrObserver === 'function') {\n        const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      } else {\n        const unsubscribe = subscription.addObserver(nextOrObserver);\n        return () => {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      }\n    }\n    /**\n     * Unprotected (from race conditions) method to set the current user. This\n     * should only be called from within a queued callback. This is necessary\n     * because the queue shouldn't rely on another queued callback.\n     */\n    async directlySetCurrentUser(user) {\n      if (this.currentUser && this.currentUser !== user) {\n        this._currentUser._stopProactiveRefresh();\n      }\n      if (user && this.isProactiveRefreshEnabled) {\n        user._startProactiveRefresh();\n      }\n      this.currentUser = user;\n      if (user) {\n        await this.assertedPersistence.setCurrentUser(user);\n      } else {\n        await this.assertedPersistence.removeCurrentUser();\n      }\n    }\n    queue(action) {\n      // In case something errors, the callback still should be called in order\n      // to keep the promise chain alive\n      this.operations = this.operations.then(action, action);\n      return this.operations;\n    }\n    get assertedPersistence() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    }\n    _logFramework(framework) {\n      if (!framework || this.frameworks.includes(framework)) {\n        return;\n      }\n      this.frameworks.push(framework);\n      // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n      // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n      this.frameworks.sort();\n      this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n    _getFrameworks() {\n      return this.frameworks;\n    }\n    async _getAdditionalHeaders() {\n      // Additional headers on every request\n      const headers = {\n        [\"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion\n      };\n      if (this.app.options.appId) {\n        headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n      }\n      // If the heartbeat service exists, add the heartbeat string\n      const heartbeatsHeader = await this.heartbeatServiceProvider.getImmediate({\n        optional: true\n      })?.getHeartbeatsHeader();\n      if (heartbeatsHeader) {\n        headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n      }\n      // If the App Check service exists, add the App Check token in the headers\n      const appCheckToken = await this._getAppCheckToken();\n      if (appCheckToken) {\n        headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n      }\n      return headers;\n    }\n    async _getAppCheckToken() {\n      if ((0, _app._isFirebaseServerApp)(this.app) && this.app.settings.appCheckToken) {\n        return this.app.settings.appCheckToken;\n      }\n      const appCheckTokenResult = await this.appCheckServiceProvider.getImmediate({\n        optional: true\n      })?.getToken();\n      if (appCheckTokenResult?.error) {\n        // Context: appCheck.getToken() will never throw even if an error happened.\n        // In the error case, a dummy token will be returned along with an error field describing\n        // the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n        _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);\n      }\n      return appCheckTokenResult?.token;\n    }\n  }\n  /**\n   * Method to be used to cast down to our private implementation of Auth.\n   * It will also handle unwrapping from the compat type if necessary\n   *\n   * @param auth Auth object passed in from developer\n   */\n  exports.aR = AuthImpl;\n  function _castAuth(auth) {\n    return (0, _util.getModularInstance)(auth);\n  }\n  /** Helper class to wrap subscriber logic */\n  class Subscription {\n    constructor(auth) {\n      this.auth = auth;\n      this.observer = null;\n      this.addObserver = (0, _util.createSubscribe)(observer => this.observer = observer);\n    }\n    get next() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  let externalJSProvider = {\n    async loadJS() {\n      throw new Error('Unable to load external scripts');\n    },\n    recaptchaV2Script: '',\n    recaptchaEnterpriseScript: '',\n    gapiScript: ''\n  };\n  function _loadJS(url) {\n    return externalJSProvider.loadJS(url);\n  }\n  function _recaptchaEnterpriseScriptUrl() {\n    return externalJSProvider.recaptchaEnterpriseScript;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MockGreCAPTCHATopLevel {\n    constructor() {\n      this.enterprise = new MockGreCAPTCHA();\n    }\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n  class MockGreCAPTCHA {\n    ready(callback) {\n      callback();\n    }\n    execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey, _options) {\n      return Promise.resolve('token');\n    }\n    render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container, _parameters) {\n      return '';\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/no-require-imports */\n  const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\n  const FAKE_TOKEN = 'NO_RECAPTCHA';\n  class RecaptchaEnterpriseVerifier {\n    /**\n     *\n     * @param authExtern - The corresponding Firebase {@link Auth} instance.\n     *\n     */\n    constructor(authExtern) {\n      /**\n       * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n       */\n      this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n      this.auth = _castAuth(authExtern);\n    }\n    /**\n     * Executes the verification process.\n     *\n     * @returns A Promise for a token that can be used to assert the validity of a request.\n     */\n    async verify(action = 'verify', forceRefresh = false) {\n      async function retrieveSiteKey(auth) {\n        if (!forceRefresh) {\n          if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n            return auth._agentRecaptchaConfig.siteKey;\n          }\n          if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {\n            return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n          }\n        }\n        return new Promise(async (resolve, reject) => {\n          getRecaptchaConfig(auth, {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }).then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          }).catch(error => {\n            reject(error);\n          });\n        });\n      }\n      function retrieveRecaptchaToken(siteKey, resolve, reject) {\n        const grecaptcha = window.grecaptcha;\n        if (isEnterprise(grecaptcha)) {\n          grecaptcha.enterprise.ready(() => {\n            grecaptcha.enterprise.execute(siteKey, {\n              action\n            }).then(token => {\n              resolve(token);\n            }).catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n          });\n        } else {\n          reject(Error('No reCAPTCHA enterprise script loaded.'));\n        }\n      }\n      // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n      if (this.auth.settings.appVerificationDisabledForTesting) {\n        const mockRecaptcha = new MockGreCAPTCHATopLevel();\n        return mockRecaptcha.execute('siteKey', {\n          action: 'verify'\n        });\n      }\n      return new Promise((resolve, reject) => {\n        retrieveSiteKey(this.auth).then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (true) {\n              reject(new Error('RecaptchaVerifier is only supported in browser'));\n              return;\n            }\n            let url = _recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            _loadJS(url).then(() => {\n              retrieveRecaptchaToken(siteKey, resolve, reject);\n            }).catch(error => {\n              reject(error);\n            });\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n  async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {\n    const verifier = new RecaptchaEnterpriseVerifier(auth);\n    let captchaResponse;\n    if (isFakeToken) {\n      captchaResponse = FAKE_TOKEN;\n    } else {\n      try {\n        captchaResponse = await verifier.verify(action);\n      } catch (error) {\n        captchaResponse = await verifier.verify(action, true);\n      }\n    }\n    const newRequest = {\n      ...request\n    };\n    if (action === \"mfaSmsEnrollment\" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ || action === \"mfaSmsSignIn\" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {\n      if ('phoneEnrollmentInfo' in newRequest) {\n        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;\n        const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneEnrollmentInfo': {\n            phoneNumber,\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      } else if ('phoneSignInInfo' in newRequest) {\n        const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;\n        Object.assign(newRequest, {\n          'phoneSignInInfo': {\n            recaptchaToken,\n            captchaResponse,\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          }\n        });\n      }\n      return newRequest;\n    }\n    if (!isCaptchaResp) {\n      Object.assign(newRequest, {\n        captchaResponse\n      });\n    } else {\n      Object.assign(newRequest, {\n        'captchaResp': captchaResponse\n      });\n    }\n    Object.assign(newRequest, {\n      'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    });\n    Object.assign(newRequest, {\n      'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    return newRequest;\n  }\n  async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {\n    if (recaptchaAuthProvider === \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n        return actionMethod(authInstance, requestWithRecaptcha);\n      } else {\n        return actionMethod(authInstance, request).catch(async error => {\n          if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {\n            console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);\n            const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n            return actionMethod(authInstance, requestWithRecaptcha);\n          } else {\n            return Promise.reject(error);\n          }\n        });\n      }\n    } else if (recaptchaAuthProvider === \"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) {\n      if (authInstance._getRecaptchaConfig()?.isProviderEnabled(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */)) {\n        const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName);\n        return actionMethod(authInstance, requestWithRecaptcha).catch(async error => {\n          if (authInstance._getRecaptchaConfig()?.getProviderEnforcementState(\"PHONE_PROVIDER\" /* RecaptchaAuthProvider.PHONE_PROVIDER */) === \"AUDIT\" /* EnforcementState.AUDIT */) {\n            // AUDIT mode\n            if (error.code === `auth/${\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}` || error.code === `auth/${\"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */}`) {\n              console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);\n              // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n              // check fails.\n              // Fallback to reCAPTCHA v2 flow.\n              const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n              // isCaptchaResp\n              true // isFakeToken\n              );\n              // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n              return actionMethod(authInstance, requestWithRecaptchaFields);\n            }\n          }\n          // ENFORCE mode or AUDIT mode with any other error.\n          return Promise.reject(error);\n        });\n      } else {\n        // Do reCAPTCHA v2 flow.\n        const requestWithRecaptchaFields = await injectRecaptchaFields(authInstance, request, actionName, false,\n        // isCaptchaResp\n        true // isFakeToken\n        );\n        // This will call the PhoneApiCaller to fetch and inject v2 token.\n        return actionMethod(authInstance, requestWithRecaptchaFields);\n      }\n    } else {\n      return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');\n    }\n  }\n  async function _initializeRecaptchaConfig(auth) {\n    const authInternal = _castAuth(auth);\n    const response = await getRecaptchaConfig(authInternal, {\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n      version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n    });\n    const config = new RecaptchaConfig(response);\n    if (authInternal.tenantId == null) {\n      authInternal._agentRecaptchaConfig = config;\n    } else {\n      authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n    }\n    if (config.isAnyProviderEnabled()) {\n      const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n      void verifier.verify();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Initializes an {@link Auth} instance with fine-grained control over\n   * {@link Dependencies}.\n   *\n   * @remarks\n   *\n   * This function allows more control over the {@link Auth} instance than\n   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n   * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n   * initialize Auth and works for most use cases. Use `initializeAuth` if you\n   * need control over which persistence layer is used, or to minimize bundle\n   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n   *\n   * For example, if your app only uses anonymous accounts and you only want\n   * accounts saved for the current session, initialize `Auth` with:\n   *\n   * ```js\n   * const auth = initializeAuth(app, {\n   *   persistence: browserSessionPersistence,\n   *   popupRedirectResolver: undefined,\n   * });\n   * ```\n   *\n   * @public\n   */\n  function initializeAuth(app, deps) {\n    const provider = (0, _app._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      const auth = provider.getImmediate();\n      const initialOptions = provider.getOptions();\n      if ((0, _util.deepEqual)(initialOptions, deps ?? {})) {\n        return auth;\n      } else {\n        _fail(auth, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n      }\n    }\n    const auth = provider.initialize({\n      options: deps\n    });\n    return auth;\n  }\n  function _initializeAuthInstance(auth, deps) {\n    const persistence = deps?.persistence || [];\n    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n    if (deps?.errorMap) {\n      auth._updateErrorMap(deps.errorMap);\n    }\n    // This promise is intended to float; auth initialization happens in the\n    // background, meanwhile the auth object may be used by the app.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n  }\n\n  /**\n   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n   * Firebase Auth services.\n   *\n   * @remarks\n   * This must be called synchronously immediately following the first call to\n   * {@link initializeAuth}.  Do not use with production credentials as emulator\n   * traffic is not encrypted.\n   *\n   *\n   * @example\n   * ```javascript\n   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n   * `true` to disable the warning banner attached to the DOM.\n   *\n   * @public\n   */\n  function connectAuthEmulator(auth, url, options) {\n    const authInternal = _castAuth(auth);\n    _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n    const disableWarnings = !!options?.disableWarnings;\n    const protocol = extractProtocol(url);\n    const {\n      host,\n      port\n    } = extractHostAndPort(url);\n    const portStr = port === null ? '' : `:${port}`;\n    // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n    const emulator = {\n      url: `${protocol}//${host}${portStr}/`\n    };\n    const emulatorConfig = Object.freeze({\n      host,\n      port,\n      protocol: protocol.replace(':', ''),\n      options: Object.freeze({\n        disableWarnings\n      })\n    });\n    // There are a few scenarios to guard against if the Auth instance has already started:\n    if (!authInternal._canInitEmulator) {\n      // Applications may not initialize the emulator for the first time if Auth has already started\n      // to make network requests.\n      _assert(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // Applications may not alter the configuration of the emulator (aka pass a different config)\n      // once Auth has started to make network requests.\n      _assert((0, _util.deepEqual)(emulator, authInternal.config.emulator) && (0, _util.deepEqual)(emulatorConfig, authInternal.emulatorConfig), authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n      // It's valid, however, to invoke connectAuthEmulator() after Auth has started making\n      // connections, so long as the config matches the existing config. This results in a no-op.\n      return;\n    }\n    authInternal.config.emulator = emulator;\n    authInternal.emulatorConfig = emulatorConfig;\n    authInternal.settings.appVerificationDisabledForTesting = true;\n    // Workaround to get cookies in Firebase Studio\n    if ((0, _util.isCloudWorkstation)(host)) {\n      void (0, _util.pingServer)(`${protocol}//${host}${portStr}`);\n      (0, _util.updateEmulatorBanner)('Auth', true);\n    } else if (!disableWarnings) {\n      emitEmulatorWarning();\n    }\n  }\n  function extractProtocol(url) {\n    const protocolEnd = url.indexOf(':');\n    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n  }\n  function extractHostAndPort(url) {\n    const protocol = extractProtocol(url);\n    const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n    if (!authority) {\n      return {\n        host: '',\n        port: null\n      };\n    }\n    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n    const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n    if (bracketedIPv6) {\n      const host = bracketedIPv6[1];\n      return {\n        host,\n        port: parsePort(hostAndPort.substr(host.length + 1))\n      };\n    } else {\n      const [host, port] = hostAndPort.split(':');\n      return {\n        host,\n        port: parsePort(port)\n      };\n    }\n  }\n  function parsePort(portStr) {\n    if (!portStr) {\n      return null;\n    }\n    const port = Number(portStr);\n    if (isNaN(port)) {\n      return null;\n    }\n    return port;\n  }\n  function emitEmulatorWarning() {\n    function attachBanner() {\n      const el = document.createElement('p');\n      const sty = el.style;\n      el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n      sty.position = 'fixed';\n      sty.width = '100%';\n      sty.backgroundColor = '#ffffff';\n      sty.border = '.1em solid #000000';\n      sty.color = '#b50000';\n      sty.bottom = '0px';\n      sty.left = '0px';\n      sty.margin = '0px';\n      sty.zIndex = '10000';\n      sty.textAlign = 'center';\n      el.classList.add('firebase-emulator-warning');\n      document.body.appendChild(el);\n    }\n    if (typeof console !== 'undefined' && typeof console.info === 'function') {\n      console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n    }\n    if (false && typeof document !== 'undefined') {\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', attachBanner);\n      } else {\n        attachBanner();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by an {@link AuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class AuthCredential {\n    /** @internal */\n    constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    providerId,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    signInMethod) {\n      this.providerId = providerId;\n      this.signInMethod = signInMethod;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getIdTokenResponse(_auth) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _linkToIdToken(_auth, _idToken) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n    _getReauthenticationResolver(_auth) {\n      return debugFail('not implemented');\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.M = AuthCredential;\n  async function resetPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function updateEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n  // Used for linking an email/password account to an existing idToken. Uses the same request/response\n  // format as updateEmailPassword.\n  async function linkEmailPassword(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request);\n  }\n  async function applyActionCode$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithPassword(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));\n  }\n  async function sendOobCode(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request));\n  }\n  async function sendEmailVerification$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendPasswordResetEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function sendSignInLinkToEmail$1(auth, request) {\n    return sendOobCode(auth, request);\n  }\n  async function verifyAndChangeEmail(auth, request) {\n    return sendOobCode(auth, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithEmailLink$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n  async function signInWithEmailLinkForLinking(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n   * {@link ProviderId}.PASSWORD\n   *\n   * @remarks\n   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @public\n   */\n  class EmailAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(/** @internal */\n    _email, /** @internal */\n    _password, signInMethod, /** @internal */\n    _tenantId = null) {\n      super(\"password\" /* ProviderId.PASSWORD */, signInMethod);\n      this._email = _email;\n      this._password = _password;\n      this._tenantId = _tenantId;\n    }\n    /** @internal */\n    static _fromEmailAndPassword(email, password) {\n      return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n    static _fromEmailAndCode(email, oobCode, tenantId = null) {\n      return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      return {\n        email: this._email,\n        password: this._password,\n        signInMethod: this.signInMethod,\n        tenantId: this._tenantId\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n     *\n     * @param json - Either `object` or the stringified representation of the object. When string is\n     * provided, `JSON.parse` would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      if (obj?.email && obj?.password) {\n        if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n          return this._fromEmailAndPassword(obj.email, obj.password);\n        } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n          return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n        }\n      }\n      return null;\n    }\n    /** @internal */\n    async _getIdTokenResponse(auth) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLink$1(auth, {\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    async _linkToIdToken(auth, idToken) {\n      switch (this.signInMethod) {\n        case \"password\" /* SignInMethod.EMAIL_PASSWORD */:\n          const request = {\n            idToken,\n            returnSecureToken: true,\n            email: this._email,\n            password: this._password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          return handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n        case \"emailLink\" /* SignInMethod.EMAIL_LINK */:\n          return signInWithEmailLinkForLinking(auth, {\n            idToken,\n            email: this._email,\n            oobCode: this._password\n          });\n        default:\n          _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      }\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return this._getIdTokenResponse(auth);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.N = EmailAuthCredential;\n  async function signInWithIdp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI$1 = 'http://localhost';\n  /**\n   * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n   *\n   * @remarks\n   * Implementations specify the details about each auth provider's credential requirements.\n   *\n   * @public\n   */\n  class OAuthCredential extends AuthCredential {\n    constructor() {\n      super(...arguments);\n      this.pendingToken = null;\n    }\n    /** @internal */\n    static _fromParams(params) {\n      const cred = new OAuthCredential(params.providerId, params.signInMethod);\n      if (params.idToken || params.accessToken) {\n        // OAuth 2 and either ID token or access token.\n        if (params.idToken) {\n          cred.idToken = params.idToken;\n        }\n        if (params.accessToken) {\n          cred.accessToken = params.accessToken;\n        }\n        // Add nonce if available and no pendingToken is present.\n        if (params.nonce && !params.pendingToken) {\n          cred.nonce = params.nonce;\n        }\n        if (params.pendingToken) {\n          cred.pendingToken = params.pendingToken;\n        }\n      } else if (params.oauthToken && params.oauthTokenSecret) {\n        // OAuth 1 and OAuth token with token secret\n        cred.accessToken = params.oauthToken;\n        cred.secret = params.oauthTokenSecret;\n      } else {\n        _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      return cred;\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        idToken: this.idToken,\n        accessToken: this.accessToken,\n        secret: this.secret,\n        nonce: this.nonce,\n        pendingToken: this.pendingToken,\n        providerId: this.providerId,\n        signInMethod: this.signInMethod\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        ...rest\n      } = obj;\n      if (!providerId || !signInMethod) {\n        return null;\n      }\n      const cred = new OAuthCredential(providerId, signInMethod);\n      cred.idToken = rest.idToken || undefined;\n      cred.accessToken = rest.accessToken || undefined;\n      cred.secret = rest.secret;\n      cred.nonce = rest.nonce;\n      cred.pendingToken = rest.pendingToken || null;\n      return cred;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    buildRequest() {\n      const request = {\n        requestUri: IDP_REQUEST_URI$1,\n        returnSecureToken: true\n      };\n      if (this.pendingToken) {\n        request.pendingToken = this.pendingToken;\n      } else {\n        const postBody = {};\n        if (this.idToken) {\n          postBody['id_token'] = this.idToken;\n        }\n        if (this.accessToken) {\n          postBody['access_token'] = this.accessToken;\n        }\n        if (this.secret) {\n          postBody['oauth_token_secret'] = this.secret;\n        }\n        postBody['providerId'] = this.providerId;\n        if (this.nonce && !this.pendingToken) {\n          postBody['nonce'] = this.nonce;\n        }\n        request.postBody = (0, _util.querystring)(postBody);\n      }\n      return request;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.Q = OAuthCredential;\n  async function signInWithPhoneNumber$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n  }\n  async function linkWithPhoneNumber$1(auth, request) {\n    const response = await _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n    if (response.temporaryProof) {\n      throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n    }\n    return response;\n  }\n  const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {\n    [\"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */]: \"user-not-found\" /* AuthErrorCode.USER_DELETED */\n  };\n  async function verifyPhoneNumberForExisting(auth, request) {\n    const apiRequest = {\n      ...request,\n      operation: 'REAUTH'\n    };\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Represents the credentials returned by {@link PhoneAuthProvider}.\n   *\n   * @public\n   */\n  class PhoneAuthCredential extends AuthCredential {\n    constructor(params) {\n      super(\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */);\n      this.params = params;\n    }\n    /** @internal */\n    static _fromVerification(verificationId, verificationCode) {\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode\n      });\n    }\n    /** @internal */\n    static _fromTokenResponse(phoneNumber, temporaryProof) {\n      return new PhoneAuthCredential({\n        phoneNumber,\n        temporaryProof\n      });\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      return linkWithPhoneNumber$1(auth, {\n        idToken,\n        ...this._makeVerificationRequest()\n      });\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n    _makeVerificationRequest() {\n      const {\n        temporaryProof,\n        phoneNumber,\n        verificationId,\n        verificationCode\n      } = this.params;\n      if (temporaryProof && phoneNumber) {\n        return {\n          temporaryProof,\n          phoneNumber\n        };\n      }\n      return {\n        sessionInfo: verificationId,\n        code: verificationCode\n      };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n    toJSON() {\n      const obj = {\n        providerId: this.providerId\n      };\n      if (this.params.phoneNumber) {\n        obj.phoneNumber = this.params.phoneNumber;\n      }\n      if (this.params.temporaryProof) {\n        obj.temporaryProof = this.params.temporaryProof;\n      }\n      if (this.params.verificationCode) {\n        obj.verificationCode = this.params.verificationCode;\n      }\n      if (this.params.verificationId) {\n        obj.verificationId = this.params.verificationId;\n      }\n      return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n    static fromJSON(json) {\n      if (typeof json === 'string') {\n        json = JSON.parse(json);\n      }\n      const {\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      } = json;\n      if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n        return null;\n      }\n      return new PhoneAuthCredential({\n        verificationId,\n        verificationCode,\n        phoneNumber,\n        temporaryProof\n      });\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Maps the mode string in action code URL to Action Code Info operation.\n   *\n   * @param mode\n   */\n  exports.U = PhoneAuthCredential;\n  function parseMode(mode) {\n    switch (mode) {\n      case 'recoverEmail':\n        return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n      case 'resetPassword':\n        return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n      case 'signIn':\n        return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n      case 'verifyEmail':\n        return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n      case 'verifyAndChangeEmail':\n        return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n      case 'revertSecondFactorAddition':\n        return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n      default:\n        return null;\n    }\n  }\n  /**\n   * Helper to parse FDL links\n   *\n   * @param url\n   */\n  function parseDeepLink(url) {\n    const link = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['link'];\n    // Double link case (automatic redirect).\n    const doubleDeepLink = link ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(link))['deep_link_id'] : null;\n    // iOS custom scheme links.\n    const iOSDeepLink = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))['deep_link_id'];\n    const iOSDoubleDeepLink = iOSDeepLink ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(iOSDeepLink))['link'] : null;\n    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n  }\n  /**\n   * A utility class to parse email action URLs such as password reset, email verification,\n   * email link sign in, etc.\n   *\n   * @public\n   */\n  class ActionCodeURL {\n    /**\n     * @param actionLink - The link from which to extract the URL.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @internal\n     */\n    constructor(actionLink) {\n      const searchParams = (0, _util.querystringDecode)((0, _util.extractQuerystring)(actionLink));\n      const apiKey = searchParams[\"apiKey\" /* QueryField.API_KEY */] ?? null;\n      const code = searchParams[\"oobCode\" /* QueryField.CODE */] ?? null;\n      const operation = parseMode(searchParams[\"mode\" /* QueryField.MODE */] ?? null);\n      // Validate API key, code and mode.\n      _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      this.apiKey = apiKey;\n      this.operation = operation;\n      this.code = code;\n      this.continueUrl = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */] ?? null;\n      this.languageCode = searchParams[\"lang\" /* QueryField.LANGUAGE_CODE */] ?? null;\n      this.tenantId = searchParams[\"tenantId\" /* QueryField.TENANT_ID */] ?? null;\n    }\n    /**\n     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n     * otherwise returns null.\n     *\n     * @param link  - The email action link string.\n     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n     *\n     * @public\n     */\n    static parseLink(link) {\n      const actionLink = parseDeepLink(link);\n      try {\n        return new ActionCodeURL(actionLink);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if\n   * the link is valid, otherwise returns null.\n   *\n   * @public\n   */\n  exports.aj = ActionCodeURL;\n  function parseActionCodeURL(link) {\n    return ActionCodeURL.parseLink(link);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating {@link EmailAuthCredential}.\n   *\n   * @public\n   */\n  class EmailAuthProvider {\n    constructor() {\n      /**\n       * Always set to {@link ProviderId}.PASSWORD, even for email link.\n       */\n      this.providerId = EmailAuthProvider.PROVIDER_ID;\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and password.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credential(email, password);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n     * ```\n     *\n     * @param email - Email address.\n     * @param password - User account password.\n     * @returns The auth provider credential.\n     */\n    static credential(email, password) {\n      return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n     * email link operation.\n     *\n     * @example\n     * ```javascript\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n     * const userCredential = await signInWithCredential(auth, authCredential);\n     * ```\n     *\n     * @example\n     * ```javascript\n     * await sendSignInLinkToEmail(auth, email);\n     * // Obtain emailLink from user.\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n     * ```\n     *\n     * @param auth - The {@link Auth} instance used to verify the link.\n     * @param email - Email address.\n     * @param emailLink - Sign-in email link.\n     * @returns - The auth provider credential.\n     */\n    static credentialWithLink(email, emailLink) {\n      const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n      _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n  }\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  exports.W = EmailAuthProvider;\n  EmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * The base class for all Federated providers (OAuth (including OIDC), SAML).\n   *\n   * This class is not meant to be instantiated directly.\n   *\n   * @public\n   */\n  class FederatedAuthProvider {\n    /**\n     * Constructor for generic OAuth providers.\n     *\n     * @param providerId - Provider for which credentials should be generated.\n     */\n    constructor(providerId) {\n      this.providerId = providerId;\n      /** @internal */\n      this.defaultLanguageCode = null;\n      /** @internal */\n      this.customParameters = {};\n    }\n    /**\n     * Set the language gode.\n     *\n     * @param languageCode - language code\n     */\n    setDefaultLanguage(languageCode) {\n      this.defaultLanguageCode = languageCode;\n    }\n    /**\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n     * operations.\n     *\n     * @remarks\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n     *\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n     */\n    setCustomParameters(customOAuthParameters) {\n      this.customParameters = customOAuthParameters;\n      return this;\n    }\n    /**\n     * Retrieve the current list of {@link CustomParameters}.\n     */\n    getCustomParameters() {\n      return this.customParameters;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Common code to all OAuth providers. This is separate from the\n   * {@link OAuthProvider} so that child providers (like\n   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n   * Instead, they rely on a static `credential` method.\n   */\n  exports.aG = FederatedAuthProvider;\n  class BaseOAuthProvider extends FederatedAuthProvider {\n    constructor() {\n      super(...arguments);\n      /** @internal */\n      this.scopes = [];\n    }\n    /**\n     * Add an OAuth scope to the credential.\n     *\n     * @param scope - Provider OAuth scope to add.\n     */\n    addScope(scope) {\n      // If not already added, add scope to list.\n      if (!this.scopes.includes(scope)) {\n        this.scopes.push(scope);\n      }\n      return this;\n    }\n    /**\n     * Retrieve the current list of OAuth scopes.\n     */\n    getScopes() {\n      return [...this.scopes];\n    }\n  }\n  /**\n   * Provider for generating generic {@link OAuthCredential}.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new OAuthProvider('google.com');\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a OAuth Access Token for the provider.\n   *   const credential = provider.credentialFromResult(auth, result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new OAuthProvider('google.com');\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a OAuth Access Token for the provider.\n   * const credential = provider.credentialFromResult(auth, result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  exports.aH = BaseOAuthProvider;\n  class OAuthProvider extends BaseOAuthProvider {\n    /**\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return OAuthCredential._fromParams(obj);\n    }\n    /**\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n     *\n     * @remarks\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n     * the raw nonce must match the nonce field in the ID token.\n     *\n     * @example\n     * ```javascript\n     * // `googleUser` from the onsuccess Google Sign In callback.\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\n     * const provider = new OAuthProvider('google.com');\n     * const credential = provider.credential({\n     *   idToken: googleUser.getAuthResponse().id_token,\n     * });\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param params - Either the options object containing the ID token, access token and raw nonce\n     * or the ID token string.\n     */\n    credential(params) {\n      return this._credential({\n        ...params,\n        nonce: params.rawNonce\n      });\n    }\n    /** An internal credential method that accepts more permissive options */\n    _credential(params) {\n      _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      // For OAuthCredential, sign in method is same as providerId.\n      return OAuthCredential._fromParams({\n        ...params,\n        providerId: this.providerId,\n        signInMethod: this.providerId\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n    }\n    static oauthCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce,\n        providerId\n      } = tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      if (!providerId) {\n        return null;\n      }\n      try {\n        return new OAuthProvider(providerId)._credential({\n          idToken: oauthIdToken,\n          accessToken: oauthAccessToken,\n          nonce,\n          pendingToken\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new FacebookAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('user_birthday');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Facebook Access Token.\n   *   const credential = FacebookAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new FacebookAuthProvider();\n   * provider.addScope('user_birthday');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Facebook Access Token.\n   * const credential = FacebookAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  exports._ = OAuthProvider;\n  class FacebookAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"facebook.com\" /* ProviderId.FACEBOOK */);\n    }\n    /**\n     * Creates a credential for Facebook.\n     *\n     * @example\n     * ```javascript\n     * // `event` from the Facebook auth.authResponseChange callback.\n     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param accessToken - Facebook access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: FacebookAuthProvider.PROVIDER_ID,\n        signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  exports.X = FacebookAuthProvider;\n  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  FacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GoogleAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Google Access Token.\n   *   const credential = GoogleAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GoogleAuthProvider();\n   * provider.addScope('profile');\n   * provider.addScope('email');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Google Access Token.\n   * const credential = GoogleAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   *\n   * @public\n   */\n  class GoogleAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"google.com\" /* ProviderId.GOOGLE */);\n      this.addScope('profile');\n    }\n    /**\n     * Creates a credential for Google. At least one of ID token and access token is required.\n     *\n     * @example\n     * ```javascript\n     * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n     * const result = await signInWithCredential(credential);\n     * ```\n     *\n     * @param idToken - Google ID token.\n     * @param accessToken - Google access token.\n     */\n    static credential(idToken, accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GoogleAuthProvider.PROVIDER_ID,\n        signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n        idToken,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthIdToken,\n        oauthAccessToken\n      } = tokenResponse;\n      if (!oauthIdToken && !oauthAccessToken) {\n        // This could be an oauth 1 credential or a phone credential\n        return null;\n      }\n      try {\n        return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  exports.Y = GoogleAuthProvider;\n  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  GoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n   *\n   * @remarks\n   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n   * the {@link signInWithPopup} handler:\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new GithubAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * provider.addScope('repo');\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a GitHub Access Token.\n   *   const credential = GithubAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new GithubAuthProvider();\n   * provider.addScope('repo');\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a GitHub Access Token.\n   * const credential = GithubAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * ```\n   * @public\n   */\n  class GithubAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"github.com\" /* ProviderId.GITHUB */);\n    }\n    /**\n     * Creates a credential for GitHub.\n     *\n     * @param accessToken - GitHub access token.\n     */\n    static credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GithubAuthProvider.PROVIDER_ID,\n        signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n        accessToken\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  exports.Z = GithubAuthProvider;\n  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  GithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  const IDP_REQUEST_URI = 'http://localhost';\n  /**\n   * @public\n   */\n  class SAMLAuthCredential extends AuthCredential {\n    /** @internal */\n    constructor(providerId, pendingToken) {\n      super(providerId, providerId);\n      this.pendingToken = pendingToken;\n    }\n    /** @internal */\n    _getIdTokenResponse(auth) {\n      const request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _linkToIdToken(auth, idToken) {\n      const request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n    _getReauthenticationResolver(auth) {\n      const request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n    toJSON() {\n      return {\n        signInMethod: this.signInMethod,\n        providerId: this.providerId,\n        pendingToken: this.pendingToken\n      };\n    }\n    /**\n     * Static method to deserialize a JSON representation of an object into an\n     * {@link  AuthCredential}.\n     *\n     * @param json - Input can be either Object or the stringified representation of the object.\n     * When string is provided, JSON.parse would be called first.\n     *\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n     */\n    static fromJSON(json) {\n      const obj = typeof json === 'string' ? JSON.parse(json) : json;\n      const {\n        providerId,\n        signInMethod,\n        pendingToken\n      } = obj;\n      if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n        return null;\n      }\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\n     * Helper static method to avoid exposing the constructor to end users.\n     *\n     * @internal\n     */\n    static _create(providerId, pendingToken) {\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    buildRequest() {\n      return {\n        requestUri: IDP_REQUEST_URI,\n        returnSecureToken: true,\n        pendingToken: this.pendingToken\n      };\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.aU = SAMLAuthCredential;\n  const SAML_PROVIDER_PREFIX = 'saml.';\n  /**\n   * An {@link AuthProvider} for SAML.\n   *\n   * @public\n   */\n  class SAMLAuthProvider extends FederatedAuthProvider {\n    /**\n     * Constructor. The providerId must start with \"saml.\"\n     * @param providerId - SAML provider ID.\n     */\n    constructor(providerId) {\n      _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      super(providerId);\n    }\n    /**\n     * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n     * successful SAML flow completes.\n     *\n     * @remarks\n     *\n     * For example, to get an {@link AuthCredential}, you could write the\n     * following code:\n     *\n     * ```js\n     * const userCredential = await signInWithPopup(auth, samlProvider);\n     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n     * ```\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n    }\n    /**\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\n     * @param json - A plain object or a JSON string\n     */\n    static credentialFromJSON(json) {\n      const credential = SAMLAuthCredential.fromJSON(json);\n      _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return credential;\n    }\n    static samlCredentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        pendingToken,\n        providerId\n      } = tokenResponse;\n      if (!pendingToken || !providerId) {\n        return null;\n      }\n      try {\n        return SAMLAuthCredential._create(providerId, pendingToken);\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a redirect.\n   * const provider = new TwitterAuthProvider();\n   * // Start a sign in process for an unauthenticated user.\n   * await signInWithRedirect(auth, provider);\n   * // This will trigger a full page redirect away from your app\n   *\n   * // After returning from the redirect when your app initializes you can obtain the result\n   * const result = await getRedirectResult(auth);\n   * if (result) {\n   *   // This is the signed-in user\n   *   const user = result.user;\n   *   // This gives you a Twitter Access Token and Secret.\n   *   const credential = TwitterAuthProvider.credentialFromResult(result);\n   *   const token = credential.accessToken;\n   *   const secret = credential.secret;\n   * }\n   * ```\n   *\n   * @example\n   * ```javascript\n   * // Sign in using a popup.\n   * const provider = new TwitterAuthProvider();\n   * const result = await signInWithPopup(auth, provider);\n   *\n   * // The signed-in user info.\n   * const user = result.user;\n   * // This gives you a Twitter Access Token and Secret.\n   * const credential = TwitterAuthProvider.credentialFromResult(result);\n   * const token = credential.accessToken;\n   * const secret = credential.secret;\n   * ```\n   *\n   * @public\n   */\n  exports.$ = SAMLAuthProvider;\n  class TwitterAuthProvider extends BaseOAuthProvider {\n    constructor() {\n      super(\"twitter.com\" /* ProviderId.TWITTER */);\n    }\n    /**\n     * Creates a credential for Twitter.\n     *\n     * @param token - Twitter access token.\n     * @param secret - Twitter secret.\n     */\n    static credential(token, secret) {\n      return OAuthCredential._fromParams({\n        providerId: TwitterAuthProvider.PROVIDER_ID,\n        signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n        oauthToken: token,\n        oauthTokenSecret: secret\n      });\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromResult(userCredential) {\n      return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n     * thrown during a sign-in, link, or reauthenticate operation.\n     *\n     * @param userCredential - The user credential.\n     */\n    static credentialFromError(error) {\n      return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n    static credentialFromTaggedObject({\n      _tokenResponse: tokenResponse\n    }) {\n      if (!tokenResponse) {\n        return null;\n      }\n      const {\n        oauthAccessToken,\n        oauthTokenSecret\n      } = tokenResponse;\n      if (!oauthAccessToken || !oauthTokenSecret) {\n        return null;\n      }\n      try {\n        return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n      } catch {\n        return null;\n      }\n    }\n  }\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  exports.a0 = TwitterAuthProvider;\n  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  TwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signUp(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class UserCredentialImpl {\n    constructor(params) {\n      this.user = params.user;\n      this.providerId = params.providerId;\n      this._tokenResponse = params._tokenResponse;\n      this.operationType = params.operationType;\n    }\n    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {\n      const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n      const providerId = providerIdForResponse(idTokenResponse);\n      const userCred = new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: idTokenResponse,\n        operationType\n      });\n      return userCred;\n    }\n    static async _forOperation(user, operationType, response) {\n      await user._updateTokensIfNecessary(response, /* reload */true);\n      const providerId = providerIdForResponse(response);\n      return new UserCredentialImpl({\n        user,\n        providerId,\n        _tokenResponse: response,\n        operationType\n      });\n    }\n  }\n  function providerIdForResponse(response) {\n    if (response.providerId) {\n      return response.providerId;\n    }\n    if ('phoneNumber' in response) {\n      return \"phone\" /* ProviderId.PHONE */;\n    }\n    return null;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in as an anonymous user.\n   *\n   * @remarks\n   * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n   * new anonymous user identity will be created and returned.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  async function signInAnonymously(auth) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    await authInternal._initializationPromise;\n    if (authInternal.currentUser?.isAnonymous) {\n      // If an anonymous user is already signed in, no need to sign them in again.\n      return new UserCredentialImpl({\n        user: authInternal.currentUser,\n        providerId: null,\n        operationType: \"signIn\" /* OperationType.SIGN_IN */\n      });\n    }\n    const response = await signUp(authInternal, {\n      returnSecureToken: true\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorError extends _util.FirebaseError {\n    constructor(auth, error, operationType, user) {\n      super(error.code, error.message);\n      this.operationType = operationType;\n      this.user = user;\n      // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n      Object.setPrototypeOf(this, MultiFactorError.prototype);\n      this.customData = {\n        appName: auth.name,\n        tenantId: auth.tenantId ?? undefined,\n        _serverResponse: error.customData._serverResponse,\n        operationType\n      };\n    }\n    static _fromErrorAndOperation(auth, error, operationType, user) {\n      return new MultiFactorError(auth, error, operationType, user);\n    }\n  }\n  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n    const idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n    return idTokenProvider.catch(error => {\n      if (error.code === `auth/${\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */}`) {\n        throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Takes a set of UserInfo provider data and converts it to a set of names\n   */\n  function providerDataAsNames(providerData) {\n    return new Set(providerData.map(({\n      providerId\n    }) => providerId).filter(pid => !!pid));\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Unlinks a provider from a user account.\n   *\n   * @param user - The user.\n   * @param providerId - The provider to unlink.\n   *\n   * @public\n   */\n  async function unlink(user, providerId) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _assertLinkedStatus(true, userInternal, providerId);\n    const {\n      providerUserInfo\n    } = await deleteLinkedAccounts(userInternal.auth, {\n      idToken: await userInternal.getIdToken(),\n      deleteProvider: [providerId]\n    });\n    const providersLeft = providerDataAsNames(providerUserInfo || []);\n    userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));\n    if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n      userInternal.phoneNumber = null;\n    }\n    await userInternal.auth._persistUserIfCurrent(userInternal);\n    return userInternal;\n  }\n  async function _link(user, credential, bypassAuthState = false) {\n    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);\n    return UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response);\n  }\n  async function _assertLinkedStatus(expected, user, provider) {\n    await _reloadWithoutSaving(user);\n    const providerIds = providerDataAsNames(user.providerData);\n    const code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */;\n    _assert(providerIds.has(provider) === expected, user.auth, code);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _reauthenticate(user, credential, bypassAuthState = false) {\n    const {\n      auth\n    } = user;\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"reauthenticate\" /* OperationType.REAUTHENTICATE */;\n    try {\n      const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n      _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const parsed = _parseToken(response.idToken);\n      _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const {\n        sub: localId\n      } = parsed;\n      _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      return UserCredentialImpl._forOperation(user, operationType, response);\n    } catch (e) {\n      // Convert user deleted error into user mismatch\n      if (e?.code === `auth/${\"user-not-found\" /* AuthErrorCode.USER_DELETED */}`) {\n        _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function _signInWithCredential(auth, credential, bypassAuthState = false) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const operationType = \"signIn\" /* OperationType.SIGN_IN */;\n    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n    if (!bypassAuthState) {\n      await auth._updateCurrentUser(userCredential.user);\n    }\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function signInWithCredential(auth, credential) {\n    return _signInWithCredential(_castAuth(auth), credential);\n  }\n  /**\n   * Links the user account with the given credentials.\n   *\n   * @remarks\n   * An {@link AuthProvider} can be used to generate the credential.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function linkWithCredential(user, credential) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    await _assertLinkedStatus(false, userInternal, credential.providerId);\n    return _link(userInternal, credential);\n  }\n  /**\n   * Re-authenticates a user using a fresh credential.\n   *\n   * @remarks\n   * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n   * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n   * or a `TOKEN_EXPIRED` error.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param user - The user.\n   * @param credential - The auth credential.\n   *\n   * @public\n   */\n  async function reauthenticateWithCredential(user, credential) {\n    return _reauthenticate((0, _util.getModularInstance)(user), credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function signInWithCustomToken$1(auth, request) {\n    return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Asynchronously signs in using a custom token.\n   *\n   * @remarks\n   * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n   * be generated by an auth backend using the\n   * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n   * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n   *\n   * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param customToken - The custom token to sign in with.\n   *\n   * @public\n   */\n  async function signInWithCustomToken(auth, customToken) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const response = await signInWithCustomToken$1(authInternal, {\n      token: customToken,\n      returnSecureToken: true\n    });\n    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(cred.user);\n    return cred;\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorInfoImpl {\n    constructor(factorId, response) {\n      this.factorId = factorId;\n      this.uid = response.mfaEnrollmentId;\n      this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n      this.displayName = response.displayName;\n    }\n    static _fromServerResponse(auth, enrollment) {\n      if ('phoneInfo' in enrollment) {\n        return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      } else if ('totpInfo' in enrollment) {\n        return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      }\n      return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }\n  class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"phone\" /* FactorId.PHONE */, response);\n      this.phoneNumber = response.phoneInfo;\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n  }\n  class TotpMultiFactorInfoImpl extends MultiFactorInfoImpl {\n    constructor(response) {\n      super(\"totp\" /* FactorId.TOTP */, response);\n    }\n    static _fromServerResponse(_auth, enrollment) {\n      return new TotpMultiFactorInfoImpl(enrollment);\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n    _assert(actionCodeSettings.url?.length > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n    _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n    _assert(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, \"invalid-hosting-link-domain\" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */);\n    request.continueUrl = actionCodeSettings.url;\n    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n    request.linkDomain = actionCodeSettings.linkDomain;\n    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n    if (actionCodeSettings.iOS) {\n      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n      request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n    }\n    if (actionCodeSettings.android) {\n      _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n      request.androidInstallApp = actionCodeSettings.android.installApp;\n      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n      request.androidPackageName = actionCodeSettings.android.packageName;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates the password policy cached in the {@link Auth} instance if a policy is already\n   * cached for the project or tenant.\n   *\n   * @remarks\n   * We only fetch the password policy if the password did not meet policy requirements and\n   * there is an existing policy cached. A developer must call validatePassword at least\n   * once for the cache to be automatically updated.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @private\n   */\n  async function recachePasswordPolicy(auth) {\n    const authInternal = _castAuth(auth);\n    if (authInternal._getPasswordPolicyInternal()) {\n      await authInternal._updatePasswordPolicy();\n    }\n  }\n  /**\n   * Sends a password reset email to the given email address. This method does not throw an error when\n   * there's no user account with the given email address and\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   *\n   * @remarks\n   * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n   * the email sent to the user, along with the new password specified by the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain code from user.\n   * await confirmPasswordReset('user@example.com', code);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendPasswordResetEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n    }\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A confirmation code sent to the user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  async function confirmPasswordReset(auth, oobCode, newPassword) {\n    await resetPassword((0, _util.getModularInstance)(auth), {\n      oobCode,\n      newPassword\n    }).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    // Do not return the email.\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function applyActionCode(auth, oobCode) {\n    await applyActionCode$1((0, _util.getModularInstance)(auth), {\n      oobCode\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns metadata about the code.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param oobCode - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function checkActionCode(auth, oobCode) {\n    const authModular = (0, _util.getModularInstance)(auth);\n    const response = await resetPassword(authModular, {\n      oobCode\n    });\n    // Email could be empty only if the request type is EMAIL_SIGNIN or\n    // VERIFY_AND_CHANGE_EMAIL.\n    // New email should not be empty if the request type is\n    // VERIFY_AND_CHANGE_EMAIL.\n    // Multi-factor info could not be empty if the request type is\n    // REVERT_SECOND_FACTOR_ADDITION.\n    const operation = response.requestType;\n    _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    switch (operation) {\n      case \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */:\n        break;\n      case \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */:\n        _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        break;\n      case \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */:\n        _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // fall through\n      default:\n        _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n    // The multi-factor info for revert second factor addition\n    let multiFactorInfo = null;\n    if (response.mfaInfo) {\n      multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n    }\n    return {\n      data: {\n        email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n        previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n        multiFactorInfo\n      },\n      operation\n    };\n  }\n  /**\n   * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n   *\n   * @returns the user's email address if valid.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param code - A verification code sent to the user.\n   *\n   * @public\n   */\n  async function verifyPasswordResetCode(auth, code) {\n    const {\n      data\n    } = await checkActionCode((0, _util.getModularInstance)(auth), code);\n    // Email should always be present since a code was sent to it\n    return data.email;\n  }\n  /**\n   * Creates a new user account associated with the specified email address and password.\n   *\n   * @remarks\n   * On successful creation of the user account, this user will also be signed in to your application.\n   *\n   * User account creation can fail if the account already exists or the password is invalid.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The email address acts as a unique identifier for the user and enables an email-based\n   * password reset. This function will create a new user account and set the initial user password.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param password - The user's chosen password.\n   *\n   * @public\n   */\n  async function createUserWithEmailAndPassword(auth, email, password) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authInternal = _castAuth(auth);\n    const request = {\n      returnSecureToken: true,\n      email,\n      password,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    const signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n    const response = await signUpResponse.catch(error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n    await authInternal._updateCurrentUser(userCredential.user);\n    return userCredential;\n  }\n  /**\n   * Asynchronously signs in using an email and password.\n   *\n   * @remarks\n   * Fails with an error if the email address and password do not match. When\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n   * email/password.\n   *\n   * This method is not supported on {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: The user's password is NOT the password used to access the user's email account. The\n   * email address serves as a unique identifier for the user, and the password is used to access\n   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The users email address.\n   * @param password - The users password.\n   *\n   * @public\n   */\n  function signInWithEmailAndPassword(auth, email, password) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    return signInWithCredential((0, _util.getModularInstance)(auth), EmailAuthProvider.credential(email, password)).catch(async error => {\n      if (error.code === `auth/${\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {\n        void recachePasswordPolicy(auth);\n      }\n      throw error;\n    });\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Sends a sign-in email link to the user with the specified email.\n   *\n   * @remarks\n   * The sign-in operation has to always be completed in the app unlike other out of band email\n   * actions (password reset and email verifications). This is because, at the end of the flow,\n   * the user is expected to be signed in and their Auth state persisted within the app.\n   *\n   * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n   * address and the email link supplied in the email sent to the user.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   * @param authInternal - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {\n    const authInternal = _castAuth(auth);\n    const request = {\n      requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n      email,\n      clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n    };\n    function setActionCodeSettings(request, actionCodeSettings) {\n      _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      if (actionCodeSettings) {\n        _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n      }\n    }\n    setActionCodeSettings(request, actionCodeSettings);\n    await handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1, \"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  function isSignInWithEmailLink(auth, emailLink) {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    return actionCodeUrl?.operation === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @remarks\n   * If no link is passed, the link is inferred from the current URL.\n   *\n   * Fails with an error if the email address is invalid or OTP in email link expires.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n   * // Obtain emailLink from the user.\n   * if(isSignInWithEmailLink(auth, emailLink)) {\n   *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n   * }\n   * ```\n   *\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   * @param emailLink - The link sent to the user's email address.\n   *\n   * @public\n   */\n  async function signInWithEmailLink(auth, email, emailLink) {\n    if ((0, _app._isFirebaseServerApp)(auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n    }\n    const authModular = (0, _util.getModularInstance)(auth);\n    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());\n    // Check if the tenant ID in the email link matches the tenant ID on Auth\n    // instance.\n    _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n    return signInWithCredential(authModular, credential);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function createAuthUri(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Gets the list of possible sign in methods for the given email address. This method returns an\n   * empty list when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled, irrespective of the number of authentication methods available for the given email.\n   *\n   * @remarks\n   * This is useful to differentiate methods of sign-in for the same provider, eg.\n   * {@link EmailAuthProvider} which has 2 methods of sign-in,\n   * {@link SignInMethod}.EMAIL_PASSWORD and\n   * {@link SignInMethod}.EMAIL_LINK.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param email - The user's email address.\n   *\n   * Deprecated. Migrating off of this method is recommended as a security best-practice.\n   * Learn more in the Identity Platform documentation for\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n   * @public\n   */\n  async function fetchSignInMethodsForEmail(auth, email) {\n    // createAuthUri returns an error if continue URI is not http or https.\n    // For environments like Cordova, Chrome extensions, native frameworks, file\n    // systems, etc, use http://localhost as continue URL.\n    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n    const request = {\n      identifier: email,\n      continueUri\n    };\n    const {\n      signinMethods\n    } = await createAuthUri((0, _util.getModularInstance)(auth), request);\n    return signinMethods || [];\n  }\n  /**\n   * Sends a verification email to a user.\n   *\n   * @remarks\n   * The verification process is completed by calling {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await sendEmailVerification(user, actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function sendEmailVerification(user, actionCodeSettings) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n      idToken\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await sendEmailVerification$1(userInternal.auth, request);\n    if (email !== user.email) {\n      await user.reload();\n    }\n  }\n  /**\n   * Sends a verification email to a new email address.\n   *\n   * @remarks\n   * The user's email will be updated to the new one after being verified.\n   *\n   * If you have a custom email action handler, you can complete the verification process by calling\n   * {@link applyActionCode}.\n   *\n   * @example\n   * ```javascript\n   * const actionCodeSettings = {\n   *   url: 'https://www.example.com/?email=user@example.com',\n   *   iOS: {\n   *      bundleId: 'com.example.ios'\n   *   },\n   *   android: {\n   *     packageName: 'com.example.android',\n   *     installApp: true,\n   *     minimumVersion: '12'\n   *   },\n   *   handleCodeInApp: true\n   * };\n   * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n   * // Obtain code from the user.\n   * await applyActionCode(auth, code);\n   * ```\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address to be verified before update.\n   * @param actionCodeSettings - The {@link ActionCodeSettings}.\n   *\n   * @public\n   */\n  async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    const idToken = await user.getIdToken();\n    const request = {\n      requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n      idToken,\n      newEmail\n    };\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n    }\n    const {\n      email\n    } = await verifyAndChangeEmail(userInternal.auth, request);\n    if (email !== user.email) {\n      // If the local copy of the email on user is outdated, reload the\n      // user.\n      await user.reload();\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  async function updateProfile$1(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Updates a user's profile data.\n   *\n   * @param user - The user.\n   * @param profile - The profile's `displayName` and `photoURL` to update.\n   *\n   * @public\n   */\n  async function updateProfile(user, {\n    displayName,\n    photoURL: photoUrl\n  }) {\n    if (displayName === undefined && photoUrl === undefined) {\n      return;\n    }\n    const userInternal = (0, _util.getModularInstance)(user);\n    const idToken = await userInternal.getIdToken();\n    const profileRequest = {\n      idToken,\n      displayName,\n      photoUrl,\n      returnSecureToken: true\n    };\n    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n    userInternal.displayName = response.displayName || null;\n    userInternal.photoURL = response.photoUrl || null;\n    // Update the password provider as well\n    const passwordProvider = userInternal.providerData.find(({\n      providerId\n    }) => providerId === \"password\" /* ProviderId.PASSWORD */);\n    if (passwordProvider) {\n      passwordProvider.displayName = userInternal.displayName;\n      passwordProvider.photoURL = userInternal.photoURL;\n    }\n    await userInternal._updateTokensIfNecessary(response);\n  }\n  /**\n   * Updates the user's email address.\n   *\n   * @remarks\n   * An email will be sent to the original email address (if it was set) that allows to revoke the\n   * email address change, in order to protect them from account hijacking.\n   *\n   * This method is not supported on any {@link User} signed in by {@link Auth} instances\n   * created with a {@link @firebase/app#FirebaseServerApp}.\n   *\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newEmail - The new email address.\n   *\n   * Throws \"auth/operation-not-allowed\" error when\n   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n   * is enabled.\n   * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n   *\n   * @public\n   */\n  function updateEmail(user, newEmail) {\n    const userInternal = (0, _util.getModularInstance)(user);\n    if ((0, _app._isFirebaseServerApp)(userInternal.auth.app)) {\n      return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n    }\n    return updateEmailOrPassword(userInternal, newEmail, null);\n  }\n  /**\n   * Updates the user's password.\n   *\n   * @remarks\n   * Important: this is a security sensitive operation that requires the user to have recently signed\n   * in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   * @param newPassword - The new password.\n   *\n   * @public\n   */\n  function updatePassword(user, newPassword) {\n    return updateEmailOrPassword((0, _util.getModularInstance)(user), null, newPassword);\n  }\n  async function updateEmailOrPassword(user, email, password) {\n    const {\n      auth\n    } = user;\n    const idToken = await user.getIdToken();\n    const request = {\n      idToken,\n      returnSecureToken: true\n    };\n    if (email) {\n      request.email = email;\n    }\n    if (password) {\n      request.password = password;\n    }\n    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n    await user._updateTokensIfNecessary(response, /* reload */true);\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Parse the `AdditionalUserInfo` from the ID token response.\n   *\n   */\n  function _fromIdTokenResponse(idTokenResponse) {\n    if (!idTokenResponse) {\n      return null;\n    }\n    const {\n      providerId\n    } = idTokenResponse;\n    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n    if (!providerId && idTokenResponse?.idToken) {\n      const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.['sign_in_provider'];\n      if (signInProvider) {\n        const filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n        // Uses generic class in accordance with the legacy SDK.\n        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n      }\n    }\n    if (!providerId) {\n      return null;\n    }\n    switch (providerId) {\n      case \"facebook.com\" /* ProviderId.FACEBOOK */:\n        return new FacebookAdditionalUserInfo(isNewUser, profile);\n      case \"github.com\" /* ProviderId.GITHUB */:\n        return new GithubAdditionalUserInfo(isNewUser, profile);\n      case \"google.com\" /* ProviderId.GOOGLE */:\n        return new GoogleAdditionalUserInfo(isNewUser, profile);\n      case \"twitter.com\" /* ProviderId.TWITTER */:\n        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n      case \"custom\" /* ProviderId.CUSTOM */:\n      case \"anonymous\" /* ProviderId.ANONYMOUS */:\n        return new GenericAdditionalUserInfo(isNewUser, null);\n      default:\n        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n    }\n  }\n  class GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile = {}) {\n      this.isNewUser = isNewUser;\n      this.providerId = providerId;\n      this.profile = profile;\n    }\n  }\n  class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n    constructor(isNewUser, providerId, profile, username) {\n      super(isNewUser, providerId, profile);\n      this.username = username;\n    }\n  }\n  class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile);\n    }\n  }\n  class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof profile?.login === 'string' ? profile?.login : null);\n    }\n  }\n  class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n    constructor(isNewUser, profile) {\n      super(isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile);\n    }\n  }\n  class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n    constructor(isNewUser, profile, screenName) {\n      super(isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName);\n    }\n  }\n  /**\n   * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n   *\n   * @param userCredential - The user credential.\n   *\n   * @public\n   */\n  function getAdditionalUserInfo(userCredential) {\n    const {\n      user,\n      _tokenResponse\n    } = userCredential;\n    if (user.isAnonymous && !_tokenResponse) {\n      // Handle the special case where signInAnonymously() gets called twice.\n      // No network call is made so there's nothing to actually fill this in\n      return {\n        providerId: null,\n        isNewUser: false,\n        profile: null\n      };\n    }\n    return _fromIdTokenResponse(_tokenResponse);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Non-optional auth methods.\n  /**\n   * Changes the type of persistence on the {@link Auth} instance for the currently saved\n   * `Auth` session and applies this type of persistence for future sign-in requests, including\n   * sign-in with redirect requests.\n   *\n   * @remarks\n   * This makes it easy for a user signing in to specify whether their session should be\n   * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n   * that are shared by other users or have sensitive data.\n   *\n   * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @example\n   * ```javascript\n   * setPersistence(auth, browserSessionPersistence);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param persistence - The {@link Persistence} to use.\n   * @returns A `Promise` that resolves once the persistence change has completed\n   *\n   * @public\n   */\n  function setPersistence(auth, persistence) {\n    return (0, _util.getModularInstance)(auth).setPersistence(persistence);\n  }\n  /**\n   * Loads the reCAPTCHA configuration into the `Auth` instance.\n   *\n   * @remarks\n   * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n   * verification flow should be triggered for each auth provider, into the\n   * current Auth session.\n   *\n   * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n   * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n   * verification, the SDK will transparently load the reCAPTCHA config and restart the\n   * auth flows.\n   *\n   * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n   * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n   *\n   * This method does not work in a Node.js environment.\n   *\n   * @example\n   * ```javascript\n   * initializeRecaptchaConfig(auth);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function initializeRecaptchaConfig(auth) {\n    return _initializeRecaptchaConfig(auth);\n  }\n  /**\n   * Validates the password against the password policy configured for the project or tenant.\n   *\n   * @remarks\n   * If no tenant ID is set on the `Auth` instance, then this method will use the password\n   * policy configured for the project. Otherwise, this method will use the policy configured\n   * for the tenant. If a password policy has not been configured, then the default policy\n   * configured for all projects will be used.\n   *\n   * If an auth flow fails because a submitted password does not meet the password policy\n   * requirements and this method has previously been called, then this method will use the\n   * most recent policy available when called again.\n   *\n   * @example\n   * ```javascript\n   * validatePassword(auth, 'some-password');\n   * ```\n   *\n   * @param auth The {@link Auth} instance.\n   * @param password The password to validate.\n   *\n   * @public\n   */\n  async function validatePassword(auth, password) {\n    const authInternal = _castAuth(auth);\n    return authInternal.validatePassword(password);\n  }\n  /**\n   * Adds an observer for changes to the signed-in user's ID token.\n   *\n   * @remarks\n   * This includes sign-in, sign-out, and token refresh events.\n   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onIdTokenChanged(auth, nextOrObserver, error, completed) {\n    return (0, _util.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Adds a blocking callback that runs before an auth state change\n   * sets a new user.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param callback - callback triggered before new user value is set.\n   *   If this throws, it blocks the user from being set.\n   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n   *   callback throws, allowing you to undo any side effects.\n   */\n  function beforeAuthStateChanged(auth, callback, onAbort) {\n    return (0, _util.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);\n  }\n  /**\n   * Adds an observer for changes to the user's sign-in state.\n   *\n   * @remarks\n   * To keep the old behavior, see {@link onIdTokenChanged}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param nextOrObserver - callback triggered on change.\n   * @param error - Deprecated. This callback is never triggered. Errors\n   * on signing in/out can be caught in promises returned from\n   * sign-in/sign-out functions.\n   * @param completed - Deprecated. This callback is never triggered.\n   *\n   * @public\n   */\n  function onAuthStateChanged(auth, nextOrObserver, error, completed) {\n    return (0, _util.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n  }\n  /**\n   * Sets the current language to the default device/browser preference.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function useDeviceLanguage(auth) {\n    (0, _util.getModularInstance)(auth).useDeviceLanguage();\n  }\n  /**\n   * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n   * {@link Auth} instance.\n   *\n   * @remarks\n   * A new instance copy of the user provided will be made and set as currentUser.\n   *\n   * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n   * like other sign in methods.\n   *\n   * The operation fails with an error if the user to be updated belongs to a different Firebase\n   * project.\n   *\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param user - The new {@link User}.\n   *\n   * @public\n   */\n  function updateCurrentUser(auth, user) {\n    return (0, _util.getModularInstance)(auth).updateCurrentUser(user);\n  }\n  /**\n   * Signs out the current user.\n   *\n   * @remarks\n   * This method is not supported by {@link Auth} instances created with a\n   * {@link @firebase/app#FirebaseServerApp}.\n   *\n   * @param auth - The {@link Auth} instance.\n   *\n   * @public\n   */\n  function signOut(auth) {\n    return (0, _util.getModularInstance)(auth).signOut();\n  }\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param token - The Apple OAuth access token.\n   *\n   * @public\n   */\n  function revokeAccessToken(auth, token) {\n    const authInternal = _castAuth(auth);\n    return authInternal.revokeAccessToken(token);\n  }\n  /**\n   * Deletes and signs out the user.\n   *\n   * @remarks\n   * Important: this is a security-sensitive operation that requires the user to have recently\n   * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n   * {@link reauthenticateWithCredential}.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  async function deleteUser(user) {\n    return (0, _util.getModularInstance)(user).delete();\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorSessionImpl {\n    constructor(type, credential, user) {\n      this.type = type;\n      this.credential = credential;\n      this.user = user;\n    }\n    static _fromIdtoken(idToken, user) {\n      return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n    static _fromMfaPendingCredential(mfaPendingCredential) {\n      return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n    toJSON() {\n      const key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n      return {\n        multiFactorSession: {\n          [key]: this.credential\n        }\n      };\n    }\n    static fromJSON(obj) {\n      if (obj?.multiFactorSession) {\n        if (obj.multiFactorSession?.pendingCredential) {\n          return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n        } else if (obj.multiFactorSession?.idToken) {\n          return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n        }\n      }\n      return null;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class MultiFactorResolverImpl {\n    constructor(session, hints, signInResolver) {\n      this.session = session;\n      this.hints = hints;\n      this.signInResolver = signInResolver;\n    }\n    /** @internal */\n    static _fromError(authExtern, error) {\n      const auth = _castAuth(authExtern);\n      const serverResponse = error.customData._serverResponse;\n      const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));\n      _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n      return new MultiFactorResolverImpl(session, hints, async assertion => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case \"signIn\" /* OperationType.SIGN_IN */:\n            const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case \"reauthenticate\" /* OperationType.REAUTHENTICATE */:\n            _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);\n          default:\n            _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        }\n      });\n    }\n    async resolveSignIn(assertionExtern) {\n      const assertion = assertionExtern;\n      return this.signInResolver(assertion);\n    }\n  }\n  /**\n   * Provides a {@link MultiFactorResolver} suitable for completion of a\n   * multi-factor flow.\n   *\n   * @param auth - The {@link Auth} instance.\n   * @param error - The {@link MultiFactorError} raised during a sign-in, or\n   * reauthentication operation.\n   *\n   * @public\n   */\n  function getMultiFactorResolver(auth, error) {\n    const authModular = (0, _util.getModularInstance)(auth);\n    const errorInternal = error;\n    _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    _assert(errorInternal.customData._serverResponse?.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function startEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function finalizeEnrollTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n  }\n  function withdrawMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorUserImpl {\n    constructor(user) {\n      this.user = user;\n      this.enrolledFactors = [];\n      user._onReload(userInfo => {\n        if (userInfo.mfaInfo) {\n          this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));\n        }\n      });\n    }\n    static _fromUser(user) {\n      return new MultiFactorUserImpl(user);\n    }\n    async getSession() {\n      return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);\n    }\n    async enroll(assertionExtern, displayName) {\n      const assertion = assertionExtern;\n      const session = await this.getSession();\n      const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n      // New tokens will be issued after enrollment of the new second factors.\n      // They need to be updated on the user.\n      await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n      // The user needs to be reloaded to get the new multi-factor information\n      // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n      // will be updated.\n      return this.user.reload();\n    }\n    async unenroll(infoOrUid) {\n      const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n      const idToken = await this.user.getIdToken();\n      try {\n        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        }));\n        // Remove the second factor from the user's list.\n        this.enrolledFactors = this.enrolledFactors.filter(({\n          uid\n        }) => uid !== mfaEnrollmentId);\n        // Depending on whether the backend decided to revoke the user's session,\n        // the tokenResponse may be empty. If the tokens were not updated (and they\n        // are now invalid), reloading the user will discover this and invalidate\n        // the user's state accordingly.\n        await this.user._updateTokensIfNecessary(idTokenResponse);\n        await this.user.reload();\n      } catch (e) {\n        throw e;\n      }\n    }\n  }\n  const multiFactorUserCache = new WeakMap();\n  /**\n   * The {@link MultiFactorUser} corresponding to the user.\n   *\n   * @remarks\n   * This is used to access all multi-factor properties and operations related to the user.\n   *\n   * @param user - The user.\n   *\n   * @public\n   */\n  function multiFactor(user) {\n    const userModular = (0, _util.getModularInstance)(user);\n    if (!multiFactorUserCache.has(userModular)) {\n      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n    }\n    return multiFactorUserCache.get(userModular);\n  }\n  var name = \"@firebase/auth\";\n  var version = \"1.11.0\";\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  class AuthInterop {\n    constructor(auth) {\n      this.auth = auth;\n      this.internalListeners = new Map();\n    }\n    getUid() {\n      this.assertAuthConfigured();\n      return this.auth.currentUser?.uid || null;\n    }\n    async getToken(forceRefresh) {\n      this.assertAuthConfigured();\n      await this.auth._initializationPromise;\n      if (!this.auth.currentUser) {\n        return null;\n      }\n      const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n      return {\n        accessToken\n      };\n    }\n    addAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      if (this.internalListeners.has(listener)) {\n        return;\n      }\n      const unsubscribe = this.auth.onIdTokenChanged(user => {\n        listener(user?.stsTokenManager.accessToken || null);\n      });\n      this.internalListeners.set(listener, unsubscribe);\n      this.updateProactiveRefresh();\n    }\n    removeAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      const unsubscribe = this.internalListeners.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      this.internalListeners.delete(listener);\n      unsubscribe();\n      this.updateProactiveRefresh();\n    }\n    assertAuthConfigured() {\n      _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n    updateProactiveRefresh() {\n      if (this.internalListeners.size > 0) {\n        this.auth._startProactiveRefresh();\n      } else {\n        this.auth._stopProactiveRefresh();\n      }\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function getVersionForPlatform(clientPlatform) {\n    switch (clientPlatform) {\n      case \"Node\" /* ClientPlatform.NODE */:\n        return 'node';\n      case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n        return 'rn';\n      case \"Worker\" /* ClientPlatform.WORKER */:\n        return 'webworker';\n      case \"Cordova\" /* ClientPlatform.CORDOVA */:\n        return 'cordova';\n      case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n        return 'web-extension';\n      default:\n        return undefined;\n    }\n  }\n  /** @internal */\n  function registerAuth(clientPlatform) {\n    (0, _app._registerComponent)(new _component.Component(\"auth\" /* _ComponentName.AUTH */, (container, {\n      options: deps\n    }) => {\n      const app = container.getProvider('app').getImmediate();\n      const heartbeatServiceProvider = container.getProvider('heartbeat');\n      const appCheckServiceProvider = container.getProvider('app-check-internal');\n      const {\n        apiKey,\n        authDomain\n      } = app.options;\n      _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n        appName: app.name\n      });\n      const config = {\n        apiKey,\n        authDomain,\n        clientPlatform,\n        apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n        tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n        apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n        sdkClientVersion: _getClientVersion(clientPlatform)\n      };\n      const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n      _initializeAuthInstance(authInstance, deps);\n      return authInstance;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n    /**\n     * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n     * For why we do this, See go/firebase-next-auth-init\n     */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n    /**\n     * Because all firebase products that depend on auth depend on auth-internal directly,\n     * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n     */.setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {\n      const authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n      authInternalProvider.initialize();\n    }));\n    (0, _app._registerComponent)(new _component.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, container => {\n      const auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n      return (auth => new AuthInterop(auth))(auth);\n    }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n    (0, _app.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    (0, _app.registerVersion)(name, version, 'esm2020');\n  }\n\n  /**\n   * @license\n   * Copyright 2021 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  // Initialize the fetch polyfill, the types are slightly off so just cast and hope for the best\n  FetchProvider.initialize(fetch, Headers, Response);\n  // First, we set up the various platform-specific features for Node (register\n  // the version and declare the Node getAuth function)\n  function getAuth(app = (0, _app.getApp)()) {\n    const provider = (0, _app._getProvider)(app, 'auth');\n    if (provider.isInitialized()) {\n      return provider.getImmediate();\n    }\n    const auth = initializeAuth(app);\n    const authEmulatorHost = (0, _util.getDefaultEmulatorHost)('auth');\n    if (authEmulatorHost) {\n      connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n    }\n    return auth;\n  }\n  registerAuth(\"Node\" /* ClientPlatform.NODE */);\n  // The rest of this file contains no-ops and errors for browser-specific\n  // methods. We keep the browser and Node entry points the same, but features\n  // that only work in browsers are set to either do nothing (setPersistence) or\n  // to reject with an auth/operation-not-supported-in-this-environment error.\n  // The below exports are pulled into the main entry point by a rollup alias\n  // plugin (overwriting the default browser imports).\n  /** auth/operation-not-supported-in-this-environment */\n  const NOT_AVAILABLE_ERROR = _createError(\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n  /** Reject with auth/operation-not-supported-in-this-environment */\n  async function fail() {\n    throw NOT_AVAILABLE_ERROR;\n  }\n  /**\n   * A class which will throw with\n   * auth/operation-not-supported-in-this-environment if instantiated\n   */\n  class FailClass {\n    constructor() {\n      throw NOT_AVAILABLE_ERROR;\n    }\n  }\n  const browserLocalPersistence = exports.b = inMemoryPersistence;\n  const browserSessionPersistence = exports.c = inMemoryPersistence;\n  const browserCookiePersistence = exports.a = inMemoryPersistence;\n  const indexedDBLocalPersistence = exports.i = inMemoryPersistence;\n  const browserPopupRedirectResolver = exports.m = NOT_AVAILABLE_ERROR;\n  const PhoneAuthProvider = exports.P = FailClass;\n  const signInWithPhoneNumber = exports.s = fail;\n  const linkWithPhoneNumber = exports.l = fail;\n  const reauthenticateWithPhoneNumber = exports.r = fail;\n  const updatePhoneNumber = exports.u = fail;\n  const signInWithPopup = exports.d = fail;\n  const linkWithPopup = exports.e = fail;\n  const reauthenticateWithPopup = exports.f = fail;\n  const signInWithRedirect = exports.g = fail;\n  const linkWithRedirect = exports.h = fail;\n  const reauthenticateWithRedirect = exports.j = fail;\n  const getRedirectResult = exports.k = fail;\n  const RecaptchaVerifier = exports.R = FailClass;\n  class PhoneMultiFactorGenerator {\n    static assertion() {\n      throw NOT_AVAILABLE_ERROR;\n    }\n  }\n  // Set persistence should no-op instead of fail. Changing the prototype will\n  // make sure both setPersistence(auth, persistence) and\n  // auth.setPersistence(persistence) are covered.\n  exports.n = PhoneMultiFactorGenerator;\n  AuthImpl.prototype.setPersistence = async () => {};\n\n  /**\n   * @license\n   * Copyright 2020 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  function finalizeSignInTotpMfa(auth, request) {\n    return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n  }\n  class MultiFactorAssertionImpl {\n    constructor(factorId) {\n      this.factorId = factorId;\n    }\n    _process(auth, session, displayName) {\n      switch (session.type) {\n        case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n          return this._finalizeEnroll(auth, session.credential, displayName);\n        case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n          return this._finalizeSignIn(auth, session.credential);\n        default:\n          return debugFail('unexpected MultiFactorSessionType');\n      }\n    }\n  }\n\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * @public\n   */\n  class TotpMultiFactorGenerator {\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n     * the TOTP (time-based one-time password) second factor.\n     * This assertion is used to complete enrollment in TOTP second factor.\n     *\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorUser.enroll}.\n     */\n    static assertionForEnrollment(secret, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n     * This assertion is used to complete signIn with TOTP as the second factor.\n     *\n     * @param enrollmentId identifies the enrolled TOTP second factor.\n     * @param oneTimePassword One-time password from TOTP App.\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\n     * {@link MultiFactorResolver.resolveSignIn}.\n     */\n    static assertionForSignIn(enrollmentId, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\n     * Used for generating a QR code URL or inputting into a TOTP app.\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\n     *\n     * @param session The {@link MultiFactorSession} that the user is part of.\n     * @returns A promise to {@link TotpSecret}.\n     */\n    static async generateSecret(session) {\n      const mfaSession = session;\n      _assert(typeof mfaSession.user?.auth !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n        idToken: mfaSession.credential,\n        totpEnrollmentInfo: {}\n      });\n      return TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);\n    }\n  }\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  exports.T = TotpMultiFactorGenerator;\n  TotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\n  class TotpMultiFactorAssertionImpl extends MultiFactorAssertionImpl {\n    constructor(otp, enrollmentId, secret) {\n      super(\"totp\" /* FactorId.TOTP */);\n      this.otp = otp;\n      this.enrollmentId = enrollmentId;\n      this.secret = secret;\n    }\n    /** @internal */\n    static _fromSecret(secret, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n    static _fromEnrollmentId(enrollmentId, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n    /** @internal */\n    async _finalizeEnroll(auth, idToken, displayName) {\n      _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return finalizeEnrollTotpMfa(auth, {\n        idToken,\n        displayName,\n        totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n      });\n    }\n    /** @internal */\n    async _finalizeSignIn(auth, mfaPendingCredential) {\n      _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      const totpVerificationInfo = {\n        verificationCode: this.otp\n      };\n      return finalizeSignInTotpMfa(auth, {\n        mfaPendingCredential,\n        mfaEnrollmentId: this.enrollmentId,\n        totpVerificationInfo\n      });\n    }\n  }\n  /**\n   * Provider for generating a {@link TotpMultiFactorAssertion}.\n   *\n   * Stores the shared secret key and other parameters to generate time-based OTPs.\n   * Implements methods to retrieve the shared secret key and generate a QR code URL.\n   * @public\n   */\n  class TotpSecret {\n    // The public members are declared outside the constructor so the docs can be generated.\n    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n      this.sessionInfo = sessionInfo;\n      this.auth = auth;\n      this.secretKey = secretKey;\n      this.hashingAlgorithm = hashingAlgorithm;\n      this.codeLength = codeLength;\n      this.codeIntervalSeconds = codeIntervalSeconds;\n      this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n    }\n    /** @internal */\n    static _fromStartTotpMfaEnrollmentResponse(response, auth) {\n      return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n    /** @internal */\n    _makeTotpVerificationInfo(otp) {\n      return {\n        sessionInfo: this.sessionInfo,\n        verificationCode: otp\n      };\n    }\n    /**\n     * Returns a QR code URL as described in\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n     *\n     * @param accountName the name of the account/app along with a user identifier.\n     * @param issuer issuer of the TOTP (likely the app name).\n     * @returns A QR code URL string.\n     */\n    generateQrCodeUrl(accountName, issuer) {\n      let useDefaults = false;\n      if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n        useDefaults = true;\n      }\n      if (useDefaults) {\n        if (_isEmptyString(accountName)) {\n          accountName = this.auth.currentUser?.email || 'unknownuser';\n        }\n        if (_isEmptyString(issuer)) {\n          issuer = this.auth.name;\n        }\n      }\n      return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n    }\n  }\n  /** @internal */\n  exports.o = TotpSecret;\n  function _isEmptyString(input) {\n    return typeof input === 'undefined' || input?.length === 0;\n  }\n});","lineCount":7610,"map":[[79,2,1,0],[79,6,1,0,"_app"],[79,10,1,0],[79,13,1,0,"require"],[79,20,1,0],[79,21,1,0,"_dependencyMap"],[79,35,1,0],[80,2,2,0],[80,6,2,0,"_util"],[80,11,2,0],[80,14,2,0,"require"],[80,21,2,0],[80,22,2,0,"_dependencyMap"],[80,36,2,0],[81,2,3,0],[81,6,3,0,"_component"],[81,16,3,0],[81,19,3,0,"require"],[81,26,3,0],[81,27,3,0,"_dependencyMap"],[81,41,3,0],[82,2,4,0],[82,6,4,0,"_logger"],[82,13,4,0],[82,16,4,0,"require"],[82,23,4,0],[82,24,4,0,"_dependencyMap"],[82,38,4,0],[83,2,6,0],[84,0,7,0],[85,0,8,0],[86,0,9,0],[87,0,10,0],[88,0,11,0],[89,0,12,0],[90,0,13,0],[91,0,14,0],[92,0,15,0],[93,0,16,0],[94,0,17,0],[95,0,18,0],[96,0,19,0],[97,0,20,0],[98,0,21,0],[99,2,22,0],[100,0,23,0],[101,0,24,0],[102,0,25,0],[103,0,26,0],[104,2,27,0],[104,8,27,6,"FactorId"],[104,16,27,14],[104,19,27,14,"exports"],[104,26,27,14],[104,27,27,14,"F"],[104,28,27,14],[104,31,27,17],[105,4,28,4],[106,4,29,4,"PHONE"],[106,9,29,9],[106,11,29,11],[106,18,29,18],[107,4,30,4,"TOTP"],[107,8,30,8],[107,10,30,10],[108,2,31,0],[108,3,31,1],[109,2,32,0],[110,0,33,0],[111,0,34,0],[112,0,35,0],[113,0,36,0],[114,2,37,0],[114,8,37,6,"ProviderId"],[114,18,37,16],[114,21,37,16,"exports"],[114,28,37,16],[114,29,37,16,"q"],[114,30,37,16],[114,33,37,19],[115,4,38,4],[116,4,39,4,"FACEBOOK"],[116,12,39,12],[116,14,39,14],[116,28,39,28],[117,4,40,4],[118,4,41,4,"GITHUB"],[118,10,41,10],[118,12,41,12],[118,24,41,24],[119,4,42,4],[120,4,43,4,"GOOGLE"],[120,10,43,10],[120,12,43,12],[120,24,43,24],[121,4,44,4],[122,4,45,4,"PASSWORD"],[122,12,45,12],[122,14,45,14],[122,24,45,24],[123,4,46,4],[124,4,47,4,"PHONE"],[124,9,47,9],[124,11,47,11],[124,18,47,18],[125,4,48,4],[126,4,49,4,"TWITTER"],[126,11,49,11],[126,13,49,13],[127,2,50,0],[127,3,50,1],[128,2,51,0],[129,0,52,0],[130,0,53,0],[131,0,54,0],[132,0,55,0],[133,2,56,0],[133,8,56,6,"SignInMethod"],[133,20,56,18],[133,23,56,18,"exports"],[133,30,56,18],[133,31,56,18,"S"],[133,32,56,18],[133,35,56,21],[134,4,57,4],[135,4,58,4,"EMAIL_LINK"],[135,14,58,14],[135,16,58,16],[135,27,58,27],[136,4,59,4],[137,4,60,4,"EMAIL_PASSWORD"],[137,18,60,18],[137,20,60,20],[137,30,60,30],[138,4,61,4],[139,4,62,4,"FACEBOOK"],[139,12,62,12],[139,14,62,14],[139,28,62,28],[140,4,63,4],[141,4,64,4,"GITHUB"],[141,10,64,10],[141,12,64,12],[141,24,64,24],[142,4,65,4],[143,4,66,4,"GOOGLE"],[143,10,66,10],[143,12,66,12],[143,24,66,24],[144,4,67,4],[145,4,68,4,"PHONE"],[145,9,68,9],[145,11,68,11],[145,18,68,18],[146,4,69,4],[147,4,70,4,"TWITTER"],[147,11,70,11],[147,13,70,13],[148,2,71,0],[148,3,71,1],[149,2,72,0],[150,0,73,0],[151,0,74,0],[152,0,75,0],[153,0,76,0],[154,2,77,0],[154,8,77,6,"OperationType"],[154,21,77,19],[154,24,77,19,"exports"],[154,31,77,19],[154,32,77,19,"O"],[154,33,77,19],[154,36,77,22],[155,4,78,4],[156,4,79,4,"LINK"],[156,8,79,8],[156,10,79,10],[156,16,79,16],[157,4,80,4],[158,4,81,4,"REAUTHENTICATE"],[158,18,81,18],[158,20,81,20],[158,36,81,36],[159,4,82,4],[160,4,83,4,"SIGN_IN"],[160,11,83,11],[160,13,83,13],[161,2,84,0],[161,3,84,1],[162,2,85,0],[163,0,86,0],[164,0,87,0],[165,0,88,0],[166,0,89,0],[167,2,90,0],[167,8,90,6,"ActionCodeOperation"],[167,27,90,25],[167,30,90,25,"exports"],[167,37,90,25],[167,38,90,25,"A"],[167,39,90,25],[167,42,90,28],[168,4,91,4],[169,4,92,4,"EMAIL_SIGNIN"],[169,16,92,16],[169,18,92,18],[169,32,92,32],[170,4,93,4],[171,4,94,4,"PASSWORD_RESET"],[171,18,94,18],[171,20,94,20],[171,36,94,36],[172,4,95,4],[173,4,96,4,"RECOVER_EMAIL"],[173,17,96,17],[173,19,96,19],[173,34,96,34],[174,4,97,4],[175,4,98,4,"REVERT_SECOND_FACTOR_ADDITION"],[175,33,98,33],[175,35,98,35],[175,66,98,66],[176,4,99,4],[177,4,100,4,"VERIFY_AND_CHANGE_EMAIL"],[177,27,100,27],[177,29,100,29],[177,54,100,54],[178,4,101,4],[179,4,102,4,"VERIFY_EMAIL"],[179,16,102,16],[179,18,102,18],[180,2,103,0],[180,3,103,1],[182,2,105,0],[183,0,106,0],[184,0,107,0],[185,0,108,0],[186,0,109,0],[187,0,110,0],[188,0,111,0],[189,0,112,0],[190,0,113,0],[191,0,114,0],[192,0,115,0],[193,0,116,0],[194,0,117,0],[195,0,118,0],[196,0,119,0],[197,0,120,0],[198,2,121,0],[198,11,121,9,"_debugErrorMap"],[198,25,121,23,"_debugErrorMap"],[198,26,121,23],[198,28,121,26],[199,4,122,4],[199,11,122,11],[200,6,123,8],[200,7,123,9],[200,35,123,37],[200,36,123,38],[200,79,123,81],[200,133,123,135],[201,6,124,8],[201,7,124,9],[201,23,124,25],[201,24,124,26],[201,61,124,63],[201,63,124,65],[202,6,125,8],[202,7,125,9],[202,27,125,29],[202,28,125,30],[202,69,125,71],[202,132,125,134],[202,135,126,12],[202,206,126,83],[202,209,127,12],[202,267,127,70],[203,6,128,8],[203,7,128,9],[203,26,128,28],[203,27,128,29],[203,67,128,69],[203,135,128,137],[203,138,129,12],[203,208,129,82],[203,211,130,12],[203,225,130,26],[204,6,131,8],[204,7,131,9],[204,29,131,31],[204,30,131,32],[204,73,131,75],[204,141,131,143],[204,144,132,12],[204,216,132,84],[204,219,133,12],[204,244,133,37],[205,6,134,8],[205,7,134,9],[205,21,134,23],[205,22,134,24],[205,57,134,59],[205,129,134,131],[205,132,135,12],[205,140,135,20],[206,6,136,8],[206,7,136,9],[206,26,136,28],[206,27,136,29],[206,67,136,69],[206,100,136,102],[207,6,137,8],[207,7,137,9],[207,25,137,27],[207,26,137,28],[207,65,137,67],[207,97,137,99],[208,6,138,8],[208,7,138,9],[208,34,138,36],[208,35,138,37],[208,83,138,85],[208,153,138,155],[209,6,139,8],[209,7,139,9],[209,30,139,32],[209,31,139,33],[209,73,139,75],[209,128,139,130],[210,6,140,8],[210,7,140,9],[210,30,140,32],[210,31,140,33],[210,84,140,86],[210,157,140,159],[210,160,141,12],[210,197,141,49],[211,6,142,8],[211,7,142,9],[211,46,142,48],[211,47,142,49],[211,100,142,102],[211,180,142,182],[211,183,143,12],[211,258,143,87],[211,261,144,12],[211,295,144,46],[212,6,145,8],[212,7,145,9],[212,35,145,37],[212,36,145,38],[212,85,145,87],[212,168,145,170],[212,171,146,12],[212,184,146,25],[213,6,147,8],[213,7,147,9],[213,40,147,42],[213,41,147,43],[213,95,147,97],[213,150,147,152],[214,6,148,8],[214,7,148,9],[214,29,148,31],[214,30,148,32],[214,65,148,67],[214,122,148,124],[215,6,149,8],[215,7,149,9],[215,31,149,33],[215,32,149,34],[215,77,149,79],[215,148,149,150],[215,151,150,12],[215,210,150,71],[215,213,151,12],[215,246,151,45],[216,6,152,8],[216,7,152,9],[216,28,152,30],[216,29,152,31],[216,68,152,70],[216,98,152,100],[217,6,153,8],[217,7,153,9],[217,32,153,34],[217,33,153,35],[217,77,153,79],[217,159,153,161],[218,6,154,8],[218,7,154,9],[218,23,154,25],[218,24,154,26],[218,61,154,63],[218,98,154,100],[219,6,155,8],[219,7,155,9],[219,31,155,33],[219,32,155,34],[219,77,155,79],[219,151,155,153],[219,154,156,12],[219,215,156,73],[220,6,157,8],[220,7,157,9],[220,23,157,25],[220,24,157,26],[220,61,157,63],[220,131,157,133],[221,6,158,8],[221,7,158,9],[221,27,158,29],[221,28,158,30],[221,63,158,65],[221,134,158,136],[221,137,159,12],[221,208,159,83],[221,211,160,12],[221,254,160,55],[222,6,161,8],[222,7,161,9],[222,27,161,29],[222,28,161,30],[222,69,161,71],[222,106,161,108],[223,6,162,8],[223,7,162,9],[223,34,162,36],[223,35,162,37],[223,70,162,72],[223,142,162,144],[223,145,163,12],[223,219,163,86],[223,222,164,12],[223,263,164,53],[224,6,165,8],[224,7,165,9],[224,29,165,31],[224,30,165,32],[224,73,165,75],[224,127,165,129],[225,6,166,8],[225,7,166,9],[225,38,166,40],[225,39,166,41],[225,91,166,93],[225,166,166,168],[225,169,167,12],[225,229,167,72],[225,232,168,12],[225,293,168,73],[225,296,169,12],[225,329,169,45],[226,6,170,8],[226,7,170,9],[226,29,170,31],[226,30,170,32],[226,73,170,75],[226,144,170,146],[227,6,171,8],[227,7,171,9],[227,36,171,38],[227,37,171,39],[227,87,171,89],[227,178,171,180],[228,6,172,8],[228,7,172,9],[228,22,172,24],[228,23,172,25],[228,59,172,61],[228,98,172,100],[229,6,173,8],[229,7,173,9],[229,32,173,34],[229,33,173,35],[229,79,173,81],[229,147,173,149],[230,6,174,8],[230,7,174,9],[230,24,174,26],[230,25,174,27],[230,63,174,65],[230,132,174,134],[231,6,175,8],[231,7,175,9],[231,26,175,28],[231,27,175,29],[231,67,175,69],[231,116,175,118],[232,6,176,8],[232,7,176,9],[232,27,176,29],[232,28,176,30],[232,69,176,71],[232,139,176,141],[233,6,177,8],[233,7,177,9],[233,32,177,34],[233,33,177,35],[233,79,177,81],[233,173,177,175],[233,176,178,12],[233,258,178,94],[234,6,179,8],[234,7,179,9],[234,37,179,39],[234,38,179,40],[234,80,179,82],[234,160,179,162],[235,6,180,8],[235,7,180,9],[235,31,180,33],[235,32,180,34],[235,77,180,79],[235,149,180,151],[235,152,181,12],[235,184,181,44],[236,6,182,8],[236,7,182,9],[236,32,182,34],[236,33,182,35],[236,79,182,81],[236,150,182,152],[236,153,183,12],[236,173,183,32],[237,6,184,8],[237,7,184,9],[237,28,184,30],[237,29,184,31],[237,66,184,68],[237,137,184,139],[237,140,185,12],[237,213,185,85],[238,6,186,8],[238,7,186,9],[238,28,186,30],[238,29,186,31],[238,68,186,70],[238,140,186,142],[238,143,187,12],[238,179,187,48],[239,6,188,8],[239,7,188,9],[239,23,188,25],[239,24,188,26],[239,63,188,65],[239,126,188,128],[240,6,189,8],[240,7,189,9],[240,33,189,35],[240,34,189,36],[240,76,189,78],[240,159,189,161],[241,6,190,8],[241,7,190,9],[241,29,190,31],[241,30,190,32],[241,73,190,75],[241,146,190,148],[241,149,191,12],[241,220,191,83],[241,223,192,12],[241,294,192,83],[241,297,193,12],[241,327,193,42],[242,6,194,8],[242,7,194,9],[242,28,194,30],[242,29,194,31],[242,71,194,73],[242,110,194,112],[243,6,195,8],[243,7,195,9],[243,32,195,34],[243,33,195,35],[243,79,195,81],[243,151,195,153],[243,154,196,12],[243,191,196,49],[244,6,197,8],[244,7,197,9],[244,23,197,25],[244,24,197,26],[244,61,197,63],[244,153,197,155],[244,156,198,12],[244,238,198,94],[245,6,199,8],[245,7,199,9],[245,32,199,34],[245,33,199,35],[245,76,199,78],[245,150,199,152],[246,6,200,8],[246,7,200,9],[246,26,200,28],[246,27,200,29],[246,67,200,69],[246,110,200,112],[247,6,201,8],[247,7,201,9],[247,22,201,24],[247,23,201,25],[247,59,201,61],[247,118,201,120],[248,6,202,8],[248,7,202,9],[248,33,202,35],[248,34,202,36],[248,85,202,87],[248,175,202,177],[249,6,203,8],[249,7,203,9],[249,36,203,38],[249,37,203,39],[249,79,203,81],[249,150,203,152],[249,153,204,12],[249,209,204,68],[250,6,205,8],[250,7,205,9],[250,31,205,33],[250,32,205,34],[250,77,205,79],[250,145,205,147],[250,148,206,12],[250,209,206,73],[251,6,207,8],[251,7,207,9],[251,34,207,36],[251,35,207,37],[251,70,207,72],[251,146,207,148],[252,6,208,8],[252,7,208,9],[252,29,208,31],[252,30,208,32],[252,73,208,75],[252,122,208,124],[253,6,209,8],[253,7,209,9],[253,29,209,31],[253,30,209,32],[253,73,209,75],[253,110,209,112],[254,6,210,8],[254,7,210,9],[254,30,210,32],[254,31,210,33],[254,75,210,77],[254,142,210,144],[255,6,211,8],[255,7,211,9],[255,33,211,35],[255,34,211,36],[255,81,211,83],[255,149,211,151],[255,152,212,12],[255,225,212,85],[255,228,213,12],[255,254,213,38],[256,6,214,8],[256,7,214,9],[256,25,214,27],[256,26,214,28],[256,65,214,67],[256,104,214,106],[257,6,215,8],[257,7,215,9],[257,34,215,36],[257,35,215,37],[257,74,215,76],[257,116,215,118],[258,6,216,8],[258,7,216,9],[258,37,216,39],[258,38,216,40],[258,80,216,82],[258,146,216,148],[259,6,217,8],[259,7,217,9],[259,29,217,31],[259,30,217,32],[259,73,217,75],[259,144,217,146],[260,6,218,8],[260,7,218,9],[260,32,218,34],[260,33,218,35],[260,76,218,78],[260,146,218,148],[261,6,219,8],[261,7,219,9],[261,20,219,22],[261,21,219,23],[261,60,219,62],[261,108,219,110],[262,6,220,8],[262,7,220,9],[262,36,220,38],[262,37,220,39],[262,78,220,80],[262,152,220,154],[263,6,221,8],[263,7,221,9],[263,35,221,37],[263,36,221,38],[263,71,221,73],[263,143,221,145],[264,6,222,8],[264,7,222,9],[264,49,222,51],[264,50,222,52],[264,90,222,92],[264,160,222,162],[264,163,223,12],[264,232,223,81],[264,235,224,12],[264,251,224,28],[265,6,225,8],[265,7,225,9],[265,31,225,33],[265,32,225,34],[265,77,225,79],[265,174,225,176],[266,6,226,8],[266,7,226,9],[266,22,226,24],[266,23,226,25],[266,59,226,61],[266,96,226,98],[267,6,227,8],[267,7,227,9],[267,25,227,27],[267,26,227,28],[267,65,227,67],[267,125,227,127],[268,6,228,8],[268,7,228,9],[268,18,228,20],[268,19,228,21],[268,51,228,53],[268,124,228,126],[268,127,229,12],[268,161,229,46],[269,6,230,8],[269,7,230,9],[269,30,230,32],[269,31,230,33],[269,75,230,77],[269,143,230,145],[269,146,231,12],[269,219,231,85],[269,222,232,12],[269,237,232,27],[270,6,233,8],[270,7,233,9],[270,52,233,54],[270,53,233,55],[270,99,233,101],[270,172,233,174],[270,175,234,12],[270,248,234,85],[270,251,235,12],[270,286,235,47],[271,6,236,8],[271,7,236,9],[271,22,236,24],[271,23,236,25],[271,59,236,61],[271,150,236,152],[272,6,237,8],[272,7,237,9],[272,29,237,31],[272,30,237,32],[272,73,237,75],[272,145,237,147],[273,6,238,8],[273,7,238,9],[273,32,238,34],[273,33,238,35],[273,79,238,81],[273,144,238,146],[274,6,239,8],[274,7,239,9],[274,23,239,25],[274,24,239,26],[274,61,239,63],[274,120,239,122],[275,6,240,8],[275,7,240,9],[275,35,240,37],[275,36,240,38],[275,85,240,87],[275,159,240,161],[276,6,241,8],[276,7,241,9],[276,35,241,37],[276,36,241,38],[276,85,241,87],[276,135,241,137],[277,6,242,8],[277,7,242,9],[277,28,242,30],[277,29,242,31],[277,71,242,73],[277,131,242,133],[278,6,243,8],[278,7,243,9],[278,37,243,39],[278,38,243,40],[278,91,243,93],[278,147,243,149],[279,6,244,8],[279,7,244,9],[279,45,244,47],[279,46,244,48],[279,97,244,99],[279,172,244,174],[280,6,245,8],[280,7,245,9],[280,27,245,29],[280,28,245,30],[280,69,245,71],[280,138,245,140],[281,6,246,8],[281,7,246,9],[281,16,246,18],[281,17,246,19],[281,47,246,49],[281,77,246,79],[282,6,247,8],[282,7,247,9],[282,27,247,29],[282,28,247,30],[282,64,247,66],[282,136,247,138],[283,6,248,8],[283,7,248,9],[283,26,248,28],[283,27,248,29],[283,77,248,79],[283,150,248,152],[283,153,249,12],[283,171,249,30],[284,6,250,8],[284,7,250,9],[284,34,250,36],[284,35,250,37],[284,77,250,79],[284,148,250,150],[284,151,251,12],[284,188,251,49],[285,6,252,8],[285,7,252,9],[285,33,252,35],[285,34,252,36],[285,81,252,83],[285,198,252,200],[286,6,253,8],[286,7,253,9],[286,37,253,39],[286,38,253,40],[286,84,253,86],[286,158,253,160],[287,6,254,8],[287,7,254,9],[287,37,254,39],[287,38,254,40],[287,89,254,91],[287,149,254,151],[288,6,255,8],[288,7,255,9],[288,25,255,27],[288,26,255,28],[288,65,255,67],[288,107,255,109],[289,6,256,8],[289,7,256,9],[289,23,256,25],[289,24,256,26],[289,61,256,63],[289,132,256,134],[290,6,257,8],[290,7,257,9],[290,23,257,25],[290,24,257,26],[290,59,257,61],[290,132,257,134],[290,135,258,12],[290,155,258,32],[291,6,259,8],[291,7,259,9],[291,22,259,24],[291,23,259,25],[291,59,259,61],[291,116,259,118],[292,6,260,8],[292,7,260,9],[292,22,260,24],[292,23,260,25],[292,59,260,61],[292,137,260,139],[293,6,261,8],[293,7,261,9],[293,24,261,26],[293,25,261,27],[293,63,261,65],[293,65,261,67],[294,6,262,8],[294,7,262,9],[294,22,262,24],[294,23,262,25],[294,59,262,61],[294,108,262,110],[295,6,263,8],[295,7,263,9],[295,32,263,34],[295,33,263,35],[295,79,263,81],[295,157,263,159],[296,6,264,8],[296,7,264,9],[296,28,264,30],[296,29,264,31],[296,71,264,73],[296,119,264,121],[296,122,265,12],[296,195,265,85],[296,198,266,12],[296,278,266,92],[296,281,267,12],[296,313,267,44],[297,6,268,8],[297,7,268,9],[297,32,268,34],[297,33,268,35],[297,79,268,81],[297,148,268,150],[298,6,269,8],[298,7,269,9],[298,32,269,34],[298,33,269,35],[298,79,269,81],[298,148,269,150],[299,6,270,8],[299,7,270,9],[299,33,270,35],[299,34,270,36],[299,81,270,83],[299,151,270,153],[300,6,271,8],[300,7,271,9],[300,30,271,32],[300,31,271,33],[300,75,271,77],[300,142,271,144],[301,6,272,8],[301,7,272,9],[301,28,272,30],[301,29,272,31],[301,71,272,73],[301,146,272,148],[302,6,273,8],[302,7,273,9],[302,34,273,36],[302,35,273,37],[302,83,273,85],[302,154,273,156],[303,6,274,8],[303,7,274,9],[303,25,274,27],[303,26,274,28],[303,65,274,67],[303,94,274,96],[304,6,275,8],[304,7,275,9],[304,34,275,36],[304,35,275,37],[304,83,275,85],[304,154,275,156],[305,6,276,8],[305,7,276,9],[305,51,276,53],[305,52,276,54],[305,117,276,119],[305,245,276,247],[306,6,277,8],[306,7,277,9],[306,44,277,46],[306,45,277,47],[306,103,277,105],[306,149,277,151],[307,6,278,8],[307,7,278,9],[307,36,278,38],[307,37,278,39],[307,87,278,89],[307,179,278,181],[307,182,279,12],[308,4,280,4],[308,5,280,5],[309,2,281,0],[310,2,282,0],[310,11,282,9,"_prodErrorMap"],[310,24,282,22,"_prodErrorMap"],[310,25,282,22],[310,27,282,25],[311,4,283,4],[312,4,284,4],[313,4,285,4],[314,4,286,4],[314,11,286,11],[315,6,287,8],[315,7,287,9],[315,46,287,48],[315,47,287,49],[315,100,287,102],[315,180,287,182],[315,183,288,12],[315,258,288,87],[315,261,289,12],[316,4,290,4],[316,5,290,5],[317,2,291,0],[318,2,292,0],[319,0,293,0],[320,0,294,0],[321,0,295,0],[322,0,296,0],[323,0,297,0],[324,0,298,0],[325,2,299,0],[325,8,299,6,"debugErrorMap"],[325,21,299,19],[325,24,299,19,"exports"],[325,31,299,19],[325,32,299,19,"H"],[325,33,299,19],[325,36,299,22,"_debugErrorMap"],[325,50,299,36],[326,2,300,0],[327,0,301,0],[328,0,302,0],[329,0,303,0],[330,0,304,0],[331,0,305,0],[332,0,306,0],[333,2,307,0],[333,8,307,6,"prodErrorMap"],[333,20,307,18],[333,23,307,18,"exports"],[333,30,307,18],[333,31,307,18,"I"],[333,32,307,18],[333,35,307,21,"_prodErrorMap"],[333,48,307,34],[334,2,308,0],[334,8,308,6,"_DEFAULT_AUTH_ERROR_FACTORY"],[334,35,308,33],[334,38,308,36],[334,42,308,40,"ErrorFactory"],[334,60,308,52],[334,61,308,53],[334,67,308,59],[334,69,308,61],[334,79,308,71],[334,81,308,73,"_prodErrorMap"],[334,94,308,86],[334,95,308,87],[334,96,308,88],[334,97,308,89],[335,2,309,0],[336,0,310,0],[337,0,311,0],[338,0,312,0],[339,0,313,0],[340,0,314,0],[341,0,315,0],[342,0,316,0],[343,0,317,0],[344,0,318,0],[345,0,319,0],[346,2,320,0],[346,8,320,6,"AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY"],[346,50,320,48],[346,53,320,48,"exports"],[346,60,320,48],[346,61,320,48,"J"],[346,62,320,48],[346,65,320,51],[347,4,321,4,"ADMIN_ONLY_OPERATION"],[347,24,321,24],[347,26,321,26],[347,59,321,59],[348,4,322,4,"ARGUMENT_ERROR"],[348,18,322,18],[348,20,322,20],[348,41,322,41],[349,4,323,4,"APP_NOT_AUTHORIZED"],[349,22,323,22],[349,24,323,24],[349,49,323,49],[350,4,324,4,"APP_NOT_INSTALLED"],[350,21,324,21],[350,23,324,23],[350,47,324,47],[351,4,325,4,"CAPTCHA_CHECK_FAILED"],[351,24,325,24],[351,26,325,26],[351,53,325,53],[352,4,326,4,"CODE_EXPIRED"],[352,16,326,16],[352,18,326,18],[352,37,326,37],[353,4,327,4,"CORDOVA_NOT_READY"],[353,21,327,21],[353,23,327,23],[353,47,327,47],[354,4,328,4,"CORS_UNSUPPORTED"],[354,20,328,20],[354,22,328,22],[354,45,328,45],[355,4,329,4,"CREDENTIAL_ALREADY_IN_USE"],[355,29,329,29],[355,31,329,31],[355,63,329,63],[356,4,330,4,"CREDENTIAL_MISMATCH"],[356,23,330,23],[356,25,330,25],[356,53,330,53],[357,4,331,4,"CREDENTIAL_TOO_OLD_LOGIN_AGAIN"],[357,34,331,34],[357,36,331,36],[357,64,331,64],[358,4,332,4,"DEPENDENT_SDK_INIT_BEFORE_AUTH"],[358,34,332,34],[358,36,332,36],[358,80,332,80],[359,4,333,4,"DYNAMIC_LINK_NOT_ACTIVATED"],[359,30,333,30],[359,32,333,32],[359,65,333,65],[360,4,334,4,"EMAIL_CHANGE_NEEDS_VERIFICATION"],[360,35,334,35],[360,37,334,37],[360,75,334,75],[361,4,335,4,"EMAIL_EXISTS"],[361,16,335,16],[361,18,335,18],[361,45,335,45],[362,4,336,4,"EMULATOR_CONFIG_FAILED"],[362,26,336,26],[362,28,336,28],[362,57,336,57],[363,4,337,4,"EXPIRED_OOB_CODE"],[363,20,337,20],[363,22,337,22],[363,48,337,48],[364,4,338,4,"EXPIRED_POPUP_REQUEST"],[364,25,338,25],[364,27,338,27],[364,57,338,57],[365,4,339,4,"INTERNAL_ERROR"],[365,18,339,18],[365,20,339,20],[365,41,339,41],[366,4,340,4,"INVALID_API_KEY"],[366,19,340,19],[366,21,340,21],[366,43,340,43],[367,4,341,4,"INVALID_APP_CREDENTIAL"],[367,26,341,26],[367,28,341,28],[367,57,341,57],[368,4,342,4,"INVALID_APP_ID"],[368,18,342,18],[368,20,342,20],[368,41,342,41],[369,4,343,4,"INVALID_AUTH"],[369,16,343,16],[369,18,343,18],[369,43,343,43],[370,4,344,4,"INVALID_AUTH_EVENT"],[370,22,344,22],[370,24,344,24],[370,49,344,49],[371,4,345,4,"INVALID_CERT_HASH"],[371,21,345,21],[371,23,345,23],[371,47,345,47],[372,4,346,4,"INVALID_CODE"],[372,16,346,16],[372,18,346,18],[372,50,346,50],[373,4,347,4,"INVALID_CONTINUE_URI"],[373,24,347,24],[373,26,347,26],[373,53,347,53],[374,4,348,4,"INVALID_CORDOVA_CONFIGURATION"],[374,33,348,33],[374,35,348,35],[374,71,348,71],[375,4,349,4,"INVALID_CUSTOM_TOKEN"],[375,24,349,24],[375,26,349,26],[375,53,349,53],[376,4,350,4,"INVALID_DYNAMIC_LINK_DOMAIN"],[376,31,350,31],[376,33,350,33],[376,67,350,67],[377,4,351,4,"INVALID_EMAIL"],[377,17,351,17],[377,19,351,19],[377,39,351,39],[378,4,352,4,"INVALID_EMULATOR_SCHEME"],[378,27,352,27],[378,29,352,29],[378,59,352,59],[379,4,353,4,"INVALID_IDP_RESPONSE"],[379,24,353,24],[379,26,353,26],[379,51,353,51],[380,4,354,4,"INVALID_LOGIN_CREDENTIALS"],[380,29,354,29],[380,31,354,31],[380,56,354,56],[381,4,355,4,"INVALID_MESSAGE_PAYLOAD"],[381,27,355,27],[381,29,355,29],[381,59,355,59],[382,4,356,4,"INVALID_MFA_SESSION"],[382,23,356,23],[382,25,356,25],[382,60,356,60],[383,4,357,4,"INVALID_OAUTH_CLIENT_ID"],[383,27,357,27],[383,29,357,29],[383,59,357,59],[384,4,358,4,"INVALID_OAUTH_PROVIDER"],[384,26,358,26],[384,28,358,28],[384,57,358,57],[385,4,359,4,"INVALID_OOB_CODE"],[385,20,359,20],[385,22,359,22],[385,48,359,48],[386,4,360,4,"INVALID_ORIGIN"],[386,18,360,18],[386,20,360,20],[386,46,360,46],[387,4,361,4,"INVALID_PASSWORD"],[387,20,361,20],[387,22,361,22],[387,43,361,43],[388,4,362,4,"INVALID_PERSISTENCE"],[388,23,362,23],[388,25,362,25],[388,56,362,56],[389,4,363,4,"INVALID_PHONE_NUMBER"],[389,24,363,24],[389,26,363,26],[389,53,363,53],[390,4,364,4,"INVALID_PROVIDER_ID"],[390,23,364,23],[390,25,364,25],[390,51,364,51],[391,4,365,4,"INVALID_RECIPIENT_EMAIL"],[391,27,365,27],[391,29,365,29],[391,59,365,59],[392,4,366,4,"INVALID_SENDER"],[392,18,366,18],[392,20,366,20],[392,41,366,41],[393,4,367,4,"INVALID_SESSION_INFO"],[393,24,367,24],[393,26,367,26],[393,56,367,56],[394,4,368,4,"INVALID_TENANT_ID"],[394,21,368,21],[394,23,368,23],[394,47,368,47],[395,4,369,4,"MFA_INFO_NOT_FOUND"],[395,22,369,22],[395,24,369,24],[395,58,369,58],[396,4,370,4,"MFA_REQUIRED"],[396,16,370,16],[396,18,370,18],[396,51,370,51],[397,4,371,4,"MISSING_ANDROID_PACKAGE_NAME"],[397,32,371,32],[397,34,371,34],[397,65,371,65],[398,4,372,4,"MISSING_APP_CREDENTIAL"],[398,26,372,26],[398,28,372,28],[398,57,372,57],[399,4,373,4,"MISSING_AUTH_DOMAIN"],[399,23,373,23],[399,25,373,25],[399,59,373,59],[400,4,374,4,"MISSING_CODE"],[400,16,374,16],[400,18,374,18],[400,50,374,50],[401,4,375,4,"MISSING_CONTINUE_URI"],[401,24,375,24],[401,26,375,26],[401,53,375,53],[402,4,376,4,"MISSING_IFRAME_START"],[402,24,376,24],[402,26,376,26],[402,53,376,53],[403,4,377,4,"MISSING_IOS_BUNDLE_ID"],[403,25,377,25],[403,27,377,27],[403,55,377,55],[404,4,378,4,"MISSING_OR_INVALID_NONCE"],[404,28,378,28],[404,30,378,30],[404,61,378,61],[405,4,379,4,"MISSING_MFA_INFO"],[405,20,379,20],[405,22,379,22],[405,54,379,54],[406,4,380,4,"MISSING_MFA_SESSION"],[406,23,380,23],[406,25,380,25],[406,60,380,60],[407,4,381,4,"MISSING_PHONE_NUMBER"],[407,24,381,24],[407,26,381,26],[407,53,381,53],[408,4,382,4,"MISSING_SESSION_INFO"],[408,24,382,24],[408,26,382,26],[408,56,382,56],[409,4,383,4,"MODULE_DESTROYED"],[409,20,383,20],[409,22,383,22],[409,40,383,40],[410,4,384,4,"NEED_CONFIRMATION"],[410,21,384,21],[410,23,384,23],[410,70,384,70],[411,4,385,4,"NETWORK_REQUEST_FAILED"],[411,26,385,26],[411,28,385,28],[411,57,385,57],[412,4,386,4,"NULL_USER"],[412,13,386,13],[412,15,386,15],[412,31,386,31],[413,4,387,4,"NO_AUTH_EVENT"],[413,17,387,17],[413,19,387,19],[413,39,387,39],[414,4,388,4,"NO_SUCH_PROVIDER"],[414,20,388,20],[414,22,388,22],[414,45,388,45],[415,4,389,4,"OPERATION_NOT_ALLOWED"],[415,25,389,25],[415,27,389,27],[415,55,389,55],[416,4,390,4,"OPERATION_NOT_SUPPORTED"],[416,27,390,27],[416,29,390,29],[416,79,390,79],[417,4,391,4,"POPUP_BLOCKED"],[417,17,391,17],[417,19,391,19],[417,39,391,39],[418,4,392,4,"POPUP_CLOSED_BY_USER"],[418,24,392,24],[418,26,392,26],[418,53,392,53],[419,4,393,4,"PROVIDER_ALREADY_LINKED"],[419,27,393,27],[419,29,393,29],[419,59,393,59],[420,4,394,4,"QUOTA_EXCEEDED"],[420,18,394,18],[420,20,394,20],[420,41,394,41],[421,4,395,4,"REDIRECT_CANCELLED_BY_USER"],[421,30,395,30],[421,32,395,32],[421,65,395,65],[422,4,396,4,"REDIRECT_OPERATION_PENDING"],[422,30,396,30],[422,32,396,32],[422,65,396,65],[423,4,397,4,"REJECTED_CREDENTIAL"],[423,23,397,23],[423,25,397,25],[423,51,397,51],[424,4,398,4,"SECOND_FACTOR_ALREADY_ENROLLED"],[424,34,398,34],[424,36,398,36],[424,71,398,71],[425,4,399,4,"SECOND_FACTOR_LIMIT_EXCEEDED"],[425,32,399,32],[425,34,399,34],[425,77,399,77],[426,4,400,4,"TENANT_ID_MISMATCH"],[426,22,400,22],[426,24,400,24],[426,49,400,49],[427,4,401,4,"TIMEOUT"],[427,11,401,11],[427,13,401,13],[427,27,401,27],[428,4,402,4,"TOKEN_EXPIRED"],[428,17,402,17],[428,19,402,19],[428,44,402,44],[429,4,403,4,"TOO_MANY_ATTEMPTS_TRY_LATER"],[429,31,403,31],[429,33,403,33],[429,57,403,57],[430,4,404,4,"UNAUTHORIZED_DOMAIN"],[430,23,404,23],[430,25,404,25],[430,57,404,57],[431,4,405,4,"UNSUPPORTED_FIRST_FACTOR"],[431,28,405,28],[431,30,405,30],[431,61,405,61],[432,4,406,4,"UNSUPPORTED_PERSISTENCE"],[432,27,406,27],[432,29,406,29],[432,64,406,64],[433,4,407,4,"UNSUPPORTED_TENANT_OPERATION"],[433,32,407,32],[433,34,407,34],[433,69,407,69],[434,4,408,4,"UNVERIFIED_EMAIL"],[434,20,408,20],[434,22,408,22],[434,45,408,45],[435,4,409,4,"USER_CANCELLED"],[435,18,409,18],[435,20,409,20],[435,41,409,41],[436,4,410,4,"USER_DELETED"],[436,16,410,16],[436,18,410,18],[436,39,410,39],[437,4,411,4,"USER_DISABLED"],[437,17,411,17],[437,19,411,19],[437,39,411,39],[438,4,412,4,"USER_MISMATCH"],[438,17,412,17],[438,19,412,19],[438,39,412,39],[439,4,413,4,"USER_SIGNED_OUT"],[439,19,413,19],[439,21,413,21],[439,43,413,43],[440,4,414,4,"WEAK_PASSWORD"],[440,17,414,17],[440,19,414,19],[440,39,414,39],[441,4,415,4,"WEB_STORAGE_UNSUPPORTED"],[441,27,415,27],[441,29,415,29],[441,59,415,59],[442,4,416,4,"ALREADY_INITIALIZED"],[442,23,416,23],[442,25,416,25],[442,51,416,51],[443,4,417,4,"RECAPTCHA_NOT_ENABLED"],[443,25,417,25],[443,27,417,27],[443,55,417,55],[444,4,418,4,"MISSING_RECAPTCHA_TOKEN"],[444,27,418,27],[444,29,418,29],[444,59,418,59],[445,4,419,4,"INVALID_RECAPTCHA_TOKEN"],[445,27,419,27],[445,29,419,29],[445,59,419,59],[446,4,420,4,"INVALID_RECAPTCHA_ACTION"],[446,28,420,28],[446,30,420,30],[446,61,420,61],[447,4,421,4,"MISSING_CLIENT_TYPE"],[447,23,421,23],[447,25,421,25],[447,51,421,51],[448,4,422,4,"MISSING_RECAPTCHA_VERSION"],[448,29,422,29],[448,31,422,31],[448,63,422,63],[449,4,423,4,"INVALID_RECAPTCHA_VERSION"],[449,29,423,29],[449,31,423,31],[449,63,423,63],[450,4,424,4,"INVALID_REQ_TYPE"],[450,20,424,20],[450,22,424,22],[450,45,424,45],[451,4,425,4,"INVALID_HOSTING_LINK_DOMAIN"],[451,31,425,31],[451,33,425,33],[452,2,426,0],[452,3,426,1],[454,2,428,0],[455,0,429,0],[456,0,430,0],[457,0,431,0],[458,0,432,0],[459,0,433,0],[460,0,434,0],[461,0,435,0],[462,0,436,0],[463,0,437,0],[464,0,438,0],[465,0,439,0],[466,0,440,0],[467,0,441,0],[468,0,442,0],[469,0,443,0],[470,2,444,0],[470,8,444,6,"logClient"],[470,17,444,15],[470,20,444,18],[470,24,444,22,"Logger"],[470,38,444,28],[470,39,444,29],[470,55,444,45],[470,56,444,46],[471,2,445,0],[471,11,445,9,"_logWarn"],[471,19,445,17,"_logWarn"],[471,20,445,18,"msg"],[471,23,445,21],[471,25,445,23],[471,28,445,26,"args"],[471,32,445,30],[471,34,445,32],[472,4,446,4],[472,8,446,8,"logClient"],[472,17,446,17],[472,18,446,18,"logLevel"],[472,26,446,26],[472,30,446,30,"LogLevel"],[472,46,446,38],[472,47,446,39,"WARN"],[472,51,446,43],[472,53,446,45],[473,6,447,8,"logClient"],[473,15,447,17],[473,16,447,18,"warn"],[473,20,447,22],[473,21,447,23],[473,30,447,32,"SDK_VERSION"],[473,46,447,43],[473,52,447,49,"msg"],[473,55,447,52],[473,57,447,54],[473,59,447,56],[473,62,447,59,"args"],[473,66,447,63],[473,67,447,64],[474,4,448,4],[475,2,449,0],[476,2,450,0],[476,11,450,9,"_logError"],[476,20,450,18,"_logError"],[476,21,450,19,"msg"],[476,24,450,22],[476,26,450,24],[476,29,450,27,"args"],[476,33,450,31],[476,35,450,33],[477,4,451,4],[477,8,451,8,"logClient"],[477,17,451,17],[477,18,451,18,"logLevel"],[477,26,451,26],[477,30,451,30,"LogLevel"],[477,46,451,38],[477,47,451,39,"ERROR"],[477,52,451,44],[477,54,451,46],[478,6,452,8,"logClient"],[478,15,452,17],[478,16,452,18,"error"],[478,21,452,23],[478,22,452,24],[478,31,452,33,"SDK_VERSION"],[478,47,452,44],[478,53,452,50,"msg"],[478,56,452,53],[478,58,452,55],[478,60,452,57],[478,63,452,60,"args"],[478,67,452,64],[478,68,452,65],[479,4,453,4],[480,2,454,0],[482,2,456,0],[483,0,457,0],[484,0,458,0],[485,0,459,0],[486,0,460,0],[487,0,461,0],[488,0,462,0],[489,0,463,0],[490,0,464,0],[491,0,465,0],[492,0,466,0],[493,0,467,0],[494,0,468,0],[495,0,469,0],[496,0,470,0],[497,0,471,0],[498,2,472,0],[498,11,472,9,"_fail"],[498,16,472,14,"_fail"],[498,17,472,15,"authOrCode"],[498,27,472,25],[498,29,472,27],[498,32,472,30,"rest"],[498,36,472,34],[498,38,472,36],[499,4,473,4],[499,10,473,10,"createErrorInternal"],[499,29,473,29],[499,30,473,30,"authOrCode"],[499,40,473,40],[499,42,473,42],[499,45,473,45,"rest"],[499,49,473,49],[499,50,473,50],[500,2,474,0],[501,2,475,0],[501,11,475,9,"_createError"],[501,23,475,21,"_createError"],[501,24,475,22,"authOrCode"],[501,34,475,32],[501,36,475,34],[501,39,475,37,"rest"],[501,43,475,41],[501,45,475,43],[502,4,476,4],[502,11,476,11,"createErrorInternal"],[502,30,476,30],[502,31,476,31,"authOrCode"],[502,41,476,41],[502,43,476,43],[502,46,476,46,"rest"],[502,50,476,50],[502,51,476,51],[503,2,477,0],[504,2,478,0],[504,11,478,9,"_errorWithCustomMessage"],[504,34,478,32,"_errorWithCustomMessage"],[504,35,478,33,"auth"],[504,39,478,37],[504,41,478,39,"code"],[504,45,478,43],[504,47,478,45,"message"],[504,54,478,52],[504,56,478,54],[505,4,479,4],[505,10,479,10,"errorMap"],[505,18,479,18],[505,21,479,21],[506,6,480,8],[506,9,480,11,"prodErrorMap"],[506,21,480,23],[506,22,480,24],[506,23,480,25],[507,6,481,8],[507,7,481,9,"code"],[507,11,481,13],[507,14,481,16,"message"],[508,4,482,4],[508,5,482,5],[509,4,483,4],[509,10,483,10,"factory"],[509,17,483,17],[509,20,483,20],[509,24,483,24,"ErrorFactory"],[509,42,483,36],[509,43,483,37],[509,49,483,43],[509,51,483,45],[509,61,483,55],[509,63,483,57,"errorMap"],[509,71,483,65],[509,72,483,66],[510,4,484,4],[510,11,484,11,"factory"],[510,18,484,18],[510,19,484,19,"create"],[510,25,484,25],[510,26,484,26,"code"],[510,30,484,30],[510,32,484,32],[511,6,485,8,"appName"],[511,13,485,15],[511,15,485,17,"auth"],[511,19,485,21],[511,20,485,22,"name"],[512,4,486,4],[512,5,486,5],[512,6,486,6],[513,2,487,0],[514,2,488,0],[514,11,488,9,"_serverAppCurrentUserOperationNotSupportedError"],[514,58,488,56,"_serverAppCurrentUserOperationNotSupportedError"],[514,59,488,57,"auth"],[514,63,488,61],[514,65,488,63],[515,4,489,4],[515,11,489,11,"_errorWithCustomMessage"],[515,34,489,34],[515,35,489,35,"auth"],[515,39,489,39],[515,41,489,41],[515,86,489,86],[515,87,489,87],[515,132,489,132],[515,228,489,228],[515,229,489,229],[516,2,490,0],[517,2,491,0],[517,11,491,9,"createErrorInternal"],[517,30,491,28,"createErrorInternal"],[517,31,491,29,"authOrCode"],[517,41,491,39],[517,43,491,41],[517,46,491,44,"rest"],[517,50,491,48],[517,52,491,50],[518,4,492,4],[518,8,492,8],[518,15,492,15,"authOrCode"],[518,25,492,25],[518,30,492,30],[518,38,492,38],[518,40,492,40],[519,6,493,8],[519,12,493,14,"code"],[519,16,493,18],[519,19,493,21,"rest"],[519,23,493,25],[519,24,493,26],[519,25,493,27],[519,26,493,28],[520,6,494,8],[520,12,494,14,"fullParams"],[520,22,494,24],[520,25,494,27],[520,26,494,28],[520,29,494,31,"rest"],[520,33,494,35],[520,34,494,36,"slice"],[520,39,494,41],[520,40,494,42],[520,41,494,43],[520,42,494,44],[520,43,494,45],[521,6,495,8],[521,10,495,12,"fullParams"],[521,20,495,22],[521,21,495,23],[521,22,495,24],[521,23,495,25],[521,25,495,27],[522,8,496,12,"fullParams"],[522,18,496,22],[522,19,496,23],[522,20,496,24],[522,21,496,25],[522,22,496,26,"appName"],[522,29,496,33],[522,32,496,36,"authOrCode"],[522,42,496,46],[522,43,496,47,"name"],[522,47,496,51],[523,6,497,8],[524,6,498,8],[524,13,498,15,"authOrCode"],[524,23,498,25],[524,24,498,26,"_errorFactory"],[524,37,498,39],[524,38,498,40,"create"],[524,44,498,46],[524,45,498,47,"code"],[524,49,498,51],[524,51,498,53],[524,54,498,56,"fullParams"],[524,64,498,66],[524,65,498,67],[525,4,499,4],[526,4,500,4],[526,11,500,11,"_DEFAULT_AUTH_ERROR_FACTORY"],[526,38,500,38],[526,39,500,39,"create"],[526,45,500,45],[526,46,500,46,"authOrCode"],[526,56,500,56],[526,58,500,58],[526,61,500,61,"rest"],[526,65,500,65],[526,66,500,66],[527,2,501,0],[528,2,502,0],[528,11,502,9,"_assert"],[528,18,502,16,"_assert"],[528,19,502,17,"assertion"],[528,28,502,26],[528,30,502,28,"authOrCode"],[528,40,502,38],[528,42,502,40],[528,45,502,43,"rest"],[528,49,502,47],[528,51,502,49],[529,4,503,4],[529,8,503,8],[529,9,503,9,"assertion"],[529,18,503,18],[529,20,503,20],[530,6,504,8],[530,12,504,14,"createErrorInternal"],[530,31,504,33],[530,32,504,34,"authOrCode"],[530,42,504,44],[530,44,504,46],[530,47,504,49,"rest"],[530,51,504,53],[530,52,504,54],[531,4,505,4],[532,2,506,0],[533,2,507,0],[534,0,508,0],[535,0,509,0],[536,0,510,0],[537,0,511,0],[538,0,512,0],[539,2,513,0],[539,11,513,9,"debugFail"],[539,20,513,18,"debugFail"],[539,21,513,19,"failure"],[539,28,513,26],[539,30,513,28],[540,4,514,4],[541,4,515,4],[542,4,516,4],[542,10,516,10,"message"],[542,17,516,17],[542,20,516,20],[542,49,516,49],[542,52,516,52,"failure"],[542,59,516,59],[543,4,517,4,"_logError"],[543,13,517,13],[543,14,517,14,"message"],[543,21,517,21],[543,22,517,22],[544,4,518,4],[545,4,519,4],[546,4,520,4],[547,4,521,4],[547,10,521,10],[547,14,521,14,"Error"],[547,19,521,19],[547,20,521,20,"message"],[547,27,521,27],[547,28,521,28],[548,2,522,0],[549,2,523,0],[550,0,524,0],[551,0,525,0],[552,0,526,0],[553,0,527,0],[554,0,528,0],[555,0,529,0],[556,2,530,0],[556,11,530,9,"debugAssert"],[556,22,530,20,"debugAssert"],[556,23,530,21,"assertion"],[556,32,530,30],[556,34,530,32,"message"],[556,41,530,39],[556,43,530,41],[557,4,531,4],[557,8,531,8],[557,9,531,9,"assertion"],[557,18,531,18],[557,20,531,20],[558,6,532,8,"debugFail"],[558,15,532,17],[558,16,532,18,"message"],[558,23,532,25],[558,24,532,26],[559,4,533,4],[560,2,534,0],[562,2,536,0],[563,0,537,0],[564,0,538,0],[565,0,539,0],[566,0,540,0],[567,0,541,0],[568,0,542,0],[569,0,543,0],[570,0,544,0],[571,0,545,0],[572,0,546,0],[573,0,547,0],[574,0,548,0],[575,0,549,0],[576,0,550,0],[577,0,551,0],[578,2,552,0],[578,11,552,9,"_getCurrentUrl"],[578,25,552,23,"_getCurrentUrl"],[578,26,552,23],[578,28,552,26],[579,4,553,4],[579,11,553,12],[579,18,553,19,"self"],[579,22,553,23],[579,27,553,28],[579,38,553,39],[579,42,553,43,"self"],[579,46,553,47],[579,47,553,48,"location"],[579,55,553,56],[579,57,553,58,"href"],[579,61,553,62],[579,65,553,67],[579,67,553,69],[580,2,554,0],[581,2,555,0],[581,11,555,9,"_isHttpOrHttps"],[581,25,555,23,"_isHttpOrHttps"],[581,26,555,23],[581,28,555,26],[582,4,556,4],[582,11,556,11,"_getCurrentScheme"],[582,28,556,28],[582,29,556,29],[582,30,556,30],[582,35,556,35],[582,42,556,42],[582,46,556,46,"_getCurrentScheme"],[582,63,556,63],[582,64,556,64],[582,65,556,65],[582,70,556,70],[582,78,556,78],[583,2,557,0],[584,2,558,0],[584,11,558,9,"_getCurrentScheme"],[584,28,558,26,"_getCurrentScheme"],[584,29,558,26],[584,31,558,29],[585,4,559,4],[585,11,559,12],[585,18,559,19,"self"],[585,22,559,23],[585,27,559,28],[585,38,559,39],[585,42,559,43,"self"],[585,46,559,47],[585,47,559,48,"location"],[585,55,559,56],[585,57,559,58,"protocol"],[585,65,559,66],[585,69,559,71],[585,73,559,75],[586,2,560,0],[588,2,562,0],[589,0,563,0],[590,0,564,0],[591,0,565,0],[592,0,566,0],[593,0,567,0],[594,0,568,0],[595,0,569,0],[596,0,570,0],[597,0,571,0],[598,0,572,0],[599,0,573,0],[600,0,574,0],[601,0,575,0],[602,0,576,0],[603,0,577,0],[604,2,578,0],[605,0,579,0],[606,0,580,0],[607,2,581,0],[607,11,581,9,"_isOnline"],[607,20,581,18,"_isOnline"],[607,21,581,18],[607,23,581,21],[608,4,582,4],[608,8,582,8],[608,15,582,15,"navigator"],[608,24,582,24],[608,29,582,29],[608,40,582,40],[608,44,583,8,"navigator"],[608,53,583,17],[608,57,584,8],[608,65,584,16],[608,69,584,20,"navigator"],[608,78,584,29],[608,82,585,8],[608,89,585,15,"navigator"],[608,98,585,24],[608,99,585,25,"onLine"],[608,105,585,31],[608,110,585,36],[608,119,585,45],[609,4,586,8],[610,4,587,8],[611,4,588,8],[612,4,589,8],[613,4,590,8],[614,4,591,9,"_isHttpOrHttps"],[614,18,591,23],[614,19,591,24],[614,20,591,25],[614,24,591,29],[614,28,591,29,"isBrowserExtension"],[614,52,591,47],[614,54,591,48],[614,55,591,49],[614,59,591,53],[614,71,591,65],[614,75,591,69,"navigator"],[614,84,591,78],[614,85,591,79],[614,87,591,81],[615,6,592,8],[615,13,592,15,"navigator"],[615,22,592,24],[615,23,592,25,"onLine"],[615,29,592,31],[616,4,593,4],[617,4,594,4],[618,4,595,4],[618,11,595,11],[618,15,595,15],[619,2,596,0],[620,2,597,0],[620,11,597,9,"_getUserLanguage"],[620,27,597,25,"_getUserLanguage"],[620,28,597,25],[620,30,597,28],[621,4,598,4],[621,8,598,8],[621,15,598,15,"navigator"],[621,24,598,24],[621,29,598,29],[621,40,598,40],[621,42,598,42],[622,6,599,8],[622,13,599,15],[622,17,599,19],[623,4,600,4],[624,4,601,4],[624,10,601,10,"navigatorLanguage"],[624,27,601,27],[624,30,601,30,"navigator"],[624,39,601,39],[625,4,602,4],[626,6,603,4],[627,6,604,5,"navigatorLanguage"],[627,23,604,22],[627,24,604,23,"languages"],[627,33,604,32],[627,37,604,36,"navigatorLanguage"],[627,54,604,53],[627,55,604,54,"languages"],[627,64,604,63],[627,65,604,64],[627,66,604,65],[627,67,604,66],[628,6,605,8],[629,6,606,8],[630,6,607,8,"navigatorLanguage"],[630,23,607,25],[630,24,607,26,"language"],[630,32,607,34],[631,6,608,8],[632,6,609,8],[633,4,609,12],[634,2,610,0],[636,2,612,0],[637,0,613,0],[638,0,614,0],[639,0,615,0],[640,0,616,0],[641,0,617,0],[642,0,618,0],[643,0,619,0],[644,0,620,0],[645,0,621,0],[646,0,622,0],[647,0,623,0],[648,0,624,0],[649,0,625,0],[650,0,626,0],[651,0,627,0],[652,2,628,0],[653,0,629,0],[654,0,630,0],[655,0,631,0],[656,0,632,0],[657,2,633,0],[657,8,633,6,"Delay"],[657,13,633,11],[657,14,633,12],[658,4,634,4,"constructor"],[658,15,634,15,"constructor"],[658,16,634,16,"shortDelay"],[658,26,634,26],[658,28,634,28,"longDelay"],[658,37,634,37],[658,39,634,39],[659,6,635,8],[659,10,635,12],[659,11,635,13,"shortDelay"],[659,21,635,23],[659,24,635,26,"shortDelay"],[659,34,635,36],[660,6,636,8],[660,10,636,12],[660,11,636,13,"longDelay"],[660,20,636,22],[660,23,636,25,"longDelay"],[660,32,636,34],[661,6,637,8],[662,6,638,8,"debugAssert"],[662,17,638,19],[662,18,638,20,"longDelay"],[662,27,638,29],[662,30,638,32,"shortDelay"],[662,40,638,42],[662,42,638,44],[662,87,638,89],[662,88,638,90],[663,6,639,8],[663,10,639,12],[663,11,639,13,"isMobile"],[663,19,639,21],[663,22,639,24],[663,26,639,24,"isMobileCordova"],[663,47,639,39],[663,49,639,40],[663,50,639,41],[663,54,639,45],[663,58,639,45,"isReactNative"],[663,77,639,58],[663,79,639,59],[663,80,639,60],[664,4,640,4],[665,4,641,4,"get"],[665,7,641,7,"get"],[665,8,641,7],[665,10,641,10],[666,6,642,8],[666,10,642,12],[666,11,642,13,"_isOnline"],[666,20,642,22],[666,21,642,23],[666,22,642,24],[666,24,642,26],[667,8,643,12],[668,8,644,12],[668,15,644,19,"Math"],[668,19,644,23],[668,20,644,24,"min"],[668,23,644,27],[668,24,644,28],[668,28,644,32],[668,29,644,33],[668,53,644,57],[668,57,644,61],[668,58,644,62,"shortDelay"],[668,68,644,72],[668,69,644,73],[669,6,645,8],[670,6,646,8],[671,6,647,8],[672,6,648,8],[673,6,649,8],[674,6,650,8],[674,13,650,15],[674,17,650,19],[674,18,650,20,"isMobile"],[674,26,650,28],[674,29,650,31],[674,33,650,35],[674,34,650,36,"longDelay"],[674,43,650,45],[674,46,650,48],[674,50,650,52],[674,51,650,53,"shortDelay"],[674,61,650,63],[675,4,651,4],[676,2,652,0],[678,2,654,0],[679,0,655,0],[680,0,656,0],[681,0,657,0],[682,0,658,0],[683,0,659,0],[684,0,660,0],[685,0,661,0],[686,0,662,0],[687,0,663,0],[688,0,664,0],[689,0,665,0],[690,0,666,0],[691,0,667,0],[692,0,668,0],[693,0,669,0],[694,2,670,0],[694,11,670,9,"_emulatorUrl"],[694,23,670,21,"_emulatorUrl"],[694,24,670,22,"config"],[694,30,670,28],[694,32,670,30,"path"],[694,36,670,34],[694,38,670,36],[695,4,671,4,"debugAssert"],[695,15,671,15],[695,16,671,16,"config"],[695,22,671,22],[695,23,671,23,"emulator"],[695,31,671,31],[695,33,671,33],[695,69,671,69],[695,70,671,70],[696,4,672,4],[696,10,672,10],[697,6,672,12,"url"],[698,4,672,16],[698,5,672,17],[698,8,672,20,"config"],[698,14,672,26],[698,15,672,27,"emulator"],[698,23,672,35],[699,4,673,4],[699,8,673,8],[699,9,673,9,"path"],[699,13,673,13],[699,15,673,15],[700,6,674,8],[700,13,674,15,"url"],[700,16,674,18],[701,4,675,4],[702,4,676,4],[702,11,676,11],[702,14,676,14,"url"],[702,17,676,17],[702,20,676,20,"path"],[702,24,676,24],[702,25,676,25,"startsWith"],[702,35,676,35],[702,36,676,36],[702,39,676,39],[702,40,676,40],[702,43,676,43,"path"],[702,47,676,47],[702,48,676,48,"slice"],[702,53,676,53],[702,54,676,54],[702,55,676,55],[702,56,676,56],[702,59,676,59,"path"],[702,63,676,63],[702,65,676,65],[703,2,677,0],[705,2,679,0],[706,0,680,0],[707,0,681,0],[708,0,682,0],[709,0,683,0],[710,0,684,0],[711,0,685,0],[712,0,686,0],[713,0,687,0],[714,0,688,0],[715,0,689,0],[716,0,690,0],[717,0,691,0],[718,0,692,0],[719,0,693,0],[720,0,694,0],[721,2,695,0],[721,8,695,6,"FetchProvider"],[721,21,695,19],[721,22,695,20],[722,4,696,4],[722,11,696,11,"initialize"],[722,21,696,21,"initialize"],[722,22,696,22,"fetchImpl"],[722,31,696,31],[722,33,696,33,"headersImpl"],[722,44,696,44],[722,46,696,46,"responseImpl"],[722,58,696,58],[722,60,696,60],[723,6,697,8],[723,10,697,12],[723,11,697,13,"fetchImpl"],[723,20,697,22],[723,23,697,25,"fetchImpl"],[723,32,697,34],[724,6,698,8],[724,10,698,12,"headersImpl"],[724,21,698,23],[724,23,698,25],[725,8,699,12],[725,12,699,16],[725,13,699,17,"headersImpl"],[725,24,699,28],[725,27,699,31,"headersImpl"],[725,38,699,42],[726,6,700,8],[727,6,701,8],[727,10,701,12,"responseImpl"],[727,22,701,24],[727,24,701,26],[728,8,702,12],[728,12,702,16],[728,13,702,17,"responseImpl"],[728,25,702,29],[728,28,702,32,"responseImpl"],[728,40,702,44],[729,6,703,8],[730,4,704,4],[731,4,705,4],[731,11,705,11,"fetch"],[731,16,705,16,"fetch"],[731,17,705,16],[731,19,705,19],[732,6,706,8],[732,10,706,12],[732,14,706,16],[732,15,706,17,"fetchImpl"],[732,24,706,26],[732,26,706,28],[733,8,707,12],[733,15,707,19],[733,19,707,23],[733,20,707,24,"fetchImpl"],[733,29,707,33],[734,6,708,8],[735,6,709,8],[735,10,709,12],[735,17,709,19,"self"],[735,21,709,23],[735,26,709,28],[735,37,709,39],[735,41,709,43],[735,48,709,50],[735,52,709,54,"self"],[735,56,709,58],[735,58,709,60],[736,8,710,12],[736,15,710,19,"self"],[736,19,710,23],[736,20,710,24,"fetch"],[736,25,710,29],[737,6,711,8],[738,6,712,8],[738,10,712,12],[738,17,712,19,"globalThis"],[738,27,712,29],[738,32,712,34],[738,43,712,45],[738,47,712,49,"globalThis"],[738,57,712,59],[738,58,712,60,"fetch"],[738,63,712,65],[738,65,712,67],[739,8,713,12],[739,15,713,19,"globalThis"],[739,25,713,29],[739,26,713,30,"fetch"],[739,31,713,35],[740,6,714,8],[741,6,715,8],[741,10,715,12],[741,17,715,19,"fetch"],[741,22,715,24],[741,27,715,29],[741,38,715,40],[741,40,715,42],[742,8,716,12],[742,15,716,19,"fetch"],[742,20,716,24],[743,6,717,8],[744,6,718,8,"debugFail"],[744,15,718,17],[744,16,718,18],[744,129,718,131],[744,130,718,132],[745,4,719,4],[746,4,720,4],[746,11,720,11,"headers"],[746,18,720,18,"headers"],[746,19,720,18],[746,21,720,21],[747,6,721,8],[747,10,721,12],[747,14,721,16],[747,15,721,17,"headersImpl"],[747,26,721,28],[747,28,721,30],[748,8,722,12],[748,15,722,19],[748,19,722,23],[748,20,722,24,"headersImpl"],[748,31,722,35],[749,6,723,8],[750,6,724,8],[750,10,724,12],[750,17,724,19,"self"],[750,21,724,23],[750,26,724,28],[750,37,724,39],[750,41,724,43],[750,50,724,52],[750,54,724,56,"self"],[750,58,724,60],[750,60,724,62],[751,8,725,12],[751,15,725,19,"self"],[751,19,725,23],[751,20,725,24,"Headers"],[751,27,725,31],[752,6,726,8],[753,6,727,8],[753,10,727,12],[753,17,727,19,"globalThis"],[753,27,727,29],[753,32,727,34],[753,43,727,45],[753,47,727,49,"globalThis"],[753,57,727,59],[753,58,727,60,"Headers"],[753,65,727,67],[753,67,727,69],[754,8,728,12],[754,15,728,19,"globalThis"],[754,25,728,29],[754,26,728,30,"Headers"],[754,33,728,37],[755,6,729,8],[756,6,730,8],[756,10,730,12],[756,17,730,19,"Headers"],[756,24,730,26],[756,29,730,31],[756,40,730,42],[756,42,730,44],[757,8,731,12],[757,15,731,19,"Headers"],[757,22,731,26],[758,6,732,8],[759,6,733,8,"debugFail"],[759,15,733,17],[759,16,733,18],[759,131,733,133],[759,132,733,134],[760,4,734,4],[761,4,735,4],[761,11,735,11,"response"],[761,19,735,19,"response"],[761,20,735,19],[761,22,735,22],[762,6,736,8],[762,10,736,12],[762,14,736,16],[762,15,736,17,"responseImpl"],[762,27,736,29],[762,29,736,31],[763,8,737,12],[763,15,737,19],[763,19,737,23],[763,20,737,24,"responseImpl"],[763,32,737,36],[764,6,738,8],[765,6,739,8],[765,10,739,12],[765,17,739,19,"self"],[765,21,739,23],[765,26,739,28],[765,37,739,39],[765,41,739,43],[765,51,739,53],[765,55,739,57,"self"],[765,59,739,61],[765,61,739,63],[766,8,740,12],[766,15,740,19,"self"],[766,19,740,23],[766,20,740,24,"Response"],[766,28,740,32],[767,6,741,8],[768,6,742,8],[768,10,742,12],[768,17,742,19,"globalThis"],[768,27,742,29],[768,32,742,34],[768,43,742,45],[768,47,742,49,"globalThis"],[768,57,742,59],[768,58,742,60,"Response"],[768,66,742,68],[768,68,742,70],[769,8,743,12],[769,15,743,19,"globalThis"],[769,25,743,29],[769,26,743,30,"Response"],[769,34,743,38],[770,6,744,8],[771,6,745,8],[771,10,745,12],[771,17,745,19,"Response"],[771,25,745,27],[771,30,745,32],[771,41,745,43],[771,43,745,45],[772,8,746,12],[772,15,746,19,"Response"],[772,23,746,27],[773,6,747,8],[774,6,748,8,"debugFail"],[774,15,748,17],[774,16,748,18],[774,132,748,134],[774,133,748,135],[775,4,749,4],[776,2,750,0],[778,2,752,0],[779,0,753,0],[780,0,754,0],[781,0,755,0],[782,0,756,0],[783,0,757,0],[784,0,758,0],[785,0,759,0],[786,0,760,0],[787,0,761,0],[788,0,762,0],[789,0,763,0],[790,0,764,0],[791,0,765,0],[792,0,766,0],[793,0,767,0],[794,2,768,0],[795,0,769,0],[796,0,770,0],[797,2,768,0,"exports"],[797,9,768,0],[797,10,768,0,"aT"],[797,12,768,0],[797,15,768,0,"FetchProvider"],[797,28,768,0],[798,2,771,0],[798,8,771,6,"SERVER_ERROR_MAP"],[798,24,771,22],[798,27,771,25],[799,4,772,4],[800,4,773,4],[800,5,773,5],[800,26,773,26],[800,27,773,27],[800,67,773,67],[800,90,773,90],[800,91,773,91],[802,4,774,4],[803,4,775,4],[803,5,775,5],[803,27,775,27],[803,28,775,28],[803,69,775,69],[803,85,775,85],[803,86,775,86],[805,4,776,4],[806,4,777,4],[806,5,777,5],[806,25,777,25],[806,26,777,26],[806,65,777,65],[806,80,777,80],[806,81,777,81],[808,4,778,4],[809,4,779,4],[809,5,779,5],[809,27,779,27],[809,28,779,28],[809,69,779,69],[809,85,779,85],[809,86,779,86],[811,4,780,4],[812,4,781,4],[812,5,781,5],[812,23,781,23],[812,24,781,24],[812,61,781,61],[812,77,781,77],[812,78,781,78],[814,4,782,4],[815,4,783,4],[815,5,783,5],[815,23,783,23],[815,24,783,24],[815,61,783,61],[815,79,783,79],[815,80,783,80],[817,4,784,4],[818,4,785,4],[819,4,786,4],[819,5,786,5],[819,32,786,32],[819,33,786,33],[819,79,786,79],[819,99,786,99],[819,100,786,100],[821,4,787,4],[822,4,788,4],[822,5,788,5],[822,19,788,19],[822,20,788,20],[822,53,788,53],[822,75,788,75],[822,76,788,76],[823,4,789,4],[823,5,789,5],[823,30,789,30],[823,31,789,31],[823,75,789,75],[823,98,789,98],[823,99,789,99],[825,4,790,4],[826,4,791,4],[826,5,791,5],[826,27,791,27],[826,28,791,28],[826,69,791,69],[826,89,791,89],[826,90,791,90],[827,4,792,4],[827,5,792,5],[827,28,792,28],[827,29,792,29],[827,71,792,71],[827,91,792,91],[827,92,792,92],[828,4,793,4],[828,5,793,5],[828,39,793,39],[828,40,793,40],[828,93,793,93],[828,120,793,120],[828,121,793,121],[830,4,794,4],[831,4,795,4],[831,5,795,5],[831,23,795,23],[831,24,795,24],[831,61,795,61],[831,77,795,77],[831,78,795,78],[833,4,796,4],[834,4,797,4],[834,5,797,5],[834,22,797,22],[834,23,797,23],[834,59,797,59],[834,75,797,75],[834,76,797,76],[835,4,798,4],[835,5,798,5],[835,34,798,34],[835,35,798,35],[835,83,798,83],[835,102,798,102],[835,103,798,103],[836,4,799,4],[836,5,799,5],[836,23,799,23],[836,24,799,24],[836,61,799,61],[836,82,799,82],[836,83,799,83],[837,4,800,4],[837,5,800,5],[837,23,800,23],[837,24,800,24],[837,61,800,61],[837,82,800,82],[837,83,800,83],[839,4,801,4],[840,4,802,4],[840,5,802,5],[840,23,802,23],[840,24,802,24],[840,61,802,61],[840,77,802,77],[840,78,802,78],[842,4,803,4],[843,4,804,4],[843,5,804,5],[843,37,804,37],[843,38,804,38],[843,89,804,89],[843,112,804,112],[843,113,804,113],[844,4,805,4],[844,5,805,5],[844,23,805,23],[844,24,805,24],[844,61,805,61],[844,81,805,81],[844,82,805,82],[845,4,806,4],[845,5,806,5],[845,20,806,20],[845,21,806,21],[845,55,806,55],[845,75,806,75],[845,76,806,76],[846,4,807,4],[846,5,807,5],[846,21,807,21],[846,22,807,22],[846,57,807,57],[846,77,807,77],[846,78,807,78],[848,4,808,4],[849,4,809,4],[849,5,809,5],[849,34,809,34],[849,35,809,35],[849,83,809,83],[849,102,809,102],[849,103,809,103],[850,4,810,4],[850,5,810,5],[850,42,810,42],[850,43,810,43],[850,99,810,99],[850,136,810,136],[850,137,810,137],[852,4,811,4],[853,4,812,4],[853,5,812,5],[853,19,812,19],[853,20,812,20],[853,53,812,53],[853,80,812,80],[853,81,812,81],[854,4,813,4],[854,5,813,5],[854,27,813,27],[854,28,813,28],[854,69,813,69],[854,94,813,94],[854,95,813,95],[855,4,814,4],[855,5,814,5],[855,30,814,30],[855,31,814,31],[855,75,814,75],[855,95,814,95],[855,96,814,96],[856,4,815,4],[856,5,815,5],[856,27,815,27],[856,28,815,28],[856,69,815,69],[856,94,815,94],[856,95,815,95],[857,4,816,4],[857,5,816,5],[857,22,816,22],[857,23,816,23],[857,59,816,59],[857,73,816,73],[857,74,816,74],[859,4,817,4],[860,4,818,4],[861,4,819,4],[862,4,820,4],[862,5,820,5],[862,35,820,35],[862,36,820,36],[862,85,820,85],[862,111,820,111],[862,112,820,112],[863,4,821,4],[863,5,821,5],[863,26,821,26],[863,27,821,27],[863,67,821,67],[863,94,821,94],[863,95,821,95],[865,4,822,4],[866,4,823,4],[866,5,823,5],[866,30,823,30],[866,31,823,31],[866,75,823,75],[866,100,823,100],[866,101,823,101],[868,4,824,4],[869,4,825,4],[869,5,825,5],[869,27,825,27],[869,28,825,28],[869,69,825,69],[869,97,825,97],[869,98,825,98],[871,4,826,4],[872,4,827,4],[872,5,827,5],[872,37,827,37],[872,38,827,38],[872,89,827,89],[872,119,827,119],[872,120,827,120],[873,4,828,4],[873,5,828,5],[873,31,828,31],[873,32,828,32],[873,77,828,77],[873,106,828,106],[873,107,828,107],[874,4,829,4],[874,5,829,5],[874,32,829,32],[874,33,829,33],[874,79,829,79],[874,106,829,106],[874,107,829,107],[875,4,830,4],[875,5,830,5],[875,37,830,37],[875,38,830,38],[875,89,830,89],[875,119,830,119],[875,120,830,120],[876,4,831,4],[876,5,831,5],[876,27,831,27],[876,28,831,28],[876,69,831,69],[876,99,831,99],[876,100,831,100],[877,4,832,4],[877,5,832,5],[877,35,832,35],[877,36,832,36],[877,85,832,85],[877,123,832,123],[877,124,832,124],[879,4,833,4],[880,4,834,4],[880,5,834,5],[880,39,834,39],[880,40,834,40],[880,93,834,93],[880,109,834,109],[880,110,834,110],[882,4,835,4],[883,4,836,4],[883,5,836,5],[883,28,836,28],[883,29,836,29],[883,71,836,71],[883,94,836,94],[883,95,836,95],[884,4,837,4],[884,5,837,5],[884,30,837,30],[884,31,837,31],[884,75,837,75],[884,100,837,100],[884,101,837,101],[885,4,838,4],[885,5,838,5],[885,30,838,30],[885,31,838,31],[885,75,838,75],[885,100,838,100],[885,101,838,101],[886,4,839,4],[886,5,839,5],[886,31,839,31],[886,32,839,32],[886,77,839,77],[886,103,839,103],[886,104,839,104],[887,4,840,4],[887,5,840,5],[887,26,840,26],[887,27,840,27],[887,67,840,67],[887,88,840,88],[887,89,840,89],[888,4,841,4],[888,5,841,5],[888,32,841,32],[888,33,841,33],[888,79,841,79],[888,106,841,106],[888,107,841,107],[889,4,842,4],[889,5,842,5],[889,32,842,32],[889,33,842,33],[889,79,842,79],[889,106,842,106],[889,107,842,107],[890,4,843,4],[890,5,843,5],[890,23,843,23],[890,24,843,24],[890,61,843,61],[890,79,843,79],[890,80,843,80],[891,2,844,0],[891,3,844,1],[893,2,846,0],[894,0,847,0],[895,0,848,0],[896,0,849,0],[897,0,850,0],[898,0,851,0],[899,0,852,0],[900,0,853,0],[901,0,854,0],[902,0,855,0],[903,0,856,0],[904,0,857,0],[905,0,858,0],[906,0,859,0],[907,0,860,0],[908,0,861,0],[909,2,862,0],[909,8,862,6,"CookieAuthProxiedEndpoints"],[909,34,862,32],[909,37,862,35],[909,38,863,4],[909,74,863,40],[909,75,863,41],[909,117,864,4],[909,151,864,38],[909,152,864,39],[909,192,865,4],[909,220,865,32],[909,221,865,33],[909,254,866,4],[909,287,866,37],[909,288,866,38],[909,326,867,4],[909,362,867,40],[909,363,867,41],[909,405,868,4],[909,416,868,15],[909,417,868,16],[909,438,869,1],[910,2,870,0],[910,8,870,6,"DEFAULT_API_TIMEOUT_MS"],[910,30,870,28],[910,33,870,31],[910,37,870,35,"Delay"],[910,42,870,40],[910,43,870,41],[910,48,870,46],[910,50,870,48],[910,55,870,53],[910,56,870,54],[911,2,871,0],[911,11,871,9,"_addTidIfNecessary"],[911,29,871,27,"_addTidIfNecessary"],[911,30,871,28,"auth"],[911,34,871,32],[911,36,871,34,"request"],[911,43,871,41],[911,45,871,43],[912,4,872,4],[912,8,872,8,"auth"],[912,12,872,12],[912,13,872,13,"tenantId"],[912,21,872,21],[912,25,872,25],[912,26,872,26,"request"],[912,33,872,33],[912,34,872,34,"tenantId"],[912,42,872,42],[912,44,872,44],[913,6,873,8],[913,13,873,15],[914,8,874,12],[914,11,874,15,"request"],[914,18,874,22],[915,8,875,12,"tenantId"],[915,16,875,20],[915,18,875,22,"auth"],[915,22,875,26],[915,23,875,27,"tenantId"],[916,6,876,8],[916,7,876,9],[917,4,877,4],[918,4,878,4],[918,11,878,11,"request"],[918,18,878,18],[919,2,879,0],[920,2,880,0],[920,17,880,15,"_performApiRequest"],[920,35,880,33,"_performApiRequest"],[920,36,880,34,"auth"],[920,40,880,38],[920,42,880,40,"method"],[920,48,880,46],[920,50,880,48,"path"],[920,54,880,52],[920,56,880,54,"request"],[920,63,880,61],[920,65,880,63,"customErrorMap"],[920,79,880,77],[920,82,880,80],[920,83,880,81],[920,84,880,82],[920,86,880,84],[921,4,881,4],[921,11,881,11,"_performFetchWithErrorHandling"],[921,41,881,41],[921,42,881,42,"auth"],[921,46,881,46],[921,48,881,48,"customErrorMap"],[921,62,881,62],[921,64,881,64],[921,76,881,76],[922,6,882,8],[922,10,882,12,"body"],[922,14,882,16],[922,17,882,19],[922,18,882,20],[922,19,882,21],[923,6,883,8],[923,10,883,12,"params"],[923,16,883,18],[923,19,883,21],[923,20,883,22],[923,21,883,23],[924,6,884,8],[924,10,884,12,"request"],[924,17,884,19],[924,19,884,21],[925,8,885,12],[925,12,885,16,"method"],[925,18,885,22],[925,23,885,27],[925,28,885,32],[925,29,885,33],[925,51,885,55],[926,10,886,16,"params"],[926,16,886,22],[926,19,886,25,"request"],[926,26,886,32],[927,8,887,12],[927,9,887,13],[927,15,888,17],[928,10,889,16,"body"],[928,14,889,20],[928,17,889,23],[929,12,890,20,"body"],[929,16,890,24],[929,18,890,26,"JSON"],[929,22,890,30],[929,23,890,31,"stringify"],[929,32,890,40],[929,33,890,41,"request"],[929,40,890,48],[930,10,891,16],[930,11,891,17],[931,8,892,12],[932,6,893,8],[933,6,894,8],[933,12,894,14,"query"],[933,17,894,19],[933,20,894,22],[933,24,894,22,"querystring"],[933,41,894,33],[933,43,894,34],[934,8,895,12,"key"],[934,11,895,15],[934,13,895,17,"auth"],[934,17,895,21],[934,18,895,22,"config"],[934,24,895,28],[934,25,895,29,"apiKey"],[934,31,895,35],[935,8,896,12],[935,11,896,15,"params"],[936,6,897,8],[936,7,897,9],[936,8,897,10],[936,9,897,11,"slice"],[936,14,897,16],[936,15,897,17],[936,16,897,18],[936,17,897,19],[937,6,898,8],[937,12,898,14,"headers"],[937,19,898,21],[937,22,898,24],[937,28,898,30,"auth"],[937,32,898,34],[937,33,898,35,"_getAdditionalHeaders"],[937,54,898,56],[937,55,898,57],[937,56,898,58],[938,6,899,8,"headers"],[938,13,899,15],[938,14,899,16],[938,28,899,30],[938,29,899,31],[938,59,899,61],[938,62,899,64],[938,80,899,82],[939,6,900,8],[939,10,900,12,"auth"],[939,14,900,16],[939,15,900,17,"languageCode"],[939,27,900,29],[939,29,900,31],[940,8,901,12,"headers"],[940,15,901,19],[940,16,901,20],[940,35,901,39],[940,36,901,40],[940,71,901,75],[940,74,901,78,"auth"],[940,78,901,82],[940,79,901,83,"languageCode"],[940,91,901,95],[941,6,902,8],[942,6,903,8],[942,12,903,14,"fetchArgs"],[942,21,903,23],[942,24,903,26],[943,8,904,12,"method"],[943,14,904,18],[944,8,905,12,"headers"],[944,15,905,19],[945,8,906,12],[945,11,906,15,"body"],[946,6,907,8],[946,7,907,9],[947,6,908,8],[948,0,909,0],[949,0,910,0],[950,0,911,0],[951,6,912,8],[951,10,912,12],[951,11,912,13],[951,15,912,13,"isCloudflareWorker"],[951,39,912,31],[951,41,912,32],[951,42,912,33],[951,44,912,35],[952,8,913,12,"fetchArgs"],[952,17,913,21],[952,18,913,22,"referrerPolicy"],[952,32,913,36],[952,35,913,39],[952,48,913,52],[953,6,914,8],[954,6,915,8],[954,10,915,12,"auth"],[954,14,915,16],[954,15,915,17,"emulatorConfig"],[954,29,915,31],[954,33,915,35],[954,37,915,35,"isCloudWorkstation"],[954,61,915,53],[954,63,915,54,"auth"],[954,67,915,58],[954,68,915,59,"emulatorConfig"],[954,82,915,73],[954,83,915,74,"host"],[954,87,915,78],[954,88,915,79],[954,90,915,81],[955,8,916,12,"fetchArgs"],[955,17,916,21],[955,18,916,22,"credentials"],[955,29,916,33],[955,32,916,36],[955,41,916,45],[956,6,917,8],[957,6,918,8],[957,13,918,15,"FetchProvider"],[957,26,918,28],[957,27,918,29,"fetch"],[957,32,918,34],[957,33,918,35],[957,34,918,36],[957,35,918,37],[957,41,918,43,"_getFinalTarget"],[957,56,918,58],[957,57,918,59,"auth"],[957,61,918,63],[957,63,918,65,"auth"],[957,67,918,69],[957,68,918,70,"config"],[957,74,918,76],[957,75,918,77,"apiHost"],[957,82,918,84],[957,84,918,86,"path"],[957,88,918,90],[957,90,918,92,"query"],[957,95,918,97],[957,96,918,98],[957,98,918,100,"fetchArgs"],[957,107,918,109],[957,108,918,110],[958,4,919,4],[958,5,919,5],[958,6,919,6],[959,2,920,0],[960,2,921,0],[960,17,921,15,"_performFetchWithErrorHandling"],[960,47,921,45,"_performFetchWithErrorHandling"],[960,48,921,46,"auth"],[960,52,921,50],[960,54,921,52,"customErrorMap"],[960,68,921,66],[960,70,921,68,"fetchFn"],[960,77,921,75],[960,79,921,77],[961,4,922,4,"auth"],[961,8,922,8],[961,9,922,9,"_canInitEmulator"],[961,25,922,25],[961,28,922,28],[961,33,922,33],[962,4,923,4],[962,10,923,10,"errorMap"],[962,18,923,18],[962,21,923,21],[963,6,923,23],[963,9,923,26,"SERVER_ERROR_MAP"],[963,25,923,42],[964,6,923,44],[964,9,923,47,"customErrorMap"],[965,4,923,62],[965,5,923,63],[966,4,924,4],[966,8,924,8],[967,6,925,8],[967,12,925,14,"networkTimeout"],[967,26,925,28],[967,29,925,31],[967,33,925,35,"NetworkTimeout"],[967,47,925,49],[967,48,925,50,"auth"],[967,52,925,54],[967,53,925,55],[968,6,926,8],[968,12,926,14,"response"],[968,20,926,22],[968,23,926,25],[968,29,926,31,"Promise"],[968,36,926,38],[968,37,926,39,"race"],[968,41,926,43],[968,42,926,44],[968,43,927,12,"fetchFn"],[968,50,927,19],[968,51,927,20],[968,52,927,21],[968,54,928,12,"networkTimeout"],[968,68,928,26],[968,69,928,27,"promise"],[968,76,928,34],[968,77,929,9],[968,78,929,10],[969,6,930,8],[970,6,931,8],[971,6,932,8,"networkTimeout"],[971,20,932,22],[971,21,932,23,"clearNetworkTimeout"],[971,40,932,42],[971,41,932,43],[971,42,932,44],[972,6,933,8],[972,12,933,14,"json"],[972,16,933,18],[972,19,933,21],[972,25,933,27,"response"],[972,33,933,35],[972,34,933,36,"json"],[972,38,933,40],[972,39,933,41],[972,40,933,42],[973,6,934,8],[973,10,934,12],[973,28,934,30],[973,32,934,34,"json"],[973,36,934,38],[973,38,934,40],[974,8,935,12],[974,14,935,18,"_makeTaggedError"],[974,30,935,34],[974,31,935,35,"auth"],[974,35,935,39],[974,37,935,41],[974,79,935,83],[974,80,935,84],[974,119,935,123,"json"],[974,123,935,127],[974,124,935,128],[975,6,936,8],[976,6,937,8],[976,10,937,12,"response"],[976,18,937,20],[976,19,937,21,"ok"],[976,21,937,23],[976,25,937,27],[976,27,937,29],[976,41,937,43],[976,45,937,47,"json"],[976,49,937,51],[976,50,937,52],[976,52,937,54],[977,8,938,12],[977,15,938,19,"json"],[977,19,938,23],[978,6,939,8],[978,7,939,9],[978,13,940,13],[979,8,941,12],[979,14,941,18,"errorMessage"],[979,26,941,30],[979,29,941,33,"response"],[979,37,941,41],[979,38,941,42,"ok"],[979,40,941,44],[979,43,941,47,"json"],[979,47,941,51],[979,48,941,52,"errorMessage"],[979,60,941,64],[979,63,941,67,"json"],[979,67,941,71],[979,68,941,72,"error"],[979,73,941,77],[979,74,941,78,"message"],[979,81,941,85],[980,8,942,12],[980,14,942,18],[980,15,942,19,"serverErrorCode"],[980,30,942,34],[980,32,942,36,"serverErrorMessage"],[980,50,942,54],[980,51,942,55],[980,54,942,58,"errorMessage"],[980,66,942,70],[980,67,942,71,"split"],[980,72,942,76],[980,73,942,77],[980,78,942,82],[980,79,942,83],[981,8,943,12],[981,12,943,16,"serverErrorCode"],[981,27,943,31],[981,32,943,36],[981,66,943,70],[981,67,943,71],[981,119,943,123],[982,10,944,16],[982,16,944,22,"_makeTaggedError"],[982,32,944,38],[982,33,944,39,"auth"],[982,37,944,43],[982,39,944,45],[982,66,944,72],[982,67,944,73],[982,114,944,120,"json"],[982,118,944,124],[982,119,944,125],[983,8,945,12],[983,9,945,13],[983,15,946,17],[983,19,946,21,"serverErrorCode"],[983,34,946,36],[983,39,946,41],[983,53,946,55],[983,54,946,56],[983,86,946,88],[984,10,947,16],[984,16,947,22,"_makeTaggedError"],[984,32,947,38],[984,33,947,39,"auth"],[984,37,947,43],[984,39,947,45],[984,61,947,67],[984,62,947,68],[984,96,947,102,"json"],[984,100,947,106],[984,101,947,107],[985,8,948,12],[985,9,948,13],[985,15,949,17],[985,19,949,21,"serverErrorCode"],[985,34,949,36],[985,39,949,41],[985,54,949,56],[985,55,949,57],[985,88,949,90],[986,10,950,16],[986,16,950,22,"_makeTaggedError"],[986,32,950,38],[986,33,950,39,"auth"],[986,37,950,43],[986,39,950,45],[986,54,950,60],[986,55,950,61],[986,90,950,96,"json"],[986,94,950,100],[986,95,950,101],[987,8,951,12],[988,8,952,12],[988,14,952,18,"authError"],[988,23,952,27],[988,26,952,30,"errorMap"],[988,34,952,38],[988,35,952,39,"serverErrorCode"],[988,50,952,54],[988,51,952,55],[988,55,953,16,"serverErrorCode"],[988,70,953,31],[988,71,954,21,"toLowerCase"],[988,82,954,32],[988,83,954,33],[988,84,954,34],[988,85,955,21,"replace"],[988,92,955,28],[988,93,955,29],[988,102,955,38],[988,104,955,40],[988,107,955,43],[988,108,955,44],[989,8,956,12],[989,12,956,16,"serverErrorMessage"],[989,30,956,34],[989,32,956,36],[990,10,957,16],[990,16,957,22,"_errorWithCustomMessage"],[990,39,957,45],[990,40,957,46,"auth"],[990,44,957,50],[990,46,957,52,"authError"],[990,55,957,61],[990,57,957,63,"serverErrorMessage"],[990,75,957,81],[990,76,957,82],[991,8,958,12],[991,9,958,13],[991,15,959,17],[992,10,960,16,"_fail"],[992,15,960,21],[992,16,960,22,"auth"],[992,20,960,26],[992,22,960,28,"authError"],[992,31,960,37],[992,32,960,38],[993,8,961,12],[994,6,962,8],[995,4,963,4],[995,5,963,5],[995,6,964,4],[995,13,964,11,"e"],[995,14,964,12],[995,16,964,14],[996,6,965,8],[996,10,965,12,"e"],[996,11,965,13],[996,23,965,25,"FirebaseError"],[996,42,965,38],[996,44,965,40],[997,8,966,12],[997,14,966,18,"e"],[997,15,966,19],[998,6,967,8],[999,6,968,8],[1000,6,969,8],[1001,6,970,8],[1002,6,971,8,"_fail"],[1002,11,971,13],[1002,12,971,14,"auth"],[1002,16,971,18],[1002,18,971,20],[1002,42,971,44],[1002,43,971,45],[1002,87,971,89],[1003,8,971,91],[1003,17,971,100],[1003,19,971,102,"String"],[1003,25,971,108],[1003,26,971,109,"e"],[1003,27,971,110],[1004,6,971,112],[1004,7,971,113],[1004,8,971,114],[1005,4,972,4],[1006,2,973,0],[1007,2,974,0],[1007,17,974,15,"_performSignInRequest"],[1007,38,974,36,"_performSignInRequest"],[1007,39,974,37,"auth"],[1007,43,974,41],[1007,45,974,43,"method"],[1007,51,974,49],[1007,53,974,51,"path"],[1007,57,974,55],[1007,59,974,57,"request"],[1007,66,974,64],[1007,68,974,66,"customErrorMap"],[1007,82,974,80],[1007,85,974,83],[1007,86,974,84],[1007,87,974,85],[1007,89,974,87],[1008,4,975,4],[1008,10,975,10,"serverResponse"],[1008,24,975,24],[1008,27,975,27],[1008,33,975,33,"_performApiRequest"],[1008,51,975,51],[1008,52,975,52,"auth"],[1008,56,975,56],[1008,58,975,58,"method"],[1008,64,975,64],[1008,66,975,66,"path"],[1008,70,975,70],[1008,72,975,72,"request"],[1008,79,975,79],[1008,81,975,81,"customErrorMap"],[1008,95,975,95],[1008,96,975,96],[1009,4,976,4],[1009,8,976,8],[1009,30,976,30],[1009,34,976,34,"serverResponse"],[1009,48,976,48],[1009,50,976,50],[1010,6,977,8,"_fail"],[1010,11,977,13],[1010,12,977,14,"auth"],[1010,16,977,18],[1010,18,977,20],[1010,46,977,48],[1010,47,977,49],[1010,81,977,83],[1011,8,978,12,"_serverResponse"],[1011,23,978,27],[1011,25,978,29,"serverResponse"],[1012,6,979,8],[1012,7,979,9],[1012,8,979,10],[1013,4,980,4],[1014,4,981,4],[1014,11,981,11,"serverResponse"],[1014,25,981,25],[1015,2,982,0],[1016,2,983,0],[1016,17,983,15,"_getFinalTarget"],[1016,32,983,30,"_getFinalTarget"],[1016,33,983,31,"auth"],[1016,37,983,35],[1016,39,983,37,"host"],[1016,43,983,41],[1016,45,983,43,"path"],[1016,49,983,47],[1016,51,983,49,"query"],[1016,56,983,54],[1016,58,983,56],[1017,4,984,4],[1017,10,984,10,"base"],[1017,14,984,14],[1017,17,984,17],[1017,20,984,20,"host"],[1017,24,984,24],[1017,27,984,27,"path"],[1017,31,984,31],[1017,35,984,35,"query"],[1017,40,984,40],[1017,42,984,42],[1018,4,985,4],[1018,10,985,10,"authInternal"],[1018,22,985,22],[1018,25,985,25,"auth"],[1018,29,985,29],[1019,4,986,4],[1019,10,986,10,"finalTarget"],[1019,21,986,21],[1019,24,986,24,"authInternal"],[1019,36,986,36],[1019,37,986,37,"config"],[1019,43,986,43],[1019,44,986,44,"emulator"],[1019,52,986,52],[1019,55,987,10,"_emulatorUrl"],[1019,67,987,22],[1019,68,987,23,"auth"],[1019,72,987,27],[1019,73,987,28,"config"],[1019,79,987,34],[1019,81,987,36,"base"],[1019,85,987,40],[1019,86,987,41],[1019,89,988,10],[1019,92,988,13,"auth"],[1019,96,988,17],[1019,97,988,18,"config"],[1019,103,988,24],[1019,104,988,25,"apiScheme"],[1019,113,988,34],[1019,119,988,40,"base"],[1019,123,988,44],[1019,125,988,46],[1020,4,989,4],[1021,4,990,4],[1022,4,991,4],[1023,4,992,4],[1023,8,992,8,"CookieAuthProxiedEndpoints"],[1023,34,992,34],[1023,35,992,35,"includes"],[1023,43,992,43],[1023,44,992,44,"path"],[1023,48,992,48],[1023,49,992,49],[1023,51,992,51],[1024,6,993,8],[1025,6,994,8],[1026,6,995,8],[1026,12,995,14,"authInternal"],[1026,24,995,26],[1026,25,995,27,"_persistenceManagerAvailable"],[1026,53,995,55],[1027,6,996,8],[1027,10,996,12,"authInternal"],[1027,22,996,24],[1027,23,996,25,"_getPersistenceType"],[1027,42,996,44],[1027,43,996,45],[1027,44,996,46],[1027,49,996,51],[1027,57,996,59],[1027,58,996,60],[1027,88,996,90],[1028,8,997,12],[1028,14,997,18,"cookiePersistence"],[1028,31,997,35],[1028,34,997,38,"authInternal"],[1028,46,997,50],[1028,47,997,51,"_getPersistence"],[1028,62,997,66],[1028,63,997,67],[1028,64,997,68],[1029,8,998,12],[1029,15,998,19,"cookiePersistence"],[1029,32,998,36],[1029,33,998,37,"_getFinalTarget"],[1029,48,998,52],[1029,49,998,53,"finalTarget"],[1029,60,998,64],[1029,61,998,65],[1029,62,998,66,"toString"],[1029,70,998,74],[1029,71,998,75],[1029,72,998,76],[1030,6,999,8],[1031,4,1000,4],[1032,4,1001,4],[1032,11,1001,11,"finalTarget"],[1032,22,1001,22],[1033,2,1002,0],[1034,2,1003,0],[1034,11,1003,9,"_parseEnforcementState"],[1034,33,1003,31,"_parseEnforcementState"],[1034,34,1003,32,"enforcementStateStr"],[1034,53,1003,51],[1034,55,1003,53],[1035,4,1004,4],[1035,12,1004,12,"enforcementStateStr"],[1035,31,1004,31],[1036,6,1005,8],[1036,11,1005,13],[1036,20,1005,22],[1037,8,1006,12],[1037,15,1006,19],[1037,24,1006,28],[1037,25,1006,29],[1038,6,1007,8],[1038,11,1007,13],[1038,18,1007,20],[1039,8,1008,12],[1039,15,1008,19],[1039,22,1008,26],[1039,23,1008,27],[1040,6,1009,8],[1040,11,1009,13],[1040,16,1009,18],[1041,8,1010,12],[1041,15,1010,19],[1041,20,1010,24],[1041,21,1010,25],[1042,6,1011,8],[1043,8,1012,12],[1043,15,1012,19],[1043,46,1012,50],[1043,47,1012,51],[1044,4,1013,4],[1045,2,1014,0],[1046,2,1015,0],[1046,8,1015,6,"NetworkTimeout"],[1046,22,1015,20],[1046,23,1015,21],[1047,4,1016,4,"clearNetworkTimeout"],[1047,23,1016,23,"clearNetworkTimeout"],[1047,24,1016,23],[1047,26,1016,26],[1048,6,1017,8,"clearTimeout"],[1048,18,1017,20],[1048,19,1017,21],[1048,23,1017,25],[1048,24,1017,26,"timer"],[1048,29,1017,31],[1048,30,1017,32],[1049,4,1018,4],[1050,4,1019,4,"constructor"],[1050,15,1019,15,"constructor"],[1050,16,1019,16,"auth"],[1050,20,1019,20],[1050,22,1019,22],[1051,6,1020,8],[1051,10,1020,12],[1051,11,1020,13,"auth"],[1051,15,1020,17],[1051,18,1020,20,"auth"],[1051,22,1020,24],[1052,6,1021,8],[1053,6,1022,8],[1054,6,1023,8],[1055,6,1024,8],[1055,10,1024,12],[1055,11,1024,13,"timer"],[1055,16,1024,18],[1055,19,1024,21],[1055,23,1024,25],[1056,6,1025,8],[1056,10,1025,12],[1056,11,1025,13,"promise"],[1056,18,1025,20],[1056,21,1025,23],[1056,25,1025,27,"Promise"],[1056,32,1025,34],[1056,33,1025,35],[1056,34,1025,36,"_"],[1056,35,1025,37],[1056,37,1025,39,"reject"],[1056,43,1025,45],[1056,48,1025,50],[1057,8,1026,12],[1057,12,1026,16],[1057,13,1026,17,"timer"],[1057,18,1026,22],[1057,21,1026,25,"setTimeout"],[1057,31,1026,35],[1057,32,1026,36],[1057,38,1026,42],[1058,10,1027,16],[1058,17,1027,23,"reject"],[1058,23,1027,29],[1058,24,1027,30,"_createError"],[1058,36,1027,42],[1058,37,1027,43],[1058,41,1027,47],[1058,42,1027,48,"auth"],[1058,46,1027,52],[1058,48,1027,54],[1058,72,1027,78],[1058,73,1027,79],[1058,115,1027,121],[1058,116,1027,122],[1058,117,1027,123],[1059,8,1028,12],[1059,9,1028,13],[1059,11,1028,15,"DEFAULT_API_TIMEOUT_MS"],[1059,33,1028,37],[1059,34,1028,38,"get"],[1059,37,1028,41],[1059,38,1028,42],[1059,39,1028,43],[1059,40,1028,44],[1060,6,1029,8],[1060,7,1029,9],[1060,8,1029,10],[1061,4,1030,4],[1062,2,1031,0],[1063,2,1032,0],[1063,11,1032,9,"_makeTaggedError"],[1063,27,1032,25,"_makeTaggedError"],[1063,28,1032,26,"auth"],[1063,32,1032,30],[1063,34,1032,32,"code"],[1063,38,1032,36],[1063,40,1032,38,"response"],[1063,48,1032,46],[1063,50,1032,48],[1064,4,1033,4],[1064,10,1033,10,"errorParams"],[1064,21,1033,21],[1064,24,1033,24],[1065,6,1034,8,"appName"],[1065,13,1034,15],[1065,15,1034,17,"auth"],[1065,19,1034,21],[1065,20,1034,22,"name"],[1066,4,1035,4],[1066,5,1035,5],[1067,4,1036,4],[1067,8,1036,8,"response"],[1067,16,1036,16],[1067,17,1036,17,"email"],[1067,22,1036,22],[1067,24,1036,24],[1068,6,1037,8,"errorParams"],[1068,17,1037,19],[1068,18,1037,20,"email"],[1068,23,1037,25],[1068,26,1037,28,"response"],[1068,34,1037,36],[1068,35,1037,37,"email"],[1068,40,1037,42],[1069,4,1038,4],[1070,4,1039,4],[1070,8,1039,8,"response"],[1070,16,1039,16],[1070,17,1039,17,"phoneNumber"],[1070,28,1039,28],[1070,30,1039,30],[1071,6,1040,8,"errorParams"],[1071,17,1040,19],[1071,18,1040,20,"phoneNumber"],[1071,29,1040,31],[1071,32,1040,34,"response"],[1071,40,1040,42],[1071,41,1040,43,"phoneNumber"],[1071,52,1040,54],[1072,4,1041,4],[1073,4,1042,4],[1073,10,1042,10,"error"],[1073,15,1042,15],[1073,18,1042,18,"_createError"],[1073,30,1042,30],[1073,31,1042,31,"auth"],[1073,35,1042,35],[1073,37,1042,37,"code"],[1073,41,1042,41],[1073,43,1042,43,"errorParams"],[1073,54,1042,54],[1073,55,1042,55],[1074,4,1043,4],[1075,4,1044,4,"error"],[1075,9,1044,9],[1075,10,1044,10,"customData"],[1075,20,1044,20],[1075,21,1044,21,"_tokenResponse"],[1075,35,1044,35],[1075,38,1044,38,"response"],[1075,46,1044,46],[1076,4,1045,4],[1076,11,1045,11,"error"],[1076,16,1045,16],[1077,2,1046,0],[1079,2,1048,0],[1080,0,1049,0],[1081,0,1050,0],[1082,0,1051,0],[1083,0,1052,0],[1084,0,1053,0],[1085,0,1054,0],[1086,0,1055,0],[1087,0,1056,0],[1088,0,1057,0],[1089,0,1058,0],[1090,0,1059,0],[1091,0,1060,0],[1092,0,1061,0],[1093,0,1062,0],[1094,0,1063,0],[1095,2,1064,0],[1095,11,1064,9,"isEnterprise"],[1095,23,1064,21,"isEnterprise"],[1095,24,1064,22,"grecaptcha"],[1095,34,1064,32],[1095,36,1064,34],[1096,4,1065,4],[1096,11,1065,12,"grecaptcha"],[1096,21,1065,22],[1096,26,1065,27,"undefined"],[1096,35,1065,36],[1096,39,1066,8,"grecaptcha"],[1096,49,1066,18],[1096,50,1066,19,"enterprise"],[1096,60,1066,29],[1096,65,1066,34,"undefined"],[1096,74,1066,43],[1097,2,1067,0],[1098,2,1068,0],[1098,8,1068,6,"RecaptchaConfig"],[1098,23,1068,21],[1098,24,1068,22],[1099,4,1069,4,"constructor"],[1099,15,1069,15,"constructor"],[1099,16,1069,16,"response"],[1099,24,1069,24],[1099,26,1069,26],[1100,6,1070,8],[1101,0,1071,0],[1102,0,1072,0],[1103,6,1073,8],[1103,10,1073,12],[1103,11,1073,13,"siteKey"],[1103,18,1073,20],[1103,21,1073,23],[1103,23,1073,25],[1104,6,1074,8],[1105,0,1075,0],[1106,0,1076,0],[1107,6,1077,8],[1107,10,1077,12],[1107,11,1077,13,"recaptchaEnforcementState"],[1107,36,1077,38],[1107,39,1077,41],[1107,41,1077,43],[1108,6,1078,8],[1108,10,1078,12,"response"],[1108,18,1078,20],[1108,19,1078,21,"recaptchaKey"],[1108,31,1078,33],[1108,36,1078,38,"undefined"],[1108,45,1078,47],[1108,47,1078,49],[1109,8,1079,12],[1109,14,1079,18],[1109,18,1079,22,"Error"],[1109,23,1079,27],[1109,24,1079,28],[1109,48,1079,52],[1109,49,1079,53],[1110,6,1080,8],[1111,6,1081,8],[1112,6,1082,8],[1112,10,1082,12],[1112,11,1082,13,"siteKey"],[1112,18,1082,20],[1112,21,1082,23,"response"],[1112,29,1082,31],[1112,30,1082,32,"recaptchaKey"],[1112,42,1082,44],[1112,43,1082,45,"split"],[1112,48,1082,50],[1112,49,1082,51],[1112,52,1082,54],[1112,53,1082,55],[1112,54,1082,56],[1112,55,1082,57],[1112,56,1082,58],[1113,6,1083,8],[1113,10,1083,12],[1113,11,1083,13,"recaptchaEnforcementState"],[1113,36,1083,38],[1113,39,1083,41,"response"],[1113,47,1083,49],[1113,48,1083,50,"recaptchaEnforcementState"],[1113,73,1083,75],[1114,4,1084,4],[1115,4,1085,4],[1116,0,1086,0],[1117,0,1087,0],[1118,0,1088,0],[1119,0,1089,0],[1120,0,1090,0],[1121,4,1091,4,"getProviderEnforcementState"],[1121,31,1091,31,"getProviderEnforcementState"],[1121,32,1091,32,"providerStr"],[1121,43,1091,43],[1121,45,1091,45],[1122,6,1092,8],[1122,10,1092,12],[1122,11,1092,13],[1122,15,1092,17],[1122,16,1092,18,"recaptchaEnforcementState"],[1122,41,1092,43],[1122,45,1093,12],[1122,49,1093,16],[1122,50,1093,17,"recaptchaEnforcementState"],[1122,75,1093,42],[1122,76,1093,43,"length"],[1122,82,1093,49],[1122,87,1093,54],[1122,88,1093,55],[1122,90,1093,57],[1123,8,1094,12],[1123,15,1094,19],[1123,19,1094,23],[1124,6,1095,8],[1125,6,1096,8],[1125,11,1096,13],[1125,17,1096,19,"recaptchaEnforcementState"],[1125,42,1096,44],[1125,46,1096,48],[1125,50,1096,52],[1125,51,1096,53,"recaptchaEnforcementState"],[1125,76,1096,78],[1125,78,1096,80],[1126,8,1097,12],[1126,12,1097,16,"recaptchaEnforcementState"],[1126,37,1097,41],[1126,38,1097,42,"provider"],[1126,46,1097,50],[1126,50,1098,16,"recaptchaEnforcementState"],[1126,75,1098,41],[1126,76,1098,42,"provider"],[1126,84,1098,50],[1126,89,1098,55,"providerStr"],[1126,100,1098,66],[1126,102,1098,68],[1127,10,1099,16],[1127,17,1099,23,"_parseEnforcementState"],[1127,39,1099,45],[1127,40,1099,46,"recaptchaEnforcementState"],[1127,65,1099,71],[1127,66,1099,72,"enforcementState"],[1127,82,1099,88],[1127,83,1099,89],[1128,8,1100,12],[1129,6,1101,8],[1130,6,1102,8],[1130,13,1102,15],[1130,17,1102,19],[1131,4,1103,4],[1132,4,1104,4],[1133,0,1105,0],[1134,0,1106,0],[1135,0,1107,0],[1136,0,1108,0],[1137,0,1109,0],[1138,4,1110,4,"isProviderEnabled"],[1138,21,1110,21,"isProviderEnabled"],[1138,22,1110,22,"providerStr"],[1138,33,1110,33],[1138,35,1110,35],[1139,6,1111,8],[1139,13,1111,16],[1139,17,1111,20],[1139,18,1111,21,"getProviderEnforcementState"],[1139,45,1111,48],[1139,46,1111,49,"providerStr"],[1139,57,1111,60],[1139,58,1111,61],[1139,63,1112,12],[1139,72,1112,21],[1139,73,1112,22],[1139,107,1113,12],[1139,111,1113,16],[1139,112,1113,17,"getProviderEnforcementState"],[1139,139,1113,44],[1139,140,1113,45,"providerStr"],[1139,151,1113,56],[1139,152,1113,57],[1139,157,1113,62],[1139,164,1113,69],[1139,165,1113,70],[1140,4,1114,4],[1141,4,1115,4],[1142,0,1116,0],[1143,0,1117,0],[1144,0,1118,0],[1145,0,1119,0],[1146,0,1120,0],[1147,4,1121,4,"isAnyProviderEnabled"],[1147,24,1121,24,"isAnyProviderEnabled"],[1147,25,1121,24],[1147,27,1121,27],[1148,6,1122,8],[1148,13,1122,16],[1148,17,1122,20],[1148,18,1122,21,"isProviderEnabled"],[1148,35,1122,38],[1148,36,1122,39],[1148,61,1122,64],[1148,62,1122,65],[1148,113,1122,116],[1148,114,1122,117],[1148,118,1123,12],[1148,122,1123,16],[1148,123,1123,17,"isProviderEnabled"],[1148,140,1123,34],[1148,141,1123,35],[1148,157,1123,51],[1148,158,1123,52],[1148,200,1123,94],[1148,201,1123,95],[1149,4,1124,4],[1150,2,1125,0],[1152,2,1127,0],[1153,0,1128,0],[1154,0,1129,0],[1155,0,1130,0],[1156,0,1131,0],[1157,0,1132,0],[1158,0,1133,0],[1159,0,1134,0],[1160,0,1135,0],[1161,0,1136,0],[1162,0,1137,0],[1163,0,1138,0],[1164,0,1139,0],[1165,0,1140,0],[1166,0,1141,0],[1167,0,1142,0],[1168,2,1143,0],[1168,17,1143,15,"getRecaptchaConfig"],[1168,35,1143,33,"getRecaptchaConfig"],[1168,36,1143,34,"auth"],[1168,40,1143,38],[1168,42,1143,40,"request"],[1168,49,1143,47],[1168,51,1143,49],[1169,4,1144,4],[1169,11,1144,11,"_performApiRequest"],[1169,29,1144,29],[1169,30,1144,30,"auth"],[1169,34,1144,34],[1169,36,1144,36],[1169,41,1144,41],[1169,42,1144,42],[1169,64,1144,64],[1169,85,1144,85],[1169,86,1144,86],[1169,123,1144,123,"_addTidIfNecessary"],[1169,141,1144,141],[1169,142,1144,142,"auth"],[1169,146,1144,146],[1169,148,1144,148,"request"],[1169,155,1144,155],[1169,156,1144,156],[1169,157,1144,157],[1170,2,1145,0],[1172,2,1147,0],[1173,0,1148,0],[1174,0,1149,0],[1175,0,1150,0],[1176,0,1151,0],[1177,0,1152,0],[1178,0,1153,0],[1179,0,1154,0],[1180,0,1155,0],[1181,0,1156,0],[1182,0,1157,0],[1183,0,1158,0],[1184,0,1159,0],[1185,0,1160,0],[1186,0,1161,0],[1187,0,1162,0],[1188,2,1163,0],[1188,17,1163,15,"deleteAccount"],[1188,30,1163,28,"deleteAccount"],[1188,31,1163,29,"auth"],[1188,35,1163,33],[1188,37,1163,35,"request"],[1188,44,1163,42],[1188,46,1163,44],[1189,4,1164,4],[1189,11,1164,11,"_performApiRequest"],[1189,29,1164,29],[1189,30,1164,30,"auth"],[1189,34,1164,34],[1189,36,1164,36],[1189,42,1164,42],[1189,43,1164,43],[1189,66,1164,66],[1189,87,1164,87],[1189,88,1164,88],[1189,119,1164,119,"request"],[1189,126,1164,126],[1189,127,1164,127],[1190,2,1165,0],[1191,2,1166,0],[1191,17,1166,15,"deleteLinkedAccounts"],[1191,37,1166,35,"deleteLinkedAccounts"],[1191,38,1166,36,"auth"],[1191,42,1166,40],[1191,44,1166,42,"request"],[1191,51,1166,49],[1191,53,1166,51],[1192,4,1167,4],[1192,11,1167,11,"_performApiRequest"],[1192,29,1167,29],[1192,30,1167,30,"auth"],[1192,34,1167,34],[1192,36,1167,36],[1192,42,1167,42],[1192,43,1167,43],[1192,66,1167,66],[1192,87,1167,87],[1192,88,1167,88],[1192,121,1167,121,"request"],[1192,128,1167,128],[1192,129,1167,129],[1193,2,1168,0],[1194,2,1169,0],[1194,17,1169,15,"getAccountInfo"],[1194,31,1169,29,"getAccountInfo"],[1194,32,1169,30,"auth"],[1194,36,1169,34],[1194,38,1169,36,"request"],[1194,45,1169,43],[1194,47,1169,45],[1195,4,1170,4],[1195,11,1170,11,"_performApiRequest"],[1195,29,1170,29],[1195,30,1170,30,"auth"],[1195,34,1170,34],[1195,36,1170,36],[1195,42,1170,42],[1195,43,1170,43],[1195,66,1170,66],[1195,87,1170,87],[1195,88,1170,88],[1195,121,1170,121,"request"],[1195,128,1170,128],[1195,129,1170,129],[1196,2,1171,0],[1198,2,1173,0],[1199,0,1174,0],[1200,0,1175,0],[1201,0,1176,0],[1202,0,1177,0],[1203,0,1178,0],[1204,0,1179,0],[1205,0,1180,0],[1206,0,1181,0],[1207,0,1182,0],[1208,0,1183,0],[1209,0,1184,0],[1210,0,1185,0],[1211,0,1186,0],[1212,0,1187,0],[1213,0,1188,0],[1214,2,1189,0],[1214,11,1189,9,"utcTimestampToDateString"],[1214,35,1189,33,"utcTimestampToDateString"],[1214,36,1189,34,"utcTimestamp"],[1214,48,1189,46],[1214,50,1189,48],[1215,4,1190,4],[1215,8,1190,8],[1215,9,1190,9,"utcTimestamp"],[1215,21,1190,21],[1215,23,1190,23],[1216,6,1191,8],[1216,13,1191,15,"undefined"],[1216,22,1191,24],[1217,4,1192,4],[1218,4,1193,4],[1218,8,1193,8],[1219,6,1194,8],[1220,6,1195,8],[1220,12,1195,14,"date"],[1220,16,1195,18],[1220,19,1195,21],[1220,23,1195,25,"Date"],[1220,27,1195,29],[1220,28,1195,30,"Number"],[1220,34,1195,36],[1220,35,1195,37,"utcTimestamp"],[1220,47,1195,49],[1220,48,1195,50],[1220,49,1195,51],[1221,6,1196,8],[1222,6,1197,8],[1222,10,1197,12],[1222,11,1197,13,"isNaN"],[1222,16,1197,18],[1222,17,1197,19,"date"],[1222,21,1197,23],[1222,22,1197,24,"getTime"],[1222,29,1197,31],[1222,30,1197,32],[1222,31,1197,33],[1222,32,1197,34],[1222,34,1197,36],[1223,8,1198,12],[1224,8,1199,12],[1224,15,1199,19,"date"],[1224,19,1199,23],[1224,20,1199,24,"toUTCString"],[1224,31,1199,35],[1224,32,1199,36],[1224,33,1199,37],[1225,6,1200,8],[1226,4,1201,4],[1226,5,1201,5],[1226,6,1202,4],[1226,13,1202,11,"e"],[1226,14,1202,12],[1226,16,1202,14],[1227,6,1203,8],[1228,4,1203,8],[1229,4,1205,4],[1229,11,1205,11,"undefined"],[1229,20,1205,20],[1230,2,1206,0],[1232,2,1208,0],[1233,0,1209,0],[1234,0,1210,0],[1235,0,1211,0],[1236,0,1212,0],[1237,0,1213,0],[1238,0,1214,0],[1239,0,1215,0],[1240,0,1216,0],[1241,0,1217,0],[1242,0,1218,0],[1243,0,1219,0],[1244,0,1220,0],[1245,0,1221,0],[1246,0,1222,0],[1247,0,1223,0],[1248,2,1224,0],[1249,0,1225,0],[1250,0,1226,0],[1251,0,1227,0],[1252,0,1228,0],[1253,0,1229,0],[1254,0,1230,0],[1255,0,1231,0],[1256,0,1232,0],[1257,0,1233,0],[1258,0,1234,0],[1259,0,1235,0],[1260,2,1236,0],[1260,11,1236,9,"getIdToken"],[1260,21,1236,19,"getIdToken"],[1260,22,1236,20,"user"],[1260,26,1236,24],[1260,28,1236,26,"forceRefresh"],[1260,40,1236,38],[1260,43,1236,41],[1260,48,1236,46],[1260,50,1236,48],[1261,4,1237,4],[1261,11,1237,11],[1261,15,1237,11,"getModularInstance"],[1261,39,1237,29],[1261,41,1237,30,"user"],[1261,45,1237,34],[1261,46,1237,35],[1261,47,1237,36,"getIdToken"],[1261,57,1237,46],[1261,58,1237,47,"forceRefresh"],[1261,70,1237,59],[1261,71,1237,60],[1262,2,1238,0],[1263,2,1239,0],[1264,0,1240,0],[1265,0,1241,0],[1266,0,1242,0],[1267,0,1243,0],[1268,0,1244,0],[1269,0,1245,0],[1270,0,1246,0],[1271,0,1247,0],[1272,0,1248,0],[1273,0,1249,0],[1274,0,1250,0],[1275,2,1251,0],[1275,17,1251,15,"getIdTokenResult"],[1275,33,1251,31,"getIdTokenResult"],[1275,34,1251,32,"user"],[1275,38,1251,36],[1275,40,1251,38,"forceRefresh"],[1275,52,1251,50],[1275,55,1251,53],[1275,60,1251,58],[1275,62,1251,60],[1276,4,1252,4],[1276,10,1252,10,"userInternal"],[1276,22,1252,22],[1276,25,1252,25],[1276,29,1252,25,"getModularInstance"],[1276,53,1252,43],[1276,55,1252,44,"user"],[1276,59,1252,48],[1276,60,1252,49],[1277,4,1253,4],[1277,10,1253,10,"token"],[1277,15,1253,15],[1277,18,1253,18],[1277,24,1253,24,"userInternal"],[1277,36,1253,36],[1277,37,1253,37,"getIdToken"],[1277,47,1253,47],[1277,48,1253,48,"forceRefresh"],[1277,60,1253,60],[1277,61,1253,61],[1278,4,1254,4],[1278,10,1254,10,"claims"],[1278,16,1254,16],[1278,19,1254,19,"_parseToken"],[1278,30,1254,30],[1278,31,1254,31,"token"],[1278,36,1254,36],[1278,37,1254,37],[1279,4,1255,4,"_assert"],[1279,11,1255,11],[1279,12,1255,12,"claims"],[1279,18,1255,18],[1279,22,1255,22,"claims"],[1279,28,1255,28],[1279,29,1255,29,"exp"],[1279,32,1255,32],[1279,36,1255,36,"claims"],[1279,42,1255,42],[1279,43,1255,43,"auth_time"],[1279,52,1255,52],[1279,56,1255,56,"claims"],[1279,62,1255,62],[1279,63,1255,63,"iat"],[1279,66,1255,66],[1279,68,1255,68,"userInternal"],[1279,80,1255,80],[1279,81,1255,81,"auth"],[1279,85,1255,85],[1279,87,1255,87],[1279,103,1255,103],[1279,104,1255,104],[1279,138,1255,138],[1279,139,1255,139],[1280,4,1256,4],[1280,10,1256,10,"firebase"],[1280,18,1256,18],[1280,21,1256,21],[1280,28,1256,28,"claims"],[1280,34,1256,34],[1280,35,1256,35,"firebase"],[1280,43,1256,43],[1280,48,1256,48],[1280,56,1256,56],[1280,59,1256,59,"claims"],[1280,65,1256,65],[1280,66,1256,66,"firebase"],[1280,74,1256,74],[1280,77,1256,77,"undefined"],[1280,86,1256,86],[1281,4,1257,4],[1281,10,1257,10,"signInProvider"],[1281,24,1257,24],[1281,27,1257,27,"firebase"],[1281,35,1257,35],[1281,38,1257,38],[1281,56,1257,56],[1281,57,1257,57],[1282,4,1258,4],[1282,11,1258,11],[1283,6,1259,8,"claims"],[1283,12,1259,14],[1284,6,1260,8,"token"],[1284,11,1260,13],[1285,6,1261,8,"authTime"],[1285,14,1261,16],[1285,16,1261,18,"utcTimestampToDateString"],[1285,40,1261,42],[1285,41,1261,43,"secondsStringToMilliseconds"],[1285,68,1261,70],[1285,69,1261,71,"claims"],[1285,75,1261,77],[1285,76,1261,78,"auth_time"],[1285,85,1261,87],[1285,86,1261,88],[1285,87,1261,89],[1286,6,1262,8,"issuedAtTime"],[1286,18,1262,20],[1286,20,1262,22,"utcTimestampToDateString"],[1286,44,1262,46],[1286,45,1262,47,"secondsStringToMilliseconds"],[1286,72,1262,74],[1286,73,1262,75,"claims"],[1286,79,1262,81],[1286,80,1262,82,"iat"],[1286,83,1262,85],[1286,84,1262,86],[1286,85,1262,87],[1287,6,1263,8,"expirationTime"],[1287,20,1263,22],[1287,22,1263,24,"utcTimestampToDateString"],[1287,46,1263,48],[1287,47,1263,49,"secondsStringToMilliseconds"],[1287,74,1263,76],[1287,75,1263,77,"claims"],[1287,81,1263,83],[1287,82,1263,84,"exp"],[1287,85,1263,87],[1287,86,1263,88],[1287,87,1263,89],[1288,6,1264,8,"signInProvider"],[1288,20,1264,22],[1288,22,1264,24,"signInProvider"],[1288,36,1264,38],[1288,40,1264,42],[1288,44,1264,46],[1289,6,1265,8,"signInSecondFactor"],[1289,24,1265,26],[1289,26,1265,28,"firebase"],[1289,34,1265,36],[1289,37,1265,39],[1289,60,1265,62],[1289,61,1265,63],[1289,65,1265,67],[1290,4,1266,4],[1290,5,1266,5],[1291,2,1267,0],[1292,2,1268,0],[1292,11,1268,9,"secondsStringToMilliseconds"],[1292,38,1268,36,"secondsStringToMilliseconds"],[1292,39,1268,37,"seconds"],[1292,46,1268,44],[1292,48,1268,46],[1293,4,1269,4],[1293,11,1269,11,"Number"],[1293,17,1269,17],[1293,18,1269,18,"seconds"],[1293,25,1269,25],[1293,26,1269,26],[1293,29,1269,29],[1293,33,1269,33],[1294,2,1270,0],[1295,2,1271,0],[1295,11,1271,9,"_parseToken"],[1295,22,1271,20,"_parseToken"],[1295,23,1271,21,"token"],[1295,28,1271,26],[1295,30,1271,28],[1296,4,1272,4],[1296,10,1272,10],[1296,11,1272,11,"algorithm"],[1296,20,1272,20],[1296,22,1272,22,"payload"],[1296,29,1272,29],[1296,31,1272,31,"signature"],[1296,40,1272,40],[1296,41,1272,41],[1296,44,1272,44,"token"],[1296,49,1272,49],[1296,50,1272,50,"split"],[1296,55,1272,55],[1296,56,1272,56],[1296,59,1272,59],[1296,60,1272,60],[1297,4,1273,4],[1297,8,1273,8,"algorithm"],[1297,17,1273,17],[1297,22,1273,22,"undefined"],[1297,31,1273,31],[1297,35,1274,8,"payload"],[1297,42,1274,15],[1297,47,1274,20,"undefined"],[1297,56,1274,29],[1297,60,1275,8,"signature"],[1297,69,1275,17],[1297,74,1275,22,"undefined"],[1297,83,1275,31],[1297,85,1275,33],[1298,6,1276,8,"_logError"],[1298,15,1276,17],[1298,16,1276,18],[1298,64,1276,66],[1298,65,1276,67],[1299,6,1277,8],[1299,13,1277,15],[1299,17,1277,19],[1300,4,1278,4],[1301,4,1279,4],[1301,8,1279,8],[1302,6,1280,8],[1302,12,1280,14,"decoded"],[1302,19,1280,21],[1302,22,1280,24],[1302,26,1280,24,"base64Decode"],[1302,44,1280,36],[1302,46,1280,37,"payload"],[1302,53,1280,44],[1302,54,1280,45],[1303,6,1281,8],[1303,10,1281,12],[1303,11,1281,13,"decoded"],[1303,18,1281,20],[1303,20,1281,22],[1304,8,1282,12,"_logError"],[1304,17,1282,21],[1304,18,1282,22],[1304,55,1282,59],[1304,56,1282,60],[1305,8,1283,12],[1305,15,1283,19],[1305,19,1283,23],[1306,6,1284,8],[1307,6,1285,8],[1307,13,1285,15,"JSON"],[1307,17,1285,19],[1307,18,1285,20,"parse"],[1307,23,1285,25],[1307,24,1285,26,"decoded"],[1307,31,1285,33],[1307,32,1285,34],[1308,4,1286,4],[1308,5,1286,5],[1308,6,1287,4],[1308,13,1287,11,"e"],[1308,14,1287,12],[1308,16,1287,14],[1309,6,1288,8,"_logError"],[1309,15,1288,17],[1309,16,1288,18],[1309,58,1288,60],[1309,60,1288,62,"e"],[1309,61,1288,63],[1309,63,1288,65,"toString"],[1309,71,1288,73],[1309,72,1288,74],[1309,73,1288,75],[1309,74,1288,76],[1310,6,1289,8],[1310,13,1289,15],[1310,17,1289,19],[1311,4,1290,4],[1312,2,1291,0],[1313,2,1292,0],[1314,0,1293,0],[1315,0,1294,0],[1316,2,1295,0],[1316,11,1295,9,"_tokenExpiresIn"],[1316,26,1295,24,"_tokenExpiresIn"],[1316,27,1295,25,"token"],[1316,32,1295,30],[1316,34,1295,32],[1317,4,1296,4],[1317,10,1296,10,"parsedToken"],[1317,21,1296,21],[1317,24,1296,24,"_parseToken"],[1317,35,1296,35],[1317,36,1296,36,"token"],[1317,41,1296,41],[1317,42,1296,42],[1318,4,1297,4,"_assert"],[1318,11,1297,11],[1318,12,1297,12,"parsedToken"],[1318,23,1297,23],[1318,25,1297,25],[1318,41,1297,41],[1318,42,1297,42],[1318,76,1297,76],[1318,77,1297,77],[1319,4,1298,4,"_assert"],[1319,11,1298,11],[1319,12,1298,12],[1319,19,1298,19,"parsedToken"],[1319,30,1298,30],[1319,31,1298,31,"exp"],[1319,34,1298,34],[1319,39,1298,39],[1319,50,1298,50],[1319,52,1298,52],[1319,68,1298,68],[1319,69,1298,69],[1319,103,1298,103],[1319,104,1298,104],[1320,4,1299,4,"_assert"],[1320,11,1299,11],[1320,12,1299,12],[1320,19,1299,19,"parsedToken"],[1320,30,1299,30],[1320,31,1299,31,"iat"],[1320,34,1299,34],[1320,39,1299,39],[1320,50,1299,50],[1320,52,1299,52],[1320,68,1299,68],[1320,69,1299,69],[1320,103,1299,103],[1320,104,1299,104],[1321,4,1300,4],[1321,11,1300,11,"Number"],[1321,17,1300,17],[1321,18,1300,18,"parsedToken"],[1321,29,1300,29],[1321,30,1300,30,"exp"],[1321,33,1300,33],[1321,34,1300,34],[1321,37,1300,37,"Number"],[1321,43,1300,43],[1321,44,1300,44,"parsedToken"],[1321,55,1300,55],[1321,56,1300,56,"iat"],[1321,59,1300,59],[1321,60,1300,60],[1322,2,1301,0],[1324,2,1303,0],[1325,0,1304,0],[1326,0,1305,0],[1327,0,1306,0],[1328,0,1307,0],[1329,0,1308,0],[1330,0,1309,0],[1331,0,1310,0],[1332,0,1311,0],[1333,0,1312,0],[1334,0,1313,0],[1335,0,1314,0],[1336,0,1315,0],[1337,0,1316,0],[1338,0,1317,0],[1339,0,1318,0],[1340,2,1319,0],[1340,17,1319,15,"_logoutIfInvalidated"],[1340,37,1319,35,"_logoutIfInvalidated"],[1340,38,1319,36,"user"],[1340,42,1319,40],[1340,44,1319,42,"promise"],[1340,51,1319,49],[1340,53,1319,51,"bypassAuthState"],[1340,68,1319,66],[1340,71,1319,69],[1340,76,1319,74],[1340,78,1319,76],[1341,4,1320,4],[1341,8,1320,8,"bypassAuthState"],[1341,23,1320,23],[1341,25,1320,25],[1342,6,1321,8],[1342,13,1321,15,"promise"],[1342,20,1321,22],[1343,4,1322,4],[1344,4,1323,4],[1344,8,1323,8],[1345,6,1324,8],[1345,13,1324,15],[1345,19,1324,21,"promise"],[1345,26,1324,28],[1346,4,1325,4],[1346,5,1325,5],[1346,6,1326,4],[1346,13,1326,11,"e"],[1346,14,1326,12],[1346,16,1326,14],[1347,6,1327,8],[1347,10,1327,12,"e"],[1347,11,1327,13],[1347,23,1327,25,"FirebaseError"],[1347,42,1327,38],[1347,46,1327,42,"isUserInvalidated"],[1347,63,1327,59],[1347,64,1327,60,"e"],[1347,65,1327,61],[1347,66,1327,62],[1347,68,1327,64],[1348,8,1328,12],[1348,12,1328,16,"user"],[1348,16,1328,20],[1348,17,1328,21,"auth"],[1348,21,1328,25],[1348,22,1328,26,"currentUser"],[1348,33,1328,37],[1348,38,1328,42,"user"],[1348,42,1328,46],[1348,44,1328,48],[1349,10,1329,16],[1349,16,1329,22,"user"],[1349,20,1329,26],[1349,21,1329,27,"auth"],[1349,25,1329,31],[1349,26,1329,32,"signOut"],[1349,33,1329,39],[1349,34,1329,40],[1349,35,1329,41],[1350,8,1330,12],[1351,6,1331,8],[1352,6,1332,8],[1352,12,1332,14,"e"],[1352,13,1332,15],[1353,4,1333,4],[1354,2,1334,0],[1355,2,1335,0],[1355,11,1335,9,"isUserInvalidated"],[1355,28,1335,26,"isUserInvalidated"],[1355,29,1335,27],[1356,4,1335,29,"code"],[1357,2,1335,34],[1357,3,1335,35],[1357,5,1335,37],[1358,4,1336,4],[1358,11,1336,12,"code"],[1358,15,1336,16],[1358,20,1336,21],[1358,28,1336,29],[1358,43,1336,44],[1358,44,1336,45],[1358,79,1336,80],[1358,83,1337,8,"code"],[1358,87,1337,12],[1358,92,1337,17],[1358,100,1337,25],[1358,120,1337,45],[1358,121,1337,46],[1358,156,1337,81],[1359,2,1338,0],[1361,2,1340,0],[1362,0,1341,0],[1363,0,1342,0],[1364,0,1343,0],[1365,0,1344,0],[1366,0,1345,0],[1367,0,1346,0],[1368,0,1347,0],[1369,0,1348,0],[1370,0,1349,0],[1371,0,1350,0],[1372,0,1351,0],[1373,0,1352,0],[1374,0,1353,0],[1375,0,1354,0],[1376,0,1355,0],[1377,2,1356,0],[1377,8,1356,6,"ProactiveRefresh"],[1377,24,1356,22],[1377,25,1356,23],[1378,4,1357,4,"constructor"],[1378,15,1357,15,"constructor"],[1378,16,1357,16,"user"],[1378,20,1357,20],[1378,22,1357,22],[1379,6,1358,8],[1379,10,1358,12],[1379,11,1358,13,"user"],[1379,15,1358,17],[1379,18,1358,20,"user"],[1379,22,1358,24],[1380,6,1359,8],[1380,10,1359,12],[1380,11,1359,13,"isRunning"],[1380,20,1359,22],[1380,23,1359,25],[1380,28,1359,30],[1381,6,1360,8],[1382,6,1361,8],[1383,6,1362,8],[1384,6,1363,8],[1385,6,1364,8],[1385,10,1364,12],[1385,11,1364,13,"timerId"],[1385,18,1364,20],[1385,21,1364,23],[1385,25,1364,27],[1386,6,1365,8],[1386,10,1365,12],[1386,11,1365,13,"errorBackoff"],[1386,23,1365,25],[1386,26,1365,28],[1386,31,1365,33],[1386,32,1365,34],[1387,4,1366,4],[1388,4,1367,4,"_start"],[1388,10,1367,10,"_start"],[1388,11,1367,10],[1388,13,1367,13],[1389,6,1368,8],[1389,10,1368,12],[1389,14,1368,16],[1389,15,1368,17,"isRunning"],[1389,24,1368,26],[1389,26,1368,28],[1390,8,1369,12],[1391,6,1370,8],[1392,6,1371,8],[1392,10,1371,12],[1392,11,1371,13,"isRunning"],[1392,20,1371,22],[1392,23,1371,25],[1392,27,1371,29],[1393,6,1372,8],[1393,10,1372,12],[1393,11,1372,13,"schedule"],[1393,19,1372,21],[1393,20,1372,22],[1393,21,1372,23],[1394,4,1373,4],[1395,4,1374,4,"_stop"],[1395,9,1374,9,"_stop"],[1395,10,1374,9],[1395,12,1374,12],[1396,6,1375,8],[1396,10,1375,12],[1396,11,1375,13],[1396,15,1375,17],[1396,16,1375,18,"isRunning"],[1396,25,1375,27],[1396,27,1375,29],[1397,8,1376,12],[1398,6,1377,8],[1399,6,1378,8],[1399,10,1378,12],[1399,11,1378,13,"isRunning"],[1399,20,1378,22],[1399,23,1378,25],[1399,28,1378,30],[1400,6,1379,8],[1400,10,1379,12],[1400,14,1379,16],[1400,15,1379,17,"timerId"],[1400,22,1379,24],[1400,27,1379,29],[1400,31,1379,33],[1400,33,1379,35],[1401,8,1380,12,"clearTimeout"],[1401,20,1380,24],[1401,21,1380,25],[1401,25,1380,29],[1401,26,1380,30,"timerId"],[1401,33,1380,37],[1401,34,1380,38],[1402,6,1381,8],[1403,4,1382,4],[1404,4,1383,4,"getInterval"],[1404,15,1383,15,"getInterval"],[1404,16,1383,16,"wasError"],[1404,24,1383,24],[1404,26,1383,26],[1405,6,1384,8],[1405,10,1384,12,"wasError"],[1405,18,1384,20],[1405,20,1384,22],[1406,8,1385,12],[1406,14,1385,18,"interval"],[1406,22,1385,26],[1406,25,1385,29],[1406,29,1385,33],[1406,30,1385,34,"errorBackoff"],[1406,42,1385,46],[1407,8,1386,12],[1407,12,1386,16],[1407,13,1386,17,"errorBackoff"],[1407,25,1386,29],[1407,28,1386,32,"Math"],[1407,32,1386,36],[1407,33,1386,37,"min"],[1407,36,1386,40],[1407,37,1386,41],[1407,41,1386,45],[1407,42,1386,46,"errorBackoff"],[1407,54,1386,58],[1407,57,1386,61],[1407,58,1386,62],[1407,60,1386,64],[1407,66,1386,70],[1407,67,1386,71],[1407,99,1386,103],[1407,100,1386,104],[1408,8,1387,12],[1408,15,1387,19,"interval"],[1408,23,1387,27],[1409,6,1388,8],[1409,7,1388,9],[1409,13,1389,13],[1410,8,1390,12],[1411,8,1391,12],[1411,12,1391,16],[1411,13,1391,17,"errorBackoff"],[1411,25,1391,29],[1411,28,1391,32],[1411,33,1391,37],[1411,34,1391,38],[1412,8,1392,12],[1412,14,1392,18,"expTime"],[1412,21,1392,25],[1412,24,1392,28],[1412,28,1392,32],[1412,29,1392,33,"user"],[1412,33,1392,37],[1412,34,1392,38,"stsTokenManager"],[1412,49,1392,53],[1412,50,1392,54,"expirationTime"],[1412,64,1392,68],[1412,68,1392,72],[1412,69,1392,73],[1413,8,1393,12],[1413,14,1393,18,"interval"],[1413,22,1393,26],[1413,25,1393,29,"expTime"],[1413,32,1393,36],[1413,35,1393,39,"Date"],[1413,39,1393,43],[1413,40,1393,44,"now"],[1413,43,1393,47],[1413,44,1393,48],[1413,45,1393,49],[1413,48,1393,52],[1413,54,1393,58],[1413,55,1393,59],[1414,8,1394,12],[1414,15,1394,19,"Math"],[1414,19,1394,23],[1414,20,1394,24,"max"],[1414,23,1394,27],[1414,24,1394,28],[1414,25,1394,29],[1414,27,1394,31,"interval"],[1414,35,1394,39],[1414,36,1394,40],[1415,6,1395,8],[1416,4,1396,4],[1417,4,1397,4,"schedule"],[1417,12,1397,12,"schedule"],[1417,13,1397,13,"wasError"],[1417,21,1397,21],[1417,24,1397,24],[1417,29,1397,29],[1417,31,1397,31],[1418,6,1398,8],[1418,10,1398,12],[1418,11,1398,13],[1418,15,1398,17],[1418,16,1398,18,"isRunning"],[1418,25,1398,27],[1418,27,1398,29],[1419,8,1399,12],[1420,8,1400,12],[1421,6,1401,8],[1422,6,1402,8],[1422,12,1402,14,"interval"],[1422,20,1402,22],[1422,23,1402,25],[1422,27,1402,29],[1422,28,1402,30,"getInterval"],[1422,39,1402,41],[1422,40,1402,42,"wasError"],[1422,48,1402,50],[1422,49,1402,51],[1423,6,1403,8],[1423,10,1403,12],[1423,11,1403,13,"timerId"],[1423,18,1403,20],[1423,21,1403,23,"setTimeout"],[1423,31,1403,33],[1423,32,1403,34],[1423,44,1403,46],[1424,8,1404,12],[1424,14,1404,18],[1424,18,1404,22],[1424,19,1404,23,"iteration"],[1424,28,1404,32],[1424,29,1404,33],[1424,30,1404,34],[1425,6,1405,8],[1425,7,1405,9],[1425,9,1405,11,"interval"],[1425,17,1405,19],[1425,18,1405,20],[1426,4,1406,4],[1427,4,1407,4],[1427,10,1407,10,"iteration"],[1427,19,1407,19,"iteration"],[1427,20,1407,19],[1427,22,1407,22],[1428,6,1408,8],[1428,10,1408,12],[1429,8,1409,12],[1429,14,1409,18],[1429,18,1409,22],[1429,19,1409,23,"user"],[1429,23,1409,27],[1429,24,1409,28,"getIdToken"],[1429,34,1409,38],[1429,35,1409,39],[1429,39,1409,43],[1429,40,1409,44],[1430,6,1410,8],[1430,7,1410,9],[1430,8,1411,8],[1430,15,1411,15,"e"],[1430,16,1411,16],[1430,18,1411,18],[1431,8,1412,12],[1432,8,1413,12],[1432,12,1413,16,"e"],[1432,13,1413,17],[1432,15,1413,19,"code"],[1432,19,1413,23],[1432,24,1414,16],[1432,32,1414,24],[1432,56,1414,48],[1432,57,1414,49],[1432,101,1414,93],[1432,103,1414,95],[1433,10,1415,16],[1433,14,1415,20],[1433,15,1415,21,"schedule"],[1433,23,1415,29],[1433,24,1415,30],[1433,38,1415,45],[1433,42,1415,49],[1433,43,1415,50],[1434,8,1416,12],[1435,8,1417,12],[1436,6,1418,8],[1437,6,1419,8],[1437,10,1419,12],[1437,11,1419,13,"schedule"],[1437,19,1419,21],[1437,20,1419,22],[1437,21,1419,23],[1438,4,1420,4],[1439,2,1421,0],[1441,2,1423,0],[1442,0,1424,0],[1443,0,1425,0],[1444,0,1426,0],[1445,0,1427,0],[1446,0,1428,0],[1447,0,1429,0],[1448,0,1430,0],[1449,0,1431,0],[1450,0,1432,0],[1451,0,1433,0],[1452,0,1434,0],[1453,0,1435,0],[1454,0,1436,0],[1455,0,1437,0],[1456,0,1438,0],[1457,2,1439,0],[1457,8,1439,6,"UserMetadata"],[1457,20,1439,18],[1457,21,1439,19],[1458,4,1440,4,"constructor"],[1458,15,1440,15,"constructor"],[1458,16,1440,16,"createdAt"],[1458,25,1440,25],[1458,27,1440,27,"lastLoginAt"],[1458,38,1440,38],[1458,40,1440,40],[1459,6,1441,8],[1459,10,1441,12],[1459,11,1441,13,"createdAt"],[1459,20,1441,22],[1459,23,1441,25,"createdAt"],[1459,32,1441,34],[1460,6,1442,8],[1460,10,1442,12],[1460,11,1442,13,"lastLoginAt"],[1460,22,1442,24],[1460,25,1442,27,"lastLoginAt"],[1460,36,1442,38],[1461,6,1443,8],[1461,10,1443,12],[1461,11,1443,13,"_initializeTime"],[1461,26,1443,28],[1461,27,1443,29],[1461,28,1443,30],[1462,4,1444,4],[1463,4,1445,4,"_initializeTime"],[1463,19,1445,19,"_initializeTime"],[1463,20,1445,19],[1463,22,1445,22],[1464,6,1446,8],[1464,10,1446,12],[1464,11,1446,13,"lastSignInTime"],[1464,25,1446,27],[1464,28,1446,30,"utcTimestampToDateString"],[1464,52,1446,54],[1464,53,1446,55],[1464,57,1446,59],[1464,58,1446,60,"lastLoginAt"],[1464,69,1446,71],[1464,70,1446,72],[1465,6,1447,8],[1465,10,1447,12],[1465,11,1447,13,"creationTime"],[1465,23,1447,25],[1465,26,1447,28,"utcTimestampToDateString"],[1465,50,1447,52],[1465,51,1447,53],[1465,55,1447,57],[1465,56,1447,58,"createdAt"],[1465,65,1447,67],[1465,66,1447,68],[1466,4,1448,4],[1467,4,1449,4,"_copy"],[1467,9,1449,9,"_copy"],[1467,10,1449,10,"metadata"],[1467,18,1449,18],[1467,20,1449,20],[1468,6,1450,8],[1468,10,1450,12],[1468,11,1450,13,"createdAt"],[1468,20,1450,22],[1468,23,1450,25,"metadata"],[1468,31,1450,33],[1468,32,1450,34,"createdAt"],[1468,41,1450,43],[1469,6,1451,8],[1469,10,1451,12],[1469,11,1451,13,"lastLoginAt"],[1469,22,1451,24],[1469,25,1451,27,"metadata"],[1469,33,1451,35],[1469,34,1451,36,"lastLoginAt"],[1469,45,1451,47],[1470,6,1452,8],[1470,10,1452,12],[1470,11,1452,13,"_initializeTime"],[1470,26,1452,28],[1470,27,1452,29],[1470,28,1452,30],[1471,4,1453,4],[1472,4,1454,4,"toJSON"],[1472,10,1454,10,"toJSON"],[1472,11,1454,10],[1472,13,1454,13],[1473,6,1455,8],[1473,13,1455,15],[1474,8,1456,12,"createdAt"],[1474,17,1456,21],[1474,19,1456,23],[1474,23,1456,27],[1474,24,1456,28,"createdAt"],[1474,33,1456,37],[1475,8,1457,12,"lastLoginAt"],[1475,19,1457,23],[1475,21,1457,25],[1475,25,1457,29],[1475,26,1457,30,"lastLoginAt"],[1476,6,1458,8],[1476,7,1458,9],[1477,4,1459,4],[1478,2,1460,0],[1480,2,1462,0],[1481,0,1463,0],[1482,0,1464,0],[1483,0,1465,0],[1484,0,1466,0],[1485,0,1467,0],[1486,0,1468,0],[1487,0,1469,0],[1488,0,1470,0],[1489,0,1471,0],[1490,0,1472,0],[1491,0,1473,0],[1492,0,1474,0],[1493,0,1475,0],[1494,0,1476,0],[1495,0,1477,0],[1496,2,1478,0],[1496,17,1478,15,"_reloadWithoutSaving"],[1496,37,1478,35,"_reloadWithoutSaving"],[1496,38,1478,36,"user"],[1496,42,1478,40],[1496,44,1478,42],[1497,4,1479,4],[1497,10,1479,10,"auth"],[1497,14,1479,14],[1497,17,1479,17,"user"],[1497,21,1479,21],[1497,22,1479,22,"auth"],[1497,26,1479,26],[1498,4,1480,4],[1498,10,1480,10,"idToken"],[1498,17,1480,17],[1498,20,1480,20],[1498,26,1480,26,"user"],[1498,30,1480,30],[1498,31,1480,31,"getIdToken"],[1498,41,1480,41],[1498,42,1480,42],[1498,43,1480,43],[1499,4,1481,4],[1499,10,1481,10,"response"],[1499,18,1481,18],[1499,21,1481,21],[1499,27,1481,27,"_logoutIfInvalidated"],[1499,47,1481,47],[1499,48,1481,48,"user"],[1499,52,1481,52],[1499,54,1481,54,"getAccountInfo"],[1499,68,1481,68],[1499,69,1481,69,"auth"],[1499,73,1481,73],[1499,75,1481,75],[1500,6,1481,77,"idToken"],[1501,4,1481,85],[1501,5,1481,86],[1501,6,1481,87],[1501,7,1481,88],[1502,4,1482,4,"_assert"],[1502,11,1482,11],[1502,12,1482,12,"response"],[1502,20,1482,20],[1502,22,1482,22,"users"],[1502,27,1482,27],[1502,28,1482,28,"length"],[1502,34,1482,34],[1502,36,1482,36,"auth"],[1502,40,1482,40],[1502,42,1482,42],[1502,58,1482,58],[1502,59,1482,59],[1502,93,1482,93],[1502,94,1482,94],[1503,4,1483,4],[1503,10,1483,10,"coreAccount"],[1503,21,1483,21],[1503,24,1483,24,"response"],[1503,32,1483,32],[1503,33,1483,33,"users"],[1503,38,1483,38],[1503,39,1483,39],[1503,40,1483,40],[1503,41,1483,41],[1504,4,1484,4,"user"],[1504,8,1484,8],[1504,9,1484,9,"_notifyReloadListener"],[1504,30,1484,30],[1504,31,1484,31,"coreAccount"],[1504,42,1484,42],[1504,43,1484,43],[1505,4,1485,4],[1505,10,1485,10,"newProviderData"],[1505,25,1485,25],[1505,28,1485,28,"coreAccount"],[1505,39,1485,39],[1505,40,1485,40,"providerUserInfo"],[1505,56,1485,56],[1505,58,1485,58,"length"],[1505,64,1485,64],[1505,67,1486,10,"extractProviderData"],[1505,86,1486,29],[1505,87,1486,30,"coreAccount"],[1505,98,1486,41],[1505,99,1486,42,"providerUserInfo"],[1505,115,1486,58],[1505,116,1486,59],[1505,119,1487,10],[1505,121,1487,12],[1506,4,1488,4],[1506,10,1488,10,"providerData"],[1506,22,1488,22],[1506,25,1488,25,"mergeProviderData"],[1506,42,1488,42],[1506,43,1488,43,"user"],[1506,47,1488,47],[1506,48,1488,48,"providerData"],[1506,60,1488,60],[1506,62,1488,62,"newProviderData"],[1506,77,1488,77],[1506,78,1488,78],[1507,4,1489,4],[1508,4,1490,4],[1509,4,1491,4],[1510,4,1492,4],[1511,4,1493,4],[1512,4,1494,4],[1512,10,1494,10,"oldIsAnonymous"],[1512,24,1494,24],[1512,27,1494,27,"user"],[1512,31,1494,31],[1512,32,1494,32,"isAnonymous"],[1512,43,1494,43],[1513,4,1495,4],[1513,10,1495,10,"newIsAnonymous"],[1513,24,1495,24],[1513,27,1495,27],[1513,29,1495,29,"user"],[1513,33,1495,33],[1513,34,1495,34,"email"],[1513,39,1495,39],[1513,43,1495,43,"coreAccount"],[1513,54,1495,54],[1513,55,1495,55,"passwordHash"],[1513,67,1495,67],[1513,68,1495,68],[1513,72,1495,72],[1513,73,1495,73,"providerData"],[1513,85,1495,85],[1513,87,1495,87,"length"],[1513,93,1495,93],[1514,4,1496,4],[1514,10,1496,10,"isAnonymous"],[1514,21,1496,21],[1514,24,1496,24],[1514,25,1496,25,"oldIsAnonymous"],[1514,39,1496,39],[1514,42,1496,42],[1514,47,1496,47],[1514,50,1496,50,"newIsAnonymous"],[1514,64,1496,64],[1515,4,1497,4],[1515,10,1497,10,"updates"],[1515,17,1497,17],[1515,20,1497,20],[1516,6,1498,8,"uid"],[1516,9,1498,11],[1516,11,1498,13,"coreAccount"],[1516,22,1498,24],[1516,23,1498,25,"localId"],[1516,30,1498,32],[1517,6,1499,8,"displayName"],[1517,17,1499,19],[1517,19,1499,21,"coreAccount"],[1517,30,1499,32],[1517,31,1499,33,"displayName"],[1517,42,1499,44],[1517,46,1499,48],[1517,50,1499,52],[1518,6,1500,8,"photoURL"],[1518,14,1500,16],[1518,16,1500,18,"coreAccount"],[1518,27,1500,29],[1518,28,1500,30,"photoUrl"],[1518,36,1500,38],[1518,40,1500,42],[1518,44,1500,46],[1519,6,1501,8,"email"],[1519,11,1501,13],[1519,13,1501,15,"coreAccount"],[1519,24,1501,26],[1519,25,1501,27,"email"],[1519,30,1501,32],[1519,34,1501,36],[1519,38,1501,40],[1520,6,1502,8,"emailVerified"],[1520,19,1502,21],[1520,21,1502,23,"coreAccount"],[1520,32,1502,34],[1520,33,1502,35,"emailVerified"],[1520,46,1502,48],[1520,50,1502,52],[1520,55,1502,57],[1521,6,1503,8,"phoneNumber"],[1521,17,1503,19],[1521,19,1503,21,"coreAccount"],[1521,30,1503,32],[1521,31,1503,33,"phoneNumber"],[1521,42,1503,44],[1521,46,1503,48],[1521,50,1503,52],[1522,6,1504,8,"tenantId"],[1522,14,1504,16],[1522,16,1504,18,"coreAccount"],[1522,27,1504,29],[1522,28,1504,30,"tenantId"],[1522,36,1504,38],[1522,40,1504,42],[1522,44,1504,46],[1523,6,1505,8,"providerData"],[1523,18,1505,20],[1524,6,1506,8,"metadata"],[1524,14,1506,16],[1524,16,1506,18],[1524,20,1506,22,"UserMetadata"],[1524,32,1506,34],[1524,33,1506,35,"coreAccount"],[1524,44,1506,46],[1524,45,1506,47,"createdAt"],[1524,54,1506,56],[1524,56,1506,58,"coreAccount"],[1524,67,1506,69],[1524,68,1506,70,"lastLoginAt"],[1524,79,1506,81],[1524,80,1506,82],[1525,6,1507,8,"isAnonymous"],[1526,4,1508,4],[1526,5,1508,5],[1527,4,1509,4,"Object"],[1527,10,1509,10],[1527,11,1509,11,"assign"],[1527,17,1509,17],[1527,18,1509,18,"user"],[1527,22,1509,22],[1527,24,1509,24,"updates"],[1527,31,1509,31],[1527,32,1509,32],[1528,2,1510,0],[1529,2,1511,0],[1530,0,1512,0],[1531,0,1513,0],[1532,0,1514,0],[1533,0,1515,0],[1534,0,1516,0],[1535,0,1517,0],[1536,2,1518,0],[1536,17,1518,15,"reload"],[1536,23,1518,21,"reload"],[1536,24,1518,22,"user"],[1536,28,1518,26],[1536,30,1518,28],[1537,4,1519,4],[1537,10,1519,10,"userInternal"],[1537,22,1519,22],[1537,25,1519,25],[1537,29,1519,25,"getModularInstance"],[1537,53,1519,43],[1537,55,1519,44,"user"],[1537,59,1519,48],[1537,60,1519,49],[1538,4,1520,4],[1538,10,1520,10,"_reloadWithoutSaving"],[1538,30,1520,30],[1538,31,1520,31,"userInternal"],[1538,43,1520,43],[1538,44,1520,44],[1539,4,1521,4],[1540,4,1522,4],[1541,4,1523,4],[1542,4,1524,4],[1542,10,1524,10,"userInternal"],[1542,22,1524,22],[1542,23,1524,23,"auth"],[1542,27,1524,27],[1542,28,1524,28,"_persistUserIfCurrent"],[1542,49,1524,49],[1542,50,1524,50,"userInternal"],[1542,62,1524,62],[1542,63,1524,63],[1543,4,1525,4,"userInternal"],[1543,16,1525,16],[1543,17,1525,17,"auth"],[1543,21,1525,21],[1543,22,1525,22,"_notifyListenersIfCurrent"],[1543,47,1525,47],[1543,48,1525,48,"userInternal"],[1543,60,1525,60],[1543,61,1525,61],[1544,2,1526,0],[1545,2,1527,0],[1545,11,1527,9,"mergeProviderData"],[1545,28,1527,26,"mergeProviderData"],[1545,29,1527,27,"original"],[1545,37,1527,35],[1545,39,1527,37,"newData"],[1545,46,1527,44],[1545,48,1527,46],[1546,4,1528,4],[1546,10,1528,10,"deduped"],[1546,17,1528,17],[1546,20,1528,20,"original"],[1546,28,1528,28],[1546,29,1528,29,"filter"],[1546,35,1528,35],[1546,36,1528,36,"o"],[1546,37,1528,37],[1546,41,1528,41],[1546,42,1528,42,"newData"],[1546,49,1528,49],[1546,50,1528,50,"some"],[1546,54,1528,54],[1546,55,1528,55,"n"],[1546,56,1528,56],[1546,60,1528,60,"n"],[1546,61,1528,61],[1546,62,1528,62,"providerId"],[1546,72,1528,72],[1546,77,1528,77,"o"],[1546,78,1528,78],[1546,79,1528,79,"providerId"],[1546,89,1528,89],[1546,90,1528,90],[1546,91,1528,91],[1547,4,1529,4],[1547,11,1529,11],[1547,12,1529,12],[1547,15,1529,15,"deduped"],[1547,22,1529,22],[1547,24,1529,24],[1547,27,1529,27,"newData"],[1547,34,1529,34],[1547,35,1529,35],[1548,2,1530,0],[1549,2,1531,0],[1549,11,1531,9,"extractProviderData"],[1549,30,1531,28,"extractProviderData"],[1549,31,1531,29,"providers"],[1549,40,1531,38],[1549,42,1531,40],[1550,4,1532,4],[1550,11,1532,11,"providers"],[1550,20,1532,20],[1550,21,1532,21,"map"],[1550,24,1532,24],[1550,25,1532,25],[1550,26,1532,26],[1551,6,1532,28,"providerId"],[1551,16,1532,38],[1552,6,1532,40],[1552,9,1532,43,"provider"],[1553,4,1532,52],[1553,5,1532,53],[1553,10,1532,58],[1554,6,1533,8],[1554,13,1533,15],[1555,8,1534,12,"providerId"],[1555,18,1534,22],[1556,8,1535,12,"uid"],[1556,11,1535,15],[1556,13,1535,17,"provider"],[1556,21,1535,25],[1556,22,1535,26,"rawId"],[1556,27,1535,31],[1556,31,1535,35],[1556,33,1535,37],[1557,8,1536,12,"displayName"],[1557,19,1536,23],[1557,21,1536,25,"provider"],[1557,29,1536,33],[1557,30,1536,34,"displayName"],[1557,41,1536,45],[1557,45,1536,49],[1557,49,1536,53],[1558,8,1537,12,"email"],[1558,13,1537,17],[1558,15,1537,19,"provider"],[1558,23,1537,27],[1558,24,1537,28,"email"],[1558,29,1537,33],[1558,33,1537,37],[1558,37,1537,41],[1559,8,1538,12,"phoneNumber"],[1559,19,1538,23],[1559,21,1538,25,"provider"],[1559,29,1538,33],[1559,30,1538,34,"phoneNumber"],[1559,41,1538,45],[1559,45,1538,49],[1559,49,1538,53],[1560,8,1539,12,"photoURL"],[1560,16,1539,20],[1560,18,1539,22,"provider"],[1560,26,1539,30],[1560,27,1539,31,"photoUrl"],[1560,35,1539,39],[1560,39,1539,43],[1561,6,1540,8],[1561,7,1540,9],[1562,4,1541,4],[1562,5,1541,5],[1562,6,1541,6],[1563,2,1542,0],[1565,2,1544,0],[1566,0,1545,0],[1567,0,1546,0],[1568,0,1547,0],[1569,0,1548,0],[1570,0,1549,0],[1571,0,1550,0],[1572,0,1551,0],[1573,0,1552,0],[1574,0,1553,0],[1575,0,1554,0],[1576,0,1555,0],[1577,0,1556,0],[1578,0,1557,0],[1579,0,1558,0],[1580,0,1559,0],[1581,2,1560,0],[1581,17,1560,15,"requestStsToken"],[1581,32,1560,30,"requestStsToken"],[1581,33,1560,31,"auth"],[1581,37,1560,35],[1581,39,1560,37,"refreshToken"],[1581,51,1560,49],[1581,53,1560,51],[1582,4,1561,4],[1582,10,1561,10,"response"],[1582,18,1561,18],[1582,21,1561,21],[1582,27,1561,27,"_performFetchWithErrorHandling"],[1582,57,1561,57],[1582,58,1561,58,"auth"],[1582,62,1561,62],[1582,64,1561,64],[1582,65,1561,65],[1582,66,1561,66],[1582,68,1561,68],[1582,80,1561,80],[1583,6,1562,8],[1583,12,1562,14,"body"],[1583,16,1562,18],[1583,19,1562,21],[1583,23,1562,21,"querystring"],[1583,40,1562,32],[1583,42,1562,33],[1584,8,1563,12],[1584,20,1563,24],[1584,22,1563,26],[1584,37,1563,41],[1585,8,1564,12],[1585,23,1564,27],[1585,25,1564,29,"refreshToken"],[1586,6,1565,8],[1586,7,1565,9],[1586,8,1565,10],[1586,9,1565,11,"slice"],[1586,14,1565,16],[1586,15,1565,17],[1586,16,1565,18],[1586,17,1565,19],[1587,6,1566,8],[1587,12,1566,14],[1588,8,1566,16,"tokenApiHost"],[1588,20,1566,28],[1589,8,1566,30,"apiKey"],[1590,6,1566,37],[1590,7,1566,38],[1590,10,1566,41,"auth"],[1590,14,1566,45],[1590,15,1566,46,"config"],[1590,21,1566,52],[1591,6,1567,8],[1591,12,1567,14,"url"],[1591,15,1567,17],[1591,18,1567,20],[1591,24,1567,26,"_getFinalTarget"],[1591,39,1567,41],[1591,40,1567,42,"auth"],[1591,44,1567,46],[1591,46,1567,48,"tokenApiHost"],[1591,58,1567,60],[1591,60,1567,62],[1591,71,1567,73],[1591,72,1567,74],[1591,94,1567,96],[1591,101,1567,103,"apiKey"],[1591,107,1567,109],[1591,109,1567,111],[1591,110,1567,112],[1592,6,1568,8],[1592,12,1568,14,"headers"],[1592,19,1568,21],[1592,22,1568,24],[1592,28,1568,30,"auth"],[1592,32,1568,34],[1592,33,1568,35,"_getAdditionalHeaders"],[1592,54,1568,56],[1592,55,1568,57],[1592,56,1568,58],[1593,6,1569,8,"headers"],[1593,13,1569,15],[1593,14,1569,16],[1593,28,1569,30],[1593,29,1569,31],[1593,59,1569,61],[1593,62,1569,64],[1593,97,1569,99],[1594,6,1570,8],[1594,12,1570,14,"options"],[1594,19,1570,21],[1594,22,1570,24],[1595,8,1571,12,"method"],[1595,14,1571,18],[1595,16,1571,20],[1595,22,1571,26],[1595,23,1571,27],[1596,8,1572,12,"headers"],[1596,15,1572,19],[1597,8,1573,12,"body"],[1598,6,1574,8],[1598,7,1574,9],[1599,6,1575,8],[1599,10,1575,12,"auth"],[1599,14,1575,16],[1599,15,1575,17,"emulatorConfig"],[1599,29,1575,31],[1599,33,1576,12],[1599,37,1576,12,"isCloudWorkstation"],[1599,61,1576,30],[1599,63,1576,31,"auth"],[1599,67,1576,35],[1599,68,1576,36,"emulatorConfig"],[1599,82,1576,50],[1599,83,1576,51,"host"],[1599,87,1576,55],[1599,88,1576,56],[1599,90,1576,58],[1600,8,1577,12,"options"],[1600,15,1577,19],[1600,16,1577,20,"credentials"],[1600,27,1577,31],[1600,30,1577,34],[1600,39,1577,43],[1601,6,1578,8],[1602,6,1579,8],[1602,13,1579,15,"FetchProvider"],[1602,26,1579,28],[1602,27,1579,29,"fetch"],[1602,32,1579,34],[1602,33,1579,35],[1602,34,1579,36],[1602,35,1579,37,"url"],[1602,38,1579,40],[1602,40,1579,42,"options"],[1602,47,1579,49],[1602,48,1579,50],[1603,4,1580,4],[1603,5,1580,5],[1603,6,1580,6],[1604,4,1581,4],[1605,4,1582,4],[1605,11,1582,11],[1606,6,1583,8,"accessToken"],[1606,17,1583,19],[1606,19,1583,21,"response"],[1606,27,1583,29],[1606,28,1583,30,"access_token"],[1606,40,1583,42],[1607,6,1584,8,"expiresIn"],[1607,15,1584,17],[1607,17,1584,19,"response"],[1607,25,1584,27],[1607,26,1584,28,"expires_in"],[1607,36,1584,38],[1608,6,1585,8,"refreshToken"],[1608,18,1585,20],[1608,20,1585,22,"response"],[1608,28,1585,30],[1608,29,1585,31,"refresh_token"],[1609,4,1586,4],[1609,5,1586,5],[1610,2,1587,0],[1611,2,1588,0],[1611,17,1588,15,"revokeToken"],[1611,28,1588,26,"revokeToken"],[1611,29,1588,27,"auth"],[1611,33,1588,31],[1611,35,1588,33,"request"],[1611,42,1588,40],[1611,44,1588,42],[1612,4,1589,4],[1612,11,1589,11,"_performApiRequest"],[1612,29,1589,29],[1612,30,1589,30,"auth"],[1612,34,1589,34],[1612,36,1589,36],[1612,42,1589,42],[1612,43,1589,43],[1612,66,1589,66],[1612,92,1589,92],[1612,93,1589,93],[1612,122,1589,122,"_addTidIfNecessary"],[1612,140,1589,140],[1612,141,1589,141,"auth"],[1612,145,1589,145],[1612,147,1589,147,"request"],[1612,154,1589,154],[1612,155,1589,155],[1612,156,1589,156],[1613,2,1590,0],[1615,2,1592,0],[1616,0,1593,0],[1617,0,1594,0],[1618,0,1595,0],[1619,0,1596,0],[1620,0,1597,0],[1621,0,1598,0],[1622,0,1599,0],[1623,0,1600,0],[1624,0,1601,0],[1625,0,1602,0],[1626,0,1603,0],[1627,0,1604,0],[1628,0,1605,0],[1629,0,1606,0],[1630,0,1607,0],[1631,2,1608,0],[1632,0,1609,0],[1633,0,1610,0],[1634,0,1611,0],[1635,0,1612,0],[1636,0,1613,0],[1637,2,1614,0],[1637,8,1614,6,"StsTokenManager"],[1637,23,1614,21],[1637,24,1614,22],[1638,4,1615,4,"constructor"],[1638,15,1615,15,"constructor"],[1638,16,1615,15],[1638,18,1615,18],[1639,6,1616,8],[1639,10,1616,12],[1639,11,1616,13,"refreshToken"],[1639,23,1616,25],[1639,26,1616,28],[1639,30,1616,32],[1640,6,1617,8],[1640,10,1617,12],[1640,11,1617,13,"accessToken"],[1640,22,1617,24],[1640,25,1617,27],[1640,29,1617,31],[1641,6,1618,8],[1641,10,1618,12],[1641,11,1618,13,"expirationTime"],[1641,25,1618,27],[1641,28,1618,30],[1641,32,1618,34],[1642,4,1619,4],[1643,4,1620,4],[1643,8,1620,8,"isExpired"],[1643,17,1620,17,"isExpired"],[1643,18,1620,17],[1643,20,1620,20],[1644,6,1621,8],[1644,13,1621,16],[1644,14,1621,17],[1644,18,1621,21],[1644,19,1621,22,"expirationTime"],[1644,33,1621,36],[1644,37,1622,12,"Date"],[1644,41,1622,16],[1644,42,1622,17,"now"],[1644,45,1622,20],[1644,46,1622,21],[1644,47,1622,22],[1644,50,1622,25],[1644,54,1622,29],[1644,55,1622,30,"expirationTime"],[1644,69,1622,44],[1644,72,1622,47],[1644,77,1622,52],[1644,78,1622,53],[1645,4,1623,4],[1646,4,1624,4,"updateFromServerResponse"],[1646,28,1624,28,"updateFromServerResponse"],[1646,29,1624,29,"response"],[1646,37,1624,37],[1646,39,1624,39],[1647,6,1625,8,"_assert"],[1647,13,1625,15],[1647,14,1625,16,"response"],[1647,22,1625,24],[1647,23,1625,25,"idToken"],[1647,30,1625,32],[1647,32,1625,34],[1647,48,1625,50],[1647,49,1625,51],[1647,83,1625,85],[1647,84,1625,86],[1648,6,1626,8,"_assert"],[1648,13,1626,15],[1648,14,1626,16],[1648,21,1626,23,"response"],[1648,29,1626,31],[1648,30,1626,32,"idToken"],[1648,37,1626,39],[1648,42,1626,44],[1648,53,1626,55],[1648,55,1626,57],[1648,71,1626,73],[1648,72,1626,74],[1648,106,1626,108],[1648,107,1626,109],[1649,6,1627,8,"_assert"],[1649,13,1627,15],[1649,14,1627,16],[1649,21,1627,23,"response"],[1649,29,1627,31],[1649,30,1627,32,"refreshToken"],[1649,42,1627,44],[1649,47,1627,49],[1649,58,1627,60],[1649,60,1627,62],[1649,76,1627,78],[1649,77,1627,79],[1649,111,1627,113],[1649,112,1627,114],[1650,6,1628,8],[1650,12,1628,14,"expiresIn"],[1650,21,1628,23],[1650,24,1628,26],[1650,35,1628,37],[1650,39,1628,41,"response"],[1650,47,1628,49],[1650,51,1628,53],[1650,58,1628,60,"response"],[1650,66,1628,68],[1650,67,1628,69,"expiresIn"],[1650,76,1628,78],[1650,81,1628,83],[1650,92,1628,94],[1650,95,1629,14,"Number"],[1650,101,1629,20],[1650,102,1629,21,"response"],[1650,110,1629,29],[1650,111,1629,30,"expiresIn"],[1650,120,1629,39],[1650,121,1629,40],[1650,124,1630,14,"_tokenExpiresIn"],[1650,139,1630,29],[1650,140,1630,30,"response"],[1650,148,1630,38],[1650,149,1630,39,"idToken"],[1650,156,1630,46],[1650,157,1630,47],[1651,6,1631,8],[1651,10,1631,12],[1651,11,1631,13,"updateTokensAndExpiration"],[1651,36,1631,38],[1651,37,1631,39,"response"],[1651,45,1631,47],[1651,46,1631,48,"idToken"],[1651,53,1631,55],[1651,55,1631,57,"response"],[1651,63,1631,65],[1651,64,1631,66,"refreshToken"],[1651,76,1631,78],[1651,78,1631,80,"expiresIn"],[1651,87,1631,89],[1651,88,1631,90],[1652,4,1632,4],[1653,4,1633,4,"updateFromIdToken"],[1653,21,1633,21,"updateFromIdToken"],[1653,22,1633,22,"idToken"],[1653,29,1633,29],[1653,31,1633,31],[1654,6,1634,8,"_assert"],[1654,13,1634,15],[1654,14,1634,16,"idToken"],[1654,21,1634,23],[1654,22,1634,24,"length"],[1654,28,1634,30],[1654,33,1634,35],[1654,34,1634,36],[1654,36,1634,38],[1654,52,1634,54],[1654,53,1634,55],[1654,87,1634,89],[1654,88,1634,90],[1655,6,1635,8],[1655,12,1635,14,"expiresIn"],[1655,21,1635,23],[1655,24,1635,26,"_tokenExpiresIn"],[1655,39,1635,41],[1655,40,1635,42,"idToken"],[1655,47,1635,49],[1655,48,1635,50],[1656,6,1636,8],[1656,10,1636,12],[1656,11,1636,13,"updateTokensAndExpiration"],[1656,36,1636,38],[1656,37,1636,39,"idToken"],[1656,44,1636,46],[1656,46,1636,48],[1656,50,1636,52],[1656,52,1636,54,"expiresIn"],[1656,61,1636,63],[1656,62,1636,64],[1657,4,1637,4],[1658,4,1638,4],[1658,10,1638,10,"getToken"],[1658,18,1638,18,"getToken"],[1658,19,1638,19,"auth"],[1658,23,1638,23],[1658,25,1638,25,"forceRefresh"],[1658,37,1638,37],[1658,40,1638,40],[1658,45,1638,45],[1658,47,1638,47],[1659,6,1639,8],[1659,10,1639,12],[1659,11,1639,13,"forceRefresh"],[1659,23,1639,25],[1659,27,1639,29],[1659,31,1639,33],[1659,32,1639,34,"accessToken"],[1659,43,1639,45],[1659,47,1639,49],[1659,48,1639,50],[1659,52,1639,54],[1659,53,1639,55,"isExpired"],[1659,62,1639,64],[1659,64,1639,66],[1660,8,1640,12],[1660,15,1640,19],[1660,19,1640,23],[1660,20,1640,24,"accessToken"],[1660,31,1640,35],[1661,6,1641,8],[1662,6,1642,8,"_assert"],[1662,13,1642,15],[1662,14,1642,16],[1662,18,1642,20],[1662,19,1642,21,"refreshToken"],[1662,31,1642,33],[1662,33,1642,35,"auth"],[1662,37,1642,39],[1662,39,1642,41],[1662,59,1642,61],[1662,60,1642,62],[1662,93,1642,95],[1662,94,1642,96],[1663,6,1643,8],[1663,10,1643,12],[1663,14,1643,16],[1663,15,1643,17,"refreshToken"],[1663,27,1643,29],[1663,29,1643,31],[1664,8,1644,12],[1664,14,1644,18],[1664,18,1644,22],[1664,19,1644,23,"refresh"],[1664,26,1644,30],[1664,27,1644,31,"auth"],[1664,31,1644,35],[1664,33,1644,37],[1664,37,1644,41],[1664,38,1644,42,"refreshToken"],[1664,50,1644,54],[1664,51,1644,55],[1665,8,1645,12],[1665,15,1645,19],[1665,19,1645,23],[1665,20,1645,24,"accessToken"],[1665,31,1645,35],[1666,6,1646,8],[1667,6,1647,8],[1667,13,1647,15],[1667,17,1647,19],[1668,4,1648,4],[1669,4,1649,4,"clearRefreshToken"],[1669,21,1649,21,"clearRefreshToken"],[1669,22,1649,21],[1669,24,1649,24],[1670,6,1650,8],[1670,10,1650,12],[1670,11,1650,13,"refreshToken"],[1670,23,1650,25],[1670,26,1650,28],[1670,30,1650,32],[1671,4,1651,4],[1672,4,1652,4],[1672,10,1652,10,"refresh"],[1672,17,1652,17,"refresh"],[1672,18,1652,18,"auth"],[1672,22,1652,22],[1672,24,1652,24,"oldToken"],[1672,32,1652,32],[1672,34,1652,34],[1673,6,1653,8],[1673,12,1653,14],[1674,8,1653,16,"accessToken"],[1674,19,1653,27],[1675,8,1653,29,"refreshToken"],[1675,20,1653,41],[1676,8,1653,43,"expiresIn"],[1677,6,1653,53],[1677,7,1653,54],[1677,10,1653,57],[1677,16,1653,63,"requestStsToken"],[1677,31,1653,78],[1677,32,1653,79,"auth"],[1677,36,1653,83],[1677,38,1653,85,"oldToken"],[1677,46,1653,93],[1677,47,1653,94],[1678,6,1654,8],[1678,10,1654,12],[1678,11,1654,13,"updateTokensAndExpiration"],[1678,36,1654,38],[1678,37,1654,39,"accessToken"],[1678,48,1654,50],[1678,50,1654,52,"refreshToken"],[1678,62,1654,64],[1678,64,1654,66,"Number"],[1678,70,1654,72],[1678,71,1654,73,"expiresIn"],[1678,80,1654,82],[1678,81,1654,83],[1678,82,1654,84],[1679,4,1655,4],[1680,4,1656,4,"updateTokensAndExpiration"],[1680,29,1656,29,"updateTokensAndExpiration"],[1680,30,1656,30,"accessToken"],[1680,41,1656,41],[1680,43,1656,43,"refreshToken"],[1680,55,1656,55],[1680,57,1656,57,"expiresInSec"],[1680,69,1656,69],[1680,71,1656,71],[1681,6,1657,8],[1681,10,1657,12],[1681,11,1657,13,"refreshToken"],[1681,23,1657,25],[1681,26,1657,28,"refreshToken"],[1681,38,1657,40],[1681,42,1657,44],[1681,46,1657,48],[1682,6,1658,8],[1682,10,1658,12],[1682,11,1658,13,"accessToken"],[1682,22,1658,24],[1682,25,1658,27,"accessToken"],[1682,36,1658,38],[1682,40,1658,42],[1682,44,1658,46],[1683,6,1659,8],[1683,10,1659,12],[1683,11,1659,13,"expirationTime"],[1683,25,1659,27],[1683,28,1659,30,"Date"],[1683,32,1659,34],[1683,33,1659,35,"now"],[1683,36,1659,38],[1683,37,1659,39],[1683,38,1659,40],[1683,41,1659,43,"expiresInSec"],[1683,53,1659,55],[1683,56,1659,58],[1683,60,1659,62],[1684,4,1660,4],[1685,4,1661,4],[1685,11,1661,11,"fromJSON"],[1685,19,1661,19,"fromJSON"],[1685,20,1661,20,"appName"],[1685,27,1661,27],[1685,29,1661,29,"object"],[1685,35,1661,35],[1685,37,1661,37],[1686,6,1662,8],[1686,12,1662,14],[1687,8,1662,16,"refreshToken"],[1687,20,1662,28],[1688,8,1662,30,"accessToken"],[1688,19,1662,41],[1689,8,1662,43,"expirationTime"],[1690,6,1662,58],[1690,7,1662,59],[1690,10,1662,62,"object"],[1690,16,1662,68],[1691,6,1663,8],[1691,12,1663,14,"manager"],[1691,19,1663,21],[1691,22,1663,24],[1691,26,1663,28,"StsTokenManager"],[1691,41,1663,43],[1691,42,1663,44],[1691,43,1663,45],[1692,6,1664,8],[1692,10,1664,12,"refreshToken"],[1692,22,1664,24],[1692,24,1664,26],[1693,8,1665,12,"_assert"],[1693,15,1665,19],[1693,16,1665,20],[1693,23,1665,27,"refreshToken"],[1693,35,1665,39],[1693,40,1665,44],[1693,48,1665,52],[1693,50,1665,54],[1693,66,1665,70],[1693,67,1665,71],[1693,103,1665,107],[1694,10,1666,16,"appName"],[1695,8,1667,12],[1695,9,1667,13],[1695,10,1667,14],[1696,8,1668,12,"manager"],[1696,15,1668,19],[1696,16,1668,20,"refreshToken"],[1696,28,1668,32],[1696,31,1668,35,"refreshToken"],[1696,43,1668,47],[1697,6,1669,8],[1698,6,1670,8],[1698,10,1670,12,"accessToken"],[1698,21,1670,23],[1698,23,1670,25],[1699,8,1671,12,"_assert"],[1699,15,1671,19],[1699,16,1671,20],[1699,23,1671,27,"accessToken"],[1699,34,1671,38],[1699,39,1671,43],[1699,47,1671,51],[1699,49,1671,53],[1699,65,1671,69],[1699,66,1671,70],[1699,102,1671,106],[1700,10,1672,16,"appName"],[1701,8,1673,12],[1701,9,1673,13],[1701,10,1673,14],[1702,8,1674,12,"manager"],[1702,15,1674,19],[1702,16,1674,20,"accessToken"],[1702,27,1674,31],[1702,30,1674,34,"accessToken"],[1702,41,1674,45],[1703,6,1675,8],[1704,6,1676,8],[1704,10,1676,12,"expirationTime"],[1704,24,1676,26],[1704,26,1676,28],[1705,8,1677,12,"_assert"],[1705,15,1677,19],[1705,16,1677,20],[1705,23,1677,27,"expirationTime"],[1705,37,1677,41],[1705,42,1677,46],[1705,50,1677,54],[1705,52,1677,56],[1705,68,1677,72],[1705,69,1677,73],[1705,105,1677,109],[1706,10,1678,16,"appName"],[1707,8,1679,12],[1707,9,1679,13],[1707,10,1679,14],[1708,8,1680,12,"manager"],[1708,15,1680,19],[1708,16,1680,20,"expirationTime"],[1708,30,1680,34],[1708,33,1680,37,"expirationTime"],[1708,47,1680,51],[1709,6,1681,8],[1710,6,1682,8],[1710,13,1682,15,"manager"],[1710,20,1682,22],[1711,4,1683,4],[1712,4,1684,4,"toJSON"],[1712,10,1684,10,"toJSON"],[1712,11,1684,10],[1712,13,1684,13],[1713,6,1685,8],[1713,13,1685,15],[1714,8,1686,12,"refreshToken"],[1714,20,1686,24],[1714,22,1686,26],[1714,26,1686,30],[1714,27,1686,31,"refreshToken"],[1714,39,1686,43],[1715,8,1687,12,"accessToken"],[1715,19,1687,23],[1715,21,1687,25],[1715,25,1687,29],[1715,26,1687,30,"accessToken"],[1715,37,1687,41],[1716,8,1688,12,"expirationTime"],[1716,22,1688,26],[1716,24,1688,28],[1716,28,1688,32],[1716,29,1688,33,"expirationTime"],[1717,6,1689,8],[1717,7,1689,9],[1718,4,1690,4],[1719,4,1691,4,"_assign"],[1719,11,1691,11,"_assign"],[1719,12,1691,12,"stsTokenManager"],[1719,27,1691,27],[1719,29,1691,29],[1720,6,1692,8],[1720,10,1692,12],[1720,11,1692,13,"accessToken"],[1720,22,1692,24],[1720,25,1692,27,"stsTokenManager"],[1720,40,1692,42],[1720,41,1692,43,"accessToken"],[1720,52,1692,54],[1721,6,1693,8],[1721,10,1693,12],[1721,11,1693,13,"refreshToken"],[1721,23,1693,25],[1721,26,1693,28,"stsTokenManager"],[1721,41,1693,43],[1721,42,1693,44,"refreshToken"],[1721,54,1693,56],[1722,6,1694,8],[1722,10,1694,12],[1722,11,1694,13,"expirationTime"],[1722,25,1694,27],[1722,28,1694,30,"stsTokenManager"],[1722,43,1694,45],[1722,44,1694,46,"expirationTime"],[1722,58,1694,60],[1723,4,1695,4],[1724,4,1696,4,"_clone"],[1724,10,1696,10,"_clone"],[1724,11,1696,10],[1724,13,1696,13],[1725,6,1697,8],[1725,13,1697,15,"Object"],[1725,19,1697,21],[1725,20,1697,22,"assign"],[1725,26,1697,28],[1725,27,1697,29],[1725,31,1697,33,"StsTokenManager"],[1725,46,1697,48],[1725,47,1697,49],[1725,48,1697,50],[1725,50,1697,52],[1725,54,1697,56],[1725,55,1697,57,"toJSON"],[1725,61,1697,63],[1725,62,1697,64],[1725,63,1697,65],[1725,64,1697,66],[1726,4,1698,4],[1727,4,1699,4,"_performRefresh"],[1727,19,1699,19,"_performRefresh"],[1727,20,1699,19],[1727,22,1699,22],[1728,6,1700,8],[1728,13,1700,15,"debugFail"],[1728,22,1700,24],[1728,23,1700,25],[1728,40,1700,42],[1728,41,1700,43],[1729,4,1701,4],[1730,2,1702,0],[1732,2,1704,0],[1733,0,1705,0],[1734,0,1706,0],[1735,0,1707,0],[1736,0,1708,0],[1737,0,1709,0],[1738,0,1710,0],[1739,0,1711,0],[1740,0,1712,0],[1741,0,1713,0],[1742,0,1714,0],[1743,0,1715,0],[1744,0,1716,0],[1745,0,1717,0],[1746,0,1718,0],[1747,0,1719,0],[1748,2,1720,0],[1748,11,1720,9,"assertStringOrUndefined"],[1748,34,1720,32,"assertStringOrUndefined"],[1748,35,1720,33,"assertion"],[1748,44,1720,42],[1748,46,1720,44,"appName"],[1748,53,1720,51],[1748,55,1720,53],[1749,4,1721,4,"_assert"],[1749,11,1721,11],[1749,12,1721,12],[1749,19,1721,19,"assertion"],[1749,28,1721,28],[1749,33,1721,33],[1749,41,1721,41],[1749,45,1721,45],[1749,52,1721,52,"assertion"],[1749,61,1721,61],[1749,66,1721,66],[1749,77,1721,77],[1749,79,1721,79],[1749,95,1721,95],[1749,96,1721,96],[1749,132,1721,132],[1750,6,1721,134,"appName"],[1751,4,1721,142],[1751,5,1721,143],[1751,6,1721,144],[1752,2,1722,0],[1753,2,1723,0],[1753,8,1723,6,"UserImpl"],[1753,16,1723,14],[1753,17,1723,15],[1754,4,1724,4,"constructor"],[1754,15,1724,15,"constructor"],[1754,16,1724,16],[1755,6,1724,18,"uid"],[1755,9,1724,21],[1756,6,1724,23,"auth"],[1756,10,1724,27],[1757,6,1724,29,"stsTokenManager"],[1757,21,1724,44],[1758,6,1724,46],[1758,9,1724,49,"opt"],[1759,4,1724,53],[1759,5,1724,54],[1759,7,1724,56],[1760,6,1725,8],[1761,6,1726,8],[1761,10,1726,12],[1761,11,1726,13,"providerId"],[1761,21,1726,23],[1761,24,1726,26],[1761,34,1726,36],[1761,35,1726,37],[1762,6,1727,8],[1762,10,1727,12],[1762,11,1727,13,"proactiveRefresh"],[1762,27,1727,29],[1762,30,1727,32],[1762,34,1727,36,"ProactiveRefresh"],[1762,50,1727,52],[1762,51,1727,53],[1762,55,1727,57],[1762,56,1727,58],[1763,6,1728,8],[1763,10,1728,12],[1763,11,1728,13,"reloadUserInfo"],[1763,25,1728,27],[1763,28,1728,30],[1763,32,1728,34],[1764,6,1729,8],[1764,10,1729,12],[1764,11,1729,13,"reloadListener"],[1764,25,1729,27],[1764,28,1729,30],[1764,32,1729,34],[1765,6,1730,8],[1765,10,1730,12],[1765,11,1730,13,"uid"],[1765,14,1730,16],[1765,17,1730,19,"uid"],[1765,20,1730,22],[1766,6,1731,8],[1766,10,1731,12],[1766,11,1731,13,"auth"],[1766,15,1731,17],[1766,18,1731,20,"auth"],[1766,22,1731,24],[1767,6,1732,8],[1767,10,1732,12],[1767,11,1732,13,"stsTokenManager"],[1767,26,1732,28],[1767,29,1732,31,"stsTokenManager"],[1767,44,1732,46],[1768,6,1733,8],[1768,10,1733,12],[1768,11,1733,13,"accessToken"],[1768,22,1733,24],[1768,25,1733,27,"stsTokenManager"],[1768,40,1733,42],[1768,41,1733,43,"accessToken"],[1768,52,1733,54],[1769,6,1734,8],[1769,10,1734,12],[1769,11,1734,13,"displayName"],[1769,22,1734,24],[1769,25,1734,27,"opt"],[1769,28,1734,30],[1769,29,1734,31,"displayName"],[1769,40,1734,42],[1769,44,1734,46],[1769,48,1734,50],[1770,6,1735,8],[1770,10,1735,12],[1770,11,1735,13,"email"],[1770,16,1735,18],[1770,19,1735,21,"opt"],[1770,22,1735,24],[1770,23,1735,25,"email"],[1770,28,1735,30],[1770,32,1735,34],[1770,36,1735,38],[1771,6,1736,8],[1771,10,1736,12],[1771,11,1736,13,"emailVerified"],[1771,24,1736,26],[1771,27,1736,29,"opt"],[1771,30,1736,32],[1771,31,1736,33,"emailVerified"],[1771,44,1736,46],[1771,48,1736,50],[1771,53,1736,55],[1772,6,1737,8],[1772,10,1737,12],[1772,11,1737,13,"phoneNumber"],[1772,22,1737,24],[1772,25,1737,27,"opt"],[1772,28,1737,30],[1772,29,1737,31,"phoneNumber"],[1772,40,1737,42],[1772,44,1737,46],[1772,48,1737,50],[1773,6,1738,8],[1773,10,1738,12],[1773,11,1738,13,"photoURL"],[1773,19,1738,21],[1773,22,1738,24,"opt"],[1773,25,1738,27],[1773,26,1738,28,"photoURL"],[1773,34,1738,36],[1773,38,1738,40],[1773,42,1738,44],[1774,6,1739,8],[1774,10,1739,12],[1774,11,1739,13,"isAnonymous"],[1774,22,1739,24],[1774,25,1739,27,"opt"],[1774,28,1739,30],[1774,29,1739,31,"isAnonymous"],[1774,40,1739,42],[1774,44,1739,46],[1774,49,1739,51],[1775,6,1740,8],[1775,10,1740,12],[1775,11,1740,13,"tenantId"],[1775,19,1740,21],[1775,22,1740,24,"opt"],[1775,25,1740,27],[1775,26,1740,28,"tenantId"],[1775,34,1740,36],[1775,38,1740,40],[1775,42,1740,44],[1776,6,1741,8],[1776,10,1741,12],[1776,11,1741,13,"providerData"],[1776,23,1741,25],[1776,26,1741,28,"opt"],[1776,29,1741,31],[1776,30,1741,32,"providerData"],[1776,42,1741,44],[1776,45,1741,47],[1776,46,1741,48],[1776,49,1741,51,"opt"],[1776,52,1741,54],[1776,53,1741,55,"providerData"],[1776,65,1741,67],[1776,66,1741,68],[1776,69,1741,71],[1776,71,1741,73],[1777,6,1742,8],[1777,10,1742,12],[1777,11,1742,13,"metadata"],[1777,19,1742,21],[1777,22,1742,24],[1777,26,1742,28,"UserMetadata"],[1777,38,1742,40],[1777,39,1742,41,"opt"],[1777,42,1742,44],[1777,43,1742,45,"createdAt"],[1777,52,1742,54],[1777,56,1742,58,"undefined"],[1777,65,1742,67],[1777,67,1742,69,"opt"],[1777,70,1742,72],[1777,71,1742,73,"lastLoginAt"],[1777,82,1742,84],[1777,86,1742,88,"undefined"],[1777,95,1742,97],[1777,96,1742,98],[1778,4,1743,4],[1779,4,1744,4],[1779,10,1744,10,"getIdToken"],[1779,20,1744,20,"getIdToken"],[1779,21,1744,21,"forceRefresh"],[1779,33,1744,33],[1779,35,1744,35],[1780,6,1745,8],[1780,12,1745,14,"accessToken"],[1780,23,1745,25],[1780,26,1745,28],[1780,32,1745,34,"_logoutIfInvalidated"],[1780,52,1745,54],[1780,53,1745,55],[1780,57,1745,59],[1780,59,1745,61],[1780,63,1745,65],[1780,64,1745,66,"stsTokenManager"],[1780,79,1745,81],[1780,80,1745,82,"getToken"],[1780,88,1745,90],[1780,89,1745,91],[1780,93,1745,95],[1780,94,1745,96,"auth"],[1780,98,1745,100],[1780,100,1745,102,"forceRefresh"],[1780,112,1745,114],[1780,113,1745,115],[1780,114,1745,116],[1781,6,1746,8,"_assert"],[1781,13,1746,15],[1781,14,1746,16,"accessToken"],[1781,25,1746,27],[1781,27,1746,29],[1781,31,1746,33],[1781,32,1746,34,"auth"],[1781,36,1746,38],[1781,38,1746,40],[1781,54,1746,56],[1781,55,1746,57],[1781,89,1746,91],[1781,90,1746,92],[1782,6,1747,8],[1782,10,1747,12],[1782,14,1747,16],[1782,15,1747,17,"accessToken"],[1782,26,1747,28],[1782,31,1747,33,"accessToken"],[1782,42,1747,44],[1782,44,1747,46],[1783,8,1748,12],[1783,12,1748,16],[1783,13,1748,17,"accessToken"],[1783,24,1748,28],[1783,27,1748,31,"accessToken"],[1783,38,1748,42],[1784,8,1749,12],[1784,14,1749,18],[1784,18,1749,22],[1784,19,1749,23,"auth"],[1784,23,1749,27],[1784,24,1749,28,"_persistUserIfCurrent"],[1784,45,1749,49],[1784,46,1749,50],[1784,50,1749,54],[1784,51,1749,55],[1785,8,1750,12],[1785,12,1750,16],[1785,13,1750,17,"auth"],[1785,17,1750,21],[1785,18,1750,22,"_notifyListenersIfCurrent"],[1785,43,1750,47],[1785,44,1750,48],[1785,48,1750,52],[1785,49,1750,53],[1786,6,1751,8],[1787,6,1752,8],[1787,13,1752,15,"accessToken"],[1787,24,1752,26],[1788,4,1753,4],[1789,4,1754,4,"getIdTokenResult"],[1789,20,1754,20,"getIdTokenResult"],[1789,21,1754,21,"forceRefresh"],[1789,33,1754,33],[1789,35,1754,35],[1790,6,1755,8],[1790,13,1755,15,"getIdTokenResult"],[1790,29,1755,31],[1790,30,1755,32],[1790,34,1755,36],[1790,36,1755,38,"forceRefresh"],[1790,48,1755,50],[1790,49,1755,51],[1791,4,1756,4],[1792,4,1757,4,"reload"],[1792,10,1757,10,"reload"],[1792,11,1757,10],[1792,13,1757,13],[1793,6,1758,8],[1793,13,1758,15,"reload"],[1793,19,1758,21],[1793,20,1758,22],[1793,24,1758,26],[1793,25,1758,27],[1794,4,1759,4],[1795,4,1760,4,"_assign"],[1795,11,1760,11,"_assign"],[1795,12,1760,12,"user"],[1795,16,1760,16],[1795,18,1760,18],[1796,6,1761,8],[1796,10,1761,12],[1796,14,1761,16],[1796,19,1761,21,"user"],[1796,23,1761,25],[1796,25,1761,27],[1797,8,1762,12],[1798,6,1763,8],[1799,6,1764,8,"_assert"],[1799,13,1764,15],[1799,14,1764,16],[1799,18,1764,20],[1799,19,1764,21,"uid"],[1799,22,1764,24],[1799,27,1764,29,"user"],[1799,31,1764,33],[1799,32,1764,34,"uid"],[1799,35,1764,37],[1799,37,1764,39],[1799,41,1764,43],[1799,42,1764,44,"auth"],[1799,46,1764,48],[1799,48,1764,50],[1799,64,1764,66],[1799,65,1764,67],[1799,99,1764,101],[1799,100,1764,102],[1800,6,1765,8],[1800,10,1765,12],[1800,11,1765,13,"displayName"],[1800,22,1765,24],[1800,25,1765,27,"user"],[1800,29,1765,31],[1800,30,1765,32,"displayName"],[1800,41,1765,43],[1801,6,1766,8],[1801,10,1766,12],[1801,11,1766,13,"photoURL"],[1801,19,1766,21],[1801,22,1766,24,"user"],[1801,26,1766,28],[1801,27,1766,29,"photoURL"],[1801,35,1766,37],[1802,6,1767,8],[1802,10,1767,12],[1802,11,1767,13,"email"],[1802,16,1767,18],[1802,19,1767,21,"user"],[1802,23,1767,25],[1802,24,1767,26,"email"],[1802,29,1767,31],[1803,6,1768,8],[1803,10,1768,12],[1803,11,1768,13,"emailVerified"],[1803,24,1768,26],[1803,27,1768,29,"user"],[1803,31,1768,33],[1803,32,1768,34,"emailVerified"],[1803,45,1768,47],[1804,6,1769,8],[1804,10,1769,12],[1804,11,1769,13,"phoneNumber"],[1804,22,1769,24],[1804,25,1769,27,"user"],[1804,29,1769,31],[1804,30,1769,32,"phoneNumber"],[1804,41,1769,43],[1805,6,1770,8],[1805,10,1770,12],[1805,11,1770,13,"isAnonymous"],[1805,22,1770,24],[1805,25,1770,27,"user"],[1805,29,1770,31],[1805,30,1770,32,"isAnonymous"],[1805,41,1770,43],[1806,6,1771,8],[1806,10,1771,12],[1806,11,1771,13,"tenantId"],[1806,19,1771,21],[1806,22,1771,24,"user"],[1806,26,1771,28],[1806,27,1771,29,"tenantId"],[1806,35,1771,37],[1807,6,1772,8],[1807,10,1772,12],[1807,11,1772,13,"providerData"],[1807,23,1772,25],[1807,26,1772,28,"user"],[1807,30,1772,32],[1807,31,1772,33,"providerData"],[1807,43,1772,45],[1807,44,1772,46,"map"],[1807,47,1772,49],[1807,48,1772,50,"userInfo"],[1807,56,1772,58],[1807,61,1772,63],[1808,8,1772,65],[1808,11,1772,68,"userInfo"],[1809,6,1772,77],[1809,7,1772,78],[1809,8,1772,79],[1809,9,1772,80],[1810,6,1773,8],[1810,10,1773,12],[1810,11,1773,13,"metadata"],[1810,19,1773,21],[1810,20,1773,22,"_copy"],[1810,25,1773,27],[1810,26,1773,28,"user"],[1810,30,1773,32],[1810,31,1773,33,"metadata"],[1810,39,1773,41],[1810,40,1773,42],[1811,6,1774,8],[1811,10,1774,12],[1811,11,1774,13,"stsTokenManager"],[1811,26,1774,28],[1811,27,1774,29,"_assign"],[1811,34,1774,36],[1811,35,1774,37,"user"],[1811,39,1774,41],[1811,40,1774,42,"stsTokenManager"],[1811,55,1774,57],[1811,56,1774,58],[1812,4,1775,4],[1813,4,1776,4,"_clone"],[1813,10,1776,10,"_clone"],[1813,11,1776,11,"auth"],[1813,15,1776,15],[1813,17,1776,17],[1814,6,1777,8],[1814,12,1777,14,"newUser"],[1814,19,1777,21],[1814,22,1777,24],[1814,26,1777,28,"UserImpl"],[1814,34,1777,36],[1814,35,1777,37],[1815,8,1778,12],[1815,11,1778,15],[1815,15,1778,19],[1816,8,1779,12,"auth"],[1816,12,1779,16],[1817,8,1780,12,"stsTokenManager"],[1817,23,1780,27],[1817,25,1780,29],[1817,29,1780,33],[1817,30,1780,34,"stsTokenManager"],[1817,45,1780,49],[1817,46,1780,50,"_clone"],[1817,52,1780,56],[1817,53,1780,57],[1818,6,1781,8],[1818,7,1781,9],[1818,8,1781,10],[1819,6,1782,8,"newUser"],[1819,13,1782,15],[1819,14,1782,16,"metadata"],[1819,22,1782,24],[1819,23,1782,25,"_copy"],[1819,28,1782,30],[1819,29,1782,31],[1819,33,1782,35],[1819,34,1782,36,"metadata"],[1819,42,1782,44],[1819,43,1782,45],[1820,6,1783,8],[1820,13,1783,15,"newUser"],[1820,20,1783,22],[1821,4,1784,4],[1822,4,1785,4,"_onReload"],[1822,13,1785,13,"_onReload"],[1822,14,1785,14,"callback"],[1822,22,1785,22],[1822,24,1785,24],[1823,6,1786,8],[1824,6,1787,8,"_assert"],[1824,13,1787,15],[1824,14,1787,16],[1824,15,1787,17],[1824,19,1787,21],[1824,20,1787,22,"reloadListener"],[1824,34,1787,36],[1824,36,1787,38],[1824,40,1787,42],[1824,41,1787,43,"auth"],[1824,45,1787,47],[1824,47,1787,49],[1824,63,1787,65],[1824,64,1787,66],[1824,98,1787,100],[1824,99,1787,101],[1825,6,1788,8],[1825,10,1788,12],[1825,11,1788,13,"reloadListener"],[1825,25,1788,27],[1825,28,1788,30,"callback"],[1825,36,1788,38],[1826,6,1789,8],[1826,10,1789,12],[1826,14,1789,16],[1826,15,1789,17,"reloadUserInfo"],[1826,29,1789,31],[1826,31,1789,33],[1827,8,1790,12],[1827,12,1790,16],[1827,13,1790,17,"_notifyReloadListener"],[1827,34,1790,38],[1827,35,1790,39],[1827,39,1790,43],[1827,40,1790,44,"reloadUserInfo"],[1827,54,1790,58],[1827,55,1790,59],[1828,8,1791,12],[1828,12,1791,16],[1828,13,1791,17,"reloadUserInfo"],[1828,27,1791,31],[1828,30,1791,34],[1828,34,1791,38],[1829,6,1792,8],[1830,4,1793,4],[1831,4,1794,4,"_notifyReloadListener"],[1831,25,1794,25,"_notifyReloadListener"],[1831,26,1794,26,"userInfo"],[1831,34,1794,34],[1831,36,1794,36],[1832,6,1795,8],[1832,10,1795,12],[1832,14,1795,16],[1832,15,1795,17,"reloadListener"],[1832,29,1795,31],[1832,31,1795,33],[1833,8,1796,12],[1833,12,1796,16],[1833,13,1796,17,"reloadListener"],[1833,27,1796,31],[1833,28,1796,32,"userInfo"],[1833,36,1796,40],[1833,37,1796,41],[1834,6,1797,8],[1834,7,1797,9],[1834,13,1798,13],[1835,8,1799,12],[1836,8,1800,12],[1836,12,1800,16],[1836,13,1800,17,"reloadUserInfo"],[1836,27,1800,31],[1836,30,1800,34,"userInfo"],[1836,38,1800,42],[1837,6,1801,8],[1838,4,1802,4],[1839,4,1803,4,"_startProactiveRefresh"],[1839,26,1803,26,"_startProactiveRefresh"],[1839,27,1803,26],[1839,29,1803,29],[1840,6,1804,8],[1840,10,1804,12],[1840,11,1804,13,"proactiveRefresh"],[1840,27,1804,29],[1840,28,1804,30,"_start"],[1840,34,1804,36],[1840,35,1804,37],[1840,36,1804,38],[1841,4,1805,4],[1842,4,1806,4,"_stopProactiveRefresh"],[1842,25,1806,25,"_stopProactiveRefresh"],[1842,26,1806,25],[1842,28,1806,28],[1843,6,1807,8],[1843,10,1807,12],[1843,11,1807,13,"proactiveRefresh"],[1843,27,1807,29],[1843,28,1807,30,"_stop"],[1843,33,1807,35],[1843,34,1807,36],[1843,35,1807,37],[1844,4,1808,4],[1845,4,1809,4],[1845,10,1809,10,"_updateTokensIfNecessary"],[1845,34,1809,34,"_updateTokensIfNecessary"],[1845,35,1809,35,"response"],[1845,43,1809,43],[1845,45,1809,45,"reload"],[1845,51,1809,51],[1845,54,1809,54],[1845,59,1809,59],[1845,61,1809,61],[1846,6,1810,8],[1846,10,1810,12,"tokensRefreshed"],[1846,25,1810,27],[1846,28,1810,30],[1846,33,1810,35],[1847,6,1811,8],[1847,10,1811,12,"response"],[1847,18,1811,20],[1847,19,1811,21,"idToken"],[1847,26,1811,28],[1847,30,1812,12,"response"],[1847,38,1812,20],[1847,39,1812,21,"idToken"],[1847,46,1812,28],[1847,51,1812,33],[1847,55,1812,37],[1847,56,1812,38,"stsTokenManager"],[1847,71,1812,53],[1847,72,1812,54,"accessToken"],[1847,83,1812,65],[1847,85,1812,67],[1848,8,1813,12],[1848,12,1813,16],[1848,13,1813,17,"stsTokenManager"],[1848,28,1813,32],[1848,29,1813,33,"updateFromServerResponse"],[1848,53,1813,57],[1848,54,1813,58,"response"],[1848,62,1813,66],[1848,63,1813,67],[1849,8,1814,12,"tokensRefreshed"],[1849,23,1814,27],[1849,26,1814,30],[1849,30,1814,34],[1850,6,1815,8],[1851,6,1816,8],[1851,10,1816,12,"reload"],[1851,16,1816,18],[1851,18,1816,20],[1852,8,1817,12],[1852,14,1817,18,"_reloadWithoutSaving"],[1852,34,1817,38],[1852,35,1817,39],[1852,39,1817,43],[1852,40,1817,44],[1853,6,1818,8],[1854,6,1819,8],[1854,12,1819,14],[1854,16,1819,18],[1854,17,1819,19,"auth"],[1854,21,1819,23],[1854,22,1819,24,"_persistUserIfCurrent"],[1854,43,1819,45],[1854,44,1819,46],[1854,48,1819,50],[1854,49,1819,51],[1855,6,1820,8],[1855,10,1820,12,"tokensRefreshed"],[1855,25,1820,27],[1855,27,1820,29],[1856,8,1821,12],[1856,12,1821,16],[1856,13,1821,17,"auth"],[1856,17,1821,21],[1856,18,1821,22,"_notifyListenersIfCurrent"],[1856,43,1821,47],[1856,44,1821,48],[1856,48,1821,52],[1856,49,1821,53],[1857,6,1822,8],[1858,4,1823,4],[1859,4,1824,4],[1859,10,1824,10,"delete"],[1859,16,1824,16,"delete"],[1859,17,1824,16],[1859,19,1824,19],[1860,6,1825,8],[1860,10,1825,12],[1860,14,1825,12,"_isFirebaseServerApp"],[1860,39,1825,32],[1860,41,1825,33],[1860,45,1825,37],[1860,46,1825,38,"auth"],[1860,50,1825,42],[1860,51,1825,43,"app"],[1860,54,1825,46],[1860,55,1825,47],[1860,57,1825,49],[1861,8,1826,12],[1861,15,1826,19,"Promise"],[1861,22,1826,26],[1861,23,1826,27,"reject"],[1861,29,1826,33],[1861,30,1826,34,"_serverAppCurrentUserOperationNotSupportedError"],[1861,77,1826,81],[1861,78,1826,82],[1861,82,1826,86],[1861,83,1826,87,"auth"],[1861,87,1826,91],[1861,88,1826,92],[1861,89,1826,93],[1862,6,1827,8],[1863,6,1828,8],[1863,12,1828,14,"idToken"],[1863,19,1828,21],[1863,22,1828,24],[1863,28,1828,30],[1863,32,1828,34],[1863,33,1828,35,"getIdToken"],[1863,43,1828,45],[1863,44,1828,46],[1863,45,1828,47],[1864,6,1829,8],[1864,12,1829,14,"_logoutIfInvalidated"],[1864,32,1829,34],[1864,33,1829,35],[1864,37,1829,39],[1864,39,1829,41,"deleteAccount"],[1864,52,1829,54],[1864,53,1829,55],[1864,57,1829,59],[1864,58,1829,60,"auth"],[1864,62,1829,64],[1864,64,1829,66],[1865,8,1829,68,"idToken"],[1866,6,1829,76],[1866,7,1829,77],[1866,8,1829,78],[1866,9,1829,79],[1867,6,1830,8],[1867,10,1830,12],[1867,11,1830,13,"stsTokenManager"],[1867,26,1830,28],[1867,27,1830,29,"clearRefreshToken"],[1867,44,1830,46],[1867,45,1830,47],[1867,46,1830,48],[1868,6,1831,8],[1869,6,1832,8],[1870,6,1833,8],[1870,13,1833,15],[1870,17,1833,19],[1870,18,1833,20,"auth"],[1870,22,1833,24],[1870,23,1833,25,"signOut"],[1870,30,1833,32],[1870,31,1833,33],[1870,32,1833,34],[1871,4,1834,4],[1872,4,1835,4,"toJSON"],[1872,10,1835,10,"toJSON"],[1872,11,1835,10],[1872,13,1835,13],[1873,6,1836,8],[1873,13,1836,15],[1874,8,1837,12,"uid"],[1874,11,1837,15],[1874,13,1837,17],[1874,17,1837,21],[1874,18,1837,22,"uid"],[1874,21,1837,25],[1875,8,1838,12,"email"],[1875,13,1838,17],[1875,15,1838,19],[1875,19,1838,23],[1875,20,1838,24,"email"],[1875,25,1838,29],[1875,29,1838,33,"undefined"],[1875,38,1838,42],[1876,8,1839,12,"emailVerified"],[1876,21,1839,25],[1876,23,1839,27],[1876,27,1839,31],[1876,28,1839,32,"emailVerified"],[1876,41,1839,45],[1877,8,1840,12,"displayName"],[1877,19,1840,23],[1877,21,1840,25],[1877,25,1840,29],[1877,26,1840,30,"displayName"],[1877,37,1840,41],[1877,41,1840,45,"undefined"],[1877,50,1840,54],[1878,8,1841,12,"isAnonymous"],[1878,19,1841,23],[1878,21,1841,25],[1878,25,1841,29],[1878,26,1841,30,"isAnonymous"],[1878,37,1841,41],[1879,8,1842,12,"photoURL"],[1879,16,1842,20],[1879,18,1842,22],[1879,22,1842,26],[1879,23,1842,27,"photoURL"],[1879,31,1842,35],[1879,35,1842,39,"undefined"],[1879,44,1842,48],[1880,8,1843,12,"phoneNumber"],[1880,19,1843,23],[1880,21,1843,25],[1880,25,1843,29],[1880,26,1843,30,"phoneNumber"],[1880,37,1843,41],[1880,41,1843,45,"undefined"],[1880,50,1843,54],[1881,8,1844,12,"tenantId"],[1881,16,1844,20],[1881,18,1844,22],[1881,22,1844,26],[1881,23,1844,27,"tenantId"],[1881,31,1844,35],[1881,35,1844,39,"undefined"],[1881,44,1844,48],[1882,8,1845,12,"providerData"],[1882,20,1845,24],[1882,22,1845,26],[1882,26,1845,30],[1882,27,1845,31,"providerData"],[1882,39,1845,43],[1882,40,1845,44,"map"],[1882,43,1845,47],[1882,44,1845,48,"userInfo"],[1882,52,1845,56],[1882,57,1845,61],[1883,10,1845,63],[1883,13,1845,66,"userInfo"],[1884,8,1845,75],[1884,9,1845,76],[1884,10,1845,77],[1884,11,1845,78],[1885,8,1846,12,"stsTokenManager"],[1885,23,1846,27],[1885,25,1846,29],[1885,29,1846,33],[1885,30,1846,34,"stsTokenManager"],[1885,45,1846,49],[1885,46,1846,50,"toJSON"],[1885,52,1846,56],[1885,53,1846,57],[1885,54,1846,58],[1886,8,1847,12],[1887,8,1848,12],[1888,8,1849,12,"_redirectEventId"],[1888,24,1849,28],[1888,26,1849,30],[1888,30,1849,34],[1888,31,1849,35,"_redirectEventId"],[1888,47,1849,51],[1889,8,1850,12],[1889,11,1850,15],[1889,15,1850,19],[1889,16,1850,20,"metadata"],[1889,24,1850,28],[1889,25,1850,29,"toJSON"],[1889,31,1850,35],[1889,32,1850,36],[1889,33,1850,37],[1890,8,1851,12],[1891,8,1852,12,"apiKey"],[1891,14,1852,18],[1891,16,1852,20],[1891,20,1852,24],[1891,21,1852,25,"auth"],[1891,25,1852,29],[1891,26,1852,30,"config"],[1891,32,1852,36],[1891,33,1852,37,"apiKey"],[1891,39,1852,43],[1892,8,1853,12,"appName"],[1892,15,1853,19],[1892,17,1853,21],[1892,21,1853,25],[1892,22,1853,26,"auth"],[1892,26,1853,30],[1892,27,1853,31,"name"],[1893,8,1854,12],[1894,8,1855,12],[1895,6,1856,8],[1895,7,1856,9],[1896,4,1857,4],[1897,4,1858,4],[1897,8,1858,8,"refreshToken"],[1897,20,1858,20,"refreshToken"],[1897,21,1858,20],[1897,23,1858,23],[1898,6,1859,8],[1898,13,1859,15],[1898,17,1859,19],[1898,18,1859,20,"stsTokenManager"],[1898,33,1859,35],[1898,34,1859,36,"refreshToken"],[1898,46,1859,48],[1898,50,1859,52],[1898,52,1859,54],[1899,4,1860,4],[1900,4,1861,4],[1900,11,1861,11,"_fromJSON"],[1900,20,1861,20,"_fromJSON"],[1900,21,1861,21,"auth"],[1900,25,1861,25],[1900,27,1861,27,"object"],[1900,33,1861,33],[1900,35,1861,35],[1901,6,1862,8],[1901,12,1862,14,"displayName"],[1901,23,1862,25],[1901,26,1862,28,"object"],[1901,32,1862,34],[1901,33,1862,35,"displayName"],[1901,44,1862,46],[1901,48,1862,50,"undefined"],[1901,57,1862,59],[1902,6,1863,8],[1902,12,1863,14,"email"],[1902,17,1863,19],[1902,20,1863,22,"object"],[1902,26,1863,28],[1902,27,1863,29,"email"],[1902,32,1863,34],[1902,36,1863,38,"undefined"],[1902,45,1863,47],[1903,6,1864,8],[1903,12,1864,14,"phoneNumber"],[1903,23,1864,25],[1903,26,1864,28,"object"],[1903,32,1864,34],[1903,33,1864,35,"phoneNumber"],[1903,44,1864,46],[1903,48,1864,50,"undefined"],[1903,57,1864,59],[1904,6,1865,8],[1904,12,1865,14,"photoURL"],[1904,20,1865,22],[1904,23,1865,25,"object"],[1904,29,1865,31],[1904,30,1865,32,"photoURL"],[1904,38,1865,40],[1904,42,1865,44,"undefined"],[1904,51,1865,53],[1905,6,1866,8],[1905,12,1866,14,"tenantId"],[1905,20,1866,22],[1905,23,1866,25,"object"],[1905,29,1866,31],[1905,30,1866,32,"tenantId"],[1905,38,1866,40],[1905,42,1866,44,"undefined"],[1905,51,1866,53],[1906,6,1867,8],[1906,12,1867,14,"_redirectEventId"],[1906,28,1867,30],[1906,31,1867,33,"object"],[1906,37,1867,39],[1906,38,1867,40,"_redirectEventId"],[1906,54,1867,56],[1906,58,1867,60,"undefined"],[1906,67,1867,69],[1907,6,1868,8],[1907,12,1868,14,"createdAt"],[1907,21,1868,23],[1907,24,1868,26,"object"],[1907,30,1868,32],[1907,31,1868,33,"createdAt"],[1907,40,1868,42],[1907,44,1868,46,"undefined"],[1907,53,1868,55],[1908,6,1869,8],[1908,12,1869,14,"lastLoginAt"],[1908,23,1869,25],[1908,26,1869,28,"object"],[1908,32,1869,34],[1908,33,1869,35,"lastLoginAt"],[1908,44,1869,46],[1908,48,1869,50,"undefined"],[1908,57,1869,59],[1909,6,1870,8],[1909,12,1870,14],[1910,8,1870,16,"uid"],[1910,11,1870,19],[1911,8,1870,21,"emailVerified"],[1911,21,1870,34],[1912,8,1870,36,"isAnonymous"],[1912,19,1870,47],[1913,8,1870,49,"providerData"],[1913,20,1870,61],[1914,8,1870,63,"stsTokenManager"],[1914,23,1870,78],[1914,25,1870,80,"plainObjectTokenManager"],[1915,6,1870,104],[1915,7,1870,105],[1915,10,1870,108,"object"],[1915,16,1870,114],[1916,6,1871,8,"_assert"],[1916,13,1871,15],[1916,14,1871,16,"uid"],[1916,17,1871,19],[1916,21,1871,23,"plainObjectTokenManager"],[1916,44,1871,46],[1916,46,1871,48,"auth"],[1916,50,1871,52],[1916,52,1871,54],[1916,68,1871,70],[1916,69,1871,71],[1916,103,1871,105],[1916,104,1871,106],[1917,6,1872,8],[1917,12,1872,14,"stsTokenManager"],[1917,27,1872,29],[1917,30,1872,32,"StsTokenManager"],[1917,45,1872,47],[1917,46,1872,48,"fromJSON"],[1917,54,1872,56],[1917,55,1872,57],[1917,59,1872,61],[1917,60,1872,62,"name"],[1917,64,1872,66],[1917,66,1872,68,"plainObjectTokenManager"],[1917,89,1872,91],[1917,90,1872,92],[1918,6,1873,8,"_assert"],[1918,13,1873,15],[1918,14,1873,16],[1918,21,1873,23,"uid"],[1918,24,1873,26],[1918,29,1873,31],[1918,37,1873,39],[1918,39,1873,41,"auth"],[1918,43,1873,45],[1918,45,1873,47],[1918,61,1873,63],[1918,62,1873,64],[1918,96,1873,98],[1918,97,1873,99],[1919,6,1874,8,"assertStringOrUndefined"],[1919,29,1874,31],[1919,30,1874,32,"displayName"],[1919,41,1874,43],[1919,43,1874,45,"auth"],[1919,47,1874,49],[1919,48,1874,50,"name"],[1919,52,1874,54],[1919,53,1874,55],[1920,6,1875,8,"assertStringOrUndefined"],[1920,29,1875,31],[1920,30,1875,32,"email"],[1920,35,1875,37],[1920,37,1875,39,"auth"],[1920,41,1875,43],[1920,42,1875,44,"name"],[1920,46,1875,48],[1920,47,1875,49],[1921,6,1876,8,"_assert"],[1921,13,1876,15],[1921,14,1876,16],[1921,21,1876,23,"emailVerified"],[1921,34,1876,36],[1921,39,1876,41],[1921,48,1876,50],[1921,50,1876,52,"auth"],[1921,54,1876,56],[1921,56,1876,58],[1921,72,1876,74],[1921,73,1876,75],[1921,107,1876,109],[1921,108,1876,110],[1922,6,1877,8,"_assert"],[1922,13,1877,15],[1922,14,1877,16],[1922,21,1877,23,"isAnonymous"],[1922,32,1877,34],[1922,37,1877,39],[1922,46,1877,48],[1922,48,1877,50,"auth"],[1922,52,1877,54],[1922,54,1877,56],[1922,70,1877,72],[1922,71,1877,73],[1922,105,1877,107],[1922,106,1877,108],[1923,6,1878,8,"assertStringOrUndefined"],[1923,29,1878,31],[1923,30,1878,32,"phoneNumber"],[1923,41,1878,43],[1923,43,1878,45,"auth"],[1923,47,1878,49],[1923,48,1878,50,"name"],[1923,52,1878,54],[1923,53,1878,55],[1924,6,1879,8,"assertStringOrUndefined"],[1924,29,1879,31],[1924,30,1879,32,"photoURL"],[1924,38,1879,40],[1924,40,1879,42,"auth"],[1924,44,1879,46],[1924,45,1879,47,"name"],[1924,49,1879,51],[1924,50,1879,52],[1925,6,1880,8,"assertStringOrUndefined"],[1925,29,1880,31],[1925,30,1880,32,"tenantId"],[1925,38,1880,40],[1925,40,1880,42,"auth"],[1925,44,1880,46],[1925,45,1880,47,"name"],[1925,49,1880,51],[1925,50,1880,52],[1926,6,1881,8,"assertStringOrUndefined"],[1926,29,1881,31],[1926,30,1881,32,"_redirectEventId"],[1926,46,1881,48],[1926,48,1881,50,"auth"],[1926,52,1881,54],[1926,53,1881,55,"name"],[1926,57,1881,59],[1926,58,1881,60],[1927,6,1882,8,"assertStringOrUndefined"],[1927,29,1882,31],[1927,30,1882,32,"createdAt"],[1927,39,1882,41],[1927,41,1882,43,"auth"],[1927,45,1882,47],[1927,46,1882,48,"name"],[1927,50,1882,52],[1927,51,1882,53],[1928,6,1883,8,"assertStringOrUndefined"],[1928,29,1883,31],[1928,30,1883,32,"lastLoginAt"],[1928,41,1883,43],[1928,43,1883,45,"auth"],[1928,47,1883,49],[1928,48,1883,50,"name"],[1928,52,1883,54],[1928,53,1883,55],[1929,6,1884,8],[1929,12,1884,14,"user"],[1929,16,1884,18],[1929,19,1884,21],[1929,23,1884,25,"UserImpl"],[1929,31,1884,33],[1929,32,1884,34],[1930,8,1885,12,"uid"],[1930,11,1885,15],[1931,8,1886,12,"auth"],[1931,12,1886,16],[1932,8,1887,12,"email"],[1932,13,1887,17],[1933,8,1888,12,"emailVerified"],[1933,21,1888,25],[1934,8,1889,12,"displayName"],[1934,19,1889,23],[1935,8,1890,12,"isAnonymous"],[1935,19,1890,23],[1936,8,1891,12,"photoURL"],[1936,16,1891,20],[1937,8,1892,12,"phoneNumber"],[1937,19,1892,23],[1938,8,1893,12,"tenantId"],[1938,16,1893,20],[1939,8,1894,12,"stsTokenManager"],[1939,23,1894,27],[1940,8,1895,12,"createdAt"],[1940,17,1895,21],[1941,8,1896,12,"lastLoginAt"],[1942,6,1897,8],[1942,7,1897,9],[1942,8,1897,10],[1943,6,1898,8],[1943,10,1898,12,"providerData"],[1943,22,1898,24],[1943,26,1898,28,"Array"],[1943,31,1898,33],[1943,32,1898,34,"isArray"],[1943,39,1898,41],[1943,40,1898,42,"providerData"],[1943,52,1898,54],[1943,53,1898,55],[1943,55,1898,57],[1944,8,1899,12,"user"],[1944,12,1899,16],[1944,13,1899,17,"providerData"],[1944,25,1899,29],[1944,28,1899,32,"providerData"],[1944,40,1899,44],[1944,41,1899,45,"map"],[1944,44,1899,48],[1944,45,1899,49,"userInfo"],[1944,53,1899,57],[1944,58,1899,62],[1945,10,1899,64],[1945,13,1899,67,"userInfo"],[1946,8,1899,76],[1946,9,1899,77],[1946,10,1899,78],[1946,11,1899,79],[1947,6,1900,8],[1948,6,1901,8],[1948,10,1901,12,"_redirectEventId"],[1948,26,1901,28],[1948,28,1901,30],[1949,8,1902,12,"user"],[1949,12,1902,16],[1949,13,1902,17,"_redirectEventId"],[1949,29,1902,33],[1949,32,1902,36,"_redirectEventId"],[1949,48,1902,52],[1950,6,1903,8],[1951,6,1904,8],[1951,13,1904,15,"user"],[1951,17,1904,19],[1952,4,1905,4],[1953,4,1906,4],[1954,0,1907,0],[1955,0,1908,0],[1956,0,1909,0],[1957,0,1910,0],[1958,4,1911,4],[1958,17,1911,17,"_fromIdTokenResponse"],[1958,37,1911,37,"_fromIdTokenResponse"],[1958,38,1911,38,"auth"],[1958,42,1911,42],[1958,44,1911,44,"idTokenResponse"],[1958,59,1911,59],[1958,61,1911,61,"isAnonymous"],[1958,72,1911,72],[1958,75,1911,75],[1958,80,1911,80],[1958,82,1911,82],[1959,6,1912,8],[1959,12,1912,14,"stsTokenManager"],[1959,27,1912,29],[1959,30,1912,32],[1959,34,1912,36,"StsTokenManager"],[1959,49,1912,51],[1959,50,1912,52],[1959,51,1912,53],[1960,6,1913,8,"stsTokenManager"],[1960,21,1913,23],[1960,22,1913,24,"updateFromServerResponse"],[1960,46,1913,48],[1960,47,1913,49,"idTokenResponse"],[1960,62,1913,64],[1960,63,1913,65],[1961,6,1914,8],[1962,6,1915,8],[1962,12,1915,14,"user"],[1962,16,1915,18],[1962,19,1915,21],[1962,23,1915,25,"UserImpl"],[1962,31,1915,33],[1962,32,1915,34],[1963,8,1916,12,"uid"],[1963,11,1916,15],[1963,13,1916,17,"idTokenResponse"],[1963,28,1916,32],[1963,29,1916,33,"localId"],[1963,36,1916,40],[1964,8,1917,12,"auth"],[1964,12,1917,16],[1965,8,1918,12,"stsTokenManager"],[1965,23,1918,27],[1966,8,1919,12,"isAnonymous"],[1967,6,1920,8],[1967,7,1920,9],[1967,8,1920,10],[1968,6,1921,8],[1969,6,1922,8],[1969,12,1922,14,"_reloadWithoutSaving"],[1969,32,1922,34],[1969,33,1922,35,"user"],[1969,37,1922,39],[1969,38,1922,40],[1970,6,1923,8],[1970,13,1923,15,"user"],[1970,17,1923,19],[1971,4,1924,4],[1972,4,1925,4],[1973,0,1926,0],[1974,0,1927,0],[1975,0,1928,0],[1976,0,1929,0],[1977,4,1930,4],[1977,17,1930,17,"_fromGetAccountInfoResponse"],[1977,44,1930,44,"_fromGetAccountInfoResponse"],[1977,45,1930,45,"auth"],[1977,49,1930,49],[1977,51,1930,51,"response"],[1977,59,1930,59],[1977,61,1930,61,"idToken"],[1977,68,1930,68],[1977,70,1930,70],[1978,6,1931,8],[1978,12,1931,14,"coreAccount"],[1978,23,1931,25],[1978,26,1931,28,"response"],[1978,34,1931,36],[1978,35,1931,37,"users"],[1978,40,1931,42],[1978,41,1931,43],[1978,42,1931,44],[1978,43,1931,45],[1979,6,1932,8,"_assert"],[1979,13,1932,15],[1979,14,1932,16,"coreAccount"],[1979,25,1932,27],[1979,26,1932,28,"localId"],[1979,33,1932,35],[1979,38,1932,40,"undefined"],[1979,47,1932,49],[1979,49,1932,51],[1979,65,1932,67],[1979,66,1932,68],[1979,100,1932,102],[1979,101,1932,103],[1980,6,1933,8],[1980,12,1933,14,"providerData"],[1980,24,1933,26],[1980,27,1933,29,"coreAccount"],[1980,38,1933,40],[1980,39,1933,41,"providerUserInfo"],[1980,55,1933,57],[1980,60,1933,62,"undefined"],[1980,69,1933,71],[1980,72,1934,14,"extractProviderData"],[1980,91,1934,33],[1980,92,1934,34,"coreAccount"],[1980,103,1934,45],[1980,104,1934,46,"providerUserInfo"],[1980,120,1934,62],[1980,121,1934,63],[1980,124,1935,14],[1980,126,1935,16],[1981,6,1936,8],[1981,12,1936,14,"isAnonymous"],[1981,23,1936,25],[1981,26,1936,28],[1981,28,1936,30,"coreAccount"],[1981,39,1936,41],[1981,40,1936,42,"email"],[1981,45,1936,47],[1981,49,1936,51,"coreAccount"],[1981,60,1936,62],[1981,61,1936,63,"passwordHash"],[1981,73,1936,75],[1981,74,1936,76],[1981,78,1936,80],[1981,79,1936,81,"providerData"],[1981,91,1936,93],[1981,93,1936,95,"length"],[1981,99,1936,101],[1982,6,1937,8],[1982,12,1937,14,"stsTokenManager"],[1982,27,1937,29],[1982,30,1937,32],[1982,34,1937,36,"StsTokenManager"],[1982,49,1937,51],[1982,50,1937,52],[1982,51,1937,53],[1983,6,1938,8,"stsTokenManager"],[1983,21,1938,23],[1983,22,1938,24,"updateFromIdToken"],[1983,39,1938,41],[1983,40,1938,42,"idToken"],[1983,47,1938,49],[1983,48,1938,50],[1984,6,1939,8],[1985,6,1940,8],[1985,12,1940,14,"user"],[1985,16,1940,18],[1985,19,1940,21],[1985,23,1940,25,"UserImpl"],[1985,31,1940,33],[1985,32,1940,34],[1986,8,1941,12,"uid"],[1986,11,1941,15],[1986,13,1941,17,"coreAccount"],[1986,24,1941,28],[1986,25,1941,29,"localId"],[1986,32,1941,36],[1987,8,1942,12,"auth"],[1987,12,1942,16],[1988,8,1943,12,"stsTokenManager"],[1988,23,1943,27],[1989,8,1944,12,"isAnonymous"],[1990,6,1945,8],[1990,7,1945,9],[1990,8,1945,10],[1991,6,1946,8],[1992,6,1947,8],[1992,12,1947,14,"updates"],[1992,19,1947,21],[1992,22,1947,24],[1993,8,1948,12,"uid"],[1993,11,1948,15],[1993,13,1948,17,"coreAccount"],[1993,24,1948,28],[1993,25,1948,29,"localId"],[1993,32,1948,36],[1994,8,1949,12,"displayName"],[1994,19,1949,23],[1994,21,1949,25,"coreAccount"],[1994,32,1949,36],[1994,33,1949,37,"displayName"],[1994,44,1949,48],[1994,48,1949,52],[1994,52,1949,56],[1995,8,1950,12,"photoURL"],[1995,16,1950,20],[1995,18,1950,22,"coreAccount"],[1995,29,1950,33],[1995,30,1950,34,"photoUrl"],[1995,38,1950,42],[1995,42,1950,46],[1995,46,1950,50],[1996,8,1951,12,"email"],[1996,13,1951,17],[1996,15,1951,19,"coreAccount"],[1996,26,1951,30],[1996,27,1951,31,"email"],[1996,32,1951,36],[1996,36,1951,40],[1996,40,1951,44],[1997,8,1952,12,"emailVerified"],[1997,21,1952,25],[1997,23,1952,27,"coreAccount"],[1997,34,1952,38],[1997,35,1952,39,"emailVerified"],[1997,48,1952,52],[1997,52,1952,56],[1997,57,1952,61],[1998,8,1953,12,"phoneNumber"],[1998,19,1953,23],[1998,21,1953,25,"coreAccount"],[1998,32,1953,36],[1998,33,1953,37,"phoneNumber"],[1998,44,1953,48],[1998,48,1953,52],[1998,52,1953,56],[1999,8,1954,12,"tenantId"],[1999,16,1954,20],[1999,18,1954,22,"coreAccount"],[1999,29,1954,33],[1999,30,1954,34,"tenantId"],[1999,38,1954,42],[1999,42,1954,46],[1999,46,1954,50],[2000,8,1955,12,"providerData"],[2000,20,1955,24],[2001,8,1956,12,"metadata"],[2001,16,1956,20],[2001,18,1956,22],[2001,22,1956,26,"UserMetadata"],[2001,34,1956,38],[2001,35,1956,39,"coreAccount"],[2001,46,1956,50],[2001,47,1956,51,"createdAt"],[2001,56,1956,60],[2001,58,1956,62,"coreAccount"],[2001,69,1956,73],[2001,70,1956,74,"lastLoginAt"],[2001,81,1956,85],[2001,82,1956,86],[2002,8,1957,12,"isAnonymous"],[2002,19,1957,23],[2002,21,1957,25],[2002,23,1957,27,"coreAccount"],[2002,34,1957,38],[2002,35,1957,39,"email"],[2002,40,1957,44],[2002,44,1957,48,"coreAccount"],[2002,55,1957,59],[2002,56,1957,60,"passwordHash"],[2002,68,1957,72],[2002,69,1957,73],[2002,73,1958,16],[2002,74,1958,17,"providerData"],[2002,86,1958,29],[2002,88,1958,31,"length"],[2003,6,1959,8],[2003,7,1959,9],[2004,6,1960,8,"Object"],[2004,12,1960,14],[2004,13,1960,15,"assign"],[2004,19,1960,21],[2004,20,1960,22,"user"],[2004,24,1960,26],[2004,26,1960,28,"updates"],[2004,33,1960,35],[2004,34,1960,36],[2005,6,1961,8],[2005,13,1961,15,"user"],[2005,17,1961,19],[2006,4,1962,4],[2007,2,1963,0],[2009,2,1965,0],[2010,0,1966,0],[2011,0,1967,0],[2012,0,1968,0],[2013,0,1969,0],[2014,0,1970,0],[2015,0,1971,0],[2016,0,1972,0],[2017,0,1973,0],[2018,0,1974,0],[2019,0,1975,0],[2020,0,1976,0],[2021,0,1977,0],[2022,0,1978,0],[2023,0,1979,0],[2024,0,1980,0],[2025,2,1965,0,"exports"],[2025,9,1965,0],[2025,10,1965,0,"aQ"],[2025,12,1965,0],[2025,15,1965,0,"UserImpl"],[2025,23,1965,0],[2026,2,1981,0],[2026,8,1981,6,"instanceCache"],[2026,21,1981,19],[2026,24,1981,22],[2026,28,1981,26,"Map"],[2026,31,1981,29],[2026,32,1981,30],[2026,33,1981,31],[2027,2,1982,0],[2027,11,1982,9,"_getInstance"],[2027,23,1982,21,"_getInstance"],[2027,24,1982,22,"cls"],[2027,27,1982,25],[2027,29,1982,27],[2028,4,1983,4,"debugAssert"],[2028,15,1983,15],[2028,16,1983,16,"cls"],[2028,19,1983,19],[2028,31,1983,31,"Function"],[2028,39,1983,39],[2028,41,1983,41],[2028,70,1983,70],[2028,71,1983,71],[2029,4,1984,4],[2029,8,1984,8,"instance"],[2029,16,1984,16],[2029,19,1984,19,"instanceCache"],[2029,32,1984,32],[2029,33,1984,33,"get"],[2029,36,1984,36],[2029,37,1984,37,"cls"],[2029,40,1984,40],[2029,41,1984,41],[2030,4,1985,4],[2030,8,1985,8,"instance"],[2030,16,1985,16],[2030,18,1985,18],[2031,6,1986,8,"debugAssert"],[2031,17,1986,19],[2031,18,1986,20,"instance"],[2031,26,1986,28],[2031,38,1986,40,"cls"],[2031,41,1986,43],[2031,43,1986,45],[2031,91,1986,93],[2031,92,1986,94],[2032,6,1987,8],[2032,13,1987,15,"instance"],[2032,21,1987,23],[2033,4,1988,4],[2034,4,1989,4,"instance"],[2034,12,1989,12],[2034,15,1989,15],[2034,19,1989,19,"cls"],[2034,22,1989,22],[2034,23,1989,23],[2034,24,1989,24],[2035,4,1990,4,"instanceCache"],[2035,17,1990,17],[2035,18,1990,18,"set"],[2035,21,1990,21],[2035,22,1990,22,"cls"],[2035,25,1990,25],[2035,27,1990,27,"instance"],[2035,35,1990,35],[2035,36,1990,36],[2036,4,1991,4],[2036,11,1991,11,"instance"],[2036,19,1991,19],[2037,2,1992,0],[2039,2,1994,0],[2040,0,1995,0],[2041,0,1996,0],[2042,0,1997,0],[2043,0,1998,0],[2044,0,1999,0],[2045,0,2000,0],[2046,0,2001,0],[2047,0,2002,0],[2048,0,2003,0],[2049,0,2004,0],[2050,0,2005,0],[2051,0,2006,0],[2052,0,2007,0],[2053,0,2008,0],[2054,0,2009,0],[2055,2,2010,0],[2055,8,2010,6,"InMemoryPersistence"],[2055,27,2010,25],[2055,28,2010,26],[2056,4,2011,4,"constructor"],[2056,15,2011,15,"constructor"],[2056,16,2011,15],[2056,18,2011,18],[2057,6,2012,8],[2057,10,2012,12],[2057,11,2012,13,"type"],[2057,15,2012,17],[2057,18,2012,20],[2057,24,2012,26],[2057,25,2012,27],[2058,6,2013,8],[2058,10,2013,12],[2058,11,2013,13,"storage"],[2058,18,2013,20],[2058,21,2013,23],[2058,22,2013,24],[2058,23,2013,25],[2059,4,2014,4],[2060,4,2015,4],[2060,10,2015,10,"_isAvailable"],[2060,22,2015,22,"_isAvailable"],[2060,23,2015,22],[2060,25,2015,25],[2061,6,2016,8],[2061,13,2016,15],[2061,17,2016,19],[2062,4,2017,4],[2063,4,2018,4],[2063,10,2018,10,"_set"],[2063,14,2018,14,"_set"],[2063,15,2018,15,"key"],[2063,18,2018,18],[2063,20,2018,20,"value"],[2063,25,2018,25],[2063,27,2018,27],[2064,6,2019,8],[2064,10,2019,12],[2064,11,2019,13,"storage"],[2064,18,2019,20],[2064,19,2019,21,"key"],[2064,22,2019,24],[2064,23,2019,25],[2064,26,2019,28,"value"],[2064,31,2019,33],[2065,4,2020,4],[2066,4,2021,4],[2066,10,2021,10,"_get"],[2066,14,2021,14,"_get"],[2066,15,2021,15,"key"],[2066,18,2021,18],[2066,20,2021,20],[2067,6,2022,8],[2067,12,2022,14,"value"],[2067,17,2022,19],[2067,20,2022,22],[2067,24,2022,26],[2067,25,2022,27,"storage"],[2067,32,2022,34],[2067,33,2022,35,"key"],[2067,36,2022,38],[2067,37,2022,39],[2068,6,2023,8],[2068,13,2023,15,"value"],[2068,18,2023,20],[2068,23,2023,25,"undefined"],[2068,32,2023,34],[2068,35,2023,37],[2068,39,2023,41],[2068,42,2023,44,"value"],[2068,47,2023,49],[2069,4,2024,4],[2070,4,2025,4],[2070,10,2025,10,"_remove"],[2070,17,2025,17,"_remove"],[2070,18,2025,18,"key"],[2070,21,2025,21],[2070,23,2025,23],[2071,6,2026,8],[2071,13,2026,15],[2071,17,2026,19],[2071,18,2026,20,"storage"],[2071,25,2026,27],[2071,26,2026,28,"key"],[2071,29,2026,31],[2071,30,2026,32],[2072,4,2027,4],[2073,4,2028,4,"_addListener"],[2073,16,2028,16,"_addListener"],[2073,17,2028,17,"_key"],[2073,21,2028,21],[2073,23,2028,23,"_listener"],[2073,32,2028,32],[2073,34,2028,34],[2074,6,2029,8],[2075,6,2030,8],[2076,4,2031,4],[2077,4,2032,4,"_removeListener"],[2077,19,2032,19,"_removeListener"],[2077,20,2032,20,"_key"],[2077,24,2032,24],[2077,26,2032,26,"_listener"],[2077,35,2032,35],[2077,37,2032,37],[2078,6,2033,8],[2079,6,2034,8],[2080,4,2035,4],[2081,2,2036,0],[2082,2,2037,0,"InMemoryPersistence"],[2082,21,2037,19],[2082,22,2037,20,"type"],[2082,26,2037,24],[2082,29,2037,27],[2082,35,2037,33],[2083,2,2038,0],[2084,0,2039,0],[2085,0,2040,0],[2086,0,2041,0],[2087,0,2042,0],[2088,2,2043,0],[2088,8,2043,6,"inMemoryPersistence"],[2088,27,2043,25],[2088,30,2043,25,"exports"],[2088,37,2043,25],[2088,38,2043,25,"V"],[2088,39,2043,25],[2088,42,2043,28,"InMemoryPersistence"],[2088,61,2043,47],[2090,2,2045,0],[2091,0,2046,0],[2092,0,2047,0],[2093,0,2048,0],[2094,0,2049,0],[2095,0,2050,0],[2096,0,2051,0],[2097,0,2052,0],[2098,0,2053,0],[2099,0,2054,0],[2100,0,2055,0],[2101,0,2056,0],[2102,0,2057,0],[2103,0,2058,0],[2104,0,2059,0],[2105,0,2060,0],[2106,2,2061,0],[2106,11,2061,9,"_persistenceKeyName"],[2106,30,2061,28,"_persistenceKeyName"],[2106,31,2061,29,"key"],[2106,34,2061,32],[2106,36,2061,34,"apiKey"],[2106,42,2061,40],[2106,44,2061,42,"appName"],[2106,51,2061,49],[2106,53,2061,51],[2107,4,2062,4],[2107,11,2062,11],[2107,14,2062,14],[2107,24,2062,24],[2107,25,2062,25],[2107,56,2062,56,"key"],[2107,59,2062,59],[2107,63,2062,63,"apiKey"],[2107,69,2062,69],[2107,73,2062,73,"appName"],[2107,80,2062,80],[2107,82,2062,82],[2108,2,2063,0],[2109,2,2064,0],[2109,8,2064,6,"PersistenceUserManager"],[2109,30,2064,28],[2109,31,2064,29],[2110,4,2065,4,"constructor"],[2110,15,2065,15,"constructor"],[2110,16,2065,16,"persistence"],[2110,27,2065,27],[2110,29,2065,29,"auth"],[2110,33,2065,33],[2110,35,2065,35,"userKey"],[2110,42,2065,42],[2110,44,2065,44],[2111,6,2066,8],[2111,10,2066,12],[2111,11,2066,13,"persistence"],[2111,22,2066,24],[2111,25,2066,27,"persistence"],[2111,36,2066,38],[2112,6,2067,8],[2112,10,2067,12],[2112,11,2067,13,"auth"],[2112,15,2067,17],[2112,18,2067,20,"auth"],[2112,22,2067,24],[2113,6,2068,8],[2113,10,2068,12],[2113,11,2068,13,"userKey"],[2113,18,2068,20],[2113,21,2068,23,"userKey"],[2113,28,2068,30],[2114,6,2069,8],[2114,12,2069,14],[2115,8,2069,16,"config"],[2115,14,2069,22],[2116,8,2069,24,"name"],[2117,6,2069,29],[2117,7,2069,30],[2117,10,2069,33],[2117,14,2069,37],[2117,15,2069,38,"auth"],[2117,19,2069,42],[2118,6,2070,8],[2118,10,2070,12],[2118,11,2070,13,"fullUserKey"],[2118,22,2070,24],[2118,25,2070,27,"_persistenceKeyName"],[2118,44,2070,46],[2118,45,2070,47],[2118,49,2070,51],[2118,50,2070,52,"userKey"],[2118,57,2070,59],[2118,59,2070,61,"config"],[2118,65,2070,67],[2118,66,2070,68,"apiKey"],[2118,72,2070,74],[2118,74,2070,76,"name"],[2118,78,2070,80],[2118,79,2070,81],[2119,6,2071,8],[2119,10,2071,12],[2119,11,2071,13,"fullPersistenceKey"],[2119,29,2071,31],[2119,32,2071,34,"_persistenceKeyName"],[2119,51,2071,53],[2119,52,2071,54],[2119,65,2071,67],[2119,66,2071,68],[2119,98,2071,100,"config"],[2119,104,2071,106],[2119,105,2071,107,"apiKey"],[2119,111,2071,113],[2119,113,2071,115,"name"],[2119,117,2071,119],[2119,118,2071,120],[2120,6,2072,8],[2120,10,2072,12],[2120,11,2072,13,"boundEventHandler"],[2120,28,2072,30],[2120,31,2072,33,"auth"],[2120,35,2072,37],[2120,36,2072,38,"_onStorageEvent"],[2120,51,2072,53],[2120,52,2072,54,"bind"],[2120,56,2072,58],[2120,57,2072,59,"auth"],[2120,61,2072,63],[2120,62,2072,64],[2121,6,2073,8],[2121,10,2073,12],[2121,11,2073,13,"persistence"],[2121,22,2073,24],[2121,23,2073,25,"_addListener"],[2121,35,2073,37],[2121,36,2073,38],[2121,40,2073,42],[2121,41,2073,43,"fullUserKey"],[2121,52,2073,54],[2121,54,2073,56],[2121,58,2073,60],[2121,59,2073,61,"boundEventHandler"],[2121,76,2073,78],[2121,77,2073,79],[2122,4,2074,4],[2123,4,2075,4,"setCurrentUser"],[2123,18,2075,18,"setCurrentUser"],[2123,19,2075,19,"user"],[2123,23,2075,23],[2123,25,2075,25],[2124,6,2076,8],[2124,13,2076,15],[2124,17,2076,19],[2124,18,2076,20,"persistence"],[2124,29,2076,31],[2124,30,2076,32,"_set"],[2124,34,2076,36],[2124,35,2076,37],[2124,39,2076,41],[2124,40,2076,42,"fullUserKey"],[2124,51,2076,53],[2124,53,2076,55,"user"],[2124,57,2076,59],[2124,58,2076,60,"toJSON"],[2124,64,2076,66],[2124,65,2076,67],[2124,66,2076,68],[2124,67,2076,69],[2125,4,2077,4],[2126,4,2078,4],[2126,10,2078,10,"getCurrentUser"],[2126,24,2078,24,"getCurrentUser"],[2126,25,2078,24],[2126,27,2078,27],[2127,6,2079,8],[2127,12,2079,14,"blob"],[2127,16,2079,18],[2127,19,2079,21],[2127,25,2079,27],[2127,29,2079,31],[2127,30,2079,32,"persistence"],[2127,41,2079,43],[2127,42,2079,44,"_get"],[2127,46,2079,48],[2127,47,2079,49],[2127,51,2079,53],[2127,52,2079,54,"fullUserKey"],[2127,63,2079,65],[2127,64,2079,66],[2128,6,2080,8],[2128,10,2080,12],[2128,11,2080,13,"blob"],[2128,15,2080,17],[2128,17,2080,19],[2129,8,2081,12],[2129,15,2081,19],[2129,19,2081,23],[2130,6,2082,8],[2131,6,2083,8],[2131,10,2083,12],[2131,17,2083,19,"blob"],[2131,21,2083,23],[2131,26,2083,28],[2131,34,2083,36],[2131,36,2083,38],[2132,8,2084,12],[2132,14,2084,18,"response"],[2132,22,2084,26],[2132,25,2084,29],[2132,31,2084,35,"getAccountInfo"],[2132,45,2084,49],[2132,46,2084,50],[2132,50,2084,54],[2132,51,2084,55,"auth"],[2132,55,2084,59],[2132,57,2084,61],[2133,10,2084,63,"idToken"],[2133,17,2084,70],[2133,19,2084,72,"blob"],[2134,8,2084,77],[2134,9,2084,78],[2134,10,2084,79],[2134,11,2084,80,"catch"],[2134,16,2084,85],[2134,17,2084,86],[2134,23,2084,92,"undefined"],[2134,32,2084,101],[2134,33,2084,102],[2135,8,2085,12],[2135,12,2085,16],[2135,13,2085,17,"response"],[2135,21,2085,25],[2135,23,2085,27],[2136,10,2086,16],[2136,17,2086,23],[2136,21,2086,27],[2137,8,2087,12],[2138,8,2088,12],[2138,15,2088,19,"UserImpl"],[2138,23,2088,27],[2138,24,2088,28,"_fromGetAccountInfoResponse"],[2138,51,2088,55],[2138,52,2088,56],[2138,56,2088,60],[2138,57,2088,61,"auth"],[2138,61,2088,65],[2138,63,2088,67,"response"],[2138,71,2088,75],[2138,73,2088,77,"blob"],[2138,77,2088,81],[2138,78,2088,82],[2139,6,2089,8],[2140,6,2090,8],[2140,13,2090,15,"UserImpl"],[2140,21,2090,23],[2140,22,2090,24,"_fromJSON"],[2140,31,2090,33],[2140,32,2090,34],[2140,36,2090,38],[2140,37,2090,39,"auth"],[2140,41,2090,43],[2140,43,2090,45,"blob"],[2140,47,2090,49],[2140,48,2090,50],[2141,4,2091,4],[2142,4,2092,4,"removeCurrentUser"],[2142,21,2092,21,"removeCurrentUser"],[2142,22,2092,21],[2142,24,2092,24],[2143,6,2093,8],[2143,13,2093,15],[2143,17,2093,19],[2143,18,2093,20,"persistence"],[2143,29,2093,31],[2143,30,2093,32,"_remove"],[2143,37,2093,39],[2143,38,2093,40],[2143,42,2093,44],[2143,43,2093,45,"fullUserKey"],[2143,54,2093,56],[2143,55,2093,57],[2144,4,2094,4],[2145,4,2095,4,"savePersistenceForRedirect"],[2145,30,2095,30,"savePersistenceForRedirect"],[2145,31,2095,30],[2145,33,2095,33],[2146,6,2096,8],[2146,13,2096,15],[2146,17,2096,19],[2146,18,2096,20,"persistence"],[2146,29,2096,31],[2146,30,2096,32,"_set"],[2146,34,2096,36],[2146,35,2096,37],[2146,39,2096,41],[2146,40,2096,42,"fullPersistenceKey"],[2146,58,2096,60],[2146,60,2096,62],[2146,64,2096,66],[2146,65,2096,67,"persistence"],[2146,76,2096,78],[2146,77,2096,79,"type"],[2146,81,2096,83],[2146,82,2096,84],[2147,4,2097,4],[2148,4,2098,4],[2148,10,2098,10,"setPersistence"],[2148,24,2098,24,"setPersistence"],[2148,25,2098,25,"newPersistence"],[2148,39,2098,39],[2148,41,2098,41],[2149,6,2099,8],[2149,10,2099,12],[2149,14,2099,16],[2149,15,2099,17,"persistence"],[2149,26,2099,28],[2149,31,2099,33,"newPersistence"],[2149,45,2099,47],[2149,47,2099,49],[2150,8,2100,12],[2151,6,2101,8],[2152,6,2102,8],[2152,12,2102,14,"currentUser"],[2152,23,2102,25],[2152,26,2102,28],[2152,32,2102,34],[2152,36,2102,38],[2152,37,2102,39,"getCurrentUser"],[2152,51,2102,53],[2152,52,2102,54],[2152,53,2102,55],[2153,6,2103,8],[2153,12,2103,14],[2153,16,2103,18],[2153,17,2103,19,"removeCurrentUser"],[2153,34,2103,36],[2153,35,2103,37],[2153,36,2103,38],[2154,6,2104,8],[2154,10,2104,12],[2154,11,2104,13,"persistence"],[2154,22,2104,24],[2154,25,2104,27,"newPersistence"],[2154,39,2104,41],[2155,6,2105,8],[2155,10,2105,12,"currentUser"],[2155,21,2105,23],[2155,23,2105,25],[2156,8,2106,12],[2156,15,2106,19],[2156,19,2106,23],[2156,20,2106,24,"setCurrentUser"],[2156,34,2106,38],[2156,35,2106,39,"currentUser"],[2156,46,2106,50],[2156,47,2106,51],[2157,6,2107,8],[2158,4,2108,4],[2159,4,2109,4,"delete"],[2159,10,2109,10,"delete"],[2159,11,2109,10],[2159,13,2109,13],[2160,6,2110,8],[2160,10,2110,12],[2160,11,2110,13,"persistence"],[2160,22,2110,24],[2160,23,2110,25,"_removeListener"],[2160,38,2110,40],[2160,39,2110,41],[2160,43,2110,45],[2160,44,2110,46,"fullUserKey"],[2160,55,2110,57],[2160,57,2110,59],[2160,61,2110,63],[2160,62,2110,64,"boundEventHandler"],[2160,79,2110,81],[2160,80,2110,82],[2161,4,2111,4],[2162,4,2112,4],[2162,17,2112,17,"create"],[2162,23,2112,23,"create"],[2162,24,2112,24,"auth"],[2162,28,2112,28],[2162,30,2112,30,"persistenceHierarchy"],[2162,50,2112,50],[2162,52,2112,52,"userKey"],[2162,59,2112,59],[2162,62,2112,62],[2162,72,2112,72],[2162,73,2112,73],[2162,98,2112,98],[2163,6,2113,8],[2163,10,2113,12],[2163,11,2113,13,"persistenceHierarchy"],[2163,31,2113,33],[2163,32,2113,34,"length"],[2163,38,2113,40],[2163,40,2113,42],[2164,8,2114,12],[2164,15,2114,19],[2164,19,2114,23,"PersistenceUserManager"],[2164,41,2114,45],[2164,42,2114,46,"_getInstance"],[2164,54,2114,58],[2164,55,2114,59,"inMemoryPersistence"],[2164,74,2114,78],[2164,75,2114,79],[2164,77,2114,81,"auth"],[2164,81,2114,85],[2164,83,2114,87,"userKey"],[2164,90,2114,94],[2164,91,2114,95],[2165,6,2115,8],[2166,6,2116,8],[2167,6,2117,8],[2167,12,2117,14,"availablePersistences"],[2167,33,2117,35],[2167,36,2117,38],[2167,37,2117,39],[2167,43,2117,45,"Promise"],[2167,50,2117,52],[2167,51,2117,53,"all"],[2167,54,2117,56],[2167,55,2117,57,"persistenceHierarchy"],[2167,75,2117,77],[2167,76,2117,78,"map"],[2167,79,2117,81],[2167,80,2117,82],[2167,86,2117,89,"persistence"],[2167,97,2117,100],[2167,101,2117,105],[2168,8,2118,12],[2168,12,2118,16],[2168,18,2118,22,"persistence"],[2168,29,2118,33],[2168,30,2118,34,"_isAvailable"],[2168,42,2118,46],[2168,43,2118,47],[2168,44,2118,48],[2168,46,2118,50],[2169,10,2119,16],[2169,17,2119,23,"persistence"],[2169,28,2119,34],[2170,8,2120,12],[2171,8,2121,12],[2171,15,2121,19,"undefined"],[2171,24,2121,28],[2172,6,2122,8],[2172,7,2122,9],[2172,8,2122,10],[2172,9,2122,11],[2172,11,2122,13,"filter"],[2172,17,2122,19],[2172,18,2122,20,"persistence"],[2172,29,2122,31],[2172,33,2122,35,"persistence"],[2172,44,2122,46],[2172,45,2122,47],[2173,6,2123,8],[2174,6,2124,8],[2174,10,2124,12,"selectedPersistence"],[2174,29,2124,31],[2174,32,2124,34,"availablePersistences"],[2174,53,2124,55],[2174,54,2124,56],[2174,55,2124,57],[2174,56,2124,58],[2174,60,2125,12,"_getInstance"],[2174,72,2125,24],[2174,73,2125,25,"inMemoryPersistence"],[2174,92,2125,44],[2174,93,2125,45],[2175,6,2126,8],[2175,12,2126,14,"key"],[2175,15,2126,17],[2175,18,2126,20,"_persistenceKeyName"],[2175,37,2126,39],[2175,38,2126,40,"userKey"],[2175,45,2126,47],[2175,47,2126,49,"auth"],[2175,51,2126,53],[2175,52,2126,54,"config"],[2175,58,2126,60],[2175,59,2126,61,"apiKey"],[2175,65,2126,67],[2175,67,2126,69,"auth"],[2175,71,2126,73],[2175,72,2126,74,"name"],[2175,76,2126,78],[2175,77,2126,79],[2176,6,2127,8],[2177,6,2128,8],[2178,6,2129,8],[2178,10,2129,12,"userToMigrate"],[2178,23,2129,25],[2178,26,2129,28],[2178,30,2129,32],[2179,6,2130,8],[2180,6,2131,8],[2181,6,2132,8],[2182,6,2133,8],[2182,11,2133,13],[2182,17,2133,19,"persistence"],[2182,28,2133,30],[2182,32,2133,34,"persistenceHierarchy"],[2182,52,2133,54],[2182,54,2133,56],[2183,8,2134,12],[2183,12,2134,16],[2184,10,2135,16],[2184,16,2135,22,"blob"],[2184,20,2135,26],[2184,23,2135,29],[2184,29,2135,35,"persistence"],[2184,40,2135,46],[2184,41,2135,47,"_get"],[2184,45,2135,51],[2184,46,2135,52,"key"],[2184,49,2135,55],[2184,50,2135,56],[2185,10,2136,16],[2185,14,2136,20,"blob"],[2185,18,2136,24],[2185,20,2136,26],[2186,12,2137,20],[2186,16,2137,24,"user"],[2186,20,2137,28],[2187,12,2138,20],[2187,16,2138,24],[2187,23,2138,31,"blob"],[2187,27,2138,35],[2187,32,2138,40],[2187,40,2138,48],[2187,42,2138,50],[2188,14,2139,24],[2188,20,2139,30,"response"],[2188,28,2139,38],[2188,31,2139,41],[2188,37,2139,47,"getAccountInfo"],[2188,51,2139,61],[2188,52,2139,62,"auth"],[2188,56,2139,66],[2188,58,2139,68],[2189,16,2140,28,"idToken"],[2189,23,2140,35],[2189,25,2140,37,"blob"],[2190,14,2141,24],[2190,15,2141,25],[2190,16,2141,26],[2190,17,2141,27,"catch"],[2190,22,2141,32],[2190,23,2141,33],[2190,29,2141,39,"undefined"],[2190,38,2141,48],[2190,39,2141,49],[2191,14,2142,24],[2191,18,2142,28],[2191,19,2142,29,"response"],[2191,27,2142,37],[2191,29,2142,39],[2192,16,2143,28],[2193,14,2144,24],[2194,14,2145,24,"user"],[2194,18,2145,28],[2194,21,2145,31],[2194,27,2145,37,"UserImpl"],[2194,35,2145,45],[2194,36,2145,46,"_fromGetAccountInfoResponse"],[2194,63,2145,73],[2194,64,2145,74,"auth"],[2194,68,2145,78],[2194,70,2145,80,"response"],[2194,78,2145,88],[2194,80,2145,90,"blob"],[2194,84,2145,94],[2194,85,2145,95],[2195,12,2146,20],[2195,13,2146,21],[2195,19,2147,25],[2196,14,2148,24,"user"],[2196,18,2148,28],[2196,21,2148,31,"UserImpl"],[2196,29,2148,39],[2196,30,2148,40,"_fromJSON"],[2196,39,2148,49],[2196,40,2148,50,"auth"],[2196,44,2148,54],[2196,46,2148,56,"blob"],[2196,50,2148,60],[2196,51,2148,61],[2196,52,2148,62],[2196,53,2148,63],[2197,12,2149,20],[2198,12,2150,20],[2198,16,2150,24,"persistence"],[2198,27,2150,35],[2198,32,2150,40,"selectedPersistence"],[2198,51,2150,59],[2198,53,2150,61],[2199,14,2151,24,"userToMigrate"],[2199,27,2151,37],[2199,30,2151,40,"user"],[2199,34,2151,44],[2200,12,2152,20],[2201,12,2153,20,"selectedPersistence"],[2201,31,2153,39],[2201,34,2153,42,"persistence"],[2201,45,2153,53],[2202,12,2154,20],[2203,10,2155,16],[2204,8,2156,12],[2204,9,2156,13],[2204,10,2157,12],[2204,16,2157,18],[2204,17,2157,20],[2205,6,2158,8],[2206,6,2159,8],[2207,6,2160,8],[2208,6,2161,8],[2208,12,2161,14,"migrationHierarchy"],[2208,30,2161,32],[2208,33,2161,35,"availablePersistences"],[2208,54,2161,56],[2208,55,2161,57,"filter"],[2208,61,2161,63],[2208,62,2161,64,"p"],[2208,63,2161,65],[2208,67,2161,69,"p"],[2208,68,2161,70],[2208,69,2161,71,"_shouldAllowMigration"],[2208,90,2161,92],[2208,91,2161,93],[2209,6,2162,8],[2210,6,2163,8],[2210,10,2163,12],[2210,11,2163,13,"selectedPersistence"],[2210,30,2163,32],[2210,31,2163,33,"_shouldAllowMigration"],[2210,52,2163,54],[2210,56,2164,12],[2210,57,2164,13,"migrationHierarchy"],[2210,75,2164,31],[2210,76,2164,32,"length"],[2210,82,2164,38],[2210,84,2164,40],[2211,8,2165,12],[2211,15,2165,19],[2211,19,2165,23,"PersistenceUserManager"],[2211,41,2165,45],[2211,42,2165,46,"selectedPersistence"],[2211,61,2165,65],[2211,63,2165,67,"auth"],[2211,67,2165,71],[2211,69,2165,73,"userKey"],[2211,76,2165,80],[2211,77,2165,81],[2212,6,2166,8],[2213,6,2167,8,"selectedPersistence"],[2213,25,2167,27],[2213,28,2167,30,"migrationHierarchy"],[2213,46,2167,48],[2213,47,2167,49],[2213,48,2167,50],[2213,49,2167,51],[2214,6,2168,8],[2214,10,2168,12,"userToMigrate"],[2214,23,2168,25],[2214,25,2168,27],[2215,8,2169,12],[2216,8,2170,12],[2217,8,2171,12],[2217,14,2171,18,"selectedPersistence"],[2217,33,2171,37],[2217,34,2171,38,"_set"],[2217,38,2171,42],[2217,39,2171,43,"key"],[2217,42,2171,46],[2217,44,2171,48,"userToMigrate"],[2217,57,2171,61],[2217,58,2171,62,"toJSON"],[2217,64,2171,68],[2217,65,2171,69],[2217,66,2171,70],[2217,67,2171,71],[2218,6,2172,8],[2219,6,2173,8],[2220,6,2174,8],[2221,6,2175,8],[2221,12,2175,14,"Promise"],[2221,19,2175,21],[2221,20,2175,22,"all"],[2221,23,2175,25],[2221,24,2175,26,"persistenceHierarchy"],[2221,44,2175,46],[2221,45,2175,47,"map"],[2221,48,2175,50],[2221,49,2175,51],[2221,55,2175,58,"persistence"],[2221,66,2175,69],[2221,70,2175,74],[2222,8,2176,12],[2222,12,2176,16,"persistence"],[2222,23,2176,27],[2222,28,2176,32,"selectedPersistence"],[2222,47,2176,51],[2222,49,2176,53],[2223,10,2177,16],[2223,14,2177,20],[2224,12,2178,20],[2224,18,2178,26,"persistence"],[2224,29,2178,37],[2224,30,2178,38,"_remove"],[2224,37,2178,45],[2224,38,2178,46,"key"],[2224,41,2178,49],[2224,42,2178,50],[2225,10,2179,16],[2225,11,2179,17],[2225,12,2180,16],[2225,18,2180,22],[2225,19,2180,24],[2226,8,2181,12],[2227,6,2182,8],[2227,7,2182,9],[2227,8,2182,10],[2227,9,2182,11],[2228,6,2183,8],[2228,13,2183,15],[2228,17,2183,19,"PersistenceUserManager"],[2228,39,2183,41],[2228,40,2183,42,"selectedPersistence"],[2228,59,2183,61],[2228,61,2183,63,"auth"],[2228,65,2183,67],[2228,67,2183,69,"userKey"],[2228,74,2183,76],[2228,75,2183,77],[2229,4,2184,4],[2230,2,2185,0],[2232,2,2187,0],[2233,0,2188,0],[2234,0,2189,0],[2235,0,2190,0],[2236,0,2191,0],[2237,0,2192,0],[2238,0,2193,0],[2239,0,2194,0],[2240,0,2195,0],[2241,0,2196,0],[2242,0,2197,0],[2243,0,2198,0],[2244,0,2199,0],[2245,0,2200,0],[2246,0,2201,0],[2247,0,2202,0],[2248,2,2203,0],[2249,0,2204,0],[2250,0,2205,0],[2251,2,2206,0],[2251,11,2206,9,"_getBrowserName"],[2251,26,2206,24,"_getBrowserName"],[2251,27,2206,25,"userAgent"],[2251,36,2206,34],[2251,38,2206,36],[2252,4,2207,4],[2252,10,2207,10,"ua"],[2252,12,2207,12],[2252,15,2207,15,"userAgent"],[2252,24,2207,24],[2252,25,2207,25,"toLowerCase"],[2252,36,2207,36],[2252,37,2207,37],[2252,38,2207,38],[2253,4,2208,4],[2253,8,2208,8,"ua"],[2253,10,2208,10],[2253,11,2208,11,"includes"],[2253,19,2208,19],[2253,20,2208,20],[2253,28,2208,28],[2253,29,2208,29],[2253,33,2208,33,"ua"],[2253,35,2208,35],[2253,36,2208,36,"includes"],[2253,44,2208,44],[2253,45,2208,45],[2253,51,2208,51],[2253,52,2208,52],[2253,56,2208,56,"ua"],[2253,58,2208,58],[2253,59,2208,59,"includes"],[2253,67,2208,67],[2253,68,2208,68],[2253,76,2208,76],[2253,77,2208,77],[2253,79,2208,79],[2254,6,2209,8],[2254,13,2209,15],[2254,20,2209,22],[2254,21,2209,23],[2255,4,2210,4],[2255,5,2210,5],[2255,11,2211,9],[2255,15,2211,13,"_isIEMobile"],[2255,26,2211,24],[2255,27,2211,25,"ua"],[2255,29,2211,27],[2255,30,2211,28],[2255,32,2211,30],[2256,6,2212,8],[2257,6,2213,8],[2257,13,2213,15],[2257,23,2213,25],[2257,24,2213,26],[2258,4,2214,4],[2258,5,2214,5],[2258,11,2215,9],[2258,15,2215,13,"ua"],[2258,17,2215,15],[2258,18,2215,16,"includes"],[2258,26,2215,24],[2258,27,2215,25],[2258,33,2215,31],[2258,34,2215,32],[2258,38,2215,36,"ua"],[2258,40,2215,38],[2258,41,2215,39,"includes"],[2258,49,2215,47],[2258,50,2215,48],[2258,60,2215,58],[2258,61,2215,59],[2258,63,2215,61],[2259,6,2216,8],[2259,13,2216,15],[2259,17,2216,19],[2259,18,2216,20],[2260,4,2217,4],[2260,5,2217,5],[2260,11,2218,9],[2260,15,2218,13,"ua"],[2260,17,2218,15],[2260,18,2218,16,"includes"],[2260,26,2218,24],[2260,27,2218,25],[2260,34,2218,32],[2260,35,2218,33],[2260,37,2218,35],[2261,6,2219,8],[2261,13,2219,15],[2261,19,2219,21],[2261,20,2219,22],[2262,4,2220,4],[2262,5,2220,5],[2262,11,2221,9],[2262,15,2221,13,"_isFirefox"],[2262,25,2221,23],[2262,26,2221,24,"ua"],[2262,28,2221,26],[2262,29,2221,27],[2262,31,2221,29],[2263,6,2222,8],[2263,13,2222,15],[2263,22,2222,24],[2263,23,2222,25],[2264,4,2223,4],[2264,5,2223,5],[2264,11,2224,9],[2264,15,2224,13,"ua"],[2264,17,2224,15],[2264,18,2224,16,"includes"],[2264,26,2224,24],[2264,27,2224,25],[2264,34,2224,32],[2264,35,2224,33],[2264,37,2224,35],[2265,6,2225,8],[2265,13,2225,15],[2265,19,2225,21],[2265,20,2225,22],[2266,4,2226,4],[2266,5,2226,5],[2266,11,2227,9],[2266,15,2227,13,"_isBlackBerry"],[2266,28,2227,26],[2266,29,2227,27,"ua"],[2266,31,2227,29],[2266,32,2227,30],[2266,34,2227,32],[2267,6,2228,8],[2268,6,2229,8],[2268,13,2229,15],[2268,25,2229,27],[2268,26,2229,28],[2269,4,2230,4],[2269,5,2230,5],[2269,11,2231,9],[2269,15,2231,13,"_isWebOS"],[2269,23,2231,21],[2269,24,2231,22,"ua"],[2269,26,2231,24],[2269,27,2231,25],[2269,29,2231,27],[2270,6,2232,8],[2271,6,2233,8],[2271,13,2233,15],[2271,20,2233,22],[2271,21,2233,23],[2272,4,2234,4],[2272,5,2234,5],[2272,11,2235,9],[2272,15,2235,13,"_isSafari"],[2272,24,2235,22],[2272,25,2235,23,"ua"],[2272,27,2235,25],[2272,28,2235,26],[2272,30,2235,28],[2273,6,2236,8],[2273,13,2236,15],[2273,21,2236,23],[2273,22,2236,24],[2274,4,2237,4],[2274,5,2237,5],[2274,11,2238,9],[2274,15,2238,13],[2274,16,2238,14,"ua"],[2274,18,2238,16],[2274,19,2238,17,"includes"],[2274,27,2238,25],[2274,28,2238,26],[2274,37,2238,35],[2274,38,2238,36],[2274,42,2238,40,"_isChromeIOS"],[2274,54,2238,52],[2274,55,2238,53,"ua"],[2274,57,2238,55],[2274,58,2238,56],[2274,63,2239,8],[2274,64,2239,9,"ua"],[2274,66,2239,11],[2274,67,2239,12,"includes"],[2274,75,2239,20],[2274,76,2239,21],[2274,83,2239,28],[2274,84,2239,29],[2274,86,2239,31],[2275,6,2240,8],[2275,13,2240,15],[2275,21,2240,23],[2275,22,2240,24],[2276,4,2241,4],[2276,5,2241,5],[2276,11,2242,9],[2276,15,2242,13,"_isAndroid"],[2276,25,2242,23],[2276,26,2242,24,"ua"],[2276,28,2242,26],[2276,29,2242,27],[2276,31,2242,29],[2277,6,2243,8],[2278,6,2244,8],[2278,13,2244,15],[2278,22,2244,24],[2278,23,2244,25],[2279,4,2245,4],[2279,5,2245,5],[2279,11,2246,9],[2280,6,2247,8],[2281,6,2248,8],[2281,12,2248,14,"re"],[2281,14,2248,16],[2281,17,2248,19],[2281,50,2248,52],[2282,6,2249,8],[2282,12,2249,14,"matches"],[2282,19,2249,21],[2282,22,2249,24,"userAgent"],[2282,31,2249,33],[2282,32,2249,34,"match"],[2282,37,2249,39],[2282,38,2249,40,"re"],[2282,40,2249,42],[2282,41,2249,43],[2283,6,2250,8],[2283,10,2250,12,"matches"],[2283,17,2250,19],[2283,19,2250,21,"length"],[2283,25,2250,27],[2283,30,2250,32],[2283,31,2250,33],[2283,33,2250,35],[2284,8,2251,12],[2284,15,2251,19,"matches"],[2284,22,2251,26],[2284,23,2251,27],[2284,24,2251,28],[2284,25,2251,29],[2285,6,2252,8],[2286,4,2253,4],[2287,4,2254,4],[2287,11,2254,11],[2287,18,2254,18],[2287,19,2254,19],[2288,2,2255,0],[2289,2,2256,0],[2289,11,2256,9,"_isFirefox"],[2289,21,2256,19,"_isFirefox"],[2289,22,2256,20,"ua"],[2289,24,2256,22],[2289,27,2256,25],[2289,31,2256,25,"getUA"],[2289,42,2256,30],[2289,44,2256,31],[2289,45,2256,32],[2289,47,2256,34],[2290,4,2257,4],[2290,11,2257,11],[2290,23,2257,23],[2290,24,2257,24,"test"],[2290,28,2257,28],[2290,29,2257,29,"ua"],[2290,31,2257,31],[2290,32,2257,32],[2291,2,2258,0],[2292,2,2259,0],[2292,11,2259,9,"_isSafari"],[2292,20,2259,18,"_isSafari"],[2292,21,2259,19,"userAgent"],[2292,30,2259,28],[2292,33,2259,31],[2292,37,2259,31,"getUA"],[2292,48,2259,36],[2292,50,2259,37],[2292,51,2259,38],[2292,53,2259,40],[2293,4,2260,4],[2293,10,2260,10,"ua"],[2293,12,2260,12],[2293,15,2260,15,"userAgent"],[2293,24,2260,24],[2293,25,2260,25,"toLowerCase"],[2293,36,2260,36],[2293,37,2260,37],[2293,38,2260,38],[2294,4,2261,4],[2294,11,2261,12,"ua"],[2294,13,2261,14],[2294,14,2261,15,"includes"],[2294,22,2261,23],[2294,23,2261,24],[2294,32,2261,33],[2294,33,2261,34],[2294,37,2262,8],[2294,38,2262,9,"ua"],[2294,40,2262,11],[2294,41,2262,12,"includes"],[2294,49,2262,20],[2294,50,2262,21],[2294,59,2262,30],[2294,60,2262,31],[2294,64,2263,8],[2294,65,2263,9,"ua"],[2294,67,2263,11],[2294,68,2263,12,"includes"],[2294,76,2263,20],[2294,77,2263,21],[2294,85,2263,29],[2294,86,2263,30],[2294,90,2264,8],[2294,91,2264,9,"ua"],[2294,93,2264,11],[2294,94,2264,12,"includes"],[2294,102,2264,20],[2294,103,2264,21],[2294,112,2264,30],[2294,113,2264,31],[2295,2,2265,0],[2296,2,2266,0],[2296,11,2266,9,"_isChromeIOS"],[2296,23,2266,21,"_isChromeIOS"],[2296,24,2266,22,"ua"],[2296,26,2266,24],[2296,29,2266,27],[2296,33,2266,27,"getUA"],[2296,44,2266,32],[2296,46,2266,33],[2296,47,2266,34],[2296,49,2266,36],[2297,4,2267,4],[2297,11,2267,11],[2297,21,2267,21],[2297,22,2267,22,"test"],[2297,26,2267,26],[2297,27,2267,27,"ua"],[2297,29,2267,29],[2297,30,2267,30],[2298,2,2268,0],[2299,2,2269,0],[2299,11,2269,9,"_isIEMobile"],[2299,22,2269,20,"_isIEMobile"],[2299,23,2269,21,"ua"],[2299,25,2269,23],[2299,28,2269,26],[2299,32,2269,26,"getUA"],[2299,43,2269,31],[2299,45,2269,32],[2299,46,2269,33],[2299,48,2269,35],[2300,4,2270,4],[2300,11,2270,11],[2300,22,2270,22],[2300,23,2270,23,"test"],[2300,27,2270,27],[2300,28,2270,28,"ua"],[2300,30,2270,30],[2300,31,2270,31],[2301,2,2271,0],[2302,2,2272,0],[2302,11,2272,9,"_isAndroid"],[2302,21,2272,19,"_isAndroid"],[2302,22,2272,20,"ua"],[2302,24,2272,22],[2302,27,2272,25],[2302,31,2272,25,"getUA"],[2302,42,2272,30],[2302,44,2272,31],[2302,45,2272,32],[2302,47,2272,34],[2303,4,2273,4],[2303,11,2273,11],[2303,21,2273,21],[2303,22,2273,22,"test"],[2303,26,2273,26],[2303,27,2273,27,"ua"],[2303,29,2273,29],[2303,30,2273,30],[2304,2,2274,0],[2305,2,2275,0],[2305,11,2275,9,"_isBlackBerry"],[2305,24,2275,22,"_isBlackBerry"],[2305,25,2275,23,"ua"],[2305,27,2275,25],[2305,30,2275,28],[2305,34,2275,28,"getUA"],[2305,45,2275,33],[2305,47,2275,34],[2305,48,2275,35],[2305,50,2275,37],[2306,4,2276,4],[2306,11,2276,11],[2306,24,2276,24],[2306,25,2276,25,"test"],[2306,29,2276,29],[2306,30,2276,30,"ua"],[2306,32,2276,32],[2306,33,2276,33],[2307,2,2277,0],[2308,2,2278,0],[2308,11,2278,9,"_isWebOS"],[2308,19,2278,17,"_isWebOS"],[2308,20,2278,18,"ua"],[2308,22,2278,20],[2308,25,2278,23],[2308,29,2278,23,"getUA"],[2308,40,2278,28],[2308,42,2278,29],[2308,43,2278,30],[2308,45,2278,32],[2309,4,2279,4],[2309,11,2279,11],[2309,19,2279,19],[2309,20,2279,20,"test"],[2309,24,2279,24],[2309,25,2279,25,"ua"],[2309,27,2279,27],[2309,28,2279,28],[2310,2,2280,0],[2311,2,2281,0],[2311,11,2281,9,"_isIOS"],[2311,17,2281,15,"_isIOS"],[2311,18,2281,16,"ua"],[2311,20,2281,18],[2311,23,2281,21],[2311,27,2281,21,"getUA"],[2311,38,2281,26],[2311,40,2281,27],[2311,41,2281,28],[2311,43,2281,30],[2312,4,2282,4],[2312,11,2282,12],[2312,30,2282,31],[2312,31,2282,32,"test"],[2312,35,2282,36],[2312,36,2282,37,"ua"],[2312,38,2282,39],[2312,39,2282,40],[2312,43,2283,9],[2312,55,2283,21],[2312,56,2283,22,"test"],[2312,60,2283,26],[2312,61,2283,27,"ua"],[2312,63,2283,29],[2312,64,2283,30],[2312,68,2283,34],[2312,77,2283,43],[2312,78,2283,44,"test"],[2312,82,2283,48],[2312,83,2283,49,"ua"],[2312,85,2283,51],[2312,86,2283,53],[2313,2,2284,0],[2314,2,2285,0],[2314,11,2285,9,"_isIOS7Or8"],[2314,21,2285,19,"_isIOS7Or8"],[2314,22,2285,20,"ua"],[2314,24,2285,22],[2314,27,2285,25],[2314,31,2285,25,"getUA"],[2314,42,2285,30],[2314,44,2285,31],[2314,45,2285,32],[2314,47,2285,34],[2315,4,2286,4],[2315,11,2286,12],[2315,41,2286,42],[2315,42,2286,43,"test"],[2315,46,2286,47],[2315,47,2286,48,"ua"],[2315,49,2286,50],[2315,50,2286,51],[2315,54,2287,8],[2315,84,2287,38],[2315,85,2287,39,"test"],[2315,89,2287,43],[2315,90,2287,44,"ua"],[2315,92,2287,46],[2315,93,2287,47],[2316,2,2288,0],[2317,2,2289,0],[2317,11,2289,9,"_isIE10"],[2317,18,2289,16,"_isIE10"],[2317,19,2289,16],[2317,21,2289,19],[2318,4,2290,4],[2318,11,2290,11],[2318,15,2290,11,"isIE"],[2318,25,2290,15],[2318,27,2290,16],[2318,28,2290,17],[2318,32,2290,21,"document"],[2318,40,2290,29],[2318,41,2290,30,"documentMode"],[2318,53,2290,42],[2318,58,2290,47],[2318,60,2290,49],[2319,2,2291,0],[2320,2,2292,0],[2320,11,2292,9,"_isMobileBrowser"],[2320,27,2292,25,"_isMobileBrowser"],[2320,28,2292,26,"ua"],[2320,30,2292,28],[2320,33,2292,31],[2320,37,2292,31,"getUA"],[2320,48,2292,36],[2320,50,2292,37],[2320,51,2292,38],[2320,53,2292,40],[2321,4,2293,4],[2322,4,2294,4],[2322,11,2294,12,"_isIOS"],[2322,17,2294,18],[2322,18,2294,19,"ua"],[2322,20,2294,21],[2322,21,2294,22],[2322,25,2295,8,"_isAndroid"],[2322,35,2295,18],[2322,36,2295,19,"ua"],[2322,38,2295,21],[2322,39,2295,22],[2322,43,2296,8,"_isWebOS"],[2322,51,2296,16],[2322,52,2296,17,"ua"],[2322,54,2296,19],[2322,55,2296,20],[2322,59,2297,8,"_isBlackBerry"],[2322,72,2297,21],[2322,73,2297,22,"ua"],[2322,75,2297,24],[2322,76,2297,25],[2322,80,2298,8],[2322,96,2298,24],[2322,97,2298,25,"test"],[2322,101,2298,29],[2322,102,2298,30,"ua"],[2322,104,2298,32],[2322,105,2298,33],[2322,109,2299,8,"_isIEMobile"],[2322,120,2299,19],[2322,121,2299,20,"ua"],[2322,123,2299,22],[2322,124,2299,23],[2323,2,2300,0],[2325,2,2302,0],[2326,0,2303,0],[2327,0,2304,0],[2328,0,2305,0],[2329,0,2306,0],[2330,0,2307,0],[2331,0,2308,0],[2332,0,2309,0],[2333,0,2310,0],[2334,0,2311,0],[2335,0,2312,0],[2336,0,2313,0],[2337,0,2314,0],[2338,0,2315,0],[2339,0,2316,0],[2340,0,2317,0],[2341,2,2318,0],[2342,0,2319,0],[2343,0,2320,0],[2344,2,2321,0],[2344,11,2321,9,"_getClientVersion"],[2344,28,2321,26,"_getClientVersion"],[2344,29,2321,27,"clientPlatform"],[2344,43,2321,41],[2344,45,2321,43,"frameworks"],[2344,55,2321,53],[2344,58,2321,56],[2344,60,2321,58],[2344,62,2321,60],[2345,4,2322,4],[2345,8,2322,8,"reportedPlatform"],[2345,24,2322,24],[2346,4,2323,4],[2346,12,2323,12,"clientPlatform"],[2346,26,2323,26],[2347,6,2324,8],[2347,11,2324,13],[2347,20,2324,22],[2347,21,2324,23],[2348,8,2325,12],[2349,8,2326,12,"reportedPlatform"],[2349,24,2326,28],[2349,27,2326,31,"_getBrowserName"],[2349,42,2326,46],[2349,43,2326,47],[2349,47,2326,47,"getUA"],[2349,58,2326,52],[2349,60,2326,53],[2349,61,2326,54],[2349,62,2326,55],[2350,8,2327,12],[2351,6,2328,8],[2351,11,2328,13],[2351,19,2328,21],[2351,20,2328,22],[2352,8,2329,12],[2353,8,2330,12],[2354,8,2331,12],[2355,8,2332,12,"reportedPlatform"],[2355,24,2332,28],[2355,27,2332,31],[2355,30,2332,34,"_getBrowserName"],[2355,45,2332,49],[2355,46,2332,50],[2355,50,2332,50,"getUA"],[2355,61,2332,55],[2355,63,2332,56],[2355,64,2332,57],[2355,65,2332,58],[2355,69,2332,62,"clientPlatform"],[2355,83,2332,76],[2355,85,2332,78],[2356,8,2333,12],[2357,6,2334,8],[2358,8,2335,12,"reportedPlatform"],[2358,24,2335,28],[2358,27,2335,31,"clientPlatform"],[2358,41,2335,45],[2359,4,2336,4],[2360,4,2337,4],[2360,10,2337,10,"reportedFrameworks"],[2360,28,2337,28],[2360,31,2337,31,"frameworks"],[2360,41,2337,41],[2360,42,2337,42,"length"],[2360,48,2337,48],[2360,51,2338,10,"frameworks"],[2360,61,2338,20],[2360,62,2338,21,"join"],[2360,66,2338,25],[2360,67,2338,26],[2360,70,2338,29],[2360,71,2338,30],[2360,74,2339,10],[2360,92,2339,28],[2360,93,2339,29],[2360,94,2339,30],[2361,4,2340,4],[2361,11,2340,11],[2361,14,2340,14,"reportedPlatform"],[2361,30,2340,30],[2361,34,2340,34],[2361,42,2340,42],[2361,43,2340,43],[2361,78,2340,78,"SDK_VERSION"],[2361,94,2340,89],[2361,98,2340,93,"reportedFrameworks"],[2361,116,2340,111],[2361,118,2340,113],[2362,2,2341,0],[2364,2,2343,0],[2365,0,2344,0],[2366,0,2345,0],[2367,0,2346,0],[2368,0,2347,0],[2369,0,2348,0],[2370,0,2349,0],[2371,0,2350,0],[2372,0,2351,0],[2373,0,2352,0],[2374,0,2353,0],[2375,0,2354,0],[2376,0,2355,0],[2377,0,2356,0],[2378,0,2357,0],[2379,0,2358,0],[2380,2,2359,0],[2380,8,2359,6,"AuthMiddlewareQueue"],[2380,27,2359,25],[2380,28,2359,26],[2381,4,2360,4,"constructor"],[2381,15,2360,15,"constructor"],[2381,16,2360,16,"auth"],[2381,20,2360,20],[2381,22,2360,22],[2382,6,2361,8],[2382,10,2361,12],[2382,11,2361,13,"auth"],[2382,15,2361,17],[2382,18,2361,20,"auth"],[2382,22,2361,24],[2383,6,2362,8],[2383,10,2362,12],[2383,11,2362,13,"queue"],[2383,16,2362,18],[2383,19,2362,21],[2383,21,2362,23],[2384,4,2363,4],[2385,4,2364,4,"pushCallback"],[2385,16,2364,16,"pushCallback"],[2385,17,2364,17,"callback"],[2385,25,2364,25],[2385,27,2364,27,"onAbort"],[2385,34,2364,34],[2385,36,2364,36],[2386,6,2365,8],[2387,6,2366,8],[2388,6,2367,8],[2388,12,2367,14,"wrappedCallback"],[2388,27,2367,29],[2388,30,2367,33,"user"],[2388,34,2367,37],[2388,38,2367,42],[2388,42,2367,46,"Promise"],[2388,49,2367,53],[2388,50,2367,54],[2388,51,2367,55,"resolve"],[2388,58,2367,62],[2388,60,2367,64,"reject"],[2388,66,2367,70],[2388,71,2367,75],[2389,8,2368,12],[2389,12,2368,16],[2390,10,2369,16],[2390,16,2369,22,"result"],[2390,22,2369,28],[2390,25,2369,31,"callback"],[2390,33,2369,39],[2390,34,2369,40,"user"],[2390,38,2369,44],[2390,39,2369,45],[2391,10,2370,16],[2392,10,2371,16],[2393,10,2372,16,"resolve"],[2393,17,2372,23],[2393,18,2372,24,"result"],[2393,24,2372,30],[2393,25,2372,31],[2394,8,2373,12],[2394,9,2373,13],[2394,10,2374,12],[2394,17,2374,19,"e"],[2394,18,2374,20],[2394,20,2374,22],[2395,10,2375,16],[2396,10,2376,16,"reject"],[2396,16,2376,22],[2396,17,2376,23,"e"],[2396,18,2376,24],[2396,19,2376,25],[2397,8,2377,12],[2398,6,2378,8],[2398,7,2378,9],[2398,8,2378,10],[2399,6,2379,8],[2400,6,2380,8,"wrappedCallback"],[2400,21,2380,23],[2400,22,2380,24,"onAbort"],[2400,29,2380,31],[2400,32,2380,34,"onAbort"],[2400,39,2380,41],[2401,6,2381,8],[2401,10,2381,12],[2401,11,2381,13,"queue"],[2401,16,2381,18],[2401,17,2381,19,"push"],[2401,21,2381,23],[2401,22,2381,24,"wrappedCallback"],[2401,37,2381,39],[2401,38,2381,40],[2402,6,2382,8],[2402,12,2382,14,"index"],[2402,17,2382,19],[2402,20,2382,22],[2402,24,2382,26],[2402,25,2382,27,"queue"],[2402,30,2382,32],[2402,31,2382,33,"length"],[2402,37,2382,39],[2402,40,2382,42],[2402,41,2382,43],[2403,6,2383,8],[2403,13,2383,15],[2403,19,2383,21],[2404,8,2384,12],[2405,8,2385,12],[2406,8,2386,12],[2406,12,2386,16],[2406,13,2386,17,"queue"],[2406,18,2386,22],[2406,19,2386,23,"index"],[2406,24,2386,28],[2406,25,2386,29],[2406,28,2386,32],[2406,34,2386,38,"Promise"],[2406,41,2386,45],[2406,42,2386,46,"resolve"],[2406,49,2386,53],[2406,50,2386,54],[2406,51,2386,55],[2407,6,2387,8],[2407,7,2387,9],[2408,4,2388,4],[2409,4,2389,4],[2409,10,2389,10,"runMiddleware"],[2409,23,2389,23,"runMiddleware"],[2409,24,2389,24,"nextUser"],[2409,32,2389,32],[2409,34,2389,34],[2410,6,2390,8],[2410,10,2390,12],[2410,14,2390,16],[2410,15,2390,17,"auth"],[2410,19,2390,21],[2410,20,2390,22,"currentUser"],[2410,31,2390,33],[2410,36,2390,38,"nextUser"],[2410,44,2390,46],[2410,46,2390,48],[2411,8,2391,12],[2412,6,2392,8],[2413,6,2393,8],[2414,6,2394,8],[2415,6,2395,8],[2415,12,2395,14,"onAbortStack"],[2415,24,2395,26],[2415,27,2395,29],[2415,29,2395,31],[2416,6,2396,8],[2416,10,2396,12],[2417,8,2397,12],[2417,13,2397,17],[2417,19,2397,23,"beforeStateCallback"],[2417,38,2397,42],[2417,42,2397,46],[2417,46,2397,50],[2417,47,2397,51,"queue"],[2417,52,2397,56],[2417,54,2397,58],[2418,10,2398,16],[2418,16,2398,22,"beforeStateCallback"],[2418,35,2398,41],[2418,36,2398,42,"nextUser"],[2418,44,2398,50],[2418,45,2398,51],[2419,10,2399,16],[2420,10,2400,16],[2420,14,2400,20,"beforeStateCallback"],[2420,33,2400,39],[2420,34,2400,40,"onAbort"],[2420,41,2400,47],[2420,43,2400,49],[2421,12,2401,20,"onAbortStack"],[2421,24,2401,32],[2421,25,2401,33,"push"],[2421,29,2401,37],[2421,30,2401,38,"beforeStateCallback"],[2421,49,2401,57],[2421,50,2401,58,"onAbort"],[2421,57,2401,65],[2421,58,2401,66],[2422,10,2402,16],[2423,8,2403,12],[2424,6,2404,8],[2424,7,2404,9],[2424,8,2405,8],[2424,15,2405,15,"e"],[2424,16,2405,16],[2424,18,2405,18],[2425,8,2406,12],[2426,8,2407,12],[2427,8,2408,12,"onAbortStack"],[2427,20,2408,24],[2427,21,2408,25,"reverse"],[2427,28,2408,32],[2427,29,2408,33],[2427,30,2408,34],[2428,8,2409,12],[2428,13,2409,17],[2428,19,2409,23,"onAbort"],[2428,26,2409,30],[2428,30,2409,34,"onAbortStack"],[2428,42,2409,46],[2428,44,2409,48],[2429,10,2410,16],[2429,14,2410,20],[2430,12,2411,20,"onAbort"],[2430,19,2411,27],[2430,20,2411,28],[2430,21,2411,29],[2431,10,2412,16],[2431,11,2412,17],[2431,12,2413,16],[2431,19,2413,23,"_"],[2431,20,2413,24],[2431,22,2413,26],[2432,12,2414,20],[2433,10,2414,20],[2434,8,2416,12],[2435,8,2417,12],[2435,14,2417,18],[2435,18,2417,22],[2435,19,2417,23,"auth"],[2435,23,2417,27],[2435,24,2417,28,"_errorFactory"],[2435,37,2417,41],[2435,38,2417,42,"create"],[2435,44,2417,48],[2435,45,2417,49],[2435,60,2417,64],[2435,61,2417,65],[2435,96,2417,100],[2436,10,2418,16,"originalMessage"],[2436,25,2418,31],[2436,27,2418,33,"e"],[2436,28,2418,34],[2436,30,2418,36,"message"],[2437,8,2419,12],[2437,9,2419,13],[2437,10,2419,14],[2438,6,2420,8],[2439,4,2421,4],[2440,2,2422,0],[2442,2,2424,0],[2443,0,2425,0],[2444,0,2426,0],[2445,0,2427,0],[2446,0,2428,0],[2447,0,2429,0],[2448,0,2430,0],[2449,0,2431,0],[2450,0,2432,0],[2451,0,2433,0],[2452,0,2434,0],[2453,0,2435,0],[2454,0,2436,0],[2455,0,2437,0],[2456,0,2438,0],[2457,0,2439,0],[2458,2,2440,0],[2459,0,2441,0],[2460,0,2442,0],[2461,0,2443,0],[2462,0,2444,0],[2463,0,2445,0],[2464,0,2446,0],[2465,2,2447,0],[2465,17,2447,15,"_getPasswordPolicy"],[2465,35,2447,33,"_getPasswordPolicy"],[2465,36,2447,34,"auth"],[2465,40,2447,38],[2465,42,2447,40,"request"],[2465,49,2447,47],[2465,52,2447,50],[2465,53,2447,51],[2465,54,2447,52],[2465,56,2447,54],[2466,4,2448,4],[2466,11,2448,11,"_performApiRequest"],[2466,29,2448,29],[2466,30,2448,30,"auth"],[2466,34,2448,34],[2466,36,2448,36],[2466,41,2448,41],[2466,42,2448,42],[2466,64,2448,64],[2466,84,2448,84],[2466,85,2448,85],[2466,121,2448,121,"_addTidIfNecessary"],[2466,139,2448,139],[2466,140,2448,140,"auth"],[2466,144,2448,144],[2466,146,2448,146,"request"],[2466,153,2448,153],[2466,154,2448,154],[2466,155,2448,155],[2467,2,2449,0],[2469,2,2451,0],[2470,0,2452,0],[2471,0,2453,0],[2472,0,2454,0],[2473,0,2455,0],[2474,0,2456,0],[2475,0,2457,0],[2476,0,2458,0],[2477,0,2459,0],[2478,0,2460,0],[2479,0,2461,0],[2480,0,2462,0],[2481,0,2463,0],[2482,0,2464,0],[2483,0,2465,0],[2484,0,2466,0],[2485,2,2467,0],[2486,2,2468,0],[2486,8,2468,6,"MINIMUM_MIN_PASSWORD_LENGTH"],[2486,35,2468,33],[2486,38,2468,36],[2486,39,2468,37],[2487,2,2469,0],[2488,0,2470,0],[2489,0,2471,0],[2490,0,2472,0],[2491,0,2473,0],[2492,2,2474,0],[2492,8,2474,6,"PasswordPolicyImpl"],[2492,26,2474,24],[2492,27,2474,25],[2493,4,2475,4,"constructor"],[2493,15,2475,15,"constructor"],[2493,16,2475,16,"response"],[2493,24,2475,24],[2493,26,2475,26],[2494,6,2476,8],[2495,6,2477,8],[2495,12,2477,14,"responseOptions"],[2495,27,2477,29],[2495,30,2477,32,"response"],[2495,38,2477,40],[2495,39,2477,41,"customStrengthOptions"],[2495,60,2477,62],[2496,6,2478,8],[2496,10,2478,12],[2496,11,2478,13,"customStrengthOptions"],[2496,32,2478,34],[2496,35,2478,37],[2496,36,2478,38],[2496,37,2478,39],[2497,6,2479,8],[2498,6,2480,8],[2498,10,2480,12],[2498,11,2480,13,"customStrengthOptions"],[2498,32,2480,34],[2498,33,2480,35,"minPasswordLength"],[2498,50,2480,52],[2498,53,2481,12,"responseOptions"],[2498,68,2481,27],[2498,69,2481,28,"minPasswordLength"],[2498,86,2481,45],[2498,90,2481,49,"MINIMUM_MIN_PASSWORD_LENGTH"],[2498,117,2481,76],[2499,6,2482,8],[2499,10,2482,12,"responseOptions"],[2499,25,2482,27],[2499,26,2482,28,"maxPasswordLength"],[2499,43,2482,45],[2499,45,2482,47],[2500,8,2483,12],[2500,12,2483,16],[2500,13,2483,17,"customStrengthOptions"],[2500,34,2483,38],[2500,35,2483,39,"maxPasswordLength"],[2500,52,2483,56],[2500,55,2484,16,"responseOptions"],[2500,70,2484,31],[2500,71,2484,32,"maxPasswordLength"],[2500,88,2484,49],[2501,6,2485,8],[2502,6,2486,8],[2502,10,2486,12,"responseOptions"],[2502,25,2486,27],[2502,26,2486,28,"containsLowercaseCharacter"],[2502,52,2486,54],[2502,57,2486,59,"undefined"],[2502,66,2486,68],[2502,68,2486,70],[2503,8,2487,12],[2503,12,2487,16],[2503,13,2487,17,"customStrengthOptions"],[2503,34,2487,38],[2503,35,2487,39,"containsLowercaseLetter"],[2503,58,2487,62],[2503,61,2488,16,"responseOptions"],[2503,76,2488,31],[2503,77,2488,32,"containsLowercaseCharacter"],[2503,103,2488,58],[2504,6,2489,8],[2505,6,2490,8],[2505,10,2490,12,"responseOptions"],[2505,25,2490,27],[2505,26,2490,28,"containsUppercaseCharacter"],[2505,52,2490,54],[2505,57,2490,59,"undefined"],[2505,66,2490,68],[2505,68,2490,70],[2506,8,2491,12],[2506,12,2491,16],[2506,13,2491,17,"customStrengthOptions"],[2506,34,2491,38],[2506,35,2491,39,"containsUppercaseLetter"],[2506,58,2491,62],[2506,61,2492,16,"responseOptions"],[2506,76,2492,31],[2506,77,2492,32,"containsUppercaseCharacter"],[2506,103,2492,58],[2507,6,2493,8],[2508,6,2494,8],[2508,10,2494,12,"responseOptions"],[2508,25,2494,27],[2508,26,2494,28,"containsNumericCharacter"],[2508,50,2494,52],[2508,55,2494,57,"undefined"],[2508,64,2494,66],[2508,66,2494,68],[2509,8,2495,12],[2509,12,2495,16],[2509,13,2495,17,"customStrengthOptions"],[2509,34,2495,38],[2509,35,2495,39,"containsNumericCharacter"],[2509,59,2495,63],[2509,62,2496,16,"responseOptions"],[2509,77,2496,31],[2509,78,2496,32,"containsNumericCharacter"],[2509,102,2496,56],[2510,6,2497,8],[2511,6,2498,8],[2511,10,2498,12,"responseOptions"],[2511,25,2498,27],[2511,26,2498,28,"containsNonAlphanumericCharacter"],[2511,58,2498,60],[2511,63,2498,65,"undefined"],[2511,72,2498,74],[2511,74,2498,76],[2512,8,2499,12],[2512,12,2499,16],[2512,13,2499,17,"customStrengthOptions"],[2512,34,2499,38],[2512,35,2499,39,"containsNonAlphanumericCharacter"],[2512,67,2499,71],[2512,70,2500,16,"responseOptions"],[2512,85,2500,31],[2512,86,2500,32,"containsNonAlphanumericCharacter"],[2512,118,2500,64],[2513,6,2501,8],[2514,6,2502,8],[2514,10,2502,12],[2514,11,2502,13,"enforcementState"],[2514,27,2502,29],[2514,30,2502,32,"response"],[2514,38,2502,40],[2514,39,2502,41,"enforcementState"],[2514,55,2502,57],[2515,6,2503,8],[2515,10,2503,12],[2515,14,2503,16],[2515,15,2503,17,"enforcementState"],[2515,31,2503,33],[2515,36,2503,38],[2515,67,2503,69],[2515,69,2503,71],[2516,8,2504,12],[2516,12,2504,16],[2516,13,2504,17,"enforcementState"],[2516,29,2504,33],[2516,32,2504,36],[2516,37,2504,41],[2517,6,2505,8],[2518,6,2506,8],[2519,6,2507,8],[2519,10,2507,12],[2519,11,2507,13,"allowedNonAlphanumericCharacters"],[2519,43,2507,45],[2519,46,2508,12,"response"],[2519,54,2508,20],[2519,55,2508,21,"allowedNonAlphanumericCharacters"],[2519,87,2508,53],[2519,89,2508,55,"join"],[2519,93,2508,59],[2519,94,2508,60],[2519,96,2508,62],[2519,97,2508,63],[2519,101,2508,67],[2519,103,2508,69],[2520,6,2509,8],[2520,10,2509,12],[2520,11,2509,13,"forceUpgradeOnSignin"],[2520,31,2509,33],[2520,34,2509,36,"response"],[2520,42,2509,44],[2520,43,2509,45,"forceUpgradeOnSignin"],[2520,63,2509,65],[2520,67,2509,69],[2520,72,2509,74],[2521,6,2510,8],[2521,10,2510,12],[2521,11,2510,13,"schemaVersion"],[2521,24,2510,26],[2521,27,2510,29,"response"],[2521,35,2510,37],[2521,36,2510,38,"schemaVersion"],[2521,49,2510,51],[2522,4,2511,4],[2523,4,2512,4,"validatePassword"],[2523,20,2512,20,"validatePassword"],[2523,21,2512,21,"password"],[2523,29,2512,29],[2523,31,2512,31],[2524,6,2513,8],[2524,12,2513,14,"status"],[2524,18,2513,20],[2524,21,2513,23],[2525,8,2514,12,"isValid"],[2525,15,2514,19],[2525,17,2514,21],[2525,21,2514,25],[2526,8,2515,12,"passwordPolicy"],[2526,22,2515,26],[2526,24,2515,28],[2527,6,2516,8],[2527,7,2516,9],[2528,6,2517,8],[2529,6,2518,8],[2529,10,2518,12],[2529,11,2518,13,"validatePasswordLengthOptions"],[2529,40,2518,42],[2529,41,2518,43,"password"],[2529,49,2518,51],[2529,51,2518,53,"status"],[2529,57,2518,59],[2529,58,2518,60],[2530,6,2519,8],[2530,10,2519,12],[2530,11,2519,13,"validatePasswordCharacterOptions"],[2530,43,2519,45],[2530,44,2519,46,"password"],[2530,52,2519,54],[2530,54,2519,56,"status"],[2530,60,2519,62],[2530,61,2519,63],[2531,6,2520,8],[2532,6,2521,8,"status"],[2532,12,2521,14],[2532,13,2521,15,"isValid"],[2532,20,2521,22],[2532,25,2521,27,"status"],[2532,31,2521,33],[2532,32,2521,34,"isValid"],[2532,39,2521,41],[2532,42,2521,44,"status"],[2532,48,2521,50],[2532,49,2521,51,"meetsMinPasswordLength"],[2532,71,2521,73],[2532,75,2521,77],[2532,79,2521,81],[2532,80,2521,82],[2533,6,2522,8,"status"],[2533,12,2522,14],[2533,13,2522,15,"isValid"],[2533,20,2522,22],[2533,25,2522,27,"status"],[2533,31,2522,33],[2533,32,2522,34,"isValid"],[2533,39,2522,41],[2533,42,2522,44,"status"],[2533,48,2522,50],[2533,49,2522,51,"meetsMaxPasswordLength"],[2533,71,2522,73],[2533,75,2522,77],[2533,79,2522,81],[2533,80,2522,82],[2534,6,2523,8,"status"],[2534,12,2523,14],[2534,13,2523,15,"isValid"],[2534,20,2523,22],[2534,25,2523,27,"status"],[2534,31,2523,33],[2534,32,2523,34,"isValid"],[2534,39,2523,41],[2534,42,2523,44,"status"],[2534,48,2523,50],[2534,49,2523,51,"containsLowercaseLetter"],[2534,72,2523,74],[2534,76,2523,78],[2534,80,2523,82],[2534,81,2523,83],[2535,6,2524,8,"status"],[2535,12,2524,14],[2535,13,2524,15,"isValid"],[2535,20,2524,22],[2535,25,2524,27,"status"],[2535,31,2524,33],[2535,32,2524,34,"isValid"],[2535,39,2524,41],[2535,42,2524,44,"status"],[2535,48,2524,50],[2535,49,2524,51,"containsUppercaseLetter"],[2535,72,2524,74],[2535,76,2524,78],[2535,80,2524,82],[2535,81,2524,83],[2536,6,2525,8,"status"],[2536,12,2525,14],[2536,13,2525,15,"isValid"],[2536,20,2525,22],[2536,25,2525,27,"status"],[2536,31,2525,33],[2536,32,2525,34,"isValid"],[2536,39,2525,41],[2536,42,2525,44,"status"],[2536,48,2525,50],[2536,49,2525,51,"containsNumericCharacter"],[2536,73,2525,75],[2536,77,2525,79],[2536,81,2525,83],[2536,82,2525,84],[2537,6,2526,8,"status"],[2537,12,2526,14],[2537,13,2526,15,"isValid"],[2537,20,2526,22],[2537,25,2526,27,"status"],[2537,31,2526,33],[2537,32,2526,34,"isValid"],[2537,39,2526,41],[2537,42,2526,44,"status"],[2537,48,2526,50],[2537,49,2526,51,"containsNonAlphanumericCharacter"],[2537,81,2526,83],[2537,85,2526,87],[2537,89,2526,91],[2537,90,2526,92],[2538,6,2527,8],[2538,13,2527,15,"status"],[2538,19,2527,21],[2539,4,2528,4],[2540,4,2529,4],[2541,0,2530,0],[2542,0,2531,0],[2543,0,2532,0],[2544,0,2533,0],[2545,0,2534,0],[2546,4,2535,4,"validatePasswordLengthOptions"],[2546,33,2535,33,"validatePasswordLengthOptions"],[2546,34,2535,34,"password"],[2546,42,2535,42],[2546,44,2535,44,"status"],[2546,50,2535,50],[2546,52,2535,52],[2547,6,2536,8],[2547,12,2536,14,"minPasswordLength"],[2547,29,2536,31],[2547,32,2536,34],[2547,36,2536,38],[2547,37,2536,39,"customStrengthOptions"],[2547,58,2536,60],[2547,59,2536,61,"minPasswordLength"],[2547,76,2536,78],[2548,6,2537,8],[2548,12,2537,14,"maxPasswordLength"],[2548,29,2537,31],[2548,32,2537,34],[2548,36,2537,38],[2548,37,2537,39,"customStrengthOptions"],[2548,58,2537,60],[2548,59,2537,61,"maxPasswordLength"],[2548,76,2537,78],[2549,6,2538,8],[2549,10,2538,12,"minPasswordLength"],[2549,27,2538,29],[2549,29,2538,31],[2550,8,2539,12,"status"],[2550,14,2539,18],[2550,15,2539,19,"meetsMinPasswordLength"],[2550,37,2539,41],[2550,40,2539,44,"password"],[2550,48,2539,52],[2550,49,2539,53,"length"],[2550,55,2539,59],[2550,59,2539,63,"minPasswordLength"],[2550,76,2539,80],[2551,6,2540,8],[2552,6,2541,8],[2552,10,2541,12,"maxPasswordLength"],[2552,27,2541,29],[2552,29,2541,31],[2553,8,2542,12,"status"],[2553,14,2542,18],[2553,15,2542,19,"meetsMaxPasswordLength"],[2553,37,2542,41],[2553,40,2542,44,"password"],[2553,48,2542,52],[2553,49,2542,53,"length"],[2553,55,2542,59],[2553,59,2542,63,"maxPasswordLength"],[2553,76,2542,80],[2554,6,2543,8],[2555,4,2544,4],[2556,4,2545,4],[2557,0,2546,0],[2558,0,2547,0],[2559,0,2548,0],[2560,0,2549,0],[2561,0,2550,0],[2562,4,2551,4,"validatePasswordCharacterOptions"],[2562,36,2551,36,"validatePasswordCharacterOptions"],[2562,37,2551,37,"password"],[2562,45,2551,45],[2562,47,2551,47,"status"],[2562,53,2551,53],[2562,55,2551,55],[2563,6,2552,8],[2564,6,2553,8],[2564,10,2553,12],[2564,11,2553,13,"updatePasswordCharacterOptionsStatuses"],[2564,49,2553,51],[2564,50,2553,52,"status"],[2564,56,2553,58],[2564,58,2554,8],[2564,91,2554,42],[2564,96,2554,47],[2564,98,2555,8],[2564,131,2555,42],[2564,136,2555,47],[2564,138,2556,8],[2564,169,2556,40],[2564,174,2556,45],[2564,176,2557,8],[2564,215,2557,48],[2564,220,2557,53],[2564,221,2557,54],[2565,6,2558,8],[2565,10,2558,12,"passwordChar"],[2565,22,2558,24],[2566,6,2559,8],[2566,11,2559,13],[2566,15,2559,17,"i"],[2566,16,2559,18],[2566,19,2559,21],[2566,20,2559,22],[2566,22,2559,24,"i"],[2566,23,2559,25],[2566,26,2559,28,"password"],[2566,34,2559,36],[2566,35,2559,37,"length"],[2566,41,2559,43],[2566,43,2559,45,"i"],[2566,44,2559,46],[2566,46,2559,48],[2566,48,2559,50],[2567,8,2560,12,"passwordChar"],[2567,20,2560,24],[2567,23,2560,27,"password"],[2567,31,2560,35],[2567,32,2560,36,"charAt"],[2567,38,2560,42],[2567,39,2560,43,"i"],[2567,40,2560,44],[2567,41,2560,45],[2568,8,2561,12],[2568,12,2561,16],[2568,13,2561,17,"updatePasswordCharacterOptionsStatuses"],[2568,51,2561,55],[2568,52,2561,56,"status"],[2568,58,2561,62],[2568,60,2562,12],[2568,93,2562,46,"passwordChar"],[2568,105,2562,58],[2568,109,2562,62],[2568,112,2562,65],[2568,116,2563,16,"passwordChar"],[2568,128,2563,28],[2568,132,2563,32],[2568,135,2563,35],[2568,137,2564,12],[2568,170,2564,46,"passwordChar"],[2568,182,2564,58],[2568,186,2564,62],[2568,189,2564,65],[2568,193,2565,16,"passwordChar"],[2568,205,2565,28],[2568,209,2565,32],[2568,212,2565,35],[2568,214,2566,12],[2568,245,2566,44,"passwordChar"],[2568,257,2566,56],[2568,261,2566,60],[2568,264,2566,63],[2568,268,2567,16,"passwordChar"],[2568,280,2567,28],[2568,284,2567,32],[2568,287,2567,35],[2568,289,2568,12],[2568,328,2568,52],[2568,332,2568,56],[2568,333,2568,57,"allowedNonAlphanumericCharacters"],[2568,365,2568,89],[2568,366,2568,90,"includes"],[2568,374,2568,98],[2568,375,2568,99,"passwordChar"],[2568,387,2568,111],[2568,388,2568,112],[2568,389,2568,113],[2569,6,2569,8],[2570,4,2570,4],[2571,4,2571,4],[2572,0,2572,0],[2573,0,2573,0],[2574,0,2574,0],[2575,0,2575,0],[2576,0,2576,0],[2577,0,2577,0],[2578,0,2578,0],[2579,0,2579,0],[2580,0,2580,0],[2581,0,2581,0],[2582,4,2582,4,"updatePasswordCharacterOptionsStatuses"],[2582,42,2582,42,"updatePasswordCharacterOptionsStatuses"],[2582,43,2582,43,"status"],[2582,49,2582,49],[2582,51,2582,51,"containsLowercaseCharacter"],[2582,77,2582,77],[2582,79,2582,79,"containsUppercaseCharacter"],[2582,105,2582,105],[2582,107,2582,107,"containsNumericCharacter"],[2582,131,2582,131],[2582,133,2582,133,"containsNonAlphanumericCharacter"],[2582,165,2582,165],[2582,167,2582,167],[2583,6,2583,8],[2583,10,2583,12],[2583,14,2583,16],[2583,15,2583,17,"customStrengthOptions"],[2583,36,2583,38],[2583,37,2583,39,"containsLowercaseLetter"],[2583,60,2583,62],[2583,62,2583,64],[2584,8,2584,12,"status"],[2584,14,2584,18],[2584,15,2584,19,"containsLowercaseLetter"],[2584,38,2584,42],[2584,43,2584,47,"status"],[2584,49,2584,53],[2584,50,2584,54,"containsLowercaseLetter"],[2584,73,2584,77],[2584,76,2584,80,"containsLowercaseCharacter"],[2584,102,2584,106],[2584,103,2584,107],[2585,6,2585,8],[2586,6,2586,8],[2586,10,2586,12],[2586,14,2586,16],[2586,15,2586,17,"customStrengthOptions"],[2586,36,2586,38],[2586,37,2586,39,"containsUppercaseLetter"],[2586,60,2586,62],[2586,62,2586,64],[2587,8,2587,12,"status"],[2587,14,2587,18],[2587,15,2587,19,"containsUppercaseLetter"],[2587,38,2587,42],[2587,43,2587,47,"status"],[2587,49,2587,53],[2587,50,2587,54,"containsUppercaseLetter"],[2587,73,2587,77],[2587,76,2587,80,"containsUppercaseCharacter"],[2587,102,2587,106],[2587,103,2587,107],[2588,6,2588,8],[2589,6,2589,8],[2589,10,2589,12],[2589,14,2589,16],[2589,15,2589,17,"customStrengthOptions"],[2589,36,2589,38],[2589,37,2589,39,"containsNumericCharacter"],[2589,61,2589,63],[2589,63,2589,65],[2590,8,2590,12,"status"],[2590,14,2590,18],[2590,15,2590,19,"containsNumericCharacter"],[2590,39,2590,43],[2590,44,2590,48,"status"],[2590,50,2590,54],[2590,51,2590,55,"containsNumericCharacter"],[2590,75,2590,79],[2590,78,2590,82,"containsNumericCharacter"],[2590,102,2590,106],[2590,103,2590,107],[2591,6,2591,8],[2592,6,2592,8],[2592,10,2592,12],[2592,14,2592,16],[2592,15,2592,17,"customStrengthOptions"],[2592,36,2592,38],[2592,37,2592,39,"containsNonAlphanumericCharacter"],[2592,69,2592,71],[2592,71,2592,73],[2593,8,2593,12,"status"],[2593,14,2593,18],[2593,15,2593,19,"containsNonAlphanumericCharacter"],[2593,47,2593,51],[2593,52,2593,56,"status"],[2593,58,2593,62],[2593,59,2593,63,"containsNonAlphanumericCharacter"],[2593,91,2593,95],[2593,94,2593,98,"containsNonAlphanumericCharacter"],[2593,126,2593,130],[2593,127,2593,131],[2594,6,2594,8],[2595,4,2595,4],[2596,2,2596,0],[2598,2,2598,0],[2599,0,2599,0],[2600,0,2600,0],[2601,0,2601,0],[2602,0,2602,0],[2603,0,2603,0],[2604,0,2604,0],[2605,0,2605,0],[2606,0,2606,0],[2607,0,2607,0],[2608,0,2608,0],[2609,0,2609,0],[2610,0,2610,0],[2611,0,2611,0],[2612,0,2612,0],[2613,0,2613,0],[2614,2,2614,0],[2614,8,2614,6,"AuthImpl"],[2614,16,2614,14],[2614,17,2614,15],[2615,4,2615,4,"constructor"],[2615,15,2615,15,"constructor"],[2615,16,2615,16,"app"],[2615,19,2615,19],[2615,21,2615,21,"heartbeatServiceProvider"],[2615,45,2615,45],[2615,47,2615,47,"appCheckServiceProvider"],[2615,70,2615,70],[2615,72,2615,72,"config"],[2615,78,2615,78],[2615,80,2615,80],[2616,6,2616,8],[2616,10,2616,12],[2616,11,2616,13,"app"],[2616,14,2616,16],[2616,17,2616,19,"app"],[2616,20,2616,22],[2617,6,2617,8],[2617,10,2617,12],[2617,11,2617,13,"heartbeatServiceProvider"],[2617,35,2617,37],[2617,38,2617,40,"heartbeatServiceProvider"],[2617,62,2617,64],[2618,6,2618,8],[2618,10,2618,12],[2618,11,2618,13,"appCheckServiceProvider"],[2618,34,2618,36],[2618,37,2618,39,"appCheckServiceProvider"],[2618,60,2618,62],[2619,6,2619,8],[2619,10,2619,12],[2619,11,2619,13,"config"],[2619,17,2619,19],[2619,20,2619,22,"config"],[2619,26,2619,28],[2620,6,2620,8],[2620,10,2620,12],[2620,11,2620,13,"currentUser"],[2620,22,2620,24],[2620,25,2620,27],[2620,29,2620,31],[2621,6,2621,8],[2621,10,2621,12],[2621,11,2621,13,"emulatorConfig"],[2621,25,2621,27],[2621,28,2621,30],[2621,32,2621,34],[2622,6,2622,8],[2622,10,2622,12],[2622,11,2622,13,"operations"],[2622,21,2622,23],[2622,24,2622,26,"Promise"],[2622,31,2622,33],[2622,32,2622,34,"resolve"],[2622,39,2622,41],[2622,40,2622,42],[2622,41,2622,43],[2623,6,2623,8],[2623,10,2623,12],[2623,11,2623,13,"authStateSubscription"],[2623,32,2623,34],[2623,35,2623,37],[2623,39,2623,41,"Subscription"],[2623,51,2623,53],[2623,52,2623,54],[2623,56,2623,58],[2623,57,2623,59],[2624,6,2624,8],[2624,10,2624,12],[2624,11,2624,13,"idTokenSubscription"],[2624,30,2624,32],[2624,33,2624,35],[2624,37,2624,39,"Subscription"],[2624,49,2624,51],[2624,50,2624,52],[2624,54,2624,56],[2624,55,2624,57],[2625,6,2625,8],[2625,10,2625,12],[2625,11,2625,13,"beforeStateQueue"],[2625,27,2625,29],[2625,30,2625,32],[2625,34,2625,36,"AuthMiddlewareQueue"],[2625,53,2625,55],[2625,54,2625,56],[2625,58,2625,60],[2625,59,2625,61],[2626,6,2626,8],[2626,10,2626,12],[2626,11,2626,13,"redirectUser"],[2626,23,2626,25],[2626,26,2626,28],[2626,30,2626,32],[2627,6,2627,8],[2627,10,2627,12],[2627,11,2627,13,"isProactiveRefreshEnabled"],[2627,36,2627,38],[2627,39,2627,41],[2627,44,2627,46],[2628,6,2628,8],[2628,10,2628,12],[2628,11,2628,13,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[2628,50,2628,52],[2628,53,2628,55],[2628,54,2628,56],[2629,6,2629,8],[2630,6,2630,8],[2631,6,2631,8],[2631,10,2631,12],[2631,11,2631,13,"_canInitEmulator"],[2631,27,2631,29],[2631,30,2631,32],[2631,34,2631,36],[2632,6,2632,8],[2632,10,2632,12],[2632,11,2632,13,"_isInitialized"],[2632,25,2632,27],[2632,28,2632,30],[2632,33,2632,35],[2633,6,2633,8],[2633,10,2633,12],[2633,11,2633,13,"_deleted"],[2633,19,2633,21],[2633,22,2633,24],[2633,27,2633,29],[2634,6,2634,8],[2634,10,2634,12],[2634,11,2634,13,"_initializationPromise"],[2634,33,2634,35],[2634,36,2634,38],[2634,40,2634,42],[2635,6,2635,8],[2635,10,2635,12],[2635,11,2635,13,"_popupRedirectResolver"],[2635,33,2635,35],[2635,36,2635,38],[2635,40,2635,42],[2636,6,2636,8],[2636,10,2636,12],[2636,11,2636,13,"_errorFactory"],[2636,24,2636,26],[2636,27,2636,29,"_DEFAULT_AUTH_ERROR_FACTORY"],[2636,54,2636,56],[2637,6,2637,8],[2637,10,2637,12],[2637,11,2637,13,"_agentRecaptchaConfig"],[2637,32,2637,34],[2637,35,2637,37],[2637,39,2637,41],[2638,6,2638,8],[2638,10,2638,12],[2638,11,2638,13,"_tenantRecaptchaConfigs"],[2638,34,2638,36],[2638,37,2638,39],[2638,38,2638,40],[2638,39,2638,41],[2639,6,2639,8],[2639,10,2639,12],[2639,11,2639,13,"_projectPasswordPolicy"],[2639,33,2639,35],[2639,36,2639,38],[2639,40,2639,42],[2640,6,2640,8],[2640,10,2640,12],[2640,11,2640,13,"_tenantPasswordPolicies"],[2640,34,2640,36],[2640,37,2640,39],[2640,38,2640,40],[2640,39,2640,41],[2641,6,2641,8],[2641,10,2641,12],[2641,11,2641,13,"_resolvePersistenceManagerAvailable"],[2641,46,2641,48],[2641,49,2641,51,"undefined"],[2641,58,2641,60],[2642,6,2642,8],[2643,6,2643,8],[2644,6,2644,8],[2645,6,2645,8],[2645,10,2645,12],[2645,11,2645,13,"lastNotifiedUid"],[2645,26,2645,28],[2645,29,2645,31,"undefined"],[2645,38,2645,40],[2646,6,2646,8],[2646,10,2646,12],[2646,11,2646,13,"languageCode"],[2646,23,2646,25],[2646,26,2646,28],[2646,30,2646,32],[2647,6,2647,8],[2647,10,2647,12],[2647,11,2647,13,"tenantId"],[2647,19,2647,21],[2647,22,2647,24],[2647,26,2647,28],[2648,6,2648,8],[2648,10,2648,12],[2648,11,2648,13,"settings"],[2648,19,2648,21],[2648,22,2648,24],[2649,8,2648,26,"appVerificationDisabledForTesting"],[2649,41,2648,59],[2649,43,2648,61],[2650,6,2648,67],[2650,7,2648,68],[2651,6,2649,8],[2651,10,2649,12],[2651,11,2649,13,"frameworks"],[2651,21,2649,23],[2651,24,2649,26],[2651,26,2649,28],[2652,6,2650,8],[2652,10,2650,12],[2652,11,2650,13,"name"],[2652,15,2650,17],[2652,18,2650,20,"app"],[2652,21,2650,23],[2652,22,2650,24,"name"],[2652,26,2650,28],[2653,6,2651,8],[2653,10,2651,12],[2653,11,2651,13,"clientVersion"],[2653,24,2651,26],[2653,27,2651,29,"config"],[2653,33,2651,35],[2653,34,2651,36,"sdkClientVersion"],[2653,50,2651,52],[2654,6,2652,8],[2655,6,2653,8],[2656,6,2654,8],[2656,10,2654,12],[2656,11,2654,13,"_persistenceManagerAvailable"],[2656,39,2654,41],[2656,42,2654,44],[2656,46,2654,48,"Promise"],[2656,53,2654,55],[2656,54,2654,56,"resolve"],[2656,61,2654,63],[2656,65,2654,68],[2656,69,2654,72],[2656,70,2654,73,"_resolvePersistenceManagerAvailable"],[2656,105,2654,108],[2656,108,2654,111,"resolve"],[2656,115,2654,119],[2656,116,2654,120],[2657,4,2655,4],[2658,4,2656,4,"_initializeWithPersistence"],[2658,30,2656,30,"_initializeWithPersistence"],[2658,31,2656,31,"persistenceHierarchy"],[2658,51,2656,51],[2658,53,2656,53,"popupRedirectResolver"],[2658,74,2656,74],[2658,76,2656,76],[2659,6,2657,8],[2659,10,2657,12,"popupRedirectResolver"],[2659,31,2657,33],[2659,33,2657,35],[2660,8,2658,12],[2660,12,2658,16],[2660,13,2658,17,"_popupRedirectResolver"],[2660,35,2658,39],[2660,38,2658,42,"_getInstance"],[2660,50,2658,54],[2660,51,2658,55,"popupRedirectResolver"],[2660,72,2658,76],[2660,73,2658,77],[2661,6,2659,8],[2662,6,2660,8],[2663,6,2661,8],[2664,6,2662,8],[2664,10,2662,12],[2664,11,2662,13,"_initializationPromise"],[2664,33,2662,35],[2664,36,2662,38],[2664,40,2662,42],[2664,41,2662,43,"queue"],[2664,46,2662,48],[2664,47,2662,49],[2664,59,2662,61],[2665,8,2663,12],[2665,12,2663,16],[2665,16,2663,20],[2665,17,2663,21,"_deleted"],[2665,25,2663,29],[2665,27,2663,31],[2666,10,2664,16],[2667,8,2665,12],[2668,8,2666,12],[2668,12,2666,16],[2668,13,2666,17,"persistenceManager"],[2668,31,2666,35],[2668,34,2666,38],[2668,40,2666,44,"PersistenceUserManager"],[2668,62,2666,66],[2668,63,2666,67,"create"],[2668,69,2666,73],[2668,70,2666,74],[2668,74,2666,78],[2668,76,2666,80,"persistenceHierarchy"],[2668,96,2666,100],[2668,97,2666,101],[2669,8,2667,12],[2669,12,2667,16],[2669,13,2667,17,"_resolvePersistenceManagerAvailable"],[2669,48,2667,52],[2669,51,2667,55],[2669,52,2667,56],[2670,8,2668,12],[2670,12,2668,16],[2670,16,2668,20],[2670,17,2668,21,"_deleted"],[2670,25,2668,29],[2670,27,2668,31],[2671,10,2669,16],[2672,8,2670,12],[2673,8,2671,12],[2674,8,2672,12],[2675,8,2673,12],[2675,12,2673,16],[2675,16,2673,20],[2675,17,2673,21,"_popupRedirectResolver"],[2675,39,2673,43],[2675,41,2673,45,"_shouldInitProactively"],[2675,63,2673,67],[2675,65,2673,69],[2676,10,2674,16],[2677,10,2675,16],[2677,14,2675,20],[2678,12,2676,20],[2678,18,2676,26],[2678,22,2676,30],[2678,23,2676,31,"_popupRedirectResolver"],[2678,45,2676,53],[2678,46,2676,54,"_initialize"],[2678,57,2676,65],[2678,58,2676,66],[2678,62,2676,70],[2678,63,2676,71],[2679,10,2677,16],[2679,11,2677,17],[2679,12,2678,16],[2679,19,2678,23,"e"],[2679,20,2678,24],[2679,22,2678,26],[2680,12,2679,20],[2681,10,2679,20],[2682,8,2681,12],[2683,8,2682,12],[2683,14,2682,18],[2683,18,2682,22],[2683,19,2682,23,"initializeCurrentUser"],[2683,40,2682,44],[2683,41,2682,45,"popupRedirectResolver"],[2683,62,2682,66],[2683,63,2682,67],[2684,8,2683,12],[2684,12,2683,16],[2684,13,2683,17,"lastNotifiedUid"],[2684,28,2683,32],[2684,31,2683,35],[2684,35,2683,39],[2684,36,2683,40,"currentUser"],[2684,47,2683,51],[2684,49,2683,53,"uid"],[2684,52,2683,56],[2684,56,2683,60],[2684,60,2683,64],[2685,8,2684,12],[2685,12,2684,16],[2685,16,2684,20],[2685,17,2684,21,"_deleted"],[2685,25,2684,29],[2685,27,2684,31],[2686,10,2685,16],[2687,8,2686,12],[2688,8,2687,12],[2688,12,2687,16],[2688,13,2687,17,"_isInitialized"],[2688,27,2687,31],[2688,30,2687,34],[2688,34,2687,38],[2689,6,2688,8],[2689,7,2688,9],[2689,8,2688,10],[2690,6,2689,8],[2690,13,2689,15],[2690,17,2689,19],[2690,18,2689,20,"_initializationPromise"],[2690,40,2689,42],[2691,4,2690,4],[2692,4,2691,4],[2693,0,2692,0],[2694,0,2693,0],[2695,4,2694,4],[2695,10,2694,10,"_onStorageEvent"],[2695,25,2694,25,"_onStorageEvent"],[2695,26,2694,25],[2695,28,2694,28],[2696,6,2695,8],[2696,10,2695,12],[2696,14,2695,16],[2696,15,2695,17,"_deleted"],[2696,23,2695,25],[2696,25,2695,27],[2697,8,2696,12],[2698,6,2697,8],[2699,6,2698,8],[2699,12,2698,14,"user"],[2699,16,2698,18],[2699,19,2698,21],[2699,25,2698,27],[2699,29,2698,31],[2699,30,2698,32,"assertedPersistence"],[2699,49,2698,51],[2699,50,2698,52,"getCurrentUser"],[2699,64,2698,66],[2699,65,2698,67],[2699,66,2698,68],[2700,6,2699,8],[2700,10,2699,12],[2700,11,2699,13],[2700,15,2699,17],[2700,16,2699,18,"currentUser"],[2700,27,2699,29],[2700,31,2699,33],[2700,32,2699,34,"user"],[2700,36,2699,38],[2700,38,2699,40],[2701,8,2700,12],[2702,8,2701,12],[2703,6,2702,8],[2704,6,2703,8],[2705,6,2704,8],[2705,10,2704,12],[2705,14,2704,16],[2705,15,2704,17,"currentUser"],[2705,26,2704,28],[2705,30,2704,32,"user"],[2705,34,2704,36],[2705,38,2704,40],[2705,42,2704,44],[2705,43,2704,45,"currentUser"],[2705,54,2704,56],[2705,55,2704,57,"uid"],[2705,58,2704,60],[2705,63,2704,65,"user"],[2705,67,2704,69],[2705,68,2704,70,"uid"],[2705,71,2704,73],[2705,73,2704,75],[2706,8,2705,12],[2707,8,2706,12],[2707,12,2706,16],[2707,13,2706,17,"_currentUser"],[2707,25,2706,29],[2707,26,2706,30,"_assign"],[2707,33,2706,37],[2707,34,2706,38,"user"],[2707,38,2706,42],[2707,39,2706,43],[2708,8,2707,12],[2709,8,2708,12],[2710,8,2709,12],[2710,14,2709,18],[2710,18,2709,22],[2710,19,2709,23,"currentUser"],[2710,30,2709,34],[2710,31,2709,35,"getIdToken"],[2710,41,2709,45],[2710,42,2709,46],[2710,43,2709,47],[2711,8,2710,12],[2712,6,2711,8],[2713,6,2712,8],[2714,6,2713,8],[2715,6,2714,8],[2715,12,2714,14],[2715,16,2714,18],[2715,17,2714,19,"_updateCurrentUser"],[2715,35,2714,37],[2715,36,2714,38,"user"],[2715,40,2714,42],[2715,42,2714,44],[2715,72,2714,75],[2715,76,2714,79],[2715,77,2714,80],[2716,4,2715,4],[2717,4,2716,4],[2717,10,2716,10,"initializeCurrentUserFromIdToken"],[2717,42,2716,42,"initializeCurrentUserFromIdToken"],[2717,43,2716,43,"idToken"],[2717,50,2716,50],[2717,52,2716,52],[2718,6,2717,8],[2718,10,2717,12],[2719,8,2718,12],[2719,14,2718,18,"response"],[2719,22,2718,26],[2719,25,2718,29],[2719,31,2718,35,"getAccountInfo"],[2719,45,2718,49],[2719,46,2718,50],[2719,50,2718,54],[2719,52,2718,56],[2720,10,2718,58,"idToken"],[2721,8,2718,66],[2721,9,2718,67],[2721,10,2718,68],[2722,8,2719,12],[2722,14,2719,18,"user"],[2722,18,2719,22],[2722,21,2719,25],[2722,27,2719,31,"UserImpl"],[2722,35,2719,39],[2722,36,2719,40,"_fromGetAccountInfoResponse"],[2722,63,2719,67],[2722,64,2719,68],[2722,68,2719,72],[2722,70,2719,74,"response"],[2722,78,2719,82],[2722,80,2719,84,"idToken"],[2722,87,2719,91],[2722,88,2719,92],[2723,8,2720,12],[2723,14,2720,18],[2723,18,2720,22],[2723,19,2720,23,"directlySetCurrentUser"],[2723,41,2720,45],[2723,42,2720,46,"user"],[2723,46,2720,50],[2723,47,2720,51],[2724,6,2721,8],[2724,7,2721,9],[2724,8,2722,8],[2724,15,2722,15,"err"],[2724,18,2722,18],[2724,20,2722,20],[2725,8,2723,12,"console"],[2725,15,2723,19],[2725,16,2723,20,"warn"],[2725,20,2723,24],[2725,21,2723,25],[2725,89,2723,93],[2725,91,2723,95,"err"],[2725,94,2723,98],[2725,95,2723,99],[2726,8,2724,12],[2726,14,2724,18],[2726,18,2724,22],[2726,19,2724,23,"directlySetCurrentUser"],[2726,41,2724,45],[2726,42,2724,46],[2726,46,2724,50],[2726,47,2724,51],[2727,6,2725,8],[2728,4,2726,4],[2729,4,2727,4],[2729,10,2727,10,"initializeCurrentUser"],[2729,31,2727,31,"initializeCurrentUser"],[2729,32,2727,32,"popupRedirectResolver"],[2729,53,2727,53],[2729,55,2727,55],[2730,6,2728,8],[2730,10,2728,12],[2730,14,2728,12,"_isFirebaseServerApp"],[2730,39,2728,32],[2730,41,2728,33],[2730,45,2728,37],[2730,46,2728,38,"app"],[2730,49,2728,41],[2730,50,2728,42],[2730,52,2728,44],[2731,8,2729,12],[2731,14,2729,18,"idToken"],[2731,21,2729,25],[2731,24,2729,28],[2731,28,2729,32],[2731,29,2729,33,"app"],[2731,32,2729,36],[2731,33,2729,37,"settings"],[2731,41,2729,45],[2731,42,2729,46,"authIdToken"],[2731,53,2729,57],[2732,8,2730,12],[2732,12,2730,16,"idToken"],[2732,19,2730,23],[2732,21,2730,25],[2733,10,2731,16],[2734,10,2732,16],[2735,10,2733,16],[2735,17,2733,23],[2735,21,2733,27,"Promise"],[2735,28,2733,34],[2735,29,2733,35,"resolve"],[2735,36,2733,42],[2735,40,2733,46],[2736,12,2734,20,"setTimeout"],[2736,22,2734,30],[2736,23,2734,31],[2736,29,2734,37],[2736,33,2734,41],[2736,34,2734,42,"initializeCurrentUserFromIdToken"],[2736,66,2734,74],[2736,67,2734,75,"idToken"],[2736,74,2734,82],[2736,75,2734,83],[2736,76,2734,84,"then"],[2736,80,2734,88],[2736,81,2734,89,"resolve"],[2736,88,2734,96],[2736,90,2734,98,"resolve"],[2736,97,2734,105],[2736,98,2734,106],[2736,99,2734,107],[2737,10,2735,16],[2737,11,2735,17],[2737,12,2735,18],[2738,8,2736,12],[2738,9,2736,13],[2738,15,2737,17],[2739,10,2738,16],[2739,17,2738,23],[2739,21,2738,27],[2739,22,2738,28,"directlySetCurrentUser"],[2739,44,2738,50],[2739,45,2738,51],[2739,49,2738,55],[2739,50,2738,56],[2740,8,2739,12],[2741,6,2740,8],[2742,6,2741,8],[2743,6,2742,8],[2743,12,2742,14,"previouslyStoredUser"],[2743,32,2742,34],[2743,35,2742,38],[2743,41,2742,44],[2743,45,2742,48],[2743,46,2742,49,"assertedPersistence"],[2743,65,2742,68],[2743,66,2742,69,"getCurrentUser"],[2743,80,2742,83],[2743,81,2742,84],[2743,82,2742,86],[2744,6,2743,8],[2744,10,2743,12,"futureCurrentUser"],[2744,27,2743,29],[2744,30,2743,32,"previouslyStoredUser"],[2744,50,2743,52],[2745,6,2744,8],[2745,10,2744,12,"needsTocheckMiddleware"],[2745,32,2744,34],[2745,35,2744,37],[2745,40,2744,42],[2746,6,2745,8],[2746,10,2745,12,"popupRedirectResolver"],[2746,31,2745,33],[2746,35,2745,37],[2746,39,2745,41],[2746,40,2745,42,"config"],[2746,46,2745,48],[2746,47,2745,49,"authDomain"],[2746,57,2745,59],[2746,59,2745,61],[2747,8,2746,12],[2747,14,2746,18],[2747,18,2746,22],[2747,19,2746,23,"getOrInitRedirectPersistenceManager"],[2747,54,2746,58],[2747,55,2746,59],[2747,56,2746,60],[2748,8,2747,12],[2748,14,2747,18,"redirectUserEventId"],[2748,33,2747,37],[2748,36,2747,40],[2748,40,2747,44],[2748,41,2747,45,"redirectUser"],[2748,53,2747,57],[2748,55,2747,59,"_redirectEventId"],[2748,71,2747,75],[2749,8,2748,12],[2749,14,2748,18,"storedUserEventId"],[2749,31,2748,35],[2749,34,2748,38,"futureCurrentUser"],[2749,51,2748,55],[2749,53,2748,57,"_redirectEventId"],[2749,69,2748,73],[2750,8,2749,12],[2750,14,2749,18,"result"],[2750,20,2749,24],[2750,23,2749,27],[2750,29,2749,33],[2750,33,2749,37],[2750,34,2749,38,"tryRedirectSignIn"],[2750,51,2749,55],[2750,52,2749,56,"popupRedirectResolver"],[2750,73,2749,77],[2750,74,2749,78],[2751,8,2750,12],[2752,8,2751,12],[2753,8,2752,12],[2754,8,2753,12],[2755,8,2754,12],[2755,12,2754,16],[2755,13,2754,17],[2755,14,2754,18,"redirectUserEventId"],[2755,33,2754,37],[2755,37,2754,41,"redirectUserEventId"],[2755,56,2754,60],[2755,61,2754,65,"storedUserEventId"],[2755,78,2754,82],[2755,83,2755,16,"result"],[2755,89,2755,22],[2755,91,2755,24,"user"],[2755,95,2755,28],[2755,97,2755,30],[2756,10,2756,16,"futureCurrentUser"],[2756,27,2756,33],[2756,30,2756,36,"result"],[2756,36,2756,42],[2756,37,2756,43,"user"],[2756,41,2756,47],[2757,10,2757,16,"needsTocheckMiddleware"],[2757,32,2757,38],[2757,35,2757,41],[2757,39,2757,45],[2758,8,2758,12],[2759,6,2759,8],[2760,6,2760,8],[2761,6,2761,8],[2761,10,2761,12],[2761,11,2761,13,"futureCurrentUser"],[2761,28,2761,30],[2761,30,2761,32],[2762,8,2762,12],[2762,15,2762,19],[2762,19,2762,23],[2762,20,2762,24,"directlySetCurrentUser"],[2762,42,2762,46],[2762,43,2762,47],[2762,47,2762,51],[2762,48,2762,52],[2763,6,2763,8],[2764,6,2764,8],[2764,10,2764,12],[2764,11,2764,13,"futureCurrentUser"],[2764,28,2764,30],[2764,29,2764,31,"_redirectEventId"],[2764,45,2764,47],[2764,47,2764,49],[2765,8,2765,12],[2766,8,2766,12],[2767,8,2767,12],[2767,12,2767,16,"needsTocheckMiddleware"],[2767,34,2767,38],[2767,36,2767,40],[2768,10,2768,16],[2768,14,2768,20],[2769,12,2769,20],[2769,18,2769,26],[2769,22,2769,30],[2769,23,2769,31,"beforeStateQueue"],[2769,39,2769,47],[2769,40,2769,48,"runMiddleware"],[2769,53,2769,61],[2769,54,2769,62,"futureCurrentUser"],[2769,71,2769,79],[2769,72,2769,80],[2770,10,2770,16],[2770,11,2770,17],[2770,12,2771,16],[2770,19,2771,23,"e"],[2770,20,2771,24],[2770,22,2771,26],[2771,12,2772,20,"futureCurrentUser"],[2771,29,2772,37],[2771,32,2772,40,"previouslyStoredUser"],[2771,52,2772,60],[2772,12,2773,20],[2773,12,2774,20],[2774,12,2775,20],[2774,16,2775,24],[2774,17,2775,25,"_popupRedirectResolver"],[2774,39,2775,47],[2774,40,2775,48,"_overrideRedirectResult"],[2774,63,2775,71],[2774,64,2775,72],[2774,68,2775,76],[2774,70,2775,78],[2774,76,2775,84,"Promise"],[2774,83,2775,91],[2774,84,2775,92,"reject"],[2774,90,2775,98],[2774,91,2775,99,"e"],[2774,92,2775,100],[2774,93,2775,101],[2774,94,2775,102],[2775,10,2776,16],[2776,8,2777,12],[2777,8,2778,12],[2777,12,2778,16,"futureCurrentUser"],[2777,29,2778,33],[2777,31,2778,35],[2778,10,2779,16],[2778,17,2779,23],[2778,21,2779,27],[2778,22,2779,28,"reloadAndSetCurrentUserOrClear"],[2778,52,2779,58],[2778,53,2779,59,"futureCurrentUser"],[2778,70,2779,76],[2778,71,2779,77],[2779,8,2780,12],[2779,9,2780,13],[2779,15,2781,17],[2780,10,2782,16],[2780,17,2782,23],[2780,21,2782,27],[2780,22,2782,28,"directlySetCurrentUser"],[2780,44,2782,50],[2780,45,2782,51],[2780,49,2782,55],[2780,50,2782,56],[2781,8,2783,12],[2782,6,2784,8],[2783,6,2785,8,"_assert"],[2783,13,2785,15],[2783,14,2785,16],[2783,18,2785,20],[2783,19,2785,21,"_popupRedirectResolver"],[2783,41,2785,43],[2783,43,2785,45],[2783,47,2785,49],[2783,49,2785,51],[2783,65,2785,67],[2783,66,2785,68],[2783,100,2785,102],[2783,101,2785,103],[2784,6,2786,8],[2784,12,2786,14],[2784,16,2786,18],[2784,17,2786,19,"getOrInitRedirectPersistenceManager"],[2784,52,2786,54],[2784,53,2786,55],[2784,54,2786,56],[2785,6,2787,8],[2786,6,2788,8],[2787,6,2789,8],[2788,6,2790,8],[2788,10,2790,12],[2788,14,2790,16],[2788,15,2790,17,"redirectUser"],[2788,27,2790,29],[2788,31,2791,12],[2788,35,2791,16],[2788,36,2791,17,"redirectUser"],[2788,48,2791,29],[2788,49,2791,30,"_redirectEventId"],[2788,65,2791,46],[2788,70,2791,51,"futureCurrentUser"],[2788,87,2791,68],[2788,88,2791,69,"_redirectEventId"],[2788,104,2791,85],[2788,106,2791,87],[2789,8,2792,12],[2789,15,2792,19],[2789,19,2792,23],[2789,20,2792,24,"directlySetCurrentUser"],[2789,42,2792,46],[2789,43,2792,47,"futureCurrentUser"],[2789,60,2792,64],[2789,61,2792,65],[2790,6,2793,8],[2791,6,2794,8],[2791,13,2794,15],[2791,17,2794,19],[2791,18,2794,20,"reloadAndSetCurrentUserOrClear"],[2791,48,2794,50],[2791,49,2794,51,"futureCurrentUser"],[2791,66,2794,68],[2791,67,2794,69],[2792,4,2795,4],[2793,4,2796,4],[2793,10,2796,10,"tryRedirectSignIn"],[2793,27,2796,27,"tryRedirectSignIn"],[2793,28,2796,28,"redirectResolver"],[2793,44,2796,44],[2793,46,2796,46],[2794,6,2797,8],[2795,6,2798,8],[2796,6,2799,8],[2797,6,2800,8],[2798,6,2801,8],[2799,6,2802,8],[2800,6,2803,8],[2801,6,2804,8],[2802,6,2805,8],[2803,6,2806,8],[2804,6,2807,8],[2805,6,2808,8],[2806,6,2809,8],[2807,6,2810,8],[2808,6,2811,8],[2809,6,2812,8],[2809,10,2812,12,"result"],[2809,16,2812,18],[2809,19,2812,21],[2809,23,2812,25],[2810,6,2813,8],[2810,10,2813,12],[2811,8,2814,12],[2812,8,2815,12],[2813,8,2816,12,"result"],[2813,14,2816,18],[2813,17,2816,21],[2813,23,2816,27],[2813,27,2816,31],[2813,28,2816,32,"_popupRedirectResolver"],[2813,50,2816,54],[2813,51,2816,55,"_completeRedirectFn"],[2813,70,2816,74],[2813,71,2816,75],[2813,75,2816,79],[2813,77,2816,81,"redirectResolver"],[2813,93,2816,97],[2813,95,2816,99],[2813,99,2816,103],[2813,100,2816,104],[2814,6,2817,8],[2814,7,2817,9],[2814,8,2818,8],[2814,15,2818,15,"e"],[2814,16,2818,16],[2814,18,2818,18],[2815,8,2819,12],[2816,8,2820,12],[2817,8,2821,12],[2817,14,2821,18],[2817,18,2821,22],[2817,19,2821,23,"_setRedirectUser"],[2817,35,2821,39],[2817,36,2821,40],[2817,40,2821,44],[2817,41,2821,45],[2818,6,2822,8],[2819,6,2823,8],[2819,13,2823,15,"result"],[2819,19,2823,21],[2820,4,2824,4],[2821,4,2825,4],[2821,10,2825,10,"reloadAndSetCurrentUserOrClear"],[2821,40,2825,40,"reloadAndSetCurrentUserOrClear"],[2821,41,2825,41,"user"],[2821,45,2825,45],[2821,47,2825,47],[2822,6,2826,8],[2822,10,2826,12],[2823,8,2827,12],[2823,14,2827,18,"_reloadWithoutSaving"],[2823,34,2827,38],[2823,35,2827,39,"user"],[2823,39,2827,43],[2823,40,2827,44],[2824,6,2828,8],[2824,7,2828,9],[2824,8,2829,8],[2824,15,2829,15,"e"],[2824,16,2829,16],[2824,18,2829,18],[2825,8,2830,12],[2825,12,2830,16,"e"],[2825,13,2830,17],[2825,15,2830,19,"code"],[2825,19,2830,23],[2825,24,2831,16],[2825,32,2831,24],[2825,56,2831,48],[2825,57,2831,49],[2825,101,2831,93],[2825,103,2831,95],[2826,10,2832,16],[2827,10,2833,16],[2828,10,2834,16],[2828,17,2834,23],[2828,21,2834,27],[2828,22,2834,28,"directlySetCurrentUser"],[2828,44,2834,50],[2828,45,2834,51],[2828,49,2834,55],[2828,50,2834,56],[2829,8,2835,12],[2830,6,2836,8],[2831,6,2837,8],[2831,13,2837,15],[2831,17,2837,19],[2831,18,2837,20,"directlySetCurrentUser"],[2831,40,2837,42],[2831,41,2837,43,"user"],[2831,45,2837,47],[2831,46,2837,48],[2832,4,2838,4],[2833,4,2839,4,"useDeviceLanguage"],[2833,21,2839,21,"useDeviceLanguage"],[2833,22,2839,21],[2833,24,2839,24],[2834,6,2840,8],[2834,10,2840,12],[2834,11,2840,13,"languageCode"],[2834,23,2840,25],[2834,26,2840,28,"_getUserLanguage"],[2834,42,2840,44],[2834,43,2840,45],[2834,44,2840,46],[2835,4,2841,4],[2836,4,2842,4],[2836,10,2842,10,"_delete"],[2836,17,2842,17,"_delete"],[2836,18,2842,17],[2836,20,2842,20],[2837,6,2843,8],[2837,10,2843,12],[2837,11,2843,13,"_deleted"],[2837,19,2843,21],[2837,22,2843,24],[2837,26,2843,28],[2838,4,2844,4],[2839,4,2845,4],[2839,10,2845,10,"updateCurrentUser"],[2839,27,2845,27,"updateCurrentUser"],[2839,28,2845,28,"userExtern"],[2839,38,2845,38],[2839,40,2845,40],[2840,6,2846,8],[2840,10,2846,12],[2840,14,2846,12,"_isFirebaseServerApp"],[2840,39,2846,32],[2840,41,2846,33],[2840,45,2846,37],[2840,46,2846,38,"app"],[2840,49,2846,41],[2840,50,2846,42],[2840,52,2846,44],[2841,8,2847,12],[2841,15,2847,19,"Promise"],[2841,22,2847,26],[2841,23,2847,27,"reject"],[2841,29,2847,33],[2841,30,2847,34,"_serverAppCurrentUserOperationNotSupportedError"],[2841,77,2847,81],[2841,78,2847,82],[2841,82,2847,86],[2841,83,2847,87],[2841,84,2847,88],[2842,6,2848,8],[2843,6,2849,8],[2844,6,2850,8],[2845,6,2851,8],[2845,12,2851,14,"user"],[2845,16,2851,18],[2845,19,2851,21,"userExtern"],[2845,29,2851,31],[2845,32,2852,14],[2845,36,2852,14,"getModularInstance"],[2845,60,2852,32],[2845,62,2852,33,"userExtern"],[2845,72,2852,43],[2845,73,2852,44],[2845,76,2853,14],[2845,80,2853,18],[2846,6,2854,8],[2846,10,2854,12,"user"],[2846,14,2854,16],[2846,16,2854,18],[2847,8,2855,12,"_assert"],[2847,15,2855,19],[2847,16,2855,20,"user"],[2847,20,2855,24],[2847,21,2855,25,"auth"],[2847,25,2855,29],[2847,26,2855,30,"config"],[2847,32,2855,36],[2847,33,2855,37,"apiKey"],[2847,39,2855,43],[2847,44,2855,48],[2847,48,2855,52],[2847,49,2855,53,"config"],[2847,55,2855,59],[2847,56,2855,60,"apiKey"],[2847,62,2855,66],[2847,64,2855,68],[2847,68,2855,72],[2847,70,2855,74],[2847,90,2855,94],[2847,91,2855,95],[2847,123,2855,127],[2847,124,2855,128],[2848,6,2856,8],[2849,6,2857,8],[2849,13,2857,15],[2849,17,2857,19],[2849,18,2857,20,"_updateCurrentUser"],[2849,36,2857,38],[2849,37,2857,39,"user"],[2849,41,2857,43],[2849,45,2857,47,"user"],[2849,49,2857,51],[2849,50,2857,52,"_clone"],[2849,56,2857,58],[2849,57,2857,59],[2849,61,2857,63],[2849,62,2857,64],[2849,63,2857,65],[2850,4,2858,4],[2851,4,2859,4],[2851,10,2859,10,"_updateCurrentUser"],[2851,28,2859,28,"_updateCurrentUser"],[2851,29,2859,29,"user"],[2851,33,2859,33],[2851,35,2859,35,"skipBeforeStateCallbacks"],[2851,59,2859,59],[2851,62,2859,62],[2851,67,2859,67],[2851,69,2859,69],[2852,6,2860,8],[2852,10,2860,12],[2852,14,2860,16],[2852,15,2860,17,"_deleted"],[2852,23,2860,25],[2852,25,2860,27],[2853,8,2861,12],[2854,6,2862,8],[2855,6,2863,8],[2855,10,2863,12,"user"],[2855,14,2863,16],[2855,16,2863,18],[2856,8,2864,12,"_assert"],[2856,15,2864,19],[2856,16,2864,20],[2856,20,2864,24],[2856,21,2864,25,"tenantId"],[2856,29,2864,33],[2856,34,2864,38,"user"],[2856,38,2864,42],[2856,39,2864,43,"tenantId"],[2856,47,2864,51],[2856,49,2864,53],[2856,53,2864,57],[2856,55,2864,59],[2856,75,2864,79],[2856,76,2864,80],[2856,114,2864,118],[2856,115,2864,119],[2857,6,2865,8],[2858,6,2866,8],[2858,10,2866,12],[2858,11,2866,13,"skipBeforeStateCallbacks"],[2858,35,2866,37],[2858,37,2866,39],[2859,8,2867,12],[2859,14,2867,18],[2859,18,2867,22],[2859,19,2867,23,"beforeStateQueue"],[2859,35,2867,39],[2859,36,2867,40,"runMiddleware"],[2859,49,2867,53],[2859,50,2867,54,"user"],[2859,54,2867,58],[2859,55,2867,59],[2860,6,2868,8],[2861,6,2869,8],[2861,13,2869,15],[2861,17,2869,19],[2861,18,2869,20,"queue"],[2861,23,2869,25],[2861,24,2869,26],[2861,36,2869,38],[2862,8,2870,12],[2862,14,2870,18],[2862,18,2870,22],[2862,19,2870,23,"directlySetCurrentUser"],[2862,41,2870,45],[2862,42,2870,46,"user"],[2862,46,2870,50],[2862,47,2870,51],[2863,8,2871,12],[2863,12,2871,16],[2863,13,2871,17,"notifyAuthListeners"],[2863,32,2871,36],[2863,33,2871,37],[2863,34,2871,38],[2864,6,2872,8],[2864,7,2872,9],[2864,8,2872,10],[2865,4,2873,4],[2866,4,2874,4],[2866,10,2874,10,"signOut"],[2866,17,2874,17,"signOut"],[2866,18,2874,17],[2866,20,2874,20],[2867,6,2875,8],[2867,10,2875,12],[2867,14,2875,12,"_isFirebaseServerApp"],[2867,39,2875,32],[2867,41,2875,33],[2867,45,2875,37],[2867,46,2875,38,"app"],[2867,49,2875,41],[2867,50,2875,42],[2867,52,2875,44],[2868,8,2876,12],[2868,15,2876,19,"Promise"],[2868,22,2876,26],[2868,23,2876,27,"reject"],[2868,29,2876,33],[2868,30,2876,34,"_serverAppCurrentUserOperationNotSupportedError"],[2868,77,2876,81],[2868,78,2876,82],[2868,82,2876,86],[2868,83,2876,87],[2868,84,2876,88],[2869,6,2877,8],[2870,6,2878,8],[2871,6,2879,8],[2871,12,2879,14],[2871,16,2879,18],[2871,17,2879,19,"beforeStateQueue"],[2871,33,2879,35],[2871,34,2879,36,"runMiddleware"],[2871,47,2879,49],[2871,48,2879,50],[2871,52,2879,54],[2871,53,2879,55],[2872,6,2880,8],[2873,6,2881,8],[2873,10,2881,12],[2873,14,2881,16],[2873,15,2881,17,"redirectPersistenceManager"],[2873,41,2881,43],[2873,45,2881,47],[2873,49,2881,51],[2873,50,2881,52,"_popupRedirectResolver"],[2873,72,2881,74],[2873,74,2881,76],[2874,8,2882,12],[2874,14,2882,18],[2874,18,2882,22],[2874,19,2882,23,"_setRedirectUser"],[2874,35,2882,39],[2874,36,2882,40],[2874,40,2882,44],[2874,41,2882,45],[2875,6,2883,8],[2876,6,2884,8],[2877,6,2885,8],[2878,6,2886,8],[2878,13,2886,15],[2878,17,2886,19],[2878,18,2886,20,"_updateCurrentUser"],[2878,36,2886,38],[2878,37,2886,39],[2878,41,2886,43],[2878,43,2886,45],[2878,73,2886,76],[2878,77,2886,80],[2878,78,2886,81],[2879,4,2887,4],[2880,4,2888,4,"setPersistence"],[2880,18,2888,18,"setPersistence"],[2880,19,2888,19,"persistence"],[2880,30,2888,30],[2880,32,2888,32],[2881,6,2889,8],[2881,10,2889,12],[2881,14,2889,12,"_isFirebaseServerApp"],[2881,39,2889,32],[2881,41,2889,33],[2881,45,2889,37],[2881,46,2889,38,"app"],[2881,49,2889,41],[2881,50,2889,42],[2881,52,2889,44],[2882,8,2890,12],[2882,15,2890,19,"Promise"],[2882,22,2890,26],[2882,23,2890,27,"reject"],[2882,29,2890,33],[2882,30,2890,34,"_serverAppCurrentUserOperationNotSupportedError"],[2882,77,2890,81],[2882,78,2890,82],[2882,82,2890,86],[2882,83,2890,87],[2882,84,2890,88],[2883,6,2891,8],[2884,6,2892,8],[2884,13,2892,15],[2884,17,2892,19],[2884,18,2892,20,"queue"],[2884,23,2892,25],[2884,24,2892,26],[2884,36,2892,38],[2885,8,2893,12],[2885,14,2893,18],[2885,18,2893,22],[2885,19,2893,23,"assertedPersistence"],[2885,38,2893,42],[2885,39,2893,43,"setPersistence"],[2885,53,2893,57],[2885,54,2893,58,"_getInstance"],[2885,66,2893,70],[2885,67,2893,71,"persistence"],[2885,78,2893,82],[2885,79,2893,83],[2885,80,2893,84],[2886,6,2894,8],[2886,7,2894,9],[2886,8,2894,10],[2887,4,2895,4],[2888,4,2896,4,"_getRecaptchaConfig"],[2888,23,2896,23,"_getRecaptchaConfig"],[2888,24,2896,23],[2888,26,2896,26],[2889,6,2897,8],[2889,10,2897,12],[2889,14,2897,16],[2889,15,2897,17,"tenantId"],[2889,23,2897,25],[2889,27,2897,29],[2889,31,2897,33],[2889,33,2897,35],[2890,8,2898,12],[2890,15,2898,19],[2890,19,2898,23],[2890,20,2898,24,"_agentRecaptchaConfig"],[2890,41,2898,45],[2891,6,2899,8],[2891,7,2899,9],[2891,13,2900,13],[2892,8,2901,12],[2892,15,2901,19],[2892,19,2901,23],[2892,20,2901,24,"_tenantRecaptchaConfigs"],[2892,43,2901,47],[2892,44,2901,48],[2892,48,2901,52],[2892,49,2901,53,"tenantId"],[2892,57,2901,61],[2892,58,2901,62],[2893,6,2902,8],[2894,4,2903,4],[2895,4,2904,4],[2895,10,2904,10,"validatePassword"],[2895,26,2904,26,"validatePassword"],[2895,27,2904,27,"password"],[2895,35,2904,35],[2895,37,2904,37],[2896,6,2905,8],[2896,10,2905,12],[2896,11,2905,13],[2896,15,2905,17],[2896,16,2905,18,"_getPasswordPolicyInternal"],[2896,42,2905,44],[2896,43,2905,45],[2896,44,2905,46],[2896,46,2905,48],[2897,8,2906,12],[2897,14,2906,18],[2897,18,2906,22],[2897,19,2906,23,"_updatePasswordPolicy"],[2897,40,2906,44],[2897,41,2906,45],[2897,42,2906,46],[2898,6,2907,8],[2899,6,2908,8],[2900,6,2909,8],[2900,12,2909,14,"passwordPolicy"],[2900,26,2909,28],[2900,29,2909,31],[2900,33,2909,35],[2900,34,2909,36,"_getPasswordPolicyInternal"],[2900,60,2909,62],[2900,61,2909,63],[2900,62,2909,64],[2901,6,2910,8],[2902,6,2911,8],[2903,6,2912,8],[2903,10,2912,12,"passwordPolicy"],[2903,24,2912,26],[2903,25,2912,27,"schemaVersion"],[2903,38,2912,40],[2903,43,2913,12],[2903,47,2913,16],[2903,48,2913,17,"EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION"],[2903,87,2913,56],[2903,89,2913,58],[2904,8,2914,12],[2904,15,2914,19,"Promise"],[2904,22,2914,26],[2904,23,2914,27,"reject"],[2904,29,2914,33],[2904,30,2914,34],[2904,34,2914,38],[2904,35,2914,39,"_errorFactory"],[2904,48,2914,52],[2904,49,2914,53,"create"],[2904,55,2914,59],[2904,56,2914,60],[2904,100,2914,104],[2904,101,2914,105],[2904,165,2914,169],[2904,166,2914,170],[2904,167,2914,171],[2904,168,2914,172],[2904,169,2914,173],[2905,6,2915,8],[2906,6,2916,8],[2906,13,2916,15,"passwordPolicy"],[2906,27,2916,29],[2906,28,2916,30,"validatePassword"],[2906,44,2916,46],[2906,45,2916,47,"password"],[2906,53,2916,55],[2906,54,2916,56],[2907,4,2917,4],[2908,4,2918,4,"_getPasswordPolicyInternal"],[2908,30,2918,30,"_getPasswordPolicyInternal"],[2908,31,2918,30],[2908,33,2918,33],[2909,6,2919,8],[2909,10,2919,12],[2909,14,2919,16],[2909,15,2919,17,"tenantId"],[2909,23,2919,25],[2909,28,2919,30],[2909,32,2919,34],[2909,34,2919,36],[2910,8,2920,12],[2910,15,2920,19],[2910,19,2920,23],[2910,20,2920,24,"_projectPasswordPolicy"],[2910,42,2920,46],[2911,6,2921,8],[2911,7,2921,9],[2911,13,2922,13],[2912,8,2923,12],[2912,15,2923,19],[2912,19,2923,23],[2912,20,2923,24,"_tenantPasswordPolicies"],[2912,43,2923,47],[2912,44,2923,48],[2912,48,2923,52],[2912,49,2923,53,"tenantId"],[2912,57,2923,61],[2912,58,2923,62],[2913,6,2924,8],[2914,4,2925,4],[2915,4,2926,4],[2915,10,2926,10,"_updatePasswordPolicy"],[2915,31,2926,31,"_updatePasswordPolicy"],[2915,32,2926,31],[2915,34,2926,34],[2916,6,2927,8],[2916,12,2927,14,"response"],[2916,20,2927,22],[2916,23,2927,25],[2916,29,2927,31,"_getPasswordPolicy"],[2916,47,2927,49],[2916,48,2927,50],[2916,52,2927,54],[2916,53,2927,55],[2917,6,2928,8],[2917,12,2928,14,"passwordPolicy"],[2917,26,2928,28],[2917,29,2928,31],[2917,33,2928,35,"PasswordPolicyImpl"],[2917,51,2928,53],[2917,52,2928,54,"response"],[2917,60,2928,62],[2917,61,2928,63],[2918,6,2929,8],[2918,10,2929,12],[2918,14,2929,16],[2918,15,2929,17,"tenantId"],[2918,23,2929,25],[2918,28,2929,30],[2918,32,2929,34],[2918,34,2929,36],[2919,8,2930,12],[2919,12,2930,16],[2919,13,2930,17,"_projectPasswordPolicy"],[2919,35,2930,39],[2919,38,2930,42,"passwordPolicy"],[2919,52,2930,56],[2920,6,2931,8],[2920,7,2931,9],[2920,13,2932,13],[2921,8,2933,12],[2921,12,2933,16],[2921,13,2933,17,"_tenantPasswordPolicies"],[2921,36,2933,40],[2921,37,2933,41],[2921,41,2933,45],[2921,42,2933,46,"tenantId"],[2921,50,2933,54],[2921,51,2933,55],[2921,54,2933,58,"passwordPolicy"],[2921,68,2933,72],[2922,6,2934,8],[2923,4,2935,4],[2924,4,2936,4,"_getPersistenceType"],[2924,23,2936,23,"_getPersistenceType"],[2924,24,2936,23],[2924,26,2936,26],[2925,6,2937,8],[2925,13,2937,15],[2925,17,2937,19],[2925,18,2937,20,"assertedPersistence"],[2925,37,2937,39],[2925,38,2937,40,"persistence"],[2925,49,2937,51],[2925,50,2937,52,"type"],[2925,54,2937,56],[2926,4,2938,4],[2927,4,2939,4,"_getPersistence"],[2927,19,2939,19,"_getPersistence"],[2927,20,2939,19],[2927,22,2939,22],[2928,6,2940,8],[2928,13,2940,15],[2928,17,2940,19],[2928,18,2940,20,"assertedPersistence"],[2928,37,2940,39],[2928,38,2940,40,"persistence"],[2928,49,2940,51],[2929,4,2941,4],[2930,4,2942,4,"_updateErrorMap"],[2930,19,2942,19,"_updateErrorMap"],[2930,20,2942,20,"errorMap"],[2930,28,2942,28],[2930,30,2942,30],[2931,6,2943,8],[2931,10,2943,12],[2931,11,2943,13,"_errorFactory"],[2931,24,2943,26],[2931,27,2943,29],[2931,31,2943,33,"ErrorFactory"],[2931,49,2943,45],[2931,50,2943,46],[2931,56,2943,52],[2931,58,2943,54],[2931,68,2943,64],[2931,70,2943,66,"errorMap"],[2931,78,2943,74],[2931,79,2943,75],[2931,80,2943,76],[2931,81,2943,77],[2932,4,2944,4],[2933,4,2945,4,"onAuthStateChanged"],[2933,22,2945,22,"onAuthStateChanged"],[2933,23,2945,23,"nextOrObserver"],[2933,37,2945,37],[2933,39,2945,39,"error"],[2933,44,2945,44],[2933,46,2945,46,"completed"],[2933,55,2945,55],[2933,57,2945,57],[2934,6,2946,8],[2934,13,2946,15],[2934,17,2946,19],[2934,18,2946,20,"registerStateListener"],[2934,39,2946,41],[2934,40,2946,42],[2934,44,2946,46],[2934,45,2946,47,"authStateSubscription"],[2934,66,2946,68],[2934,68,2946,70,"nextOrObserver"],[2934,82,2946,84],[2934,84,2946,86,"error"],[2934,89,2946,91],[2934,91,2946,93,"completed"],[2934,100,2946,102],[2934,101,2946,103],[2935,4,2947,4],[2936,4,2948,4,"beforeAuthStateChanged"],[2936,26,2948,26,"beforeAuthStateChanged"],[2936,27,2948,27,"callback"],[2936,35,2948,35],[2936,37,2948,37,"onAbort"],[2936,44,2948,44],[2936,46,2948,46],[2937,6,2949,8],[2937,13,2949,15],[2937,17,2949,19],[2937,18,2949,20,"beforeStateQueue"],[2937,34,2949,36],[2937,35,2949,37,"pushCallback"],[2937,47,2949,49],[2937,48,2949,50,"callback"],[2937,56,2949,58],[2937,58,2949,60,"onAbort"],[2937,65,2949,67],[2937,66,2949,68],[2938,4,2950,4],[2939,4,2951,4,"onIdTokenChanged"],[2939,20,2951,20,"onIdTokenChanged"],[2939,21,2951,21,"nextOrObserver"],[2939,35,2951,35],[2939,37,2951,37,"error"],[2939,42,2951,42],[2939,44,2951,44,"completed"],[2939,53,2951,53],[2939,55,2951,55],[2940,6,2952,8],[2940,13,2952,15],[2940,17,2952,19],[2940,18,2952,20,"registerStateListener"],[2940,39,2952,41],[2940,40,2952,42],[2940,44,2952,46],[2940,45,2952,47,"idTokenSubscription"],[2940,64,2952,66],[2940,66,2952,68,"nextOrObserver"],[2940,80,2952,82],[2940,82,2952,84,"error"],[2940,87,2952,89],[2940,89,2952,91,"completed"],[2940,98,2952,100],[2940,99,2952,101],[2941,4,2953,4],[2942,4,2954,4,"authStateReady"],[2942,18,2954,18,"authStateReady"],[2942,19,2954,18],[2942,21,2954,21],[2943,6,2955,8],[2943,13,2955,15],[2943,17,2955,19,"Promise"],[2943,24,2955,26],[2943,25,2955,27],[2943,26,2955,28,"resolve"],[2943,33,2955,35],[2943,35,2955,37,"reject"],[2943,41,2955,43],[2943,46,2955,48],[2944,8,2956,12],[2944,12,2956,16],[2944,16,2956,20],[2944,17,2956,21,"currentUser"],[2944,28,2956,32],[2944,30,2956,34],[2945,10,2957,16,"resolve"],[2945,17,2957,23],[2945,18,2957,24],[2945,19,2957,25],[2946,8,2958,12],[2946,9,2958,13],[2946,15,2959,17],[2947,10,2960,16],[2947,16,2960,22,"unsubscribe"],[2947,27,2960,33],[2947,30,2960,36],[2947,34,2960,40],[2947,35,2960,41,"onAuthStateChanged"],[2947,53,2960,59],[2947,54,2960,60],[2947,60,2960,66],[2948,12,2961,20,"unsubscribe"],[2948,23,2961,31],[2948,24,2961,32],[2948,25,2961,33],[2949,12,2962,20,"resolve"],[2949,19,2962,27],[2949,20,2962,28],[2949,21,2962,29],[2950,10,2963,16],[2950,11,2963,17],[2950,13,2963,19,"reject"],[2950,19,2963,25],[2950,20,2963,26],[2951,8,2964,12],[2952,6,2965,8],[2952,7,2965,9],[2952,8,2965,10],[2953,4,2966,4],[2954,4,2967,4],[2955,0,2968,0],[2956,0,2969,0],[2957,4,2970,4],[2957,10,2970,10,"revokeAccessToken"],[2957,27,2970,27,"revokeAccessToken"],[2957,28,2970,28,"token"],[2957,33,2970,33],[2957,35,2970,35],[2958,6,2971,8],[2958,10,2971,12],[2958,14,2971,16],[2958,15,2971,17,"currentUser"],[2958,26,2971,28],[2958,28,2971,30],[2959,8,2972,12],[2959,14,2972,18,"idToken"],[2959,21,2972,25],[2959,24,2972,28],[2959,30,2972,34],[2959,34,2972,38],[2959,35,2972,39,"currentUser"],[2959,46,2972,50],[2959,47,2972,51,"getIdToken"],[2959,57,2972,61],[2959,58,2972,62],[2959,59,2972,63],[2960,8,2973,12],[2961,8,2974,12],[2961,14,2974,18,"request"],[2961,21,2974,25],[2961,24,2974,28],[2962,10,2975,16,"providerId"],[2962,20,2975,26],[2962,22,2975,28],[2962,33,2975,39],[2963,10,2976,16,"tokenType"],[2963,19,2976,25],[2963,21,2976,27],[2963,35,2976,41],[2963,36,2976,42],[2964,10,2977,16,"token"],[2964,15,2977,21],[2965,10,2978,16,"idToken"],[2966,8,2979,12],[2966,9,2979,13],[2967,8,2980,12],[2967,12,2980,16],[2967,16,2980,20],[2967,17,2980,21,"tenantId"],[2967,25,2980,29],[2967,29,2980,33],[2967,33,2980,37],[2967,35,2980,39],[2968,10,2981,16,"request"],[2968,17,2981,23],[2968,18,2981,24,"tenantId"],[2968,26,2981,32],[2968,29,2981,35],[2968,33,2981,39],[2968,34,2981,40,"tenantId"],[2968,42,2981,48],[2969,8,2982,12],[2970,8,2983,12],[2970,14,2983,18,"revokeToken"],[2970,25,2983,29],[2970,26,2983,30],[2970,30,2983,34],[2970,32,2983,36,"request"],[2970,39,2983,43],[2970,40,2983,44],[2971,6,2984,8],[2972,4,2985,4],[2973,4,2986,4,"toJSON"],[2973,10,2986,10,"toJSON"],[2973,11,2986,10],[2973,13,2986,13],[2974,6,2987,8],[2974,13,2987,15],[2975,8,2988,12,"apiKey"],[2975,14,2988,18],[2975,16,2988,20],[2975,20,2988,24],[2975,21,2988,25,"config"],[2975,27,2988,31],[2975,28,2988,32,"apiKey"],[2975,34,2988,38],[2976,8,2989,12,"authDomain"],[2976,18,2989,22],[2976,20,2989,24],[2976,24,2989,28],[2976,25,2989,29,"config"],[2976,31,2989,35],[2976,32,2989,36,"authDomain"],[2976,42,2989,46],[2977,8,2990,12,"appName"],[2977,15,2990,19],[2977,17,2990,21],[2977,21,2990,25],[2977,22,2990,26,"name"],[2977,26,2990,30],[2978,8,2991,12,"currentUser"],[2978,19,2991,23],[2978,21,2991,25],[2978,25,2991,29],[2978,26,2991,30,"_currentUser"],[2978,38,2991,42],[2978,40,2991,44,"toJSON"],[2978,46,2991,50],[2978,47,2991,51],[2979,6,2992,8],[2979,7,2992,9],[2980,4,2993,4],[2981,4,2994,4],[2981,10,2994,10,"_setRedirectUser"],[2981,26,2994,26,"_setRedirectUser"],[2981,27,2994,27,"user"],[2981,31,2994,31],[2981,33,2994,33,"popupRedirectResolver"],[2981,54,2994,54],[2981,56,2994,56],[2982,6,2995,8],[2982,12,2995,14,"redirectManager"],[2982,27,2995,29],[2982,30,2995,32],[2982,36,2995,38],[2982,40,2995,42],[2982,41,2995,43,"getOrInitRedirectPersistenceManager"],[2982,76,2995,78],[2982,77,2995,79,"popupRedirectResolver"],[2982,98,2995,100],[2982,99,2995,101],[2983,6,2996,8],[2983,13,2996,15,"user"],[2983,17,2996,19],[2983,22,2996,24],[2983,26,2996,28],[2983,29,2997,14,"redirectManager"],[2983,44,2997,29],[2983,45,2997,30,"removeCurrentUser"],[2983,62,2997,47],[2983,63,2997,48],[2983,64,2997,49],[2983,67,2998,14,"redirectManager"],[2983,82,2998,29],[2983,83,2998,30,"setCurrentUser"],[2983,97,2998,44],[2983,98,2998,45,"user"],[2983,102,2998,49],[2983,103,2998,50],[2984,4,2999,4],[2985,4,3000,4],[2985,10,3000,10,"getOrInitRedirectPersistenceManager"],[2985,45,3000,45,"getOrInitRedirectPersistenceManager"],[2985,46,3000,46,"popupRedirectResolver"],[2985,67,3000,67],[2985,69,3000,69],[2986,6,3001,8],[2986,10,3001,12],[2986,11,3001,13],[2986,15,3001,17],[2986,16,3001,18,"redirectPersistenceManager"],[2986,42,3001,44],[2986,44,3001,46],[2987,8,3002,12],[2987,14,3002,18,"resolver"],[2987,22,3002,26],[2987,25,3002,30,"popupRedirectResolver"],[2987,46,3002,51],[2987,50,3002,55,"_getInstance"],[2987,62,3002,67],[2987,63,3002,68,"popupRedirectResolver"],[2987,84,3002,89],[2987,85,3002,90],[2987,89,3003,16],[2987,93,3003,20],[2987,94,3003,21,"_popupRedirectResolver"],[2987,116,3003,43],[2988,8,3004,12,"_assert"],[2988,15,3004,19],[2988,16,3004,20,"resolver"],[2988,24,3004,28],[2988,26,3004,30],[2988,30,3004,34],[2988,32,3004,36],[2988,48,3004,52],[2988,49,3004,53],[2988,83,3004,87],[2988,84,3004,88],[2989,8,3005,12],[2989,12,3005,16],[2989,13,3005,17,"redirectPersistenceManager"],[2989,39,3005,43],[2989,42,3005,46],[2989,48,3005,52,"PersistenceUserManager"],[2989,70,3005,74],[2989,71,3005,75,"create"],[2989,77,3005,81],[2989,78,3005,82],[2989,82,3005,86],[2989,84,3005,88],[2989,85,3005,89,"_getInstance"],[2989,97,3005,101],[2989,98,3005,102,"resolver"],[2989,106,3005,110],[2989,107,3005,111,"_redirectPersistence"],[2989,127,3005,131],[2989,128,3005,132],[2989,129,3005,133],[2989,131,3005,135],[2989,145,3005,149],[2989,146,3005,150],[2989,173,3005,177],[2989,174,3005,178],[2990,8,3006,12],[2990,12,3006,16],[2990,13,3006,17,"redirectUser"],[2990,25,3006,29],[2990,28,3007,16],[2990,34,3007,22],[2990,38,3007,26],[2990,39,3007,27,"redirectPersistenceManager"],[2990,65,3007,53],[2990,66,3007,54,"getCurrentUser"],[2990,80,3007,68],[2990,81,3007,69],[2990,82,3007,70],[2991,6,3008,8],[2992,6,3009,8],[2992,13,3009,15],[2992,17,3009,19],[2992,18,3009,20,"redirectPersistenceManager"],[2992,44,3009,46],[2993,4,3010,4],[2994,4,3011,4],[2994,10,3011,10,"_redirectUserForId"],[2994,28,3011,28,"_redirectUserForId"],[2994,29,3011,29,"id"],[2994,31,3011,31],[2994,33,3011,33],[2995,6,3012,8],[2996,6,3013,8],[2997,6,3014,8],[2997,10,3014,12],[2997,14,3014,16],[2997,15,3014,17,"_isInitialized"],[2997,29,3014,31],[2997,31,3014,33],[2998,8,3015,12],[2998,14,3015,18],[2998,18,3015,22],[2998,19,3015,23,"queue"],[2998,24,3015,28],[2998,25,3015,29],[2998,37,3015,41],[2998,38,3015,43],[2998,39,3015,44],[2998,40,3015,45],[2999,6,3016,8],[3000,6,3017,8],[3000,10,3017,12],[3000,14,3017,16],[3000,15,3017,17,"_currentUser"],[3000,27,3017,29],[3000,29,3017,31,"_redirectEventId"],[3000,45,3017,47],[3000,50,3017,52,"id"],[3000,52,3017,54],[3000,54,3017,56],[3001,8,3018,12],[3001,15,3018,19],[3001,19,3018,23],[3001,20,3018,24,"_currentUser"],[3001,32,3018,36],[3002,6,3019,8],[3003,6,3020,8],[3003,10,3020,12],[3003,14,3020,16],[3003,15,3020,17,"redirectUser"],[3003,27,3020,29],[3003,29,3020,31,"_redirectEventId"],[3003,45,3020,47],[3003,50,3020,52,"id"],[3003,52,3020,54],[3003,54,3020,56],[3004,8,3021,12],[3004,15,3021,19],[3004,19,3021,23],[3004,20,3021,24,"redirectUser"],[3004,32,3021,36],[3005,6,3022,8],[3006,6,3023,8],[3006,13,3023,15],[3006,17,3023,19],[3007,4,3024,4],[3008,4,3025,4],[3008,10,3025,10,"_persistUserIfCurrent"],[3008,31,3025,31,"_persistUserIfCurrent"],[3008,32,3025,32,"user"],[3008,36,3025,36],[3008,38,3025,38],[3009,6,3026,8],[3009,10,3026,12,"user"],[3009,14,3026,16],[3009,19,3026,21],[3009,23,3026,25],[3009,24,3026,26,"currentUser"],[3009,35,3026,37],[3009,37,3026,39],[3010,8,3027,12],[3010,15,3027,19],[3010,19,3027,23],[3010,20,3027,24,"queue"],[3010,25,3027,29],[3010,26,3027,30],[3010,38,3027,42],[3010,42,3027,46],[3010,43,3027,47,"directlySetCurrentUser"],[3010,65,3027,69],[3010,66,3027,70,"user"],[3010,70,3027,74],[3010,71,3027,75],[3010,72,3027,76],[3011,6,3028,8],[3012,4,3029,4],[3013,4,3030,4],[3014,4,3031,4,"_notifyListenersIfCurrent"],[3014,29,3031,29,"_notifyListenersIfCurrent"],[3014,30,3031,30,"user"],[3014,34,3031,34],[3014,36,3031,36],[3015,6,3032,8],[3015,10,3032,12,"user"],[3015,14,3032,16],[3015,19,3032,21],[3015,23,3032,25],[3015,24,3032,26,"currentUser"],[3015,35,3032,37],[3015,37,3032,39],[3016,8,3033,12],[3016,12,3033,16],[3016,13,3033,17,"notifyAuthListeners"],[3016,32,3033,36],[3016,33,3033,37],[3016,34,3033,38],[3017,6,3034,8],[3018,4,3035,4],[3019,4,3036,4,"_key"],[3019,8,3036,8,"_key"],[3019,9,3036,8],[3019,11,3036,11],[3020,6,3037,8],[3020,13,3037,15],[3020,16,3037,18],[3020,20,3037,22],[3020,21,3037,23,"config"],[3020,27,3037,29],[3020,28,3037,30,"authDomain"],[3020,38,3037,40],[3020,42,3037,44],[3020,46,3037,48],[3020,47,3037,49,"config"],[3020,53,3037,55],[3020,54,3037,56,"apiKey"],[3020,60,3037,62],[3020,64,3037,66],[3020,68,3037,70],[3020,69,3037,71,"name"],[3020,73,3037,75],[3020,75,3037,77],[3021,4,3038,4],[3022,4,3039,4,"_startProactiveRefresh"],[3022,26,3039,26,"_startProactiveRefresh"],[3022,27,3039,26],[3022,29,3039,29],[3023,6,3040,8],[3023,10,3040,12],[3023,11,3040,13,"isProactiveRefreshEnabled"],[3023,36,3040,38],[3023,39,3040,41],[3023,43,3040,45],[3024,6,3041,8],[3024,10,3041,12],[3024,14,3041,16],[3024,15,3041,17,"currentUser"],[3024,26,3041,28],[3024,28,3041,30],[3025,8,3042,12],[3025,12,3042,16],[3025,13,3042,17,"_currentUser"],[3025,25,3042,29],[3025,26,3042,30,"_startProactiveRefresh"],[3025,48,3042,52],[3025,49,3042,53],[3025,50,3042,54],[3026,6,3043,8],[3027,4,3044,4],[3028,4,3045,4,"_stopProactiveRefresh"],[3028,25,3045,25,"_stopProactiveRefresh"],[3028,26,3045,25],[3028,28,3045,28],[3029,6,3046,8],[3029,10,3046,12],[3029,11,3046,13,"isProactiveRefreshEnabled"],[3029,36,3046,38],[3029,39,3046,41],[3029,44,3046,46],[3030,6,3047,8],[3030,10,3047,12],[3030,14,3047,16],[3030,15,3047,17,"currentUser"],[3030,26,3047,28],[3030,28,3047,30],[3031,8,3048,12],[3031,12,3048,16],[3031,13,3048,17,"_currentUser"],[3031,25,3048,29],[3031,26,3048,30,"_stopProactiveRefresh"],[3031,47,3048,51],[3031,48,3048,52],[3031,49,3048,53],[3032,6,3049,8],[3033,4,3050,4],[3034,4,3051,4],[3035,4,3052,4],[3035,8,3052,8,"_currentUser"],[3035,20,3052,20,"_currentUser"],[3035,21,3052,20],[3035,23,3052,23],[3036,6,3053,8],[3036,13,3053,15],[3036,17,3053,19],[3036,18,3053,20,"currentUser"],[3036,29,3053,31],[3037,4,3054,4],[3038,4,3055,4,"notifyAuthListeners"],[3038,23,3055,23,"notifyAuthListeners"],[3038,24,3055,23],[3038,26,3055,26],[3039,6,3056,8],[3039,10,3056,12],[3039,11,3056,13],[3039,15,3056,17],[3039,16,3056,18,"_isInitialized"],[3039,30,3056,32],[3039,32,3056,34],[3040,8,3057,12],[3041,6,3058,8],[3042,6,3059,8],[3042,10,3059,12],[3042,11,3059,13,"idTokenSubscription"],[3042,30,3059,32],[3042,31,3059,33,"next"],[3042,35,3059,37],[3042,36,3059,38],[3042,40,3059,42],[3042,41,3059,43,"currentUser"],[3042,52,3059,54],[3042,53,3059,55],[3043,6,3060,8],[3043,12,3060,14,"currentUid"],[3043,22,3060,24],[3043,25,3060,27],[3043,29,3060,31],[3043,30,3060,32,"currentUser"],[3043,41,3060,43],[3043,43,3060,45,"uid"],[3043,46,3060,48],[3043,50,3060,52],[3043,54,3060,56],[3044,6,3061,8],[3044,10,3061,12],[3044,14,3061,16],[3044,15,3061,17,"lastNotifiedUid"],[3044,30,3061,32],[3044,35,3061,37,"currentUid"],[3044,45,3061,47],[3044,47,3061,49],[3045,8,3062,12],[3045,12,3062,16],[3045,13,3062,17,"lastNotifiedUid"],[3045,28,3062,32],[3045,31,3062,35,"currentUid"],[3045,41,3062,45],[3046,8,3063,12],[3046,12,3063,16],[3046,13,3063,17,"authStateSubscription"],[3046,34,3063,38],[3046,35,3063,39,"next"],[3046,39,3063,43],[3046,40,3063,44],[3046,44,3063,48],[3046,45,3063,49,"currentUser"],[3046,56,3063,60],[3046,57,3063,61],[3047,6,3064,8],[3048,4,3065,4],[3049,4,3066,4,"registerStateListener"],[3049,25,3066,25,"registerStateListener"],[3049,26,3066,26,"subscription"],[3049,38,3066,38],[3049,40,3066,40,"nextOrObserver"],[3049,54,3066,54],[3049,56,3066,56,"error"],[3049,61,3066,61],[3049,63,3066,63,"completed"],[3049,72,3066,72],[3049,74,3066,74],[3050,6,3067,8],[3050,10,3067,12],[3050,14,3067,16],[3050,15,3067,17,"_deleted"],[3050,23,3067,25],[3050,25,3067,27],[3051,8,3068,12],[3051,15,3068,19],[3051,21,3068,25],[3051,22,3068,27],[3051,23,3068,28],[3052,6,3069,8],[3053,6,3070,8],[3053,12,3070,14,"cb"],[3053,14,3070,16],[3053,17,3070,19],[3053,24,3070,26,"nextOrObserver"],[3053,38,3070,40],[3053,43,3070,45],[3053,53,3070,55],[3053,56,3071,14,"nextOrObserver"],[3053,70,3071,28],[3053,73,3072,14,"nextOrObserver"],[3053,87,3072,28],[3053,88,3072,29,"next"],[3053,92,3072,33],[3053,93,3072,34,"bind"],[3053,97,3072,38],[3053,98,3072,39,"nextOrObserver"],[3053,112,3072,53],[3053,113,3072,54],[3054,6,3073,8],[3054,10,3073,12,"isUnsubscribed"],[3054,24,3073,26],[3054,27,3073,29],[3054,32,3073,34],[3055,6,3074,8],[3055,12,3074,14,"promise"],[3055,19,3074,21],[3055,22,3074,24],[3055,26,3074,28],[3055,27,3074,29,"_isInitialized"],[3055,41,3074,43],[3055,44,3075,14,"Promise"],[3055,51,3075,21],[3055,52,3075,22,"resolve"],[3055,59,3075,29],[3055,60,3075,30],[3055,61,3075,31],[3055,64,3076,14],[3055,68,3076,18],[3055,69,3076,19,"_initializationPromise"],[3055,91,3076,41],[3056,6,3077,8,"_assert"],[3056,13,3077,15],[3056,14,3077,16,"promise"],[3056,21,3077,23],[3056,23,3077,25],[3056,27,3077,29],[3056,29,3077,31],[3056,45,3077,47],[3056,46,3077,48],[3056,80,3077,82],[3056,81,3077,83],[3057,6,3078,8],[3058,6,3079,8],[3059,6,3080,8,"promise"],[3059,13,3080,15],[3059,14,3080,16,"then"],[3059,18,3080,20],[3059,19,3080,21],[3059,25,3080,27],[3060,8,3081,12],[3060,12,3081,16,"isUnsubscribed"],[3060,26,3081,30],[3060,28,3081,32],[3061,10,3082,16],[3062,8,3083,12],[3063,8,3084,12,"cb"],[3063,10,3084,14],[3063,11,3084,15],[3063,15,3084,19],[3063,16,3084,20,"currentUser"],[3063,27,3084,31],[3063,28,3084,32],[3064,6,3085,8],[3064,7,3085,9],[3064,8,3085,10],[3065,6,3086,8],[3065,10,3086,12],[3065,17,3086,19,"nextOrObserver"],[3065,31,3086,33],[3065,36,3086,38],[3065,46,3086,48],[3065,48,3086,50],[3066,8,3087,12],[3066,14,3087,18,"unsubscribe"],[3066,25,3087,29],[3066,28,3087,32,"subscription"],[3066,40,3087,44],[3066,41,3087,45,"addObserver"],[3066,52,3087,56],[3066,53,3087,57,"nextOrObserver"],[3066,67,3087,71],[3066,69,3087,73,"error"],[3066,74,3087,78],[3066,76,3087,80,"completed"],[3066,85,3087,89],[3066,86,3087,90],[3067,8,3088,12],[3067,15,3088,19],[3067,21,3088,25],[3068,10,3089,16,"isUnsubscribed"],[3068,24,3089,30],[3068,27,3089,33],[3068,31,3089,37],[3069,10,3090,16,"unsubscribe"],[3069,21,3090,27],[3069,22,3090,28],[3069,23,3090,29],[3070,8,3091,12],[3070,9,3091,13],[3071,6,3092,8],[3071,7,3092,9],[3071,13,3093,13],[3072,8,3094,12],[3072,14,3094,18,"unsubscribe"],[3072,25,3094,29],[3072,28,3094,32,"subscription"],[3072,40,3094,44],[3072,41,3094,45,"addObserver"],[3072,52,3094,56],[3072,53,3094,57,"nextOrObserver"],[3072,67,3094,71],[3072,68,3094,72],[3073,8,3095,12],[3073,15,3095,19],[3073,21,3095,25],[3074,10,3096,16,"isUnsubscribed"],[3074,24,3096,30],[3074,27,3096,33],[3074,31,3096,37],[3075,10,3097,16,"unsubscribe"],[3075,21,3097,27],[3075,22,3097,28],[3075,23,3097,29],[3076,8,3098,12],[3076,9,3098,13],[3077,6,3099,8],[3078,4,3100,4],[3079,4,3101,4],[3080,0,3102,0],[3081,0,3103,0],[3082,0,3104,0],[3083,0,3105,0],[3084,4,3106,4],[3084,10,3106,10,"directlySetCurrentUser"],[3084,32,3106,32,"directlySetCurrentUser"],[3084,33,3106,33,"user"],[3084,37,3106,37],[3084,39,3106,39],[3085,6,3107,8],[3085,10,3107,12],[3085,14,3107,16],[3085,15,3107,17,"currentUser"],[3085,26,3107,28],[3085,30,3107,32],[3085,34,3107,36],[3085,35,3107,37,"currentUser"],[3085,46,3107,48],[3085,51,3107,53,"user"],[3085,55,3107,57],[3085,57,3107,59],[3086,8,3108,12],[3086,12,3108,16],[3086,13,3108,17,"_currentUser"],[3086,25,3108,29],[3086,26,3108,30,"_stopProactiveRefresh"],[3086,47,3108,51],[3086,48,3108,52],[3086,49,3108,53],[3087,6,3109,8],[3088,6,3110,8],[3088,10,3110,12,"user"],[3088,14,3110,16],[3088,18,3110,20],[3088,22,3110,24],[3088,23,3110,25,"isProactiveRefreshEnabled"],[3088,48,3110,50],[3088,50,3110,52],[3089,8,3111,12,"user"],[3089,12,3111,16],[3089,13,3111,17,"_startProactiveRefresh"],[3089,35,3111,39],[3089,36,3111,40],[3089,37,3111,41],[3090,6,3112,8],[3091,6,3113,8],[3091,10,3113,12],[3091,11,3113,13,"currentUser"],[3091,22,3113,24],[3091,25,3113,27,"user"],[3091,29,3113,31],[3092,6,3114,8],[3092,10,3114,12,"user"],[3092,14,3114,16],[3092,16,3114,18],[3093,8,3115,12],[3093,14,3115,18],[3093,18,3115,22],[3093,19,3115,23,"assertedPersistence"],[3093,38,3115,42],[3093,39,3115,43,"setCurrentUser"],[3093,53,3115,57],[3093,54,3115,58,"user"],[3093,58,3115,62],[3093,59,3115,63],[3094,6,3116,8],[3094,7,3116,9],[3094,13,3117,13],[3095,8,3118,12],[3095,14,3118,18],[3095,18,3118,22],[3095,19,3118,23,"assertedPersistence"],[3095,38,3118,42],[3095,39,3118,43,"removeCurrentUser"],[3095,56,3118,60],[3095,57,3118,61],[3095,58,3118,62],[3096,6,3119,8],[3097,4,3120,4],[3098,4,3121,4,"queue"],[3098,9,3121,9,"queue"],[3098,10,3121,10,"action"],[3098,16,3121,16],[3098,18,3121,18],[3099,6,3122,8],[3100,6,3123,8],[3101,6,3124,8],[3101,10,3124,12],[3101,11,3124,13,"operations"],[3101,21,3124,23],[3101,24,3124,26],[3101,28,3124,30],[3101,29,3124,31,"operations"],[3101,39,3124,41],[3101,40,3124,42,"then"],[3101,44,3124,46],[3101,45,3124,47,"action"],[3101,51,3124,53],[3101,53,3124,55,"action"],[3101,59,3124,61],[3101,60,3124,62],[3102,6,3125,8],[3102,13,3125,15],[3102,17,3125,19],[3102,18,3125,20,"operations"],[3102,28,3125,30],[3103,4,3126,4],[3104,4,3127,4],[3104,8,3127,8,"assertedPersistence"],[3104,27,3127,27,"assertedPersistence"],[3104,28,3127,27],[3104,30,3127,30],[3105,6,3128,8,"_assert"],[3105,13,3128,15],[3105,14,3128,16],[3105,18,3128,20],[3105,19,3128,21,"persistenceManager"],[3105,37,3128,39],[3105,39,3128,41],[3105,43,3128,45],[3105,45,3128,47],[3105,61,3128,63],[3105,62,3128,64],[3105,96,3128,98],[3105,97,3128,99],[3106,6,3129,8],[3106,13,3129,15],[3106,17,3129,19],[3106,18,3129,20,"persistenceManager"],[3106,36,3129,38],[3107,4,3130,4],[3108,4,3131,4,"_logFramework"],[3108,17,3131,17,"_logFramework"],[3108,18,3131,18,"framework"],[3108,27,3131,27],[3108,29,3131,29],[3109,6,3132,8],[3109,10,3132,12],[3109,11,3132,13,"framework"],[3109,20,3132,22],[3109,24,3132,26],[3109,28,3132,30],[3109,29,3132,31,"frameworks"],[3109,39,3132,41],[3109,40,3132,42,"includes"],[3109,48,3132,50],[3109,49,3132,51,"framework"],[3109,58,3132,60],[3109,59,3132,61],[3109,61,3132,63],[3110,8,3133,12],[3111,6,3134,8],[3112,6,3135,8],[3112,10,3135,12],[3112,11,3135,13,"frameworks"],[3112,21,3135,23],[3112,22,3135,24,"push"],[3112,26,3135,28],[3112,27,3135,29,"framework"],[3112,36,3135,38],[3112,37,3135,39],[3113,6,3136,8],[3114,6,3137,8],[3115,6,3138,8],[3115,10,3138,12],[3115,11,3138,13,"frameworks"],[3115,21,3138,23],[3115,22,3138,24,"sort"],[3115,26,3138,28],[3115,27,3138,29],[3115,28,3138,30],[3116,6,3139,8],[3116,10,3139,12],[3116,11,3139,13,"clientVersion"],[3116,24,3139,26],[3116,27,3139,29,"_getClientVersion"],[3116,44,3139,46],[3116,45,3139,47],[3116,49,3139,51],[3116,50,3139,52,"config"],[3116,56,3139,58],[3116,57,3139,59,"clientPlatform"],[3116,71,3139,73],[3116,73,3139,75],[3116,77,3139,79],[3116,78,3139,80,"_getFrameworks"],[3116,92,3139,94],[3116,93,3139,95],[3116,94,3139,96],[3116,95,3139,97],[3117,4,3140,4],[3118,4,3141,4,"_getFrameworks"],[3118,18,3141,18,"_getFrameworks"],[3118,19,3141,18],[3118,21,3141,21],[3119,6,3142,8],[3119,13,3142,15],[3119,17,3142,19],[3119,18,3142,20,"frameworks"],[3119,28,3142,30],[3120,4,3143,4],[3121,4,3144,4],[3121,10,3144,10,"_getAdditionalHeaders"],[3121,31,3144,31,"_getAdditionalHeaders"],[3121,32,3144,31],[3121,34,3144,34],[3122,6,3145,8],[3123,6,3146,8],[3123,12,3146,14,"headers"],[3123,19,3146,21],[3123,22,3146,24],[3124,8,3147,12],[3124,9,3147,13],[3124,27,3147,31],[3124,28,3147,32],[3124,64,3147,68],[3124,68,3147,72],[3124,69,3147,73,"clientVersion"],[3125,6,3148,8],[3125,7,3148,9],[3126,6,3149,8],[3126,10,3149,12],[3126,14,3149,16],[3126,15,3149,17,"app"],[3126,18,3149,20],[3126,19,3149,21,"options"],[3126,26,3149,28],[3126,27,3149,29,"appId"],[3126,32,3149,34],[3126,34,3149,36],[3127,8,3150,12,"headers"],[3127,15,3150,19],[3127,16,3150,20],[3127,34,3150,38],[3127,35,3150,39],[3127,69,3150,73],[3127,72,3150,76],[3127,76,3150,80],[3127,77,3150,81,"app"],[3127,80,3150,84],[3127,81,3150,85,"options"],[3127,88,3150,92],[3127,89,3150,93,"appId"],[3127,94,3150,98],[3128,6,3151,8],[3129,6,3152,8],[3130,6,3153,8],[3130,12,3153,14,"heartbeatsHeader"],[3130,28,3153,30],[3130,31,3153,33],[3130,37,3153,39],[3130,41,3153,43],[3130,42,3153,44,"heartbeatServiceProvider"],[3130,66,3153,68],[3130,67,3154,13,"getImmediate"],[3130,79,3154,25],[3130,80,3154,26],[3131,8,3155,12,"optional"],[3131,16,3155,20],[3131,18,3155,22],[3132,6,3156,8],[3132,7,3156,9],[3132,8,3156,10],[3132,10,3157,14,"getHeartbeatsHeader"],[3132,29,3157,33],[3132,30,3157,34],[3132,31,3157,35],[3133,6,3158,8],[3133,10,3158,12,"heartbeatsHeader"],[3133,26,3158,28],[3133,28,3158,30],[3134,8,3159,12,"headers"],[3134,15,3159,19],[3134,16,3159,20],[3134,35,3159,39],[3134,36,3159,40],[3134,71,3159,75],[3134,74,3159,78,"heartbeatsHeader"],[3134,90,3159,94],[3135,6,3160,8],[3136,6,3161,8],[3137,6,3162,8],[3137,12,3162,14,"appCheckToken"],[3137,25,3162,27],[3137,28,3162,30],[3137,34,3162,36],[3137,38,3162,40],[3137,39,3162,41,"_getAppCheckToken"],[3137,56,3162,58],[3137,57,3162,59],[3137,58,3162,60],[3138,6,3163,8],[3138,10,3163,12,"appCheckToken"],[3138,23,3163,25],[3138,25,3163,27],[3139,8,3164,12,"headers"],[3139,15,3164,19],[3139,16,3164,20],[3139,37,3164,41],[3139,38,3164,42],[3139,76,3164,80],[3139,79,3164,83,"appCheckToken"],[3139,92,3164,96],[3140,6,3165,8],[3141,6,3166,8],[3141,13,3166,15,"headers"],[3141,20,3166,22],[3142,4,3167,4],[3143,4,3168,4],[3143,10,3168,10,"_getAppCheckToken"],[3143,27,3168,27,"_getAppCheckToken"],[3143,28,3168,27],[3143,30,3168,30],[3144,6,3169,8],[3144,10,3169,12],[3144,14,3169,12,"_isFirebaseServerApp"],[3144,39,3169,32],[3144,41,3169,33],[3144,45,3169,37],[3144,46,3169,38,"app"],[3144,49,3169,41],[3144,50,3169,42],[3144,54,3169,46],[3144,58,3169,50],[3144,59,3169,51,"app"],[3144,62,3169,54],[3144,63,3169,55,"settings"],[3144,71,3169,63],[3144,72,3169,64,"appCheckToken"],[3144,85,3169,77],[3144,87,3169,79],[3145,8,3170,12],[3145,15,3170,19],[3145,19,3170,23],[3145,20,3170,24,"app"],[3145,23,3170,27],[3145,24,3170,28,"settings"],[3145,32,3170,36],[3145,33,3170,37,"appCheckToken"],[3145,46,3170,50],[3146,6,3171,8],[3147,6,3172,8],[3147,12,3172,14,"appCheckTokenResult"],[3147,31,3172,33],[3147,34,3172,36],[3147,40,3172,42],[3147,44,3172,46],[3147,45,3172,47,"appCheckServiceProvider"],[3147,68,3172,70],[3147,69,3173,13,"getImmediate"],[3147,81,3173,25],[3147,82,3173,26],[3148,8,3173,28,"optional"],[3148,16,3173,36],[3148,18,3173,38],[3149,6,3173,43],[3149,7,3173,44],[3149,8,3173,45],[3149,10,3174,14,"getToken"],[3149,18,3174,22],[3149,19,3174,23],[3149,20,3174,24],[3150,6,3175,8],[3150,10,3175,12,"appCheckTokenResult"],[3150,29,3175,31],[3150,31,3175,33,"error"],[3150,36,3175,38],[3150,38,3175,40],[3151,8,3176,12],[3152,8,3177,12],[3153,8,3178,12],[3154,8,3179,12],[3155,8,3180,12,"_logWarn"],[3155,16,3180,20],[3155,17,3180,21],[3155,60,3180,64,"appCheckTokenResult"],[3155,79,3180,83],[3155,80,3180,84,"error"],[3155,85,3180,89],[3155,87,3180,91],[3155,88,3180,92],[3156,6,3181,8],[3157,6,3182,8],[3157,13,3182,15,"appCheckTokenResult"],[3157,32,3182,34],[3157,34,3182,36,"token"],[3157,39,3182,41],[3158,4,3183,4],[3159,2,3184,0],[3160,2,3185,0],[3161,0,3186,0],[3162,0,3187,0],[3163,0,3188,0],[3164,0,3189,0],[3165,0,3190,0],[3166,2,3185,0,"exports"],[3166,9,3185,0],[3166,10,3185,0,"aR"],[3166,12,3185,0],[3166,15,3185,0,"AuthImpl"],[3166,23,3185,0],[3167,2,3191,0],[3167,11,3191,9,"_castAuth"],[3167,20,3191,18,"_castAuth"],[3167,21,3191,19,"auth"],[3167,25,3191,23],[3167,27,3191,25],[3168,4,3192,4],[3168,11,3192,11],[3168,15,3192,11,"getModularInstance"],[3168,39,3192,29],[3168,41,3192,30,"auth"],[3168,45,3192,34],[3168,46,3192,35],[3169,2,3193,0],[3170,2,3194,0],[3171,2,3195,0],[3171,8,3195,6,"Subscription"],[3171,20,3195,18],[3171,21,3195,19],[3172,4,3196,4,"constructor"],[3172,15,3196,15,"constructor"],[3172,16,3196,16,"auth"],[3172,20,3196,20],[3172,22,3196,22],[3173,6,3197,8],[3173,10,3197,12],[3173,11,3197,13,"auth"],[3173,15,3197,17],[3173,18,3197,20,"auth"],[3173,22,3197,24],[3174,6,3198,8],[3174,10,3198,12],[3174,11,3198,13,"observer"],[3174,19,3198,21],[3174,22,3198,24],[3174,26,3198,28],[3175,6,3199,8],[3175,10,3199,12],[3175,11,3199,13,"addObserver"],[3175,22,3199,24],[3175,25,3199,27],[3175,29,3199,27,"createSubscribe"],[3175,50,3199,42],[3175,52,3199,43,"observer"],[3175,60,3199,51],[3175,64,3199,56],[3175,68,3199,60],[3175,69,3199,61,"observer"],[3175,77,3199,69],[3175,80,3199,72,"observer"],[3175,88,3199,81],[3175,89,3199,82],[3176,4,3200,4],[3177,4,3201,4],[3177,8,3201,8,"next"],[3177,12,3201,12,"next"],[3177,13,3201,12],[3177,15,3201,15],[3178,6,3202,8,"_assert"],[3178,13,3202,15],[3178,14,3202,16],[3178,18,3202,20],[3178,19,3202,21,"observer"],[3178,27,3202,29],[3178,29,3202,31],[3178,33,3202,35],[3178,34,3202,36,"auth"],[3178,38,3202,40],[3178,40,3202,42],[3178,56,3202,58],[3178,57,3202,59],[3178,91,3202,93],[3178,92,3202,94],[3179,6,3203,8],[3179,13,3203,15],[3179,17,3203,19],[3179,18,3203,20,"observer"],[3179,26,3203,28],[3179,27,3203,29,"next"],[3179,31,3203,33],[3179,32,3203,34,"bind"],[3179,36,3203,38],[3179,37,3203,39],[3179,41,3203,43],[3179,42,3203,44,"observer"],[3179,50,3203,52],[3179,51,3203,53],[3180,4,3204,4],[3181,2,3205,0],[3183,2,3207,0],[3184,0,3208,0],[3185,0,3209,0],[3186,0,3210,0],[3187,0,3211,0],[3188,0,3212,0],[3189,0,3213,0],[3190,0,3214,0],[3191,0,3215,0],[3192,0,3216,0],[3193,0,3217,0],[3194,0,3218,0],[3195,0,3219,0],[3196,0,3220,0],[3197,0,3221,0],[3198,0,3222,0],[3199,2,3223,0],[3199,6,3223,4,"externalJSProvider"],[3199,24,3223,22],[3199,27,3223,25],[3200,4,3224,4],[3200,10,3224,10,"loadJS"],[3200,16,3224,16,"loadJS"],[3200,17,3224,16],[3200,19,3224,19],[3201,6,3225,8],[3201,12,3225,14],[3201,16,3225,18,"Error"],[3201,21,3225,23],[3201,22,3225,24],[3201,55,3225,57],[3201,56,3225,58],[3202,4,3226,4],[3202,5,3226,5],[3203,4,3227,4,"recaptchaV2Script"],[3203,21,3227,21],[3203,23,3227,23],[3203,25,3227,25],[3204,4,3228,4,"recaptchaEnterpriseScript"],[3204,29,3228,29],[3204,31,3228,31],[3204,33,3228,33],[3205,4,3229,4,"gapiScript"],[3205,14,3229,14],[3205,16,3229,16],[3206,2,3230,0],[3206,3,3230,1],[3207,2,3231,0],[3207,11,3231,9,"_loadJS"],[3207,18,3231,16,"_loadJS"],[3207,19,3231,17,"url"],[3207,22,3231,20],[3207,24,3231,22],[3208,4,3232,4],[3208,11,3232,11,"externalJSProvider"],[3208,29,3232,29],[3208,30,3232,30,"loadJS"],[3208,36,3232,36],[3208,37,3232,37,"url"],[3208,40,3232,40],[3208,41,3232,41],[3209,2,3233,0],[3210,2,3234,0],[3210,11,3234,9,"_recaptchaEnterpriseScriptUrl"],[3210,40,3234,38,"_recaptchaEnterpriseScriptUrl"],[3210,41,3234,38],[3210,43,3234,41],[3211,4,3235,4],[3211,11,3235,11,"externalJSProvider"],[3211,29,3235,29],[3211,30,3235,30,"recaptchaEnterpriseScript"],[3211,55,3235,55],[3212,2,3236,0],[3214,2,3238,0],[3215,0,3239,0],[3216,0,3240,0],[3217,0,3241,0],[3218,0,3242,0],[3219,0,3243,0],[3220,0,3244,0],[3221,0,3245,0],[3222,0,3246,0],[3223,0,3247,0],[3224,0,3248,0],[3225,0,3249,0],[3226,0,3250,0],[3227,0,3251,0],[3228,0,3252,0],[3229,0,3253,0],[3230,2,3254,0],[3230,8,3254,6,"MockGreCAPTCHATopLevel"],[3230,30,3254,28],[3230,31,3254,29],[3231,4,3255,4,"constructor"],[3231,15,3255,15,"constructor"],[3231,16,3255,15],[3231,18,3255,18],[3232,6,3256,8],[3232,10,3256,12],[3232,11,3256,13,"enterprise"],[3232,21,3256,23],[3232,24,3256,26],[3232,28,3256,30,"MockGreCAPTCHA"],[3232,42,3256,44],[3232,43,3256,45],[3232,44,3256,46],[3233,4,3257,4],[3234,4,3258,4,"ready"],[3234,9,3258,9,"ready"],[3234,10,3258,10,"callback"],[3234,18,3258,18],[3234,20,3258,20],[3235,6,3259,8,"callback"],[3235,14,3259,16],[3235,15,3259,17],[3235,16,3259,18],[3236,4,3260,4],[3237,4,3261,4,"execute"],[3237,11,3261,11,"execute"],[3238,4,3262,4],[3239,4,3263,4,"_siteKey"],[3239,12,3263,12],[3239,14,3263,14,"_options"],[3239,22,3263,22],[3239,24,3263,24],[3240,6,3264,8],[3240,13,3264,15,"Promise"],[3240,20,3264,22],[3240,21,3264,23,"resolve"],[3240,28,3264,30],[3240,29,3264,31],[3240,36,3264,38],[3240,37,3264,39],[3241,4,3265,4],[3242,4,3266,4,"render"],[3242,10,3266,10,"render"],[3243,4,3267,4],[3244,4,3268,4,"_container"],[3244,14,3268,14],[3244,16,3268,16,"_parameters"],[3244,27,3268,27],[3244,29,3268,29],[3245,6,3269,8],[3245,13,3269,15],[3245,15,3269,17],[3246,4,3270,4],[3247,2,3271,0],[3248,2,3272,0],[3248,8,3272,6,"MockGreCAPTCHA"],[3248,22,3272,20],[3248,23,3272,21],[3249,4,3273,4,"ready"],[3249,9,3273,9,"ready"],[3249,10,3273,10,"callback"],[3249,18,3273,18],[3249,20,3273,20],[3250,6,3274,8,"callback"],[3250,14,3274,16],[3250,15,3274,17],[3250,16,3274,18],[3251,4,3275,4],[3252,4,3276,4,"execute"],[3252,11,3276,11,"execute"],[3253,4,3277,4],[3254,4,3278,4,"_siteKey"],[3254,12,3278,12],[3254,14,3278,14,"_options"],[3254,22,3278,22],[3254,24,3278,24],[3255,6,3279,8],[3255,13,3279,15,"Promise"],[3255,20,3279,22],[3255,21,3279,23,"resolve"],[3255,28,3279,30],[3255,29,3279,31],[3255,36,3279,38],[3255,37,3279,39],[3256,4,3280,4],[3257,4,3281,4,"render"],[3257,10,3281,10,"render"],[3258,4,3282,4],[3259,4,3283,4,"_container"],[3259,14,3283,14],[3259,16,3283,16,"_parameters"],[3259,27,3283,27],[3259,29,3283,29],[3260,6,3284,8],[3260,13,3284,15],[3260,15,3284,17],[3261,4,3285,4],[3262,2,3286,0],[3264,2,3288,0],[3265,2,3289,0],[3265,8,3289,6,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3265,42,3289,40],[3265,45,3289,43],[3265,67,3289,65],[3266,2,3290,0],[3266,8,3290,6,"FAKE_TOKEN"],[3266,18,3290,16],[3266,21,3290,19],[3266,35,3290,33],[3267,2,3291,0],[3267,8,3291,6,"RecaptchaEnterpriseVerifier"],[3267,35,3291,33],[3267,36,3291,34],[3268,4,3292,4],[3269,0,3293,0],[3270,0,3294,0],[3271,0,3295,0],[3272,0,3296,0],[3273,4,3297,4,"constructor"],[3273,15,3297,15,"constructor"],[3273,16,3297,16,"authExtern"],[3273,26,3297,26],[3273,28,3297,28],[3274,6,3298,8],[3275,0,3299,0],[3276,0,3300,0],[3277,6,3301,8],[3277,10,3301,12],[3277,11,3301,13,"type"],[3277,15,3301,17],[3277,18,3301,20,"RECAPTCHA_ENTERPRISE_VERIFIER_TYPE"],[3277,52,3301,54],[3278,6,3302,8],[3278,10,3302,12],[3278,11,3302,13,"auth"],[3278,15,3302,17],[3278,18,3302,20,"_castAuth"],[3278,27,3302,29],[3278,28,3302,30,"authExtern"],[3278,38,3302,40],[3278,39,3302,41],[3279,4,3303,4],[3280,4,3304,4],[3281,0,3305,0],[3282,0,3306,0],[3283,0,3307,0],[3284,0,3308,0],[3285,4,3309,4],[3285,10,3309,10,"verify"],[3285,16,3309,16,"verify"],[3285,17,3309,17,"action"],[3285,23,3309,23],[3285,26,3309,26],[3285,34,3309,34],[3285,36,3309,36,"forceRefresh"],[3285,48,3309,48],[3285,51,3309,51],[3285,56,3309,56],[3285,58,3309,58],[3286,6,3310,8],[3286,21,3310,23,"retrieveSiteKey"],[3286,36,3310,38,"retrieveSiteKey"],[3286,37,3310,39,"auth"],[3286,41,3310,43],[3286,43,3310,45],[3287,8,3311,12],[3287,12,3311,16],[3287,13,3311,17,"forceRefresh"],[3287,25,3311,29],[3287,27,3311,31],[3288,10,3312,16],[3288,14,3312,20,"auth"],[3288,18,3312,24],[3288,19,3312,25,"tenantId"],[3288,27,3312,33],[3288,31,3312,37],[3288,35,3312,41],[3288,39,3312,45,"auth"],[3288,43,3312,49],[3288,44,3312,50,"_agentRecaptchaConfig"],[3288,65,3312,71],[3288,69,3312,75],[3288,73,3312,79],[3288,75,3312,81],[3289,12,3313,20],[3289,19,3313,27,"auth"],[3289,23,3313,31],[3289,24,3313,32,"_agentRecaptchaConfig"],[3289,45,3313,53],[3289,46,3313,54,"siteKey"],[3289,53,3313,61],[3290,10,3314,16],[3291,10,3315,16],[3291,14,3315,20,"auth"],[3291,18,3315,24],[3291,19,3315,25,"tenantId"],[3291,27,3315,33],[3291,31,3315,37],[3291,35,3315,41],[3291,39,3316,20,"auth"],[3291,43,3316,24],[3291,44,3316,25,"_tenantRecaptchaConfigs"],[3291,67,3316,48],[3291,68,3316,49,"auth"],[3291,72,3316,53],[3291,73,3316,54,"tenantId"],[3291,81,3316,62],[3291,82,3316,63],[3291,87,3316,68,"undefined"],[3291,96,3316,77],[3291,98,3316,79],[3292,12,3317,20],[3292,19,3317,27,"auth"],[3292,23,3317,31],[3292,24,3317,32,"_tenantRecaptchaConfigs"],[3292,47,3317,55],[3292,48,3317,56,"auth"],[3292,52,3317,60],[3292,53,3317,61,"tenantId"],[3292,61,3317,69],[3292,62,3317,70],[3292,63,3317,71,"siteKey"],[3292,70,3317,78],[3293,10,3318,16],[3294,8,3319,12],[3295,8,3320,12],[3295,15,3320,19],[3295,19,3320,23,"Promise"],[3295,26,3320,30],[3295,27,3320,31],[3295,34,3320,38,"resolve"],[3295,41,3320,45],[3295,43,3320,47,"reject"],[3295,49,3320,53],[3295,54,3320,58],[3296,10,3321,16,"getRecaptchaConfig"],[3296,28,3321,34],[3296,29,3321,35,"auth"],[3296,33,3321,39],[3296,35,3321,41],[3297,12,3322,20,"clientType"],[3297,22,3322,30],[3297,24,3322,32],[3297,41,3322,49],[3297,42,3322,50],[3298,12,3323,20,"version"],[3298,19,3323,27],[3298,21,3323,29],[3298,43,3323,51],[3298,44,3323,52],[3299,10,3324,16],[3299,11,3324,17],[3299,12,3324,18],[3299,13,3325,21,"then"],[3299,17,3325,25],[3299,18,3325,26,"response"],[3299,26,3325,34],[3299,30,3325,38],[3300,12,3326,20],[3300,16,3326,24,"response"],[3300,24,3326,32],[3300,25,3326,33,"recaptchaKey"],[3300,37,3326,45],[3300,42,3326,50,"undefined"],[3300,51,3326,59],[3300,53,3326,61],[3301,14,3327,24,"reject"],[3301,20,3327,30],[3301,21,3327,31],[3301,25,3327,35,"Error"],[3301,30,3327,40],[3301,31,3327,41],[3301,72,3327,82],[3301,73,3327,83],[3301,74,3327,84],[3302,12,3328,20],[3302,13,3328,21],[3302,19,3329,25],[3303,14,3330,24],[3303,20,3330,30,"config"],[3303,26,3330,36],[3303,29,3330,39],[3303,33,3330,43,"RecaptchaConfig"],[3303,48,3330,58],[3303,49,3330,59,"response"],[3303,57,3330,67],[3303,58,3330,68],[3304,14,3331,24],[3304,18,3331,28,"auth"],[3304,22,3331,32],[3304,23,3331,33,"tenantId"],[3304,31,3331,41],[3304,35,3331,45],[3304,39,3331,49],[3304,41,3331,51],[3305,16,3332,28,"auth"],[3305,20,3332,32],[3305,21,3332,33,"_agentRecaptchaConfig"],[3305,42,3332,54],[3305,45,3332,57,"config"],[3305,51,3332,63],[3306,14,3333,24],[3306,15,3333,25],[3306,21,3334,29],[3307,16,3335,28,"auth"],[3307,20,3335,32],[3307,21,3335,33,"_tenantRecaptchaConfigs"],[3307,44,3335,56],[3307,45,3335,57,"auth"],[3307,49,3335,61],[3307,50,3335,62,"tenantId"],[3307,58,3335,70],[3307,59,3335,71],[3307,62,3335,74,"config"],[3307,68,3335,80],[3308,14,3336,24],[3309,14,3337,24],[3309,21,3337,31,"resolve"],[3309,28,3337,38],[3309,29,3337,39,"config"],[3309,35,3337,45],[3309,36,3337,46,"siteKey"],[3309,43,3337,53],[3309,44,3337,54],[3310,12,3338,20],[3311,10,3339,16],[3311,11,3339,17],[3311,12,3339,18],[3311,13,3340,21,"catch"],[3311,18,3340,26],[3311,19,3340,27,"error"],[3311,24,3340,32],[3311,28,3340,36],[3312,12,3341,20,"reject"],[3312,18,3341,26],[3312,19,3341,27,"error"],[3312,24,3341,32],[3312,25,3341,33],[3313,10,3342,16],[3313,11,3342,17],[3313,12,3342,18],[3314,8,3343,12],[3314,9,3343,13],[3314,10,3343,14],[3315,6,3344,8],[3316,6,3345,8],[3316,15,3345,17,"retrieveRecaptchaToken"],[3316,37,3345,39,"retrieveRecaptchaToken"],[3316,38,3345,40,"siteKey"],[3316,45,3345,47],[3316,47,3345,49,"resolve"],[3316,54,3345,56],[3316,56,3345,58,"reject"],[3316,62,3345,64],[3316,64,3345,66],[3317,8,3346,12],[3317,14,3346,18,"grecaptcha"],[3317,24,3346,28],[3317,27,3346,31,"window"],[3317,33,3346,37],[3317,34,3346,38,"grecaptcha"],[3317,44,3346,48],[3318,8,3347,12],[3318,12,3347,16,"isEnterprise"],[3318,24,3347,28],[3318,25,3347,29,"grecaptcha"],[3318,35,3347,39],[3318,36,3347,40],[3318,38,3347,42],[3319,10,3348,16,"grecaptcha"],[3319,20,3348,26],[3319,21,3348,27,"enterprise"],[3319,31,3348,37],[3319,32,3348,38,"ready"],[3319,37,3348,43],[3319,38,3348,44],[3319,44,3348,50],[3320,12,3349,20,"grecaptcha"],[3320,22,3349,30],[3320,23,3349,31,"enterprise"],[3320,33,3349,41],[3320,34,3350,25,"execute"],[3320,41,3350,32],[3320,42,3350,33,"siteKey"],[3320,49,3350,40],[3320,51,3350,42],[3321,14,3350,44,"action"],[3322,12,3350,51],[3322,13,3350,52],[3322,14,3350,53],[3322,15,3351,25,"then"],[3322,19,3351,29],[3322,20,3351,30,"token"],[3322,25,3351,35],[3322,29,3351,39],[3323,14,3352,24,"resolve"],[3323,21,3352,31],[3323,22,3352,32,"token"],[3323,27,3352,37],[3323,28,3352,38],[3324,12,3353,20],[3324,13,3353,21],[3324,14,3353,22],[3324,15,3354,25,"catch"],[3324,20,3354,30],[3324,21,3354,31],[3324,27,3354,37],[3325,14,3355,24,"resolve"],[3325,21,3355,31],[3325,22,3355,32,"FAKE_TOKEN"],[3325,32,3355,42],[3325,33,3355,43],[3326,12,3356,20],[3326,13,3356,21],[3326,14,3356,22],[3327,10,3357,16],[3327,11,3357,17],[3327,12,3357,18],[3328,8,3358,12],[3328,9,3358,13],[3328,15,3359,17],[3329,10,3360,16,"reject"],[3329,16,3360,22],[3329,17,3360,23,"Error"],[3329,22,3360,28],[3329,23,3360,29],[3329,63,3360,69],[3329,64,3360,70],[3329,65,3360,71],[3330,8,3361,12],[3331,6,3362,8],[3332,6,3363,8],[3333,6,3364,8],[3333,10,3364,12],[3333,14,3364,16],[3333,15,3364,17,"auth"],[3333,19,3364,21],[3333,20,3364,22,"settings"],[3333,28,3364,30],[3333,29,3364,31,"appVerificationDisabledForTesting"],[3333,62,3364,64],[3333,64,3364,66],[3334,8,3365,12],[3334,14,3365,18,"mockRecaptcha"],[3334,27,3365,31],[3334,30,3365,34],[3334,34,3365,38,"MockGreCAPTCHATopLevel"],[3334,56,3365,60],[3334,57,3365,61],[3334,58,3365,62],[3335,8,3366,12],[3335,15,3366,19,"mockRecaptcha"],[3335,28,3366,32],[3335,29,3366,33,"execute"],[3335,36,3366,40],[3335,37,3366,41],[3335,46,3366,50],[3335,48,3366,52],[3336,10,3366,54,"action"],[3336,16,3366,60],[3336,18,3366,62],[3337,8,3366,71],[3337,9,3366,72],[3337,10,3366,73],[3338,6,3367,8],[3339,6,3368,8],[3339,13,3368,15],[3339,17,3368,19,"Promise"],[3339,24,3368,26],[3339,25,3368,27],[3339,26,3368,28,"resolve"],[3339,33,3368,35],[3339,35,3368,37,"reject"],[3339,41,3368,43],[3339,46,3368,48],[3340,8,3369,12,"retrieveSiteKey"],[3340,23,3369,27],[3340,24,3369,28],[3340,28,3369,32],[3340,29,3369,33,"auth"],[3340,33,3369,37],[3340,34,3369,38],[3340,35,3370,17,"then"],[3340,39,3370,21],[3340,40,3370,22,"siteKey"],[3340,47,3370,29],[3340,51,3370,33],[3341,10,3371,16],[3341,14,3371,20],[3341,15,3371,21,"forceRefresh"],[3341,27,3371,33],[3341,31,3371,37,"isEnterprise"],[3341,43,3371,49],[3341,44,3371,50,"window"],[3341,50,3371,56],[3341,51,3371,57,"grecaptcha"],[3341,61,3371,67],[3341,62,3371,68],[3341,64,3371,70],[3342,12,3372,20,"retrieveRecaptchaToken"],[3342,34,3372,42],[3342,35,3372,43,"siteKey"],[3342,42,3372,50],[3342,44,3372,52,"resolve"],[3342,51,3372,59],[3342,53,3372,61,"reject"],[3342,59,3372,67],[3342,60,3372,68],[3343,10,3373,16],[3343,11,3373,17],[3343,17,3374,21],[3344,12,3375,20],[3344,22,3375,55],[3345,14,3376,24,"reject"],[3345,20,3376,30],[3345,21,3376,31],[3345,25,3376,35,"Error"],[3345,30,3376,40],[3345,31,3376,41],[3345,79,3376,89],[3345,80,3376,90],[3345,81,3376,91],[3346,14,3377,24],[3347,12,3378,20],[3348,12,3379,20],[3348,16,3379,24,"url"],[3348,19,3379,27],[3348,22,3379,30,"_recaptchaEnterpriseScriptUrl"],[3348,51,3379,59],[3348,52,3379,60],[3348,53,3379,61],[3349,12,3380,20],[3349,16,3380,24,"url"],[3349,19,3380,27],[3349,20,3380,28,"length"],[3349,26,3380,34],[3349,31,3380,39],[3349,32,3380,40],[3349,34,3380,42],[3350,14,3381,24,"url"],[3350,17,3381,27],[3350,21,3381,31,"siteKey"],[3350,28,3381,38],[3351,12,3382,20],[3352,12,3383,20,"_loadJS"],[3352,19,3383,27],[3352,20,3383,28,"url"],[3352,23,3383,31],[3352,24,3383,32],[3352,25,3384,25,"then"],[3352,29,3384,29],[3352,30,3384,30],[3352,36,3384,36],[3353,14,3385,24,"retrieveRecaptchaToken"],[3353,36,3385,46],[3353,37,3385,47,"siteKey"],[3353,44,3385,54],[3353,46,3385,56,"resolve"],[3353,53,3385,63],[3353,55,3385,65,"reject"],[3353,61,3385,71],[3353,62,3385,72],[3354,12,3386,20],[3354,13,3386,21],[3354,14,3386,22],[3354,15,3387,25,"catch"],[3354,20,3387,30],[3354,21,3387,31,"error"],[3354,26,3387,36],[3354,30,3387,40],[3355,14,3388,24,"reject"],[3355,20,3388,30],[3355,21,3388,31,"error"],[3355,26,3388,36],[3355,27,3388,37],[3356,12,3389,20],[3356,13,3389,21],[3356,14,3389,22],[3357,10,3390,16],[3358,8,3391,12],[3358,9,3391,13],[3358,10,3391,14],[3358,11,3392,17,"catch"],[3358,16,3392,22],[3358,17,3392,23,"error"],[3358,22,3392,28],[3358,26,3392,32],[3359,10,3393,16,"reject"],[3359,16,3393,22],[3359,17,3393,23,"error"],[3359,22,3393,28],[3359,23,3393,29],[3360,8,3394,12],[3360,9,3394,13],[3360,10,3394,14],[3361,6,3395,8],[3361,7,3395,9],[3361,8,3395,10],[3362,4,3396,4],[3363,2,3397,0],[3364,2,3398,0],[3364,17,3398,15,"injectRecaptchaFields"],[3364,38,3398,36,"injectRecaptchaFields"],[3364,39,3398,37,"auth"],[3364,43,3398,41],[3364,45,3398,43,"request"],[3364,52,3398,50],[3364,54,3398,52,"action"],[3364,60,3398,58],[3364,62,3398,60,"isCaptchaResp"],[3364,75,3398,73],[3364,78,3398,76],[3364,83,3398,81],[3364,85,3398,83,"isFakeToken"],[3364,96,3398,94],[3364,99,3398,97],[3364,104,3398,102],[3364,106,3398,104],[3365,4,3399,4],[3365,10,3399,10,"verifier"],[3365,18,3399,18],[3365,21,3399,21],[3365,25,3399,25,"RecaptchaEnterpriseVerifier"],[3365,52,3399,52],[3365,53,3399,53,"auth"],[3365,57,3399,57],[3365,58,3399,58],[3366,4,3400,4],[3366,8,3400,8,"captchaResponse"],[3366,23,3400,23],[3367,4,3401,4],[3367,8,3401,8,"isFakeToken"],[3367,19,3401,19],[3367,21,3401,21],[3368,6,3402,8,"captchaResponse"],[3368,21,3402,23],[3368,24,3402,26,"FAKE_TOKEN"],[3368,34,3402,36],[3369,4,3403,4],[3369,5,3403,5],[3369,11,3404,9],[3370,6,3405,8],[3370,10,3405,12],[3371,8,3406,12,"captchaResponse"],[3371,23,3406,27],[3371,26,3406,30],[3371,32,3406,36,"verifier"],[3371,40,3406,44],[3371,41,3406,45,"verify"],[3371,47,3406,51],[3371,48,3406,52,"action"],[3371,54,3406,58],[3371,55,3406,59],[3372,6,3407,8],[3372,7,3407,9],[3372,8,3408,8],[3372,15,3408,15,"error"],[3372,20,3408,20],[3372,22,3408,22],[3373,8,3409,12,"captchaResponse"],[3373,23,3409,27],[3373,26,3409,30],[3373,32,3409,36,"verifier"],[3373,40,3409,44],[3373,41,3409,45,"verify"],[3373,47,3409,51],[3373,48,3409,52,"action"],[3373,54,3409,58],[3373,56,3409,60],[3373,60,3409,64],[3373,61,3409,65],[3374,6,3410,8],[3375,4,3411,4],[3376,4,3412,4],[3376,10,3412,10,"newRequest"],[3376,20,3412,20],[3376,23,3412,23],[3377,6,3412,25],[3377,9,3412,28,"request"],[3378,4,3412,36],[3378,5,3412,37],[3379,4,3413,4],[3379,8,3413,8,"action"],[3379,14,3413,14],[3379,19,3413,19],[3379,37,3413,37],[3379,38,3413,38],[3379,86,3414,8,"action"],[3379,92,3414,14],[3379,97,3414,19],[3379,111,3414,33],[3379,112,3414,34],[3379,154,3414,76],[3380,6,3415,8],[3380,10,3415,12],[3380,31,3415,33],[3380,35,3415,37,"newRequest"],[3380,45,3415,47],[3380,47,3415,49],[3381,8,3416,12],[3381,14,3416,18,"phoneNumber"],[3381,25,3416,29],[3381,28,3416,32,"newRequest"],[3381,38,3416,42],[3381,39,3416,43,"phoneEnrollmentInfo"],[3381,58,3416,62],[3381,59,3416,63,"phoneNumber"],[3381,70,3416,74],[3382,8,3417,12],[3382,14,3417,18,"recaptchaToken"],[3382,28,3417,32],[3382,31,3417,35,"newRequest"],[3382,41,3417,45],[3382,42,3417,46,"phoneEnrollmentInfo"],[3382,61,3417,65],[3382,62,3417,66,"recaptchaToken"],[3382,76,3417,80],[3383,8,3418,12,"Object"],[3383,14,3418,18],[3383,15,3418,19,"assign"],[3383,21,3418,25],[3383,22,3418,26,"newRequest"],[3383,32,3418,36],[3383,34,3418,38],[3384,10,3419,16],[3384,31,3419,37],[3384,33,3419,39],[3385,12,3420,20,"phoneNumber"],[3385,23,3420,31],[3386,12,3421,20,"recaptchaToken"],[3386,26,3421,34],[3387,12,3422,20,"captchaResponse"],[3387,27,3422,35],[3388,12,3423,20],[3388,24,3423,32],[3388,26,3423,34],[3388,43,3423,51],[3388,44,3423,52],[3389,12,3424,20],[3389,30,3424,38],[3389,32,3424,40],[3389,54,3424,62],[3389,55,3424,63],[3390,10,3425,16],[3391,8,3426,12],[3391,9,3426,13],[3391,10,3426,14],[3392,6,3427,8],[3392,7,3427,9],[3392,13,3428,13],[3392,17,3428,17],[3392,34,3428,34],[3392,38,3428,38,"newRequest"],[3392,48,3428,48],[3392,50,3428,50],[3393,8,3429,12],[3393,14,3429,18,"recaptchaToken"],[3393,28,3429,32],[3393,31,3429,35,"newRequest"],[3393,41,3429,45],[3393,42,3429,46,"phoneSignInInfo"],[3393,57,3429,61],[3393,58,3429,62,"recaptchaToken"],[3393,72,3429,76],[3394,8,3430,12,"Object"],[3394,14,3430,18],[3394,15,3430,19,"assign"],[3394,21,3430,25],[3394,22,3430,26,"newRequest"],[3394,32,3430,36],[3394,34,3430,38],[3395,10,3431,16],[3395,27,3431,33],[3395,29,3431,35],[3396,12,3432,20,"recaptchaToken"],[3396,26,3432,34],[3397,12,3433,20,"captchaResponse"],[3397,27,3433,35],[3398,12,3434,20],[3398,24,3434,32],[3398,26,3434,34],[3398,43,3434,51],[3398,44,3434,52],[3399,12,3435,20],[3399,30,3435,38],[3399,32,3435,40],[3399,54,3435,62],[3399,55,3435,63],[3400,10,3436,16],[3401,8,3437,12],[3401,9,3437,13],[3401,10,3437,14],[3402,6,3438,8],[3403,6,3439,8],[3403,13,3439,15,"newRequest"],[3403,23,3439,25],[3404,4,3440,4],[3405,4,3441,4],[3405,8,3441,8],[3405,9,3441,9,"isCaptchaResp"],[3405,22,3441,22],[3405,24,3441,24],[3406,6,3442,8,"Object"],[3406,12,3442,14],[3406,13,3442,15,"assign"],[3406,19,3442,21],[3406,20,3442,22,"newRequest"],[3406,30,3442,32],[3406,32,3442,34],[3407,8,3442,36,"captchaResponse"],[3408,6,3442,52],[3408,7,3442,53],[3408,8,3442,54],[3409,4,3443,4],[3409,5,3443,5],[3409,11,3444,9],[3410,6,3445,8,"Object"],[3410,12,3445,14],[3410,13,3445,15,"assign"],[3410,19,3445,21],[3410,20,3445,22,"newRequest"],[3410,30,3445,32],[3410,32,3445,34],[3411,8,3445,36],[3411,21,3445,49],[3411,23,3445,51,"captchaResponse"],[3412,6,3445,67],[3412,7,3445,68],[3412,8,3445,69],[3413,4,3446,4],[3414,4,3447,4,"Object"],[3414,10,3447,10],[3414,11,3447,11,"assign"],[3414,17,3447,17],[3414,18,3447,18,"newRequest"],[3414,28,3447,28],[3414,30,3447,30],[3415,6,3447,32],[3415,18,3447,44],[3415,20,3447,46],[3415,37,3447,63],[3415,38,3447,64],[3416,4,3447,94],[3416,5,3447,95],[3416,6,3447,96],[3417,4,3448,4,"Object"],[3417,10,3448,10],[3417,11,3448,11,"assign"],[3417,17,3448,17],[3417,18,3448,18,"newRequest"],[3417,28,3448,28],[3417,30,3448,30],[3418,6,3449,8],[3418,24,3449,26],[3418,26,3449,28],[3418,48,3449,50],[3418,49,3449,51],[3419,4,3450,4],[3419,5,3450,5],[3419,6,3450,6],[3420,4,3451,4],[3420,11,3451,11,"newRequest"],[3420,21,3451,21],[3421,2,3452,0],[3422,2,3453,0],[3422,17,3453,15,"handleRecaptchaFlow"],[3422,36,3453,34,"handleRecaptchaFlow"],[3422,37,3453,35,"authInstance"],[3422,49,3453,47],[3422,51,3453,49,"request"],[3422,58,3453,56],[3422,60,3453,58,"actionName"],[3422,70,3453,68],[3422,72,3453,70,"actionMethod"],[3422,84,3453,82],[3422,86,3453,84,"recaptchaAuthProvider"],[3422,107,3453,105],[3422,109,3453,107],[3423,4,3454,4],[3423,8,3454,8,"recaptchaAuthProvider"],[3423,29,3454,29],[3423,34,3454,34],[3423,59,3454,59],[3423,60,3454,60],[3423,113,3454,113],[3424,6,3455,8],[3424,10,3455,12,"authInstance"],[3424,22,3455,24],[3424,23,3456,13,"_getRecaptchaConfig"],[3424,42,3456,32],[3424,43,3456,33],[3424,44,3456,34],[3424,46,3457,14,"isProviderEnabled"],[3424,63,3457,31],[3424,64,3457,32],[3424,89,3457,57],[3424,90,3457,58],[3424,141,3457,109],[3424,142,3457,110],[3424,144,3457,112],[3425,8,3458,12],[3425,14,3458,18,"requestWithRecaptcha"],[3425,34,3458,38],[3425,37,3458,41],[3425,43,3458,47,"injectRecaptchaFields"],[3425,64,3458,68],[3425,65,3458,69,"authInstance"],[3425,77,3458,81],[3425,79,3458,83,"request"],[3425,86,3458,90],[3425,88,3458,92,"actionName"],[3425,98,3458,102],[3425,100,3458,104,"actionName"],[3425,110,3458,114],[3425,115,3458,119],[3425,127,3458,131],[3425,128,3458,132],[3425,166,3458,170],[3425,167,3458,171],[3426,8,3459,12],[3426,15,3459,19,"actionMethod"],[3426,27,3459,31],[3426,28,3459,32,"authInstance"],[3426,40,3459,44],[3426,42,3459,46,"requestWithRecaptcha"],[3426,62,3459,66],[3426,63,3459,67],[3427,6,3460,8],[3427,7,3460,9],[3427,13,3461,13],[3428,8,3462,12],[3428,15,3462,19,"actionMethod"],[3428,27,3462,31],[3428,28,3462,32,"authInstance"],[3428,40,3462,44],[3428,42,3462,46,"request"],[3428,49,3462,53],[3428,50,3462,54],[3428,51,3462,55,"catch"],[3428,56,3462,60],[3428,57,3462,61],[3428,63,3462,68,"error"],[3428,68,3462,73],[3428,72,3462,78],[3429,10,3463,16],[3429,14,3463,20,"error"],[3429,19,3463,25],[3429,20,3463,26,"code"],[3429,24,3463,30],[3429,29,3463,35],[3429,37,3463,43],[3429,62,3463,68],[3429,63,3463,69],[3429,108,3463,114],[3429,110,3463,116],[3430,12,3464,20,"console"],[3430,19,3464,27],[3430,20,3464,28,"log"],[3430,23,3464,31],[3430,24,3464,32],[3430,27,3464,35,"actionName"],[3430,37,3464,45],[3430,163,3464,171],[3430,164,3464,172],[3431,12,3465,20],[3431,18,3465,26,"requestWithRecaptcha"],[3431,38,3465,46],[3431,41,3465,49],[3431,47,3465,55,"injectRecaptchaFields"],[3431,68,3465,76],[3431,69,3465,77,"authInstance"],[3431,81,3465,89],[3431,83,3465,91,"request"],[3431,90,3465,98],[3431,92,3465,100,"actionName"],[3431,102,3465,110],[3431,104,3465,112,"actionName"],[3431,114,3465,122],[3431,119,3465,127],[3431,131,3465,139],[3431,132,3465,140],[3431,170,3465,178],[3431,171,3465,179],[3432,12,3466,20],[3432,19,3466,27,"actionMethod"],[3432,31,3466,39],[3432,32,3466,40,"authInstance"],[3432,44,3466,52],[3432,46,3466,54,"requestWithRecaptcha"],[3432,66,3466,74],[3432,67,3466,75],[3433,10,3467,16],[3433,11,3467,17],[3433,17,3468,21],[3434,12,3469,20],[3434,19,3469,27,"Promise"],[3434,26,3469,34],[3434,27,3469,35,"reject"],[3434,33,3469,41],[3434,34,3469,42,"error"],[3434,39,3469,47],[3434,40,3469,48],[3435,10,3470,16],[3436,8,3471,12],[3436,9,3471,13],[3436,10,3471,14],[3437,6,3472,8],[3438,4,3473,4],[3438,5,3473,5],[3438,11,3474,9],[3438,15,3474,13,"recaptchaAuthProvider"],[3438,36,3474,34],[3438,41,3474,39],[3438,57,3474,55],[3438,58,3474,56],[3438,102,3474,100],[3439,6,3475,8],[3439,10,3475,12,"authInstance"],[3439,22,3475,24],[3439,23,3476,13,"_getRecaptchaConfig"],[3439,42,3476,32],[3439,43,3476,33],[3439,44,3476,34],[3439,46,3477,14,"isProviderEnabled"],[3439,63,3477,31],[3439,64,3477,32],[3439,80,3477,48],[3439,81,3477,49],[3439,123,3477,91],[3439,124,3477,92],[3439,126,3477,94],[3440,8,3478,12],[3440,14,3478,18,"requestWithRecaptcha"],[3440,34,3478,38],[3440,37,3478,41],[3440,43,3478,47,"injectRecaptchaFields"],[3440,64,3478,68],[3440,65,3478,69,"authInstance"],[3440,77,3478,81],[3440,79,3478,83,"request"],[3440,86,3478,90],[3440,88,3478,92,"actionName"],[3440,98,3478,102],[3440,99,3478,103],[3441,8,3479,12],[3441,15,3479,19,"actionMethod"],[3441,27,3479,31],[3441,28,3479,32,"authInstance"],[3441,40,3479,44],[3441,42,3479,46,"requestWithRecaptcha"],[3441,62,3479,66],[3441,63,3479,67],[3441,64,3479,68,"catch"],[3441,69,3479,73],[3441,70,3479,74],[3441,76,3479,81,"error"],[3441,81,3479,86],[3441,85,3479,91],[3442,10,3480,16],[3442,14,3480,20,"authInstance"],[3442,26,3480,32],[3442,27,3481,21,"_getRecaptchaConfig"],[3442,46,3481,40],[3442,47,3481,41],[3442,48,3481,42],[3442,50,3482,22,"getProviderEnforcementState"],[3442,77,3482,49],[3442,78,3482,50],[3442,94,3482,66],[3442,95,3482,67],[3442,137,3482,109],[3442,138,3482,110],[3442,143,3482,115],[3442,150,3482,122],[3442,151,3482,123],[3442,181,3482,153],[3443,12,3483,20],[3444,12,3484,20],[3444,16,3484,24,"error"],[3444,21,3484,29],[3444,22,3484,30,"code"],[3444,26,3484,34],[3444,31,3484,39],[3444,39,3484,47],[3444,64,3484,72],[3444,65,3484,73],[3444,110,3484,118],[3444,114,3485,24,"error"],[3444,119,3485,29],[3444,120,3485,30,"code"],[3444,124,3485,34],[3444,129,3485,39],[3444,137,3485,47],[3444,161,3485,71],[3444,162,3485,72],[3444,206,3485,116],[3444,208,3485,118],[3445,14,3486,24,"console"],[3445,21,3486,31],[3445,22,3486,32,"log"],[3445,25,3486,35],[3445,26,3486,36],[3445,136,3486,146,"actionName"],[3445,146,3486,156],[3445,154,3486,164],[3445,155,3486,165],[3446,14,3487,24],[3447,14,3488,24],[3448,14,3489,24],[3449,14,3490,24],[3449,20,3490,30,"requestWithRecaptchaFields"],[3449,46,3490,56],[3449,49,3490,59],[3449,55,3490,65,"injectRecaptchaFields"],[3449,76,3490,86],[3449,77,3490,87,"authInstance"],[3449,89,3490,99],[3449,91,3490,101,"request"],[3449,98,3490,108],[3449,100,3490,110,"actionName"],[3449,110,3490,120],[3449,112,3490,122],[3449,117,3490,127],[3450,14,3490,129],[3451,14,3491,24],[3451,18,3491,28],[3451,19,3491,29],[3452,14,3492,24],[3452,15,3492,25],[3453,14,3493,24],[3454,14,3494,24],[3454,21,3494,31,"actionMethod"],[3454,33,3494,43],[3454,34,3494,44,"authInstance"],[3454,46,3494,56],[3454,48,3494,58,"requestWithRecaptchaFields"],[3454,74,3494,84],[3454,75,3494,85],[3455,12,3495,20],[3456,10,3496,16],[3457,10,3497,16],[3458,10,3498,16],[3458,17,3498,23,"Promise"],[3458,24,3498,30],[3458,25,3498,31,"reject"],[3458,31,3498,37],[3458,32,3498,38,"error"],[3458,37,3498,43],[3458,38,3498,44],[3459,8,3499,12],[3459,9,3499,13],[3459,10,3499,14],[3460,6,3500,8],[3460,7,3500,9],[3460,13,3501,13],[3461,8,3502,12],[3462,8,3503,12],[3462,14,3503,18,"requestWithRecaptchaFields"],[3462,40,3503,44],[3462,43,3503,47],[3462,49,3503,53,"injectRecaptchaFields"],[3462,70,3503,74],[3462,71,3503,75,"authInstance"],[3462,83,3503,87],[3462,85,3503,89,"request"],[3462,92,3503,96],[3462,94,3503,98,"actionName"],[3462,104,3503,108],[3462,106,3503,110],[3462,111,3503,115],[3463,8,3503,117],[3464,8,3504,12],[3464,12,3504,16],[3464,13,3504,17],[3465,8,3505,12],[3465,9,3505,13],[3466,8,3506,12],[3467,8,3507,12],[3467,15,3507,19,"actionMethod"],[3467,27,3507,31],[3467,28,3507,32,"authInstance"],[3467,40,3507,44],[3467,42,3507,46,"requestWithRecaptchaFields"],[3467,68,3507,72],[3467,69,3507,73],[3468,6,3508,8],[3469,4,3509,4],[3469,5,3509,5],[3469,11,3510,9],[3470,6,3511,8],[3470,13,3511,15,"Promise"],[3470,20,3511,22],[3470,21,3511,23,"reject"],[3470,27,3511,29],[3470,28,3511,30,"recaptchaAuthProvider"],[3470,49,3511,51],[3470,52,3511,54],[3470,81,3511,83],[3470,82,3511,84],[3471,4,3512,4],[3472,2,3513,0],[3473,2,3514,0],[3473,17,3514,15,"_initializeRecaptchaConfig"],[3473,43,3514,41,"_initializeRecaptchaConfig"],[3473,44,3514,42,"auth"],[3473,48,3514,46],[3473,50,3514,48],[3474,4,3515,4],[3474,10,3515,10,"authInternal"],[3474,22,3515,22],[3474,25,3515,25,"_castAuth"],[3474,34,3515,34],[3474,35,3515,35,"auth"],[3474,39,3515,39],[3474,40,3515,40],[3475,4,3516,4],[3475,10,3516,10,"response"],[3475,18,3516,18],[3475,21,3516,21],[3475,27,3516,27,"getRecaptchaConfig"],[3475,45,3516,45],[3475,46,3516,46,"authInternal"],[3475,58,3516,58],[3475,60,3516,60],[3476,6,3517,8,"clientType"],[3476,16,3517,18],[3476,18,3517,20],[3476,35,3517,37],[3476,36,3517,38],[3477,6,3518,8,"version"],[3477,13,3518,15],[3477,15,3518,17],[3477,37,3518,39],[3477,38,3518,40],[3478,4,3519,4],[3478,5,3519,5],[3478,6,3519,6],[3479,4,3520,4],[3479,10,3520,10,"config"],[3479,16,3520,16],[3479,19,3520,19],[3479,23,3520,23,"RecaptchaConfig"],[3479,38,3520,38],[3479,39,3520,39,"response"],[3479,47,3520,47],[3479,48,3520,48],[3480,4,3521,4],[3480,8,3521,8,"authInternal"],[3480,20,3521,20],[3480,21,3521,21,"tenantId"],[3480,29,3521,29],[3480,33,3521,33],[3480,37,3521,37],[3480,39,3521,39],[3481,6,3522,8,"authInternal"],[3481,18,3522,20],[3481,19,3522,21,"_agentRecaptchaConfig"],[3481,40,3522,42],[3481,43,3522,45,"config"],[3481,49,3522,51],[3482,4,3523,4],[3482,5,3523,5],[3482,11,3524,9],[3483,6,3525,8,"authInternal"],[3483,18,3525,20],[3483,19,3525,21,"_tenantRecaptchaConfigs"],[3483,42,3525,44],[3483,43,3525,45,"authInternal"],[3483,55,3525,57],[3483,56,3525,58,"tenantId"],[3483,64,3525,66],[3483,65,3525,67],[3483,68,3525,70,"config"],[3483,74,3525,76],[3484,4,3526,4],[3485,4,3527,4],[3485,8,3527,8,"config"],[3485,14,3527,14],[3485,15,3527,15,"isAnyProviderEnabled"],[3485,35,3527,35],[3485,36,3527,36],[3485,37,3527,37],[3485,39,3527,39],[3486,6,3528,8],[3486,12,3528,14,"verifier"],[3486,20,3528,22],[3486,23,3528,25],[3486,27,3528,29,"RecaptchaEnterpriseVerifier"],[3486,54,3528,56],[3486,55,3528,57,"authInternal"],[3486,67,3528,69],[3486,68,3528,70],[3487,6,3529,8],[3487,11,3529,13,"verifier"],[3487,19,3529,21],[3487,20,3529,22,"verify"],[3487,26,3529,28],[3487,27,3529,29],[3487,28,3529,30],[3488,4,3530,4],[3489,2,3531,0],[3491,2,3533,0],[3492,0,3534,0],[3493,0,3535,0],[3494,0,3536,0],[3495,0,3537,0],[3496,0,3538,0],[3497,0,3539,0],[3498,0,3540,0],[3499,0,3541,0],[3500,0,3542,0],[3501,0,3543,0],[3502,0,3544,0],[3503,0,3545,0],[3504,0,3546,0],[3505,0,3547,0],[3506,0,3548,0],[3507,2,3549,0],[3508,0,3550,0],[3509,0,3551,0],[3510,0,3552,0],[3511,0,3553,0],[3512,0,3554,0],[3513,0,3555,0],[3514,0,3556,0],[3515,0,3557,0],[3516,0,3558,0],[3517,0,3559,0],[3518,0,3560,0],[3519,0,3561,0],[3520,0,3562,0],[3521,0,3563,0],[3522,0,3564,0],[3523,0,3565,0],[3524,0,3566,0],[3525,0,3567,0],[3526,0,3568,0],[3527,0,3569,0],[3528,0,3570,0],[3529,0,3571,0],[3530,0,3572,0],[3531,0,3573,0],[3532,2,3574,0],[3532,11,3574,9,"initializeAuth"],[3532,25,3574,23,"initializeAuth"],[3532,26,3574,24,"app"],[3532,29,3574,27],[3532,31,3574,29,"deps"],[3532,35,3574,33],[3532,37,3574,35],[3533,4,3575,4],[3533,10,3575,10,"provider"],[3533,18,3575,18],[3533,21,3575,21],[3533,25,3575,21,"_getProvider"],[3533,42,3575,33],[3533,44,3575,34,"app"],[3533,47,3575,37],[3533,49,3575,39],[3533,55,3575,45],[3533,56,3575,46],[3534,4,3576,4],[3534,8,3576,8,"provider"],[3534,16,3576,16],[3534,17,3576,17,"isInitialized"],[3534,30,3576,30],[3534,31,3576,31],[3534,32,3576,32],[3534,34,3576,34],[3535,6,3577,8],[3535,12,3577,14,"auth"],[3535,16,3577,18],[3535,19,3577,21,"provider"],[3535,27,3577,29],[3535,28,3577,30,"getImmediate"],[3535,40,3577,42],[3535,41,3577,43],[3535,42,3577,44],[3536,6,3578,8],[3536,12,3578,14,"initialOptions"],[3536,26,3578,28],[3536,29,3578,31,"provider"],[3536,37,3578,39],[3536,38,3578,40,"getOptions"],[3536,48,3578,50],[3536,49,3578,51],[3536,50,3578,52],[3537,6,3579,8],[3537,10,3579,12],[3537,14,3579,12,"deepEqual"],[3537,29,3579,21],[3537,31,3579,22,"initialOptions"],[3537,45,3579,36],[3537,47,3579,38,"deps"],[3537,51,3579,42],[3537,55,3579,46],[3537,56,3579,47],[3537,57,3579,48],[3537,58,3579,49],[3537,60,3579,51],[3538,8,3580,12],[3538,15,3580,19,"auth"],[3538,19,3580,23],[3539,6,3581,8],[3539,7,3581,9],[3539,13,3582,13],[3540,8,3583,12,"_fail"],[3540,13,3583,17],[3540,14,3583,18,"auth"],[3540,18,3583,22],[3540,20,3583,24],[3540,41,3583,45],[3540,42,3583,46],[3540,81,3583,85],[3540,82,3583,86],[3541,6,3584,8],[3542,4,3585,4],[3543,4,3586,4],[3543,10,3586,10,"auth"],[3543,14,3586,14],[3543,17,3586,17,"provider"],[3543,25,3586,25],[3543,26,3586,26,"initialize"],[3543,36,3586,36],[3543,37,3586,37],[3544,6,3586,39,"options"],[3544,13,3586,46],[3544,15,3586,48,"deps"],[3545,4,3586,53],[3545,5,3586,54],[3545,6,3586,55],[3546,4,3587,4],[3546,11,3587,11,"auth"],[3546,15,3587,15],[3547,2,3588,0],[3548,2,3589,0],[3548,11,3589,9,"_initializeAuthInstance"],[3548,34,3589,32,"_initializeAuthInstance"],[3548,35,3589,33,"auth"],[3548,39,3589,37],[3548,41,3589,39,"deps"],[3548,45,3589,43],[3548,47,3589,45],[3549,4,3590,4],[3549,10,3590,10,"persistence"],[3549,21,3590,21],[3549,24,3590,24,"deps"],[3549,28,3590,28],[3549,30,3590,30,"persistence"],[3549,41,3590,41],[3549,45,3590,45],[3549,47,3590,47],[3550,4,3591,4],[3550,10,3591,10,"hierarchy"],[3550,19,3591,19],[3550,22,3591,22],[3550,23,3591,23,"Array"],[3550,28,3591,28],[3550,29,3591,29,"isArray"],[3550,36,3591,36],[3550,37,3591,37,"persistence"],[3550,48,3591,48],[3550,49,3591,49],[3550,52,3591,52,"persistence"],[3550,63,3591,63],[3550,66,3591,66],[3550,67,3591,67,"persistence"],[3550,78,3591,78],[3550,79,3591,79],[3550,81,3591,81,"map"],[3550,84,3591,84],[3550,85,3591,85,"_getInstance"],[3550,97,3591,97],[3550,98,3591,98],[3551,4,3592,4],[3551,8,3592,8,"deps"],[3551,12,3592,12],[3551,14,3592,14,"errorMap"],[3551,22,3592,22],[3551,24,3592,24],[3552,6,3593,8,"auth"],[3552,10,3593,12],[3552,11,3593,13,"_updateErrorMap"],[3552,26,3593,28],[3552,27,3593,29,"deps"],[3552,31,3593,33],[3552,32,3593,34,"errorMap"],[3552,40,3593,42],[3552,41,3593,43],[3553,4,3594,4],[3554,4,3595,4],[3555,4,3596,4],[3556,4,3597,4],[3557,4,3598,4,"auth"],[3557,8,3598,8],[3557,9,3598,9,"_initializeWithPersistence"],[3557,35,3598,35],[3557,36,3598,36,"hierarchy"],[3557,45,3598,45],[3557,47,3598,47,"deps"],[3557,51,3598,51],[3557,53,3598,53,"popupRedirectResolver"],[3557,74,3598,74],[3557,75,3598,75],[3558,2,3599,0],[3560,2,3601,0],[3561,0,3602,0],[3562,0,3603,0],[3563,0,3604,0],[3564,0,3605,0],[3565,0,3606,0],[3566,0,3607,0],[3567,0,3608,0],[3568,0,3609,0],[3569,0,3610,0],[3570,0,3611,0],[3571,0,3612,0],[3572,0,3613,0],[3573,0,3614,0],[3574,0,3615,0],[3575,0,3616,0],[3576,0,3617,0],[3577,0,3618,0],[3578,0,3619,0],[3579,0,3620,0],[3580,0,3621,0],[3581,0,3622,0],[3582,2,3623,0],[3582,11,3623,9,"connectAuthEmulator"],[3582,30,3623,28,"connectAuthEmulator"],[3582,31,3623,29,"auth"],[3582,35,3623,33],[3582,37,3623,35,"url"],[3582,40,3623,38],[3582,42,3623,40,"options"],[3582,49,3623,47],[3582,51,3623,49],[3583,4,3624,4],[3583,10,3624,10,"authInternal"],[3583,22,3624,22],[3583,25,3624,25,"_castAuth"],[3583,34,3624,34],[3583,35,3624,35,"auth"],[3583,39,3624,39],[3583,40,3624,40],[3584,4,3625,4,"_assert"],[3584,11,3625,11],[3584,12,3625,12],[3584,26,3625,26],[3584,27,3625,27,"test"],[3584,31,3625,31],[3584,32,3625,32,"url"],[3584,35,3625,35],[3584,36,3625,36],[3584,38,3625,38,"authInternal"],[3584,50,3625,50],[3584,52,3625,52],[3584,77,3625,77],[3584,78,3625,78],[3584,121,3625,121],[3584,122,3625,122],[3585,4,3626,4],[3585,10,3626,10,"disableWarnings"],[3585,25,3626,25],[3585,28,3626,28],[3585,29,3626,29],[3585,30,3626,30,"options"],[3585,37,3626,37],[3585,39,3626,39,"disableWarnings"],[3585,54,3626,54],[3586,4,3627,4],[3586,10,3627,10,"protocol"],[3586,18,3627,18],[3586,21,3627,21,"extractProtocol"],[3586,36,3627,36],[3586,37,3627,37,"url"],[3586,40,3627,40],[3586,41,3627,41],[3587,4,3628,4],[3587,10,3628,10],[3588,6,3628,12,"host"],[3588,10,3628,16],[3589,6,3628,18,"port"],[3590,4,3628,23],[3590,5,3628,24],[3590,8,3628,27,"extractHostAndPort"],[3590,26,3628,45],[3590,27,3628,46,"url"],[3590,30,3628,49],[3590,31,3628,50],[3591,4,3629,4],[3591,10,3629,10,"portStr"],[3591,17,3629,17],[3591,20,3629,20,"port"],[3591,24,3629,24],[3591,29,3629,29],[3591,33,3629,33],[3591,36,3629,36],[3591,38,3629,38],[3591,41,3629,41],[3591,45,3629,45,"port"],[3591,49,3629,49],[3591,51,3629,51],[3592,4,3630,4],[3593,4,3631,4],[3593,10,3631,10,"emulator"],[3593,18,3631,18],[3593,21,3631,21],[3594,6,3631,23,"url"],[3594,9,3631,26],[3594,11,3631,28],[3594,14,3631,31,"protocol"],[3594,22,3631,39],[3594,27,3631,44,"host"],[3594,31,3631,48],[3594,34,3631,51,"portStr"],[3594,41,3631,58],[3595,4,3631,62],[3595,5,3631,63],[3596,4,3632,4],[3596,10,3632,10,"emulatorConfig"],[3596,24,3632,24],[3596,27,3632,27,"Object"],[3596,33,3632,33],[3596,34,3632,34,"freeze"],[3596,40,3632,40],[3596,41,3632,41],[3597,6,3633,8,"host"],[3597,10,3633,12],[3598,6,3634,8,"port"],[3598,10,3634,12],[3599,6,3635,8,"protocol"],[3599,14,3635,16],[3599,16,3635,18,"protocol"],[3599,24,3635,26],[3599,25,3635,27,"replace"],[3599,32,3635,34],[3599,33,3635,35],[3599,36,3635,38],[3599,38,3635,40],[3599,40,3635,42],[3599,41,3635,43],[3600,6,3636,8,"options"],[3600,13,3636,15],[3600,15,3636,17,"Object"],[3600,21,3636,23],[3600,22,3636,24,"freeze"],[3600,28,3636,30],[3600,29,3636,31],[3601,8,3636,33,"disableWarnings"],[3602,6,3636,49],[3602,7,3636,50],[3603,4,3637,4],[3603,5,3637,5],[3603,6,3637,6],[3604,4,3638,4],[3605,4,3639,4],[3605,8,3639,8],[3605,9,3639,9,"authInternal"],[3605,21,3639,21],[3605,22,3639,22,"_canInitEmulator"],[3605,38,3639,38],[3605,40,3639,40],[3606,6,3640,8],[3607,6,3641,8],[3608,6,3642,8,"_assert"],[3608,13,3642,15],[3608,14,3642,16,"authInternal"],[3608,26,3642,28],[3608,27,3642,29,"config"],[3608,33,3642,35],[3608,34,3642,36,"emulator"],[3608,42,3642,44],[3608,46,3642,48,"authInternal"],[3608,58,3642,60],[3608,59,3642,61,"emulatorConfig"],[3608,73,3642,75],[3608,75,3642,77,"authInternal"],[3608,87,3642,89],[3608,89,3642,91],[3608,113,3642,115],[3608,114,3642,116],[3608,156,3642,158],[3608,157,3642,159],[3609,6,3643,8],[3610,6,3644,8],[3611,6,3645,8,"_assert"],[3611,13,3645,15],[3611,14,3645,16],[3611,18,3645,16,"deepEqual"],[3611,33,3645,25],[3611,35,3645,26,"emulator"],[3611,43,3645,34],[3611,45,3645,36,"authInternal"],[3611,57,3645,48],[3611,58,3645,49,"config"],[3611,64,3645,55],[3611,65,3645,56,"emulator"],[3611,73,3645,64],[3611,74,3645,65],[3611,78,3646,12],[3611,82,3646,12,"deepEqual"],[3611,97,3646,21],[3611,99,3646,22,"emulatorConfig"],[3611,113,3646,36],[3611,115,3646,38,"authInternal"],[3611,127,3646,50],[3611,128,3646,51,"emulatorConfig"],[3611,142,3646,65],[3611,143,3646,66],[3611,145,3646,68,"authInternal"],[3611,157,3646,80],[3611,159,3646,82],[3611,183,3646,106],[3611,184,3646,107],[3611,226,3646,149],[3611,227,3646,150],[3612,6,3647,8],[3613,6,3648,8],[3614,6,3649,8],[3615,4,3650,4],[3616,4,3651,4,"authInternal"],[3616,16,3651,16],[3616,17,3651,17,"config"],[3616,23,3651,23],[3616,24,3651,24,"emulator"],[3616,32,3651,32],[3616,35,3651,35,"emulator"],[3616,43,3651,43],[3617,4,3652,4,"authInternal"],[3617,16,3652,16],[3617,17,3652,17,"emulatorConfig"],[3617,31,3652,31],[3617,34,3652,34,"emulatorConfig"],[3617,48,3652,48],[3618,4,3653,4,"authInternal"],[3618,16,3653,16],[3618,17,3653,17,"settings"],[3618,25,3653,25],[3618,26,3653,26,"appVerificationDisabledForTesting"],[3618,59,3653,59],[3618,62,3653,62],[3618,66,3653,66],[3619,4,3654,4],[3620,4,3655,4],[3620,8,3655,8],[3620,12,3655,8,"isCloudWorkstation"],[3620,36,3655,26],[3620,38,3655,27,"host"],[3620,42,3655,31],[3620,43,3655,32],[3620,45,3655,34],[3621,6,3656,8],[3621,11,3656,13],[3621,15,3656,13,"pingServer"],[3621,31,3656,23],[3621,33,3656,24],[3621,36,3656,27,"protocol"],[3621,44,3656,35],[3621,49,3656,40,"host"],[3621,53,3656,44],[3621,56,3656,47,"portStr"],[3621,63,3656,54],[3621,65,3656,56],[3621,66,3656,57],[3622,6,3657,8],[3622,10,3657,8,"updateEmulatorBanner"],[3622,36,3657,28],[3622,38,3657,29],[3622,44,3657,35],[3622,46,3657,37],[3622,50,3657,41],[3622,51,3657,42],[3623,4,3658,4],[3623,5,3658,5],[3623,11,3659,9],[3623,15,3659,13],[3623,16,3659,14,"disableWarnings"],[3623,31,3659,29],[3623,33,3659,31],[3624,6,3660,8,"emitEmulatorWarning"],[3624,25,3660,27],[3624,26,3660,28],[3624,27,3660,29],[3625,4,3661,4],[3626,2,3662,0],[3627,2,3663,0],[3627,11,3663,9,"extractProtocol"],[3627,26,3663,24,"extractProtocol"],[3627,27,3663,25,"url"],[3627,30,3663,28],[3627,32,3663,30],[3628,4,3664,4],[3628,10,3664,10,"protocolEnd"],[3628,21,3664,21],[3628,24,3664,24,"url"],[3628,27,3664,27],[3628,28,3664,28,"indexOf"],[3628,35,3664,35],[3628,36,3664,36],[3628,39,3664,39],[3628,40,3664,40],[3629,4,3665,4],[3629,11,3665,11,"protocolEnd"],[3629,22,3665,22],[3629,25,3665,25],[3629,26,3665,26],[3629,29,3665,29],[3629,31,3665,31],[3629,34,3665,34,"url"],[3629,37,3665,37],[3629,38,3665,38,"substr"],[3629,44,3665,44],[3629,45,3665,45],[3629,46,3665,46],[3629,48,3665,48,"protocolEnd"],[3629,59,3665,59],[3629,62,3665,62],[3629,63,3665,63],[3629,64,3665,64],[3630,2,3666,0],[3631,2,3667,0],[3631,11,3667,9,"extractHostAndPort"],[3631,29,3667,27,"extractHostAndPort"],[3631,30,3667,28,"url"],[3631,33,3667,31],[3631,35,3667,33],[3632,4,3668,4],[3632,10,3668,10,"protocol"],[3632,18,3668,18],[3632,21,3668,21,"extractProtocol"],[3632,36,3668,36],[3632,37,3668,37,"url"],[3632,40,3668,40],[3632,41,3668,41],[3633,4,3669,4],[3633,10,3669,10,"authority"],[3633,19,3669,19],[3633,22,3669,22],[3633,40,3669,40],[3633,41,3669,41,"exec"],[3633,45,3669,45],[3633,46,3669,46,"url"],[3633,49,3669,49],[3633,50,3669,50,"substr"],[3633,56,3669,56],[3633,57,3669,57,"protocol"],[3633,65,3669,65],[3633,66,3669,66,"length"],[3633,72,3669,72],[3633,73,3669,73],[3633,74,3669,74],[3633,75,3669,75],[3633,76,3669,76],[3634,4,3670,4],[3634,8,3670,8],[3634,9,3670,9,"authority"],[3634,18,3670,18],[3634,20,3670,20],[3635,6,3671,8],[3635,13,3671,15],[3636,8,3671,17,"host"],[3636,12,3671,21],[3636,14,3671,23],[3636,16,3671,25],[3637,8,3671,27,"port"],[3637,12,3671,31],[3637,14,3671,33],[3638,6,3671,38],[3638,7,3671,39],[3639,4,3672,4],[3640,4,3673,4],[3640,10,3673,10,"hostAndPort"],[3640,21,3673,21],[3640,24,3673,24,"authority"],[3640,33,3673,33],[3640,34,3673,34],[3640,35,3673,35],[3640,36,3673,36],[3640,37,3673,37,"split"],[3640,42,3673,42],[3640,43,3673,43],[3640,46,3673,46],[3640,47,3673,47],[3640,48,3673,48,"pop"],[3640,51,3673,51],[3640,52,3673,52],[3640,53,3673,53],[3640,57,3673,57],[3640,59,3673,59],[3640,60,3673,60],[3640,61,3673,61],[3641,4,3674,4],[3641,10,3674,10,"bracketedIPv6"],[3641,23,3674,23],[3641,26,3674,26],[3641,46,3674,46],[3641,47,3674,47,"exec"],[3641,51,3674,51],[3641,52,3674,52,"hostAndPort"],[3641,63,3674,63],[3641,64,3674,64],[3642,4,3675,4],[3642,8,3675,8,"bracketedIPv6"],[3642,21,3675,21],[3642,23,3675,23],[3643,6,3676,8],[3643,12,3676,14,"host"],[3643,16,3676,18],[3643,19,3676,21,"bracketedIPv6"],[3643,32,3676,34],[3643,33,3676,35],[3643,34,3676,36],[3643,35,3676,37],[3644,6,3677,8],[3644,13,3677,15],[3645,8,3677,17,"host"],[3645,12,3677,21],[3646,8,3677,23,"port"],[3646,12,3677,27],[3646,14,3677,29,"parsePort"],[3646,23,3677,38],[3646,24,3677,39,"hostAndPort"],[3646,35,3677,50],[3646,36,3677,51,"substr"],[3646,42,3677,57],[3646,43,3677,58,"host"],[3646,47,3677,62],[3646,48,3677,63,"length"],[3646,54,3677,69],[3646,57,3677,72],[3646,58,3677,73],[3646,59,3677,74],[3647,6,3677,76],[3647,7,3677,77],[3648,4,3678,4],[3648,5,3678,5],[3648,11,3679,9],[3649,6,3680,8],[3649,12,3680,14],[3649,13,3680,15,"host"],[3649,17,3680,19],[3649,19,3680,21,"port"],[3649,23,3680,25],[3649,24,3680,26],[3649,27,3680,29,"hostAndPort"],[3649,38,3680,40],[3649,39,3680,41,"split"],[3649,44,3680,46],[3649,45,3680,47],[3649,48,3680,50],[3649,49,3680,51],[3650,6,3681,8],[3650,13,3681,15],[3651,8,3681,17,"host"],[3651,12,3681,21],[3652,8,3681,23,"port"],[3652,12,3681,27],[3652,14,3681,29,"parsePort"],[3652,23,3681,38],[3652,24,3681,39,"port"],[3652,28,3681,43],[3653,6,3681,45],[3653,7,3681,46],[3654,4,3682,4],[3655,2,3683,0],[3656,2,3684,0],[3656,11,3684,9,"parsePort"],[3656,20,3684,18,"parsePort"],[3656,21,3684,19,"portStr"],[3656,28,3684,26],[3656,30,3684,28],[3657,4,3685,4],[3657,8,3685,8],[3657,9,3685,9,"portStr"],[3657,16,3685,16],[3657,18,3685,18],[3658,6,3686,8],[3658,13,3686,15],[3658,17,3686,19],[3659,4,3687,4],[3660,4,3688,4],[3660,10,3688,10,"port"],[3660,14,3688,14],[3660,17,3688,17,"Number"],[3660,23,3688,23],[3660,24,3688,24,"portStr"],[3660,31,3688,31],[3660,32,3688,32],[3661,4,3689,4],[3661,8,3689,8,"isNaN"],[3661,13,3689,13],[3661,14,3689,14,"port"],[3661,18,3689,18],[3661,19,3689,19],[3661,21,3689,21],[3662,6,3690,8],[3662,13,3690,15],[3662,17,3690,19],[3663,4,3691,4],[3664,4,3692,4],[3664,11,3692,11,"port"],[3664,15,3692,15],[3665,2,3693,0],[3666,2,3694,0],[3666,11,3694,9,"emitEmulatorWarning"],[3666,30,3694,28,"emitEmulatorWarning"],[3666,31,3694,28],[3666,33,3694,31],[3667,4,3695,4],[3667,13,3695,13,"attachBanner"],[3667,25,3695,25,"attachBanner"],[3667,26,3695,25],[3667,28,3695,28],[3668,6,3696,8],[3668,12,3696,14,"el"],[3668,14,3696,16],[3668,17,3696,19,"document"],[3668,25,3696,27],[3668,26,3696,28,"createElement"],[3668,39,3696,41],[3668,40,3696,42],[3668,43,3696,45],[3668,44,3696,46],[3669,6,3697,8],[3669,12,3697,14,"sty"],[3669,15,3697,17],[3669,18,3697,20,"el"],[3669,20,3697,22],[3669,21,3697,23,"style"],[3669,26,3697,28],[3670,6,3698,8,"el"],[3670,8,3698,10],[3670,9,3698,11,"innerText"],[3670,18,3698,20],[3670,21,3699,12],[3670,88,3699,79],[3671,6,3700,8,"sty"],[3671,9,3700,11],[3671,10,3700,12,"position"],[3671,18,3700,20],[3671,21,3700,23],[3671,28,3700,30],[3672,6,3701,8,"sty"],[3672,9,3701,11],[3672,10,3701,12,"width"],[3672,15,3701,17],[3672,18,3701,20],[3672,24,3701,26],[3673,6,3702,8,"sty"],[3673,9,3702,11],[3673,10,3702,12,"backgroundColor"],[3673,25,3702,27],[3673,28,3702,30],[3673,37,3702,39],[3674,6,3703,8,"sty"],[3674,9,3703,11],[3674,10,3703,12,"border"],[3674,16,3703,18],[3674,19,3703,21],[3674,39,3703,41],[3675,6,3704,8,"sty"],[3675,9,3704,11],[3675,10,3704,12,"color"],[3675,15,3704,17],[3675,18,3704,20],[3675,27,3704,29],[3676,6,3705,8,"sty"],[3676,9,3705,11],[3676,10,3705,12,"bottom"],[3676,16,3705,18],[3676,19,3705,21],[3676,24,3705,26],[3677,6,3706,8,"sty"],[3677,9,3706,11],[3677,10,3706,12,"left"],[3677,14,3706,16],[3677,17,3706,19],[3677,22,3706,24],[3678,6,3707,8,"sty"],[3678,9,3707,11],[3678,10,3707,12,"margin"],[3678,16,3707,18],[3678,19,3707,21],[3678,24,3707,26],[3679,6,3708,8,"sty"],[3679,9,3708,11],[3679,10,3708,12,"zIndex"],[3679,16,3708,18],[3679,19,3708,21],[3679,26,3708,28],[3680,6,3709,8,"sty"],[3680,9,3709,11],[3680,10,3709,12,"textAlign"],[3680,19,3709,21],[3680,22,3709,24],[3680,30,3709,32],[3681,6,3710,8,"el"],[3681,8,3710,10],[3681,9,3710,11,"classList"],[3681,18,3710,20],[3681,19,3710,21,"add"],[3681,22,3710,24],[3681,23,3710,25],[3681,50,3710,52],[3681,51,3710,53],[3682,6,3711,8,"document"],[3682,14,3711,16],[3682,15,3711,17,"body"],[3682,19,3711,21],[3682,20,3711,22,"appendChild"],[3682,31,3711,33],[3682,32,3711,34,"el"],[3682,34,3711,36],[3682,35,3711,37],[3683,4,3712,4],[3684,4,3713,4],[3684,8,3713,8],[3684,15,3713,15,"console"],[3684,22,3713,22],[3684,27,3713,27],[3684,38,3713,38],[3684,42,3713,42],[3684,49,3713,49,"console"],[3684,56,3713,56],[3684,57,3713,57,"info"],[3684,61,3713,61],[3684,66,3713,66],[3684,76,3713,76],[3684,78,3713,78],[3685,6,3714,8,"console"],[3685,13,3714,15],[3685,14,3714,16,"info"],[3685,18,3714,20],[3685,19,3714,21],[3685,62,3714,64],[3685,65,3715,12],[3685,126,3715,73],[3685,129,3716,12],[3685,155,3716,38],[3685,156,3716,39],[3686,4,3717,4],[3687,4,3718,4],[3687,8,3718,8],[3687,17,3718,41],[3687,24,3718,48,"document"],[3687,32,3718,56],[3687,37,3718,61],[3687,48,3718,72],[3687,50,3718,74],[3688,6,3719,8],[3688,10,3719,12,"document"],[3688,18,3719,20],[3688,19,3719,21,"readyState"],[3688,29,3719,31],[3688,34,3719,36],[3688,43,3719,45],[3688,45,3719,47],[3689,8,3720,12,"window"],[3689,14,3720,18],[3689,15,3720,19,"addEventListener"],[3689,31,3720,35],[3689,32,3720,36],[3689,50,3720,54],[3689,52,3720,56,"attachBanner"],[3689,64,3720,68],[3689,65,3720,69],[3690,6,3721,8],[3690,7,3721,9],[3690,13,3722,13],[3691,8,3723,12,"attachBanner"],[3691,20,3723,24],[3691,21,3723,25],[3691,22,3723,26],[3692,6,3724,8],[3693,4,3725,4],[3694,2,3726,0],[3696,2,3728,0],[3697,0,3729,0],[3698,0,3730,0],[3699,0,3731,0],[3700,0,3732,0],[3701,0,3733,0],[3702,0,3734,0],[3703,0,3735,0],[3704,0,3736,0],[3705,0,3737,0],[3706,0,3738,0],[3707,0,3739,0],[3708,0,3740,0],[3709,0,3741,0],[3710,0,3742,0],[3711,0,3743,0],[3712,2,3744,0],[3713,0,3745,0],[3714,0,3746,0],[3715,0,3747,0],[3716,0,3748,0],[3717,0,3749,0],[3718,0,3750,0],[3719,0,3751,0],[3720,2,3752,0],[3720,8,3752,6,"AuthCredential"],[3720,22,3752,20],[3720,23,3752,21],[3721,4,3753,4],[3722,4,3754,4,"constructor"],[3722,15,3754,15,"constructor"],[3723,4,3755,4],[3724,0,3756,0],[3725,0,3757,0],[3726,0,3758,0],[3727,0,3759,0],[3728,0,3760,0],[3729,4,3761,4,"providerId"],[3729,14,3761,14],[3730,4,3762,4],[3731,0,3763,0],[3732,0,3764,0],[3733,0,3765,0],[3734,0,3766,0],[3735,0,3767,0],[3736,0,3768,0],[3737,0,3769,0],[3738,4,3770,4,"signInMethod"],[3738,16,3770,16],[3738,18,3770,18],[3739,6,3771,8],[3739,10,3771,12],[3739,11,3771,13,"providerId"],[3739,21,3771,23],[3739,24,3771,26,"providerId"],[3739,34,3771,36],[3740,6,3772,8],[3740,10,3772,12],[3740,11,3772,13,"signInMethod"],[3740,23,3772,25],[3740,26,3772,28,"signInMethod"],[3740,38,3772,40],[3741,4,3773,4],[3742,4,3774,4],[3743,0,3775,0],[3744,0,3776,0],[3745,0,3777,0],[3746,0,3778,0],[3747,4,3779,4,"toJSON"],[3747,10,3779,10,"toJSON"],[3747,11,3779,10],[3747,13,3779,13],[3748,6,3780,8],[3748,13,3780,15,"debugFail"],[3748,22,3780,24],[3748,23,3780,25],[3748,40,3780,42],[3748,41,3780,43],[3749,4,3781,4],[3750,4,3782,4],[3751,4,3783,4,"_getIdTokenResponse"],[3751,23,3783,23,"_getIdTokenResponse"],[3751,24,3783,24,"_auth"],[3751,29,3783,29],[3751,31,3783,31],[3752,6,3784,8],[3752,13,3784,15,"debugFail"],[3752,22,3784,24],[3752,23,3784,25],[3752,40,3784,42],[3752,41,3784,43],[3753,4,3785,4],[3754,4,3786,4],[3755,4,3787,4,"_linkToIdToken"],[3755,18,3787,18,"_linkToIdToken"],[3755,19,3787,19,"_auth"],[3755,24,3787,24],[3755,26,3787,26,"_idToken"],[3755,34,3787,34],[3755,36,3787,36],[3756,6,3788,8],[3756,13,3788,15,"debugFail"],[3756,22,3788,24],[3756,23,3788,25],[3756,40,3788,42],[3756,41,3788,43],[3757,4,3789,4],[3758,4,3790,4],[3759,4,3791,4,"_getReauthenticationResolver"],[3759,32,3791,32,"_getReauthenticationResolver"],[3759,33,3791,33,"_auth"],[3759,38,3791,38],[3759,40,3791,40],[3760,6,3792,8],[3760,13,3792,15,"debugFail"],[3760,22,3792,24],[3760,23,3792,25],[3760,40,3792,42],[3760,41,3792,43],[3761,4,3793,4],[3762,2,3794,0],[3764,2,3796,0],[3765,0,3797,0],[3766,0,3798,0],[3767,0,3799,0],[3768,0,3800,0],[3769,0,3801,0],[3770,0,3802,0],[3771,0,3803,0],[3772,0,3804,0],[3773,0,3805,0],[3774,0,3806,0],[3775,0,3807,0],[3776,0,3808,0],[3777,0,3809,0],[3778,0,3810,0],[3779,0,3811,0],[3780,2,3796,0,"exports"],[3780,9,3796,0],[3780,10,3796,0,"M"],[3780,11,3796,0],[3780,14,3796,0,"AuthCredential"],[3780,28,3796,0],[3781,2,3812,0],[3781,17,3812,15,"resetPassword"],[3781,30,3812,28,"resetPassword"],[3781,31,3812,29,"auth"],[3781,35,3812,33],[3781,37,3812,35,"request"],[3781,44,3812,42],[3781,46,3812,44],[3782,4,3813,4],[3782,11,3813,11,"_performApiRequest"],[3782,29,3813,29],[3782,30,3813,30,"auth"],[3782,34,3813,34],[3782,36,3813,36],[3782,42,3813,42],[3782,43,3813,43],[3782,66,3813,66],[3782,94,3813,94],[3782,95,3813,95],[3782,126,3813,126,"_addTidIfNecessary"],[3782,144,3813,144],[3782,145,3813,145,"auth"],[3782,149,3813,149],[3782,151,3813,151,"request"],[3782,158,3813,158],[3782,159,3813,159],[3782,160,3813,160],[3783,2,3814,0],[3784,2,3815,0],[3784,17,3815,15,"updateEmailPassword"],[3784,36,3815,34,"updateEmailPassword"],[3784,37,3815,35,"auth"],[3784,41,3815,39],[3784,43,3815,41,"request"],[3784,50,3815,48],[3784,52,3815,50],[3785,4,3816,4],[3785,11,3816,11,"_performApiRequest"],[3785,29,3816,29],[3785,30,3816,30,"auth"],[3785,34,3816,34],[3785,36,3816,36],[3785,42,3816,42],[3785,43,3816,43],[3785,66,3816,66],[3785,87,3816,87],[3785,88,3816,88],[3785,121,3816,121,"request"],[3785,128,3816,128],[3785,129,3816,129],[3786,2,3817,0],[3787,2,3818,0],[3788,2,3819,0],[3789,2,3820,0],[3789,17,3820,15,"linkEmailPassword"],[3789,34,3820,32,"linkEmailPassword"],[3789,35,3820,33,"auth"],[3789,39,3820,37],[3789,41,3820,39,"request"],[3789,48,3820,46],[3789,50,3820,48],[3790,4,3821,4],[3790,11,3821,11,"_performApiRequest"],[3790,29,3821,29],[3790,30,3821,30,"auth"],[3790,34,3821,34],[3790,36,3821,36],[3790,42,3821,42],[3790,43,3821,43],[3790,66,3821,66],[3790,87,3821,87],[3790,88,3821,88],[3790,112,3821,112,"request"],[3790,119,3821,119],[3790,120,3821,120],[3791,2,3822,0],[3792,2,3823,0],[3792,17,3823,15,"applyActionCode$1"],[3792,34,3823,32,"applyActionCode$1"],[3792,35,3823,33,"auth"],[3792,39,3823,37],[3792,41,3823,39,"request"],[3792,48,3823,46],[3792,50,3823,48],[3793,4,3824,4],[3793,11,3824,11,"_performApiRequest"],[3793,29,3824,29],[3793,30,3824,30,"auth"],[3793,34,3824,34],[3793,36,3824,36],[3793,42,3824,42],[3793,43,3824,43],[3793,66,3824,66],[3793,87,3824,87],[3793,88,3824,88],[3793,121,3824,121,"_addTidIfNecessary"],[3793,139,3824,139],[3793,140,3824,140,"auth"],[3793,144,3824,144],[3793,146,3824,146,"request"],[3793,153,3824,153],[3793,154,3824,154],[3793,155,3824,155],[3794,2,3825,0],[3796,2,3827,0],[3797,0,3828,0],[3798,0,3829,0],[3799,0,3830,0],[3800,0,3831,0],[3801,0,3832,0],[3802,0,3833,0],[3803,0,3834,0],[3804,0,3835,0],[3805,0,3836,0],[3806,0,3837,0],[3807,0,3838,0],[3808,0,3839,0],[3809,0,3840,0],[3810,0,3841,0],[3811,0,3842,0],[3812,2,3843,0],[3812,17,3843,15,"signInWithPassword"],[3812,35,3843,33,"signInWithPassword"],[3812,36,3843,34,"auth"],[3812,40,3843,38],[3812,42,3843,40,"request"],[3812,49,3843,47],[3812,51,3843,49],[3813,4,3844,4],[3813,11,3844,11,"_performSignInRequest"],[3813,32,3844,32],[3813,33,3844,33,"auth"],[3813,37,3844,37],[3813,39,3844,39],[3813,45,3844,45],[3813,46,3844,46],[3813,69,3844,69],[3813,102,3844,102],[3813,103,3844,103],[3813,141,3844,141,"_addTidIfNecessary"],[3813,159,3844,159],[3813,160,3844,160,"auth"],[3813,164,3844,164],[3813,166,3844,166,"request"],[3813,173,3844,173],[3813,174,3844,174],[3813,175,3844,175],[3814,2,3845,0],[3815,2,3846,0],[3815,17,3846,15,"sendOobCode"],[3815,28,3846,26,"sendOobCode"],[3815,29,3846,27,"auth"],[3815,33,3846,31],[3815,35,3846,33,"request"],[3815,42,3846,40],[3815,44,3846,42],[3816,4,3847,4],[3816,11,3847,11,"_performApiRequest"],[3816,29,3847,29],[3816,30,3847,30,"auth"],[3816,34,3847,34],[3816,36,3847,36],[3816,42,3847,42],[3816,43,3847,43],[3816,66,3847,66],[3816,92,3847,92],[3816,93,3847,93],[3816,123,3847,123,"_addTidIfNecessary"],[3816,141,3847,141],[3816,142,3847,142,"auth"],[3816,146,3847,146],[3816,148,3847,148,"request"],[3816,155,3847,155],[3816,156,3847,156],[3816,157,3847,157],[3817,2,3848,0],[3818,2,3849,0],[3818,17,3849,15,"sendEmailVerification$1"],[3818,40,3849,38,"sendEmailVerification$1"],[3818,41,3849,39,"auth"],[3818,45,3849,43],[3818,47,3849,45,"request"],[3818,54,3849,52],[3818,56,3849,54],[3819,4,3850,4],[3819,11,3850,11,"sendOobCode"],[3819,22,3850,22],[3819,23,3850,23,"auth"],[3819,27,3850,27],[3819,29,3850,29,"request"],[3819,36,3850,36],[3819,37,3850,37],[3820,2,3851,0],[3821,2,3852,0],[3821,17,3852,15,"sendPasswordResetEmail$1"],[3821,41,3852,39,"sendPasswordResetEmail$1"],[3821,42,3852,40,"auth"],[3821,46,3852,44],[3821,48,3852,46,"request"],[3821,55,3852,53],[3821,57,3852,55],[3822,4,3853,4],[3822,11,3853,11,"sendOobCode"],[3822,22,3853,22],[3822,23,3853,23,"auth"],[3822,27,3853,27],[3822,29,3853,29,"request"],[3822,36,3853,36],[3822,37,3853,37],[3823,2,3854,0],[3824,2,3855,0],[3824,17,3855,15,"sendSignInLinkToEmail$1"],[3824,40,3855,38,"sendSignInLinkToEmail$1"],[3824,41,3855,39,"auth"],[3824,45,3855,43],[3824,47,3855,45,"request"],[3824,54,3855,52],[3824,56,3855,54],[3825,4,3856,4],[3825,11,3856,11,"sendOobCode"],[3825,22,3856,22],[3825,23,3856,23,"auth"],[3825,27,3856,27],[3825,29,3856,29,"request"],[3825,36,3856,36],[3825,37,3856,37],[3826,2,3857,0],[3827,2,3858,0],[3827,17,3858,15,"verifyAndChangeEmail"],[3827,37,3858,35,"verifyAndChangeEmail"],[3827,38,3858,36,"auth"],[3827,42,3858,40],[3827,44,3858,42,"request"],[3827,51,3858,49],[3827,53,3858,51],[3828,4,3859,4],[3828,11,3859,11,"sendOobCode"],[3828,22,3859,22],[3828,23,3859,23,"auth"],[3828,27,3859,27],[3828,29,3859,29,"request"],[3828,36,3859,36],[3828,37,3859,37],[3829,2,3860,0],[3831,2,3862,0],[3832,0,3863,0],[3833,0,3864,0],[3834,0,3865,0],[3835,0,3866,0],[3836,0,3867,0],[3837,0,3868,0],[3838,0,3869,0],[3839,0,3870,0],[3840,0,3871,0],[3841,0,3872,0],[3842,0,3873,0],[3843,0,3874,0],[3844,0,3875,0],[3845,0,3876,0],[3846,0,3877,0],[3847,2,3878,0],[3847,17,3878,15,"signInWithEmailLink$1"],[3847,38,3878,36,"signInWithEmailLink$1"],[3847,39,3878,37,"auth"],[3847,43,3878,41],[3847,45,3878,43,"request"],[3847,52,3878,50],[3847,54,3878,52],[3848,4,3879,4],[3848,11,3879,11,"_performSignInRequest"],[3848,32,3879,32],[3848,33,3879,33,"auth"],[3848,37,3879,37],[3848,39,3879,39],[3848,45,3879,45],[3848,46,3879,46],[3848,69,3879,69],[3848,103,3879,103],[3848,104,3879,104],[3848,144,3879,144,"_addTidIfNecessary"],[3848,162,3879,162],[3848,163,3879,163,"auth"],[3848,167,3879,167],[3848,169,3879,169,"request"],[3848,176,3879,176],[3848,177,3879,177],[3848,178,3879,178],[3849,2,3880,0],[3850,2,3881,0],[3850,17,3881,15,"signInWithEmailLinkForLinking"],[3850,46,3881,44,"signInWithEmailLinkForLinking"],[3850,47,3881,45,"auth"],[3850,51,3881,49],[3850,53,3881,51,"request"],[3850,60,3881,58],[3850,62,3881,60],[3851,4,3882,4],[3851,11,3882,11,"_performSignInRequest"],[3851,32,3882,32],[3851,33,3882,33,"auth"],[3851,37,3882,37],[3851,39,3882,39],[3851,45,3882,45],[3851,46,3882,46],[3851,69,3882,69],[3851,103,3882,103],[3851,104,3882,104],[3851,144,3882,144,"_addTidIfNecessary"],[3851,162,3882,162],[3851,163,3882,163,"auth"],[3851,167,3882,167],[3851,169,3882,169,"request"],[3851,176,3882,176],[3851,177,3882,177],[3851,178,3882,178],[3852,2,3883,0],[3854,2,3885,0],[3855,0,3886,0],[3856,0,3887,0],[3857,0,3888,0],[3858,0,3889,0],[3859,0,3890,0],[3860,0,3891,0],[3861,0,3892,0],[3862,0,3893,0],[3863,0,3894,0],[3864,0,3895,0],[3865,0,3896,0],[3866,0,3897,0],[3867,0,3898,0],[3868,0,3899,0],[3869,0,3900,0],[3870,2,3901,0],[3871,0,3902,0],[3872,0,3903,0],[3873,0,3904,0],[3874,0,3905,0],[3875,0,3906,0],[3876,0,3907,0],[3877,0,3908,0],[3878,0,3909,0],[3879,0,3910,0],[3880,2,3911,0],[3880,8,3911,6,"EmailAuthCredential"],[3880,27,3911,25],[3880,36,3911,34,"AuthCredential"],[3880,50,3911,48],[3880,51,3911,49],[3881,4,3912,4],[3882,4,3913,4,"constructor"],[3882,15,3913,15,"constructor"],[3882,16,3914,4],[3883,4,3915,4,"_email"],[3883,10,3915,10],[3883,12,3916,4],[3884,4,3917,4,"_password"],[3884,13,3917,13],[3884,15,3917,15,"signInMethod"],[3884,27,3917,27],[3884,29,3918,4],[3885,4,3919,4,"_tenantId"],[3885,13,3919,13],[3885,16,3919,16],[3885,20,3919,20],[3885,22,3919,22],[3886,6,3920,8],[3886,11,3920,13],[3886,12,3920,14],[3886,22,3920,24],[3886,23,3920,25],[3886,50,3920,52,"signInMethod"],[3886,62,3920,64],[3886,63,3920,65],[3887,6,3921,8],[3887,10,3921,12],[3887,11,3921,13,"_email"],[3887,17,3921,19],[3887,20,3921,22,"_email"],[3887,26,3921,28],[3888,6,3922,8],[3888,10,3922,12],[3888,11,3922,13,"_password"],[3888,20,3922,22],[3888,23,3922,25,"_password"],[3888,32,3922,34],[3889,6,3923,8],[3889,10,3923,12],[3889,11,3923,13,"_tenantId"],[3889,20,3923,22],[3889,23,3923,25,"_tenantId"],[3889,32,3923,34],[3890,4,3924,4],[3891,4,3925,4],[3892,4,3926,4],[3892,11,3926,11,"_fromEmailAndPassword"],[3892,32,3926,32,"_fromEmailAndPassword"],[3892,33,3926,33,"email"],[3892,38,3926,38],[3892,40,3926,40,"password"],[3892,48,3926,48],[3892,50,3926,50],[3893,6,3927,8],[3893,13,3927,15],[3893,17,3927,19,"EmailAuthCredential"],[3893,36,3927,38],[3893,37,3927,39,"email"],[3893,42,3927,44],[3893,44,3927,46,"password"],[3893,52,3927,54],[3893,54,3927,56],[3893,64,3927,66],[3893,65,3927,67],[3893,98,3927,100],[3893,99,3927,101],[3894,4,3928,4],[3895,4,3929,4],[3896,4,3930,4],[3896,11,3930,11,"_fromEmailAndCode"],[3896,28,3930,28,"_fromEmailAndCode"],[3896,29,3930,29,"email"],[3896,34,3930,34],[3896,36,3930,36,"oobCode"],[3896,43,3930,43],[3896,45,3930,45,"tenantId"],[3896,53,3930,53],[3896,56,3930,56],[3896,60,3930,60],[3896,62,3930,62],[3897,6,3931,8],[3897,13,3931,15],[3897,17,3931,19,"EmailAuthCredential"],[3897,36,3931,38],[3897,37,3931,39,"email"],[3897,42,3931,44],[3897,44,3931,46,"oobCode"],[3897,51,3931,53],[3897,53,3931,55],[3897,64,3931,66],[3897,65,3931,67],[3897,96,3931,98,"tenantId"],[3897,104,3931,106],[3897,105,3931,107],[3898,4,3932,4],[3899,4,3933,4],[3900,4,3934,4,"toJSON"],[3900,10,3934,10,"toJSON"],[3900,11,3934,10],[3900,13,3934,13],[3901,6,3935,8],[3901,13,3935,15],[3902,8,3936,12,"email"],[3902,13,3936,17],[3902,15,3936,19],[3902,19,3936,23],[3902,20,3936,24,"_email"],[3902,26,3936,30],[3903,8,3937,12,"password"],[3903,16,3937,20],[3903,18,3937,22],[3903,22,3937,26],[3903,23,3937,27,"_password"],[3903,32,3937,36],[3904,8,3938,12,"signInMethod"],[3904,20,3938,24],[3904,22,3938,26],[3904,26,3938,30],[3904,27,3938,31,"signInMethod"],[3904,39,3938,43],[3905,8,3939,12,"tenantId"],[3905,16,3939,20],[3905,18,3939,22],[3905,22,3939,26],[3905,23,3939,27,"_tenantId"],[3906,6,3940,8],[3906,7,3940,9],[3907,4,3941,4],[3908,4,3942,4],[3909,0,3943,0],[3910,0,3944,0],[3911,0,3945,0],[3912,0,3946,0],[3913,0,3947,0],[3914,0,3948,0],[3915,0,3949,0],[3916,4,3950,4],[3916,11,3950,11,"fromJSON"],[3916,19,3950,19,"fromJSON"],[3916,20,3950,20,"json"],[3916,24,3950,24],[3916,26,3950,26],[3917,6,3951,8],[3917,12,3951,14,"obj"],[3917,15,3951,17],[3917,18,3951,20],[3917,25,3951,27,"json"],[3917,29,3951,31],[3917,34,3951,36],[3917,42,3951,44],[3917,45,3951,47,"JSON"],[3917,49,3951,51],[3917,50,3951,52,"parse"],[3917,55,3951,57],[3917,56,3951,58,"json"],[3917,60,3951,62],[3917,61,3951,63],[3917,64,3951,66,"json"],[3917,68,3951,70],[3918,6,3952,8],[3918,10,3952,12,"obj"],[3918,13,3952,15],[3918,15,3952,17,"email"],[3918,20,3952,22],[3918,24,3952,26,"obj"],[3918,27,3952,29],[3918,29,3952,31,"password"],[3918,37,3952,39],[3918,39,3952,41],[3919,8,3953,12],[3919,12,3953,16,"obj"],[3919,15,3953,19],[3919,16,3953,20,"signInMethod"],[3919,28,3953,32],[3919,33,3953,37],[3919,43,3953,47],[3919,44,3953,48],[3919,79,3953,83],[3920,10,3954,16],[3920,17,3954,23],[3920,21,3954,27],[3920,22,3954,28,"_fromEmailAndPassword"],[3920,43,3954,49],[3920,44,3954,50,"obj"],[3920,47,3954,53],[3920,48,3954,54,"email"],[3920,53,3954,59],[3920,55,3954,61,"obj"],[3920,58,3954,64],[3920,59,3954,65,"password"],[3920,67,3954,73],[3920,68,3954,74],[3921,8,3955,12],[3921,9,3955,13],[3921,15,3956,17],[3921,19,3956,21,"obj"],[3921,22,3956,24],[3921,23,3956,25,"signInMethod"],[3921,35,3956,37],[3921,40,3956,42],[3921,51,3956,53],[3921,52,3956,54],[3921,83,3956,85],[3922,10,3957,16],[3922,17,3957,23],[3922,21,3957,27],[3922,22,3957,28,"_fromEmailAndCode"],[3922,39,3957,45],[3922,40,3957,46,"obj"],[3922,43,3957,49],[3922,44,3957,50,"email"],[3922,49,3957,55],[3922,51,3957,57,"obj"],[3922,54,3957,60],[3922,55,3957,61,"password"],[3922,63,3957,69],[3922,65,3957,71,"obj"],[3922,68,3957,74],[3922,69,3957,75,"tenantId"],[3922,77,3957,83],[3922,78,3957,84],[3923,8,3958,12],[3924,6,3959,8],[3925,6,3960,8],[3925,13,3960,15],[3925,17,3960,19],[3926,4,3961,4],[3927,4,3962,4],[3928,4,3963,4],[3928,10,3963,10,"_getIdTokenResponse"],[3928,29,3963,29,"_getIdTokenResponse"],[3928,30,3963,30,"auth"],[3928,34,3963,34],[3928,36,3963,36],[3929,6,3964,8],[3929,14,3964,16],[3929,18,3964,20],[3929,19,3964,21,"signInMethod"],[3929,31,3964,33],[3930,8,3965,12],[3930,13,3965,17],[3930,23,3965,27],[3930,24,3965,28],[3931,10,3966,16],[3931,16,3966,22,"request"],[3931,23,3966,29],[3931,26,3966,32],[3932,12,3967,20,"returnSecureToken"],[3932,29,3967,37],[3932,31,3967,39],[3932,35,3967,43],[3933,12,3968,20,"email"],[3933,17,3968,25],[3933,19,3968,27],[3933,23,3968,31],[3933,24,3968,32,"_email"],[3933,30,3968,38],[3934,12,3969,20,"password"],[3934,20,3969,28],[3934,22,3969,30],[3934,26,3969,34],[3934,27,3969,35,"_password"],[3934,36,3969,44],[3935,12,3970,20,"clientType"],[3935,22,3970,30],[3935,24,3970,32],[3935,41,3970,49],[3935,42,3970,50],[3936,10,3971,16],[3936,11,3971,17],[3937,10,3972,16],[3937,17,3972,23,"handleRecaptchaFlow"],[3937,36,3972,42],[3937,37,3972,43,"auth"],[3937,41,3972,47],[3937,43,3972,49,"request"],[3937,50,3972,56],[3937,52,3972,58],[3937,72,3972,78],[3937,73,3972,79],[3937,122,3972,128,"signInWithPassword"],[3937,140,3972,146],[3937,142,3972,148],[3937,167,3972,173],[3937,168,3972,174],[3937,219,3972,225],[3937,220,3972,226],[3938,8,3973,12],[3938,13,3973,17],[3938,24,3973,28],[3938,25,3973,29],[3939,10,3974,16],[3939,17,3974,23,"signInWithEmailLink$1"],[3939,38,3974,44],[3939,39,3974,45,"auth"],[3939,43,3974,49],[3939,45,3974,51],[3940,12,3975,20,"email"],[3940,17,3975,25],[3940,19,3975,27],[3940,23,3975,31],[3940,24,3975,32,"_email"],[3940,30,3975,38],[3941,12,3976,20,"oobCode"],[3941,19,3976,27],[3941,21,3976,29],[3941,25,3976,33],[3941,26,3976,34,"_password"],[3942,10,3977,16],[3942,11,3977,17],[3942,12,3977,18],[3943,8,3978,12],[3944,10,3979,16,"_fail"],[3944,15,3979,21],[3944,16,3979,22,"auth"],[3944,20,3979,26],[3944,22,3979,28],[3944,38,3979,44],[3944,39,3979,45],[3944,73,3979,79],[3944,74,3979,80],[3945,6,3980,8],[3946,4,3981,4],[3947,4,3982,4],[3948,4,3983,4],[3948,10,3983,10,"_linkToIdToken"],[3948,24,3983,24,"_linkToIdToken"],[3948,25,3983,25,"auth"],[3948,29,3983,29],[3948,31,3983,31,"idToken"],[3948,38,3983,38],[3948,40,3983,40],[3949,6,3984,8],[3949,14,3984,16],[3949,18,3984,20],[3949,19,3984,21,"signInMethod"],[3949,31,3984,33],[3950,8,3985,12],[3950,13,3985,17],[3950,23,3985,27],[3950,24,3985,28],[3951,10,3986,16],[3951,16,3986,22,"request"],[3951,23,3986,29],[3951,26,3986,32],[3952,12,3987,20,"idToken"],[3952,19,3987,27],[3953,12,3988,20,"returnSecureToken"],[3953,29,3988,37],[3953,31,3988,39],[3953,35,3988,43],[3954,12,3989,20,"email"],[3954,17,3989,25],[3954,19,3989,27],[3954,23,3989,31],[3954,24,3989,32,"_email"],[3954,30,3989,38],[3955,12,3990,20,"password"],[3955,20,3990,28],[3955,22,3990,30],[3955,26,3990,34],[3955,27,3990,35,"_password"],[3955,36,3990,44],[3956,12,3991,20,"clientType"],[3956,22,3991,30],[3956,24,3991,32],[3956,41,3991,49],[3956,42,3991,50],[3957,10,3992,16],[3957,11,3992,17],[3958,10,3993,16],[3958,17,3993,23,"handleRecaptchaFlow"],[3958,36,3993,42],[3958,37,3993,43,"auth"],[3958,41,3993,47],[3958,43,3993,49,"request"],[3958,50,3993,56],[3958,52,3993,58],[3958,68,3993,74],[3958,69,3993,75],[3958,113,3993,119,"linkEmailPassword"],[3958,130,3993,136],[3958,132,3993,138],[3958,157,3993,163],[3958,158,3993,164],[3958,209,3993,215],[3958,210,3993,216],[3959,8,3994,12],[3959,13,3994,17],[3959,24,3994,28],[3959,25,3994,29],[3960,10,3995,16],[3960,17,3995,23,"signInWithEmailLinkForLinking"],[3960,46,3995,52],[3960,47,3995,53,"auth"],[3960,51,3995,57],[3960,53,3995,59],[3961,12,3996,20,"idToken"],[3961,19,3996,27],[3962,12,3997,20,"email"],[3962,17,3997,25],[3962,19,3997,27],[3962,23,3997,31],[3962,24,3997,32,"_email"],[3962,30,3997,38],[3963,12,3998,20,"oobCode"],[3963,19,3998,27],[3963,21,3998,29],[3963,25,3998,33],[3963,26,3998,34,"_password"],[3964,10,3999,16],[3964,11,3999,17],[3964,12,3999,18],[3965,8,4000,12],[3966,10,4001,16,"_fail"],[3966,15,4001,21],[3966,16,4001,22,"auth"],[3966,20,4001,26],[3966,22,4001,28],[3966,38,4001,44],[3966,39,4001,45],[3966,73,4001,79],[3966,74,4001,80],[3967,6,4002,8],[3968,4,4003,4],[3969,4,4004,4],[3970,4,4005,4,"_getReauthenticationResolver"],[3970,32,4005,32,"_getReauthenticationResolver"],[3970,33,4005,33,"auth"],[3970,37,4005,37],[3970,39,4005,39],[3971,6,4006,8],[3971,13,4006,15],[3971,17,4006,19],[3971,18,4006,20,"_getIdTokenResponse"],[3971,37,4006,39],[3971,38,4006,40,"auth"],[3971,42,4006,44],[3971,43,4006,45],[3972,4,4007,4],[3973,2,4008,0],[3975,2,4010,0],[3976,0,4011,0],[3977,0,4012,0],[3978,0,4013,0],[3979,0,4014,0],[3980,0,4015,0],[3981,0,4016,0],[3982,0,4017,0],[3983,0,4018,0],[3984,0,4019,0],[3985,0,4020,0],[3986,0,4021,0],[3987,0,4022,0],[3988,0,4023,0],[3989,0,4024,0],[3990,0,4025,0],[3991,2,4010,0,"exports"],[3991,9,4010,0],[3991,10,4010,0,"N"],[3991,11,4010,0],[3991,14,4010,0,"EmailAuthCredential"],[3991,33,4010,0],[3992,2,4026,0],[3992,17,4026,15,"signInWithIdp"],[3992,30,4026,28,"signInWithIdp"],[3992,31,4026,29,"auth"],[3992,35,4026,33],[3992,37,4026,35,"request"],[3992,44,4026,42],[3992,46,4026,44],[3993,4,4027,4],[3993,11,4027,11,"_performSignInRequest"],[3993,32,4027,32],[3993,33,4027,33,"auth"],[3993,37,4027,37],[3993,39,4027,39],[3993,45,4027,45],[3993,46,4027,46],[3993,69,4027,69],[3993,97,4027,97],[3993,98,4027,98],[3993,131,4027,131,"_addTidIfNecessary"],[3993,149,4027,149],[3993,150,4027,150,"auth"],[3993,154,4027,154],[3993,156,4027,156,"request"],[3993,163,4027,163],[3993,164,4027,164],[3993,165,4027,165],[3994,2,4028,0],[3996,2,4030,0],[3997,0,4031,0],[3998,0,4032,0],[3999,0,4033,0],[4000,0,4034,0],[4001,0,4035,0],[4002,0,4036,0],[4003,0,4037,0],[4004,0,4038,0],[4005,0,4039,0],[4006,0,4040,0],[4007,0,4041,0],[4008,0,4042,0],[4009,0,4043,0],[4010,0,4044,0],[4011,0,4045,0],[4012,2,4046,0],[4012,8,4046,6,"IDP_REQUEST_URI$1"],[4012,25,4046,23],[4012,28,4046,26],[4012,46,4046,44],[4013,2,4047,0],[4014,0,4048,0],[4015,0,4049,0],[4016,0,4050,0],[4017,0,4051,0],[4018,0,4052,0],[4019,0,4053,0],[4020,0,4054,0],[4021,2,4055,0],[4021,8,4055,6,"OAuthCredential"],[4021,23,4055,21],[4021,32,4055,30,"AuthCredential"],[4021,46,4055,44],[4021,47,4055,45],[4022,4,4056,4,"constructor"],[4022,15,4056,15,"constructor"],[4022,16,4056,15],[4022,18,4056,18],[4023,6,4057,8],[4023,11,4057,13],[4023,12,4057,14],[4023,15,4057,17,"arguments"],[4023,24,4057,26],[4023,25,4057,27],[4024,6,4058,8],[4024,10,4058,12],[4024,11,4058,13,"pendingToken"],[4024,23,4058,25],[4024,26,4058,28],[4024,30,4058,32],[4025,4,4059,4],[4026,4,4060,4],[4027,4,4061,4],[4027,11,4061,11,"_fromParams"],[4027,22,4061,22,"_fromParams"],[4027,23,4061,23,"params"],[4027,29,4061,29],[4027,31,4061,31],[4028,6,4062,8],[4028,12,4062,14,"cred"],[4028,16,4062,18],[4028,19,4062,21],[4028,23,4062,25,"OAuthCredential"],[4028,38,4062,40],[4028,39,4062,41,"params"],[4028,45,4062,47],[4028,46,4062,48,"providerId"],[4028,56,4062,58],[4028,58,4062,60,"params"],[4028,64,4062,66],[4028,65,4062,67,"signInMethod"],[4028,77,4062,79],[4028,78,4062,80],[4029,6,4063,8],[4029,10,4063,12,"params"],[4029,16,4063,18],[4029,17,4063,19,"idToken"],[4029,24,4063,26],[4029,28,4063,30,"params"],[4029,34,4063,36],[4029,35,4063,37,"accessToken"],[4029,46,4063,48],[4029,48,4063,50],[4030,8,4064,12],[4031,8,4065,12],[4031,12,4065,16,"params"],[4031,18,4065,22],[4031,19,4065,23,"idToken"],[4031,26,4065,30],[4031,28,4065,32],[4032,10,4066,16,"cred"],[4032,14,4066,20],[4032,15,4066,21,"idToken"],[4032,22,4066,28],[4032,25,4066,31,"params"],[4032,31,4066,37],[4032,32,4066,38,"idToken"],[4032,39,4066,45],[4033,8,4067,12],[4034,8,4068,12],[4034,12,4068,16,"params"],[4034,18,4068,22],[4034,19,4068,23,"accessToken"],[4034,30,4068,34],[4034,32,4068,36],[4035,10,4069,16,"cred"],[4035,14,4069,20],[4035,15,4069,21,"accessToken"],[4035,26,4069,32],[4035,29,4069,35,"params"],[4035,35,4069,41],[4035,36,4069,42,"accessToken"],[4035,47,4069,53],[4036,8,4070,12],[4037,8,4071,12],[4038,8,4072,12],[4038,12,4072,16,"params"],[4038,18,4072,22],[4038,19,4072,23,"nonce"],[4038,24,4072,28],[4038,28,4072,32],[4038,29,4072,33,"params"],[4038,35,4072,39],[4038,36,4072,40,"pendingToken"],[4038,48,4072,52],[4038,50,4072,54],[4039,10,4073,16,"cred"],[4039,14,4073,20],[4039,15,4073,21,"nonce"],[4039,20,4073,26],[4039,23,4073,29,"params"],[4039,29,4073,35],[4039,30,4073,36,"nonce"],[4039,35,4073,41],[4040,8,4074,12],[4041,8,4075,12],[4041,12,4075,16,"params"],[4041,18,4075,22],[4041,19,4075,23,"pendingToken"],[4041,31,4075,35],[4041,33,4075,37],[4042,10,4076,16,"cred"],[4042,14,4076,20],[4042,15,4076,21,"pendingToken"],[4042,27,4076,33],[4042,30,4076,36,"params"],[4042,36,4076,42],[4042,37,4076,43,"pendingToken"],[4042,49,4076,55],[4043,8,4077,12],[4044,6,4078,8],[4044,7,4078,9],[4044,13,4079,13],[4044,17,4079,17,"params"],[4044,23,4079,23],[4044,24,4079,24,"oauthToken"],[4044,34,4079,34],[4044,38,4079,38,"params"],[4044,44,4079,44],[4044,45,4079,45,"oauthTokenSecret"],[4044,61,4079,61],[4044,63,4079,63],[4045,8,4080,12],[4046,8,4081,12,"cred"],[4046,12,4081,16],[4046,13,4081,17,"accessToken"],[4046,24,4081,28],[4046,27,4081,31,"params"],[4046,33,4081,37],[4046,34,4081,38,"oauthToken"],[4046,44,4081,48],[4047,8,4082,12,"cred"],[4047,12,4082,16],[4047,13,4082,17,"secret"],[4047,19,4082,23],[4047,22,4082,26,"params"],[4047,28,4082,32],[4047,29,4082,33,"oauthTokenSecret"],[4047,45,4082,49],[4048,6,4083,8],[4048,7,4083,9],[4048,13,4084,13],[4049,8,4085,12,"_fail"],[4049,13,4085,17],[4049,14,4085,18],[4049,30,4085,34],[4049,31,4085,35],[4049,65,4085,69],[4049,66,4085,70],[4050,6,4086,8],[4051,6,4087,8],[4051,13,4087,15,"cred"],[4051,17,4087,19],[4052,4,4088,4],[4053,4,4089,4],[4054,4,4090,4,"toJSON"],[4054,10,4090,10,"toJSON"],[4054,11,4090,10],[4054,13,4090,13],[4055,6,4091,8],[4055,13,4091,15],[4056,8,4092,12,"idToken"],[4056,15,4092,19],[4056,17,4092,21],[4056,21,4092,25],[4056,22,4092,26,"idToken"],[4056,29,4092,33],[4057,8,4093,12,"accessToken"],[4057,19,4093,23],[4057,21,4093,25],[4057,25,4093,29],[4057,26,4093,30,"accessToken"],[4057,37,4093,41],[4058,8,4094,12,"secret"],[4058,14,4094,18],[4058,16,4094,20],[4058,20,4094,24],[4058,21,4094,25,"secret"],[4058,27,4094,31],[4059,8,4095,12,"nonce"],[4059,13,4095,17],[4059,15,4095,19],[4059,19,4095,23],[4059,20,4095,24,"nonce"],[4059,25,4095,29],[4060,8,4096,12,"pendingToken"],[4060,20,4096,24],[4060,22,4096,26],[4060,26,4096,30],[4060,27,4096,31,"pendingToken"],[4060,39,4096,43],[4061,8,4097,12,"providerId"],[4061,18,4097,22],[4061,20,4097,24],[4061,24,4097,28],[4061,25,4097,29,"providerId"],[4061,35,4097,39],[4062,8,4098,12,"signInMethod"],[4062,20,4098,24],[4062,22,4098,26],[4062,26,4098,30],[4062,27,4098,31,"signInMethod"],[4063,6,4099,8],[4063,7,4099,9],[4064,4,4100,4],[4065,4,4101,4],[4066,0,4102,0],[4067,0,4103,0],[4068,0,4104,0],[4069,0,4105,0],[4070,0,4106,0],[4071,0,4107,0],[4072,0,4108,0],[4073,0,4109,0],[4074,4,4110,4],[4074,11,4110,11,"fromJSON"],[4074,19,4110,19,"fromJSON"],[4074,20,4110,20,"json"],[4074,24,4110,24],[4074,26,4110,26],[4075,6,4111,8],[4075,12,4111,14,"obj"],[4075,15,4111,17],[4075,18,4111,20],[4075,25,4111,27,"json"],[4075,29,4111,31],[4075,34,4111,36],[4075,42,4111,44],[4075,45,4111,47,"JSON"],[4075,49,4111,51],[4075,50,4111,52,"parse"],[4075,55,4111,57],[4075,56,4111,58,"json"],[4075,60,4111,62],[4075,61,4111,63],[4075,64,4111,66,"json"],[4075,68,4111,70],[4076,6,4112,8],[4076,12,4112,14],[4077,8,4112,16,"providerId"],[4077,18,4112,26],[4078,8,4112,28,"signInMethod"],[4078,20,4112,40],[4079,8,4112,42],[4079,11,4112,45,"rest"],[4080,6,4112,50],[4080,7,4112,51],[4080,10,4112,54,"obj"],[4080,13,4112,57],[4081,6,4113,8],[4081,10,4113,12],[4081,11,4113,13,"providerId"],[4081,21,4113,23],[4081,25,4113,27],[4081,26,4113,28,"signInMethod"],[4081,38,4113,40],[4081,40,4113,42],[4082,8,4114,12],[4082,15,4114,19],[4082,19,4114,23],[4083,6,4115,8],[4084,6,4116,8],[4084,12,4116,14,"cred"],[4084,16,4116,18],[4084,19,4116,21],[4084,23,4116,25,"OAuthCredential"],[4084,38,4116,40],[4084,39,4116,41,"providerId"],[4084,49,4116,51],[4084,51,4116,53,"signInMethod"],[4084,63,4116,65],[4084,64,4116,66],[4085,6,4117,8,"cred"],[4085,10,4117,12],[4085,11,4117,13,"idToken"],[4085,18,4117,20],[4085,21,4117,23,"rest"],[4085,25,4117,27],[4085,26,4117,28,"idToken"],[4085,33,4117,35],[4085,37,4117,39,"undefined"],[4085,46,4117,48],[4086,6,4118,8,"cred"],[4086,10,4118,12],[4086,11,4118,13,"accessToken"],[4086,22,4118,24],[4086,25,4118,27,"rest"],[4086,29,4118,31],[4086,30,4118,32,"accessToken"],[4086,41,4118,43],[4086,45,4118,47,"undefined"],[4086,54,4118,56],[4087,6,4119,8,"cred"],[4087,10,4119,12],[4087,11,4119,13,"secret"],[4087,17,4119,19],[4087,20,4119,22,"rest"],[4087,24,4119,26],[4087,25,4119,27,"secret"],[4087,31,4119,33],[4088,6,4120,8,"cred"],[4088,10,4120,12],[4088,11,4120,13,"nonce"],[4088,16,4120,18],[4088,19,4120,21,"rest"],[4088,23,4120,25],[4088,24,4120,26,"nonce"],[4088,29,4120,31],[4089,6,4121,8,"cred"],[4089,10,4121,12],[4089,11,4121,13,"pendingToken"],[4089,23,4121,25],[4089,26,4121,28,"rest"],[4089,30,4121,32],[4089,31,4121,33,"pendingToken"],[4089,43,4121,45],[4089,47,4121,49],[4089,51,4121,53],[4090,6,4122,8],[4090,13,4122,15,"cred"],[4090,17,4122,19],[4091,4,4123,4],[4092,4,4124,4],[4093,4,4125,4,"_getIdTokenResponse"],[4093,23,4125,23,"_getIdTokenResponse"],[4093,24,4125,24,"auth"],[4093,28,4125,28],[4093,30,4125,30],[4094,6,4126,8],[4094,12,4126,14,"request"],[4094,19,4126,21],[4094,22,4126,24],[4094,26,4126,28],[4094,27,4126,29,"buildRequest"],[4094,39,4126,41],[4094,40,4126,42],[4094,41,4126,43],[4095,6,4127,8],[4095,13,4127,15,"signInWithIdp"],[4095,26,4127,28],[4095,27,4127,29,"auth"],[4095,31,4127,33],[4095,33,4127,35,"request"],[4095,40,4127,42],[4095,41,4127,43],[4096,4,4128,4],[4097,4,4129,4],[4098,4,4130,4,"_linkToIdToken"],[4098,18,4130,18,"_linkToIdToken"],[4098,19,4130,19,"auth"],[4098,23,4130,23],[4098,25,4130,25,"idToken"],[4098,32,4130,32],[4098,34,4130,34],[4099,6,4131,8],[4099,12,4131,14,"request"],[4099,19,4131,21],[4099,22,4131,24],[4099,26,4131,28],[4099,27,4131,29,"buildRequest"],[4099,39,4131,41],[4099,40,4131,42],[4099,41,4131,43],[4100,6,4132,8,"request"],[4100,13,4132,15],[4100,14,4132,16,"idToken"],[4100,21,4132,23],[4100,24,4132,26,"idToken"],[4100,31,4132,33],[4101,6,4133,8],[4101,13,4133,15,"signInWithIdp"],[4101,26,4133,28],[4101,27,4133,29,"auth"],[4101,31,4133,33],[4101,33,4133,35,"request"],[4101,40,4133,42],[4101,41,4133,43],[4102,4,4134,4],[4103,4,4135,4],[4104,4,4136,4,"_getReauthenticationResolver"],[4104,32,4136,32,"_getReauthenticationResolver"],[4104,33,4136,33,"auth"],[4104,37,4136,37],[4104,39,4136,39],[4105,6,4137,8],[4105,12,4137,14,"request"],[4105,19,4137,21],[4105,22,4137,24],[4105,26,4137,28],[4105,27,4137,29,"buildRequest"],[4105,39,4137,41],[4105,40,4137,42],[4105,41,4137,43],[4106,6,4138,8,"request"],[4106,13,4138,15],[4106,14,4138,16,"autoCreate"],[4106,24,4138,26],[4106,27,4138,29],[4106,32,4138,34],[4107,6,4139,8],[4107,13,4139,15,"signInWithIdp"],[4107,26,4139,28],[4107,27,4139,29,"auth"],[4107,31,4139,33],[4107,33,4139,35,"request"],[4107,40,4139,42],[4107,41,4139,43],[4108,4,4140,4],[4109,4,4141,4,"buildRequest"],[4109,16,4141,16,"buildRequest"],[4109,17,4141,16],[4109,19,4141,19],[4110,6,4142,8],[4110,12,4142,14,"request"],[4110,19,4142,21],[4110,22,4142,24],[4111,8,4143,12,"requestUri"],[4111,18,4143,22],[4111,20,4143,24,"IDP_REQUEST_URI$1"],[4111,37,4143,41],[4112,8,4144,12,"returnSecureToken"],[4112,25,4144,29],[4112,27,4144,31],[4113,6,4145,8],[4113,7,4145,9],[4114,6,4146,8],[4114,10,4146,12],[4114,14,4146,16],[4114,15,4146,17,"pendingToken"],[4114,27,4146,29],[4114,29,4146,31],[4115,8,4147,12,"request"],[4115,15,4147,19],[4115,16,4147,20,"pendingToken"],[4115,28,4147,32],[4115,31,4147,35],[4115,35,4147,39],[4115,36,4147,40,"pendingToken"],[4115,48,4147,52],[4116,6,4148,8],[4116,7,4148,9],[4116,13,4149,13],[4117,8,4150,12],[4117,14,4150,18,"postBody"],[4117,22,4150,26],[4117,25,4150,29],[4117,26,4150,30],[4117,27,4150,31],[4118,8,4151,12],[4118,12,4151,16],[4118,16,4151,20],[4118,17,4151,21,"idToken"],[4118,24,4151,28],[4118,26,4151,30],[4119,10,4152,16,"postBody"],[4119,18,4152,24],[4119,19,4152,25],[4119,29,4152,35],[4119,30,4152,36],[4119,33,4152,39],[4119,37,4152,43],[4119,38,4152,44,"idToken"],[4119,45,4152,51],[4120,8,4153,12],[4121,8,4154,12],[4121,12,4154,16],[4121,16,4154,20],[4121,17,4154,21,"accessToken"],[4121,28,4154,32],[4121,30,4154,34],[4122,10,4155,16,"postBody"],[4122,18,4155,24],[4122,19,4155,25],[4122,33,4155,39],[4122,34,4155,40],[4122,37,4155,43],[4122,41,4155,47],[4122,42,4155,48,"accessToken"],[4122,53,4155,59],[4123,8,4156,12],[4124,8,4157,12],[4124,12,4157,16],[4124,16,4157,20],[4124,17,4157,21,"secret"],[4124,23,4157,27],[4124,25,4157,29],[4125,10,4158,16,"postBody"],[4125,18,4158,24],[4125,19,4158,25],[4125,39,4158,45],[4125,40,4158,46],[4125,43,4158,49],[4125,47,4158,53],[4125,48,4158,54,"secret"],[4125,54,4158,60],[4126,8,4159,12],[4127,8,4160,12,"postBody"],[4127,16,4160,20],[4127,17,4160,21],[4127,29,4160,33],[4127,30,4160,34],[4127,33,4160,37],[4127,37,4160,41],[4127,38,4160,42,"providerId"],[4127,48,4160,52],[4128,8,4161,12],[4128,12,4161,16],[4128,16,4161,20],[4128,17,4161,21,"nonce"],[4128,22,4161,26],[4128,26,4161,30],[4128,27,4161,31],[4128,31,4161,35],[4128,32,4161,36,"pendingToken"],[4128,44,4161,48],[4128,46,4161,50],[4129,10,4162,16,"postBody"],[4129,18,4162,24],[4129,19,4162,25],[4129,26,4162,32],[4129,27,4162,33],[4129,30,4162,36],[4129,34,4162,40],[4129,35,4162,41,"nonce"],[4129,40,4162,46],[4130,8,4163,12],[4131,8,4164,12,"request"],[4131,15,4164,19],[4131,16,4164,20,"postBody"],[4131,24,4164,28],[4131,27,4164,31],[4131,31,4164,31,"querystring"],[4131,48,4164,42],[4131,50,4164,43,"postBody"],[4131,58,4164,51],[4131,59,4164,52],[4132,6,4165,8],[4133,6,4166,8],[4133,13,4166,15,"request"],[4133,20,4166,22],[4134,4,4167,4],[4135,2,4168,0],[4137,2,4170,0],[4138,0,4171,0],[4139,0,4172,0],[4140,0,4173,0],[4141,0,4174,0],[4142,0,4175,0],[4143,0,4176,0],[4144,0,4177,0],[4145,0,4178,0],[4146,0,4179,0],[4147,0,4180,0],[4148,0,4181,0],[4149,0,4182,0],[4150,0,4183,0],[4151,0,4184,0],[4152,0,4185,0],[4153,2,4170,0,"exports"],[4153,9,4170,0],[4153,10,4170,0,"Q"],[4153,11,4170,0],[4153,14,4170,0,"OAuthCredential"],[4153,29,4170,0],[4154,2,4186,0],[4154,17,4186,15,"signInWithPhoneNumber$1"],[4154,40,4186,38,"signInWithPhoneNumber$1"],[4154,41,4186,39,"auth"],[4154,45,4186,43],[4154,47,4186,45,"request"],[4154,54,4186,52],[4154,56,4186,54],[4155,4,4187,4],[4155,11,4187,11,"_performSignInRequest"],[4155,32,4187,32],[4155,33,4187,33,"auth"],[4155,37,4187,37],[4155,39,4187,39],[4155,45,4187,45],[4155,46,4187,46],[4155,69,4187,69],[4155,105,4187,105],[4155,106,4187,106],[4155,148,4187,148,"_addTidIfNecessary"],[4155,166,4187,166],[4155,167,4187,167,"auth"],[4155,171,4187,171],[4155,173,4187,173,"request"],[4155,180,4187,180],[4155,181,4187,181],[4155,182,4187,182],[4156,2,4188,0],[4157,2,4189,0],[4157,17,4189,15,"linkWithPhoneNumber$1"],[4157,38,4189,36,"linkWithPhoneNumber$1"],[4157,39,4189,37,"auth"],[4157,43,4189,41],[4157,45,4189,43,"request"],[4157,52,4189,50],[4157,54,4189,52],[4158,4,4190,4],[4158,10,4190,10,"response"],[4158,18,4190,18],[4158,21,4190,21],[4158,27,4190,27,"_performSignInRequest"],[4158,48,4190,48],[4158,49,4190,49,"auth"],[4158,53,4190,53],[4158,55,4190,55],[4158,61,4190,61],[4158,62,4190,62],[4158,85,4190,85],[4158,121,4190,121],[4158,122,4190,122],[4158,164,4190,164,"_addTidIfNecessary"],[4158,182,4190,182],[4158,183,4190,183,"auth"],[4158,187,4190,187],[4158,189,4190,189,"request"],[4158,196,4190,196],[4158,197,4190,197],[4158,198,4190,198],[4159,4,4191,4],[4159,8,4191,8,"response"],[4159,16,4191,16],[4159,17,4191,17,"temporaryProof"],[4159,31,4191,31],[4159,33,4191,33],[4160,6,4192,8],[4160,12,4192,14,"_makeTaggedError"],[4160,28,4192,30],[4160,29,4192,31,"auth"],[4160,33,4192,35],[4160,35,4192,37],[4160,77,4192,79],[4160,78,4192,80],[4160,117,4192,119,"response"],[4160,125,4192,127],[4160,126,4192,128],[4161,4,4193,4],[4162,4,4194,4],[4162,11,4194,11,"response"],[4162,19,4194,19],[4163,2,4195,0],[4164,2,4196,0],[4164,8,4196,6,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4164,51,4196,49],[4164,54,4196,52],[4165,4,4197,4],[4165,5,4197,5],[4165,21,4197,21],[4165,22,4197,22],[4165,57,4197,57],[4165,73,4197,73],[4165,74,4197,74],[4166,2,4198,0],[4166,3,4198,1],[4167,2,4199,0],[4167,17,4199,15,"verifyPhoneNumberForExisting"],[4167,45,4199,43,"verifyPhoneNumberForExisting"],[4167,46,4199,44,"auth"],[4167,50,4199,48],[4167,52,4199,50,"request"],[4167,59,4199,57],[4167,61,4199,59],[4168,4,4200,4],[4168,10,4200,10,"apiRequest"],[4168,20,4200,20],[4168,23,4200,23],[4169,6,4201,8],[4169,9,4201,11,"request"],[4169,16,4201,18],[4170,6,4202,8,"operation"],[4170,15,4202,17],[4170,17,4202,19],[4171,4,4203,4],[4171,5,4203,5],[4172,4,4204,4],[4172,11,4204,11,"_performSignInRequest"],[4172,32,4204,32],[4172,33,4204,33,"auth"],[4172,37,4204,37],[4172,39,4204,39],[4172,45,4204,45],[4172,46,4204,46],[4172,69,4204,69],[4172,105,4204,105],[4172,106,4204,106],[4172,148,4204,148,"_addTidIfNecessary"],[4172,166,4204,166],[4172,167,4204,167,"auth"],[4172,171,4204,171],[4172,173,4204,173,"apiRequest"],[4172,183,4204,183],[4172,184,4204,184],[4172,186,4204,186,"VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_"],[4172,229,4204,229],[4172,230,4204,230],[4173,2,4205,0],[4175,2,4207,0],[4176,0,4208,0],[4177,0,4209,0],[4178,0,4210,0],[4179,0,4211,0],[4180,0,4212,0],[4181,0,4213,0],[4182,0,4214,0],[4183,0,4215,0],[4184,0,4216,0],[4185,0,4217,0],[4186,0,4218,0],[4187,0,4219,0],[4188,0,4220,0],[4189,0,4221,0],[4190,0,4222,0],[4191,2,4223,0],[4192,0,4224,0],[4193,0,4225,0],[4194,0,4226,0],[4195,0,4227,0],[4196,2,4228,0],[4196,8,4228,6,"PhoneAuthCredential"],[4196,27,4228,25],[4196,36,4228,34,"AuthCredential"],[4196,50,4228,48],[4196,51,4228,49],[4197,4,4229,4,"constructor"],[4197,15,4229,15,"constructor"],[4197,16,4229,16,"params"],[4197,22,4229,22],[4197,24,4229,24],[4198,6,4230,8],[4198,11,4230,13],[4198,12,4230,14],[4198,19,4230,21],[4198,20,4230,22],[4198,44,4230,46],[4198,51,4230,53],[4198,52,4230,54],[4198,76,4230,78],[4198,77,4230,79],[4199,6,4231,8],[4199,10,4231,12],[4199,11,4231,13,"params"],[4199,17,4231,19],[4199,20,4231,22,"params"],[4199,26,4231,28],[4200,4,4232,4],[4201,4,4233,4],[4202,4,4234,4],[4202,11,4234,11,"_fromVerification"],[4202,28,4234,28,"_fromVerification"],[4202,29,4234,29,"verificationId"],[4202,43,4234,43],[4202,45,4234,45,"verificationCode"],[4202,61,4234,61],[4202,63,4234,63],[4203,6,4235,8],[4203,13,4235,15],[4203,17,4235,19,"PhoneAuthCredential"],[4203,36,4235,38],[4203,37,4235,39],[4204,8,4235,41,"verificationId"],[4204,22,4235,55],[4205,8,4235,57,"verificationCode"],[4206,6,4235,74],[4206,7,4235,75],[4206,8,4235,76],[4207,4,4236,4],[4208,4,4237,4],[4209,4,4238,4],[4209,11,4238,11,"_fromTokenResponse"],[4209,29,4238,29,"_fromTokenResponse"],[4209,30,4238,30,"phoneNumber"],[4209,41,4238,41],[4209,43,4238,43,"temporaryProof"],[4209,57,4238,57],[4209,59,4238,59],[4210,6,4239,8],[4210,13,4239,15],[4210,17,4239,19,"PhoneAuthCredential"],[4210,36,4239,38],[4210,37,4239,39],[4211,8,4239,41,"phoneNumber"],[4211,19,4239,52],[4212,8,4239,54,"temporaryProof"],[4213,6,4239,69],[4213,7,4239,70],[4213,8,4239,71],[4214,4,4240,4],[4215,4,4241,4],[4216,4,4242,4,"_getIdTokenResponse"],[4216,23,4242,23,"_getIdTokenResponse"],[4216,24,4242,24,"auth"],[4216,28,4242,28],[4216,30,4242,30],[4217,6,4243,8],[4217,13,4243,15,"signInWithPhoneNumber$1"],[4217,36,4243,38],[4217,37,4243,39,"auth"],[4217,41,4243,43],[4217,43,4243,45],[4217,47,4243,49],[4217,48,4243,50,"_makeVerificationRequest"],[4217,72,4243,74],[4217,73,4243,75],[4217,74,4243,76],[4217,75,4243,77],[4218,4,4244,4],[4219,4,4245,4],[4220,4,4246,4,"_linkToIdToken"],[4220,18,4246,18,"_linkToIdToken"],[4220,19,4246,19,"auth"],[4220,23,4246,23],[4220,25,4246,25,"idToken"],[4220,32,4246,32],[4220,34,4246,34],[4221,6,4247,8],[4221,13,4247,15,"linkWithPhoneNumber$1"],[4221,34,4247,36],[4221,35,4247,37,"auth"],[4221,39,4247,41],[4221,41,4247,43],[4222,8,4248,12,"idToken"],[4222,15,4248,19],[4223,8,4249,12],[4223,11,4249,15],[4223,15,4249,19],[4223,16,4249,20,"_makeVerificationRequest"],[4223,40,4249,44],[4223,41,4249,45],[4224,6,4250,8],[4224,7,4250,9],[4224,8,4250,10],[4225,4,4251,4],[4226,4,4252,4],[4227,4,4253,4,"_getReauthenticationResolver"],[4227,32,4253,32,"_getReauthenticationResolver"],[4227,33,4253,33,"auth"],[4227,37,4253,37],[4227,39,4253,39],[4228,6,4254,8],[4228,13,4254,15,"verifyPhoneNumberForExisting"],[4228,41,4254,43],[4228,42,4254,44,"auth"],[4228,46,4254,48],[4228,48,4254,50],[4228,52,4254,54],[4228,53,4254,55,"_makeVerificationRequest"],[4228,77,4254,79],[4228,78,4254,80],[4228,79,4254,81],[4228,80,4254,82],[4229,4,4255,4],[4230,4,4256,4],[4231,4,4257,4,"_makeVerificationRequest"],[4231,28,4257,28,"_makeVerificationRequest"],[4231,29,4257,28],[4231,31,4257,31],[4232,6,4258,8],[4232,12,4258,14],[4233,8,4258,16,"temporaryProof"],[4233,22,4258,30],[4234,8,4258,32,"phoneNumber"],[4234,19,4258,43],[4235,8,4258,45,"verificationId"],[4235,22,4258,59],[4236,8,4258,61,"verificationCode"],[4237,6,4258,78],[4237,7,4258,79],[4237,10,4258,82],[4237,14,4258,86],[4237,15,4258,87,"params"],[4237,21,4258,93],[4238,6,4259,8],[4238,10,4259,12,"temporaryProof"],[4238,24,4259,26],[4238,28,4259,30,"phoneNumber"],[4238,39,4259,41],[4238,41,4259,43],[4239,8,4260,12],[4239,15,4260,19],[4240,10,4260,21,"temporaryProof"],[4240,24,4260,35],[4241,10,4260,37,"phoneNumber"],[4242,8,4260,49],[4242,9,4260,50],[4243,6,4261,8],[4244,6,4262,8],[4244,13,4262,15],[4245,8,4263,12,"sessionInfo"],[4245,19,4263,23],[4245,21,4263,25,"verificationId"],[4245,35,4263,39],[4246,8,4264,12,"code"],[4246,12,4264,16],[4246,14,4264,18,"verificationCode"],[4247,6,4265,8],[4247,7,4265,9],[4248,4,4266,4],[4249,4,4267,4],[4250,4,4268,4,"toJSON"],[4250,10,4268,10,"toJSON"],[4250,11,4268,10],[4250,13,4268,13],[4251,6,4269,8],[4251,12,4269,14,"obj"],[4251,15,4269,17],[4251,18,4269,20],[4252,8,4270,12,"providerId"],[4252,18,4270,22],[4252,20,4270,24],[4252,24,4270,28],[4252,25,4270,29,"providerId"],[4253,6,4271,8],[4253,7,4271,9],[4254,6,4272,8],[4254,10,4272,12],[4254,14,4272,16],[4254,15,4272,17,"params"],[4254,21,4272,23],[4254,22,4272,24,"phoneNumber"],[4254,33,4272,35],[4254,35,4272,37],[4255,8,4273,12,"obj"],[4255,11,4273,15],[4255,12,4273,16,"phoneNumber"],[4255,23,4273,27],[4255,26,4273,30],[4255,30,4273,34],[4255,31,4273,35,"params"],[4255,37,4273,41],[4255,38,4273,42,"phoneNumber"],[4255,49,4273,53],[4256,6,4274,8],[4257,6,4275,8],[4257,10,4275,12],[4257,14,4275,16],[4257,15,4275,17,"params"],[4257,21,4275,23],[4257,22,4275,24,"temporaryProof"],[4257,36,4275,38],[4257,38,4275,40],[4258,8,4276,12,"obj"],[4258,11,4276,15],[4258,12,4276,16,"temporaryProof"],[4258,26,4276,30],[4258,29,4276,33],[4258,33,4276,37],[4258,34,4276,38,"params"],[4258,40,4276,44],[4258,41,4276,45,"temporaryProof"],[4258,55,4276,59],[4259,6,4277,8],[4260,6,4278,8],[4260,10,4278,12],[4260,14,4278,16],[4260,15,4278,17,"params"],[4260,21,4278,23],[4260,22,4278,24,"verificationCode"],[4260,38,4278,40],[4260,40,4278,42],[4261,8,4279,12,"obj"],[4261,11,4279,15],[4261,12,4279,16,"verificationCode"],[4261,28,4279,32],[4261,31,4279,35],[4261,35,4279,39],[4261,36,4279,40,"params"],[4261,42,4279,46],[4261,43,4279,47,"verificationCode"],[4261,59,4279,63],[4262,6,4280,8],[4263,6,4281,8],[4263,10,4281,12],[4263,14,4281,16],[4263,15,4281,17,"params"],[4263,21,4281,23],[4263,22,4281,24,"verificationId"],[4263,36,4281,38],[4263,38,4281,40],[4264,8,4282,12,"obj"],[4264,11,4282,15],[4264,12,4282,16,"verificationId"],[4264,26,4282,30],[4264,29,4282,33],[4264,33,4282,37],[4264,34,4282,38,"params"],[4264,40,4282,44],[4264,41,4282,45,"verificationId"],[4264,55,4282,59],[4265,6,4283,8],[4266,6,4284,8],[4266,13,4284,15,"obj"],[4266,16,4284,18],[4267,4,4285,4],[4268,4,4286,4],[4269,4,4287,4],[4269,11,4287,11,"fromJSON"],[4269,19,4287,19,"fromJSON"],[4269,20,4287,20,"json"],[4269,24,4287,24],[4269,26,4287,26],[4270,6,4288,8],[4270,10,4288,12],[4270,17,4288,19,"json"],[4270,21,4288,23],[4270,26,4288,28],[4270,34,4288,36],[4270,36,4288,38],[4271,8,4289,12,"json"],[4271,12,4289,16],[4271,15,4289,19,"JSON"],[4271,19,4289,23],[4271,20,4289,24,"parse"],[4271,25,4289,29],[4271,26,4289,30,"json"],[4271,30,4289,34],[4271,31,4289,35],[4272,6,4290,8],[4273,6,4291,8],[4273,12,4291,14],[4274,8,4291,16,"verificationId"],[4274,22,4291,30],[4275,8,4291,32,"verificationCode"],[4275,24,4291,48],[4276,8,4291,50,"phoneNumber"],[4276,19,4291,61],[4277,8,4291,63,"temporaryProof"],[4278,6,4291,78],[4278,7,4291,79],[4278,10,4291,82,"json"],[4278,14,4291,86],[4279,6,4292,8],[4279,10,4292,12],[4279,11,4292,13,"verificationCode"],[4279,27,4292,29],[4279,31,4293,12],[4279,32,4293,13,"verificationId"],[4279,46,4293,27],[4279,50,4294,12],[4279,51,4294,13,"phoneNumber"],[4279,62,4294,24],[4279,66,4295,12],[4279,67,4295,13,"temporaryProof"],[4279,81,4295,27],[4279,83,4295,29],[4280,8,4296,12],[4280,15,4296,19],[4280,19,4296,23],[4281,6,4297,8],[4282,6,4298,8],[4282,13,4298,15],[4282,17,4298,19,"PhoneAuthCredential"],[4282,36,4298,38],[4282,37,4298,39],[4283,8,4299,12,"verificationId"],[4283,22,4299,26],[4284,8,4300,12,"verificationCode"],[4284,24,4300,28],[4285,8,4301,12,"phoneNumber"],[4285,19,4301,23],[4286,8,4302,12,"temporaryProof"],[4287,6,4303,8],[4287,7,4303,9],[4287,8,4303,10],[4288,4,4304,4],[4289,2,4305,0],[4291,2,4307,0],[4292,0,4308,0],[4293,0,4309,0],[4294,0,4310,0],[4295,0,4311,0],[4296,0,4312,0],[4297,0,4313,0],[4298,0,4314,0],[4299,0,4315,0],[4300,0,4316,0],[4301,0,4317,0],[4302,0,4318,0],[4303,0,4319,0],[4304,0,4320,0],[4305,0,4321,0],[4306,0,4322,0],[4307,2,4323,0],[4308,0,4324,0],[4309,0,4325,0],[4310,0,4326,0],[4311,0,4327,0],[4312,2,4323,0,"exports"],[4312,9,4323,0],[4312,10,4323,0,"U"],[4312,11,4323,0],[4312,14,4323,0,"PhoneAuthCredential"],[4312,33,4323,0],[4313,2,4328,0],[4313,11,4328,9,"parseMode"],[4313,20,4328,18,"parseMode"],[4313,21,4328,19,"mode"],[4313,25,4328,23],[4313,27,4328,25],[4314,4,4329,4],[4314,12,4329,12,"mode"],[4314,16,4329,16],[4315,6,4330,8],[4315,11,4330,13],[4315,25,4330,27],[4316,8,4331,12],[4316,15,4331,19],[4316,30,4331,34],[4316,31,4331,35],[4317,6,4332,8],[4317,11,4332,13],[4317,26,4332,28],[4318,8,4333,12],[4318,15,4333,19],[4318,31,4333,35],[4318,32,4333,36],[4319,6,4334,8],[4319,11,4334,13],[4319,19,4334,21],[4320,8,4335,12],[4320,15,4335,19],[4320,29,4335,33],[4320,30,4335,34],[4321,6,4336,8],[4321,11,4336,13],[4321,24,4336,26],[4322,8,4337,12],[4322,15,4337,19],[4322,29,4337,33],[4322,30,4337,34],[4323,6,4338,8],[4323,11,4338,13],[4323,33,4338,35],[4324,8,4339,12],[4324,15,4339,19],[4324,40,4339,44],[4324,41,4339,45],[4325,6,4340,8],[4325,11,4340,13],[4325,39,4340,41],[4326,8,4341,12],[4326,15,4341,19],[4326,46,4341,50],[4326,47,4341,51],[4327,6,4342,8],[4328,8,4343,12],[4328,15,4343,19],[4328,19,4343,23],[4329,4,4344,4],[4330,2,4345,0],[4331,2,4346,0],[4332,0,4347,0],[4333,0,4348,0],[4334,0,4349,0],[4335,0,4350,0],[4336,2,4351,0],[4336,11,4351,9,"parseDeepLink"],[4336,24,4351,22,"parseDeepLink"],[4336,25,4351,23,"url"],[4336,28,4351,26],[4336,30,4351,28],[4337,4,4352,4],[4337,10,4352,10,"link"],[4337,14,4352,14],[4337,17,4352,17],[4337,21,4352,17,"querystringDecode"],[4337,44,4352,34],[4337,46,4352,35],[4337,50,4352,35,"extractQuerystring"],[4337,74,4352,53],[4337,76,4352,54,"url"],[4337,79,4352,57],[4337,80,4352,58],[4337,81,4352,59],[4337,82,4352,60],[4337,88,4352,66],[4337,89,4352,67],[4338,4,4353,4],[4339,4,4354,4],[4339,10,4354,10,"doubleDeepLink"],[4339,24,4354,24],[4339,27,4354,27,"link"],[4339,31,4354,31],[4339,34,4355,10],[4339,38,4355,10,"querystringDecode"],[4339,61,4355,27],[4339,63,4355,28],[4339,67,4355,28,"extractQuerystring"],[4339,91,4355,46],[4339,93,4355,47,"link"],[4339,97,4355,51],[4339,98,4355,52],[4339,99,4355,53],[4339,100,4355,54],[4339,114,4355,68],[4339,115,4355,69],[4339,118,4356,10],[4339,122,4356,14],[4340,4,4357,4],[4341,4,4358,4],[4341,10,4358,10,"iOSDeepLink"],[4341,21,4358,21],[4341,24,4358,24],[4341,28,4358,24,"querystringDecode"],[4341,51,4358,41],[4341,53,4358,42],[4341,57,4358,42,"extractQuerystring"],[4341,81,4358,60],[4341,83,4358,61,"url"],[4341,86,4358,64],[4341,87,4358,65],[4341,88,4358,66],[4341,89,4358,67],[4341,103,4358,81],[4341,104,4358,82],[4342,4,4359,4],[4342,10,4359,10,"iOSDoubleDeepLink"],[4342,27,4359,27],[4342,30,4359,30,"iOSDeepLink"],[4342,41,4359,41],[4342,44,4360,10],[4342,48,4360,10,"querystringDecode"],[4342,71,4360,27],[4342,73,4360,28],[4342,77,4360,28,"extractQuerystring"],[4342,101,4360,46],[4342,103,4360,47,"iOSDeepLink"],[4342,114,4360,58],[4342,115,4360,59],[4342,116,4360,60],[4342,117,4360,61],[4342,123,4360,67],[4342,124,4360,68],[4342,127,4361,10],[4342,131,4361,14],[4343,4,4362,4],[4343,11,4362,11,"iOSDoubleDeepLink"],[4343,28,4362,28],[4343,32,4362,32,"iOSDeepLink"],[4343,43,4362,43],[4343,47,4362,47,"doubleDeepLink"],[4343,61,4362,61],[4343,65,4362,65,"link"],[4343,69,4362,69],[4343,73,4362,73,"url"],[4343,76,4362,76],[4344,2,4363,0],[4345,2,4364,0],[4346,0,4365,0],[4347,0,4366,0],[4348,0,4367,0],[4349,0,4368,0],[4350,0,4369,0],[4351,2,4370,0],[4351,8,4370,6,"ActionCodeURL"],[4351,21,4370,19],[4351,22,4370,20],[4352,4,4371,4],[4353,0,4372,0],[4354,0,4373,0],[4355,0,4374,0],[4356,0,4375,0],[4357,0,4376,0],[4358,4,4377,4,"constructor"],[4358,15,4377,15,"constructor"],[4358,16,4377,16,"actionLink"],[4358,26,4377,26],[4358,28,4377,28],[4359,6,4378,8],[4359,12,4378,14,"searchParams"],[4359,24,4378,26],[4359,27,4378,29],[4359,31,4378,29,"querystringDecode"],[4359,54,4378,46],[4359,56,4378,47],[4359,60,4378,47,"extractQuerystring"],[4359,84,4378,65],[4359,86,4378,66,"actionLink"],[4359,96,4378,76],[4359,97,4378,77],[4359,98,4378,78],[4360,6,4379,8],[4360,12,4379,14,"apiKey"],[4360,18,4379,20],[4360,21,4379,23,"searchParams"],[4360,33,4379,35],[4360,34,4379,36],[4360,42,4379,44],[4360,43,4379,45],[4360,68,4379,70],[4360,72,4379,74],[4360,76,4379,78],[4361,6,4380,8],[4361,12,4380,14,"code"],[4361,16,4380,18],[4361,19,4380,21,"searchParams"],[4361,31,4380,33],[4361,32,4380,34],[4361,41,4380,43],[4361,42,4380,44],[4361,64,4380,66],[4361,68,4380,70],[4361,72,4380,74],[4362,6,4381,8],[4362,12,4381,14,"operation"],[4362,21,4381,23],[4362,24,4381,26,"parseMode"],[4362,33,4381,35],[4362,34,4381,36,"searchParams"],[4362,46,4381,48],[4362,47,4381,49],[4362,53,4381,55],[4362,54,4381,56],[4362,76,4381,78],[4362,80,4381,82],[4362,84,4381,86],[4362,85,4381,87],[4363,6,4382,8],[4364,6,4383,8,"_assert"],[4364,13,4383,15],[4364,14,4383,16,"apiKey"],[4364,20,4383,22],[4364,24,4383,26,"code"],[4364,28,4383,30],[4364,32,4383,34,"operation"],[4364,41,4383,43],[4364,43,4383,45],[4364,59,4383,61],[4364,60,4383,62],[4364,94,4383,96],[4364,95,4383,97],[4365,6,4384,8],[4365,10,4384,12],[4365,11,4384,13,"apiKey"],[4365,17,4384,19],[4365,20,4384,22,"apiKey"],[4365,26,4384,28],[4366,6,4385,8],[4366,10,4385,12],[4366,11,4385,13,"operation"],[4366,20,4385,22],[4366,23,4385,25,"operation"],[4366,32,4385,34],[4367,6,4386,8],[4367,10,4386,12],[4367,11,4386,13,"code"],[4367,15,4386,17],[4367,18,4386,20,"code"],[4367,22,4386,24],[4368,6,4387,8],[4368,10,4387,12],[4368,11,4387,13,"continueUrl"],[4368,22,4387,24],[4368,25,4387,27,"searchParams"],[4368,37,4387,39],[4368,38,4387,40],[4368,51,4387,53],[4368,52,4387,54],[4368,82,4387,84],[4368,86,4387,88],[4368,90,4387,92],[4369,6,4388,8],[4369,10,4388,12],[4369,11,4388,13,"languageCode"],[4369,23,4388,25],[4369,26,4388,28,"searchParams"],[4369,38,4388,40],[4369,39,4388,41],[4369,45,4388,47],[4369,46,4388,48],[4369,77,4388,79],[4369,81,4388,83],[4369,85,4388,87],[4370,6,4389,8],[4370,10,4389,12],[4370,11,4389,13,"tenantId"],[4370,19,4389,21],[4370,22,4389,24,"searchParams"],[4370,34,4389,36],[4370,35,4389,37],[4370,45,4389,47],[4370,46,4389,48],[4370,73,4389,75],[4370,77,4389,79],[4370,81,4389,83],[4371,4,4390,4],[4372,4,4391,4],[4373,0,4392,0],[4374,0,4393,0],[4375,0,4394,0],[4376,0,4395,0],[4377,0,4396,0],[4378,0,4397,0],[4379,0,4398,0],[4380,0,4399,0],[4381,4,4400,4],[4381,11,4400,11,"parseLink"],[4381,20,4400,20,"parseLink"],[4381,21,4400,21,"link"],[4381,25,4400,25],[4381,27,4400,27],[4382,6,4401,8],[4382,12,4401,14,"actionLink"],[4382,22,4401,24],[4382,25,4401,27,"parseDeepLink"],[4382,38,4401,40],[4382,39,4401,41,"link"],[4382,43,4401,45],[4382,44,4401,46],[4383,6,4402,8],[4383,10,4402,12],[4384,8,4403,12],[4384,15,4403,19],[4384,19,4403,23,"ActionCodeURL"],[4384,32,4403,36],[4384,33,4403,37,"actionLink"],[4384,43,4403,47],[4384,44,4403,48],[4385,6,4404,8],[4385,7,4404,9],[4385,8,4405,8],[4385,14,4405,14],[4386,8,4406,12],[4386,15,4406,19],[4386,19,4406,23],[4387,6,4407,8],[4388,4,4408,4],[4389,2,4409,0],[4390,2,4410,0],[4391,0,4411,0],[4392,0,4412,0],[4393,0,4413,0],[4394,0,4414,0],[4395,0,4415,0],[4396,2,4410,0,"exports"],[4396,9,4410,0],[4396,10,4410,0,"aj"],[4396,12,4410,0],[4396,15,4410,0,"ActionCodeURL"],[4396,28,4410,0],[4397,2,4416,0],[4397,11,4416,9,"parseActionCodeURL"],[4397,29,4416,27,"parseActionCodeURL"],[4397,30,4416,28,"link"],[4397,34,4416,32],[4397,36,4416,34],[4398,4,4417,4],[4398,11,4417,11,"ActionCodeURL"],[4398,24,4417,24],[4398,25,4417,25,"parseLink"],[4398,34,4417,34],[4398,35,4417,35,"link"],[4398,39,4417,39],[4398,40,4417,40],[4399,2,4418,0],[4401,2,4420,0],[4402,0,4421,0],[4403,0,4422,0],[4404,0,4423,0],[4405,0,4424,0],[4406,0,4425,0],[4407,0,4426,0],[4408,0,4427,0],[4409,0,4428,0],[4410,0,4429,0],[4411,0,4430,0],[4412,0,4431,0],[4413,0,4432,0],[4414,0,4433,0],[4415,0,4434,0],[4416,0,4435,0],[4417,2,4436,0],[4418,0,4437,0],[4419,0,4438,0],[4420,0,4439,0],[4421,0,4440,0],[4422,2,4441,0],[4422,8,4441,6,"EmailAuthProvider"],[4422,25,4441,23],[4422,26,4441,24],[4423,4,4442,4,"constructor"],[4423,15,4442,15,"constructor"],[4423,16,4442,15],[4423,18,4442,18],[4424,6,4443,8],[4425,0,4444,0],[4426,0,4445,0],[4427,6,4446,8],[4427,10,4446,12],[4427,11,4446,13,"providerId"],[4427,21,4446,23],[4427,24,4446,26,"EmailAuthProvider"],[4427,41,4446,43],[4427,42,4446,44,"PROVIDER_ID"],[4427,53,4446,55],[4428,4,4447,4],[4429,4,4448,4],[4430,0,4449,0],[4431,0,4450,0],[4432,0,4451,0],[4433,0,4452,0],[4434,0,4453,0],[4435,0,4454,0],[4436,0,4455,0],[4437,0,4456,0],[4438,0,4457,0],[4439,0,4458,0],[4440,0,4459,0],[4441,0,4460,0],[4442,0,4461,0],[4443,0,4462,0],[4444,0,4463,0],[4445,0,4464,0],[4446,0,4465,0],[4447,4,4466,4],[4447,11,4466,11,"credential"],[4447,21,4466,21,"credential"],[4447,22,4466,22,"email"],[4447,27,4466,27],[4447,29,4466,29,"password"],[4447,37,4466,37],[4447,39,4466,39],[4448,6,4467,8],[4448,13,4467,15,"EmailAuthCredential"],[4448,32,4467,34],[4448,33,4467,35,"_fromEmailAndPassword"],[4448,54,4467,56],[4448,55,4467,57,"email"],[4448,60,4467,62],[4448,62,4467,64,"password"],[4448,70,4467,72],[4448,71,4467,73],[4449,4,4468,4],[4450,4,4469,4],[4451,0,4470,0],[4452,0,4471,0],[4453,0,4472,0],[4454,0,4473,0],[4455,0,4474,0],[4456,0,4475,0],[4457,0,4476,0],[4458,0,4477,0],[4459,0,4478,0],[4460,0,4479,0],[4461,0,4480,0],[4462,0,4481,0],[4463,0,4482,0],[4464,0,4483,0],[4465,0,4484,0],[4466,0,4485,0],[4467,0,4486,0],[4468,0,4487,0],[4469,0,4488,0],[4470,0,4489,0],[4471,0,4490,0],[4472,4,4491,4],[4472,11,4491,11,"credentialWithLink"],[4472,29,4491,29,"credentialWithLink"],[4472,30,4491,30,"email"],[4472,35,4491,35],[4472,37,4491,37,"emailLink"],[4472,46,4491,46],[4472,48,4491,48],[4473,6,4492,8],[4473,12,4492,14,"actionCodeUrl"],[4473,25,4492,27],[4473,28,4492,30,"ActionCodeURL"],[4473,41,4492,43],[4473,42,4492,44,"parseLink"],[4473,51,4492,53],[4473,52,4492,54,"emailLink"],[4473,61,4492,63],[4473,62,4492,64],[4474,6,4493,8,"_assert"],[4474,13,4493,15],[4474,14,4493,16,"actionCodeUrl"],[4474,27,4493,29],[4474,29,4493,31],[4474,45,4493,47],[4474,46,4493,48],[4474,80,4493,82],[4474,81,4493,83],[4475,6,4494,8],[4475,13,4494,15,"EmailAuthCredential"],[4475,32,4494,34],[4475,33,4494,35,"_fromEmailAndCode"],[4475,50,4494,52],[4475,51,4494,53,"email"],[4475,56,4494,58],[4475,58,4494,60,"actionCodeUrl"],[4475,71,4494,73],[4475,72,4494,74,"code"],[4475,76,4494,78],[4475,78,4494,80,"actionCodeUrl"],[4475,91,4494,93],[4475,92,4494,94,"tenantId"],[4475,100,4494,102],[4475,101,4494,103],[4476,4,4495,4],[4477,2,4496,0],[4478,2,4497,0],[4479,0,4498,0],[4480,0,4499,0],[4481,2,4497,0,"exports"],[4481,9,4497,0],[4481,10,4497,0,"W"],[4481,11,4497,0],[4481,14,4497,0,"EmailAuthProvider"],[4481,31,4497,0],[4482,2,4500,0,"EmailAuthProvider"],[4482,19,4500,17],[4482,20,4500,18,"PROVIDER_ID"],[4482,31,4500,29],[4482,34,4500,32],[4482,44,4500,42],[4482,45,4500,43],[4483,2,4501,0],[4484,0,4502,0],[4485,0,4503,0],[4486,2,4504,0,"EmailAuthProvider"],[4486,19,4504,17],[4486,20,4504,18,"EMAIL_PASSWORD_SIGN_IN_METHOD"],[4486,49,4504,47],[4486,52,4504,50],[4486,62,4504,60],[4486,63,4504,61],[4487,2,4505,0],[4488,0,4506,0],[4489,0,4507,0],[4490,2,4508,0,"EmailAuthProvider"],[4490,19,4508,17],[4490,20,4508,18,"EMAIL_LINK_SIGN_IN_METHOD"],[4490,45,4508,43],[4490,48,4508,46],[4490,59,4508,57],[4490,60,4508,58],[4492,2,4510,0],[4493,0,4511,0],[4494,0,4512,0],[4495,0,4513,0],[4496,0,4514,0],[4497,0,4515,0],[4498,0,4516,0],[4499,0,4517,0],[4500,0,4518,0],[4501,0,4519,0],[4502,0,4520,0],[4503,0,4521,0],[4504,0,4522,0],[4505,0,4523,0],[4506,0,4524,0],[4507,0,4525,0],[4508,2,4526,0],[4509,0,4527,0],[4510,0,4528,0],[4511,0,4529,0],[4512,0,4530,0],[4513,0,4531,0],[4514,0,4532,0],[4515,2,4533,0],[4515,8,4533,6,"FederatedAuthProvider"],[4515,29,4533,27],[4515,30,4533,28],[4516,4,4534,4],[4517,0,4535,0],[4518,0,4536,0],[4519,0,4537,0],[4520,0,4538,0],[4521,4,4539,4,"constructor"],[4521,15,4539,15,"constructor"],[4521,16,4539,16,"providerId"],[4521,26,4539,26],[4521,28,4539,28],[4522,6,4540,8],[4522,10,4540,12],[4522,11,4540,13,"providerId"],[4522,21,4540,23],[4522,24,4540,26,"providerId"],[4522,34,4540,36],[4523,6,4541,8],[4524,6,4542,8],[4524,10,4542,12],[4524,11,4542,13,"defaultLanguageCode"],[4524,30,4542,32],[4524,33,4542,35],[4524,37,4542,39],[4525,6,4543,8],[4526,6,4544,8],[4526,10,4544,12],[4526,11,4544,13,"customParameters"],[4526,27,4544,29],[4526,30,4544,32],[4526,31,4544,33],[4526,32,4544,34],[4527,4,4545,4],[4528,4,4546,4],[4529,0,4547,0],[4530,0,4548,0],[4531,0,4549,0],[4532,0,4550,0],[4533,4,4551,4,"setDefaultLanguage"],[4533,22,4551,22,"setDefaultLanguage"],[4533,23,4551,23,"languageCode"],[4533,35,4551,35],[4533,37,4551,37],[4534,6,4552,8],[4534,10,4552,12],[4534,11,4552,13,"defaultLanguageCode"],[4534,30,4552,32],[4534,33,4552,35,"languageCode"],[4534,45,4552,47],[4535,4,4553,4],[4536,4,4554,4],[4537,0,4555,0],[4538,0,4556,0],[4539,0,4557,0],[4540,0,4558,0],[4541,0,4559,0],[4542,0,4560,0],[4543,0,4561,0],[4544,0,4562,0],[4545,0,4563,0],[4546,4,4564,4,"setCustomParameters"],[4546,23,4564,23,"setCustomParameters"],[4546,24,4564,24,"customOAuthParameters"],[4546,45,4564,45],[4546,47,4564,47],[4547,6,4565,8],[4547,10,4565,12],[4547,11,4565,13,"customParameters"],[4547,27,4565,29],[4547,30,4565,32,"customOAuthParameters"],[4547,51,4565,53],[4548,6,4566,8],[4548,13,4566,15],[4548,17,4566,19],[4549,4,4567,4],[4550,4,4568,4],[4551,0,4569,0],[4552,0,4570,0],[4553,4,4571,4,"getCustomParameters"],[4553,23,4571,23,"getCustomParameters"],[4553,24,4571,23],[4553,26,4571,26],[4554,6,4572,8],[4554,13,4572,15],[4554,17,4572,19],[4554,18,4572,20,"customParameters"],[4554,34,4572,36],[4555,4,4573,4],[4556,2,4574,0],[4558,2,4576,0],[4559,0,4577,0],[4560,0,4578,0],[4561,0,4579,0],[4562,0,4580,0],[4563,0,4581,0],[4564,0,4582,0],[4565,0,4583,0],[4566,0,4584,0],[4567,0,4585,0],[4568,0,4586,0],[4569,0,4587,0],[4570,0,4588,0],[4571,0,4589,0],[4572,0,4590,0],[4573,0,4591,0],[4574,2,4592,0],[4575,0,4593,0],[4576,0,4594,0],[4577,0,4595,0],[4578,0,4596,0],[4579,0,4597,0],[4580,2,4592,0,"exports"],[4580,9,4592,0],[4580,10,4592,0,"aG"],[4580,12,4592,0],[4580,15,4592,0,"FederatedAuthProvider"],[4580,36,4592,0],[4581,2,4598,0],[4581,8,4598,6,"BaseOAuthProvider"],[4581,25,4598,23],[4581,34,4598,32,"FederatedAuthProvider"],[4581,55,4598,53],[4581,56,4598,54],[4582,4,4599,4,"constructor"],[4582,15,4599,15,"constructor"],[4582,16,4599,15],[4582,18,4599,18],[4583,6,4600,8],[4583,11,4600,13],[4583,12,4600,14],[4583,15,4600,17,"arguments"],[4583,24,4600,26],[4583,25,4600,27],[4584,6,4601,8],[4585,6,4602,8],[4585,10,4602,12],[4585,11,4602,13,"scopes"],[4585,17,4602,19],[4585,20,4602,22],[4585,22,4602,24],[4586,4,4603,4],[4587,4,4604,4],[4588,0,4605,0],[4589,0,4606,0],[4590,0,4607,0],[4591,0,4608,0],[4592,4,4609,4,"addScope"],[4592,12,4609,12,"addScope"],[4592,13,4609,13,"scope"],[4592,18,4609,18],[4592,20,4609,20],[4593,6,4610,8],[4594,6,4611,8],[4594,10,4611,12],[4594,11,4611,13],[4594,15,4611,17],[4594,16,4611,18,"scopes"],[4594,22,4611,24],[4594,23,4611,25,"includes"],[4594,31,4611,33],[4594,32,4611,34,"scope"],[4594,37,4611,39],[4594,38,4611,40],[4594,40,4611,42],[4595,8,4612,12],[4595,12,4612,16],[4595,13,4612,17,"scopes"],[4595,19,4612,23],[4595,20,4612,24,"push"],[4595,24,4612,28],[4595,25,4612,29,"scope"],[4595,30,4612,34],[4595,31,4612,35],[4596,6,4613,8],[4597,6,4614,8],[4597,13,4614,15],[4597,17,4614,19],[4598,4,4615,4],[4599,4,4616,4],[4600,0,4617,0],[4601,0,4618,0],[4602,4,4619,4,"getScopes"],[4602,13,4619,13,"getScopes"],[4602,14,4619,13],[4602,16,4619,16],[4603,6,4620,8],[4603,13,4620,15],[4603,14,4620,16],[4603,17,4620,19],[4603,21,4620,23],[4603,22,4620,24,"scopes"],[4603,28,4620,30],[4603,29,4620,31],[4604,4,4621,4],[4605,2,4622,0],[4606,2,4623,0],[4607,0,4624,0],[4608,0,4625,0],[4609,0,4626,0],[4610,0,4627,0],[4611,0,4628,0],[4612,0,4629,0],[4613,0,4630,0],[4614,0,4631,0],[4615,0,4632,0],[4616,0,4633,0],[4617,0,4634,0],[4618,0,4635,0],[4619,0,4636,0],[4620,0,4637,0],[4621,0,4638,0],[4622,0,4639,0],[4623,0,4640,0],[4624,0,4641,0],[4625,0,4642,0],[4626,0,4643,0],[4627,0,4644,0],[4628,0,4645,0],[4629,0,4646,0],[4630,0,4647,0],[4631,0,4648,0],[4632,0,4649,0],[4633,0,4650,0],[4634,0,4651,0],[4635,0,4652,0],[4636,0,4653,0],[4637,0,4654,0],[4638,0,4655,0],[4639,0,4656,0],[4640,0,4657,0],[4641,0,4658,0],[4642,0,4659,0],[4643,0,4660,0],[4644,0,4661,0],[4645,0,4662,0],[4646,2,4623,0,"exports"],[4646,9,4623,0],[4646,10,4623,0,"aH"],[4646,12,4623,0],[4646,15,4623,0,"BaseOAuthProvider"],[4646,32,4623,0],[4647,2,4663,0],[4647,8,4663,6,"OAuthProvider"],[4647,21,4663,19],[4647,30,4663,28,"BaseOAuthProvider"],[4647,47,4663,45],[4647,48,4663,46],[4648,4,4664,4],[4649,0,4665,0],[4650,0,4666,0],[4651,0,4667,0],[4652,4,4668,4],[4652,11,4668,11,"credentialFromJSON"],[4652,29,4668,29,"credentialFromJSON"],[4652,30,4668,30,"json"],[4652,34,4668,34],[4652,36,4668,36],[4653,6,4669,8],[4653,12,4669,14,"obj"],[4653,15,4669,17],[4653,18,4669,20],[4653,25,4669,27,"json"],[4653,29,4669,31],[4653,34,4669,36],[4653,42,4669,44],[4653,45,4669,47,"JSON"],[4653,49,4669,51],[4653,50,4669,52,"parse"],[4653,55,4669,57],[4653,56,4669,58,"json"],[4653,60,4669,62],[4653,61,4669,63],[4653,64,4669,66,"json"],[4653,68,4669,70],[4654,6,4670,8,"_assert"],[4654,13,4670,15],[4654,14,4670,16],[4654,26,4670,28],[4654,30,4670,32,"obj"],[4654,33,4670,35],[4654,37,4670,39],[4654,51,4670,53],[4654,55,4670,57,"obj"],[4654,58,4670,60],[4654,60,4670,62],[4654,76,4670,78],[4654,77,4670,79],[4654,111,4670,113],[4654,112,4670,114],[4655,6,4671,8],[4655,13,4671,15,"OAuthCredential"],[4655,28,4671,30],[4655,29,4671,31,"_fromParams"],[4655,40,4671,42],[4655,41,4671,43,"obj"],[4655,44,4671,46],[4655,45,4671,47],[4656,4,4672,4],[4657,4,4673,4],[4658,0,4674,0],[4659,0,4675,0],[4660,0,4676,0],[4661,0,4677,0],[4662,0,4678,0],[4663,0,4679,0],[4664,0,4680,0],[4665,0,4681,0],[4666,0,4682,0],[4667,0,4683,0],[4668,0,4684,0],[4669,0,4685,0],[4670,0,4686,0],[4671,0,4687,0],[4672,0,4688,0],[4673,0,4689,0],[4674,0,4690,0],[4675,0,4691,0],[4676,0,4692,0],[4677,0,4693,0],[4678,4,4694,4,"credential"],[4678,14,4694,14,"credential"],[4678,15,4694,15,"params"],[4678,21,4694,21],[4678,23,4694,23],[4679,6,4695,8],[4679,13,4695,15],[4679,17,4695,19],[4679,18,4695,20,"_credential"],[4679,29,4695,31],[4679,30,4695,32],[4680,8,4695,34],[4680,11,4695,37,"params"],[4680,17,4695,43],[4681,8,4695,45,"nonce"],[4681,13,4695,50],[4681,15,4695,52,"params"],[4681,21,4695,58],[4681,22,4695,59,"rawNonce"],[4682,6,4695,68],[4682,7,4695,69],[4682,8,4695,70],[4683,4,4696,4],[4684,4,4697,4],[4685,4,4698,4,"_credential"],[4685,15,4698,15,"_credential"],[4685,16,4698,16,"params"],[4685,22,4698,22],[4685,24,4698,24],[4686,6,4699,8,"_assert"],[4686,13,4699,15],[4686,14,4699,16,"params"],[4686,20,4699,22],[4686,21,4699,23,"idToken"],[4686,28,4699,30],[4686,32,4699,34,"params"],[4686,38,4699,40],[4686,39,4699,41,"accessToken"],[4686,50,4699,52],[4686,52,4699,54],[4686,68,4699,70],[4686,69,4699,71],[4686,103,4699,105],[4686,104,4699,106],[4687,6,4700,8],[4688,6,4701,8],[4688,13,4701,15,"OAuthCredential"],[4688,28,4701,30],[4688,29,4701,31,"_fromParams"],[4688,40,4701,42],[4688,41,4701,43],[4689,8,4702,12],[4689,11,4702,15,"params"],[4689,17,4702,21],[4690,8,4703,12,"providerId"],[4690,18,4703,22],[4690,20,4703,24],[4690,24,4703,28],[4690,25,4703,29,"providerId"],[4690,35,4703,39],[4691,8,4704,12,"signInMethod"],[4691,20,4704,24],[4691,22,4704,26],[4691,26,4704,30],[4691,27,4704,31,"providerId"],[4692,6,4705,8],[4692,7,4705,9],[4692,8,4705,10],[4693,4,4706,4],[4694,4,4707,4],[4695,0,4708,0],[4696,0,4709,0],[4697,0,4710,0],[4698,0,4711,0],[4699,4,4712,4],[4699,11,4712,11,"credentialFromResult"],[4699,31,4712,31,"credentialFromResult"],[4699,32,4712,32,"userCredential"],[4699,46,4712,46],[4699,48,4712,48],[4700,6,4713,8],[4700,13,4713,15,"OAuthProvider"],[4700,26,4713,28],[4700,27,4713,29,"oauthCredentialFromTaggedObject"],[4700,58,4713,60],[4700,59,4713,61,"userCredential"],[4700,73,4713,75],[4700,74,4713,76],[4701,4,4714,4],[4702,4,4715,4],[4703,0,4716,0],[4704,0,4717,0],[4705,0,4718,0],[4706,0,4719,0],[4707,0,4720,0],[4708,4,4721,4],[4708,11,4721,11,"credentialFromError"],[4708,30,4721,30,"credentialFromError"],[4708,31,4721,31,"error"],[4708,36,4721,36],[4708,38,4721,38],[4709,6,4722,8],[4709,13,4722,15,"OAuthProvider"],[4709,26,4722,28],[4709,27,4722,29,"oauthCredentialFromTaggedObject"],[4709,58,4722,60],[4709,59,4722,62,"error"],[4709,64,4722,67],[4709,65,4722,68,"customData"],[4709,75,4722,78],[4709,79,4722,82],[4709,80,4722,83],[4709,81,4722,85],[4709,82,4722,86],[4710,4,4723,4],[4711,4,4724,4],[4711,11,4724,11,"oauthCredentialFromTaggedObject"],[4711,42,4724,42,"oauthCredentialFromTaggedObject"],[4711,43,4724,43],[4712,6,4724,45,"_tokenResponse"],[4712,20,4724,59],[4712,22,4724,61,"tokenResponse"],[4713,4,4724,75],[4713,5,4724,76],[4713,7,4724,78],[4714,6,4725,8],[4714,10,4725,12],[4714,11,4725,13,"tokenResponse"],[4714,24,4725,26],[4714,26,4725,28],[4715,8,4726,12],[4715,15,4726,19],[4715,19,4726,23],[4716,6,4727,8],[4717,6,4728,8],[4717,12,4728,14],[4718,8,4728,16,"oauthIdToken"],[4718,20,4728,28],[4719,8,4728,30,"oauthAccessToken"],[4719,24,4728,46],[4720,8,4728,48,"oauthTokenSecret"],[4720,24,4728,64],[4721,8,4728,66,"pendingToken"],[4721,20,4728,78],[4722,8,4728,80,"nonce"],[4722,13,4728,85],[4723,8,4728,87,"providerId"],[4724,6,4728,98],[4724,7,4728,99],[4724,10,4728,102,"tokenResponse"],[4724,23,4728,115],[4725,6,4729,8],[4725,10,4729,12],[4725,11,4729,13,"oauthAccessToken"],[4725,27,4729,29],[4725,31,4730,12],[4725,32,4730,13,"oauthTokenSecret"],[4725,48,4730,29],[4725,52,4731,12],[4725,53,4731,13,"oauthIdToken"],[4725,65,4731,25],[4725,69,4732,12],[4725,70,4732,13,"pendingToken"],[4725,82,4732,25],[4725,84,4732,27],[4726,8,4733,12],[4726,15,4733,19],[4726,19,4733,23],[4727,6,4734,8],[4728,6,4735,8],[4728,10,4735,12],[4728,11,4735,13,"providerId"],[4728,21,4735,23],[4728,23,4735,25],[4729,8,4736,12],[4729,15,4736,19],[4729,19,4736,23],[4730,6,4737,8],[4731,6,4738,8],[4731,10,4738,12],[4732,8,4739,12],[4732,15,4739,19],[4732,19,4739,23,"OAuthProvider"],[4732,32,4739,36],[4732,33,4739,37,"providerId"],[4732,43,4739,47],[4732,44,4739,48],[4732,45,4739,49,"_credential"],[4732,56,4739,60],[4732,57,4739,61],[4733,10,4740,16,"idToken"],[4733,17,4740,23],[4733,19,4740,25,"oauthIdToken"],[4733,31,4740,37],[4734,10,4741,16,"accessToken"],[4734,21,4741,27],[4734,23,4741,29,"oauthAccessToken"],[4734,39,4741,45],[4735,10,4742,16,"nonce"],[4735,15,4742,21],[4736,10,4743,16,"pendingToken"],[4737,8,4744,12],[4737,9,4744,13],[4737,10,4744,14],[4738,6,4745,8],[4738,7,4745,9],[4738,8,4746,8],[4738,15,4746,15,"e"],[4738,16,4746,16],[4738,18,4746,18],[4739,8,4747,12],[4739,15,4747,19],[4739,19,4747,23],[4740,6,4748,8],[4741,4,4749,4],[4742,2,4750,0],[4744,2,4752,0],[4745,0,4753,0],[4746,0,4754,0],[4747,0,4755,0],[4748,0,4756,0],[4749,0,4757,0],[4750,0,4758,0],[4751,0,4759,0],[4752,0,4760,0],[4753,0,4761,0],[4754,0,4762,0],[4755,0,4763,0],[4756,0,4764,0],[4757,0,4765,0],[4758,0,4766,0],[4759,0,4767,0],[4760,2,4768,0],[4761,0,4769,0],[4762,0,4770,0],[4763,0,4771,0],[4764,0,4772,0],[4765,0,4773,0],[4766,0,4774,0],[4767,0,4775,0],[4768,0,4776,0],[4769,0,4777,0],[4770,0,4778,0],[4771,0,4779,0],[4772,0,4780,0],[4773,0,4781,0],[4774,0,4782,0],[4775,0,4783,0],[4776,0,4784,0],[4777,0,4785,0],[4778,0,4786,0],[4779,0,4787,0],[4780,0,4788,0],[4781,0,4789,0],[4782,0,4790,0],[4783,0,4791,0],[4784,0,4792,0],[4785,0,4793,0],[4786,0,4794,0],[4787,0,4795,0],[4788,0,4796,0],[4789,0,4797,0],[4790,0,4798,0],[4791,0,4799,0],[4792,0,4800,0],[4793,0,4801,0],[4794,0,4802,0],[4795,0,4803,0],[4796,0,4804,0],[4797,0,4805,0],[4798,0,4806,0],[4799,2,4768,0,"exports"],[4799,9,4768,0],[4799,10,4768,0,"_"],[4799,11,4768,0],[4799,14,4768,0,"OAuthProvider"],[4799,27,4768,0],[4800,2,4807,0],[4800,8,4807,6,"FacebookAuthProvider"],[4800,28,4807,26],[4800,37,4807,35,"BaseOAuthProvider"],[4800,54,4807,52],[4800,55,4807,53],[4801,4,4808,4,"constructor"],[4801,15,4808,15,"constructor"],[4801,16,4808,15],[4801,18,4808,18],[4802,6,4809,8],[4802,11,4809,13],[4802,12,4809,14],[4802,26,4809,28],[4802,27,4809,29],[4802,52,4809,54],[4802,53,4809,55],[4803,4,4810,4],[4804,4,4811,4],[4805,0,4812,0],[4806,0,4813,0],[4807,0,4814,0],[4808,0,4815,0],[4809,0,4816,0],[4810,0,4817,0],[4811,0,4818,0],[4812,0,4819,0],[4813,0,4820,0],[4814,0,4821,0],[4815,0,4822,0],[4816,4,4823,4],[4816,11,4823,11,"credential"],[4816,21,4823,21,"credential"],[4816,22,4823,22,"accessToken"],[4816,33,4823,33],[4816,35,4823,35],[4817,6,4824,8],[4817,13,4824,15,"OAuthCredential"],[4817,28,4824,30],[4817,29,4824,31,"_fromParams"],[4817,40,4824,42],[4817,41,4824,43],[4818,8,4825,12,"providerId"],[4818,18,4825,22],[4818,20,4825,24,"FacebookAuthProvider"],[4818,40,4825,44],[4818,41,4825,45,"PROVIDER_ID"],[4818,52,4825,56],[4819,8,4826,12,"signInMethod"],[4819,20,4826,24],[4819,22,4826,26,"FacebookAuthProvider"],[4819,42,4826,46],[4819,43,4826,47,"FACEBOOK_SIGN_IN_METHOD"],[4819,66,4826,70],[4820,8,4827,12,"accessToken"],[4821,6,4828,8],[4821,7,4828,9],[4821,8,4828,10],[4822,4,4829,4],[4823,4,4830,4],[4824,0,4831,0],[4825,0,4832,0],[4826,0,4833,0],[4827,0,4834,0],[4828,4,4835,4],[4828,11,4835,11,"credentialFromResult"],[4828,31,4835,31,"credentialFromResult"],[4828,32,4835,32,"userCredential"],[4828,46,4835,46],[4828,48,4835,48],[4829,6,4836,8],[4829,13,4836,15,"FacebookAuthProvider"],[4829,33,4836,35],[4829,34,4836,36,"credentialFromTaggedObject"],[4829,60,4836,62],[4829,61,4836,63,"userCredential"],[4829,75,4836,77],[4829,76,4836,78],[4830,4,4837,4],[4831,4,4838,4],[4832,0,4839,0],[4833,0,4840,0],[4834,0,4841,0],[4835,0,4842,0],[4836,0,4843,0],[4837,4,4844,4],[4837,11,4844,11,"credentialFromError"],[4837,30,4844,30,"credentialFromError"],[4837,31,4844,31,"error"],[4837,36,4844,36],[4837,38,4844,38],[4838,6,4845,8],[4838,13,4845,15,"FacebookAuthProvider"],[4838,33,4845,35],[4838,34,4845,36,"credentialFromTaggedObject"],[4838,60,4845,62],[4838,61,4845,64,"error"],[4838,66,4845,69],[4838,67,4845,70,"customData"],[4838,77,4845,80],[4838,81,4845,84],[4838,82,4845,85],[4838,83,4845,87],[4838,84,4845,88],[4839,4,4846,4],[4840,4,4847,4],[4840,11,4847,11,"credentialFromTaggedObject"],[4840,37,4847,37,"credentialFromTaggedObject"],[4840,38,4847,38],[4841,6,4847,40,"_tokenResponse"],[4841,20,4847,54],[4841,22,4847,56,"tokenResponse"],[4842,4,4847,70],[4842,5,4847,71],[4842,7,4847,73],[4843,6,4848,8],[4843,10,4848,12],[4843,11,4848,13,"tokenResponse"],[4843,24,4848,26],[4843,28,4848,30],[4843,30,4848,32],[4843,48,4848,50],[4843,52,4848,54,"tokenResponse"],[4843,65,4848,67],[4843,66,4848,68],[4843,68,4848,70],[4844,8,4849,12],[4844,15,4849,19],[4844,19,4849,23],[4845,6,4850,8],[4846,6,4851,8],[4846,10,4851,12],[4846,11,4851,13,"tokenResponse"],[4846,24,4851,26],[4846,25,4851,27,"oauthAccessToken"],[4846,41,4851,43],[4846,43,4851,45],[4847,8,4852,12],[4847,15,4852,19],[4847,19,4852,23],[4848,6,4853,8],[4849,6,4854,8],[4849,10,4854,12],[4850,8,4855,12],[4850,15,4855,19,"FacebookAuthProvider"],[4850,35,4855,39],[4850,36,4855,40,"credential"],[4850,46,4855,50],[4850,47,4855,51,"tokenResponse"],[4850,60,4855,64],[4850,61,4855,65,"oauthAccessToken"],[4850,77,4855,81],[4850,78,4855,82],[4851,6,4856,8],[4851,7,4856,9],[4851,8,4857,8],[4851,14,4857,14],[4852,8,4858,12],[4852,15,4858,19],[4852,19,4858,23],[4853,6,4859,8],[4854,4,4860,4],[4855,2,4861,0],[4856,2,4862,0],[4857,2,4862,0,"exports"],[4857,9,4862,0],[4857,10,4862,0,"X"],[4857,11,4862,0],[4857,14,4862,0,"FacebookAuthProvider"],[4857,34,4862,0],[4858,2,4863,0,"FacebookAuthProvider"],[4858,22,4863,20],[4858,23,4863,21,"FACEBOOK_SIGN_IN_METHOD"],[4858,46,4863,44],[4858,49,4863,47],[4858,63,4863,61],[4858,64,4863,62],[4859,2,4864,0],[4860,2,4865,0,"FacebookAuthProvider"],[4860,22,4865,20],[4860,23,4865,21,"PROVIDER_ID"],[4860,34,4865,32],[4860,37,4865,35],[4860,51,4865,49],[4860,52,4865,50],[4862,2,4867,0],[4863,0,4868,0],[4864,0,4869,0],[4865,0,4870,0],[4866,0,4871,0],[4867,0,4872,0],[4868,0,4873,0],[4869,0,4874,0],[4870,0,4875,0],[4871,0,4876,0],[4872,0,4877,0],[4873,0,4878,0],[4874,0,4879,0],[4875,0,4880,0],[4876,0,4881,0],[4877,0,4882,0],[4878,2,4883,0],[4879,0,4884,0],[4880,0,4885,0],[4881,0,4886,0],[4882,0,4887,0],[4883,0,4888,0],[4884,0,4889,0],[4885,0,4890,0],[4886,0,4891,0],[4887,0,4892,0],[4888,0,4893,0],[4889,0,4894,0],[4890,0,4895,0],[4891,0,4896,0],[4892,0,4897,0],[4893,0,4898,0],[4894,0,4899,0],[4895,0,4900,0],[4896,0,4901,0],[4897,0,4902,0],[4898,0,4903,0],[4899,0,4904,0],[4900,0,4905,0],[4901,0,4906,0],[4902,0,4907,0],[4903,0,4908,0],[4904,0,4909,0],[4905,0,4910,0],[4906,0,4911,0],[4907,0,4912,0],[4908,0,4913,0],[4909,0,4914,0],[4910,0,4915,0],[4911,0,4916,0],[4912,0,4917,0],[4913,0,4918,0],[4914,0,4919,0],[4915,0,4920,0],[4916,0,4921,0],[4917,0,4922,0],[4918,0,4923,0],[4919,2,4924,0],[4919,8,4924,6,"GoogleAuthProvider"],[4919,26,4924,24],[4919,35,4924,33,"BaseOAuthProvider"],[4919,52,4924,50],[4919,53,4924,51],[4920,4,4925,4,"constructor"],[4920,15,4925,15,"constructor"],[4920,16,4925,15],[4920,18,4925,18],[4921,6,4926,8],[4921,11,4926,13],[4921,12,4926,14],[4921,24,4926,26],[4921,25,4926,27],[4921,48,4926,50],[4921,49,4926,51],[4922,6,4927,8],[4922,10,4927,12],[4922,11,4927,13,"addScope"],[4922,19,4927,21],[4922,20,4927,22],[4922,29,4927,31],[4922,30,4927,32],[4923,4,4928,4],[4924,4,4929,4],[4925,0,4930,0],[4926,0,4931,0],[4927,0,4932,0],[4928,0,4933,0],[4929,0,4934,0],[4930,0,4935,0],[4931,0,4936,0],[4932,0,4937,0],[4933,0,4938,0],[4934,0,4939,0],[4935,0,4940,0],[4936,0,4941,0],[4937,4,4942,4],[4937,11,4942,11,"credential"],[4937,21,4942,21,"credential"],[4937,22,4942,22,"idToken"],[4937,29,4942,29],[4937,31,4942,31,"accessToken"],[4937,42,4942,42],[4937,44,4942,44],[4938,6,4943,8],[4938,13,4943,15,"OAuthCredential"],[4938,28,4943,30],[4938,29,4943,31,"_fromParams"],[4938,40,4943,42],[4938,41,4943,43],[4939,8,4944,12,"providerId"],[4939,18,4944,22],[4939,20,4944,24,"GoogleAuthProvider"],[4939,38,4944,42],[4939,39,4944,43,"PROVIDER_ID"],[4939,50,4944,54],[4940,8,4945,12,"signInMethod"],[4940,20,4945,24],[4940,22,4945,26,"GoogleAuthProvider"],[4940,40,4945,44],[4940,41,4945,45,"GOOGLE_SIGN_IN_METHOD"],[4940,62,4945,66],[4941,8,4946,12,"idToken"],[4941,15,4946,19],[4942,8,4947,12,"accessToken"],[4943,6,4948,8],[4943,7,4948,9],[4943,8,4948,10],[4944,4,4949,4],[4945,4,4950,4],[4946,0,4951,0],[4947,0,4952,0],[4948,0,4953,0],[4949,0,4954,0],[4950,4,4955,4],[4950,11,4955,11,"credentialFromResult"],[4950,31,4955,31,"credentialFromResult"],[4950,32,4955,32,"userCredential"],[4950,46,4955,46],[4950,48,4955,48],[4951,6,4956,8],[4951,13,4956,15,"GoogleAuthProvider"],[4951,31,4956,33],[4951,32,4956,34,"credentialFromTaggedObject"],[4951,58,4956,60],[4951,59,4956,61,"userCredential"],[4951,73,4956,75],[4951,74,4956,76],[4952,4,4957,4],[4953,4,4958,4],[4954,0,4959,0],[4955,0,4960,0],[4956,0,4961,0],[4957,0,4962,0],[4958,0,4963,0],[4959,4,4964,4],[4959,11,4964,11,"credentialFromError"],[4959,30,4964,30,"credentialFromError"],[4959,31,4964,31,"error"],[4959,36,4964,36],[4959,38,4964,38],[4960,6,4965,8],[4960,13,4965,15,"GoogleAuthProvider"],[4960,31,4965,33],[4960,32,4965,34,"credentialFromTaggedObject"],[4960,58,4965,60],[4960,59,4965,62,"error"],[4960,64,4965,67],[4960,65,4965,68,"customData"],[4960,75,4965,78],[4960,79,4965,82],[4960,80,4965,83],[4960,81,4965,85],[4960,82,4965,86],[4961,4,4966,4],[4962,4,4967,4],[4962,11,4967,11,"credentialFromTaggedObject"],[4962,37,4967,37,"credentialFromTaggedObject"],[4962,38,4967,38],[4963,6,4967,40,"_tokenResponse"],[4963,20,4967,54],[4963,22,4967,56,"tokenResponse"],[4964,4,4967,70],[4964,5,4967,71],[4964,7,4967,73],[4965,6,4968,8],[4965,10,4968,12],[4965,11,4968,13,"tokenResponse"],[4965,24,4968,26],[4965,26,4968,28],[4966,8,4969,12],[4966,15,4969,19],[4966,19,4969,23],[4967,6,4970,8],[4968,6,4971,8],[4968,12,4971,14],[4969,8,4971,16,"oauthIdToken"],[4969,20,4971,28],[4970,8,4971,30,"oauthAccessToken"],[4971,6,4971,47],[4971,7,4971,48],[4971,10,4971,51,"tokenResponse"],[4971,23,4971,64],[4972,6,4972,8],[4972,10,4972,12],[4972,11,4972,13,"oauthIdToken"],[4972,23,4972,25],[4972,27,4972,29],[4972,28,4972,30,"oauthAccessToken"],[4972,44,4972,46],[4972,46,4972,48],[4973,8,4973,12],[4974,8,4974,12],[4974,15,4974,19],[4974,19,4974,23],[4975,6,4975,8],[4976,6,4976,8],[4976,10,4976,12],[4977,8,4977,12],[4977,15,4977,19,"GoogleAuthProvider"],[4977,33,4977,37],[4977,34,4977,38,"credential"],[4977,44,4977,48],[4977,45,4977,49,"oauthIdToken"],[4977,57,4977,61],[4977,59,4977,63,"oauthAccessToken"],[4977,75,4977,79],[4977,76,4977,80],[4978,6,4978,8],[4978,7,4978,9],[4978,8,4979,8],[4978,14,4979,14],[4979,8,4980,12],[4979,15,4980,19],[4979,19,4980,23],[4980,6,4981,8],[4981,4,4982,4],[4982,2,4983,0],[4983,2,4984,0],[4984,2,4984,0,"exports"],[4984,9,4984,0],[4984,10,4984,0,"Y"],[4984,11,4984,0],[4984,14,4984,0,"GoogleAuthProvider"],[4984,32,4984,0],[4985,2,4985,0,"GoogleAuthProvider"],[4985,20,4985,18],[4985,21,4985,19,"GOOGLE_SIGN_IN_METHOD"],[4985,42,4985,40],[4985,45,4985,43],[4985,57,4985,55],[4985,58,4985,56],[4986,2,4986,0],[4987,2,4987,0,"GoogleAuthProvider"],[4987,20,4987,18],[4987,21,4987,19,"PROVIDER_ID"],[4987,32,4987,30],[4987,35,4987,33],[4987,47,4987,45],[4987,48,4987,46],[4989,2,4989,0],[4990,0,4990,0],[4991,0,4991,0],[4992,0,4992,0],[4993,0,4993,0],[4994,0,4994,0],[4995,0,4995,0],[4996,0,4996,0],[4997,0,4997,0],[4998,0,4998,0],[4999,0,4999,0],[5000,0,5000,0],[5001,0,5001,0],[5002,0,5002,0],[5003,0,5003,0],[5004,0,5004,0],[5005,2,5005,0],[5006,0,5006,0],[5007,0,5007,0],[5008,0,5008,0],[5009,0,5009,0],[5010,0,5010,0],[5011,0,5011,0],[5012,0,5012,0],[5013,0,5013,0],[5014,0,5014,0],[5015,0,5015,0],[5016,0,5016,0],[5017,0,5017,0],[5018,0,5018,0],[5019,0,5019,0],[5020,0,5020,0],[5021,0,5021,0],[5022,0,5022,0],[5023,0,5023,0],[5024,0,5024,0],[5025,0,5025,0],[5026,0,5026,0],[5027,0,5027,0],[5028,0,5028,0],[5029,0,5029,0],[5030,0,5030,0],[5031,0,5031,0],[5032,0,5032,0],[5033,0,5033,0],[5034,0,5034,0],[5035,0,5035,0],[5036,0,5036,0],[5037,0,5037,0],[5038,0,5038,0],[5039,0,5039,0],[5040,0,5040,0],[5041,0,5041,0],[5042,0,5042,0],[5043,0,5043,0],[5044,0,5044,0],[5045,0,5045,0],[5046,0,5046,0],[5047,2,5047,0],[5047,8,5047,6,"GithubAuthProvider"],[5047,26,5047,24],[5047,35,5047,33,"BaseOAuthProvider"],[5047,52,5047,50],[5047,53,5047,51],[5048,4,5048,4,"constructor"],[5048,15,5048,15,"constructor"],[5048,16,5048,15],[5048,18,5048,18],[5049,6,5049,8],[5049,11,5049,13],[5049,12,5049,14],[5049,24,5049,26],[5049,25,5049,27],[5049,48,5049,50],[5049,49,5049,51],[5050,4,5050,4],[5051,4,5051,4],[5052,0,5052,0],[5053,0,5053,0],[5054,0,5054,0],[5055,0,5055,0],[5056,4,5056,4],[5056,11,5056,11,"credential"],[5056,21,5056,21,"credential"],[5056,22,5056,22,"accessToken"],[5056,33,5056,33],[5056,35,5056,35],[5057,6,5057,8],[5057,13,5057,15,"OAuthCredential"],[5057,28,5057,30],[5057,29,5057,31,"_fromParams"],[5057,40,5057,42],[5057,41,5057,43],[5058,8,5058,12,"providerId"],[5058,18,5058,22],[5058,20,5058,24,"GithubAuthProvider"],[5058,38,5058,42],[5058,39,5058,43,"PROVIDER_ID"],[5058,50,5058,54],[5059,8,5059,12,"signInMethod"],[5059,20,5059,24],[5059,22,5059,26,"GithubAuthProvider"],[5059,40,5059,44],[5059,41,5059,45,"GITHUB_SIGN_IN_METHOD"],[5059,62,5059,66],[5060,8,5060,12,"accessToken"],[5061,6,5061,8],[5061,7,5061,9],[5061,8,5061,10],[5062,4,5062,4],[5063,4,5063,4],[5064,0,5064,0],[5065,0,5065,0],[5066,0,5066,0],[5067,0,5067,0],[5068,4,5068,4],[5068,11,5068,11,"credentialFromResult"],[5068,31,5068,31,"credentialFromResult"],[5068,32,5068,32,"userCredential"],[5068,46,5068,46],[5068,48,5068,48],[5069,6,5069,8],[5069,13,5069,15,"GithubAuthProvider"],[5069,31,5069,33],[5069,32,5069,34,"credentialFromTaggedObject"],[5069,58,5069,60],[5069,59,5069,61,"userCredential"],[5069,73,5069,75],[5069,74,5069,76],[5070,4,5070,4],[5071,4,5071,4],[5072,0,5072,0],[5073,0,5073,0],[5074,0,5074,0],[5075,0,5075,0],[5076,0,5076,0],[5077,4,5077,4],[5077,11,5077,11,"credentialFromError"],[5077,30,5077,30,"credentialFromError"],[5077,31,5077,31,"error"],[5077,36,5077,36],[5077,38,5077,38],[5078,6,5078,8],[5078,13,5078,15,"GithubAuthProvider"],[5078,31,5078,33],[5078,32,5078,34,"credentialFromTaggedObject"],[5078,58,5078,60],[5078,59,5078,62,"error"],[5078,64,5078,67],[5078,65,5078,68,"customData"],[5078,75,5078,78],[5078,79,5078,82],[5078,80,5078,83],[5078,81,5078,85],[5078,82,5078,86],[5079,4,5079,4],[5080,4,5080,4],[5080,11,5080,11,"credentialFromTaggedObject"],[5080,37,5080,37,"credentialFromTaggedObject"],[5080,38,5080,38],[5081,6,5080,40,"_tokenResponse"],[5081,20,5080,54],[5081,22,5080,56,"tokenResponse"],[5082,4,5080,70],[5082,5,5080,71],[5082,7,5080,73],[5083,6,5081,8],[5083,10,5081,12],[5083,11,5081,13,"tokenResponse"],[5083,24,5081,26],[5083,28,5081,30],[5083,30,5081,32],[5083,48,5081,50],[5083,52,5081,54,"tokenResponse"],[5083,65,5081,67],[5083,66,5081,68],[5083,68,5081,70],[5084,8,5082,12],[5084,15,5082,19],[5084,19,5082,23],[5085,6,5083,8],[5086,6,5084,8],[5086,10,5084,12],[5086,11,5084,13,"tokenResponse"],[5086,24,5084,26],[5086,25,5084,27,"oauthAccessToken"],[5086,41,5084,43],[5086,43,5084,45],[5087,8,5085,12],[5087,15,5085,19],[5087,19,5085,23],[5088,6,5086,8],[5089,6,5087,8],[5089,10,5087,12],[5090,8,5088,12],[5090,15,5088,19,"GithubAuthProvider"],[5090,33,5088,37],[5090,34,5088,38,"credential"],[5090,44,5088,48],[5090,45,5088,49,"tokenResponse"],[5090,58,5088,62],[5090,59,5088,63,"oauthAccessToken"],[5090,75,5088,79],[5090,76,5088,80],[5091,6,5089,8],[5091,7,5089,9],[5091,8,5090,8],[5091,14,5090,14],[5092,8,5091,12],[5092,15,5091,19],[5092,19,5091,23],[5093,6,5092,8],[5094,4,5093,4],[5095,2,5094,0],[5096,2,5095,0],[5097,2,5095,0,"exports"],[5097,9,5095,0],[5097,10,5095,0,"Z"],[5097,11,5095,0],[5097,14,5095,0,"GithubAuthProvider"],[5097,32,5095,0],[5098,2,5096,0,"GithubAuthProvider"],[5098,20,5096,18],[5098,21,5096,19,"GITHUB_SIGN_IN_METHOD"],[5098,42,5096,40],[5098,45,5096,43],[5098,57,5096,55],[5098,58,5096,56],[5099,2,5097,0],[5100,2,5098,0,"GithubAuthProvider"],[5100,20,5098,18],[5100,21,5098,19,"PROVIDER_ID"],[5100,32,5098,30],[5100,35,5098,33],[5100,47,5098,45],[5100,48,5098,46],[5102,2,5100,0],[5103,0,5101,0],[5104,0,5102,0],[5105,0,5103,0],[5106,0,5104,0],[5107,0,5105,0],[5108,0,5106,0],[5109,0,5107,0],[5110,0,5108,0],[5111,0,5109,0],[5112,0,5110,0],[5113,0,5111,0],[5114,0,5112,0],[5115,0,5113,0],[5116,0,5114,0],[5117,0,5115,0],[5118,2,5116,0],[5118,8,5116,6,"IDP_REQUEST_URI"],[5118,23,5116,21],[5118,26,5116,24],[5118,44,5116,42],[5119,2,5117,0],[5120,0,5118,0],[5121,0,5119,0],[5122,2,5120,0],[5122,8,5120,6,"SAMLAuthCredential"],[5122,26,5120,24],[5122,35,5120,33,"AuthCredential"],[5122,49,5120,47],[5122,50,5120,48],[5123,4,5121,4],[5124,4,5122,4,"constructor"],[5124,15,5122,15,"constructor"],[5124,16,5122,16,"providerId"],[5124,26,5122,26],[5124,28,5122,28,"pendingToken"],[5124,40,5122,40],[5124,42,5122,42],[5125,6,5123,8],[5125,11,5123,13],[5125,12,5123,14,"providerId"],[5125,22,5123,24],[5125,24,5123,26,"providerId"],[5125,34,5123,36],[5125,35,5123,37],[5126,6,5124,8],[5126,10,5124,12],[5126,11,5124,13,"pendingToken"],[5126,23,5124,25],[5126,26,5124,28,"pendingToken"],[5126,38,5124,40],[5127,4,5125,4],[5128,4,5126,4],[5129,4,5127,4,"_getIdTokenResponse"],[5129,23,5127,23,"_getIdTokenResponse"],[5129,24,5127,24,"auth"],[5129,28,5127,28],[5129,30,5127,30],[5130,6,5128,8],[5130,12,5128,14,"request"],[5130,19,5128,21],[5130,22,5128,24],[5130,26,5128,28],[5130,27,5128,29,"buildRequest"],[5130,39,5128,41],[5130,40,5128,42],[5130,41,5128,43],[5131,6,5129,8],[5131,13,5129,15,"signInWithIdp"],[5131,26,5129,28],[5131,27,5129,29,"auth"],[5131,31,5129,33],[5131,33,5129,35,"request"],[5131,40,5129,42],[5131,41,5129,43],[5132,4,5130,4],[5133,4,5131,4],[5134,4,5132,4,"_linkToIdToken"],[5134,18,5132,18,"_linkToIdToken"],[5134,19,5132,19,"auth"],[5134,23,5132,23],[5134,25,5132,25,"idToken"],[5134,32,5132,32],[5134,34,5132,34],[5135,6,5133,8],[5135,12,5133,14,"request"],[5135,19,5133,21],[5135,22,5133,24],[5135,26,5133,28],[5135,27,5133,29,"buildRequest"],[5135,39,5133,41],[5135,40,5133,42],[5135,41,5133,43],[5136,6,5134,8,"request"],[5136,13,5134,15],[5136,14,5134,16,"idToken"],[5136,21,5134,23],[5136,24,5134,26,"idToken"],[5136,31,5134,33],[5137,6,5135,8],[5137,13,5135,15,"signInWithIdp"],[5137,26,5135,28],[5137,27,5135,29,"auth"],[5137,31,5135,33],[5137,33,5135,35,"request"],[5137,40,5135,42],[5137,41,5135,43],[5138,4,5136,4],[5139,4,5137,4],[5140,4,5138,4,"_getReauthenticationResolver"],[5140,32,5138,32,"_getReauthenticationResolver"],[5140,33,5138,33,"auth"],[5140,37,5138,37],[5140,39,5138,39],[5141,6,5139,8],[5141,12,5139,14,"request"],[5141,19,5139,21],[5141,22,5139,24],[5141,26,5139,28],[5141,27,5139,29,"buildRequest"],[5141,39,5139,41],[5141,40,5139,42],[5141,41,5139,43],[5142,6,5140,8,"request"],[5142,13,5140,15],[5142,14,5140,16,"autoCreate"],[5142,24,5140,26],[5142,27,5140,29],[5142,32,5140,34],[5143,6,5141,8],[5143,13,5141,15,"signInWithIdp"],[5143,26,5141,28],[5143,27,5141,29,"auth"],[5143,31,5141,33],[5143,33,5141,35,"request"],[5143,40,5141,42],[5143,41,5141,43],[5144,4,5142,4],[5145,4,5143,4],[5146,4,5144,4,"toJSON"],[5146,10,5144,10,"toJSON"],[5146,11,5144,10],[5146,13,5144,13],[5147,6,5145,8],[5147,13,5145,15],[5148,8,5146,12,"signInMethod"],[5148,20,5146,24],[5148,22,5146,26],[5148,26,5146,30],[5148,27,5146,31,"signInMethod"],[5148,39,5146,43],[5149,8,5147,12,"providerId"],[5149,18,5147,22],[5149,20,5147,24],[5149,24,5147,28],[5149,25,5147,29,"providerId"],[5149,35,5147,39],[5150,8,5148,12,"pendingToken"],[5150,20,5148,24],[5150,22,5148,26],[5150,26,5148,30],[5150,27,5148,31,"pendingToken"],[5151,6,5149,8],[5151,7,5149,9],[5152,4,5150,4],[5153,4,5151,4],[5154,0,5152,0],[5155,0,5153,0],[5156,0,5154,0],[5157,0,5155,0],[5158,0,5156,0],[5159,0,5157,0],[5160,0,5158,0],[5161,0,5159,0],[5162,4,5160,4],[5162,11,5160,11,"fromJSON"],[5162,19,5160,19,"fromJSON"],[5162,20,5160,20,"json"],[5162,24,5160,24],[5162,26,5160,26],[5163,6,5161,8],[5163,12,5161,14,"obj"],[5163,15,5161,17],[5163,18,5161,20],[5163,25,5161,27,"json"],[5163,29,5161,31],[5163,34,5161,36],[5163,42,5161,44],[5163,45,5161,47,"JSON"],[5163,49,5161,51],[5163,50,5161,52,"parse"],[5163,55,5161,57],[5163,56,5161,58,"json"],[5163,60,5161,62],[5163,61,5161,63],[5163,64,5161,66,"json"],[5163,68,5161,70],[5164,6,5162,8],[5164,12,5162,14],[5165,8,5162,16,"providerId"],[5165,18,5162,26],[5166,8,5162,28,"signInMethod"],[5166,20,5162,40],[5167,8,5162,42,"pendingToken"],[5168,6,5162,55],[5168,7,5162,56],[5168,10,5162,59,"obj"],[5168,13,5162,62],[5169,6,5163,8],[5169,10,5163,12],[5169,11,5163,13,"providerId"],[5169,21,5163,23],[5169,25,5164,12],[5169,26,5164,13,"signInMethod"],[5169,38,5164,25],[5169,42,5165,12],[5169,43,5165,13,"pendingToken"],[5169,55,5165,25],[5169,59,5166,12,"providerId"],[5169,69,5166,22],[5169,74,5166,27,"signInMethod"],[5169,86,5166,39],[5169,88,5166,41],[5170,8,5167,12],[5170,15,5167,19],[5170,19,5167,23],[5171,6,5168,8],[5172,6,5169,8],[5172,13,5169,15],[5172,17,5169,19,"SAMLAuthCredential"],[5172,35,5169,37],[5172,36,5169,38,"providerId"],[5172,46,5169,48],[5172,48,5169,50,"pendingToken"],[5172,60,5169,62],[5172,61,5169,63],[5173,4,5170,4],[5174,4,5171,4],[5175,0,5172,0],[5176,0,5173,0],[5177,0,5174,0],[5178,0,5175,0],[5179,4,5176,4],[5179,11,5176,11,"_create"],[5179,18,5176,18,"_create"],[5179,19,5176,19,"providerId"],[5179,29,5176,29],[5179,31,5176,31,"pendingToken"],[5179,43,5176,43],[5179,45,5176,45],[5180,6,5177,8],[5180,13,5177,15],[5180,17,5177,19,"SAMLAuthCredential"],[5180,35,5177,37],[5180,36,5177,38,"providerId"],[5180,46,5177,48],[5180,48,5177,50,"pendingToken"],[5180,60,5177,62],[5180,61,5177,63],[5181,4,5178,4],[5182,4,5179,4,"buildRequest"],[5182,16,5179,16,"buildRequest"],[5182,17,5179,16],[5182,19,5179,19],[5183,6,5180,8],[5183,13,5180,15],[5184,8,5181,12,"requestUri"],[5184,18,5181,22],[5184,20,5181,24,"IDP_REQUEST_URI"],[5184,35,5181,39],[5185,8,5182,12,"returnSecureToken"],[5185,25,5182,29],[5185,27,5182,31],[5185,31,5182,35],[5186,8,5183,12,"pendingToken"],[5186,20,5183,24],[5186,22,5183,26],[5186,26,5183,30],[5186,27,5183,31,"pendingToken"],[5187,6,5184,8],[5187,7,5184,9],[5188,4,5185,4],[5189,2,5186,0],[5191,2,5188,0],[5192,0,5189,0],[5193,0,5190,0],[5194,0,5191,0],[5195,0,5192,0],[5196,0,5193,0],[5197,0,5194,0],[5198,0,5195,0],[5199,0,5196,0],[5200,0,5197,0],[5201,0,5198,0],[5202,0,5199,0],[5203,0,5200,0],[5204,0,5201,0],[5205,0,5202,0],[5206,0,5203,0],[5207,2,5188,0,"exports"],[5207,9,5188,0],[5207,10,5188,0,"aU"],[5207,12,5188,0],[5207,15,5188,0,"SAMLAuthCredential"],[5207,33,5188,0],[5208,2,5204,0],[5208,8,5204,6,"SAML_PROVIDER_PREFIX"],[5208,28,5204,26],[5208,31,5204,29],[5208,38,5204,36],[5209,2,5205,0],[5210,0,5206,0],[5211,0,5207,0],[5212,0,5208,0],[5213,0,5209,0],[5214,2,5210,0],[5214,8,5210,6,"SAMLAuthProvider"],[5214,24,5210,22],[5214,33,5210,31,"FederatedAuthProvider"],[5214,54,5210,52],[5214,55,5210,53],[5215,4,5211,4],[5216,0,5212,0],[5217,0,5213,0],[5218,0,5214,0],[5219,4,5215,4,"constructor"],[5219,15,5215,15,"constructor"],[5219,16,5215,16,"providerId"],[5219,26,5215,26],[5219,28,5215,28],[5220,6,5216,8,"_assert"],[5220,13,5216,15],[5220,14,5216,16,"providerId"],[5220,24,5216,26],[5220,25,5216,27,"startsWith"],[5220,35,5216,37],[5220,36,5216,38,"SAML_PROVIDER_PREFIX"],[5220,56,5216,58],[5220,57,5216,59],[5220,59,5216,61],[5220,75,5216,77],[5220,76,5216,78],[5220,110,5216,112],[5220,111,5216,113],[5221,6,5217,8],[5221,11,5217,13],[5221,12,5217,14,"providerId"],[5221,22,5217,24],[5221,23,5217,25],[5222,4,5218,4],[5223,4,5219,4],[5224,0,5220,0],[5225,0,5221,0],[5226,0,5222,0],[5227,0,5223,0],[5228,0,5224,0],[5229,0,5225,0],[5230,0,5226,0],[5231,0,5227,0],[5232,0,5228,0],[5233,0,5229,0],[5234,0,5230,0],[5235,0,5231,0],[5236,0,5232,0],[5237,0,5233,0],[5238,0,5234,0],[5239,4,5235,4],[5239,11,5235,11,"credentialFromResult"],[5239,31,5235,31,"credentialFromResult"],[5239,32,5235,32,"userCredential"],[5239,46,5235,46],[5239,48,5235,48],[5240,6,5236,8],[5240,13,5236,15,"SAMLAuthProvider"],[5240,29,5236,31],[5240,30,5236,32,"samlCredentialFromTaggedObject"],[5240,60,5236,62],[5240,61,5236,63,"userCredential"],[5240,75,5236,77],[5240,76,5236,78],[5241,4,5237,4],[5242,4,5238,4],[5243,0,5239,0],[5244,0,5240,0],[5245,0,5241,0],[5246,0,5242,0],[5247,0,5243,0],[5248,4,5244,4],[5248,11,5244,11,"credentialFromError"],[5248,30,5244,30,"credentialFromError"],[5248,31,5244,31,"error"],[5248,36,5244,36],[5248,38,5244,38],[5249,6,5245,8],[5249,13,5245,15,"SAMLAuthProvider"],[5249,29,5245,31],[5249,30,5245,32,"samlCredentialFromTaggedObject"],[5249,60,5245,62],[5249,61,5245,64,"error"],[5249,66,5245,69],[5249,67,5245,70,"customData"],[5249,77,5245,80],[5249,81,5245,84],[5249,82,5245,85],[5249,83,5245,87],[5249,84,5245,88],[5250,4,5246,4],[5251,4,5247,4],[5252,0,5248,0],[5253,0,5249,0],[5254,0,5250,0],[5255,4,5251,4],[5255,11,5251,11,"credentialFromJSON"],[5255,29,5251,29,"credentialFromJSON"],[5255,30,5251,30,"json"],[5255,34,5251,34],[5255,36,5251,36],[5256,6,5252,8],[5256,12,5252,14,"credential"],[5256,22,5252,24],[5256,25,5252,27,"SAMLAuthCredential"],[5256,43,5252,45],[5256,44,5252,46,"fromJSON"],[5256,52,5252,54],[5256,53,5252,55,"json"],[5256,57,5252,59],[5256,58,5252,60],[5257,6,5253,8,"_assert"],[5257,13,5253,15],[5257,14,5253,16,"credential"],[5257,24,5253,26],[5257,26,5253,28],[5257,42,5253,44],[5257,43,5253,45],[5257,77,5253,79],[5257,78,5253,80],[5258,6,5254,8],[5258,13,5254,15,"credential"],[5258,23,5254,25],[5259,4,5255,4],[5260,4,5256,4],[5260,11,5256,11,"samlCredentialFromTaggedObject"],[5260,41,5256,41,"samlCredentialFromTaggedObject"],[5260,42,5256,42],[5261,6,5256,44,"_tokenResponse"],[5261,20,5256,58],[5261,22,5256,60,"tokenResponse"],[5262,4,5256,74],[5262,5,5256,75],[5262,7,5256,77],[5263,6,5257,8],[5263,10,5257,12],[5263,11,5257,13,"tokenResponse"],[5263,24,5257,26],[5263,26,5257,28],[5264,8,5258,12],[5264,15,5258,19],[5264,19,5258,23],[5265,6,5259,8],[5266,6,5260,8],[5266,12,5260,14],[5267,8,5260,16,"pendingToken"],[5267,20,5260,28],[5268,8,5260,30,"providerId"],[5269,6,5260,41],[5269,7,5260,42],[5269,10,5260,45,"tokenResponse"],[5269,23,5260,58],[5270,6,5261,8],[5270,10,5261,12],[5270,11,5261,13,"pendingToken"],[5270,23,5261,25],[5270,27,5261,29],[5270,28,5261,30,"providerId"],[5270,38,5261,40],[5270,40,5261,42],[5271,8,5262,12],[5271,15,5262,19],[5271,19,5262,23],[5272,6,5263,8],[5273,6,5264,8],[5273,10,5264,12],[5274,8,5265,12],[5274,15,5265,19,"SAMLAuthCredential"],[5274,33,5265,37],[5274,34,5265,38,"_create"],[5274,41,5265,45],[5274,42,5265,46,"providerId"],[5274,52,5265,56],[5274,54,5265,58,"pendingToken"],[5274,66,5265,70],[5274,67,5265,71],[5275,6,5266,8],[5275,7,5266,9],[5275,8,5267,8],[5275,15,5267,15,"e"],[5275,16,5267,16],[5275,18,5267,18],[5276,8,5268,12],[5276,15,5268,19],[5276,19,5268,23],[5277,6,5269,8],[5278,4,5270,4],[5279,2,5271,0],[5281,2,5273,0],[5282,0,5274,0],[5283,0,5275,0],[5284,0,5276,0],[5285,0,5277,0],[5286,0,5278,0],[5287,0,5279,0],[5288,0,5280,0],[5289,0,5281,0],[5290,0,5282,0],[5291,0,5283,0],[5292,0,5284,0],[5293,0,5285,0],[5294,0,5286,0],[5295,0,5287,0],[5296,0,5288,0],[5297,2,5289,0],[5298,0,5290,0],[5299,0,5291,0],[5300,0,5292,0],[5301,0,5293,0],[5302,0,5294,0],[5303,0,5295,0],[5304,0,5296,0],[5305,0,5297,0],[5306,0,5298,0],[5307,0,5299,0],[5308,0,5300,0],[5309,0,5301,0],[5310,0,5302,0],[5311,0,5303,0],[5312,0,5304,0],[5313,0,5305,0],[5314,0,5306,0],[5315,0,5307,0],[5316,0,5308,0],[5317,0,5309,0],[5318,0,5310,0],[5319,0,5311,0],[5320,0,5312,0],[5321,0,5313,0],[5322,0,5314,0],[5323,0,5315,0],[5324,0,5316,0],[5325,0,5317,0],[5326,0,5318,0],[5327,0,5319,0],[5328,0,5320,0],[5329,0,5321,0],[5330,0,5322,0],[5331,0,5323,0],[5332,0,5324,0],[5333,0,5325,0],[5334,0,5326,0],[5335,0,5327,0],[5336,2,5289,0,"exports"],[5336,9,5289,0],[5336,10,5289,0,"$"],[5336,11,5289,0],[5336,14,5289,0,"SAMLAuthProvider"],[5336,30,5289,0],[5337,2,5328,0],[5337,8,5328,6,"TwitterAuthProvider"],[5337,27,5328,25],[5337,36,5328,34,"BaseOAuthProvider"],[5337,53,5328,51],[5337,54,5328,52],[5338,4,5329,4,"constructor"],[5338,15,5329,15,"constructor"],[5338,16,5329,15],[5338,18,5329,18],[5339,6,5330,8],[5339,11,5330,13],[5339,12,5330,14],[5339,25,5330,27],[5339,26,5330,28],[5339,50,5330,52],[5339,51,5330,53],[5340,4,5331,4],[5341,4,5332,4],[5342,0,5333,0],[5343,0,5334,0],[5344,0,5335,0],[5345,0,5336,0],[5346,0,5337,0],[5347,4,5338,4],[5347,11,5338,11,"credential"],[5347,21,5338,21,"credential"],[5347,22,5338,22,"token"],[5347,27,5338,27],[5347,29,5338,29,"secret"],[5347,35,5338,35],[5347,37,5338,37],[5348,6,5339,8],[5348,13,5339,15,"OAuthCredential"],[5348,28,5339,30],[5348,29,5339,31,"_fromParams"],[5348,40,5339,42],[5348,41,5339,43],[5349,8,5340,12,"providerId"],[5349,18,5340,22],[5349,20,5340,24,"TwitterAuthProvider"],[5349,39,5340,43],[5349,40,5340,44,"PROVIDER_ID"],[5349,51,5340,55],[5350,8,5341,12,"signInMethod"],[5350,20,5341,24],[5350,22,5341,26,"TwitterAuthProvider"],[5350,41,5341,45],[5350,42,5341,46,"TWITTER_SIGN_IN_METHOD"],[5350,64,5341,68],[5351,8,5342,12,"oauthToken"],[5351,18,5342,22],[5351,20,5342,24,"token"],[5351,25,5342,29],[5352,8,5343,12,"oauthTokenSecret"],[5352,24,5343,28],[5352,26,5343,30,"secret"],[5353,6,5344,8],[5353,7,5344,9],[5353,8,5344,10],[5354,4,5345,4],[5355,4,5346,4],[5356,0,5347,0],[5357,0,5348,0],[5358,0,5349,0],[5359,0,5350,0],[5360,4,5351,4],[5360,11,5351,11,"credentialFromResult"],[5360,31,5351,31,"credentialFromResult"],[5360,32,5351,32,"userCredential"],[5360,46,5351,46],[5360,48,5351,48],[5361,6,5352,8],[5361,13,5352,15,"TwitterAuthProvider"],[5361,32,5352,34],[5361,33,5352,35,"credentialFromTaggedObject"],[5361,59,5352,61],[5361,60,5352,62,"userCredential"],[5361,74,5352,76],[5361,75,5352,77],[5362,4,5353,4],[5363,4,5354,4],[5364,0,5355,0],[5365,0,5356,0],[5366,0,5357,0],[5367,0,5358,0],[5368,0,5359,0],[5369,4,5360,4],[5369,11,5360,11,"credentialFromError"],[5369,30,5360,30,"credentialFromError"],[5369,31,5360,31,"error"],[5369,36,5360,36],[5369,38,5360,38],[5370,6,5361,8],[5370,13,5361,15,"TwitterAuthProvider"],[5370,32,5361,34],[5370,33,5361,35,"credentialFromTaggedObject"],[5370,59,5361,61],[5370,60,5361,63,"error"],[5370,65,5361,68],[5370,66,5361,69,"customData"],[5370,76,5361,79],[5370,80,5361,83],[5370,81,5361,84],[5370,82,5361,86],[5370,83,5361,87],[5371,4,5362,4],[5372,4,5363,4],[5372,11,5363,11,"credentialFromTaggedObject"],[5372,37,5363,37,"credentialFromTaggedObject"],[5372,38,5363,38],[5373,6,5363,40,"_tokenResponse"],[5373,20,5363,54],[5373,22,5363,56,"tokenResponse"],[5374,4,5363,70],[5374,5,5363,71],[5374,7,5363,73],[5375,6,5364,8],[5375,10,5364,12],[5375,11,5364,13,"tokenResponse"],[5375,24,5364,26],[5375,26,5364,28],[5376,8,5365,12],[5376,15,5365,19],[5376,19,5365,23],[5377,6,5366,8],[5378,6,5367,8],[5378,12,5367,14],[5379,8,5367,16,"oauthAccessToken"],[5379,24,5367,32],[5380,8,5367,34,"oauthTokenSecret"],[5381,6,5367,51],[5381,7,5367,52],[5381,10,5367,55,"tokenResponse"],[5381,23,5367,68],[5382,6,5368,8],[5382,10,5368,12],[5382,11,5368,13,"oauthAccessToken"],[5382,27,5368,29],[5382,31,5368,33],[5382,32,5368,34,"oauthTokenSecret"],[5382,48,5368,50],[5382,50,5368,52],[5383,8,5369,12],[5383,15,5369,19],[5383,19,5369,23],[5384,6,5370,8],[5385,6,5371,8],[5385,10,5371,12],[5386,8,5372,12],[5386,15,5372,19,"TwitterAuthProvider"],[5386,34,5372,38],[5386,35,5372,39,"credential"],[5386,45,5372,49],[5386,46,5372,50,"oauthAccessToken"],[5386,62,5372,66],[5386,64,5372,68,"oauthTokenSecret"],[5386,80,5372,84],[5386,81,5372,85],[5387,6,5373,8],[5387,7,5373,9],[5387,8,5374,8],[5387,14,5374,14],[5388,8,5375,12],[5388,15,5375,19],[5388,19,5375,23],[5389,6,5376,8],[5390,4,5377,4],[5391,2,5378,0],[5392,2,5379,0],[5393,2,5379,0,"exports"],[5393,9,5379,0],[5393,10,5379,0,"a0"],[5393,12,5379,0],[5393,15,5379,0,"TwitterAuthProvider"],[5393,34,5379,0],[5394,2,5380,0,"TwitterAuthProvider"],[5394,21,5380,19],[5394,22,5380,20,"TWITTER_SIGN_IN_METHOD"],[5394,44,5380,42],[5394,47,5380,45],[5394,60,5380,58],[5394,61,5380,59],[5395,2,5381,0],[5396,2,5382,0,"TwitterAuthProvider"],[5396,21,5382,19],[5396,22,5382,20,"PROVIDER_ID"],[5396,33,5382,31],[5396,36,5382,34],[5396,49,5382,47],[5396,50,5382,48],[5398,2,5384,0],[5399,0,5385,0],[5400,0,5386,0],[5401,0,5387,0],[5402,0,5388,0],[5403,0,5389,0],[5404,0,5390,0],[5405,0,5391,0],[5406,0,5392,0],[5407,0,5393,0],[5408,0,5394,0],[5409,0,5395,0],[5410,0,5396,0],[5411,0,5397,0],[5412,0,5398,0],[5413,0,5399,0],[5414,2,5400,0],[5414,17,5400,15,"signUp"],[5414,23,5400,21,"signUp"],[5414,24,5400,22,"auth"],[5414,28,5400,26],[5414,30,5400,28,"request"],[5414,37,5400,35],[5414,39,5400,37],[5415,4,5401,4],[5415,11,5401,11,"_performSignInRequest"],[5415,32,5401,32],[5415,33,5401,33,"auth"],[5415,37,5401,37],[5415,39,5401,39],[5415,45,5401,45],[5415,46,5401,46],[5415,69,5401,69],[5415,90,5401,90],[5415,91,5401,91],[5415,115,5401,115,"_addTidIfNecessary"],[5415,133,5401,133],[5415,134,5401,134,"auth"],[5415,138,5401,138],[5415,140,5401,140,"request"],[5415,147,5401,147],[5415,148,5401,148],[5415,149,5401,149],[5416,2,5402,0],[5418,2,5404,0],[5419,0,5405,0],[5420,0,5406,0],[5421,0,5407,0],[5422,0,5408,0],[5423,0,5409,0],[5424,0,5410,0],[5425,0,5411,0],[5426,0,5412,0],[5427,0,5413,0],[5428,0,5414,0],[5429,0,5415,0],[5430,0,5416,0],[5431,0,5417,0],[5432,0,5418,0],[5433,0,5419,0],[5434,2,5420,0],[5434,8,5420,6,"UserCredentialImpl"],[5434,26,5420,24],[5434,27,5420,25],[5435,4,5421,4,"constructor"],[5435,15,5421,15,"constructor"],[5435,16,5421,16,"params"],[5435,22,5421,22],[5435,24,5421,24],[5436,6,5422,8],[5436,10,5422,12],[5436,11,5422,13,"user"],[5436,15,5422,17],[5436,18,5422,20,"params"],[5436,24,5422,26],[5436,25,5422,27,"user"],[5436,29,5422,31],[5437,6,5423,8],[5437,10,5423,12],[5437,11,5423,13,"providerId"],[5437,21,5423,23],[5437,24,5423,26,"params"],[5437,30,5423,32],[5437,31,5423,33,"providerId"],[5437,41,5423,43],[5438,6,5424,8],[5438,10,5424,12],[5438,11,5424,13,"_tokenResponse"],[5438,25,5424,27],[5438,28,5424,30,"params"],[5438,34,5424,36],[5438,35,5424,37,"_tokenResponse"],[5438,49,5424,51],[5439,6,5425,8],[5439,10,5425,12],[5439,11,5425,13,"operationType"],[5439,24,5425,26],[5439,27,5425,29,"params"],[5439,33,5425,35],[5439,34,5425,36,"operationType"],[5439,47,5425,49],[5440,4,5426,4],[5441,4,5427,4],[5441,17,5427,17,"_fromIdTokenResponse"],[5441,37,5427,37,"_fromIdTokenResponse"],[5441,38,5427,38,"auth"],[5441,42,5427,42],[5441,44,5427,44,"operationType"],[5441,57,5427,57],[5441,59,5427,59,"idTokenResponse"],[5441,74,5427,74],[5441,76,5427,76,"isAnonymous"],[5441,87,5427,87],[5441,90,5427,90],[5441,95,5427,95],[5441,97,5427,97],[5442,6,5428,8],[5442,12,5428,14,"user"],[5442,16,5428,18],[5442,19,5428,21],[5442,25,5428,27,"UserImpl"],[5442,33,5428,35],[5442,34,5428,36,"_fromIdTokenResponse"],[5442,54,5428,56],[5442,55,5428,57,"auth"],[5442,59,5428,61],[5442,61,5428,63,"idTokenResponse"],[5442,76,5428,78],[5442,78,5428,80,"isAnonymous"],[5442,89,5428,91],[5442,90,5428,92],[5443,6,5429,8],[5443,12,5429,14,"providerId"],[5443,22,5429,24],[5443,25,5429,27,"providerIdForResponse"],[5443,46,5429,48],[5443,47,5429,49,"idTokenResponse"],[5443,62,5429,64],[5443,63,5429,65],[5444,6,5430,8],[5444,12,5430,14,"userCred"],[5444,20,5430,22],[5444,23,5430,25],[5444,27,5430,29,"UserCredentialImpl"],[5444,45,5430,47],[5444,46,5430,48],[5445,8,5431,12,"user"],[5445,12,5431,16],[5446,8,5432,12,"providerId"],[5446,18,5432,22],[5447,8,5433,12,"_tokenResponse"],[5447,22,5433,26],[5447,24,5433,28,"idTokenResponse"],[5447,39,5433,43],[5448,8,5434,12,"operationType"],[5449,6,5435,8],[5449,7,5435,9],[5449,8,5435,10],[5450,6,5436,8],[5450,13,5436,15,"userCred"],[5450,21,5436,23],[5451,4,5437,4],[5452,4,5438,4],[5452,17,5438,17,"_forOperation"],[5452,30,5438,30,"_forOperation"],[5452,31,5438,31,"user"],[5452,35,5438,35],[5452,37,5438,37,"operationType"],[5452,50,5438,50],[5452,52,5438,52,"response"],[5452,60,5438,60],[5452,62,5438,62],[5453,6,5439,8],[5453,12,5439,14,"user"],[5453,16,5439,18],[5453,17,5439,19,"_updateTokensIfNecessary"],[5453,41,5439,43],[5453,42,5439,44,"response"],[5453,50,5439,52],[5453,52,5439,54],[5453,64,5439,67],[5453,68,5439,71],[5453,69,5439,72],[5454,6,5440,8],[5454,12,5440,14,"providerId"],[5454,22,5440,24],[5454,25,5440,27,"providerIdForResponse"],[5454,46,5440,48],[5454,47,5440,49,"response"],[5454,55,5440,57],[5454,56,5440,58],[5455,6,5441,8],[5455,13,5441,15],[5455,17,5441,19,"UserCredentialImpl"],[5455,35,5441,37],[5455,36,5441,38],[5456,8,5442,12,"user"],[5456,12,5442,16],[5457,8,5443,12,"providerId"],[5457,18,5443,22],[5458,8,5444,12,"_tokenResponse"],[5458,22,5444,26],[5458,24,5444,28,"response"],[5458,32,5444,36],[5459,8,5445,12,"operationType"],[5460,6,5446,8],[5460,7,5446,9],[5460,8,5446,10],[5461,4,5447,4],[5462,2,5448,0],[5463,2,5449,0],[5463,11,5449,9,"providerIdForResponse"],[5463,32,5449,30,"providerIdForResponse"],[5463,33,5449,31,"response"],[5463,41,5449,39],[5463,43,5449,41],[5464,4,5450,4],[5464,8,5450,8,"response"],[5464,16,5450,16],[5464,17,5450,17,"providerId"],[5464,27,5450,27],[5464,29,5450,29],[5465,6,5451,8],[5465,13,5451,15,"response"],[5465,21,5451,23],[5465,22,5451,24,"providerId"],[5465,32,5451,34],[5466,4,5452,4],[5467,4,5453,4],[5467,8,5453,8],[5467,21,5453,21],[5467,25,5453,25,"response"],[5467,33,5453,33],[5467,35,5453,35],[5468,6,5454,8],[5468,13,5454,15],[5468,20,5454,22],[5468,21,5454,23],[5469,4,5455,4],[5470,4,5456,4],[5470,11,5456,11],[5470,15,5456,15],[5471,2,5457,0],[5473,2,5459,0],[5474,0,5460,0],[5475,0,5461,0],[5476,0,5462,0],[5477,0,5463,0],[5478,0,5464,0],[5479,0,5465,0],[5480,0,5466,0],[5481,0,5467,0],[5482,0,5468,0],[5483,0,5469,0],[5484,0,5470,0],[5485,0,5471,0],[5486,0,5472,0],[5487,0,5473,0],[5488,0,5474,0],[5489,2,5475,0],[5490,0,5476,0],[5491,0,5477,0],[5492,0,5478,0],[5493,0,5479,0],[5494,0,5480,0],[5495,0,5481,0],[5496,0,5482,0],[5497,0,5483,0],[5498,0,5484,0],[5499,0,5485,0],[5500,0,5486,0],[5501,0,5487,0],[5502,0,5488,0],[5503,2,5489,0],[5503,17,5489,15,"signInAnonymously"],[5503,34,5489,32,"signInAnonymously"],[5503,35,5489,33,"auth"],[5503,39,5489,37],[5503,41,5489,39],[5504,4,5490,4],[5504,8,5490,8],[5504,12,5490,8,"_isFirebaseServerApp"],[5504,37,5490,28],[5504,39,5490,29,"auth"],[5504,43,5490,33],[5504,44,5490,34,"app"],[5504,47,5490,37],[5504,48,5490,38],[5504,50,5490,40],[5505,6,5491,8],[5505,13,5491,15,"Promise"],[5505,20,5491,22],[5505,21,5491,23,"reject"],[5505,27,5491,29],[5505,28,5491,30,"_serverAppCurrentUserOperationNotSupportedError"],[5505,75,5491,77],[5505,76,5491,78,"auth"],[5505,80,5491,82],[5505,81,5491,83],[5505,82,5491,84],[5506,4,5492,4],[5507,4,5493,4],[5507,10,5493,10,"authInternal"],[5507,22,5493,22],[5507,25,5493,25,"_castAuth"],[5507,34,5493,34],[5507,35,5493,35,"auth"],[5507,39,5493,39],[5507,40,5493,40],[5508,4,5494,4],[5508,10,5494,10,"authInternal"],[5508,22,5494,22],[5508,23,5494,23,"_initializationPromise"],[5508,45,5494,45],[5509,4,5495,4],[5509,8,5495,8,"authInternal"],[5509,20,5495,20],[5509,21,5495,21,"currentUser"],[5509,32,5495,32],[5509,34,5495,34,"isAnonymous"],[5509,45,5495,45],[5509,47,5495,47],[5510,6,5496,8],[5511,6,5497,8],[5511,13,5497,15],[5511,17,5497,19,"UserCredentialImpl"],[5511,35,5497,37],[5511,36,5497,38],[5512,8,5498,12,"user"],[5512,12,5498,16],[5512,14,5498,18,"authInternal"],[5512,26,5498,30],[5512,27,5498,31,"currentUser"],[5512,38,5498,42],[5513,8,5499,12,"providerId"],[5513,18,5499,22],[5513,20,5499,24],[5513,24,5499,28],[5514,8,5500,12,"operationType"],[5514,21,5500,25],[5514,23,5500,27],[5514,31,5500,35],[5514,32,5500,36],[5515,6,5501,8],[5515,7,5501,9],[5515,8,5501,10],[5516,4,5502,4],[5517,4,5503,4],[5517,10,5503,10,"response"],[5517,18,5503,18],[5517,21,5503,21],[5517,27,5503,27,"signUp"],[5517,33,5503,33],[5517,34,5503,34,"authInternal"],[5517,46,5503,46],[5517,48,5503,48],[5518,6,5504,8,"returnSecureToken"],[5518,23,5504,25],[5518,25,5504,27],[5519,4,5505,4],[5519,5,5505,5],[5519,6,5505,6],[5520,4,5506,4],[5520,10,5506,10,"userCredential"],[5520,24,5506,24],[5520,27,5506,27],[5520,33,5506,33,"UserCredentialImpl"],[5520,51,5506,51],[5520,52,5506,52,"_fromIdTokenResponse"],[5520,72,5506,72],[5520,73,5506,73,"authInternal"],[5520,85,5506,85],[5520,87,5506,87],[5520,95,5506,95],[5520,96,5506,96],[5520,125,5506,125,"response"],[5520,133,5506,133],[5520,135,5506,135],[5520,139,5506,139],[5520,140,5506,140],[5521,4,5507,4],[5521,10,5507,10,"authInternal"],[5521,22,5507,22],[5521,23,5507,23,"_updateCurrentUser"],[5521,41,5507,41],[5521,42,5507,42,"userCredential"],[5521,56,5507,56],[5521,57,5507,57,"user"],[5521,61,5507,61],[5521,62,5507,62],[5522,4,5508,4],[5522,11,5508,11,"userCredential"],[5522,25,5508,25],[5523,2,5509,0],[5525,2,5511,0],[5526,0,5512,0],[5527,0,5513,0],[5528,0,5514,0],[5529,0,5515,0],[5530,0,5516,0],[5531,0,5517,0],[5532,0,5518,0],[5533,0,5519,0],[5534,0,5520,0],[5535,0,5521,0],[5536,0,5522,0],[5537,0,5523,0],[5538,0,5524,0],[5539,0,5525,0],[5540,0,5526,0],[5541,2,5527,0],[5541,8,5527,6,"MultiFactorError"],[5541,24,5527,22],[5541,33,5527,31,"FirebaseError"],[5541,52,5527,44],[5541,53,5527,45],[5542,4,5528,4,"constructor"],[5542,15,5528,15,"constructor"],[5542,16,5528,16,"auth"],[5542,20,5528,20],[5542,22,5528,22,"error"],[5542,27,5528,27],[5542,29,5528,29,"operationType"],[5542,42,5528,42],[5542,44,5528,44,"user"],[5542,48,5528,48],[5542,50,5528,50],[5543,6,5529,8],[5543,11,5529,13],[5543,12,5529,14,"error"],[5543,17,5529,19],[5543,18,5529,20,"code"],[5543,22,5529,24],[5543,24,5529,26,"error"],[5543,29,5529,31],[5543,30,5529,32,"message"],[5543,37,5529,39],[5543,38,5529,40],[5544,6,5530,8],[5544,10,5530,12],[5544,11,5530,13,"operationType"],[5544,24,5530,26],[5544,27,5530,29,"operationType"],[5544,40,5530,42],[5545,6,5531,8],[5545,10,5531,12],[5545,11,5531,13,"user"],[5545,15,5531,17],[5545,18,5531,20,"user"],[5545,22,5531,24],[5546,6,5532,8],[5547,6,5533,8,"Object"],[5547,12,5533,14],[5547,13,5533,15,"setPrototypeOf"],[5547,27,5533,29],[5547,28,5533,30],[5547,32,5533,34],[5547,34,5533,36,"MultiFactorError"],[5547,50,5533,52],[5547,51,5533,53,"prototype"],[5547,60,5533,62],[5547,61,5533,63],[5548,6,5534,8],[5548,10,5534,12],[5548,11,5534,13,"customData"],[5548,21,5534,23],[5548,24,5534,26],[5549,8,5535,12,"appName"],[5549,15,5535,19],[5549,17,5535,21,"auth"],[5549,21,5535,25],[5549,22,5535,26,"name"],[5549,26,5535,30],[5550,8,5536,12,"tenantId"],[5550,16,5536,20],[5550,18,5536,22,"auth"],[5550,22,5536,26],[5550,23,5536,27,"tenantId"],[5550,31,5536,35],[5550,35,5536,39,"undefined"],[5550,44,5536,48],[5551,8,5537,12,"_serverResponse"],[5551,23,5537,27],[5551,25,5537,29,"error"],[5551,30,5537,34],[5551,31,5537,35,"customData"],[5551,41,5537,45],[5551,42,5537,46,"_serverResponse"],[5551,57,5537,61],[5552,8,5538,12,"operationType"],[5553,6,5539,8],[5553,7,5539,9],[5554,4,5540,4],[5555,4,5541,4],[5555,11,5541,11,"_fromErrorAndOperation"],[5555,33,5541,33,"_fromErrorAndOperation"],[5555,34,5541,34,"auth"],[5555,38,5541,38],[5555,40,5541,40,"error"],[5555,45,5541,45],[5555,47,5541,47,"operationType"],[5555,60,5541,60],[5555,62,5541,62,"user"],[5555,66,5541,66],[5555,68,5541,68],[5556,6,5542,8],[5556,13,5542,15],[5556,17,5542,19,"MultiFactorError"],[5556,33,5542,35],[5556,34,5542,36,"auth"],[5556,38,5542,40],[5556,40,5542,42,"error"],[5556,45,5542,47],[5556,47,5542,49,"operationType"],[5556,60,5542,62],[5556,62,5542,64,"user"],[5556,66,5542,68],[5556,67,5542,69],[5557,4,5543,4],[5558,2,5544,0],[5559,2,5545,0],[5559,11,5545,9,"_processCredentialSavingMfaContextIfNecessary"],[5559,56,5545,54,"_processCredentialSavingMfaContextIfNecessary"],[5559,57,5545,55,"auth"],[5559,61,5545,59],[5559,63,5545,61,"operationType"],[5559,76,5545,74],[5559,78,5545,76,"credential"],[5559,88,5545,86],[5559,90,5545,88,"user"],[5559,94,5545,92],[5559,96,5545,94],[5560,4,5546,4],[5560,10,5546,10,"idTokenProvider"],[5560,25,5546,25],[5560,28,5546,28,"operationType"],[5560,41,5546,41],[5560,46,5546,46],[5560,62,5546,62],[5560,63,5546,63],[5560,100,5547,10,"credential"],[5560,110,5547,20],[5560,111,5547,21,"_getReauthenticationResolver"],[5560,139,5547,49],[5560,140,5547,50,"auth"],[5560,144,5547,54],[5560,145,5547,55],[5560,148,5548,10,"credential"],[5560,158,5548,20],[5560,159,5548,21,"_getIdTokenResponse"],[5560,178,5548,40],[5560,179,5548,41,"auth"],[5560,183,5548,45],[5560,184,5548,46],[5561,4,5549,4],[5561,11,5549,11,"idTokenProvider"],[5561,26,5549,26],[5561,27,5549,27,"catch"],[5561,32,5549,32],[5561,33,5549,33,"error"],[5561,38,5549,38],[5561,42,5549,42],[5562,6,5550,8],[5562,10,5550,12,"error"],[5562,15,5550,17],[5562,16,5550,18,"code"],[5562,20,5550,22],[5562,25,5550,27],[5562,33,5550,35],[5562,61,5550,63],[5562,62,5550,64],[5562,96,5550,98],[5562,98,5550,100],[5563,8,5551,12],[5563,14,5551,18,"MultiFactorError"],[5563,30,5551,34],[5563,31,5551,35,"_fromErrorAndOperation"],[5563,53,5551,57],[5563,54,5551,58,"auth"],[5563,58,5551,62],[5563,60,5551,64,"error"],[5563,65,5551,69],[5563,67,5551,71,"operationType"],[5563,80,5551,84],[5563,82,5551,86,"user"],[5563,86,5551,90],[5563,87,5551,91],[5564,6,5552,8],[5565,6,5553,8],[5565,12,5553,14,"error"],[5565,17,5553,19],[5566,4,5554,4],[5566,5,5554,5],[5566,6,5554,6],[5567,2,5555,0],[5569,2,5557,0],[5570,0,5558,0],[5571,0,5559,0],[5572,0,5560,0],[5573,0,5561,0],[5574,0,5562,0],[5575,0,5563,0],[5576,0,5564,0],[5577,0,5565,0],[5578,0,5566,0],[5579,0,5567,0],[5580,0,5568,0],[5581,0,5569,0],[5582,0,5570,0],[5583,0,5571,0],[5584,0,5572,0],[5585,2,5573,0],[5586,0,5574,0],[5587,0,5575,0],[5588,2,5576,0],[5588,11,5576,9,"providerDataAsNames"],[5588,30,5576,28,"providerDataAsNames"],[5588,31,5576,29,"providerData"],[5588,43,5576,41],[5588,45,5576,43],[5589,4,5577,4],[5589,11,5577,11],[5589,15,5577,15,"Set"],[5589,18,5577,18],[5589,19,5577,19,"providerData"],[5589,31,5577,31],[5589,32,5578,9,"map"],[5589,35,5578,12],[5589,36,5578,13],[5589,37,5578,14],[5590,6,5578,16,"providerId"],[5591,4,5578,27],[5591,5,5578,28],[5591,10,5578,33,"providerId"],[5591,20,5578,43],[5591,21,5578,44],[5591,22,5579,9,"filter"],[5591,28,5579,15],[5591,29,5579,16,"pid"],[5591,32,5579,19],[5591,36,5579,23],[5591,37,5579,24],[5591,38,5579,25,"pid"],[5591,41,5579,28],[5591,42,5579,29],[5591,43,5579,30],[5592,2,5580,0],[5594,2,5582,0],[5595,0,5583,0],[5596,0,5584,0],[5597,0,5585,0],[5598,0,5586,0],[5599,0,5587,0],[5600,0,5588,0],[5601,0,5589,0],[5602,0,5590,0],[5603,0,5591,0],[5604,0,5592,0],[5605,0,5593,0],[5606,0,5594,0],[5607,0,5595,0],[5608,0,5596,0],[5609,0,5597,0],[5610,2,5598,0],[5611,0,5599,0],[5612,0,5600,0],[5613,0,5601,0],[5614,0,5602,0],[5615,0,5603,0],[5616,0,5604,0],[5617,0,5605,0],[5618,2,5606,0],[5618,17,5606,15,"unlink"],[5618,23,5606,21,"unlink"],[5618,24,5606,22,"user"],[5618,28,5606,26],[5618,30,5606,28,"providerId"],[5618,40,5606,38],[5618,42,5606,40],[5619,4,5607,4],[5619,10,5607,10,"userInternal"],[5619,22,5607,22],[5619,25,5607,25],[5619,29,5607,25,"getModularInstance"],[5619,53,5607,43],[5619,55,5607,44,"user"],[5619,59,5607,48],[5619,60,5607,49],[5620,4,5608,4],[5620,10,5608,10,"_assertLinkedStatus"],[5620,29,5608,29],[5620,30,5608,30],[5620,34,5608,34],[5620,36,5608,36,"userInternal"],[5620,48,5608,48],[5620,50,5608,50,"providerId"],[5620,60,5608,60],[5620,61,5608,61],[5621,4,5609,4],[5621,10,5609,10],[5622,6,5609,12,"providerUserInfo"],[5623,4,5609,29],[5623,5,5609,30],[5623,8,5609,33],[5623,14,5609,39,"deleteLinkedAccounts"],[5623,34,5609,59],[5623,35,5609,60,"userInternal"],[5623,47,5609,72],[5623,48,5609,73,"auth"],[5623,52,5609,77],[5623,54,5609,79],[5624,6,5610,8,"idToken"],[5624,13,5610,15],[5624,15,5610,17],[5624,21,5610,23,"userInternal"],[5624,33,5610,35],[5624,34,5610,36,"getIdToken"],[5624,44,5610,46],[5624,45,5610,47],[5624,46,5610,48],[5625,6,5611,8,"deleteProvider"],[5625,20,5611,22],[5625,22,5611,24],[5625,23,5611,25,"providerId"],[5625,33,5611,35],[5626,4,5612,4],[5626,5,5612,5],[5626,6,5612,6],[5627,4,5613,4],[5627,10,5613,10,"providersLeft"],[5627,23,5613,23],[5627,26,5613,26,"providerDataAsNames"],[5627,45,5613,45],[5627,46,5613,46,"providerUserInfo"],[5627,62,5613,62],[5627,66,5613,66],[5627,68,5613,68],[5627,69,5613,69],[5628,4,5614,4,"userInternal"],[5628,16,5614,16],[5628,17,5614,17,"providerData"],[5628,29,5614,29],[5628,32,5614,32,"userInternal"],[5628,44,5614,44],[5628,45,5614,45,"providerData"],[5628,57,5614,57],[5628,58,5614,58,"filter"],[5628,64,5614,64],[5628,65,5614,65,"pd"],[5628,67,5614,67],[5628,71,5614,71,"providersLeft"],[5628,84,5614,84],[5628,85,5614,85,"has"],[5628,88,5614,88],[5628,89,5614,89,"pd"],[5628,91,5614,91],[5628,92,5614,92,"providerId"],[5628,102,5614,102],[5628,103,5614,103],[5628,104,5614,104],[5629,4,5615,4],[5629,8,5615,8],[5629,9,5615,9,"providersLeft"],[5629,22,5615,22],[5629,23,5615,23,"has"],[5629,26,5615,26],[5629,27,5615,27],[5629,34,5615,34],[5629,35,5615,35],[5629,57,5615,57],[5629,58,5615,58],[5629,60,5615,60],[5630,6,5616,8,"userInternal"],[5630,18,5616,20],[5630,19,5616,21,"phoneNumber"],[5630,30,5616,32],[5630,33,5616,35],[5630,37,5616,39],[5631,4,5617,4],[5632,4,5618,4],[5632,10,5618,10,"userInternal"],[5632,22,5618,22],[5632,23,5618,23,"auth"],[5632,27,5618,27],[5632,28,5618,28,"_persistUserIfCurrent"],[5632,49,5618,49],[5632,50,5618,50,"userInternal"],[5632,62,5618,62],[5632,63,5618,63],[5633,4,5619,4],[5633,11,5619,11,"userInternal"],[5633,23,5619,23],[5634,2,5620,0],[5635,2,5621,0],[5635,17,5621,15,"_link"],[5635,22,5621,20,"_link"],[5635,23,5621,21,"user"],[5635,27,5621,25],[5635,29,5621,27,"credential"],[5635,39,5621,37],[5635,41,5621,39,"bypassAuthState"],[5635,56,5621,54],[5635,59,5621,57],[5635,64,5621,62],[5635,66,5621,64],[5636,4,5622,4],[5636,10,5622,10,"response"],[5636,18,5622,18],[5636,21,5622,21],[5636,27,5622,27,"_logoutIfInvalidated"],[5636,47,5622,47],[5636,48,5622,48,"user"],[5636,52,5622,52],[5636,54,5622,54,"credential"],[5636,64,5622,64],[5636,65,5622,65,"_linkToIdToken"],[5636,79,5622,79],[5636,80,5622,80,"user"],[5636,84,5622,84],[5636,85,5622,85,"auth"],[5636,89,5622,89],[5636,91,5622,91],[5636,97,5622,97,"user"],[5636,101,5622,101],[5636,102,5622,102,"getIdToken"],[5636,112,5622,112],[5636,113,5622,113],[5636,114,5622,114],[5636,115,5622,115],[5636,117,5622,117,"bypassAuthState"],[5636,132,5622,132],[5636,133,5622,133],[5637,4,5623,4],[5637,11,5623,11,"UserCredentialImpl"],[5637,29,5623,29],[5637,30,5623,30,"_forOperation"],[5637,43,5623,43],[5637,44,5623,44,"user"],[5637,48,5623,48],[5637,50,5623,50],[5637,56,5623,56],[5637,57,5623,57],[5637,83,5623,83,"response"],[5637,91,5623,91],[5637,92,5623,92],[5638,2,5624,0],[5639,2,5625,0],[5639,17,5625,15,"_assertLinkedStatus"],[5639,36,5625,34,"_assertLinkedStatus"],[5639,37,5625,35,"expected"],[5639,45,5625,43],[5639,47,5625,45,"user"],[5639,51,5625,49],[5639,53,5625,51,"provider"],[5639,61,5625,59],[5639,63,5625,61],[5640,4,5626,4],[5640,10,5626,10,"_reloadWithoutSaving"],[5640,30,5626,30],[5640,31,5626,31,"user"],[5640,35,5626,35],[5640,36,5626,36],[5641,4,5627,4],[5641,10,5627,10,"providerIds"],[5641,21,5627,21],[5641,24,5627,24,"providerDataAsNames"],[5641,43,5627,43],[5641,44,5627,44,"user"],[5641,48,5627,48],[5641,49,5627,49,"providerData"],[5641,61,5627,61],[5641,62,5627,62],[5642,4,5628,4],[5642,10,5628,10,"code"],[5642,14,5628,14],[5642,17,5628,17,"expected"],[5642,25,5628,25],[5642,30,5628,30],[5642,35,5628,35],[5642,38,5629,10],[5642,63,5629,35],[5642,64,5629,36],[5642,110,5630,10],[5642,128,5630,28],[5642,129,5630,29],[5643,4,5631,4,"_assert"],[5643,11,5631,11],[5643,12,5631,12,"providerIds"],[5643,23,5631,23],[5643,24,5631,24,"has"],[5643,27,5631,27],[5643,28,5631,28,"provider"],[5643,36,5631,36],[5643,37,5631,37],[5643,42,5631,42,"expected"],[5643,50,5631,50],[5643,52,5631,52,"user"],[5643,56,5631,56],[5643,57,5631,57,"auth"],[5643,61,5631,61],[5643,63,5631,63,"code"],[5643,67,5631,67],[5643,68,5631,68],[5644,2,5632,0],[5646,2,5634,0],[5647,0,5635,0],[5648,0,5636,0],[5649,0,5637,0],[5650,0,5638,0],[5651,0,5639,0],[5652,0,5640,0],[5653,0,5641,0],[5654,0,5642,0],[5655,0,5643,0],[5656,0,5644,0],[5657,0,5645,0],[5658,0,5646,0],[5659,0,5647,0],[5660,0,5648,0],[5661,0,5649,0],[5662,2,5650,0],[5662,17,5650,15,"_reauthenticate"],[5662,32,5650,30,"_reauthenticate"],[5662,33,5650,31,"user"],[5662,37,5650,35],[5662,39,5650,37,"credential"],[5662,49,5650,47],[5662,51,5650,49,"bypassAuthState"],[5662,66,5650,64],[5662,69,5650,67],[5662,74,5650,72],[5662,76,5650,74],[5663,4,5651,4],[5663,10,5651,10],[5664,6,5651,12,"auth"],[5665,4,5651,17],[5665,5,5651,18],[5665,8,5651,21,"user"],[5665,12,5651,25],[5666,4,5652,4],[5666,8,5652,8],[5666,12,5652,8,"_isFirebaseServerApp"],[5666,37,5652,28],[5666,39,5652,29,"auth"],[5666,43,5652,33],[5666,44,5652,34,"app"],[5666,47,5652,37],[5666,48,5652,38],[5666,50,5652,40],[5667,6,5653,8],[5667,13,5653,15,"Promise"],[5667,20,5653,22],[5667,21,5653,23,"reject"],[5667,27,5653,29],[5667,28,5653,30,"_serverAppCurrentUserOperationNotSupportedError"],[5667,75,5653,77],[5667,76,5653,78,"auth"],[5667,80,5653,82],[5667,81,5653,83],[5667,82,5653,84],[5668,4,5654,4],[5669,4,5655,4],[5669,10,5655,10,"operationType"],[5669,23,5655,23],[5669,26,5655,26],[5669,42,5655,42],[5669,43,5655,43],[5670,4,5656,4],[5670,8,5656,8],[5671,6,5657,8],[5671,12,5657,14,"response"],[5671,20,5657,22],[5671,23,5657,25],[5671,29,5657,31,"_logoutIfInvalidated"],[5671,49,5657,51],[5671,50,5657,52,"user"],[5671,54,5657,56],[5671,56,5657,58,"_processCredentialSavingMfaContextIfNecessary"],[5671,101,5657,103],[5671,102,5657,104,"auth"],[5671,106,5657,108],[5671,108,5657,110,"operationType"],[5671,121,5657,123],[5671,123,5657,125,"credential"],[5671,133,5657,135],[5671,135,5657,137,"user"],[5671,139,5657,141],[5671,140,5657,142],[5671,142,5657,144,"bypassAuthState"],[5671,157,5657,159],[5671,158,5657,160],[5672,6,5658,8,"_assert"],[5672,13,5658,15],[5672,14,5658,16,"response"],[5672,22,5658,24],[5672,23,5658,25,"idToken"],[5672,30,5658,32],[5672,32,5658,34,"auth"],[5672,36,5658,38],[5672,38,5658,40],[5672,54,5658,56],[5672,55,5658,57],[5672,89,5658,91],[5672,90,5658,92],[5673,6,5659,8],[5673,12,5659,14,"parsed"],[5673,18,5659,20],[5673,21,5659,23,"_parseToken"],[5673,32,5659,34],[5673,33,5659,35,"response"],[5673,41,5659,43],[5673,42,5659,44,"idToken"],[5673,49,5659,51],[5673,50,5659,52],[5674,6,5660,8,"_assert"],[5674,13,5660,15],[5674,14,5660,16,"parsed"],[5674,20,5660,22],[5674,22,5660,24,"auth"],[5674,26,5660,28],[5674,28,5660,30],[5674,44,5660,46],[5674,45,5660,47],[5674,79,5660,81],[5674,80,5660,82],[5675,6,5661,8],[5675,12,5661,14],[5676,8,5661,16,"sub"],[5676,11,5661,19],[5676,13,5661,21,"localId"],[5677,6,5661,29],[5677,7,5661,30],[5677,10,5661,33,"parsed"],[5677,16,5661,39],[5678,6,5662,8,"_assert"],[5678,13,5662,15],[5678,14,5662,16,"user"],[5678,18,5662,20],[5678,19,5662,21,"uid"],[5678,22,5662,24],[5678,27,5662,29,"localId"],[5678,34,5662,36],[5678,36,5662,38,"auth"],[5678,40,5662,42],[5678,42,5662,44],[5678,57,5662,59],[5678,58,5662,60],[5678,91,5662,93],[5678,92,5662,94],[5679,6,5663,8],[5679,13,5663,15,"UserCredentialImpl"],[5679,31,5663,33],[5679,32,5663,34,"_forOperation"],[5679,45,5663,47],[5679,46,5663,48,"user"],[5679,50,5663,52],[5679,52,5663,54,"operationType"],[5679,65,5663,67],[5679,67,5663,69,"response"],[5679,75,5663,77],[5679,76,5663,78],[5680,4,5664,4],[5680,5,5664,5],[5680,6,5665,4],[5680,13,5665,11,"e"],[5680,14,5665,12],[5680,16,5665,14],[5681,6,5666,8],[5682,6,5667,8],[5682,10,5667,12,"e"],[5682,11,5667,13],[5682,13,5667,15,"code"],[5682,17,5667,19],[5682,22,5667,24],[5682,30,5667,32],[5682,46,5667,48],[5682,47,5667,49],[5682,81,5667,83],[5682,83,5667,85],[5683,8,5668,12,"_fail"],[5683,13,5668,17],[5683,14,5668,18,"auth"],[5683,18,5668,22],[5683,20,5668,24],[5683,35,5668,39],[5683,36,5668,40],[5683,69,5668,73],[5683,70,5668,74],[5684,6,5669,8],[5685,6,5670,8],[5685,12,5670,14,"e"],[5685,13,5670,15],[5686,4,5671,4],[5687,2,5672,0],[5689,2,5674,0],[5690,0,5675,0],[5691,0,5676,0],[5692,0,5677,0],[5693,0,5678,0],[5694,0,5679,0],[5695,0,5680,0],[5696,0,5681,0],[5697,0,5682,0],[5698,0,5683,0],[5699,0,5684,0],[5700,0,5685,0],[5701,0,5686,0],[5702,0,5687,0],[5703,0,5688,0],[5704,0,5689,0],[5705,2,5690,0],[5705,17,5690,15,"_signInWithCredential"],[5705,38,5690,36,"_signInWithCredential"],[5705,39,5690,37,"auth"],[5705,43,5690,41],[5705,45,5690,43,"credential"],[5705,55,5690,53],[5705,57,5690,55,"bypassAuthState"],[5705,72,5690,70],[5705,75,5690,73],[5705,80,5690,78],[5705,82,5690,80],[5706,4,5691,4],[5706,8,5691,8],[5706,12,5691,8,"_isFirebaseServerApp"],[5706,37,5691,28],[5706,39,5691,29,"auth"],[5706,43,5691,33],[5706,44,5691,34,"app"],[5706,47,5691,37],[5706,48,5691,38],[5706,50,5691,40],[5707,6,5692,8],[5707,13,5692,15,"Promise"],[5707,20,5692,22],[5707,21,5692,23,"reject"],[5707,27,5692,29],[5707,28,5692,30,"_serverAppCurrentUserOperationNotSupportedError"],[5707,75,5692,77],[5707,76,5692,78,"auth"],[5707,80,5692,82],[5707,81,5692,83],[5707,82,5692,84],[5708,4,5693,4],[5709,4,5694,4],[5709,10,5694,10,"operationType"],[5709,23,5694,23],[5709,26,5694,26],[5709,34,5694,34],[5709,35,5694,35],[5710,4,5695,4],[5710,10,5695,10,"response"],[5710,18,5695,18],[5710,21,5695,21],[5710,27,5695,27,"_processCredentialSavingMfaContextIfNecessary"],[5710,72,5695,72],[5710,73,5695,73,"auth"],[5710,77,5695,77],[5710,79,5695,79,"operationType"],[5710,92,5695,92],[5710,94,5695,94,"credential"],[5710,104,5695,104],[5710,105,5695,105],[5711,4,5696,4],[5711,10,5696,10,"userCredential"],[5711,24,5696,24],[5711,27,5696,27],[5711,33,5696,33,"UserCredentialImpl"],[5711,51,5696,51],[5711,52,5696,52,"_fromIdTokenResponse"],[5711,72,5696,72],[5711,73,5696,73,"auth"],[5711,77,5696,77],[5711,79,5696,79,"operationType"],[5711,92,5696,92],[5711,94,5696,94,"response"],[5711,102,5696,102],[5711,103,5696,103],[5712,4,5697,4],[5712,8,5697,8],[5712,9,5697,9,"bypassAuthState"],[5712,24,5697,24],[5712,26,5697,26],[5713,6,5698,8],[5713,12,5698,14,"auth"],[5713,16,5698,18],[5713,17,5698,19,"_updateCurrentUser"],[5713,35,5698,37],[5713,36,5698,38,"userCredential"],[5713,50,5698,52],[5713,51,5698,53,"user"],[5713,55,5698,57],[5713,56,5698,58],[5714,4,5699,4],[5715,4,5700,4],[5715,11,5700,11,"userCredential"],[5715,25,5700,25],[5716,2,5701,0],[5717,2,5702,0],[5718,0,5703,0],[5719,0,5704,0],[5720,0,5705,0],[5721,0,5706,0],[5722,0,5707,0],[5723,0,5708,0],[5724,0,5709,0],[5725,0,5710,0],[5726,0,5711,0],[5727,0,5712,0],[5728,0,5713,0],[5729,0,5714,0],[5730,0,5715,0],[5731,2,5716,0],[5731,17,5716,15,"signInWithCredential"],[5731,37,5716,35,"signInWithCredential"],[5731,38,5716,36,"auth"],[5731,42,5716,40],[5731,44,5716,42,"credential"],[5731,54,5716,52],[5731,56,5716,54],[5732,4,5717,4],[5732,11,5717,11,"_signInWithCredential"],[5732,32,5717,32],[5732,33,5717,33,"_castAuth"],[5732,42,5717,42],[5732,43,5717,43,"auth"],[5732,47,5717,47],[5732,48,5717,48],[5732,50,5717,50,"credential"],[5732,60,5717,60],[5732,61,5717,61],[5733,2,5718,0],[5734,2,5719,0],[5735,0,5720,0],[5736,0,5721,0],[5737,0,5722,0],[5738,0,5723,0],[5739,0,5724,0],[5740,0,5725,0],[5741,0,5726,0],[5742,0,5727,0],[5743,0,5728,0],[5744,0,5729,0],[5745,2,5730,0],[5745,17,5730,15,"linkWithCredential"],[5745,35,5730,33,"linkWithCredential"],[5745,36,5730,34,"user"],[5745,40,5730,38],[5745,42,5730,40,"credential"],[5745,52,5730,50],[5745,54,5730,52],[5746,4,5731,4],[5746,10,5731,10,"userInternal"],[5746,22,5731,22],[5746,25,5731,25],[5746,29,5731,25,"getModularInstance"],[5746,53,5731,43],[5746,55,5731,44,"user"],[5746,59,5731,48],[5746,60,5731,49],[5747,4,5732,4],[5747,10,5732,10,"_assertLinkedStatus"],[5747,29,5732,29],[5747,30,5732,30],[5747,35,5732,35],[5747,37,5732,37,"userInternal"],[5747,49,5732,49],[5747,51,5732,51,"credential"],[5747,61,5732,61],[5747,62,5732,62,"providerId"],[5747,72,5732,72],[5747,73,5732,73],[5748,4,5733,4],[5748,11,5733,11,"_link"],[5748,16,5733,16],[5748,17,5733,17,"userInternal"],[5748,29,5733,29],[5748,31,5733,31,"credential"],[5748,41,5733,41],[5748,42,5733,42],[5749,2,5734,0],[5750,2,5735,0],[5751,0,5736,0],[5752,0,5737,0],[5753,0,5738,0],[5754,0,5739,0],[5755,0,5740,0],[5756,0,5741,0],[5757,0,5742,0],[5758,0,5743,0],[5759,0,5744,0],[5760,0,5745,0],[5761,0,5746,0],[5762,0,5747,0],[5763,0,5748,0],[5764,0,5749,0],[5765,0,5750,0],[5766,2,5751,0],[5766,17,5751,15,"reauthenticateWithCredential"],[5766,45,5751,43,"reauthenticateWithCredential"],[5766,46,5751,44,"user"],[5766,50,5751,48],[5766,52,5751,50,"credential"],[5766,62,5751,60],[5766,64,5751,62],[5767,4,5752,4],[5767,11,5752,11,"_reauthenticate"],[5767,26,5752,26],[5767,27,5752,27],[5767,31,5752,27,"getModularInstance"],[5767,55,5752,45],[5767,57,5752,46,"user"],[5767,61,5752,50],[5767,62,5752,51],[5767,64,5752,53,"credential"],[5767,74,5752,63],[5767,75,5752,64],[5768,2,5753,0],[5770,2,5755,0],[5771,0,5756,0],[5772,0,5757,0],[5773,0,5758,0],[5774,0,5759,0],[5775,0,5760,0],[5776,0,5761,0],[5777,0,5762,0],[5778,0,5763,0],[5779,0,5764,0],[5780,0,5765,0],[5781,0,5766,0],[5782,0,5767,0],[5783,0,5768,0],[5784,0,5769,0],[5785,0,5770,0],[5786,2,5771,0],[5786,17,5771,15,"signInWithCustomToken$1"],[5786,40,5771,38,"signInWithCustomToken$1"],[5786,41,5771,39,"auth"],[5786,45,5771,43],[5786,47,5771,45,"request"],[5786,54,5771,52],[5786,56,5771,54],[5787,4,5772,4],[5787,11,5772,11,"_performSignInRequest"],[5787,32,5772,32],[5787,33,5772,33,"auth"],[5787,37,5772,37],[5787,39,5772,39],[5787,45,5772,45],[5787,46,5772,46],[5787,69,5772,69],[5787,105,5772,105],[5787,106,5772,106],[5787,148,5772,148,"_addTidIfNecessary"],[5787,166,5772,166],[5787,167,5772,167,"auth"],[5787,171,5772,171],[5787,173,5772,173,"request"],[5787,180,5772,180],[5787,181,5772,181],[5787,182,5772,182],[5788,2,5773,0],[5790,2,5775,0],[5791,0,5776,0],[5792,0,5777,0],[5793,0,5778,0],[5794,0,5779,0],[5795,0,5780,0],[5796,0,5781,0],[5797,0,5782,0],[5798,0,5783,0],[5799,0,5784,0],[5800,0,5785,0],[5801,0,5786,0],[5802,0,5787,0],[5803,0,5788,0],[5804,0,5789,0],[5805,0,5790,0],[5806,2,5791,0],[5807,0,5792,0],[5808,0,5793,0],[5809,0,5794,0],[5810,0,5795,0],[5811,0,5796,0],[5812,0,5797,0],[5813,0,5798,0],[5814,0,5799,0],[5815,0,5800,0],[5816,0,5801,0],[5817,0,5802,0],[5818,0,5803,0],[5819,0,5804,0],[5820,0,5805,0],[5821,0,5806,0],[5822,0,5807,0],[5823,0,5808,0],[5824,0,5809,0],[5825,2,5810,0],[5825,17,5810,15,"signInWithCustomToken"],[5825,38,5810,36,"signInWithCustomToken"],[5825,39,5810,37,"auth"],[5825,43,5810,41],[5825,45,5810,43,"customToken"],[5825,56,5810,54],[5825,58,5810,56],[5826,4,5811,4],[5826,8,5811,8],[5826,12,5811,8,"_isFirebaseServerApp"],[5826,37,5811,28],[5826,39,5811,29,"auth"],[5826,43,5811,33],[5826,44,5811,34,"app"],[5826,47,5811,37],[5826,48,5811,38],[5826,50,5811,40],[5827,6,5812,8],[5827,13,5812,15,"Promise"],[5827,20,5812,22],[5827,21,5812,23,"reject"],[5827,27,5812,29],[5827,28,5812,30,"_serverAppCurrentUserOperationNotSupportedError"],[5827,75,5812,77],[5827,76,5812,78,"auth"],[5827,80,5812,82],[5827,81,5812,83],[5827,82,5812,84],[5828,4,5813,4],[5829,4,5814,4],[5829,10,5814,10,"authInternal"],[5829,22,5814,22],[5829,25,5814,25,"_castAuth"],[5829,34,5814,34],[5829,35,5814,35,"auth"],[5829,39,5814,39],[5829,40,5814,40],[5830,4,5815,4],[5830,10,5815,10,"response"],[5830,18,5815,18],[5830,21,5815,21],[5830,27,5815,27,"signInWithCustomToken$1"],[5830,50,5815,50],[5830,51,5815,51,"authInternal"],[5830,63,5815,63],[5830,65,5815,65],[5831,6,5816,8,"token"],[5831,11,5816,13],[5831,13,5816,15,"customToken"],[5831,24,5816,26],[5832,6,5817,8,"returnSecureToken"],[5832,23,5817,25],[5832,25,5817,27],[5833,4,5818,4],[5833,5,5818,5],[5833,6,5818,6],[5834,4,5819,4],[5834,10,5819,10,"cred"],[5834,14,5819,14],[5834,17,5819,17],[5834,23,5819,23,"UserCredentialImpl"],[5834,41,5819,41],[5834,42,5819,42,"_fromIdTokenResponse"],[5834,62,5819,62],[5834,63,5819,63,"authInternal"],[5834,75,5819,75],[5834,77,5819,77],[5834,85,5819,85],[5834,86,5819,86],[5834,115,5819,115,"response"],[5834,123,5819,123],[5834,124,5819,124],[5835,4,5820,4],[5835,10,5820,10,"authInternal"],[5835,22,5820,22],[5835,23,5820,23,"_updateCurrentUser"],[5835,41,5820,41],[5835,42,5820,42,"cred"],[5835,46,5820,46],[5835,47,5820,47,"user"],[5835,51,5820,51],[5835,52,5820,52],[5836,4,5821,4],[5836,11,5821,11,"cred"],[5836,15,5821,15],[5837,2,5822,0],[5839,2,5824,0],[5840,0,5825,0],[5841,0,5826,0],[5842,0,5827,0],[5843,0,5828,0],[5844,0,5829,0],[5845,0,5830,0],[5846,0,5831,0],[5847,0,5832,0],[5848,0,5833,0],[5849,0,5834,0],[5850,0,5835,0],[5851,0,5836,0],[5852,0,5837,0],[5853,0,5838,0],[5854,0,5839,0],[5855,2,5840,0],[5855,8,5840,6,"MultiFactorInfoImpl"],[5855,27,5840,25],[5855,28,5840,26],[5856,4,5841,4,"constructor"],[5856,15,5841,15,"constructor"],[5856,16,5841,16,"factorId"],[5856,24,5841,24],[5856,26,5841,26,"response"],[5856,34,5841,34],[5856,36,5841,36],[5857,6,5842,8],[5857,10,5842,12],[5857,11,5842,13,"factorId"],[5857,19,5842,21],[5857,22,5842,24,"factorId"],[5857,30,5842,32],[5858,6,5843,8],[5858,10,5843,12],[5858,11,5843,13,"uid"],[5858,14,5843,16],[5858,17,5843,19,"response"],[5858,25,5843,27],[5858,26,5843,28,"mfaEnrollmentId"],[5858,41,5843,43],[5859,6,5844,8],[5859,10,5844,12],[5859,11,5844,13,"enrollmentTime"],[5859,25,5844,27],[5859,28,5844,30],[5859,32,5844,34,"Date"],[5859,36,5844,38],[5859,37,5844,39,"response"],[5859,45,5844,47],[5859,46,5844,48,"enrolledAt"],[5859,56,5844,58],[5859,57,5844,59],[5859,58,5844,60,"toUTCString"],[5859,69,5844,71],[5859,70,5844,72],[5859,71,5844,73],[5860,6,5845,8],[5860,10,5845,12],[5860,11,5845,13,"displayName"],[5860,22,5845,24],[5860,25,5845,27,"response"],[5860,33,5845,35],[5860,34,5845,36,"displayName"],[5860,45,5845,47],[5861,4,5846,4],[5862,4,5847,4],[5862,11,5847,11,"_fromServerResponse"],[5862,30,5847,30,"_fromServerResponse"],[5862,31,5847,31,"auth"],[5862,35,5847,35],[5862,37,5847,37,"enrollment"],[5862,47,5847,47],[5862,49,5847,49],[5863,6,5848,8],[5863,10,5848,12],[5863,21,5848,23],[5863,25,5848,27,"enrollment"],[5863,35,5848,37],[5863,37,5848,39],[5864,8,5849,12],[5864,15,5849,19,"PhoneMultiFactorInfoImpl"],[5864,39,5849,43],[5864,40,5849,44,"_fromServerResponse"],[5864,59,5849,63],[5864,60,5849,64,"auth"],[5864,64,5849,68],[5864,66,5849,70,"enrollment"],[5864,76,5849,80],[5864,77,5849,81],[5865,6,5850,8],[5865,7,5850,9],[5865,13,5851,13],[5865,17,5851,17],[5865,27,5851,27],[5865,31,5851,31,"enrollment"],[5865,41,5851,41],[5865,43,5851,43],[5866,8,5852,12],[5866,15,5852,19,"TotpMultiFactorInfoImpl"],[5866,38,5852,42],[5866,39,5852,43,"_fromServerResponse"],[5866,58,5852,62],[5866,59,5852,63,"auth"],[5866,63,5852,67],[5866,65,5852,69,"enrollment"],[5866,75,5852,79],[5866,76,5852,80],[5867,6,5853,8],[5868,6,5854,8],[5868,13,5854,15,"_fail"],[5868,18,5854,20],[5868,19,5854,21,"auth"],[5868,23,5854,25],[5868,25,5854,27],[5868,41,5854,43],[5868,42,5854,44],[5868,76,5854,78],[5868,77,5854,79],[5869,4,5855,4],[5870,2,5856,0],[5871,2,5857,0],[5871,8,5857,6,"PhoneMultiFactorInfoImpl"],[5871,32,5857,30],[5871,41,5857,39,"MultiFactorInfoImpl"],[5871,60,5857,58],[5871,61,5857,59],[5872,4,5858,4,"constructor"],[5872,15,5858,15,"constructor"],[5872,16,5858,16,"response"],[5872,24,5858,24],[5872,26,5858,26],[5873,6,5859,8],[5873,11,5859,13],[5873,12,5859,14],[5873,19,5859,21],[5873,20,5859,22],[5873,42,5859,44,"response"],[5873,50,5859,52],[5873,51,5859,53],[5874,6,5860,8],[5874,10,5860,12],[5874,11,5860,13,"phoneNumber"],[5874,22,5860,24],[5874,25,5860,27,"response"],[5874,33,5860,35],[5874,34,5860,36,"phoneInfo"],[5874,43,5860,45],[5875,4,5861,4],[5876,4,5862,4],[5876,11,5862,11,"_fromServerResponse"],[5876,30,5862,30,"_fromServerResponse"],[5876,31,5862,31,"_auth"],[5876,36,5862,36],[5876,38,5862,38,"enrollment"],[5876,48,5862,48],[5876,50,5862,50],[5877,6,5863,8],[5877,13,5863,15],[5877,17,5863,19,"PhoneMultiFactorInfoImpl"],[5877,41,5863,43],[5877,42,5863,44,"enrollment"],[5877,52,5863,54],[5877,53,5863,55],[5878,4,5864,4],[5879,2,5865,0],[5880,2,5866,0],[5880,8,5866,6,"TotpMultiFactorInfoImpl"],[5880,31,5866,29],[5880,40,5866,38,"MultiFactorInfoImpl"],[5880,59,5866,57],[5880,60,5866,58],[5881,4,5867,4,"constructor"],[5881,15,5867,15,"constructor"],[5881,16,5867,16,"response"],[5881,24,5867,24],[5881,26,5867,26],[5882,6,5868,8],[5882,11,5868,13],[5882,12,5868,14],[5882,18,5868,20],[5882,19,5868,21],[5882,40,5868,42,"response"],[5882,48,5868,50],[5882,49,5868,51],[5883,4,5869,4],[5884,4,5870,4],[5884,11,5870,11,"_fromServerResponse"],[5884,30,5870,30,"_fromServerResponse"],[5884,31,5870,31,"_auth"],[5884,36,5870,36],[5884,38,5870,38,"enrollment"],[5884,48,5870,48],[5884,50,5870,50],[5885,6,5871,8],[5885,13,5871,15],[5885,17,5871,19,"TotpMultiFactorInfoImpl"],[5885,40,5871,42],[5885,41,5871,43,"enrollment"],[5885,51,5871,53],[5885,52,5871,54],[5886,4,5872,4],[5887,2,5873,0],[5889,2,5875,0],[5890,0,5876,0],[5891,0,5877,0],[5892,0,5878,0],[5893,0,5879,0],[5894,0,5880,0],[5895,0,5881,0],[5896,0,5882,0],[5897,0,5883,0],[5898,0,5884,0],[5899,0,5885,0],[5900,0,5886,0],[5901,0,5887,0],[5902,0,5888,0],[5903,0,5889,0],[5904,0,5890,0],[5905,2,5891,0],[5905,11,5891,9,"_setActionCodeSettingsOnRequest"],[5905,42,5891,40,"_setActionCodeSettingsOnRequest"],[5905,43,5891,41,"auth"],[5905,47,5891,45],[5905,49,5891,47,"request"],[5905,56,5891,54],[5905,58,5891,56,"actionCodeSettings"],[5905,76,5891,74],[5905,78,5891,76],[5906,4,5892,4,"_assert"],[5906,11,5892,11],[5906,12,5892,12,"actionCodeSettings"],[5906,30,5892,30],[5906,31,5892,31,"url"],[5906,34,5892,34],[5906,36,5892,36,"length"],[5906,42,5892,42],[5906,45,5892,45],[5906,46,5892,46],[5906,48,5892,48,"auth"],[5906,52,5892,52],[5906,54,5892,54],[5906,76,5892,76],[5906,77,5892,77],[5906,117,5892,117],[5906,118,5892,118],[5907,4,5893,4,"_assert"],[5907,11,5893,11],[5907,12,5893,12],[5907,19,5893,19,"actionCodeSettings"],[5907,37,5893,37],[5907,38,5893,38,"dynamicLinkDomain"],[5907,55,5893,55],[5907,60,5893,60],[5907,71,5893,71],[5907,75,5894,8,"actionCodeSettings"],[5907,93,5894,26],[5907,94,5894,27,"dynamicLinkDomain"],[5907,111,5894,44],[5907,112,5894,45,"length"],[5907,118,5894,51],[5907,121,5894,54],[5907,122,5894,55],[5907,124,5894,57,"auth"],[5907,128,5894,61],[5907,130,5894,63],[5907,159,5894,92],[5907,160,5894,93],[5907,207,5894,140],[5907,208,5894,141],[5908,4,5895,4,"_assert"],[5908,11,5895,11],[5908,12,5895,12],[5908,19,5895,19,"actionCodeSettings"],[5908,37,5895,37],[5908,38,5895,38,"linkDomain"],[5908,48,5895,48],[5908,53,5895,53],[5908,64,5895,64],[5908,68,5896,8,"actionCodeSettings"],[5908,86,5896,26],[5908,87,5896,27,"linkDomain"],[5908,97,5896,37],[5908,98,5896,38,"length"],[5908,104,5896,44],[5908,107,5896,47],[5908,108,5896,48],[5908,110,5896,50,"auth"],[5908,114,5896,54],[5908,116,5896,56],[5908,145,5896,85],[5908,146,5896,86],[5908,193,5896,133],[5908,194,5896,134],[5909,4,5897,4,"request"],[5909,11,5897,11],[5909,12,5897,12,"continueUrl"],[5909,23,5897,23],[5909,26,5897,26,"actionCodeSettings"],[5909,44,5897,44],[5909,45,5897,45,"url"],[5909,48,5897,48],[5910,4,5898,4,"request"],[5910,11,5898,11],[5910,12,5898,12,"dynamicLinkDomain"],[5910,29,5898,29],[5910,32,5898,32,"actionCodeSettings"],[5910,50,5898,50],[5910,51,5898,51,"dynamicLinkDomain"],[5910,68,5898,68],[5911,4,5899,4,"request"],[5911,11,5899,11],[5911,12,5899,12,"linkDomain"],[5911,22,5899,22],[5911,25,5899,25,"actionCodeSettings"],[5911,43,5899,43],[5911,44,5899,44,"linkDomain"],[5911,54,5899,54],[5912,4,5900,4,"request"],[5912,11,5900,11],[5912,12,5900,12,"canHandleCodeInApp"],[5912,30,5900,30],[5912,33,5900,33,"actionCodeSettings"],[5912,51,5900,51],[5912,52,5900,52,"handleCodeInApp"],[5912,67,5900,67],[5913,4,5901,4],[5913,8,5901,8,"actionCodeSettings"],[5913,26,5901,26],[5913,27,5901,27,"iOS"],[5913,30,5901,30],[5913,32,5901,32],[5914,6,5902,8,"_assert"],[5914,13,5902,15],[5914,14,5902,16,"actionCodeSettings"],[5914,32,5902,34],[5914,33,5902,35,"iOS"],[5914,36,5902,38],[5914,37,5902,39,"bundleId"],[5914,45,5902,47],[5914,46,5902,48,"length"],[5914,52,5902,54],[5914,55,5902,57],[5914,56,5902,58],[5914,58,5902,60,"auth"],[5914,62,5902,64],[5914,64,5902,66],[5914,87,5902,89],[5914,88,5902,90],[5914,129,5902,131],[5914,130,5902,132],[5915,6,5903,8,"request"],[5915,13,5903,15],[5915,14,5903,16,"iOSBundleId"],[5915,25,5903,27],[5915,28,5903,30,"actionCodeSettings"],[5915,46,5903,48],[5915,47,5903,49,"iOS"],[5915,50,5903,52],[5915,51,5903,53,"bundleId"],[5915,59,5903,61],[5916,4,5904,4],[5917,4,5905,4],[5917,8,5905,8,"actionCodeSettings"],[5917,26,5905,26],[5917,27,5905,27,"android"],[5917,34,5905,34],[5917,36,5905,36],[5918,6,5906,8,"_assert"],[5918,13,5906,15],[5918,14,5906,16,"actionCodeSettings"],[5918,32,5906,34],[5918,33,5906,35,"android"],[5918,40,5906,42],[5918,41,5906,43,"packageName"],[5918,52,5906,54],[5918,53,5906,55,"length"],[5918,59,5906,61],[5918,62,5906,64],[5918,63,5906,65],[5918,65,5906,67,"auth"],[5918,69,5906,71],[5918,71,5906,73],[5918,97,5906,99],[5918,98,5906,100],[5918,146,5906,148],[5918,147,5906,149],[5919,6,5907,8,"request"],[5919,13,5907,15],[5919,14,5907,16,"androidInstallApp"],[5919,31,5907,33],[5919,34,5907,36,"actionCodeSettings"],[5919,52,5907,54],[5919,53,5907,55,"android"],[5919,60,5907,62],[5919,61,5907,63,"installApp"],[5919,71,5907,73],[5920,6,5908,8,"request"],[5920,13,5908,15],[5920,14,5908,16,"androidMinimumVersionCode"],[5920,39,5908,41],[5920,42,5909,12,"actionCodeSettings"],[5920,60,5909,30],[5920,61,5909,31,"android"],[5920,68,5909,38],[5920,69,5909,39,"minimumVersion"],[5920,83,5909,53],[5921,6,5910,8,"request"],[5921,13,5910,15],[5921,14,5910,16,"androidPackageName"],[5921,32,5910,34],[5921,35,5910,37,"actionCodeSettings"],[5921,53,5910,55],[5921,54,5910,56,"android"],[5921,61,5910,63],[5921,62,5910,64,"packageName"],[5921,73,5910,75],[5922,4,5911,4],[5923,2,5912,0],[5925,2,5914,0],[5926,0,5915,0],[5927,0,5916,0],[5928,0,5917,0],[5929,0,5918,0],[5930,0,5919,0],[5931,0,5920,0],[5932,0,5921,0],[5933,0,5922,0],[5934,0,5923,0],[5935,0,5924,0],[5936,0,5925,0],[5937,0,5926,0],[5938,0,5927,0],[5939,0,5928,0],[5940,0,5929,0],[5941,2,5930,0],[5942,0,5931,0],[5943,0,5932,0],[5944,0,5933,0],[5945,0,5934,0],[5946,0,5935,0],[5947,0,5936,0],[5948,0,5937,0],[5949,0,5938,0],[5950,0,5939,0],[5951,0,5940,0],[5952,0,5941,0],[5953,0,5942,0],[5954,2,5943,0],[5954,17,5943,15,"recachePasswordPolicy"],[5954,38,5943,36,"recachePasswordPolicy"],[5954,39,5943,37,"auth"],[5954,43,5943,41],[5954,45,5943,43],[5955,4,5944,4],[5955,10,5944,10,"authInternal"],[5955,22,5944,22],[5955,25,5944,25,"_castAuth"],[5955,34,5944,34],[5955,35,5944,35,"auth"],[5955,39,5944,39],[5955,40,5944,40],[5956,4,5945,4],[5956,8,5945,8,"authInternal"],[5956,20,5945,20],[5956,21,5945,21,"_getPasswordPolicyInternal"],[5956,47,5945,47],[5956,48,5945,48],[5956,49,5945,49],[5956,51,5945,51],[5957,6,5946,8],[5957,12,5946,14,"authInternal"],[5957,24,5946,26],[5957,25,5946,27,"_updatePasswordPolicy"],[5957,46,5946,48],[5957,47,5946,49],[5957,48,5946,50],[5958,4,5947,4],[5959,2,5948,0],[5960,2,5949,0],[5961,0,5950,0],[5962,0,5951,0],[5963,0,5952,0],[5964,0,5953,0],[5965,0,5954,0],[5966,0,5955,0],[5967,0,5956,0],[5968,0,5957,0],[5969,0,5958,0],[5970,0,5959,0],[5971,0,5960,0],[5972,0,5961,0],[5973,0,5962,0],[5974,0,5963,0],[5975,0,5964,0],[5976,0,5965,0],[5977,0,5966,0],[5978,0,5967,0],[5979,0,5968,0],[5980,0,5969,0],[5981,0,5970,0],[5982,0,5971,0],[5983,0,5972,0],[5984,0,5973,0],[5985,0,5974,0],[5986,0,5975,0],[5987,0,5976,0],[5988,0,5977,0],[5989,0,5978,0],[5990,0,5979,0],[5991,0,5980,0],[5992,0,5981,0],[5993,0,5982,0],[5994,0,5983,0],[5995,2,5984,0],[5995,17,5984,15,"sendPasswordResetEmail"],[5995,39,5984,37,"sendPasswordResetEmail"],[5995,40,5984,38,"auth"],[5995,44,5984,42],[5995,46,5984,44,"email"],[5995,51,5984,49],[5995,53,5984,51,"actionCodeSettings"],[5995,71,5984,69],[5995,73,5984,71],[5996,4,5985,4],[5996,10,5985,10,"authInternal"],[5996,22,5985,22],[5996,25,5985,25,"_castAuth"],[5996,34,5985,34],[5996,35,5985,35,"auth"],[5996,39,5985,39],[5996,40,5985,40],[5997,4,5986,4],[5997,10,5986,10,"request"],[5997,17,5986,17],[5997,20,5986,20],[5998,6,5987,8,"requestType"],[5998,17,5987,19],[5998,19,5987,21],[5998,35,5987,37],[5998,36,5987,38],[5999,6,5988,8,"email"],[5999,11,5988,13],[6000,6,5989,8,"clientType"],[6000,16,5989,18],[6000,18,5989,20],[6000,35,5989,37],[6000,36,5989,38],[6001,4,5990,4],[6001,5,5990,5],[6002,4,5991,4],[6002,8,5991,8,"actionCodeSettings"],[6002,26,5991,26],[6002,28,5991,28],[6003,6,5992,8,"_setActionCodeSettingsOnRequest"],[6003,37,5992,39],[6003,38,5992,40,"authInternal"],[6003,50,5992,52],[6003,52,5992,54,"request"],[6003,59,5992,61],[6003,61,5992,63,"actionCodeSettings"],[6003,79,5992,81],[6003,80,5992,82],[6004,4,5993,4],[6005,4,5994,4],[6005,10,5994,10,"handleRecaptchaFlow"],[6005,29,5994,29],[6005,30,5994,30,"authInternal"],[6005,42,5994,42],[6005,44,5994,44,"request"],[6005,51,5994,51],[6005,53,5994,53],[6005,65,5994,65],[6005,66,5994,66],[6005,106,5994,106,"sendPasswordResetEmail$1"],[6005,130,5994,130],[6005,132,5994,132],[6005,157,5994,157],[6005,158,5994,158],[6005,209,5994,209],[6005,210,5994,210],[6006,2,5995,0],[6007,2,5996,0],[6008,0,5997,0],[6009,0,5998,0],[6010,0,5999,0],[6011,0,6000,0],[6012,0,6001,0],[6013,0,6002,0],[6014,0,6003,0],[6015,0,6004,0],[6016,2,6005,0],[6016,17,6005,15,"confirmPasswordReset"],[6016,37,6005,35,"confirmPasswordReset"],[6016,38,6005,36,"auth"],[6016,42,6005,40],[6016,44,6005,42,"oobCode"],[6016,51,6005,49],[6016,53,6005,51,"newPassword"],[6016,64,6005,62],[6016,66,6005,64],[6017,4,6006,4],[6017,10,6006,10,"resetPassword"],[6017,23,6006,23],[6017,24,6006,24],[6017,28,6006,24,"getModularInstance"],[6017,52,6006,42],[6017,54,6006,43,"auth"],[6017,58,6006,47],[6017,59,6006,48],[6017,61,6006,50],[6018,6,6007,8,"oobCode"],[6018,13,6007,15],[6019,6,6008,8,"newPassword"],[6020,4,6009,4],[6020,5,6009,5],[6020,6,6009,6],[6020,7,6010,9,"catch"],[6020,12,6010,14],[6020,13,6010,15],[6020,19,6010,22,"error"],[6020,24,6010,27],[6020,28,6010,32],[6021,6,6011,8],[6021,10,6011,12,"error"],[6021,15,6011,17],[6021,16,6011,18,"code"],[6021,20,6011,22],[6021,25,6012,12],[6021,33,6012,20],[6021,70,6012,57],[6021,71,6012,58],[6021,128,6012,115],[6021,130,6012,117],[6022,8,6013,12],[6022,13,6013,17,"recachePasswordPolicy"],[6022,34,6013,38],[6022,35,6013,39,"auth"],[6022,39,6013,43],[6022,40,6013,44],[6023,6,6014,8],[6024,6,6015,8],[6024,12,6015,14,"error"],[6024,17,6015,19],[6025,4,6016,4],[6025,5,6016,5],[6025,6,6016,6],[6026,4,6017,4],[6027,2,6018,0],[6028,2,6019,0],[6029,0,6020,0],[6030,0,6021,0],[6031,0,6022,0],[6032,0,6023,0],[6033,0,6024,0],[6034,0,6025,0],[6035,0,6026,0],[6036,2,6027,0],[6036,17,6027,15,"applyActionCode"],[6036,32,6027,30,"applyActionCode"],[6036,33,6027,31,"auth"],[6036,37,6027,35],[6036,39,6027,37,"oobCode"],[6036,46,6027,44],[6036,48,6027,46],[6037,4,6028,4],[6037,10,6028,10,"applyActionCode$1"],[6037,27,6028,27],[6037,28,6028,28],[6037,32,6028,28,"getModularInstance"],[6037,56,6028,46],[6037,58,6028,47,"auth"],[6037,62,6028,51],[6037,63,6028,52],[6037,65,6028,54],[6038,6,6028,56,"oobCode"],[6039,4,6028,64],[6039,5,6028,65],[6039,6,6028,66],[6040,2,6029,0],[6041,2,6030,0],[6042,0,6031,0],[6043,0,6032,0],[6044,0,6033,0],[6045,0,6034,0],[6046,0,6035,0],[6047,0,6036,0],[6048,0,6037,0],[6049,0,6038,0],[6050,0,6039,0],[6051,2,6040,0],[6051,17,6040,15,"checkActionCode"],[6051,32,6040,30,"checkActionCode"],[6051,33,6040,31,"auth"],[6051,37,6040,35],[6051,39,6040,37,"oobCode"],[6051,46,6040,44],[6051,48,6040,46],[6052,4,6041,4],[6052,10,6041,10,"authModular"],[6052,21,6041,21],[6052,24,6041,24],[6052,28,6041,24,"getModularInstance"],[6052,52,6041,42],[6052,54,6041,43,"auth"],[6052,58,6041,47],[6052,59,6041,48],[6053,4,6042,4],[6053,10,6042,10,"response"],[6053,18,6042,18],[6053,21,6042,21],[6053,27,6042,27,"resetPassword"],[6053,40,6042,40],[6053,41,6042,41,"authModular"],[6053,52,6042,52],[6053,54,6042,54],[6054,6,6042,56,"oobCode"],[6055,4,6042,64],[6055,5,6042,65],[6055,6,6042,66],[6056,4,6043,4],[6057,4,6044,4],[6058,4,6045,4],[6059,4,6046,4],[6060,4,6047,4],[6061,4,6048,4],[6062,4,6049,4],[6062,10,6049,10,"operation"],[6062,19,6049,19],[6062,22,6049,22,"response"],[6062,30,6049,30],[6062,31,6049,31,"requestType"],[6062,42,6049,42],[6063,4,6050,4,"_assert"],[6063,11,6050,11],[6063,12,6050,12,"operation"],[6063,21,6050,21],[6063,23,6050,23,"authModular"],[6063,34,6050,34],[6063,36,6050,36],[6063,52,6050,52],[6063,53,6050,53],[6063,87,6050,87],[6063,88,6050,88],[6064,4,6051,4],[6064,12,6051,12,"operation"],[6064,21,6051,21],[6065,6,6052,8],[6065,11,6052,13],[6065,25,6052,27],[6065,26,6052,28],[6066,8,6053,12],[6067,6,6054,8],[6067,11,6054,13],[6067,36,6054,38],[6067,37,6054,39],[6068,8,6055,12,"_assert"],[6068,15,6055,19],[6068,16,6055,20,"response"],[6068,24,6055,28],[6068,25,6055,29,"newEmail"],[6068,33,6055,37],[6068,35,6055,39,"authModular"],[6068,46,6055,50],[6068,48,6055,52],[6068,64,6055,68],[6068,65,6055,69],[6068,99,6055,103],[6068,100,6055,104],[6069,8,6056,12],[6070,6,6057,8],[6070,11,6057,13],[6070,42,6057,44],[6070,43,6057,45],[6071,8,6058,12,"_assert"],[6071,15,6058,19],[6071,16,6058,20,"response"],[6071,24,6058,28],[6071,25,6058,29,"mfaInfo"],[6071,32,6058,36],[6071,34,6058,38,"authModular"],[6071,45,6058,49],[6071,47,6058,51],[6071,63,6058,67],[6071,64,6058,68],[6071,98,6058,102],[6071,99,6058,103],[6072,6,6059,8],[6073,6,6060,8],[6074,8,6061,12,"_assert"],[6074,15,6061,19],[6074,16,6061,20,"response"],[6074,24,6061,28],[6074,25,6061,29,"email"],[6074,30,6061,34],[6074,32,6061,36,"authModular"],[6074,43,6061,47],[6074,45,6061,49],[6074,61,6061,65],[6074,62,6061,66],[6074,96,6061,100],[6074,97,6061,101],[6075,4,6062,4],[6076,4,6063,4],[6077,4,6064,4],[6077,8,6064,8,"multiFactorInfo"],[6077,23,6064,23],[6077,26,6064,26],[6077,30,6064,30],[6078,4,6065,4],[6078,8,6065,8,"response"],[6078,16,6065,16],[6078,17,6065,17,"mfaInfo"],[6078,24,6065,24],[6078,26,6065,26],[6079,6,6066,8,"multiFactorInfo"],[6079,21,6066,23],[6079,24,6066,26,"MultiFactorInfoImpl"],[6079,43,6066,45],[6079,44,6066,46,"_fromServerResponse"],[6079,63,6066,65],[6079,64,6066,66,"_castAuth"],[6079,73,6066,75],[6079,74,6066,76,"authModular"],[6079,85,6066,87],[6079,86,6066,88],[6079,88,6066,90,"response"],[6079,96,6066,98],[6079,97,6066,99,"mfaInfo"],[6079,104,6066,106],[6079,105,6066,107],[6080,4,6067,4],[6081,4,6068,4],[6081,11,6068,11],[6082,6,6069,8,"data"],[6082,10,6069,12],[6082,12,6069,14],[6083,8,6070,12,"email"],[6083,13,6070,17],[6083,15,6070,19],[6083,16,6070,20,"response"],[6083,24,6070,28],[6083,25,6070,29,"requestType"],[6083,36,6070,40],[6083,41,6070,45],[6083,66,6070,70],[6083,67,6070,71],[6083,119,6071,18,"response"],[6083,127,6071,26],[6083,128,6071,27,"newEmail"],[6083,136,6071,35],[6083,139,6072,18,"response"],[6083,147,6072,26],[6083,148,6072,27,"email"],[6083,153,6072,32],[6083,158,6072,37],[6083,162,6072,41],[6084,8,6073,12,"previousEmail"],[6084,21,6073,25],[6084,23,6073,27],[6084,24,6073,28,"response"],[6084,32,6073,36],[6084,33,6073,37,"requestType"],[6084,44,6073,48],[6084,49,6073,53],[6084,74,6073,78],[6084,75,6073,79],[6084,127,6074,18,"response"],[6084,135,6074,26],[6084,136,6074,27,"email"],[6084,141,6074,32],[6084,144,6075,18,"response"],[6084,152,6075,26],[6084,153,6075,27,"newEmail"],[6084,161,6075,35],[6084,166,6075,40],[6084,170,6075,44],[6085,8,6076,12,"multiFactorInfo"],[6086,6,6077,8],[6086,7,6077,9],[6087,6,6078,8,"operation"],[6088,4,6079,4],[6088,5,6079,5],[6089,2,6080,0],[6090,2,6081,0],[6091,0,6082,0],[6092,0,6083,0],[6093,0,6084,0],[6094,0,6085,0],[6095,0,6086,0],[6096,0,6087,0],[6097,0,6088,0],[6098,0,6089,0],[6099,0,6090,0],[6100,2,6091,0],[6100,17,6091,15,"verifyPasswordResetCode"],[6100,40,6091,38,"verifyPasswordResetCode"],[6100,41,6091,39,"auth"],[6100,45,6091,43],[6100,47,6091,45,"code"],[6100,51,6091,49],[6100,53,6091,51],[6101,4,6092,4],[6101,10,6092,10],[6102,6,6092,12,"data"],[6103,4,6092,17],[6103,5,6092,18],[6103,8,6092,21],[6103,14,6092,27,"checkActionCode"],[6103,29,6092,42],[6103,30,6092,43],[6103,34,6092,43,"getModularInstance"],[6103,58,6092,61],[6103,60,6092,62,"auth"],[6103,64,6092,66],[6103,65,6092,67],[6103,67,6092,69,"code"],[6103,71,6092,73],[6103,72,6092,74],[6104,4,6093,4],[6105,4,6094,4],[6105,11,6094,11,"data"],[6105,15,6094,15],[6105,16,6094,16,"email"],[6105,21,6094,21],[6106,2,6095,0],[6107,2,6096,0],[6108,0,6097,0],[6109,0,6098,0],[6110,0,6099,0],[6111,0,6100,0],[6112,0,6101,0],[6113,0,6102,0],[6114,0,6103,0],[6115,0,6104,0],[6116,0,6105,0],[6117,0,6106,0],[6118,0,6107,0],[6119,0,6108,0],[6120,0,6109,0],[6121,0,6110,0],[6122,0,6111,0],[6123,0,6112,0],[6124,0,6113,0],[6125,0,6114,0],[6126,0,6115,0],[6127,2,6116,0],[6127,17,6116,15,"createUserWithEmailAndPassword"],[6127,47,6116,45,"createUserWithEmailAndPassword"],[6127,48,6116,46,"auth"],[6127,52,6116,50],[6127,54,6116,52,"email"],[6127,59,6116,57],[6127,61,6116,59,"password"],[6127,69,6116,67],[6127,71,6116,69],[6128,4,6117,4],[6128,8,6117,8],[6128,12,6117,8,"_isFirebaseServerApp"],[6128,37,6117,28],[6128,39,6117,29,"auth"],[6128,43,6117,33],[6128,44,6117,34,"app"],[6128,47,6117,37],[6128,48,6117,38],[6128,50,6117,40],[6129,6,6118,8],[6129,13,6118,15,"Promise"],[6129,20,6118,22],[6129,21,6118,23,"reject"],[6129,27,6118,29],[6129,28,6118,30,"_serverAppCurrentUserOperationNotSupportedError"],[6129,75,6118,77],[6129,76,6118,78,"auth"],[6129,80,6118,82],[6129,81,6118,83],[6129,82,6118,84],[6130,4,6119,4],[6131,4,6120,4],[6131,10,6120,10,"authInternal"],[6131,22,6120,22],[6131,25,6120,25,"_castAuth"],[6131,34,6120,34],[6131,35,6120,35,"auth"],[6131,39,6120,39],[6131,40,6120,40],[6132,4,6121,4],[6132,10,6121,10,"request"],[6132,17,6121,17],[6132,20,6121,20],[6133,6,6122,8,"returnSecureToken"],[6133,23,6122,25],[6133,25,6122,27],[6133,29,6122,31],[6134,6,6123,8,"email"],[6134,11,6123,13],[6135,6,6124,8,"password"],[6135,14,6124,16],[6136,6,6125,8,"clientType"],[6136,16,6125,18],[6136,18,6125,20],[6136,35,6125,37],[6136,36,6125,38],[6137,4,6126,4],[6137,5,6126,5],[6138,4,6127,4],[6138,10,6127,10,"signUpResponse"],[6138,24,6127,24],[6138,27,6127,27,"handleRecaptchaFlow"],[6138,46,6127,46],[6138,47,6127,47,"authInternal"],[6138,59,6127,59],[6138,61,6127,61,"request"],[6138,68,6127,68],[6138,70,6127,70],[6138,86,6127,86],[6138,87,6127,87],[6138,131,6127,131,"signUp"],[6138,137,6127,137],[6138,139,6127,139],[6138,164,6127,164],[6138,165,6127,165],[6138,216,6127,216],[6138,217,6127,217],[6139,4,6128,4],[6139,10,6128,10,"response"],[6139,18,6128,18],[6139,21,6128,21],[6139,27,6128,27,"signUpResponse"],[6139,41,6128,41],[6139,42,6128,42,"catch"],[6139,47,6128,47],[6139,48,6128,48,"error"],[6139,53,6128,53],[6139,57,6128,57],[6140,6,6129,8],[6140,10,6129,12,"error"],[6140,15,6129,17],[6140,16,6129,18,"code"],[6140,20,6129,22],[6140,25,6129,27],[6140,33,6129,35],[6140,70,6129,72],[6140,71,6129,73],[6140,128,6129,130],[6140,130,6129,132],[6141,8,6130,12],[6141,13,6130,17,"recachePasswordPolicy"],[6141,34,6130,38],[6141,35,6130,39,"auth"],[6141,39,6130,43],[6141,40,6130,44],[6142,6,6131,8],[6143,6,6132,8],[6143,12,6132,14,"error"],[6143,17,6132,19],[6144,4,6133,4],[6144,5,6133,5],[6144,6,6133,6],[6145,4,6134,4],[6145,10,6134,10,"userCredential"],[6145,24,6134,24],[6145,27,6134,27],[6145,33,6134,33,"UserCredentialImpl"],[6145,51,6134,51],[6145,52,6134,52,"_fromIdTokenResponse"],[6145,72,6134,72],[6145,73,6134,73,"authInternal"],[6145,85,6134,85],[6145,87,6134,87],[6145,95,6134,95],[6145,96,6134,96],[6145,125,6134,125,"response"],[6145,133,6134,133],[6145,134,6134,134],[6146,4,6135,4],[6146,10,6135,10,"authInternal"],[6146,22,6135,22],[6146,23,6135,23,"_updateCurrentUser"],[6146,41,6135,41],[6146,42,6135,42,"userCredential"],[6146,56,6135,56],[6146,57,6135,57,"user"],[6146,61,6135,61],[6146,62,6135,62],[6147,4,6136,4],[6147,11,6136,11,"userCredential"],[6147,25,6136,25],[6148,2,6137,0],[6149,2,6138,0],[6150,0,6139,0],[6151,0,6140,0],[6152,0,6141,0],[6153,0,6142,0],[6154,0,6143,0],[6155,0,6144,0],[6156,0,6145,0],[6157,0,6146,0],[6158,0,6147,0],[6159,0,6148,0],[6160,0,6149,0],[6161,0,6150,0],[6162,0,6151,0],[6163,0,6152,0],[6164,0,6153,0],[6165,0,6154,0],[6166,0,6155,0],[6167,0,6156,0],[6168,0,6157,0],[6169,0,6158,0],[6170,0,6159,0],[6171,0,6160,0],[6172,2,6161,0],[6172,11,6161,9,"signInWithEmailAndPassword"],[6172,37,6161,35,"signInWithEmailAndPassword"],[6172,38,6161,36,"auth"],[6172,42,6161,40],[6172,44,6161,42,"email"],[6172,49,6161,47],[6172,51,6161,49,"password"],[6172,59,6161,57],[6172,61,6161,59],[6173,4,6162,4],[6173,8,6162,8],[6173,12,6162,8,"_isFirebaseServerApp"],[6173,37,6162,28],[6173,39,6162,29,"auth"],[6173,43,6162,33],[6173,44,6162,34,"app"],[6173,47,6162,37],[6173,48,6162,38],[6173,50,6162,40],[6174,6,6163,8],[6174,13,6163,15,"Promise"],[6174,20,6163,22],[6174,21,6163,23,"reject"],[6174,27,6163,29],[6174,28,6163,30,"_serverAppCurrentUserOperationNotSupportedError"],[6174,75,6163,77],[6174,76,6163,78,"auth"],[6174,80,6163,82],[6174,81,6163,83],[6174,82,6163,84],[6175,4,6164,4],[6176,4,6165,4],[6176,11,6165,11,"signInWithCredential"],[6176,31,6165,31],[6176,32,6165,32],[6176,36,6165,32,"getModularInstance"],[6176,60,6165,50],[6176,62,6165,51,"auth"],[6176,66,6165,55],[6176,67,6165,56],[6176,69,6165,58,"EmailAuthProvider"],[6176,86,6165,75],[6176,87,6165,76,"credential"],[6176,97,6165,86],[6176,98,6165,87,"email"],[6176,103,6165,92],[6176,105,6165,94,"password"],[6176,113,6165,102],[6176,114,6165,103],[6176,115,6165,104],[6176,116,6165,105,"catch"],[6176,121,6165,110],[6176,122,6165,111],[6176,128,6165,118,"error"],[6176,133,6165,123],[6176,137,6165,128],[6177,6,6166,8],[6177,10,6166,12,"error"],[6177,15,6166,17],[6177,16,6166,18,"code"],[6177,20,6166,22],[6177,25,6166,27],[6177,33,6166,35],[6177,70,6166,72],[6177,71,6166,73],[6177,128,6166,130],[6177,130,6166,132],[6178,8,6167,12],[6178,13,6167,17,"recachePasswordPolicy"],[6178,34,6167,38],[6178,35,6167,39,"auth"],[6178,39,6167,43],[6178,40,6167,44],[6179,6,6168,8],[6180,6,6169,8],[6180,12,6169,14,"error"],[6180,17,6169,19],[6181,4,6170,4],[6181,5,6170,5],[6181,6,6170,6],[6182,2,6171,0],[6184,2,6173,0],[6185,0,6174,0],[6186,0,6175,0],[6187,0,6176,0],[6188,0,6177,0],[6189,0,6178,0],[6190,0,6179,0],[6191,0,6180,0],[6192,0,6181,0],[6193,0,6182,0],[6194,0,6183,0],[6195,0,6184,0],[6196,0,6185,0],[6197,0,6186,0],[6198,0,6187,0],[6199,0,6188,0],[6200,2,6189,0],[6201,0,6190,0],[6202,0,6191,0],[6203,0,6192,0],[6204,0,6193,0],[6205,0,6194,0],[6206,0,6195,0],[6207,0,6196,0],[6208,0,6197,0],[6209,0,6198,0],[6210,0,6199,0],[6211,0,6200,0],[6212,0,6201,0],[6213,0,6202,0],[6214,0,6203,0],[6215,0,6204,0],[6216,0,6205,0],[6217,0,6206,0],[6218,0,6207,0],[6219,0,6208,0],[6220,0,6209,0],[6221,0,6210,0],[6222,0,6211,0],[6223,0,6212,0],[6224,0,6213,0],[6225,0,6214,0],[6226,0,6215,0],[6227,0,6216,0],[6228,0,6217,0],[6229,0,6218,0],[6230,0,6219,0],[6231,0,6220,0],[6232,0,6221,0],[6233,0,6222,0],[6234,0,6223,0],[6235,0,6224,0],[6236,0,6225,0],[6237,0,6226,0],[6238,2,6227,0],[6238,17,6227,15,"sendSignInLinkToEmail"],[6238,38,6227,36,"sendSignInLinkToEmail"],[6238,39,6227,37,"auth"],[6238,43,6227,41],[6238,45,6227,43,"email"],[6238,50,6227,48],[6238,52,6227,50,"actionCodeSettings"],[6238,70,6227,68],[6238,72,6227,70],[6239,4,6228,4],[6239,10,6228,10,"authInternal"],[6239,22,6228,22],[6239,25,6228,25,"_castAuth"],[6239,34,6228,34],[6239,35,6228,35,"auth"],[6239,39,6228,39],[6239,40,6228,40],[6240,4,6229,4],[6240,10,6229,10,"request"],[6240,17,6229,17],[6240,20,6229,20],[6241,6,6230,8,"requestType"],[6241,17,6230,19],[6241,19,6230,21],[6241,33,6230,35],[6241,34,6230,36],[6242,6,6231,8,"email"],[6242,11,6231,13],[6243,6,6232,8,"clientType"],[6243,16,6232,18],[6243,18,6232,20],[6243,35,6232,37],[6243,36,6232,38],[6244,4,6233,4],[6244,5,6233,5],[6245,4,6234,4],[6245,13,6234,13,"setActionCodeSettings"],[6245,34,6234,34,"setActionCodeSettings"],[6245,35,6234,35,"request"],[6245,42,6234,42],[6245,44,6234,44,"actionCodeSettings"],[6245,62,6234,62],[6245,64,6234,64],[6246,6,6235,8,"_assert"],[6246,13,6235,15],[6246,14,6235,16,"actionCodeSettings"],[6246,32,6235,34],[6246,33,6235,35,"handleCodeInApp"],[6246,48,6235,50],[6246,50,6235,52,"authInternal"],[6246,62,6235,64],[6246,64,6235,66],[6246,80,6235,82],[6246,81,6235,83],[6246,115,6235,117],[6246,116,6235,118],[6247,6,6236,8],[6247,10,6236,12,"actionCodeSettings"],[6247,28,6236,30],[6247,30,6236,32],[6248,8,6237,12,"_setActionCodeSettingsOnRequest"],[6248,39,6237,43],[6248,40,6237,44,"authInternal"],[6248,52,6237,56],[6248,54,6237,58,"request"],[6248,61,6237,65],[6248,63,6237,67,"actionCodeSettings"],[6248,81,6237,85],[6248,82,6237,86],[6249,6,6238,8],[6250,4,6239,4],[6251,4,6240,4,"setActionCodeSettings"],[6251,25,6240,25],[6251,26,6240,26,"request"],[6251,33,6240,33],[6251,35,6240,35,"actionCodeSettings"],[6251,53,6240,53],[6251,54,6240,54],[6252,4,6241,4],[6252,10,6241,10,"handleRecaptchaFlow"],[6252,29,6241,29],[6252,30,6241,30,"authInternal"],[6252,42,6241,42],[6252,44,6241,44,"request"],[6252,51,6241,51],[6252,53,6241,53],[6252,65,6241,65],[6252,66,6241,66],[6252,106,6241,106,"sendSignInLinkToEmail$1"],[6252,129,6241,129],[6252,131,6241,131],[6252,156,6241,156],[6252,157,6241,157],[6252,208,6241,208],[6252,209,6241,209],[6253,2,6242,0],[6254,2,6243,0],[6255,0,6244,0],[6256,0,6245,0],[6257,0,6246,0],[6258,0,6247,0],[6259,0,6248,0],[6260,0,6249,0],[6261,0,6250,0],[6262,2,6251,0],[6262,11,6251,9,"isSignInWithEmailLink"],[6262,32,6251,30,"isSignInWithEmailLink"],[6262,33,6251,31,"auth"],[6262,37,6251,35],[6262,39,6251,37,"emailLink"],[6262,48,6251,46],[6262,50,6251,48],[6263,4,6252,4],[6263,10,6252,10,"actionCodeUrl"],[6263,23,6252,23],[6263,26,6252,26,"ActionCodeURL"],[6263,39,6252,39],[6263,40,6252,40,"parseLink"],[6263,49,6252,49],[6263,50,6252,50,"emailLink"],[6263,59,6252,59],[6263,60,6252,60],[6264,4,6253,4],[6264,11,6253,11,"actionCodeUrl"],[6264,24,6253,24],[6264,26,6253,26,"operation"],[6264,35,6253,35],[6264,40,6253,40],[6264,54,6253,54],[6264,55,6253,55],[6265,2,6254,0],[6266,2,6255,0],[6267,0,6256,0],[6268,0,6257,0],[6269,0,6258,0],[6270,0,6259,0],[6271,0,6260,0],[6272,0,6261,0],[6273,0,6262,0],[6274,0,6263,0],[6275,0,6264,0],[6276,0,6265,0],[6277,0,6266,0],[6278,0,6267,0],[6279,0,6268,0],[6280,0,6269,0],[6281,0,6270,0],[6282,0,6271,0],[6283,0,6272,0],[6284,0,6273,0],[6285,0,6274,0],[6286,0,6275,0],[6287,0,6276,0],[6288,0,6277,0],[6289,0,6278,0],[6290,0,6279,0],[6291,0,6280,0],[6292,0,6281,0],[6293,0,6282,0],[6294,0,6283,0],[6295,0,6284,0],[6296,0,6285,0],[6297,0,6286,0],[6298,0,6287,0],[6299,0,6288,0],[6300,0,6289,0],[6301,0,6290,0],[6302,0,6291,0],[6303,0,6292,0],[6304,0,6293,0],[6305,0,6294,0],[6306,0,6295,0],[6307,2,6296,0],[6307,17,6296,15,"signInWithEmailLink"],[6307,36,6296,34,"signInWithEmailLink"],[6307,37,6296,35,"auth"],[6307,41,6296,39],[6307,43,6296,41,"email"],[6307,48,6296,46],[6307,50,6296,48,"emailLink"],[6307,59,6296,57],[6307,61,6296,59],[6308,4,6297,4],[6308,8,6297,8],[6308,12,6297,8,"_isFirebaseServerApp"],[6308,37,6297,28],[6308,39,6297,29,"auth"],[6308,43,6297,33],[6308,44,6297,34,"app"],[6308,47,6297,37],[6308,48,6297,38],[6308,50,6297,40],[6309,6,6298,8],[6309,13,6298,15,"Promise"],[6309,20,6298,22],[6309,21,6298,23,"reject"],[6309,27,6298,29],[6309,28,6298,30,"_serverAppCurrentUserOperationNotSupportedError"],[6309,75,6298,77],[6309,76,6298,78,"auth"],[6309,80,6298,82],[6309,81,6298,83],[6309,82,6298,84],[6310,4,6299,4],[6311,4,6300,4],[6311,10,6300,10,"authModular"],[6311,21,6300,21],[6311,24,6300,24],[6311,28,6300,24,"getModularInstance"],[6311,52,6300,42],[6311,54,6300,43,"auth"],[6311,58,6300,47],[6311,59,6300,48],[6312,4,6301,4],[6312,10,6301,10,"credential"],[6312,20,6301,20],[6312,23,6301,23,"EmailAuthProvider"],[6312,40,6301,40],[6312,41,6301,41,"credentialWithLink"],[6312,59,6301,59],[6312,60,6301,60,"email"],[6312,65,6301,65],[6312,67,6301,67,"emailLink"],[6312,76,6301,76],[6312,80,6301,80,"_getCurrentUrl"],[6312,94,6301,94],[6312,95,6301,95],[6312,96,6301,96],[6312,97,6301,97],[6313,4,6302,4],[6314,4,6303,4],[6315,4,6304,4,"_assert"],[6315,11,6304,11],[6315,12,6304,12,"credential"],[6315,22,6304,22],[6315,23,6304,23,"_tenantId"],[6315,32,6304,32],[6315,38,6304,38,"authModular"],[6315,49,6304,49],[6315,50,6304,50,"tenantId"],[6315,58,6304,58],[6315,62,6304,62],[6315,66,6304,66],[6315,67,6304,67],[6315,69,6304,69,"authModular"],[6315,80,6304,80],[6315,82,6304,82],[6315,102,6304,102],[6315,103,6304,103],[6315,141,6304,141],[6315,142,6304,142],[6316,4,6305,4],[6316,11,6305,11,"signInWithCredential"],[6316,31,6305,31],[6316,32,6305,32,"authModular"],[6316,43,6305,43],[6316,45,6305,45,"credential"],[6316,55,6305,55],[6316,56,6305,56],[6317,2,6306,0],[6319,2,6308,0],[6320,0,6309,0],[6321,0,6310,0],[6322,0,6311,0],[6323,0,6312,0],[6324,0,6313,0],[6325,0,6314,0],[6326,0,6315,0],[6327,0,6316,0],[6328,0,6317,0],[6329,0,6318,0],[6330,0,6319,0],[6331,0,6320,0],[6332,0,6321,0],[6333,0,6322,0],[6334,0,6323,0],[6335,2,6324,0],[6335,17,6324,15,"createAuthUri"],[6335,30,6324,28,"createAuthUri"],[6335,31,6324,29,"auth"],[6335,35,6324,33],[6335,37,6324,35,"request"],[6335,44,6324,42],[6335,46,6324,44],[6336,4,6325,4],[6336,11,6325,11,"_performApiRequest"],[6336,29,6325,29],[6336,30,6325,30,"auth"],[6336,34,6325,34],[6336,36,6325,36],[6336,42,6325,42],[6336,43,6325,43],[6336,66,6325,66],[6336,94,6325,94],[6336,95,6325,95],[6336,127,6325,127,"_addTidIfNecessary"],[6336,145,6325,145],[6336,146,6325,146,"auth"],[6336,150,6325,150],[6336,152,6325,152,"request"],[6336,159,6325,159],[6336,160,6325,160],[6336,161,6325,161],[6337,2,6326,0],[6339,2,6328,0],[6340,0,6329,0],[6341,0,6330,0],[6342,0,6331,0],[6343,0,6332,0],[6344,0,6333,0],[6345,0,6334,0],[6346,0,6335,0],[6347,0,6336,0],[6348,0,6337,0],[6349,0,6338,0],[6350,0,6339,0],[6351,0,6340,0],[6352,0,6341,0],[6353,0,6342,0],[6354,0,6343,0],[6355,2,6344,0],[6356,0,6345,0],[6357,0,6346,0],[6358,0,6347,0],[6359,0,6348,0],[6360,0,6349,0],[6361,0,6350,0],[6362,0,6351,0],[6363,0,6352,0],[6364,0,6353,0],[6365,0,6354,0],[6366,0,6355,0],[6367,0,6356,0],[6368,0,6357,0],[6369,0,6358,0],[6370,0,6359,0],[6371,0,6360,0],[6372,0,6361,0],[6373,0,6362,0],[6374,0,6363,0],[6375,2,6364,0],[6375,17,6364,15,"fetchSignInMethodsForEmail"],[6375,43,6364,41,"fetchSignInMethodsForEmail"],[6375,44,6364,42,"auth"],[6375,48,6364,46],[6375,50,6364,48,"email"],[6375,55,6364,53],[6375,57,6364,55],[6376,4,6365,4],[6377,4,6366,4],[6378,4,6367,4],[6379,4,6368,4],[6379,10,6368,10,"continueUri"],[6379,21,6368,21],[6379,24,6368,24,"_isHttpOrHttps"],[6379,38,6368,38],[6379,39,6368,39],[6379,40,6368,40],[6379,43,6368,43,"_getCurrentUrl"],[6379,57,6368,57],[6379,58,6368,58],[6379,59,6368,59],[6379,62,6368,62],[6379,80,6368,80],[6380,4,6369,4],[6380,10,6369,10,"request"],[6380,17,6369,17],[6380,20,6369,20],[6381,6,6370,8,"identifier"],[6381,16,6370,18],[6381,18,6370,20,"email"],[6381,23,6370,25],[6382,6,6371,8,"continueUri"],[6383,4,6372,4],[6383,5,6372,5],[6384,4,6373,4],[6384,10,6373,10],[6385,6,6373,12,"signinMethods"],[6386,4,6373,26],[6386,5,6373,27],[6386,8,6373,30],[6386,14,6373,36,"createAuthUri"],[6386,27,6373,49],[6386,28,6373,50],[6386,32,6373,50,"getModularInstance"],[6386,56,6373,68],[6386,58,6373,69,"auth"],[6386,62,6373,73],[6386,63,6373,74],[6386,65,6373,76,"request"],[6386,72,6373,83],[6386,73,6373,84],[6387,4,6374,4],[6387,11,6374,11,"signinMethods"],[6387,24,6374,24],[6387,28,6374,28],[6387,30,6374,30],[6388,2,6375,0],[6389,2,6376,0],[6390,0,6377,0],[6391,0,6378,0],[6392,0,6379,0],[6393,0,6380,0],[6394,0,6381,0],[6395,0,6382,0],[6396,0,6383,0],[6397,0,6384,0],[6398,0,6385,0],[6399,0,6386,0],[6400,0,6387,0],[6401,0,6388,0],[6402,0,6389,0],[6403,0,6390,0],[6404,0,6391,0],[6405,0,6392,0],[6406,0,6393,0],[6407,0,6394,0],[6408,0,6395,0],[6409,0,6396,0],[6410,0,6397,0],[6411,0,6398,0],[6412,0,6399,0],[6413,0,6400,0],[6414,0,6401,0],[6415,0,6402,0],[6416,0,6403,0],[6417,0,6404,0],[6418,0,6405,0],[6419,2,6406,0],[6419,17,6406,15,"sendEmailVerification"],[6419,38,6406,36,"sendEmailVerification"],[6419,39,6406,37,"user"],[6419,43,6406,41],[6419,45,6406,43,"actionCodeSettings"],[6419,63,6406,61],[6419,65,6406,63],[6420,4,6407,4],[6420,10,6407,10,"userInternal"],[6420,22,6407,22],[6420,25,6407,25],[6420,29,6407,25,"getModularInstance"],[6420,53,6407,43],[6420,55,6407,44,"user"],[6420,59,6407,48],[6420,60,6407,49],[6421,4,6408,4],[6421,10,6408,10,"idToken"],[6421,17,6408,17],[6421,20,6408,20],[6421,26,6408,26,"user"],[6421,30,6408,30],[6421,31,6408,31,"getIdToken"],[6421,41,6408,41],[6421,42,6408,42],[6421,43,6408,43],[6422,4,6409,4],[6422,10,6409,10,"request"],[6422,17,6409,17],[6422,20,6409,20],[6423,6,6410,8,"requestType"],[6423,17,6410,19],[6423,19,6410,21],[6423,33,6410,35],[6423,34,6410,36],[6424,6,6411,8,"idToken"],[6425,4,6412,4],[6425,5,6412,5],[6426,4,6413,4],[6426,8,6413,8,"actionCodeSettings"],[6426,26,6413,26],[6426,28,6413,28],[6427,6,6414,8,"_setActionCodeSettingsOnRequest"],[6427,37,6414,39],[6427,38,6414,40,"userInternal"],[6427,50,6414,52],[6427,51,6414,53,"auth"],[6427,55,6414,57],[6427,57,6414,59,"request"],[6427,64,6414,66],[6427,66,6414,68,"actionCodeSettings"],[6427,84,6414,86],[6427,85,6414,87],[6428,4,6415,4],[6429,4,6416,4],[6429,10,6416,10],[6430,6,6416,12,"email"],[6431,4,6416,18],[6431,5,6416,19],[6431,8,6416,22],[6431,14,6416,28,"sendEmailVerification$1"],[6431,37,6416,51],[6431,38,6416,52,"userInternal"],[6431,50,6416,64],[6431,51,6416,65,"auth"],[6431,55,6416,69],[6431,57,6416,71,"request"],[6431,64,6416,78],[6431,65,6416,79],[6432,4,6417,4],[6432,8,6417,8,"email"],[6432,13,6417,13],[6432,18,6417,18,"user"],[6432,22,6417,22],[6432,23,6417,23,"email"],[6432,28,6417,28],[6432,30,6417,30],[6433,6,6418,8],[6433,12,6418,14,"user"],[6433,16,6418,18],[6433,17,6418,19,"reload"],[6433,23,6418,25],[6433,24,6418,26],[6433,25,6418,27],[6434,4,6419,4],[6435,2,6420,0],[6436,2,6421,0],[6437,0,6422,0],[6438,0,6423,0],[6439,0,6424,0],[6440,0,6425,0],[6441,0,6426,0],[6442,0,6427,0],[6443,0,6428,0],[6444,0,6429,0],[6445,0,6430,0],[6446,0,6431,0],[6447,0,6432,0],[6448,0,6433,0],[6449,0,6434,0],[6450,0,6435,0],[6451,0,6436,0],[6452,0,6437,0],[6453,0,6438,0],[6454,0,6439,0],[6455,0,6440,0],[6456,0,6441,0],[6457,0,6442,0],[6458,0,6443,0],[6459,0,6444,0],[6460,0,6445,0],[6461,0,6446,0],[6462,0,6447,0],[6463,0,6448,0],[6464,0,6449,0],[6465,0,6450,0],[6466,0,6451,0],[6467,0,6452,0],[6468,0,6453,0],[6469,0,6454,0],[6470,2,6455,0],[6470,17,6455,15,"verifyBeforeUpdateEmail"],[6470,40,6455,38,"verifyBeforeUpdateEmail"],[6470,41,6455,39,"user"],[6470,45,6455,43],[6470,47,6455,45,"newEmail"],[6470,55,6455,53],[6470,57,6455,55,"actionCodeSettings"],[6470,75,6455,73],[6470,77,6455,75],[6471,4,6456,4],[6471,10,6456,10,"userInternal"],[6471,22,6456,22],[6471,25,6456,25],[6471,29,6456,25,"getModularInstance"],[6471,53,6456,43],[6471,55,6456,44,"user"],[6471,59,6456,48],[6471,60,6456,49],[6472,4,6457,4],[6472,10,6457,10,"idToken"],[6472,17,6457,17],[6472,20,6457,20],[6472,26,6457,26,"user"],[6472,30,6457,30],[6472,31,6457,31,"getIdToken"],[6472,41,6457,41],[6472,42,6457,42],[6472,43,6457,43],[6473,4,6458,4],[6473,10,6458,10,"request"],[6473,17,6458,17],[6473,20,6458,20],[6474,6,6459,8,"requestType"],[6474,17,6459,19],[6474,19,6459,21],[6474,44,6459,46],[6474,45,6459,47],[6475,6,6460,8,"idToken"],[6475,13,6460,15],[6476,6,6461,8,"newEmail"],[6477,4,6462,4],[6477,5,6462,5],[6478,4,6463,4],[6478,8,6463,8,"actionCodeSettings"],[6478,26,6463,26],[6478,28,6463,28],[6479,6,6464,8,"_setActionCodeSettingsOnRequest"],[6479,37,6464,39],[6479,38,6464,40,"userInternal"],[6479,50,6464,52],[6479,51,6464,53,"auth"],[6479,55,6464,57],[6479,57,6464,59,"request"],[6479,64,6464,66],[6479,66,6464,68,"actionCodeSettings"],[6479,84,6464,86],[6479,85,6464,87],[6480,4,6465,4],[6481,4,6466,4],[6481,10,6466,10],[6482,6,6466,12,"email"],[6483,4,6466,18],[6483,5,6466,19],[6483,8,6466,22],[6483,14,6466,28,"verifyAndChangeEmail"],[6483,34,6466,48],[6483,35,6466,49,"userInternal"],[6483,47,6466,61],[6483,48,6466,62,"auth"],[6483,52,6466,66],[6483,54,6466,68,"request"],[6483,61,6466,75],[6483,62,6466,76],[6484,4,6467,4],[6484,8,6467,8,"email"],[6484,13,6467,13],[6484,18,6467,18,"user"],[6484,22,6467,22],[6484,23,6467,23,"email"],[6484,28,6467,28],[6484,30,6467,30],[6485,6,6468,8],[6486,6,6469,8],[6487,6,6470,8],[6487,12,6470,14,"user"],[6487,16,6470,18],[6487,17,6470,19,"reload"],[6487,23,6470,25],[6487,24,6470,26],[6487,25,6470,27],[6488,4,6471,4],[6489,2,6472,0],[6491,2,6474,0],[6492,0,6475,0],[6493,0,6476,0],[6494,0,6477,0],[6495,0,6478,0],[6496,0,6479,0],[6497,0,6480,0],[6498,0,6481,0],[6499,0,6482,0],[6500,0,6483,0],[6501,0,6484,0],[6502,0,6485,0],[6503,0,6486,0],[6504,0,6487,0],[6505,0,6488,0],[6506,0,6489,0],[6507,2,6490,0],[6507,17,6490,15,"updateProfile$1"],[6507,32,6490,30,"updateProfile$1"],[6507,33,6490,31,"auth"],[6507,37,6490,35],[6507,39,6490,37,"request"],[6507,46,6490,44],[6507,48,6490,46],[6508,4,6491,4],[6508,11,6491,11,"_performApiRequest"],[6508,29,6491,29],[6508,30,6491,30,"auth"],[6508,34,6491,34],[6508,36,6491,36],[6508,42,6491,42],[6508,43,6491,43],[6508,66,6491,66],[6508,87,6491,87],[6508,88,6491,88],[6508,121,6491,121,"request"],[6508,128,6491,128],[6508,129,6491,129],[6509,2,6492,0],[6511,2,6494,0],[6512,0,6495,0],[6513,0,6496,0],[6514,0,6497,0],[6515,0,6498,0],[6516,0,6499,0],[6517,0,6500,0],[6518,0,6501,0],[6519,0,6502,0],[6520,0,6503,0],[6521,0,6504,0],[6522,0,6505,0],[6523,0,6506,0],[6524,0,6507,0],[6525,0,6508,0],[6526,0,6509,0],[6527,2,6510,0],[6528,0,6511,0],[6529,0,6512,0],[6530,0,6513,0],[6531,0,6514,0],[6532,0,6515,0],[6533,0,6516,0],[6534,0,6517,0],[6535,2,6518,0],[6535,17,6518,15,"updateProfile"],[6535,30,6518,28,"updateProfile"],[6535,31,6518,29,"user"],[6535,35,6518,33],[6535,37,6518,35],[6536,4,6518,37,"displayName"],[6536,15,6518,48],[6537,4,6518,50,"photoURL"],[6537,12,6518,58],[6537,14,6518,60,"photoUrl"],[6538,2,6518,69],[6538,3,6518,70],[6538,5,6518,72],[6539,4,6519,4],[6539,8,6519,8,"displayName"],[6539,19,6519,19],[6539,24,6519,24,"undefined"],[6539,33,6519,33],[6539,37,6519,37,"photoUrl"],[6539,45,6519,45],[6539,50,6519,50,"undefined"],[6539,59,6519,59],[6539,61,6519,61],[6540,6,6520,8],[6541,4,6521,4],[6542,4,6522,4],[6542,10,6522,10,"userInternal"],[6542,22,6522,22],[6542,25,6522,25],[6542,29,6522,25,"getModularInstance"],[6542,53,6522,43],[6542,55,6522,44,"user"],[6542,59,6522,48],[6542,60,6522,49],[6543,4,6523,4],[6543,10,6523,10,"idToken"],[6543,17,6523,17],[6543,20,6523,20],[6543,26,6523,26,"userInternal"],[6543,38,6523,38],[6543,39,6523,39,"getIdToken"],[6543,49,6523,49],[6543,50,6523,50],[6543,51,6523,51],[6544,4,6524,4],[6544,10,6524,10,"profileRequest"],[6544,24,6524,24],[6544,27,6524,27],[6545,6,6525,8,"idToken"],[6545,13,6525,15],[6546,6,6526,8,"displayName"],[6546,17,6526,19],[6547,6,6527,8,"photoUrl"],[6547,14,6527,16],[6548,6,6528,8,"returnSecureToken"],[6548,23,6528,25],[6548,25,6528,27],[6549,4,6529,4],[6549,5,6529,5],[6550,4,6530,4],[6550,10,6530,10,"response"],[6550,18,6530,18],[6550,21,6530,21],[6550,27,6530,27,"_logoutIfInvalidated"],[6550,47,6530,47],[6550,48,6530,48,"userInternal"],[6550,60,6530,60],[6550,62,6530,62,"updateProfile$1"],[6550,77,6530,77],[6550,78,6530,78,"userInternal"],[6550,90,6530,90],[6550,91,6530,91,"auth"],[6550,95,6530,95],[6550,97,6530,97,"profileRequest"],[6550,111,6530,111],[6550,112,6530,112],[6550,113,6530,113],[6551,4,6531,4,"userInternal"],[6551,16,6531,16],[6551,17,6531,17,"displayName"],[6551,28,6531,28],[6551,31,6531,31,"response"],[6551,39,6531,39],[6551,40,6531,40,"displayName"],[6551,51,6531,51],[6551,55,6531,55],[6551,59,6531,59],[6552,4,6532,4,"userInternal"],[6552,16,6532,16],[6552,17,6532,17,"photoURL"],[6552,25,6532,25],[6552,28,6532,28,"response"],[6552,36,6532,36],[6552,37,6532,37,"photoUrl"],[6552,45,6532,45],[6552,49,6532,49],[6552,53,6532,53],[6553,4,6533,4],[6554,4,6534,4],[6554,10,6534,10,"passwordProvider"],[6554,26,6534,26],[6554,29,6534,29,"userInternal"],[6554,41,6534,41],[6554,42,6534,42,"providerData"],[6554,54,6534,54],[6554,55,6534,55,"find"],[6554,59,6534,59],[6554,60,6534,60],[6554,61,6534,61],[6555,6,6534,63,"providerId"],[6556,4,6534,74],[6556,5,6534,75],[6556,10,6534,80,"providerId"],[6556,20,6534,90],[6556,25,6534,95],[6556,35,6534,105],[6556,36,6534,106],[6556,61,6534,131],[6556,62,6534,132],[6557,4,6535,4],[6557,8,6535,8,"passwordProvider"],[6557,24,6535,24],[6557,26,6535,26],[6558,6,6536,8,"passwordProvider"],[6558,22,6536,24],[6558,23,6536,25,"displayName"],[6558,34,6536,36],[6558,37,6536,39,"userInternal"],[6558,49,6536,51],[6558,50,6536,52,"displayName"],[6558,61,6536,63],[6559,6,6537,8,"passwordProvider"],[6559,22,6537,24],[6559,23,6537,25,"photoURL"],[6559,31,6537,33],[6559,34,6537,36,"userInternal"],[6559,46,6537,48],[6559,47,6537,49,"photoURL"],[6559,55,6537,57],[6560,4,6538,4],[6561,4,6539,4],[6561,10,6539,10,"userInternal"],[6561,22,6539,22],[6561,23,6539,23,"_updateTokensIfNecessary"],[6561,47,6539,47],[6561,48,6539,48,"response"],[6561,56,6539,56],[6561,57,6539,57],[6562,2,6540,0],[6563,2,6541,0],[6564,0,6542,0],[6565,0,6543,0],[6566,0,6544,0],[6567,0,6545,0],[6568,0,6546,0],[6569,0,6547,0],[6570,0,6548,0],[6571,0,6549,0],[6572,0,6550,0],[6573,0,6551,0],[6574,0,6552,0],[6575,0,6553,0],[6576,0,6554,0],[6577,0,6555,0],[6578,0,6556,0],[6579,0,6557,0],[6580,0,6558,0],[6581,0,6559,0],[6582,0,6560,0],[6583,0,6561,0],[6584,0,6562,0],[6585,0,6563,0],[6586,0,6564,0],[6587,2,6565,0],[6587,11,6565,9,"updateEmail"],[6587,22,6565,20,"updateEmail"],[6587,23,6565,21,"user"],[6587,27,6565,25],[6587,29,6565,27,"newEmail"],[6587,37,6565,35],[6587,39,6565,37],[6588,4,6566,4],[6588,10,6566,10,"userInternal"],[6588,22,6566,22],[6588,25,6566,25],[6588,29,6566,25,"getModularInstance"],[6588,53,6566,43],[6588,55,6566,44,"user"],[6588,59,6566,48],[6588,60,6566,49],[6589,4,6567,4],[6589,8,6567,8],[6589,12,6567,8,"_isFirebaseServerApp"],[6589,37,6567,28],[6589,39,6567,29,"userInternal"],[6589,51,6567,41],[6589,52,6567,42,"auth"],[6589,56,6567,46],[6589,57,6567,47,"app"],[6589,60,6567,50],[6589,61,6567,51],[6589,63,6567,53],[6590,6,6568,8],[6590,13,6568,15,"Promise"],[6590,20,6568,22],[6590,21,6568,23,"reject"],[6590,27,6568,29],[6590,28,6568,30,"_serverAppCurrentUserOperationNotSupportedError"],[6590,75,6568,77],[6590,76,6568,78,"userInternal"],[6590,88,6568,90],[6590,89,6568,91,"auth"],[6590,93,6568,95],[6590,94,6568,96],[6590,95,6568,97],[6591,4,6569,4],[6592,4,6570,4],[6592,11,6570,11,"updateEmailOrPassword"],[6592,32,6570,32],[6592,33,6570,33,"userInternal"],[6592,45,6570,45],[6592,47,6570,47,"newEmail"],[6592,55,6570,55],[6592,57,6570,57],[6592,61,6570,61],[6592,62,6570,62],[6593,2,6571,0],[6594,2,6572,0],[6595,0,6573,0],[6596,0,6574,0],[6597,0,6575,0],[6598,0,6576,0],[6599,0,6577,0],[6600,0,6578,0],[6601,0,6579,0],[6602,0,6580,0],[6603,0,6581,0],[6604,0,6582,0],[6605,0,6583,0],[6606,0,6584,0],[6607,2,6585,0],[6607,11,6585,9,"updatePassword"],[6607,25,6585,23,"updatePassword"],[6607,26,6585,24,"user"],[6607,30,6585,28],[6607,32,6585,30,"newPassword"],[6607,43,6585,41],[6607,45,6585,43],[6608,4,6586,4],[6608,11,6586,11,"updateEmailOrPassword"],[6608,32,6586,32],[6608,33,6586,33],[6608,37,6586,33,"getModularInstance"],[6608,61,6586,51],[6608,63,6586,52,"user"],[6608,67,6586,56],[6608,68,6586,57],[6608,70,6586,59],[6608,74,6586,63],[6608,76,6586,65,"newPassword"],[6608,87,6586,76],[6608,88,6586,77],[6609,2,6587,0],[6610,2,6588,0],[6610,17,6588,15,"updateEmailOrPassword"],[6610,38,6588,36,"updateEmailOrPassword"],[6610,39,6588,37,"user"],[6610,43,6588,41],[6610,45,6588,43,"email"],[6610,50,6588,48],[6610,52,6588,50,"password"],[6610,60,6588,58],[6610,62,6588,60],[6611,4,6589,4],[6611,10,6589,10],[6612,6,6589,12,"auth"],[6613,4,6589,17],[6613,5,6589,18],[6613,8,6589,21,"user"],[6613,12,6589,25],[6614,4,6590,4],[6614,10,6590,10,"idToken"],[6614,17,6590,17],[6614,20,6590,20],[6614,26,6590,26,"user"],[6614,30,6590,30],[6614,31,6590,31,"getIdToken"],[6614,41,6590,41],[6614,42,6590,42],[6614,43,6590,43],[6615,4,6591,4],[6615,10,6591,10,"request"],[6615,17,6591,17],[6615,20,6591,20],[6616,6,6592,8,"idToken"],[6616,13,6592,15],[6617,6,6593,8,"returnSecureToken"],[6617,23,6593,25],[6617,25,6593,27],[6618,4,6594,4],[6618,5,6594,5],[6619,4,6595,4],[6619,8,6595,8,"email"],[6619,13,6595,13],[6619,15,6595,15],[6620,6,6596,8,"request"],[6620,13,6596,15],[6620,14,6596,16,"email"],[6620,19,6596,21],[6620,22,6596,24,"email"],[6620,27,6596,29],[6621,4,6597,4],[6622,4,6598,4],[6622,8,6598,8,"password"],[6622,16,6598,16],[6622,18,6598,18],[6623,6,6599,8,"request"],[6623,13,6599,15],[6623,14,6599,16,"password"],[6623,22,6599,24],[6623,25,6599,27,"password"],[6623,33,6599,35],[6624,4,6600,4],[6625,4,6601,4],[6625,10,6601,10,"response"],[6625,18,6601,18],[6625,21,6601,21],[6625,27,6601,27,"_logoutIfInvalidated"],[6625,47,6601,47],[6625,48,6601,48,"user"],[6625,52,6601,52],[6625,54,6601,54,"updateEmailPassword"],[6625,73,6601,73],[6625,74,6601,74,"auth"],[6625,78,6601,78],[6625,80,6601,80,"request"],[6625,87,6601,87],[6625,88,6601,88],[6625,89,6601,89],[6626,4,6602,4],[6626,10,6602,10,"user"],[6626,14,6602,14],[6626,15,6602,15,"_updateTokensIfNecessary"],[6626,39,6602,39],[6626,40,6602,40,"response"],[6626,48,6602,48],[6626,50,6602,50],[6626,62,6602,63],[6626,66,6602,67],[6626,67,6602,68],[6627,2,6603,0],[6629,2,6605,0],[6630,0,6606,0],[6631,0,6607,0],[6632,0,6608,0],[6633,0,6609,0],[6634,0,6610,0],[6635,0,6611,0],[6636,0,6612,0],[6637,0,6613,0],[6638,0,6614,0],[6639,0,6615,0],[6640,0,6616,0],[6641,0,6617,0],[6642,0,6618,0],[6643,0,6619,0],[6644,0,6620,0],[6645,2,6621,0],[6646,0,6622,0],[6647,0,6623,0],[6648,0,6624,0],[6649,2,6625,0],[6649,11,6625,9,"_fromIdTokenResponse"],[6649,31,6625,29,"_fromIdTokenResponse"],[6649,32,6625,30,"idTokenResponse"],[6649,47,6625,45],[6649,49,6625,47],[6650,4,6626,4],[6650,8,6626,8],[6650,9,6626,9,"idTokenResponse"],[6650,24,6626,24],[6650,26,6626,26],[6651,6,6627,8],[6651,13,6627,15],[6651,17,6627,19],[6652,4,6628,4],[6653,4,6629,4],[6653,10,6629,10],[6654,6,6629,12,"providerId"],[6655,4,6629,23],[6655,5,6629,24],[6655,8,6629,27,"idTokenResponse"],[6655,23,6629,42],[6656,4,6630,4],[6656,10,6630,10,"profile"],[6656,17,6630,17],[6656,20,6630,20,"idTokenResponse"],[6656,35,6630,35],[6656,36,6630,36,"rawUserInfo"],[6656,47,6630,47],[6656,50,6631,10,"JSON"],[6656,54,6631,14],[6656,55,6631,15,"parse"],[6656,60,6631,20],[6656,61,6631,21,"idTokenResponse"],[6656,76,6631,36],[6656,77,6631,37,"rawUserInfo"],[6656,88,6631,48],[6656,89,6631,49],[6656,92,6632,10],[6656,93,6632,11],[6656,94,6632,12],[6657,4,6633,4],[6657,10,6633,10,"isNewUser"],[6657,19,6633,19],[6657,22,6633,22,"idTokenResponse"],[6657,37,6633,37],[6657,38,6633,38,"isNewUser"],[6657,47,6633,47],[6657,51,6634,8,"idTokenResponse"],[6657,66,6634,23],[6657,67,6634,24,"kind"],[6657,71,6634,28],[6657,76,6634,33],[6657,115,6634,72],[6657,116,6634,73],[6658,4,6635,4],[6658,8,6635,8],[6658,9,6635,9,"providerId"],[6658,19,6635,19],[6658,23,6635,23,"idTokenResponse"],[6658,38,6635,38],[6658,40,6635,40,"idToken"],[6658,47,6635,47],[6658,49,6635,49],[6659,6,6636,8],[6659,12,6636,14,"signInProvider"],[6659,26,6636,28],[6659,29,6636,31,"_parseToken"],[6659,40,6636,42],[6659,41,6636,43,"idTokenResponse"],[6659,56,6636,58],[6659,57,6636,59,"idToken"],[6659,64,6636,66],[6659,65,6636,67],[6659,67,6636,69,"firebase"],[6659,75,6636,77],[6659,78,6636,80],[6659,96,6636,98],[6659,97,6636,99],[6660,6,6637,8],[6660,10,6637,12,"signInProvider"],[6660,24,6637,26],[6660,26,6637,28],[6661,8,6638,12],[6661,14,6638,18,"filteredProviderId"],[6661,32,6638,36],[6661,35,6638,39,"signInProvider"],[6661,49,6638,53],[6661,54,6638,58],[6661,65,6638,69],[6661,66,6638,70],[6661,96,6639,16,"signInProvider"],[6661,110,6639,30],[6661,115,6639,35],[6661,123,6639,43],[6661,124,6639,44],[6661,150,6640,18,"signInProvider"],[6661,164,6640,32],[6661,167,6641,18],[6661,171,6641,22],[6662,8,6642,12],[6663,8,6643,12],[6663,15,6643,19],[6663,19,6643,23,"GenericAdditionalUserInfo"],[6663,44,6643,48],[6663,45,6643,49,"isNewUser"],[6663,54,6643,58],[6663,56,6643,60,"filteredProviderId"],[6663,74,6643,78],[6663,75,6643,79],[6664,6,6644,8],[6665,4,6645,4],[6666,4,6646,4],[6666,8,6646,8],[6666,9,6646,9,"providerId"],[6666,19,6646,19],[6666,21,6646,21],[6667,6,6647,8],[6667,13,6647,15],[6667,17,6647,19],[6668,4,6648,4],[6669,4,6649,4],[6669,12,6649,12,"providerId"],[6669,22,6649,22],[6670,6,6650,8],[6670,11,6650,13],[6670,25,6650,27],[6670,26,6650,28],[6671,8,6651,12],[6671,15,6651,19],[6671,19,6651,23,"FacebookAdditionalUserInfo"],[6671,45,6651,49],[6671,46,6651,50,"isNewUser"],[6671,55,6651,59],[6671,57,6651,61,"profile"],[6671,64,6651,68],[6671,65,6651,69],[6672,6,6652,8],[6672,11,6652,13],[6672,23,6652,25],[6672,24,6652,26],[6673,8,6653,12],[6673,15,6653,19],[6673,19,6653,23,"GithubAdditionalUserInfo"],[6673,43,6653,47],[6673,44,6653,48,"isNewUser"],[6673,53,6653,57],[6673,55,6653,59,"profile"],[6673,62,6653,66],[6673,63,6653,67],[6674,6,6654,8],[6674,11,6654,13],[6674,23,6654,25],[6674,24,6654,26],[6675,8,6655,12],[6675,15,6655,19],[6675,19,6655,23,"GoogleAdditionalUserInfo"],[6675,43,6655,47],[6675,44,6655,48,"isNewUser"],[6675,53,6655,57],[6675,55,6655,59,"profile"],[6675,62,6655,66],[6675,63,6655,67],[6676,6,6656,8],[6676,11,6656,13],[6676,24,6656,26],[6676,25,6656,27],[6677,8,6657,12],[6677,15,6657,19],[6677,19,6657,23,"TwitterAdditionalUserInfo"],[6677,44,6657,48],[6677,45,6657,49,"isNewUser"],[6677,54,6657,58],[6677,56,6657,60,"profile"],[6677,63,6657,67],[6677,65,6657,69,"idTokenResponse"],[6677,80,6657,84],[6677,81,6657,85,"screenName"],[6677,91,6657,95],[6677,95,6657,99],[6677,99,6657,103],[6677,100,6657,104],[6678,6,6658,8],[6678,11,6658,13],[6678,19,6658,21],[6678,20,6658,22],[6679,6,6659,8],[6679,11,6659,13],[6679,22,6659,24],[6679,23,6659,25],[6680,8,6660,12],[6680,15,6660,19],[6680,19,6660,23,"GenericAdditionalUserInfo"],[6680,44,6660,48],[6680,45,6660,49,"isNewUser"],[6680,54,6660,58],[6680,56,6660,60],[6680,60,6660,64],[6680,61,6660,65],[6681,6,6661,8],[6682,8,6662,12],[6682,15,6662,19],[6682,19,6662,23,"GenericAdditionalUserInfo"],[6682,44,6662,48],[6682,45,6662,49,"isNewUser"],[6682,54,6662,58],[6682,56,6662,60,"providerId"],[6682,66,6662,70],[6682,68,6662,72,"profile"],[6682,75,6662,79],[6682,76,6662,80],[6683,4,6663,4],[6684,2,6664,0],[6685,2,6665,0],[6685,8,6665,6,"GenericAdditionalUserInfo"],[6685,33,6665,31],[6685,34,6665,32],[6686,4,6666,4,"constructor"],[6686,15,6666,15,"constructor"],[6686,16,6666,16,"isNewUser"],[6686,25,6666,25],[6686,27,6666,27,"providerId"],[6686,37,6666,37],[6686,39,6666,39,"profile"],[6686,46,6666,46],[6686,49,6666,49],[6686,50,6666,50],[6686,51,6666,51],[6686,53,6666,53],[6687,6,6667,8],[6687,10,6667,12],[6687,11,6667,13,"isNewUser"],[6687,20,6667,22],[6687,23,6667,25,"isNewUser"],[6687,32,6667,34],[6688,6,6668,8],[6688,10,6668,12],[6688,11,6668,13,"providerId"],[6688,21,6668,23],[6688,24,6668,26,"providerId"],[6688,34,6668,36],[6689,6,6669,8],[6689,10,6669,12],[6689,11,6669,13,"profile"],[6689,18,6669,20],[6689,21,6669,23,"profile"],[6689,28,6669,30],[6690,4,6670,4],[6691,2,6671,0],[6692,2,6672,0],[6692,8,6672,6,"FederatedAdditionalUserInfoWithUsername"],[6692,47,6672,45],[6692,56,6672,54,"GenericAdditionalUserInfo"],[6692,81,6672,79],[6692,82,6672,80],[6693,4,6673,4,"constructor"],[6693,15,6673,15,"constructor"],[6693,16,6673,16,"isNewUser"],[6693,25,6673,25],[6693,27,6673,27,"providerId"],[6693,37,6673,37],[6693,39,6673,39,"profile"],[6693,46,6673,46],[6693,48,6673,48,"username"],[6693,56,6673,56],[6693,58,6673,58],[6694,6,6674,8],[6694,11,6674,13],[6694,12,6674,14,"isNewUser"],[6694,21,6674,23],[6694,23,6674,25,"providerId"],[6694,33,6674,35],[6694,35,6674,37,"profile"],[6694,42,6674,44],[6694,43,6674,45],[6695,6,6675,8],[6695,10,6675,12],[6695,11,6675,13,"username"],[6695,19,6675,21],[6695,22,6675,24,"username"],[6695,30,6675,32],[6696,4,6676,4],[6697,2,6677,0],[6698,2,6678,0],[6698,8,6678,6,"FacebookAdditionalUserInfo"],[6698,34,6678,32],[6698,43,6678,41,"GenericAdditionalUserInfo"],[6698,68,6678,66],[6698,69,6678,67],[6699,4,6679,4,"constructor"],[6699,15,6679,15,"constructor"],[6699,16,6679,16,"isNewUser"],[6699,25,6679,25],[6699,27,6679,27,"profile"],[6699,34,6679,34],[6699,36,6679,36],[6700,6,6680,8],[6700,11,6680,13],[6700,12,6680,14,"isNewUser"],[6700,21,6680,23],[6700,23,6680,25],[6700,37,6680,39],[6700,38,6680,40],[6700,65,6680,67,"profile"],[6700,72,6680,74],[6700,73,6680,75],[6701,4,6681,4],[6702,2,6682,0],[6703,2,6683,0],[6703,8,6683,6,"GithubAdditionalUserInfo"],[6703,32,6683,30],[6703,41,6683,39,"FederatedAdditionalUserInfoWithUsername"],[6703,80,6683,78],[6703,81,6683,79],[6704,4,6684,4,"constructor"],[6704,15,6684,15,"constructor"],[6704,16,6684,16,"isNewUser"],[6704,25,6684,25],[6704,27,6684,27,"profile"],[6704,34,6684,34],[6704,36,6684,36],[6705,6,6685,8],[6705,11,6685,13],[6705,12,6685,14,"isNewUser"],[6705,21,6685,23],[6705,23,6685,25],[6705,35,6685,37],[6705,36,6685,38],[6705,61,6685,63,"profile"],[6705,68,6685,70],[6705,70,6685,72],[6705,77,6685,79,"profile"],[6705,84,6685,86],[6705,86,6685,88,"login"],[6705,91,6685,93],[6705,96,6685,98],[6705,104,6685,106],[6705,107,6685,109,"profile"],[6705,114,6685,116],[6705,116,6685,118,"login"],[6705,121,6685,123],[6705,124,6685,126],[6705,128,6685,130],[6705,129,6685,131],[6706,4,6686,4],[6707,2,6687,0],[6708,2,6688,0],[6708,8,6688,6,"GoogleAdditionalUserInfo"],[6708,32,6688,30],[6708,41,6688,39,"GenericAdditionalUserInfo"],[6708,66,6688,64],[6708,67,6688,65],[6709,4,6689,4,"constructor"],[6709,15,6689,15,"constructor"],[6709,16,6689,16,"isNewUser"],[6709,25,6689,25],[6709,27,6689,27,"profile"],[6709,34,6689,34],[6709,36,6689,36],[6710,6,6690,8],[6710,11,6690,13],[6710,12,6690,14,"isNewUser"],[6710,21,6690,23],[6710,23,6690,25],[6710,35,6690,37],[6710,36,6690,38],[6710,61,6690,63,"profile"],[6710,68,6690,70],[6710,69,6690,71],[6711,4,6691,4],[6712,2,6692,0],[6713,2,6693,0],[6713,8,6693,6,"TwitterAdditionalUserInfo"],[6713,33,6693,31],[6713,42,6693,40,"FederatedAdditionalUserInfoWithUsername"],[6713,81,6693,79],[6713,82,6693,80],[6714,4,6694,4,"constructor"],[6714,15,6694,15,"constructor"],[6714,16,6694,16,"isNewUser"],[6714,25,6694,25],[6714,27,6694,27,"profile"],[6714,34,6694,34],[6714,36,6694,36,"screenName"],[6714,46,6694,46],[6714,48,6694,48],[6715,6,6695,8],[6715,11,6695,13],[6715,12,6695,14,"isNewUser"],[6715,21,6695,23],[6715,23,6695,25],[6715,36,6695,38],[6715,37,6695,39],[6715,63,6695,65,"profile"],[6715,70,6695,72],[6715,72,6695,74,"screenName"],[6715,82,6695,84],[6715,83,6695,85],[6716,4,6696,4],[6717,2,6697,0],[6718,2,6698,0],[6719,0,6699,0],[6720,0,6700,0],[6721,0,6701,0],[6722,0,6702,0],[6723,0,6703,0],[6724,0,6704,0],[6725,2,6705,0],[6725,11,6705,9,"getAdditionalUserInfo"],[6725,32,6705,30,"getAdditionalUserInfo"],[6725,33,6705,31,"userCredential"],[6725,47,6705,45],[6725,49,6705,47],[6726,4,6706,4],[6726,10,6706,10],[6727,6,6706,12,"user"],[6727,10,6706,16],[6728,6,6706,18,"_tokenResponse"],[6729,4,6706,33],[6729,5,6706,34],[6729,8,6706,37,"userCredential"],[6729,22,6706,51],[6730,4,6707,4],[6730,8,6707,8,"user"],[6730,12,6707,12],[6730,13,6707,13,"isAnonymous"],[6730,24,6707,24],[6730,28,6707,28],[6730,29,6707,29,"_tokenResponse"],[6730,43,6707,43],[6730,45,6707,45],[6731,6,6708,8],[6732,6,6709,8],[6733,6,6710,8],[6733,13,6710,15],[6734,8,6711,12,"providerId"],[6734,18,6711,22],[6734,20,6711,24],[6734,24,6711,28],[6735,8,6712,12,"isNewUser"],[6735,17,6712,21],[6735,19,6712,23],[6735,24,6712,28],[6736,8,6713,12,"profile"],[6736,15,6713,19],[6736,17,6713,21],[6737,6,6714,8],[6737,7,6714,9],[6738,4,6715,4],[6739,4,6716,4],[6739,11,6716,11,"_fromIdTokenResponse"],[6739,31,6716,31],[6739,32,6716,32,"_tokenResponse"],[6739,46,6716,46],[6739,47,6716,47],[6740,2,6717,0],[6742,2,6719,0],[6743,0,6720,0],[6744,0,6721,0],[6745,0,6722,0],[6746,0,6723,0],[6747,0,6724,0],[6748,0,6725,0],[6749,0,6726,0],[6750,0,6727,0],[6751,0,6728,0],[6752,0,6729,0],[6753,0,6730,0],[6754,0,6731,0],[6755,0,6732,0],[6756,0,6733,0],[6757,0,6734,0],[6758,2,6735,0],[6759,2,6736,0],[6760,0,6737,0],[6761,0,6738,0],[6762,0,6739,0],[6763,0,6740,0],[6764,0,6741,0],[6765,0,6742,0],[6766,0,6743,0],[6767,0,6744,0],[6768,0,6745,0],[6769,0,6746,0],[6770,0,6747,0],[6771,0,6748,0],[6772,0,6749,0],[6773,0,6750,0],[6774,0,6751,0],[6775,0,6752,0],[6776,0,6753,0],[6777,0,6754,0],[6778,0,6755,0],[6779,0,6756,0],[6780,0,6757,0],[6781,0,6758,0],[6782,0,6759,0],[6783,2,6760,0],[6783,11,6760,9,"setPersistence"],[6783,25,6760,23,"setPersistence"],[6783,26,6760,24,"auth"],[6783,30,6760,28],[6783,32,6760,30,"persistence"],[6783,43,6760,41],[6783,45,6760,43],[6784,4,6761,4],[6784,11,6761,11],[6784,15,6761,11,"getModularInstance"],[6784,39,6761,29],[6784,41,6761,30,"auth"],[6784,45,6761,34],[6784,46,6761,35],[6784,47,6761,36,"setPersistence"],[6784,61,6761,50],[6784,62,6761,51,"persistence"],[6784,73,6761,62],[6784,74,6761,63],[6785,2,6762,0],[6786,2,6763,0],[6787,0,6764,0],[6788,0,6765,0],[6789,0,6766,0],[6790,0,6767,0],[6791,0,6768,0],[6792,0,6769,0],[6793,0,6770,0],[6794,0,6771,0],[6795,0,6772,0],[6796,0,6773,0],[6797,0,6774,0],[6798,0,6775,0],[6799,0,6776,0],[6800,0,6777,0],[6801,0,6778,0],[6802,0,6779,0],[6803,0,6780,0],[6804,0,6781,0],[6805,0,6782,0],[6806,0,6783,0],[6807,0,6784,0],[6808,0,6785,0],[6809,0,6786,0],[6810,0,6787,0],[6811,0,6788,0],[6812,0,6789,0],[6813,2,6790,0],[6813,11,6790,9,"initializeRecaptchaConfig"],[6813,36,6790,34,"initializeRecaptchaConfig"],[6813,37,6790,35,"auth"],[6813,41,6790,39],[6813,43,6790,41],[6814,4,6791,4],[6814,11,6791,11,"_initializeRecaptchaConfig"],[6814,37,6791,37],[6814,38,6791,38,"auth"],[6814,42,6791,42],[6814,43,6791,43],[6815,2,6792,0],[6816,2,6793,0],[6817,0,6794,0],[6818,0,6795,0],[6819,0,6796,0],[6820,0,6797,0],[6821,0,6798,0],[6822,0,6799,0],[6823,0,6800,0],[6824,0,6801,0],[6825,0,6802,0],[6826,0,6803,0],[6827,0,6804,0],[6828,0,6805,0],[6829,0,6806,0],[6830,0,6807,0],[6831,0,6808,0],[6832,0,6809,0],[6833,0,6810,0],[6834,0,6811,0],[6835,0,6812,0],[6836,0,6813,0],[6837,0,6814,0],[6838,0,6815,0],[6839,2,6816,0],[6839,17,6816,15,"validatePassword"],[6839,33,6816,31,"validatePassword"],[6839,34,6816,32,"auth"],[6839,38,6816,36],[6839,40,6816,38,"password"],[6839,48,6816,46],[6839,50,6816,48],[6840,4,6817,4],[6840,10,6817,10,"authInternal"],[6840,22,6817,22],[6840,25,6817,25,"_castAuth"],[6840,34,6817,34],[6840,35,6817,35,"auth"],[6840,39,6817,39],[6840,40,6817,40],[6841,4,6818,4],[6841,11,6818,11,"authInternal"],[6841,23,6818,23],[6841,24,6818,24,"validatePassword"],[6841,40,6818,40],[6841,41,6818,41,"password"],[6841,49,6818,49],[6841,50,6818,50],[6842,2,6819,0],[6843,2,6820,0],[6844,0,6821,0],[6845,0,6822,0],[6846,0,6823,0],[6847,0,6824,0],[6848,0,6825,0],[6849,0,6826,0],[6850,0,6827,0],[6851,0,6828,0],[6852,0,6829,0],[6853,0,6830,0],[6854,0,6831,0],[6855,0,6832,0],[6856,0,6833,0],[6857,0,6834,0],[6858,0,6835,0],[6859,2,6836,0],[6859,11,6836,9,"onIdTokenChanged"],[6859,27,6836,25,"onIdTokenChanged"],[6859,28,6836,26,"auth"],[6859,32,6836,30],[6859,34,6836,32,"nextOrObserver"],[6859,48,6836,46],[6859,50,6836,48,"error"],[6859,55,6836,53],[6859,57,6836,55,"completed"],[6859,66,6836,64],[6859,68,6836,66],[6860,4,6837,4],[6860,11,6837,11],[6860,15,6837,11,"getModularInstance"],[6860,39,6837,29],[6860,41,6837,30,"auth"],[6860,45,6837,34],[6860,46,6837,35],[6860,47,6837,36,"onIdTokenChanged"],[6860,63,6837,52],[6860,64,6837,53,"nextOrObserver"],[6860,78,6837,67],[6860,80,6837,69,"error"],[6860,85,6837,74],[6860,87,6837,76,"completed"],[6860,96,6837,85],[6860,97,6837,86],[6861,2,6838,0],[6862,2,6839,0],[6863,0,6840,0],[6864,0,6841,0],[6865,0,6842,0],[6866,0,6843,0],[6867,0,6844,0],[6868,0,6845,0],[6869,0,6846,0],[6870,0,6847,0],[6871,0,6848,0],[6872,2,6849,0],[6872,11,6849,9,"beforeAuthStateChanged"],[6872,33,6849,31,"beforeAuthStateChanged"],[6872,34,6849,32,"auth"],[6872,38,6849,36],[6872,40,6849,38,"callback"],[6872,48,6849,46],[6872,50,6849,48,"onAbort"],[6872,57,6849,55],[6872,59,6849,57],[6873,4,6850,4],[6873,11,6850,11],[6873,15,6850,11,"getModularInstance"],[6873,39,6850,29],[6873,41,6850,30,"auth"],[6873,45,6850,34],[6873,46,6850,35],[6873,47,6850,36,"beforeAuthStateChanged"],[6873,69,6850,58],[6873,70,6850,59,"callback"],[6873,78,6850,67],[6873,80,6850,69,"onAbort"],[6873,87,6850,76],[6873,88,6850,77],[6874,2,6851,0],[6875,2,6852,0],[6876,0,6853,0],[6877,0,6854,0],[6878,0,6855,0],[6879,0,6856,0],[6880,0,6857,0],[6881,0,6858,0],[6882,0,6859,0],[6883,0,6860,0],[6884,0,6861,0],[6885,0,6862,0],[6886,0,6863,0],[6887,0,6864,0],[6888,0,6865,0],[6889,0,6866,0],[6890,2,6867,0],[6890,11,6867,9,"onAuthStateChanged"],[6890,29,6867,27,"onAuthStateChanged"],[6890,30,6867,28,"auth"],[6890,34,6867,32],[6890,36,6867,34,"nextOrObserver"],[6890,50,6867,48],[6890,52,6867,50,"error"],[6890,57,6867,55],[6890,59,6867,57,"completed"],[6890,68,6867,66],[6890,70,6867,68],[6891,4,6868,4],[6891,11,6868,11],[6891,15,6868,11,"getModularInstance"],[6891,39,6868,29],[6891,41,6868,30,"auth"],[6891,45,6868,34],[6891,46,6868,35],[6891,47,6868,36,"onAuthStateChanged"],[6891,65,6868,54],[6891,66,6868,55,"nextOrObserver"],[6891,80,6868,69],[6891,82,6868,71,"error"],[6891,87,6868,76],[6891,89,6868,78,"completed"],[6891,98,6868,87],[6891,99,6868,88],[6892,2,6869,0],[6893,2,6870,0],[6894,0,6871,0],[6895,0,6872,0],[6896,0,6873,0],[6897,0,6874,0],[6898,0,6875,0],[6899,0,6876,0],[6900,2,6877,0],[6900,11,6877,9,"useDeviceLanguage"],[6900,28,6877,26,"useDeviceLanguage"],[6900,29,6877,27,"auth"],[6900,33,6877,31],[6900,35,6877,33],[6901,4,6878,4],[6901,8,6878,4,"getModularInstance"],[6901,32,6878,22],[6901,34,6878,23,"auth"],[6901,38,6878,27],[6901,39,6878,28],[6901,40,6878,29,"useDeviceLanguage"],[6901,57,6878,46],[6901,58,6878,47],[6901,59,6878,48],[6902,2,6879,0],[6903,2,6880,0],[6904,0,6881,0],[6905,0,6882,0],[6906,0,6883,0],[6907,0,6884,0],[6908,0,6885,0],[6909,0,6886,0],[6910,0,6887,0],[6911,0,6888,0],[6912,0,6889,0],[6913,0,6890,0],[6914,0,6891,0],[6915,0,6892,0],[6916,0,6893,0],[6917,0,6894,0],[6918,0,6895,0],[6919,0,6896,0],[6920,0,6897,0],[6921,0,6898,0],[6922,0,6899,0],[6923,0,6900,0],[6924,2,6901,0],[6924,11,6901,9,"updateCurrentUser"],[6924,28,6901,26,"updateCurrentUser"],[6924,29,6901,27,"auth"],[6924,33,6901,31],[6924,35,6901,33,"user"],[6924,39,6901,37],[6924,41,6901,39],[6925,4,6902,4],[6925,11,6902,11],[6925,15,6902,11,"getModularInstance"],[6925,39,6902,29],[6925,41,6902,30,"auth"],[6925,45,6902,34],[6925,46,6902,35],[6925,47,6902,36,"updateCurrentUser"],[6925,64,6902,53],[6925,65,6902,54,"user"],[6925,69,6902,58],[6925,70,6902,59],[6926,2,6903,0],[6927,2,6904,0],[6928,0,6905,0],[6929,0,6906,0],[6930,0,6907,0],[6931,0,6908,0],[6932,0,6909,0],[6933,0,6910,0],[6934,0,6911,0],[6935,0,6912,0],[6936,0,6913,0],[6937,0,6914,0],[6938,2,6915,0],[6938,11,6915,9,"signOut"],[6938,18,6915,16,"signOut"],[6938,19,6915,17,"auth"],[6938,23,6915,21],[6938,25,6915,23],[6939,4,6916,4],[6939,11,6916,11],[6939,15,6916,11,"getModularInstance"],[6939,39,6916,29],[6939,41,6916,30,"auth"],[6939,45,6916,34],[6939,46,6916,35],[6939,47,6916,36,"signOut"],[6939,54,6916,43],[6939,55,6916,44],[6939,56,6916,45],[6940,2,6917,0],[6941,2,6918,0],[6942,0,6919,0],[6943,0,6920,0],[6944,0,6921,0],[6945,0,6922,0],[6946,0,6923,0],[6947,0,6924,0],[6948,0,6925,0],[6949,2,6926,0],[6949,11,6926,9,"revokeAccessToken"],[6949,28,6926,26,"revokeAccessToken"],[6949,29,6926,27,"auth"],[6949,33,6926,31],[6949,35,6926,33,"token"],[6949,40,6926,38],[6949,42,6926,40],[6950,4,6927,4],[6950,10,6927,10,"authInternal"],[6950,22,6927,22],[6950,25,6927,25,"_castAuth"],[6950,34,6927,34],[6950,35,6927,35,"auth"],[6950,39,6927,39],[6950,40,6927,40],[6951,4,6928,4],[6951,11,6928,11,"authInternal"],[6951,23,6928,23],[6951,24,6928,24,"revokeAccessToken"],[6951,41,6928,41],[6951,42,6928,42,"token"],[6951,47,6928,47],[6951,48,6928,48],[6952,2,6929,0],[6953,2,6930,0],[6954,0,6931,0],[6955,0,6932,0],[6956,0,6933,0],[6957,0,6934,0],[6958,0,6935,0],[6959,0,6936,0],[6960,0,6937,0],[6961,0,6938,0],[6962,0,6939,0],[6963,0,6940,0],[6964,0,6941,0],[6965,2,6942,0],[6965,17,6942,15,"deleteUser"],[6965,27,6942,25,"deleteUser"],[6965,28,6942,26,"user"],[6965,32,6942,30],[6965,34,6942,32],[6966,4,6943,4],[6966,11,6943,11],[6966,15,6943,11,"getModularInstance"],[6966,39,6943,29],[6966,41,6943,30,"user"],[6966,45,6943,34],[6966,46,6943,35],[6966,47,6943,36,"delete"],[6966,53,6943,42],[6966,54,6943,43],[6966,55,6943,44],[6967,2,6944,0],[6969,2,6946,0],[6970,0,6947,0],[6971,0,6948,0],[6972,0,6949,0],[6973,0,6950,0],[6974,0,6951,0],[6975,0,6952,0],[6976,0,6953,0],[6977,0,6954,0],[6978,0,6955,0],[6979,0,6956,0],[6980,0,6957,0],[6981,0,6958,0],[6982,0,6959,0],[6983,0,6960,0],[6984,0,6961,0],[6985,2,6962,0],[6985,8,6962,6,"MultiFactorSessionImpl"],[6985,30,6962,28],[6985,31,6962,29],[6986,4,6963,4,"constructor"],[6986,15,6963,15,"constructor"],[6986,16,6963,16,"type"],[6986,20,6963,20],[6986,22,6963,22,"credential"],[6986,32,6963,32],[6986,34,6963,34,"user"],[6986,38,6963,38],[6986,40,6963,40],[6987,6,6964,8],[6987,10,6964,12],[6987,11,6964,13,"type"],[6987,15,6964,17],[6987,18,6964,20,"type"],[6987,22,6964,24],[6988,6,6965,8],[6988,10,6965,12],[6988,11,6965,13,"credential"],[6988,21,6965,23],[6988,24,6965,26,"credential"],[6988,34,6965,36],[6989,6,6966,8],[6989,10,6966,12],[6989,11,6966,13,"user"],[6989,15,6966,17],[6989,18,6966,20,"user"],[6989,22,6966,24],[6990,4,6967,4],[6991,4,6968,4],[6991,11,6968,11,"_fromIdtoken"],[6991,23,6968,23,"_fromIdtoken"],[6991,24,6968,24,"idToken"],[6991,31,6968,31],[6991,33,6968,33,"user"],[6991,37,6968,37],[6991,39,6968,39],[6992,6,6969,8],[6992,13,6969,15],[6992,17,6969,19,"MultiFactorSessionImpl"],[6992,39,6969,41],[6992,40,6969,42],[6992,48,6969,50],[6992,49,6969,51],[6992,86,6969,88,"idToken"],[6992,93,6969,95],[6992,95,6969,97,"user"],[6992,99,6969,101],[6992,100,6969,102],[6993,4,6970,4],[6994,4,6971,4],[6994,11,6971,11,"_fromMfaPendingCredential"],[6994,36,6971,36,"_fromMfaPendingCredential"],[6994,37,6971,37,"mfaPendingCredential"],[6994,57,6971,57],[6994,59,6971,59],[6995,6,6972,8],[6995,13,6972,15],[6995,17,6972,19,"MultiFactorSessionImpl"],[6995,39,6972,41],[6995,40,6972,42],[6995,48,6972,50],[6995,49,6972,51],[6995,87,6972,89,"mfaPendingCredential"],[6995,107,6972,109],[6995,108,6972,110],[6996,4,6973,4],[6997,4,6974,4,"toJSON"],[6997,10,6974,10,"toJSON"],[6997,11,6974,10],[6997,13,6974,13],[6998,6,6975,8],[6998,12,6975,14,"key"],[6998,15,6975,17],[6998,18,6975,20],[6998,22,6975,24],[6998,23,6975,25,"type"],[6998,27,6975,29],[6998,32,6975,34],[6998,40,6975,42],[6998,41,6975,43],[6998,79,6976,14],[6998,88,6976,23],[6998,91,6977,14],[6998,110,6977,33],[6999,6,6978,8],[6999,13,6978,15],[7000,8,6979,12,"multiFactorSession"],[7000,26,6979,30],[7000,28,6979,32],[7001,10,6980,16],[7001,11,6980,17,"key"],[7001,14,6980,20],[7001,17,6980,23],[7001,21,6980,27],[7001,22,6980,28,"credential"],[7002,8,6981,12],[7003,6,6982,8],[7003,7,6982,9],[7004,4,6983,4],[7005,4,6984,4],[7005,11,6984,11,"fromJSON"],[7005,19,6984,19,"fromJSON"],[7005,20,6984,20,"obj"],[7005,23,6984,23],[7005,25,6984,25],[7006,6,6985,8],[7006,10,6985,12,"obj"],[7006,13,6985,15],[7006,15,6985,17,"multiFactorSession"],[7006,33,6985,35],[7006,35,6985,37],[7007,8,6986,12],[7007,12,6986,16,"obj"],[7007,15,6986,19],[7007,16,6986,20,"multiFactorSession"],[7007,34,6986,38],[7007,36,6986,40,"pendingCredential"],[7007,53,6986,57],[7007,55,6986,59],[7008,10,6987,16],[7008,17,6987,23,"MultiFactorSessionImpl"],[7008,39,6987,45],[7008,40,6987,46,"_fromMfaPendingCredential"],[7008,65,6987,71],[7008,66,6987,72,"obj"],[7008,69,6987,75],[7008,70,6987,76,"multiFactorSession"],[7008,88,6987,94],[7008,89,6987,95,"pendingCredential"],[7008,106,6987,112],[7008,107,6987,113],[7009,8,6988,12],[7009,9,6988,13],[7009,15,6989,17],[7009,19,6989,21,"obj"],[7009,22,6989,24],[7009,23,6989,25,"multiFactorSession"],[7009,41,6989,43],[7009,43,6989,45,"idToken"],[7009,50,6989,52],[7009,52,6989,54],[7010,10,6990,16],[7010,17,6990,23,"MultiFactorSessionImpl"],[7010,39,6990,45],[7010,40,6990,46,"_fromIdtoken"],[7010,52,6990,58],[7010,53,6990,59,"obj"],[7010,56,6990,62],[7010,57,6990,63,"multiFactorSession"],[7010,75,6990,81],[7010,76,6990,82,"idToken"],[7010,83,6990,89],[7010,84,6990,90],[7011,8,6991,12],[7012,6,6992,8],[7013,6,6993,8],[7013,13,6993,15],[7013,17,6993,19],[7014,4,6994,4],[7015,2,6995,0],[7017,2,6997,0],[7018,0,6998,0],[7019,0,6999,0],[7020,0,7000,0],[7021,0,7001,0],[7022,0,7002,0],[7023,0,7003,0],[7024,0,7004,0],[7025,0,7005,0],[7026,0,7006,0],[7027,0,7007,0],[7028,0,7008,0],[7029,0,7009,0],[7030,0,7010,0],[7031,0,7011,0],[7032,0,7012,0],[7033,2,7013,0],[7033,8,7013,6,"MultiFactorResolverImpl"],[7033,31,7013,29],[7033,32,7013,30],[7034,4,7014,4,"constructor"],[7034,15,7014,15,"constructor"],[7034,16,7014,16,"session"],[7034,23,7014,23],[7034,25,7014,25,"hints"],[7034,30,7014,30],[7034,32,7014,32,"signInResolver"],[7034,46,7014,46],[7034,48,7014,48],[7035,6,7015,8],[7035,10,7015,12],[7035,11,7015,13,"session"],[7035,18,7015,20],[7035,21,7015,23,"session"],[7035,28,7015,30],[7036,6,7016,8],[7036,10,7016,12],[7036,11,7016,13,"hints"],[7036,16,7016,18],[7036,19,7016,21,"hints"],[7036,24,7016,26],[7037,6,7017,8],[7037,10,7017,12],[7037,11,7017,13,"signInResolver"],[7037,25,7017,27],[7037,28,7017,30,"signInResolver"],[7037,42,7017,44],[7038,4,7018,4],[7039,4,7019,4],[7040,4,7020,4],[7040,11,7020,11,"_fromError"],[7040,21,7020,21,"_fromError"],[7040,22,7020,22,"authExtern"],[7040,32,7020,32],[7040,34,7020,34,"error"],[7040,39,7020,39],[7040,41,7020,41],[7041,6,7021,8],[7041,12,7021,14,"auth"],[7041,16,7021,18],[7041,19,7021,21,"_castAuth"],[7041,28,7021,30],[7041,29,7021,31,"authExtern"],[7041,39,7021,41],[7041,40,7021,42],[7042,6,7022,8],[7042,12,7022,14,"serverResponse"],[7042,26,7022,28],[7042,29,7022,31,"error"],[7042,34,7022,36],[7042,35,7022,37,"customData"],[7042,45,7022,47],[7042,46,7022,48,"_serverResponse"],[7042,61,7022,63],[7043,6,7023,8],[7043,12,7023,14,"hints"],[7043,17,7023,19],[7043,20,7023,22],[7043,21,7023,23,"serverResponse"],[7043,35,7023,37],[7043,36,7023,38,"mfaInfo"],[7043,43,7023,45],[7043,47,7023,49],[7043,49,7023,51],[7043,51,7023,53,"map"],[7043,54,7023,56],[7043,55,7023,57,"enrollment"],[7043,65,7023,67],[7043,69,7023,71,"MultiFactorInfoImpl"],[7043,88,7023,90],[7043,89,7023,91,"_fromServerResponse"],[7043,108,7023,110],[7043,109,7023,111,"auth"],[7043,113,7023,115],[7043,115,7023,117,"enrollment"],[7043,125,7023,127],[7043,126,7023,128],[7043,127,7023,129],[7044,6,7024,8,"_assert"],[7044,13,7024,15],[7044,14,7024,16,"serverResponse"],[7044,28,7024,30],[7044,29,7024,31,"mfaPendingCredential"],[7044,49,7024,51],[7044,51,7024,53,"auth"],[7044,55,7024,57],[7044,57,7024,59],[7044,73,7024,75],[7044,74,7024,76],[7044,108,7024,110],[7044,109,7024,111],[7045,6,7025,8],[7045,12,7025,14,"session"],[7045,19,7025,21],[7045,22,7025,24,"MultiFactorSessionImpl"],[7045,44,7025,46],[7045,45,7025,47,"_fromMfaPendingCredential"],[7045,70,7025,72],[7045,71,7025,73,"serverResponse"],[7045,85,7025,87],[7045,86,7025,88,"mfaPendingCredential"],[7045,106,7025,108],[7045,107,7025,109],[7046,6,7026,8],[7046,13,7026,15],[7046,17,7026,19,"MultiFactorResolverImpl"],[7046,40,7026,42],[7046,41,7026,43,"session"],[7046,48,7026,50],[7046,50,7026,52,"hints"],[7046,55,7026,57],[7046,57,7026,59],[7046,63,7026,66,"assertion"],[7046,72,7026,75],[7046,76,7026,80],[7047,8,7027,12],[7047,14,7027,18,"mfaResponse"],[7047,25,7027,29],[7047,28,7027,32],[7047,34,7027,38,"assertion"],[7047,43,7027,47],[7047,44,7027,48,"_process"],[7047,52,7027,56],[7047,53,7027,57,"auth"],[7047,57,7027,61],[7047,59,7027,63,"session"],[7047,66,7027,70],[7047,67,7027,71],[7048,8,7028,12],[7049,8,7029,12],[7049,15,7029,19,"serverResponse"],[7049,29,7029,33],[7049,30,7029,34,"mfaInfo"],[7049,37,7029,41],[7050,8,7030,12],[7050,15,7030,19,"serverResponse"],[7050,29,7030,33],[7050,30,7030,34,"mfaPendingCredential"],[7050,50,7030,54],[7051,8,7031,12],[7052,8,7032,12],[7052,14,7032,18,"idTokenResponse"],[7052,29,7032,33],[7052,32,7032,36],[7053,10,7033,16],[7053,13,7033,19,"serverResponse"],[7053,27,7033,33],[7054,10,7034,16,"idToken"],[7054,17,7034,23],[7054,19,7034,25,"mfaResponse"],[7054,30,7034,36],[7054,31,7034,37,"idToken"],[7054,38,7034,44],[7055,10,7035,16,"refreshToken"],[7055,22,7035,28],[7055,24,7035,30,"mfaResponse"],[7055,35,7035,41],[7055,36,7035,42,"refreshToken"],[7056,8,7036,12],[7056,9,7036,13],[7057,8,7037,12],[7058,8,7038,12],[7058,16,7038,20,"error"],[7058,21,7038,25],[7058,22,7038,26,"operationType"],[7058,35,7038,39],[7059,10,7039,16],[7059,15,7039,21],[7059,23,7039,29],[7059,24,7039,30],[7060,12,7040,20],[7060,18,7040,26,"userCredential"],[7060,32,7040,40],[7060,35,7040,43],[7060,41,7040,49,"UserCredentialImpl"],[7060,59,7040,67],[7060,60,7040,68,"_fromIdTokenResponse"],[7060,80,7040,88],[7060,81,7040,89,"auth"],[7060,85,7040,93],[7060,87,7040,95,"error"],[7060,92,7040,100],[7060,93,7040,101,"operationType"],[7060,106,7040,114],[7060,108,7040,116,"idTokenResponse"],[7060,123,7040,131],[7060,124,7040,132],[7061,12,7041,20],[7061,18,7041,26,"auth"],[7061,22,7041,30],[7061,23,7041,31,"_updateCurrentUser"],[7061,41,7041,49],[7061,42,7041,50,"userCredential"],[7061,56,7041,64],[7061,57,7041,65,"user"],[7061,61,7041,69],[7061,62,7041,70],[7062,12,7042,20],[7062,19,7042,27,"userCredential"],[7062,33,7042,41],[7063,10,7043,16],[7063,15,7043,21],[7063,31,7043,37],[7063,32,7043,38],[7064,12,7044,20,"_assert"],[7064,19,7044,27],[7064,20,7044,28,"error"],[7064,25,7044,33],[7064,26,7044,34,"user"],[7064,30,7044,38],[7064,32,7044,40,"auth"],[7064,36,7044,44],[7064,38,7044,46],[7064,54,7044,62],[7064,55,7044,63],[7064,89,7044,97],[7064,90,7044,98],[7065,12,7045,20],[7065,19,7045,27,"UserCredentialImpl"],[7065,37,7045,45],[7065,38,7045,46,"_forOperation"],[7065,51,7045,59],[7065,52,7045,60,"error"],[7065,57,7045,65],[7065,58,7045,66,"user"],[7065,62,7045,70],[7065,64,7045,72,"error"],[7065,69,7045,77],[7065,70,7045,78,"operationType"],[7065,83,7045,91],[7065,85,7045,93,"idTokenResponse"],[7065,100,7045,108],[7065,101,7045,109],[7066,10,7046,16],[7067,12,7047,20,"_fail"],[7067,17,7047,25],[7067,18,7047,26,"auth"],[7067,22,7047,30],[7067,24,7047,32],[7067,40,7047,48],[7067,41,7047,49],[7067,75,7047,83],[7067,76,7047,84],[7068,8,7048,12],[7069,6,7049,8],[7069,7,7049,9],[7069,8,7049,10],[7070,4,7050,4],[7071,4,7051,4],[7071,10,7051,10,"resolveSignIn"],[7071,23,7051,23,"resolveSignIn"],[7071,24,7051,24,"assertionExtern"],[7071,39,7051,39],[7071,41,7051,41],[7072,6,7052,8],[7072,12,7052,14,"assertion"],[7072,21,7052,23],[7072,24,7052,26,"assertionExtern"],[7072,39,7052,41],[7073,6,7053,8],[7073,13,7053,15],[7073,17,7053,19],[7073,18,7053,20,"signInResolver"],[7073,32,7053,34],[7073,33,7053,35,"assertion"],[7073,42,7053,44],[7073,43,7053,45],[7074,4,7054,4],[7075,2,7055,0],[7076,2,7056,0],[7077,0,7057,0],[7078,0,7058,0],[7079,0,7059,0],[7080,0,7060,0],[7081,0,7061,0],[7082,0,7062,0],[7083,0,7063,0],[7084,0,7064,0],[7085,0,7065,0],[7086,2,7066,0],[7086,11,7066,9,"getMultiFactorResolver"],[7086,33,7066,31,"getMultiFactorResolver"],[7086,34,7066,32,"auth"],[7086,38,7066,36],[7086,40,7066,38,"error"],[7086,45,7066,43],[7086,47,7066,45],[7087,4,7067,4],[7087,10,7067,10,"authModular"],[7087,21,7067,21],[7087,24,7067,24],[7087,28,7067,24,"getModularInstance"],[7087,52,7067,42],[7087,54,7067,43,"auth"],[7087,58,7067,47],[7087,59,7067,48],[7088,4,7068,4],[7088,10,7068,10,"errorInternal"],[7088,23,7068,23],[7088,26,7068,26,"error"],[7088,31,7068,31],[7089,4,7069,4,"_assert"],[7089,11,7069,11],[7089,12,7069,12,"error"],[7089,17,7069,17],[7089,18,7069,18,"customData"],[7089,28,7069,28],[7089,29,7069,29,"operationType"],[7089,42,7069,42],[7089,44,7069,44,"authModular"],[7089,55,7069,55],[7089,57,7069,57],[7089,73,7069,73],[7089,74,7069,74],[7089,108,7069,108],[7089,109,7069,109],[7090,4,7070,4,"_assert"],[7090,11,7070,11],[7090,12,7070,12,"errorInternal"],[7090,25,7070,25],[7090,26,7070,26,"customData"],[7090,36,7070,36],[7090,37,7070,37,"_serverResponse"],[7090,52,7070,52],[7090,54,7070,54,"mfaPendingCredential"],[7090,74,7070,74],[7090,76,7070,76,"authModular"],[7090,87,7070,87],[7090,89,7070,89],[7090,105,7070,105],[7090,106,7070,106],[7090,140,7070,140],[7090,141,7070,141],[7091,4,7071,4],[7091,11,7071,11,"MultiFactorResolverImpl"],[7091,34,7071,34],[7091,35,7071,35,"_fromError"],[7091,45,7071,45],[7091,46,7071,46,"authModular"],[7091,57,7071,57],[7091,59,7071,59,"errorInternal"],[7091,72,7071,72],[7091,73,7071,73],[7092,2,7072,0],[7094,2,7074,0],[7095,0,7075,0],[7096,0,7076,0],[7097,0,7077,0],[7098,0,7078,0],[7099,0,7079,0],[7100,0,7080,0],[7101,0,7081,0],[7102,0,7082,0],[7103,0,7083,0],[7104,0,7084,0],[7105,0,7085,0],[7106,0,7086,0],[7107,0,7087,0],[7108,0,7088,0],[7109,0,7089,0],[7110,2,7090,0],[7110,11,7090,9,"startEnrollTotpMfa"],[7110,29,7090,27,"startEnrollTotpMfa"],[7110,30,7090,28,"auth"],[7110,34,7090,32],[7110,36,7090,34,"request"],[7110,43,7090,41],[7110,45,7090,43],[7111,4,7091,4],[7111,11,7091,11,"_performApiRequest"],[7111,29,7091,29],[7111,30,7091,30,"auth"],[7111,34,7091,34],[7111,36,7091,36],[7111,42,7091,42],[7111,43,7091,43],[7111,66,7091,66],[7111,100,7091,100],[7111,101,7091,101],[7111,138,7091,138,"_addTidIfNecessary"],[7111,156,7091,156],[7111,157,7091,157,"auth"],[7111,161,7091,161],[7111,163,7091,163,"request"],[7111,170,7091,170],[7111,171,7091,171],[7111,172,7091,172],[7112,2,7092,0],[7113,2,7093,0],[7113,11,7093,9,"finalizeEnrollTotpMfa"],[7113,32,7093,30,"finalizeEnrollTotpMfa"],[7113,33,7093,31,"auth"],[7113,37,7093,35],[7113,39,7093,37,"request"],[7113,46,7093,44],[7113,48,7093,46],[7114,4,7094,4],[7114,11,7094,11,"_performApiRequest"],[7114,29,7094,29],[7114,30,7094,30,"auth"],[7114,34,7094,34],[7114,36,7094,36],[7114,42,7094,42],[7114,43,7094,43],[7114,66,7094,66],[7114,103,7094,103],[7114,104,7094,104],[7114,144,7094,144,"_addTidIfNecessary"],[7114,162,7094,162],[7114,163,7094,163,"auth"],[7114,167,7094,167],[7114,169,7094,169,"request"],[7114,176,7094,176],[7114,177,7094,177],[7114,178,7094,178],[7115,2,7095,0],[7116,2,7096,0],[7116,11,7096,9,"withdrawMfa"],[7116,22,7096,20,"withdrawMfa"],[7116,23,7096,21,"auth"],[7116,27,7096,25],[7116,29,7096,27,"request"],[7116,36,7096,34],[7116,38,7096,36],[7117,4,7097,4],[7117,11,7097,11,"_performApiRequest"],[7117,29,7097,29],[7117,30,7097,30,"auth"],[7117,34,7097,34],[7117,36,7097,36],[7117,42,7097,42],[7117,43,7097,43],[7117,66,7097,66],[7117,103,7097,103],[7117,104,7097,104],[7117,133,7097,133,"_addTidIfNecessary"],[7117,151,7097,151],[7117,152,7097,152,"auth"],[7117,156,7097,156],[7117,158,7097,158,"request"],[7117,165,7097,165],[7117,166,7097,166],[7117,167,7097,167],[7118,2,7098,0],[7119,2,7100,0],[7119,8,7100,6,"MultiFactorUserImpl"],[7119,27,7100,25],[7119,28,7100,26],[7120,4,7101,4,"constructor"],[7120,15,7101,15,"constructor"],[7120,16,7101,16,"user"],[7120,20,7101,20],[7120,22,7101,22],[7121,6,7102,8],[7121,10,7102,12],[7121,11,7102,13,"user"],[7121,15,7102,17],[7121,18,7102,20,"user"],[7121,22,7102,24],[7122,6,7103,8],[7122,10,7103,12],[7122,11,7103,13,"enrolledFactors"],[7122,26,7103,28],[7122,29,7103,31],[7122,31,7103,33],[7123,6,7104,8,"user"],[7123,10,7104,12],[7123,11,7104,13,"_onReload"],[7123,20,7104,22],[7123,21,7104,23,"userInfo"],[7123,29,7104,31],[7123,33,7104,35],[7124,8,7105,12],[7124,12,7105,16,"userInfo"],[7124,20,7105,24],[7124,21,7105,25,"mfaInfo"],[7124,28,7105,32],[7124,30,7105,34],[7125,10,7106,16],[7125,14,7106,20],[7125,15,7106,21,"enrolledFactors"],[7125,30,7106,36],[7125,33,7106,39,"userInfo"],[7125,41,7106,47],[7125,42,7106,48,"mfaInfo"],[7125,49,7106,55],[7125,50,7106,56,"map"],[7125,53,7106,59],[7125,54,7106,60,"enrollment"],[7125,64,7106,70],[7125,68,7106,74,"MultiFactorInfoImpl"],[7125,87,7106,93],[7125,88,7106,94,"_fromServerResponse"],[7125,107,7106,113],[7125,108,7106,114,"user"],[7125,112,7106,118],[7125,113,7106,119,"auth"],[7125,117,7106,123],[7125,119,7106,125,"enrollment"],[7125,129,7106,135],[7125,130,7106,136],[7125,131,7106,137],[7126,8,7107,12],[7127,6,7108,8],[7127,7,7108,9],[7127,8,7108,10],[7128,4,7109,4],[7129,4,7110,4],[7129,11,7110,11,"_fromUser"],[7129,20,7110,20,"_fromUser"],[7129,21,7110,21,"user"],[7129,25,7110,25],[7129,27,7110,27],[7130,6,7111,8],[7130,13,7111,15],[7130,17,7111,19,"MultiFactorUserImpl"],[7130,36,7111,38],[7130,37,7111,39,"user"],[7130,41,7111,43],[7130,42,7111,44],[7131,4,7112,4],[7132,4,7113,4],[7132,10,7113,10,"getSession"],[7132,20,7113,20,"getSession"],[7132,21,7113,20],[7132,23,7113,23],[7133,6,7114,8],[7133,13,7114,15,"MultiFactorSessionImpl"],[7133,35,7114,37],[7133,36,7114,38,"_fromIdtoken"],[7133,48,7114,50],[7133,49,7114,51],[7133,55,7114,57],[7133,59,7114,61],[7133,60,7114,62,"user"],[7133,64,7114,66],[7133,65,7114,67,"getIdToken"],[7133,75,7114,77],[7133,76,7114,78],[7133,77,7114,79],[7133,79,7114,81],[7133,83,7114,85],[7133,84,7114,86,"user"],[7133,88,7114,90],[7133,89,7114,91],[7134,4,7115,4],[7135,4,7116,4],[7135,10,7116,10,"enroll"],[7135,16,7116,16,"enroll"],[7135,17,7116,17,"assertionExtern"],[7135,32,7116,32],[7135,34,7116,34,"displayName"],[7135,45,7116,45],[7135,47,7116,47],[7136,6,7117,8],[7136,12,7117,14,"assertion"],[7136,21,7117,23],[7136,24,7117,26,"assertionExtern"],[7136,39,7117,41],[7137,6,7118,8],[7137,12,7118,14,"session"],[7137,19,7118,21],[7137,22,7118,25],[7137,28,7118,31],[7137,32,7118,35],[7137,33,7118,36,"getSession"],[7137,43,7118,46],[7137,44,7118,47],[7137,45,7118,49],[7138,6,7119,8],[7138,12,7119,14,"finalizeMfaResponse"],[7138,31,7119,33],[7138,34,7119,36],[7138,40,7119,42,"_logoutIfInvalidated"],[7138,60,7119,62],[7138,61,7119,63],[7138,65,7119,67],[7138,66,7119,68,"user"],[7138,70,7119,72],[7138,72,7119,74,"assertion"],[7138,81,7119,83],[7138,82,7119,84,"_process"],[7138,90,7119,92],[7138,91,7119,93],[7138,95,7119,97],[7138,96,7119,98,"user"],[7138,100,7119,102],[7138,101,7119,103,"auth"],[7138,105,7119,107],[7138,107,7119,109,"session"],[7138,114,7119,116],[7138,116,7119,118,"displayName"],[7138,127,7119,129],[7138,128,7119,130],[7138,129,7119,131],[7139,6,7120,8],[7140,6,7121,8],[7141,6,7122,8],[7141,12,7122,14],[7141,16,7122,18],[7141,17,7122,19,"user"],[7141,21,7122,23],[7141,22,7122,24,"_updateTokensIfNecessary"],[7141,46,7122,48],[7141,47,7122,49,"finalizeMfaResponse"],[7141,66,7122,68],[7141,67,7122,69],[7142,6,7123,8],[7143,6,7124,8],[7144,6,7125,8],[7145,6,7126,8],[7145,13,7126,15],[7145,17,7126,19],[7145,18,7126,20,"user"],[7145,22,7126,24],[7145,23,7126,25,"reload"],[7145,29,7126,31],[7145,30,7126,32],[7145,31,7126,33],[7146,4,7127,4],[7147,4,7128,4],[7147,10,7128,10,"unenroll"],[7147,18,7128,18,"unenroll"],[7147,19,7128,19,"infoOrUid"],[7147,28,7128,28],[7147,30,7128,30],[7148,6,7129,8],[7148,12,7129,14,"mfaEnrollmentId"],[7148,27,7129,29],[7148,30,7129,32],[7148,37,7129,39,"infoOrUid"],[7148,46,7129,48],[7148,51,7129,53],[7148,59,7129,61],[7148,62,7129,64,"infoOrUid"],[7148,71,7129,73],[7148,74,7129,76,"infoOrUid"],[7148,83,7129,85],[7148,84,7129,86,"uid"],[7148,87,7129,89],[7149,6,7130,8],[7149,12,7130,14,"idToken"],[7149,19,7130,21],[7149,22,7130,24],[7149,28,7130,30],[7149,32,7130,34],[7149,33,7130,35,"user"],[7149,37,7130,39],[7149,38,7130,40,"getIdToken"],[7149,48,7130,50],[7149,49,7130,51],[7149,50,7130,52],[7150,6,7131,8],[7150,10,7131,12],[7151,8,7132,12],[7151,14,7132,18,"idTokenResponse"],[7151,29,7132,33],[7151,32,7132,36],[7151,38,7132,42,"_logoutIfInvalidated"],[7151,58,7132,62],[7151,59,7132,63],[7151,63,7132,67],[7151,64,7132,68,"user"],[7151,68,7132,72],[7151,70,7132,74,"withdrawMfa"],[7151,81,7132,85],[7151,82,7132,86],[7151,86,7132,90],[7151,87,7132,91,"user"],[7151,91,7132,95],[7151,92,7132,96,"auth"],[7151,96,7132,100],[7151,98,7132,102],[7152,10,7133,16,"idToken"],[7152,17,7133,23],[7153,10,7134,16,"mfaEnrollmentId"],[7154,8,7135,12],[7154,9,7135,13],[7154,10,7135,14],[7154,11,7135,15],[7155,8,7136,12],[7156,8,7137,12],[7156,12,7137,16],[7156,13,7137,17,"enrolledFactors"],[7156,28,7137,32],[7156,31,7137,35],[7156,35,7137,39],[7156,36,7137,40,"enrolledFactors"],[7156,51,7137,55],[7156,52,7137,56,"filter"],[7156,58,7137,62],[7156,59,7137,63],[7156,60,7137,64],[7157,10,7137,66,"uid"],[7158,8,7137,70],[7158,9,7137,71],[7158,14,7137,76,"uid"],[7158,17,7137,79],[7158,22,7137,84,"mfaEnrollmentId"],[7158,37,7137,99],[7158,38,7137,100],[7159,8,7138,12],[7160,8,7139,12],[7161,8,7140,12],[7162,8,7141,12],[7163,8,7142,12],[7163,14,7142,18],[7163,18,7142,22],[7163,19,7142,23,"user"],[7163,23,7142,27],[7163,24,7142,28,"_updateTokensIfNecessary"],[7163,48,7142,52],[7163,49,7142,53,"idTokenResponse"],[7163,64,7142,68],[7163,65,7142,69],[7164,8,7143,12],[7164,14,7143,18],[7164,18,7143,22],[7164,19,7143,23,"user"],[7164,23,7143,27],[7164,24,7143,28,"reload"],[7164,30,7143,34],[7164,31,7143,35],[7164,32,7143,36],[7165,6,7144,8],[7165,7,7144,9],[7165,8,7145,8],[7165,15,7145,15,"e"],[7165,16,7145,16],[7165,18,7145,18],[7166,8,7146,12],[7166,14,7146,18,"e"],[7166,15,7146,19],[7167,6,7147,8],[7168,4,7148,4],[7169,2,7149,0],[7170,2,7150,0],[7170,8,7150,6,"multiFactorUserCache"],[7170,28,7150,26],[7170,31,7150,29],[7170,35,7150,33,"WeakMap"],[7170,42,7150,40],[7170,43,7150,41],[7170,44,7150,42],[7171,2,7151,0],[7172,0,7152,0],[7173,0,7153,0],[7174,0,7154,0],[7175,0,7155,0],[7176,0,7156,0],[7177,0,7157,0],[7178,0,7158,0],[7179,0,7159,0],[7180,0,7160,0],[7181,2,7161,0],[7181,11,7161,9,"multiFactor"],[7181,22,7161,20,"multiFactor"],[7181,23,7161,21,"user"],[7181,27,7161,25],[7181,29,7161,27],[7182,4,7162,4],[7182,10,7162,10,"userModular"],[7182,21,7162,21],[7182,24,7162,24],[7182,28,7162,24,"getModularInstance"],[7182,52,7162,42],[7182,54,7162,43,"user"],[7182,58,7162,47],[7182,59,7162,48],[7183,4,7163,4],[7183,8,7163,8],[7183,9,7163,9,"multiFactorUserCache"],[7183,29,7163,29],[7183,30,7163,30,"has"],[7183,33,7163,33],[7183,34,7163,34,"userModular"],[7183,45,7163,45],[7183,46,7163,46],[7183,48,7163,48],[7184,6,7164,8,"multiFactorUserCache"],[7184,26,7164,28],[7184,27,7164,29,"set"],[7184,30,7164,32],[7184,31,7164,33,"userModular"],[7184,42,7164,44],[7184,44,7164,46,"MultiFactorUserImpl"],[7184,63,7164,65],[7184,64,7164,66,"_fromUser"],[7184,73,7164,75],[7184,74,7164,76,"userModular"],[7184,85,7164,87],[7184,86,7164,88],[7184,87,7164,89],[7185,4,7165,4],[7186,4,7166,4],[7186,11,7166,11,"multiFactorUserCache"],[7186,31,7166,31],[7186,32,7166,32,"get"],[7186,35,7166,35],[7186,36,7166,36,"userModular"],[7186,47,7166,47],[7186,48,7166,48],[7187,2,7167,0],[7188,2,7169,0],[7188,6,7169,4,"name"],[7188,10,7169,8],[7188,13,7169,11],[7188,29,7169,27],[7189,2,7170,0],[7189,6,7170,4,"version"],[7189,13,7170,11],[7189,16,7170,14],[7189,24,7170,22],[7191,2,7172,0],[7192,0,7173,0],[7193,0,7174,0],[7194,0,7175,0],[7195,0,7176,0],[7196,0,7177,0],[7197,0,7178,0],[7198,0,7179,0],[7199,0,7180,0],[7200,0,7181,0],[7201,0,7182,0],[7202,0,7183,0],[7203,0,7184,0],[7204,0,7185,0],[7205,0,7186,0],[7206,0,7187,0],[7207,2,7188,0],[7207,8,7188,6,"AuthInterop"],[7207,19,7188,17],[7207,20,7188,18],[7208,4,7189,4,"constructor"],[7208,15,7189,15,"constructor"],[7208,16,7189,16,"auth"],[7208,20,7189,20],[7208,22,7189,22],[7209,6,7190,8],[7209,10,7190,12],[7209,11,7190,13,"auth"],[7209,15,7190,17],[7209,18,7190,20,"auth"],[7209,22,7190,24],[7210,6,7191,8],[7210,10,7191,12],[7210,11,7191,13,"internalListeners"],[7210,28,7191,30],[7210,31,7191,33],[7210,35,7191,37,"Map"],[7210,38,7191,40],[7210,39,7191,41],[7210,40,7191,42],[7211,4,7192,4],[7212,4,7193,4,"getUid"],[7212,10,7193,10,"getUid"],[7212,11,7193,10],[7212,13,7193,13],[7213,6,7194,8],[7213,10,7194,12],[7213,11,7194,13,"assertAuthConfigured"],[7213,31,7194,33],[7213,32,7194,34],[7213,33,7194,35],[7214,6,7195,8],[7214,13,7195,15],[7214,17,7195,19],[7214,18,7195,20,"auth"],[7214,22,7195,24],[7214,23,7195,25,"currentUser"],[7214,34,7195,36],[7214,36,7195,38,"uid"],[7214,39,7195,41],[7214,43,7195,45],[7214,47,7195,49],[7215,4,7196,4],[7216,4,7197,4],[7216,10,7197,10,"getToken"],[7216,18,7197,18,"getToken"],[7216,19,7197,19,"forceRefresh"],[7216,31,7197,31],[7216,33,7197,33],[7217,6,7198,8],[7217,10,7198,12],[7217,11,7198,13,"assertAuthConfigured"],[7217,31,7198,33],[7217,32,7198,34],[7217,33,7198,35],[7218,6,7199,8],[7218,12,7199,14],[7218,16,7199,18],[7218,17,7199,19,"auth"],[7218,21,7199,23],[7218,22,7199,24,"_initializationPromise"],[7218,44,7199,46],[7219,6,7200,8],[7219,10,7200,12],[7219,11,7200,13],[7219,15,7200,17],[7219,16,7200,18,"auth"],[7219,20,7200,22],[7219,21,7200,23,"currentUser"],[7219,32,7200,34],[7219,34,7200,36],[7220,8,7201,12],[7220,15,7201,19],[7220,19,7201,23],[7221,6,7202,8],[7222,6,7203,8],[7222,12,7203,14,"accessToken"],[7222,23,7203,25],[7222,26,7203,28],[7222,32,7203,34],[7222,36,7203,38],[7222,37,7203,39,"auth"],[7222,41,7203,43],[7222,42,7203,44,"currentUser"],[7222,53,7203,55],[7222,54,7203,56,"getIdToken"],[7222,64,7203,66],[7222,65,7203,67,"forceRefresh"],[7222,77,7203,79],[7222,78,7203,80],[7223,6,7204,8],[7223,13,7204,15],[7224,8,7204,17,"accessToken"],[7225,6,7204,29],[7225,7,7204,30],[7226,4,7205,4],[7227,4,7206,4,"addAuthTokenListener"],[7227,24,7206,24,"addAuthTokenListener"],[7227,25,7206,25,"listener"],[7227,33,7206,33],[7227,35,7206,35],[7228,6,7207,8],[7228,10,7207,12],[7228,11,7207,13,"assertAuthConfigured"],[7228,31,7207,33],[7228,32,7207,34],[7228,33,7207,35],[7229,6,7208,8],[7229,10,7208,12],[7229,14,7208,16],[7229,15,7208,17,"internalListeners"],[7229,32,7208,34],[7229,33,7208,35,"has"],[7229,36,7208,38],[7229,37,7208,39,"listener"],[7229,45,7208,47],[7229,46,7208,48],[7229,48,7208,50],[7230,8,7209,12],[7231,6,7210,8],[7232,6,7211,8],[7232,12,7211,14,"unsubscribe"],[7232,23,7211,25],[7232,26,7211,28],[7232,30,7211,32],[7232,31,7211,33,"auth"],[7232,35,7211,37],[7232,36,7211,38,"onIdTokenChanged"],[7232,52,7211,54],[7232,53,7211,55,"user"],[7232,57,7211,59],[7232,61,7211,63],[7233,8,7212,12,"listener"],[7233,16,7212,20],[7233,17,7212,21,"user"],[7233,21,7212,25],[7233,23,7212,27,"stsTokenManager"],[7233,38,7212,42],[7233,39,7212,43,"accessToken"],[7233,50,7212,54],[7233,54,7212,58],[7233,58,7212,62],[7233,59,7212,63],[7234,6,7213,8],[7234,7,7213,9],[7234,8,7213,10],[7235,6,7214,8],[7235,10,7214,12],[7235,11,7214,13,"internalListeners"],[7235,28,7214,30],[7235,29,7214,31,"set"],[7235,32,7214,34],[7235,33,7214,35,"listener"],[7235,41,7214,43],[7235,43,7214,45,"unsubscribe"],[7235,54,7214,56],[7235,55,7214,57],[7236,6,7215,8],[7236,10,7215,12],[7236,11,7215,13,"updateProactiveRefresh"],[7236,33,7215,35],[7236,34,7215,36],[7236,35,7215,37],[7237,4,7216,4],[7238,4,7217,4,"removeAuthTokenListener"],[7238,27,7217,27,"removeAuthTokenListener"],[7238,28,7217,28,"listener"],[7238,36,7217,36],[7238,38,7217,38],[7239,6,7218,8],[7239,10,7218,12],[7239,11,7218,13,"assertAuthConfigured"],[7239,31,7218,33],[7239,32,7218,34],[7239,33,7218,35],[7240,6,7219,8],[7240,12,7219,14,"unsubscribe"],[7240,23,7219,25],[7240,26,7219,28],[7240,30,7219,32],[7240,31,7219,33,"internalListeners"],[7240,48,7219,50],[7240,49,7219,51,"get"],[7240,52,7219,54],[7240,53,7219,55,"listener"],[7240,61,7219,63],[7240,62,7219,64],[7241,6,7220,8],[7241,10,7220,12],[7241,11,7220,13,"unsubscribe"],[7241,22,7220,24],[7241,24,7220,26],[7242,8,7221,12],[7243,6,7222,8],[7244,6,7223,8],[7244,10,7223,12],[7244,11,7223,13,"internalListeners"],[7244,28,7223,30],[7244,29,7223,31,"delete"],[7244,35,7223,37],[7244,36,7223,38,"listener"],[7244,44,7223,46],[7244,45,7223,47],[7245,6,7224,8,"unsubscribe"],[7245,17,7224,19],[7245,18,7224,20],[7245,19,7224,21],[7246,6,7225,8],[7246,10,7225,12],[7246,11,7225,13,"updateProactiveRefresh"],[7246,33,7225,35],[7246,34,7225,36],[7246,35,7225,37],[7247,4,7226,4],[7248,4,7227,4,"assertAuthConfigured"],[7248,24,7227,24,"assertAuthConfigured"],[7248,25,7227,24],[7248,27,7227,27],[7249,6,7228,8,"_assert"],[7249,13,7228,15],[7249,14,7228,16],[7249,18,7228,20],[7249,19,7228,21,"auth"],[7249,23,7228,25],[7249,24,7228,26,"_initializationPromise"],[7249,46,7228,48],[7249,48,7228,50],[7249,87,7228,89],[7249,88,7228,90],[7249,138,7228,140],[7249,139,7228,141],[7250,4,7229,4],[7251,4,7230,4,"updateProactiveRefresh"],[7251,26,7230,26,"updateProactiveRefresh"],[7251,27,7230,26],[7251,29,7230,29],[7252,6,7231,8],[7252,10,7231,12],[7252,14,7231,16],[7252,15,7231,17,"internalListeners"],[7252,32,7231,34],[7252,33,7231,35,"size"],[7252,37,7231,39],[7252,40,7231,42],[7252,41,7231,43],[7252,43,7231,45],[7253,8,7232,12],[7253,12,7232,16],[7253,13,7232,17,"auth"],[7253,17,7232,21],[7253,18,7232,22,"_startProactiveRefresh"],[7253,40,7232,44],[7253,41,7232,45],[7253,42,7232,46],[7254,6,7233,8],[7254,7,7233,9],[7254,13,7234,13],[7255,8,7235,12],[7255,12,7235,16],[7255,13,7235,17,"auth"],[7255,17,7235,21],[7255,18,7235,22,"_stopProactiveRefresh"],[7255,39,7235,43],[7255,40,7235,44],[7255,41,7235,45],[7256,6,7236,8],[7257,4,7237,4],[7258,2,7238,0],[7260,2,7240,0],[7261,0,7241,0],[7262,0,7242,0],[7263,0,7243,0],[7264,0,7244,0],[7265,0,7245,0],[7266,0,7246,0],[7267,0,7247,0],[7268,0,7248,0],[7269,0,7249,0],[7270,0,7250,0],[7271,0,7251,0],[7272,0,7252,0],[7273,0,7253,0],[7274,0,7254,0],[7275,0,7255,0],[7276,2,7256,0],[7276,11,7256,9,"getVersionForPlatform"],[7276,32,7256,30,"getVersionForPlatform"],[7276,33,7256,31,"clientPlatform"],[7276,47,7256,45],[7276,49,7256,47],[7277,4,7257,4],[7277,12,7257,12,"clientPlatform"],[7277,26,7257,26],[7278,6,7258,8],[7278,11,7258,13],[7278,17,7258,19],[7278,18,7258,20],[7279,8,7259,12],[7279,15,7259,19],[7279,21,7259,25],[7280,6,7260,8],[7280,11,7260,13],[7280,24,7260,26],[7280,25,7260,27],[7281,8,7261,12],[7281,15,7261,19],[7281,19,7261,23],[7282,6,7262,8],[7282,11,7262,13],[7282,19,7262,21],[7282,20,7262,22],[7283,8,7263,12],[7283,15,7263,19],[7283,26,7263,30],[7284,6,7264,8],[7284,11,7264,13],[7284,20,7264,22],[7284,21,7264,23],[7285,8,7265,12],[7285,15,7265,19],[7285,24,7265,28],[7286,6,7266,8],[7286,11,7266,13],[7286,25,7266,27],[7286,26,7266,28],[7287,8,7267,12],[7287,15,7267,19],[7287,30,7267,34],[7288,6,7268,8],[7289,8,7269,12],[7289,15,7269,19,"undefined"],[7289,24,7269,28],[7290,4,7270,4],[7291,2,7271,0],[7292,2,7272,0],[7293,2,7273,0],[7293,11,7273,9,"registerAuth"],[7293,23,7273,21,"registerAuth"],[7293,24,7273,22,"clientPlatform"],[7293,38,7273,36],[7293,40,7273,38],[7294,4,7274,4],[7294,8,7274,4,"_registerComponent"],[7294,31,7274,22],[7294,33,7274,23],[7294,37,7274,27,"Component"],[7294,57,7274,36],[7294,58,7274,37],[7294,64,7274,43],[7294,65,7274,44],[7294,92,7274,71],[7294,93,7274,72,"container"],[7294,102,7274,81],[7294,104,7274,83],[7295,6,7274,85,"options"],[7295,13,7274,92],[7295,15,7274,94,"deps"],[7296,4,7274,99],[7296,5,7274,100],[7296,10,7274,105],[7297,6,7275,8],[7297,12,7275,14,"app"],[7297,15,7275,17],[7297,18,7275,20,"container"],[7297,27,7275,29],[7297,28,7275,30,"getProvider"],[7297,39,7275,41],[7297,40,7275,42],[7297,45,7275,47],[7297,46,7275,48],[7297,47,7275,49,"getImmediate"],[7297,59,7275,61],[7297,60,7275,62],[7297,61,7275,63],[7298,6,7276,8],[7298,12,7276,14,"heartbeatServiceProvider"],[7298,36,7276,38],[7298,39,7276,41,"container"],[7298,48,7276,50],[7298,49,7276,51,"getProvider"],[7298,60,7276,62],[7298,61,7276,63],[7298,72,7276,74],[7298,73,7276,75],[7299,6,7277,8],[7299,12,7277,14,"appCheckServiceProvider"],[7299,35,7277,37],[7299,38,7277,40,"container"],[7299,47,7277,49],[7299,48,7277,50,"getProvider"],[7299,59,7277,61],[7299,60,7277,62],[7299,80,7277,82],[7299,81,7277,83],[7300,6,7278,8],[7300,12,7278,14],[7301,8,7278,16,"apiKey"],[7301,14,7278,22],[7302,8,7278,24,"authDomain"],[7303,6,7278,35],[7303,7,7278,36],[7303,10,7278,39,"app"],[7303,13,7278,42],[7303,14,7278,43,"options"],[7303,21,7278,50],[7304,6,7279,8,"_assert"],[7304,13,7279,15],[7304,14,7279,16,"apiKey"],[7304,20,7279,22],[7304,24,7279,26],[7304,25,7279,27,"apiKey"],[7304,31,7279,33],[7304,32,7279,34,"includes"],[7304,40,7279,42],[7304,41,7279,43],[7304,44,7279,46],[7304,45,7279,47],[7304,47,7279,49],[7304,64,7279,66],[7304,65,7279,67],[7304,102,7279,104],[7305,8,7279,106,"appName"],[7305,15,7279,113],[7305,17,7279,115,"app"],[7305,20,7279,118],[7305,21,7279,119,"name"],[7306,6,7279,124],[7306,7,7279,125],[7306,8,7279,126],[7307,6,7280,8],[7307,12,7280,14,"config"],[7307,18,7280,20],[7307,21,7280,23],[7308,8,7281,12,"apiKey"],[7308,14,7281,18],[7309,8,7282,12,"authDomain"],[7309,18,7282,22],[7310,8,7283,12,"clientPlatform"],[7310,22,7283,26],[7311,8,7284,12,"apiHost"],[7311,15,7284,19],[7311,17,7284,21],[7311,49,7284,53],[7311,50,7284,54],[7312,8,7285,12,"tokenApiHost"],[7312,20,7285,24],[7312,22,7285,26],[7312,50,7285,54],[7312,51,7285,55],[7313,8,7286,12,"apiScheme"],[7313,17,7286,21],[7313,19,7286,23],[7313,26,7286,30],[7313,27,7286,31],[7314,8,7287,12,"sdkClientVersion"],[7314,24,7287,28],[7314,26,7287,30,"_getClientVersion"],[7314,43,7287,47],[7314,44,7287,48,"clientPlatform"],[7314,58,7287,62],[7315,6,7288,8],[7315,7,7288,9],[7316,6,7289,8],[7316,12,7289,14,"authInstance"],[7316,24,7289,26],[7316,27,7289,29],[7316,31,7289,33,"AuthImpl"],[7316,39,7289,41],[7316,40,7289,42,"app"],[7316,43,7289,45],[7316,45,7289,47,"heartbeatServiceProvider"],[7316,69,7289,71],[7316,71,7289,73,"appCheckServiceProvider"],[7316,94,7289,96],[7316,96,7289,98,"config"],[7316,102,7289,104],[7316,103,7289,105],[7317,6,7290,8,"_initializeAuthInstance"],[7317,29,7290,31],[7317,30,7290,32,"authInstance"],[7317,42,7290,44],[7317,44,7290,46,"deps"],[7317,48,7290,50],[7317,49,7290,51],[7318,6,7291,8],[7318,13,7291,15,"authInstance"],[7318,25,7291,27],[7319,4,7292,4],[7319,5,7292,5],[7319,7,7292,7],[7319,15,7292,15],[7319,16,7292,16],[7319,42,7292,42],[7320,4,7293,8],[7321,0,7294,0],[7322,0,7295,0],[7323,0,7296,0],[7323,7,7293,8],[7323,8,7297,9,"setInstantiationMode"],[7323,28,7297,29],[7323,29,7297,30],[7323,39,7297,40],[7323,40,7297,41],[7323,72,7297,73],[7324,4,7298,8],[7325,0,7299,0],[7326,0,7300,0],[7327,0,7301,0],[7327,7,7298,8],[7327,8,7302,9,"setInstanceCreatedCallback"],[7327,34,7302,35],[7327,35,7302,36],[7327,36,7302,37,"container"],[7327,45,7302,46],[7327,47,7302,48,"_instanceIdentifier"],[7327,66,7302,67],[7327,68,7302,69,"_instance"],[7327,77,7302,78],[7327,82,7302,83],[7328,6,7303,8],[7328,12,7303,14,"authInternalProvider"],[7328,32,7303,34],[7328,35,7303,37,"container"],[7328,44,7303,46],[7328,45,7303,47,"getProvider"],[7328,56,7303,58],[7328,57,7303,59],[7328,72,7303,74],[7328,73,7303,75],[7328,107,7303,109],[7328,108,7303,110],[7329,6,7304,8,"authInternalProvider"],[7329,26,7304,28],[7329,27,7304,29,"initialize"],[7329,37,7304,39],[7329,38,7304,40],[7329,39,7304,41],[7330,4,7305,4],[7330,5,7305,5],[7330,6,7305,6],[7330,7,7305,7],[7331,4,7306,4],[7331,8,7306,4,"_registerComponent"],[7331,31,7306,22],[7331,33,7306,23],[7331,37,7306,27,"Component"],[7331,57,7306,36],[7331,58,7306,37],[7331,73,7306,52],[7331,74,7306,53],[7331,110,7306,89,"container"],[7331,119,7306,98],[7331,123,7306,102],[7332,6,7307,8],[7332,12,7307,14,"auth"],[7332,16,7307,18],[7332,19,7307,21,"_castAuth"],[7332,28,7307,30],[7332,29,7307,31,"container"],[7332,38,7307,40],[7332,39,7307,41,"getProvider"],[7332,50,7307,52],[7332,51,7307,53],[7332,57,7307,59],[7332,58,7307,60],[7332,83,7307,85],[7332,84,7307,86],[7332,85,7307,87,"getImmediate"],[7332,97,7307,99],[7332,98,7307,100],[7332,99,7307,101],[7332,100,7307,102],[7333,6,7308,8],[7333,13,7308,15],[7333,14,7308,16,"auth"],[7333,18,7308,20],[7333,22,7308,24],[7333,26,7308,28,"AuthInterop"],[7333,37,7308,39],[7333,38,7308,40,"auth"],[7333,42,7308,44],[7333,43,7308,45],[7333,45,7308,47,"auth"],[7333,49,7308,51],[7333,50,7308,52],[7334,4,7309,4],[7334,5,7309,5],[7334,7,7309,7],[7334,16,7309,16],[7334,17,7309,17],[7334,44,7309,44],[7334,45,7309,45],[7334,46,7309,46,"setInstantiationMode"],[7334,66,7309,66],[7334,67,7309,67],[7334,77,7309,77],[7334,78,7309,78],[7334,110,7309,110],[7334,111,7309,111],[7334,112,7309,112],[7335,4,7310,4],[7335,8,7310,4,"registerVersion"],[7335,28,7310,19],[7335,30,7310,20,"name"],[7335,34,7310,24],[7335,36,7310,26,"version"],[7335,43,7310,33],[7335,45,7310,35,"getVersionForPlatform"],[7335,66,7310,56],[7335,67,7310,57,"clientPlatform"],[7335,81,7310,71],[7335,82,7310,72],[7335,83,7310,73],[7336,4,7311,4],[7337,4,7312,4],[7337,8,7312,4,"registerVersion"],[7337,28,7312,19],[7337,30,7312,20,"name"],[7337,34,7312,24],[7337,36,7312,26,"version"],[7337,43,7312,33],[7337,45,7312,35],[7337,54,7312,44],[7337,55,7312,45],[7338,2,7313,0],[7340,2,7315,0],[7341,0,7316,0],[7342,0,7317,0],[7343,0,7318,0],[7344,0,7319,0],[7345,0,7320,0],[7346,0,7321,0],[7347,0,7322,0],[7348,0,7323,0],[7349,0,7324,0],[7350,0,7325,0],[7351,0,7326,0],[7352,0,7327,0],[7353,0,7328,0],[7354,0,7329,0],[7355,0,7330,0],[7356,2,7331,0],[7357,2,7332,0,"FetchProvider"],[7357,15,7332,13],[7357,16,7332,14,"initialize"],[7357,26,7332,24],[7357,27,7332,25,"fetch"],[7357,32,7332,30],[7357,34,7332,32,"Headers"],[7357,41,7332,39],[7357,43,7332,41,"Response"],[7357,51,7332,49],[7357,52,7332,50],[7358,2,7333,0],[7359,2,7334,0],[7360,2,7335,0],[7360,11,7335,9,"getAuth"],[7360,18,7335,16,"getAuth"],[7360,19,7335,17,"app"],[7360,22,7335,20],[7360,25,7335,23],[7360,29,7335,23,"getApp"],[7360,40,7335,29],[7360,42,7335,30],[7360,43,7335,31],[7360,45,7335,33],[7361,4,7336,4],[7361,10,7336,10,"provider"],[7361,18,7336,18],[7361,21,7336,21],[7361,25,7336,21,"_getProvider"],[7361,42,7336,33],[7361,44,7336,34,"app"],[7361,47,7336,37],[7361,49,7336,39],[7361,55,7336,45],[7361,56,7336,46],[7362,4,7337,4],[7362,8,7337,8,"provider"],[7362,16,7337,16],[7362,17,7337,17,"isInitialized"],[7362,30,7337,30],[7362,31,7337,31],[7362,32,7337,32],[7362,34,7337,34],[7363,6,7338,8],[7363,13,7338,15,"provider"],[7363,21,7338,23],[7363,22,7338,24,"getImmediate"],[7363,34,7338,36],[7363,35,7338,37],[7363,36,7338,38],[7364,4,7339,4],[7365,4,7340,4],[7365,10,7340,10,"auth"],[7365,14,7340,14],[7365,17,7340,17,"initializeAuth"],[7365,31,7340,31],[7365,32,7340,32,"app"],[7365,35,7340,35],[7365,36,7340,36],[7366,4,7341,4],[7366,10,7341,10,"authEmulatorHost"],[7366,26,7341,26],[7366,29,7341,29],[7366,33,7341,29,"getDefaultEmulatorHost"],[7366,61,7341,51],[7366,63,7341,52],[7366,69,7341,58],[7366,70,7341,59],[7367,4,7342,4],[7367,8,7342,8,"authEmulatorHost"],[7367,24,7342,24],[7367,26,7342,26],[7368,6,7343,8,"connectAuthEmulator"],[7368,25,7343,27],[7368,26,7343,28,"auth"],[7368,30,7343,32],[7368,32,7343,34],[7368,42,7343,44,"authEmulatorHost"],[7368,58,7343,60],[7368,60,7343,62],[7368,61,7343,63],[7369,4,7344,4],[7370,4,7345,4],[7370,11,7345,11,"auth"],[7370,15,7345,15],[7371,2,7346,0],[7372,2,7347,0,"registerAuth"],[7372,14,7347,12],[7372,15,7347,13],[7372,21,7347,19],[7372,22,7347,20],[7372,47,7347,45],[7372,48,7347,46],[7373,2,7348,0],[7374,2,7349,0],[7375,2,7350,0],[7376,2,7351,0],[7377,2,7352,0],[7378,2,7353,0],[7379,2,7354,0],[7380,2,7355,0],[7380,8,7355,6,"NOT_AVAILABLE_ERROR"],[7380,27,7355,25],[7380,30,7355,28,"_createError"],[7380,42,7355,40],[7380,43,7355,41],[7380,88,7355,86],[7380,89,7355,87],[7380,132,7355,130],[7380,133,7355,131],[7381,2,7356,0],[7382,2,7357,0],[7382,17,7357,15,"fail"],[7382,21,7357,19,"fail"],[7382,22,7357,19],[7382,24,7357,22],[7383,4,7358,4],[7383,10,7358,10,"NOT_AVAILABLE_ERROR"],[7383,29,7358,29],[7384,2,7359,0],[7385,2,7360,0],[7386,0,7361,0],[7387,0,7362,0],[7388,0,7363,0],[7389,2,7364,0],[7389,8,7364,6,"FailClass"],[7389,17,7364,15],[7389,18,7364,16],[7390,4,7365,4,"constructor"],[7390,15,7365,15,"constructor"],[7390,16,7365,15],[7390,18,7365,18],[7391,6,7366,8],[7391,12,7366,14,"NOT_AVAILABLE_ERROR"],[7391,31,7366,33],[7392,4,7367,4],[7393,2,7368,0],[7394,2,7369,0],[7394,8,7369,6,"browserLocalPersistence"],[7394,31,7369,29],[7394,34,7369,29,"exports"],[7394,41,7369,29],[7394,42,7369,29,"b"],[7394,43,7369,29],[7394,46,7369,32,"inMemoryPersistence"],[7394,65,7369,51],[7395,2,7370,0],[7395,8,7370,6,"browserSessionPersistence"],[7395,33,7370,31],[7395,36,7370,31,"exports"],[7395,43,7370,31],[7395,44,7370,31,"c"],[7395,45,7370,31],[7395,48,7370,34,"inMemoryPersistence"],[7395,67,7370,53],[7396,2,7371,0],[7396,8,7371,6,"browserCookiePersistence"],[7396,32,7371,30],[7396,35,7371,30,"exports"],[7396,42,7371,30],[7396,43,7371,30,"a"],[7396,44,7371,30],[7396,47,7371,33,"inMemoryPersistence"],[7396,66,7371,52],[7397,2,7372,0],[7397,8,7372,6,"indexedDBLocalPersistence"],[7397,33,7372,31],[7397,36,7372,31,"exports"],[7397,43,7372,31],[7397,44,7372,31,"i"],[7397,45,7372,31],[7397,48,7372,34,"inMemoryPersistence"],[7397,67,7372,53],[7398,2,7373,0],[7398,8,7373,6,"browserPopupRedirectResolver"],[7398,36,7373,34],[7398,39,7373,34,"exports"],[7398,46,7373,34],[7398,47,7373,34,"m"],[7398,48,7373,34],[7398,51,7373,37,"NOT_AVAILABLE_ERROR"],[7398,70,7373,56],[7399,2,7374,0],[7399,8,7374,6,"PhoneAuthProvider"],[7399,25,7374,23],[7399,28,7374,23,"exports"],[7399,35,7374,23],[7399,36,7374,23,"P"],[7399,37,7374,23],[7399,40,7374,26,"FailClass"],[7399,49,7374,35],[7400,2,7375,0],[7400,8,7375,6,"signInWithPhoneNumber"],[7400,29,7375,27],[7400,32,7375,27,"exports"],[7400,39,7375,27],[7400,40,7375,27,"s"],[7400,41,7375,27],[7400,44,7375,30,"fail"],[7400,48,7375,34],[7401,2,7376,0],[7401,8,7376,6,"linkWithPhoneNumber"],[7401,27,7376,25],[7401,30,7376,25,"exports"],[7401,37,7376,25],[7401,38,7376,25,"l"],[7401,39,7376,25],[7401,42,7376,28,"fail"],[7401,46,7376,32],[7402,2,7377,0],[7402,8,7377,6,"reauthenticateWithPhoneNumber"],[7402,37,7377,35],[7402,40,7377,35,"exports"],[7402,47,7377,35],[7402,48,7377,35,"r"],[7402,49,7377,35],[7402,52,7377,38,"fail"],[7402,56,7377,42],[7403,2,7378,0],[7403,8,7378,6,"updatePhoneNumber"],[7403,25,7378,23],[7403,28,7378,23,"exports"],[7403,35,7378,23],[7403,36,7378,23,"u"],[7403,37,7378,23],[7403,40,7378,26,"fail"],[7403,44,7378,30],[7404,2,7379,0],[7404,8,7379,6,"signInWithPopup"],[7404,23,7379,21],[7404,26,7379,21,"exports"],[7404,33,7379,21],[7404,34,7379,21,"d"],[7404,35,7379,21],[7404,38,7379,24,"fail"],[7404,42,7379,28],[7405,2,7380,0],[7405,8,7380,6,"linkWithPopup"],[7405,21,7380,19],[7405,24,7380,19,"exports"],[7405,31,7380,19],[7405,32,7380,19,"e"],[7405,33,7380,19],[7405,36,7380,22,"fail"],[7405,40,7380,26],[7406,2,7381,0],[7406,8,7381,6,"reauthenticateWithPopup"],[7406,31,7381,29],[7406,34,7381,29,"exports"],[7406,41,7381,29],[7406,42,7381,29,"f"],[7406,43,7381,29],[7406,46,7381,32,"fail"],[7406,50,7381,36],[7407,2,7382,0],[7407,8,7382,6,"signInWithRedirect"],[7407,26,7382,24],[7407,29,7382,24,"exports"],[7407,36,7382,24],[7407,37,7382,24,"g"],[7407,38,7382,24],[7407,41,7382,27,"fail"],[7407,45,7382,31],[7408,2,7383,0],[7408,8,7383,6,"linkWithRedirect"],[7408,24,7383,22],[7408,27,7383,22,"exports"],[7408,34,7383,22],[7408,35,7383,22,"h"],[7408,36,7383,22],[7408,39,7383,25,"fail"],[7408,43,7383,29],[7409,2,7384,0],[7409,8,7384,6,"reauthenticateWithRedirect"],[7409,34,7384,32],[7409,37,7384,32,"exports"],[7409,44,7384,32],[7409,45,7384,32,"j"],[7409,46,7384,32],[7409,49,7384,35,"fail"],[7409,53,7384,39],[7410,2,7385,0],[7410,8,7385,6,"getRedirectResult"],[7410,25,7385,23],[7410,28,7385,23,"exports"],[7410,35,7385,23],[7410,36,7385,23,"k"],[7410,37,7385,23],[7410,40,7385,26,"fail"],[7410,44,7385,30],[7411,2,7386,0],[7411,8,7386,6,"RecaptchaVerifier"],[7411,25,7386,23],[7411,28,7386,23,"exports"],[7411,35,7386,23],[7411,36,7386,23,"R"],[7411,37,7386,23],[7411,40,7386,26,"FailClass"],[7411,49,7386,35],[7412,2,7387,0],[7412,8,7387,6,"PhoneMultiFactorGenerator"],[7412,33,7387,31],[7412,34,7387,32],[7413,4,7388,4],[7413,11,7388,11,"assertion"],[7413,20,7388,20,"assertion"],[7413,21,7388,20],[7413,23,7388,23],[7414,6,7389,8],[7414,12,7389,14,"NOT_AVAILABLE_ERROR"],[7414,31,7389,33],[7415,4,7390,4],[7416,2,7391,0],[7417,2,7392,0],[7418,2,7393,0],[7419,2,7394,0],[7420,2,7394,0,"exports"],[7420,9,7394,0],[7420,10,7394,0,"n"],[7420,11,7394,0],[7420,14,7394,0,"PhoneMultiFactorGenerator"],[7420,39,7394,0],[7421,2,7395,0,"AuthImpl"],[7421,10,7395,8],[7421,11,7395,9,"prototype"],[7421,20,7395,18],[7421,21,7395,19,"setPersistence"],[7421,35,7395,33],[7421,38,7395,36],[7421,50,7395,48],[7421,51,7395,50],[7421,52,7395,51],[7423,2,7397,0],[7424,0,7398,0],[7425,0,7399,0],[7426,0,7400,0],[7427,0,7401,0],[7428,0,7402,0],[7429,0,7403,0],[7430,0,7404,0],[7431,0,7405,0],[7432,0,7406,0],[7433,0,7407,0],[7434,0,7408,0],[7435,0,7409,0],[7436,0,7410,0],[7437,0,7411,0],[7438,0,7412,0],[7439,2,7413,0],[7439,11,7413,9,"finalizeSignInTotpMfa"],[7439,32,7413,30,"finalizeSignInTotpMfa"],[7439,33,7413,31,"auth"],[7439,37,7413,35],[7439,39,7413,37,"request"],[7439,46,7413,44],[7439,48,7413,46],[7440,4,7414,4],[7440,11,7414,11,"_performApiRequest"],[7440,29,7414,29],[7440,30,7414,30,"auth"],[7440,34,7414,34],[7440,36,7414,36],[7440,42,7414,42],[7440,43,7414,43],[7440,66,7414,66],[7440,99,7414,99],[7440,100,7414,100],[7440,137,7414,137,"_addTidIfNecessary"],[7440,155,7414,155],[7440,156,7414,156,"auth"],[7440,160,7414,160],[7440,162,7414,162,"request"],[7440,169,7414,169],[7440,170,7414,170],[7440,171,7414,171],[7441,2,7415,0],[7442,2,7417,0],[7442,8,7417,6,"MultiFactorAssertionImpl"],[7442,32,7417,30],[7442,33,7417,31],[7443,4,7418,4,"constructor"],[7443,15,7418,15,"constructor"],[7443,16,7418,16,"factorId"],[7443,24,7418,24],[7443,26,7418,26],[7444,6,7419,8],[7444,10,7419,12],[7444,11,7419,13,"factorId"],[7444,19,7419,21],[7444,22,7419,24,"factorId"],[7444,30,7419,32],[7445,4,7420,4],[7446,4,7421,4,"_process"],[7446,12,7421,12,"_process"],[7446,13,7421,13,"auth"],[7446,17,7421,17],[7446,19,7421,19,"session"],[7446,26,7421,26],[7446,28,7421,28,"displayName"],[7446,39,7421,39],[7446,41,7421,41],[7447,6,7422,8],[7447,14,7422,16,"session"],[7447,21,7422,23],[7447,22,7422,24,"type"],[7447,26,7422,28],[7448,8,7423,12],[7448,13,7423,17],[7448,21,7423,25],[7448,22,7423,26],[7449,10,7424,16],[7449,17,7424,23],[7449,21,7424,27],[7449,22,7424,28,"_finalizeEnroll"],[7449,37,7424,43],[7449,38,7424,44,"auth"],[7449,42,7424,48],[7449,44,7424,50,"session"],[7449,51,7424,57],[7449,52,7424,58,"credential"],[7449,62,7424,68],[7449,64,7424,70,"displayName"],[7449,75,7424,81],[7449,76,7424,82],[7450,8,7425,12],[7450,13,7425,17],[7450,21,7425,25],[7450,22,7425,26],[7451,10,7426,16],[7451,17,7426,23],[7451,21,7426,27],[7451,22,7426,28,"_finalizeSignIn"],[7451,37,7426,43],[7451,38,7426,44,"auth"],[7451,42,7426,48],[7451,44,7426,50,"session"],[7451,51,7426,57],[7451,52,7426,58,"credential"],[7451,62,7426,68],[7451,63,7426,69],[7452,8,7427,12],[7453,10,7428,16],[7453,17,7428,23,"debugFail"],[7453,26,7428,32],[7453,27,7428,33],[7453,62,7428,68],[7453,63,7428,69],[7454,6,7429,8],[7455,4,7430,4],[7456,2,7431,0],[7458,2,7433,0],[7459,0,7434,0],[7460,0,7435,0],[7461,0,7436,0],[7462,0,7437,0],[7463,2,7438,0],[7463,8,7438,6,"TotpMultiFactorGenerator"],[7463,32,7438,30],[7463,33,7438,31],[7464,4,7439,4],[7465,0,7440,0],[7466,0,7441,0],[7467,0,7442,0],[7468,0,7443,0],[7469,0,7444,0],[7470,0,7445,0],[7471,0,7446,0],[7472,0,7447,0],[7473,0,7448,0],[7474,4,7449,4],[7474,11,7449,11,"assertionForEnrollment"],[7474,33,7449,33,"assertionForEnrollment"],[7474,34,7449,34,"secret"],[7474,40,7449,40],[7474,42,7449,42,"oneTimePassword"],[7474,57,7449,57],[7474,59,7449,59],[7475,6,7450,8],[7475,13,7450,15,"TotpMultiFactorAssertionImpl"],[7475,41,7450,43],[7475,42,7450,44,"_fromSecret"],[7475,53,7450,55],[7475,54,7450,56,"secret"],[7475,60,7450,62],[7475,62,7450,64,"oneTimePassword"],[7475,77,7450,79],[7475,78,7450,80],[7476,4,7451,4],[7477,4,7452,4],[7478,0,7453,0],[7479,0,7454,0],[7480,0,7455,0],[7481,0,7456,0],[7482,0,7457,0],[7483,0,7458,0],[7484,0,7459,0],[7485,0,7460,0],[7486,4,7461,4],[7486,11,7461,11,"assertionForSignIn"],[7486,29,7461,29,"assertionForSignIn"],[7486,30,7461,30,"enrollmentId"],[7486,42,7461,42],[7486,44,7461,44,"oneTimePassword"],[7486,59,7461,59],[7486,61,7461,61],[7487,6,7462,8],[7487,13,7462,15,"TotpMultiFactorAssertionImpl"],[7487,41,7462,43],[7487,42,7462,44,"_fromEnrollmentId"],[7487,59,7462,61],[7487,60,7462,62,"enrollmentId"],[7487,72,7462,74],[7487,74,7462,76,"oneTimePassword"],[7487,89,7462,91],[7487,90,7462,92],[7488,4,7463,4],[7489,4,7464,4],[7490,0,7465,0],[7491,0,7466,0],[7492,0,7467,0],[7493,0,7468,0],[7494,0,7469,0],[7495,0,7470,0],[7496,0,7471,0],[7497,0,7472,0],[7498,4,7473,4],[7498,17,7473,17,"generateSecret"],[7498,31,7473,31,"generateSecret"],[7498,32,7473,32,"session"],[7498,39,7473,39],[7498,41,7473,41],[7499,6,7474,8],[7499,12,7474,14,"mfaSession"],[7499,22,7474,24],[7499,25,7474,27,"session"],[7499,32,7474,34],[7500,6,7475,8,"_assert"],[7500,13,7475,15],[7500,14,7475,16],[7500,21,7475,23,"mfaSession"],[7500,31,7475,33],[7500,32,7475,34,"user"],[7500,36,7475,38],[7500,38,7475,40,"auth"],[7500,42,7475,44],[7500,47,7475,49],[7500,58,7475,60],[7500,60,7475,62],[7500,76,7475,78],[7500,77,7475,79],[7500,111,7475,113],[7500,112,7475,114],[7501,6,7476,8],[7501,12,7476,14,"response"],[7501,20,7476,22],[7501,23,7476,25],[7501,29,7476,31,"startEnrollTotpMfa"],[7501,47,7476,49],[7501,48,7476,50,"mfaSession"],[7501,58,7476,60],[7501,59,7476,61,"user"],[7501,63,7476,65],[7501,64,7476,66,"auth"],[7501,68,7476,70],[7501,70,7476,72],[7502,8,7477,12,"idToken"],[7502,15,7477,19],[7502,17,7477,21,"mfaSession"],[7502,27,7477,31],[7502,28,7477,32,"credential"],[7502,38,7477,42],[7503,8,7478,12,"totpEnrollmentInfo"],[7503,26,7478,30],[7503,28,7478,32],[7503,29,7478,33],[7504,6,7479,8],[7504,7,7479,9],[7504,8,7479,10],[7505,6,7480,8],[7505,13,7480,15,"TotpSecret"],[7505,23,7480,25],[7505,24,7480,26,"_fromStartTotpMfaEnrollmentResponse"],[7505,59,7480,61],[7505,60,7480,62,"response"],[7505,68,7480,70],[7505,70,7480,72,"mfaSession"],[7505,80,7480,82],[7505,81,7480,83,"user"],[7505,85,7480,87],[7505,86,7480,88,"auth"],[7505,90,7480,92],[7505,91,7480,93],[7506,4,7481,4],[7507,2,7482,0],[7508,2,7483,0],[7509,0,7484,0],[7510,0,7485,0],[7511,2,7483,0,"exports"],[7511,9,7483,0],[7511,10,7483,0,"T"],[7511,11,7483,0],[7511,14,7483,0,"TotpMultiFactorGenerator"],[7511,38,7483,0],[7512,2,7486,0,"TotpMultiFactorGenerator"],[7512,26,7486,24],[7512,27,7486,25,"FACTOR_ID"],[7512,36,7486,34],[7512,39,7486,37],[7512,45,7486,43],[7512,46,7486,44],[7513,2,7487,0],[7513,8,7487,6,"TotpMultiFactorAssertionImpl"],[7513,36,7487,34],[7513,45,7487,43,"MultiFactorAssertionImpl"],[7513,69,7487,67],[7513,70,7487,68],[7514,4,7488,4,"constructor"],[7514,15,7488,15,"constructor"],[7514,16,7488,16,"otp"],[7514,19,7488,19],[7514,21,7488,21,"enrollmentId"],[7514,33,7488,33],[7514,35,7488,35,"secret"],[7514,41,7488,41],[7514,43,7488,43],[7515,6,7489,8],[7515,11,7489,13],[7515,12,7489,14],[7515,18,7489,20],[7515,19,7489,21],[7515,38,7489,40],[7515,39,7489,41],[7516,6,7490,8],[7516,10,7490,12],[7516,11,7490,13,"otp"],[7516,14,7490,16],[7516,17,7490,19,"otp"],[7516,20,7490,22],[7517,6,7491,8],[7517,10,7491,12],[7517,11,7491,13,"enrollmentId"],[7517,23,7491,25],[7517,26,7491,28,"enrollmentId"],[7517,38,7491,40],[7518,6,7492,8],[7518,10,7492,12],[7518,11,7492,13,"secret"],[7518,17,7492,19],[7518,20,7492,22,"secret"],[7518,26,7492,28],[7519,4,7493,4],[7520,4,7494,4],[7521,4,7495,4],[7521,11,7495,11,"_fromSecret"],[7521,22,7495,22,"_fromSecret"],[7521,23,7495,23,"secret"],[7521,29,7495,29],[7521,31,7495,31,"otp"],[7521,34,7495,34],[7521,36,7495,36],[7522,6,7496,8],[7522,13,7496,15],[7522,17,7496,19,"TotpMultiFactorAssertionImpl"],[7522,45,7496,47],[7522,46,7496,48,"otp"],[7522,49,7496,51],[7522,51,7496,53,"undefined"],[7522,60,7496,62],[7522,62,7496,64,"secret"],[7522,68,7496,70],[7522,69,7496,71],[7523,4,7497,4],[7524,4,7498,4],[7525,4,7499,4],[7525,11,7499,11,"_fromEnrollmentId"],[7525,28,7499,28,"_fromEnrollmentId"],[7525,29,7499,29,"enrollmentId"],[7525,41,7499,41],[7525,43,7499,43,"otp"],[7525,46,7499,46],[7525,48,7499,48],[7526,6,7500,8],[7526,13,7500,15],[7526,17,7500,19,"TotpMultiFactorAssertionImpl"],[7526,45,7500,47],[7526,46,7500,48,"otp"],[7526,49,7500,51],[7526,51,7500,53,"enrollmentId"],[7526,63,7500,65],[7526,64,7500,66],[7527,4,7501,4],[7528,4,7502,4],[7529,4,7503,4],[7529,10,7503,10,"_finalizeEnroll"],[7529,25,7503,25,"_finalizeEnroll"],[7529,26,7503,26,"auth"],[7529,30,7503,30],[7529,32,7503,32,"idToken"],[7529,39,7503,39],[7529,41,7503,41,"displayName"],[7529,52,7503,52],[7529,54,7503,54],[7530,6,7504,8,"_assert"],[7530,13,7504,15],[7530,14,7504,16],[7530,21,7504,23],[7530,25,7504,27],[7530,26,7504,28,"secret"],[7530,32,7504,34],[7530,37,7504,39],[7530,48,7504,50],[7530,50,7504,52,"auth"],[7530,54,7504,56],[7530,56,7504,58],[7530,72,7504,74],[7530,73,7504,75],[7530,107,7504,109],[7530,108,7504,110],[7531,6,7505,8],[7531,13,7505,15,"finalizeEnrollTotpMfa"],[7531,34,7505,36],[7531,35,7505,37,"auth"],[7531,39,7505,41],[7531,41,7505,43],[7532,8,7506,12,"idToken"],[7532,15,7506,19],[7533,8,7507,12,"displayName"],[7533,19,7507,23],[7534,8,7508,12,"totpVerificationInfo"],[7534,28,7508,32],[7534,30,7508,34],[7534,34,7508,38],[7534,35,7508,39,"secret"],[7534,41,7508,45],[7534,42,7508,46,"_makeTotpVerificationInfo"],[7534,67,7508,71],[7534,68,7508,72],[7534,72,7508,76],[7534,73,7508,77,"otp"],[7534,76,7508,80],[7535,6,7509,8],[7535,7,7509,9],[7535,8,7509,10],[7536,4,7510,4],[7537,4,7511,4],[7538,4,7512,4],[7538,10,7512,10,"_finalizeSignIn"],[7538,25,7512,25,"_finalizeSignIn"],[7538,26,7512,26,"auth"],[7538,30,7512,30],[7538,32,7512,32,"mfaPendingCredential"],[7538,52,7512,52],[7538,54,7512,54],[7539,6,7513,8,"_assert"],[7539,13,7513,15],[7539,14,7513,16],[7539,18,7513,20],[7539,19,7513,21,"enrollmentId"],[7539,31,7513,33],[7539,36,7513,38,"undefined"],[7539,45,7513,47],[7539,49,7513,51],[7539,53,7513,55],[7539,54,7513,56,"otp"],[7539,57,7513,59],[7539,62,7513,64,"undefined"],[7539,71,7513,73],[7539,73,7513,75,"auth"],[7539,77,7513,79],[7539,79,7513,81],[7539,95,7513,97],[7539,96,7513,98],[7539,130,7513,132],[7539,131,7513,133],[7540,6,7514,8],[7540,12,7514,14,"totpVerificationInfo"],[7540,32,7514,34],[7540,35,7514,37],[7541,8,7514,39,"verificationCode"],[7541,24,7514,55],[7541,26,7514,57],[7541,30,7514,61],[7541,31,7514,62,"otp"],[7542,6,7514,66],[7542,7,7514,67],[7543,6,7515,8],[7543,13,7515,15,"finalizeSignInTotpMfa"],[7543,34,7515,36],[7543,35,7515,37,"auth"],[7543,39,7515,41],[7543,41,7515,43],[7544,8,7516,12,"mfaPendingCredential"],[7544,28,7516,32],[7545,8,7517,12,"mfaEnrollmentId"],[7545,23,7517,27],[7545,25,7517,29],[7545,29,7517,33],[7545,30,7517,34,"enrollmentId"],[7545,42,7517,46],[7546,8,7518,12,"totpVerificationInfo"],[7547,6,7519,8],[7547,7,7519,9],[7547,8,7519,10],[7548,4,7520,4],[7549,2,7521,0],[7550,2,7522,0],[7551,0,7523,0],[7552,0,7524,0],[7553,0,7525,0],[7554,0,7526,0],[7555,0,7527,0],[7556,0,7528,0],[7557,2,7529,0],[7557,8,7529,6,"TotpSecret"],[7557,18,7529,16],[7557,19,7529,17],[7558,4,7530,4],[7559,4,7531,4,"constructor"],[7559,15,7531,15,"constructor"],[7559,16,7531,16,"secretKey"],[7559,25,7531,25],[7559,27,7531,27,"hashingAlgorithm"],[7559,43,7531,43],[7559,45,7531,45,"codeLength"],[7559,55,7531,55],[7559,57,7531,57,"codeIntervalSeconds"],[7559,76,7531,76],[7559,78,7531,78,"enrollmentCompletionDeadline"],[7559,106,7531,106],[7559,108,7531,108,"sessionInfo"],[7559,119,7531,119],[7559,121,7531,121,"auth"],[7559,125,7531,125],[7559,127,7531,127],[7560,6,7532,8],[7560,10,7532,12],[7560,11,7532,13,"sessionInfo"],[7560,22,7532,24],[7560,25,7532,27,"sessionInfo"],[7560,36,7532,38],[7561,6,7533,8],[7561,10,7533,12],[7561,11,7533,13,"auth"],[7561,15,7533,17],[7561,18,7533,20,"auth"],[7561,22,7533,24],[7562,6,7534,8],[7562,10,7534,12],[7562,11,7534,13,"secretKey"],[7562,20,7534,22],[7562,23,7534,25,"secretKey"],[7562,32,7534,34],[7563,6,7535,8],[7563,10,7535,12],[7563,11,7535,13,"hashingAlgorithm"],[7563,27,7535,29],[7563,30,7535,32,"hashingAlgorithm"],[7563,46,7535,48],[7564,6,7536,8],[7564,10,7536,12],[7564,11,7536,13,"codeLength"],[7564,21,7536,23],[7564,24,7536,26,"codeLength"],[7564,34,7536,36],[7565,6,7537,8],[7565,10,7537,12],[7565,11,7537,13,"codeIntervalSeconds"],[7565,30,7537,32],[7565,33,7537,35,"codeIntervalSeconds"],[7565,52,7537,54],[7566,6,7538,8],[7566,10,7538,12],[7566,11,7538,13,"enrollmentCompletionDeadline"],[7566,39,7538,41],[7566,42,7538,44,"enrollmentCompletionDeadline"],[7566,70,7538,72],[7567,4,7539,4],[7568,4,7540,4],[7569,4,7541,4],[7569,11,7541,11,"_fromStartTotpMfaEnrollmentResponse"],[7569,46,7541,46,"_fromStartTotpMfaEnrollmentResponse"],[7569,47,7541,47,"response"],[7569,55,7541,55],[7569,57,7541,57,"auth"],[7569,61,7541,61],[7569,63,7541,63],[7570,6,7542,8],[7570,13,7542,15],[7570,17,7542,19,"TotpSecret"],[7570,27,7542,29],[7570,28,7542,30,"response"],[7570,36,7542,38],[7570,37,7542,39,"totpSessionInfo"],[7570,52,7542,54],[7570,53,7542,55,"sharedSecretKey"],[7570,68,7542,70],[7570,70,7542,72,"response"],[7570,78,7542,80],[7570,79,7542,81,"totpSessionInfo"],[7570,94,7542,96],[7570,95,7542,97,"hashingAlgorithm"],[7570,111,7542,113],[7570,113,7542,115,"response"],[7570,121,7542,123],[7570,122,7542,124,"totpSessionInfo"],[7570,137,7542,139],[7570,138,7542,140,"verificationCodeLength"],[7570,160,7542,162],[7570,162,7542,164,"response"],[7570,170,7542,172],[7570,171,7542,173,"totpSessionInfo"],[7570,186,7542,188],[7570,187,7542,189,"periodSec"],[7570,196,7542,198],[7570,198,7542,200],[7570,202,7542,204,"Date"],[7570,206,7542,208],[7570,207,7542,209,"response"],[7570,215,7542,217],[7570,216,7542,218,"totpSessionInfo"],[7570,231,7542,233],[7570,232,7542,234,"finalizeEnrollmentTime"],[7570,254,7542,256],[7570,255,7542,257],[7570,256,7542,258,"toUTCString"],[7570,267,7542,269],[7570,268,7542,270],[7570,269,7542,271],[7570,271,7542,273,"response"],[7570,279,7542,281],[7570,280,7542,282,"totpSessionInfo"],[7570,295,7542,297],[7570,296,7542,298,"sessionInfo"],[7570,307,7542,309],[7570,309,7542,311,"auth"],[7570,313,7542,315],[7570,314,7542,316],[7571,4,7543,4],[7572,4,7544,4],[7573,4,7545,4,"_makeTotpVerificationInfo"],[7573,29,7545,29,"_makeTotpVerificationInfo"],[7573,30,7545,30,"otp"],[7573,33,7545,33],[7573,35,7545,35],[7574,6,7546,8],[7574,13,7546,15],[7575,8,7546,17,"sessionInfo"],[7575,19,7546,28],[7575,21,7546,30],[7575,25,7546,34],[7575,26,7546,35,"sessionInfo"],[7575,37,7546,46],[7576,8,7546,48,"verificationCode"],[7576,24,7546,64],[7576,26,7546,66,"otp"],[7577,6,7546,70],[7577,7,7546,71],[7578,4,7547,4],[7579,4,7548,4],[7580,0,7549,0],[7581,0,7550,0],[7582,0,7551,0],[7583,0,7552,0],[7584,0,7553,0],[7585,0,7554,0],[7586,0,7555,0],[7587,0,7556,0],[7588,0,7557,0],[7589,4,7558,4,"generateQrCodeUrl"],[7589,21,7558,21,"generateQrCodeUrl"],[7589,22,7558,22,"accountName"],[7589,33,7558,33],[7589,35,7558,35,"issuer"],[7589,41,7558,41],[7589,43,7558,43],[7590,6,7559,8],[7590,10,7559,12,"useDefaults"],[7590,21,7559,23],[7590,24,7559,26],[7590,29,7559,31],[7591,6,7560,8],[7591,10,7560,12,"_isEmptyString"],[7591,24,7560,26],[7591,25,7560,27,"accountName"],[7591,36,7560,38],[7591,37,7560,39],[7591,41,7560,43,"_isEmptyString"],[7591,55,7560,57],[7591,56,7560,58,"issuer"],[7591,62,7560,64],[7591,63,7560,65],[7591,65,7560,67],[7592,8,7561,12,"useDefaults"],[7592,19,7561,23],[7592,22,7561,26],[7592,26,7561,30],[7593,6,7562,8],[7594,6,7563,8],[7594,10,7563,12,"useDefaults"],[7594,21,7563,23],[7594,23,7563,25],[7595,8,7564,12],[7595,12,7564,16,"_isEmptyString"],[7595,26,7564,30],[7595,27,7564,31,"accountName"],[7595,38,7564,42],[7595,39,7564,43],[7595,41,7564,45],[7596,10,7565,16,"accountName"],[7596,21,7565,27],[7596,24,7565,30],[7596,28,7565,34],[7596,29,7565,35,"auth"],[7596,33,7565,39],[7596,34,7565,40,"currentUser"],[7596,45,7565,51],[7596,47,7565,53,"email"],[7596,52,7565,58],[7596,56,7565,62],[7596,69,7565,75],[7597,8,7566,12],[7598,8,7567,12],[7598,12,7567,16,"_isEmptyString"],[7598,26,7567,30],[7598,27,7567,31,"issuer"],[7598,33,7567,37],[7598,34,7567,38],[7598,36,7567,40],[7599,10,7568,16,"issuer"],[7599,16,7568,22],[7599,19,7568,25],[7599,23,7568,29],[7599,24,7568,30,"auth"],[7599,28,7568,34],[7599,29,7568,35,"name"],[7599,33,7568,39],[7600,8,7569,12],[7601,6,7570,8],[7602,6,7571,8],[7602,13,7571,15],[7602,31,7571,33,"issuer"],[7602,37,7571,39],[7602,41,7571,43,"accountName"],[7602,52,7571,54],[7602,63,7571,65],[7602,67,7571,69],[7602,68,7571,70,"secretKey"],[7602,77,7571,79],[7602,88,7571,90,"issuer"],[7602,94,7571,96],[7602,108,7571,110],[7602,112,7571,114],[7602,113,7571,115,"hashingAlgorithm"],[7602,129,7571,131],[7602,140,7571,142],[7602,144,7571,146],[7602,145,7571,147,"codeLength"],[7602,155,7571,157],[7602,157,7571,159],[7603,4,7572,4],[7604,2,7573,0],[7605,2,7574,0],[7606,2,7574,0,"exports"],[7606,9,7574,0],[7606,10,7574,0,"o"],[7606,11,7574,0],[7606,14,7574,0,"TotpSecret"],[7606,24,7574,0],[7607,2,7575,0],[7607,11,7575,9,"_isEmptyString"],[7607,25,7575,23,"_isEmptyString"],[7607,26,7575,24,"input"],[7607,31,7575,29],[7607,33,7575,31],[7608,4,7576,4],[7608,11,7576,11],[7608,18,7576,18,"input"],[7608,23,7576,23],[7608,28,7576,28],[7608,39,7576,39],[7608,43,7576,43,"input"],[7608,48,7576,48],[7608,50,7576,50,"length"],[7608,56,7576,56],[7608,61,7576,61],[7608,62,7576,62],[7609,2,7577,0],[7610,0,7577,1],[7610,3]],"functionMap":{"names":["<global>","_debugErrorMap","_prodErrorMap","_logWarn","_logError","_fail","_createError","_errorWithCustomMessage","_serverAppCurrentUserOperationNotSupportedError","createErrorInternal","_assert","debugFail","debugAssert","_getCurrentUrl","_isHttpOrHttps","_getCurrentScheme","_isOnline","_getUserLanguage","Delay","Delay#constructor","Delay#get","_emulatorUrl","FetchProvider","FetchProvider.initialize","FetchProvider.fetch","FetchProvider.headers","FetchProvider.response","_addTidIfNecessary","_performApiRequest","_performFetchWithErrorHandling$argument_2","_performFetchWithErrorHandling","_performSignInRequest","_getFinalTarget","_parseEnforcementState","NetworkTimeout","NetworkTimeout#clearNetworkTimeout","NetworkTimeout#constructor","Promise$argument_0","setTimeout$argument_0","_makeTaggedError","isEnterprise","RecaptchaConfig","RecaptchaConfig#constructor","RecaptchaConfig#getProviderEnforcementState","RecaptchaConfig#isProviderEnabled","RecaptchaConfig#isAnyProviderEnabled","getRecaptchaConfig","deleteAccount","deleteLinkedAccounts","getAccountInfo","utcTimestampToDateString","getIdToken","getIdTokenResult","secondsStringToMilliseconds","_parseToken","_tokenExpiresIn","_logoutIfInvalidated","isUserInvalidated","ProactiveRefresh","ProactiveRefresh#constructor","ProactiveRefresh#_start","ProactiveRefresh#_stop","ProactiveRefresh#getInterval","ProactiveRefresh#schedule","ProactiveRefresh#iteration","UserMetadata","UserMetadata#constructor","UserMetadata#_initializeTime","UserMetadata#_copy","UserMetadata#toJSON","_reloadWithoutSaving","reload","mergeProviderData","original.filter$argument_0","newData.some$argument_0","extractProviderData","providers.map$argument_0","requestStsToken","revokeToken","StsTokenManager","StsTokenManager#constructor","StsTokenManager#get__isExpired","StsTokenManager#updateFromServerResponse","StsTokenManager#updateFromIdToken","StsTokenManager#getToken","StsTokenManager#clearRefreshToken","StsTokenManager#refresh","StsTokenManager#updateTokensAndExpiration","StsTokenManager.fromJSON","StsTokenManager#toJSON","StsTokenManager#_assign","StsTokenManager#_clone","StsTokenManager#_performRefresh","assertStringOrUndefined","UserImpl","UserImpl#constructor","UserImpl#getIdToken","UserImpl#getIdTokenResult","UserImpl#reload","UserImpl#_assign","user.providerData.map$argument_0","UserImpl#_clone","UserImpl#_onReload","UserImpl#_notifyReloadListener","UserImpl#_startProactiveRefresh","UserImpl#_stopProactiveRefresh","UserImpl#_updateTokensIfNecessary","UserImpl#_delete","UserImpl#toJSON","providerData.map$argument_0","UserImpl#get__refreshToken","UserImpl._fromJSON","UserImpl._fromIdTokenResponse","UserImpl._fromGetAccountInfoResponse","_getInstance","InMemoryPersistence","InMemoryPersistence#constructor","InMemoryPersistence#_isAvailable","InMemoryPersistence#_set","InMemoryPersistence#_get","InMemoryPersistence#_remove","InMemoryPersistence#_addListener","InMemoryPersistence#_removeListener","_persistenceKeyName","PersistenceUserManager","PersistenceUserManager#constructor","PersistenceUserManager#setCurrentUser","PersistenceUserManager#getCurrentUser","getAccountInfo._catch$argument_0","PersistenceUserManager#removeCurrentUser","PersistenceUserManager#savePersistenceForRedirect","PersistenceUserManager#setPersistence","PersistenceUserManager#_delete","PersistenceUserManager.create","persistenceHierarchy.map$argument_0","filter$argument_0","availablePersistences.filter$argument_0","_getBrowserName","_isFirefox","_isSafari","_isChromeIOS","_isIEMobile","_isAndroid","_isBlackBerry","_isWebOS","_isIOS","_isIOS7Or8","_isIE10","_isMobileBrowser","_getClientVersion","AuthMiddlewareQueue","AuthMiddlewareQueue#constructor","AuthMiddlewareQueue#pushCallback","wrappedCallback","<anonymous>","queue.index","AuthMiddlewareQueue#runMiddleware","_getPasswordPolicy","PasswordPolicyImpl","PasswordPolicyImpl#constructor","PasswordPolicyImpl#validatePassword","PasswordPolicyImpl#validatePasswordLengthOptions","PasswordPolicyImpl#validatePasswordCharacterOptions","PasswordPolicyImpl#updatePasswordCharacterOptionsStatuses","AuthImpl","AuthImpl#constructor","AuthImpl#_initializeWithPersistence","queue$argument_0","AuthImpl#_onStorageEvent","AuthImpl#initializeCurrentUserFromIdToken","AuthImpl#initializeCurrentUser","_popupRedirectResolver._overrideRedirectResult$argument_1","AuthImpl#tryRedirectSignIn","AuthImpl#reloadAndSetCurrentUserOrClear","AuthImpl#useDeviceLanguage","AuthImpl#_delete","AuthImpl#updateCurrentUser","AuthImpl#_updateCurrentUser","AuthImpl#signOut","AuthImpl#setPersistence","AuthImpl#_getRecaptchaConfig","AuthImpl#validatePassword","AuthImpl#_getPasswordPolicyInternal","AuthImpl#_updatePasswordPolicy","AuthImpl#_getPersistenceType","AuthImpl#_getPersistence","AuthImpl#_updateErrorMap","AuthImpl#onAuthStateChanged","AuthImpl#beforeAuthStateChanged","AuthImpl#onIdTokenChanged","AuthImpl#authStateReady","onAuthStateChanged$argument_0","AuthImpl#revokeAccessToken","AuthImpl#toJSON","AuthImpl#_setRedirectUser","AuthImpl#getOrInitRedirectPersistenceManager","AuthImpl#_redirectUserForId","AuthImpl#_persistUserIfCurrent","AuthImpl#_notifyListenersIfCurrent","AuthImpl#_key","AuthImpl#_startProactiveRefresh","AuthImpl#_stopProactiveRefresh","AuthImpl#get___currentUser","AuthImpl#notifyAuthListeners","AuthImpl#registerStateListener","promise.then$argument_0","AuthImpl#directlySetCurrentUser","AuthImpl#queue","AuthImpl#get__assertedPersistence","AuthImpl#_logFramework","AuthImpl#_getFrameworks","AuthImpl#_getAdditionalHeaders","AuthImpl#_getAppCheckToken","_castAuth","Subscription","Subscription#constructor","createSubscribe$argument_0","Subscription#get__next","externalJSProvider.loadJS","_loadJS","_recaptchaEnterpriseScriptUrl","MockGreCAPTCHATopLevel","MockGreCAPTCHATopLevel#constructor","MockGreCAPTCHATopLevel#ready","MockGreCAPTCHATopLevel#execute","MockGreCAPTCHATopLevel#render","MockGreCAPTCHA","MockGreCAPTCHA#ready","MockGreCAPTCHA#execute","MockGreCAPTCHA#render","RecaptchaEnterpriseVerifier","RecaptchaEnterpriseVerifier#constructor","RecaptchaEnterpriseVerifier#verify","retrieveSiteKey","getRecaptchaConfig.then$argument_0","getRecaptchaConfig.then._catch$argument_0","retrieveRecaptchaToken","grecaptcha.enterprise.ready$argument_0","grecaptcha.enterprise.execute.then$argument_0","grecaptcha.enterprise.execute.then._catch$argument_0","retrieveSiteKey.then$argument_0","_loadJS.then$argument_0","_loadJS.then._catch$argument_0","retrieveSiteKey.then._catch$argument_0","injectRecaptchaFields","handleRecaptchaFlow","actionMethod._catch$argument_0","_initializeRecaptchaConfig","initializeAuth","_initializeAuthInstance","connectAuthEmulator","extractProtocol","extractHostAndPort","parsePort","emitEmulatorWarning","attachBanner","AuthCredential","AuthCredential#constructor","AuthCredential#toJSON","AuthCredential#_getIdTokenResponse","AuthCredential#_linkToIdToken","AuthCredential#_getReauthenticationResolver","resetPassword","updateEmailPassword","linkEmailPassword","applyActionCode$1","signInWithPassword","sendOobCode","sendEmailVerification$1","sendPasswordResetEmail$1","sendSignInLinkToEmail$1","verifyAndChangeEmail","signInWithEmailLink$1","signInWithEmailLinkForLinking","EmailAuthCredential","EmailAuthCredential#constructor","EmailAuthCredential._fromEmailAndPassword","EmailAuthCredential._fromEmailAndCode","EmailAuthCredential#toJSON","EmailAuthCredential.fromJSON","EmailAuthCredential#_getIdTokenResponse","EmailAuthCredential#_linkToIdToken","EmailAuthCredential#_getReauthenticationResolver","signInWithIdp","OAuthCredential","OAuthCredential#constructor","OAuthCredential._fromParams","OAuthCredential#toJSON","OAuthCredential.fromJSON","OAuthCredential#_getIdTokenResponse","OAuthCredential#_linkToIdToken","OAuthCredential#_getReauthenticationResolver","OAuthCredential#buildRequest","signInWithPhoneNumber$1","linkWithPhoneNumber$1","verifyPhoneNumberForExisting","PhoneAuthCredential","PhoneAuthCredential#constructor","PhoneAuthCredential._fromVerification","PhoneAuthCredential._fromTokenResponse","PhoneAuthCredential#_getIdTokenResponse","PhoneAuthCredential#_linkToIdToken","PhoneAuthCredential#_getReauthenticationResolver","PhoneAuthCredential#_makeVerificationRequest","PhoneAuthCredential#toJSON","PhoneAuthCredential.fromJSON","parseMode","parseDeepLink","ActionCodeURL","ActionCodeURL#constructor","ActionCodeURL.parseLink","parseActionCodeURL","EmailAuthProvider","EmailAuthProvider#constructor","EmailAuthProvider.credential","EmailAuthProvider.credentialWithLink","FederatedAuthProvider","FederatedAuthProvider#constructor","FederatedAuthProvider#setDefaultLanguage","FederatedAuthProvider#setCustomParameters","FederatedAuthProvider#getCustomParameters","BaseOAuthProvider","BaseOAuthProvider#constructor","BaseOAuthProvider#addScope","BaseOAuthProvider#getScopes","OAuthProvider","OAuthProvider.credentialFromJSON","OAuthProvider#credential","OAuthProvider#_credential","OAuthProvider.credentialFromResult","OAuthProvider.credentialFromError","OAuthProvider.oauthCredentialFromTaggedObject","FacebookAuthProvider","FacebookAuthProvider#constructor","FacebookAuthProvider.credential","FacebookAuthProvider.credentialFromResult","FacebookAuthProvider.credentialFromError","FacebookAuthProvider.credentialFromTaggedObject","GoogleAuthProvider","GoogleAuthProvider#constructor","GoogleAuthProvider.credential","GoogleAuthProvider.credentialFromResult","GoogleAuthProvider.credentialFromError","GoogleAuthProvider.credentialFromTaggedObject","GithubAuthProvider","GithubAuthProvider#constructor","GithubAuthProvider.credential","GithubAuthProvider.credentialFromResult","GithubAuthProvider.credentialFromError","GithubAuthProvider.credentialFromTaggedObject","SAMLAuthCredential","SAMLAuthCredential#constructor","SAMLAuthCredential#_getIdTokenResponse","SAMLAuthCredential#_linkToIdToken","SAMLAuthCredential#_getReauthenticationResolver","SAMLAuthCredential#toJSON","SAMLAuthCredential.fromJSON","SAMLAuthCredential._create","SAMLAuthCredential#buildRequest","SAMLAuthProvider","SAMLAuthProvider#constructor","SAMLAuthProvider.credentialFromResult","SAMLAuthProvider.credentialFromError","SAMLAuthProvider.credentialFromJSON","SAMLAuthProvider.samlCredentialFromTaggedObject","TwitterAuthProvider","TwitterAuthProvider#constructor","TwitterAuthProvider.credential","TwitterAuthProvider.credentialFromResult","TwitterAuthProvider.credentialFromError","TwitterAuthProvider.credentialFromTaggedObject","signUp","UserCredentialImpl","UserCredentialImpl#constructor","UserCredentialImpl._fromIdTokenResponse","UserCredentialImpl._forOperation","providerIdForResponse","signInAnonymously","MultiFactorError","MultiFactorError#constructor","MultiFactorError._fromErrorAndOperation","_processCredentialSavingMfaContextIfNecessary","idTokenProvider._catch$argument_0","providerDataAsNames","providerData.map.filter$argument_0","unlink","userInternal.providerData.filter$argument_0","_link","_assertLinkedStatus","_reauthenticate","_signInWithCredential","signInWithCredential","linkWithCredential","reauthenticateWithCredential","signInWithCustomToken$1","signInWithCustomToken","MultiFactorInfoImpl","MultiFactorInfoImpl#constructor","MultiFactorInfoImpl._fromServerResponse","PhoneMultiFactorInfoImpl","PhoneMultiFactorInfoImpl#constructor","PhoneMultiFactorInfoImpl._fromServerResponse","TotpMultiFactorInfoImpl","TotpMultiFactorInfoImpl#constructor","TotpMultiFactorInfoImpl._fromServerResponse","_setActionCodeSettingsOnRequest","recachePasswordPolicy","sendPasswordResetEmail","confirmPasswordReset","resetPassword._catch$argument_0","applyActionCode","checkActionCode","verifyPasswordResetCode","createUserWithEmailAndPassword","signUpResponse._catch$argument_0","signInWithEmailAndPassword","signInWithCredential._catch$argument_0","sendSignInLinkToEmail","setActionCodeSettings","isSignInWithEmailLink","signInWithEmailLink","createAuthUri","fetchSignInMethodsForEmail","sendEmailVerification","verifyBeforeUpdateEmail","updateProfile$1","updateProfile","userInternal.providerData.find$argument_0","updateEmail","updatePassword","updateEmailOrPassword","_fromIdTokenResponse","GenericAdditionalUserInfo","GenericAdditionalUserInfo#constructor","FederatedAdditionalUserInfoWithUsername","FederatedAdditionalUserInfoWithUsername#constructor","FacebookAdditionalUserInfo","FacebookAdditionalUserInfo#constructor","GithubAdditionalUserInfo","GithubAdditionalUserInfo#constructor","GoogleAdditionalUserInfo","GoogleAdditionalUserInfo#constructor","TwitterAdditionalUserInfo","TwitterAdditionalUserInfo#constructor","getAdditionalUserInfo","setPersistence","initializeRecaptchaConfig","validatePassword","onIdTokenChanged","beforeAuthStateChanged","onAuthStateChanged","useDeviceLanguage","updateCurrentUser","signOut","revokeAccessToken","deleteUser","MultiFactorSessionImpl","MultiFactorSessionImpl#constructor","MultiFactorSessionImpl._fromIdtoken","MultiFactorSessionImpl._fromMfaPendingCredential","MultiFactorSessionImpl#toJSON","MultiFactorSessionImpl.fromJSON","MultiFactorResolverImpl","MultiFactorResolverImpl#constructor","MultiFactorResolverImpl._fromError","map$argument_0","MultiFactorResolverImpl$argument_2","MultiFactorResolverImpl#resolveSignIn","getMultiFactorResolver","startEnrollTotpMfa","finalizeEnrollTotpMfa","withdrawMfa","MultiFactorUserImpl","MultiFactorUserImpl#constructor","user._onReload$argument_0","userInfo.mfaInfo.map$argument_0","MultiFactorUserImpl._fromUser","MultiFactorUserImpl#getSession","MultiFactorUserImpl#enroll","MultiFactorUserImpl#unenroll","enrolledFactors.filter$argument_0","multiFactor","AuthInterop","AuthInterop#constructor","AuthInterop#getUid","AuthInterop#getToken","AuthInterop#addAuthTokenListener","auth.onIdTokenChanged$argument_0","AuthInterop#removeAuthTokenListener","AuthInterop#assertAuthConfigured","AuthInterop#updateProactiveRefresh","getVersionForPlatform","registerAuth","Component$argument_1","Component.setInstantiationMode.setInstanceCreatedCallback$argument_0","getAuth","fail","FailClass","FailClass#constructor","PhoneMultiFactorGenerator","PhoneMultiFactorGenerator.assertion","AuthImpl.prototype.setPersistence","finalizeSignInTotpMfa","MultiFactorAssertionImpl","MultiFactorAssertionImpl#constructor","MultiFactorAssertionImpl#_process","TotpMultiFactorGenerator","TotpMultiFactorGenerator.assertionForEnrollment","TotpMultiFactorGenerator.assertionForSignIn","TotpMultiFactorGenerator.generateSecret","TotpMultiFactorAssertionImpl","TotpMultiFactorAssertionImpl#constructor","TotpMultiFactorAssertionImpl._fromSecret","TotpMultiFactorAssertionImpl._fromEnrollmentId","TotpMultiFactorAssertionImpl#_finalizeEnroll","TotpMultiFactorAssertionImpl#_finalizeSignIn","TotpSecret","TotpSecret#constructor","TotpSecret._fromStartTotpMfaEnrollmentResponse","TotpSecret#_makeTotpVerificationInfo","TotpSecret#generateQrCodeUrl","_isEmptyString"],"mappings":"AAA;ACwH;CDgK;AEC;CFS;AG0J;CHI;AIC;CJI;AKkB;CLE;AMC;CNE;AOC;CPS;AQC;CRE;ASC;CTU;AUC;CVI;AWO;CXS;AYQ;CZI;AakB;CbE;AcC;CdE;AeC;CfE;AgBqB;ChBe;AiBC;CjBa;AkBuB;ICC;KDM;IEC;KFU;ClBC;AqBkB;CrBO;AsBkB;ICC;KDQ;IEC;KFc;IGC;KHc;IIC;KJc;CtBC;A2ByH;C3BQ;A4BC;gECC;KDsC;C5BC;A8BC;C9BoD;A+BC;C/BQ;AgCC;ChCmB;AiCC;CjCW;AkCC;ICC;KDE;IEC;mCCM;oCCC;aDE;SDC;KFC;ClCC;AuCC;CvCc;AwCkB;CxCG;AyCC;ICC;KDe;IEO;KFY;IGO;KHI;IIO;KJG;CzCC;A8CkB;C9CE;A+CkB;C/CE;AgDC;ChDE;AiDC;CjDE;AkDkB;ClDiB;AmD8B;CnDE;AoDa;CpDgB;AqDC;CrDE;AsDC;CtDoB;AuDI;CvDM;AwDkB;CxDe;AyDC;CzDG;A0DkB;ICC;KDS;IEC;KFM;IGC;KHQ;IIC;KJa;IKC;kCzBM;SyBE;KLC;IMC;KNa;C1DC;AiEkB;ICC;KDI;IEC;KFG;IGC;KHI;IIC;KJK;CjEC;AsEkB;CtEgC;AuEQ;CvEQ;AwEC;oCCC,mBC,kCD,CD;CxEE;A2EC;yBCC;KDS;C3EC;A6EkB;oEhDC;KgDmB;C7EO;A8EC;C9EE;A+EwB;ICC;KDI;IEC;KFG;IGC;KHQ;IIC;KJI;IKC;KLU;IMC;KNE;IOC;KPG;IQC;KRI;ISC;KTsB;IUC;KVM;IWC;KXI;IYC;KZE;IaC;KbE;C/EC;A6FkB;C7FE;A8FC;ICC;KDmB;IEC;KFS;IGC;KHE;IIC;KJE;IKC;kDCY,6BD;KLG;IOC;KPQ;IQC;KRQ;ISC;KTQ;IUC;KVE;IWC;KXE;IYC;KZc;IaC;KbU;IcC;gDCU,6BD;KdY;IgBC;KhBE;IiBC;iDFsC,6BE;KjBM;IkBM;KlBa;ImBM;KnBgC;C9FC;AkHmB;ClHU;AmHkB;ICC;KDG;IEC;KFE;IGC;KHE;IIC;KJG;IKC;KLE;IMC;KNG;IOC;KPG;CnHC;A2HyB;C3HE;A4HC;ICC;KDS;IEC;KFE;IGC;sFCM,eD;KHO;IKC;KLE;IMC;KNE;IOC;KPU;IQC;KRE;ISC;kFCK;SDK,WE,0BF;iCLmB,eK;gEGoB,4BH;mDCc;SDO;KTE;C5HC;AyIqB;CzIiD;A0IC;C1IE;A2IC;C3IM;A4IC;C5IE;A6IC;C7IE;A8IC;C9IE;A+IC;C/IE;AgJC;ChJE;AiJC;CjJG;AkJC;ClJG;AmJC;CnJE;AoJC;CpJQ;AqJqB;CrJoB;AsJkB;ICC;KDG;IEC;gCCG,sBpH;SoHW,CD;eEK;gCCG,uBD;SFC;KFC;IMC;KNgC;CtJC;A6JyB;C7JE;A8JyB;ICC;KDoC;IEC;KFgB;IGO;KHS;IIO;KJmB;IKY;KLa;C9JC;AoKkB;ICC;wDhIuC,+DgI;KDC;IEC;iDCM;SD0B;KFE;III;KJqB;IKC;KLU;IMC;mCrIM;+BCC,2ED;iBqIC;8ECwC,uBD;KNoB;IQC;KR4B;ISC;KTa;IUC;KVE;IWC;KXE;IYC;KZa;IaC;0BVU;SUG;KbC;IcC;Kda;IeC;0BZI;SYE;KfC;IgBC;KhBO;IiBC;KjBa;IkBC;KlBO;ImBC;KnBS;IoBC;KpBE;IqBC;KrBE;IsBC;KtBE;IuBC;KvBE;IwBC;KxBE;IyBC;KzBE;I0BC;2BzJC;4D0JK;iB1JG;SyJE;K1BC;I4BI;K5Be;I6BC;K7BO;I8BC;K9BK;I+BC;K/BU;IgCC;6B7BI,e6B;KhCS;IiCC;8B9BE,6C8B;KjCE;IkCE;KlCI;ImCC;KnCE;IoCC;KpCK;IqCC;KrCK;IsCE;KtCE;IuCC;KvCU;IwCC;mBlDE,SkD;qBCY;SDK;mBlDG;akDG;mBlDI;akDG;KxCE;I0CM;K1Cc;I2CC;K3CK;I4CC;K5CG;I6CC;K7CS;I8CC;K9CE;I+CC;K/CuB;IgDC;KhDe;CpKC;AqNO;CrNE;AsNE;ICC;2CCG,sCD;KDC;IGC;KHG;CtNC;I0NmB;K1NE;A2NK;C3NE;A4NC;C5NE;A6NkB;ICC;KDE;IEC;KFE;IGC;KHI;IIC;KJI;C7NC;AkOC;ICC;KDE;IEC;KFI;IGC;KHI;ClOC;AsOK;ICM;KDM;IEM;QCC;+BpMU;0BqMK;iBrMc;2BsMC;iBtME;aoMC;SDC;QIC;4CCG;8BCG;qBDE;+BEC;qBFE;iBDC;SJK;2BnMM;sB2ME;8BCc;qBDE;+BEC;qBFE;a3ME;uB8MC;a9ME;SmMC;KFC;CtOC;AoPC;CpPsD;AqPC;6DCS;aDS;0ECQ;aDoB;CrPc;AuPC;CvPiB;AwP2C;CxPc;AyPC;CzPU;A0PwB;C1PuC;A2PC;C3PG;A4PC;C5PgB;A6PC;C7PS;A8PC;ICC;KDiB;C9Pc;AgQ0B;ICE;KDmB;IEM;KFE;IGE;KHE;IIE;KJE;IKE;KLE;ChQC;AsQkB;CtQE;AuQC;CvQE;AwQG;CxQE;AyQC;CzQE;A0QkB;C1QE;A2QC;C3QE;A4QC;C5QE;A6QC;C7QE;A8QC;C9QE;A+QC;C/QE;AgRkB;ChRE;AiRC;CjRE;AkR4B;ICE;KDW;IEE;KFE;IGE;KHE;IIE;KJO;IKS;KLW;IME;KNkB;IOE;KPoB;IQE;KRE;ClRC;A2RkB;C3RE;A4R2B;ICC;KDG;IEE;KF2B;IGE;KHU;IIU;KJa;IKE;KLG;IME;KNI;IOE;KPI;IQC;KR0B;C5RC;AqSkB;CrSE;AsSC;CtSM;AuSI;CvSM;AwSuB;ICC;KDG;IEE;KFE;IGE;KHE;IIE;KJE;IKE;KLK;IME;KNE;IOE;KPS;IQE;KRiB;ISE;KTiB;CxSC;AkTuB;ClTiB;AmTM;CnTY;AoTO;ICO;KDa;IEU;KFQ;CpTC;AuTO;CvTE;AwTuB;ICC;KDK;IEmB;KFE;IGuB;KHI;CxTC;A4TqC;ICM;KDM;IEM;KFE;IGW;KHG;III;KJE;C5TC;AiUwB;ICC;KDI;IEM;KFM;IGI;KHE;CjUC;AqUyC;ICK;KDI;IEsB;KFE;IGE;KHQ;IIM;KJE;IKO;KLE;IMC;KNyB;CrUC;A4UyD;ICC;KDE;IEa;KFM;IGM;KHE;IIO;KJE;IKC;KLa;C5UC;AkV+D;ICC;KDG;IEc;KFO;IGM;KHE;IIO;KJE;IKC;KLe;ClVC;AwVgE;ICC;KDE;IEM;KFM;IGM;KHE;IIO;KJE;IKC;KLa;CxVC;A8V0B;ICE;KDG;IEE;KFG;IGE;KHI;IIE;KJI;IKE;KLM;IMU;KNU;IOM;KPE;IQC;KRM;C9VC;AuWwB;ICK;KDG;IEiB;KFE;IGO;KHE;IIK;KJI;IKC;KLc;CvWC;A6WyD;ICC;KDE;IEO;KFO;IGM;KHE;IIO;KJE;IKC;KLc;C7WC;AmXsB;CnXE;AoXkB;ICC;KDK;IEC;KFU;IGC;KHS;CpXC;AwXC;CxXQ;AyXgC;CzXoB;A0XkB;ICC;KDY;IEC;KFE;C1XC;A6XC;iCCI;KDK;C7XC;A+XqB;alRE,8BkR;gBCC,YD;C/XC;AiY0B;iECQ,sCD;CjYM;AmYC;CnYG;AoYC;CpYO;AqYkB;CrYsB;AsYkB;CtYW;AuYe;CvYE;AwYY;CxYI;AyYiB;CzYE;A0YkB;C1YE;A2YqC;C3YY;A4YkB;ICC;KDK;IEC;KFQ;C5YC;A+YC;ICC;KDG;IEC;KFE;C/YC;AkZC;ICC;KDE;IEC;KFE;ClZC;AqZkB;CrZqB;AsZ+B;CtZK;AuZoC;CvZW;AwZU;eCK;KDM;CxZE;A0ZS;C1ZE;A2ZW;C3ZwC;A4ZW;C5ZI;A6ZqB;gDCY;KDK;C7ZI;A+ZwB;+GCI;KDK;C/ZC;AiawD;ICO;KDK;CjaG;AmaS;CnaG;Aoa0C;CpaU;AqakB;CraE;AsasC;CtaW;Aua+B;Cvac;AwamC;CxaiB;AyakB;CzaE;A0a0B;4DCgB,6CD;C1aM;A4ayB;C5aM;A6ac;C7aE;A8aC;C9ae;A+asB;C/auC;AgbC;ICC;KDI;ChbC;AkbC;ICC;KDG;ClbC;AobC;ICC;KDE;CpbC;AsbC;ICC;KDE;CtbC;AwbC;ICC;KDE;CxbC;A0bC;ICC;KDE;C1bC;A4bQ;C5bY;A6b2C;C7bE;A8b4B;C9bE;A+bwB;C/bG;AgciB;ChcE;AicW;CjcE;AkcgB;ClcE;AmcQ;CncE;AocsB;CpcE;AqcY;CrcE;AscS;CtcG;Auca;CvcE;AwckB;ICC;KDI;IEC;KFE;IGC;KHE;IIC;KJS;IKC;KLU;CxcC;A8ckB;ICC;KDI;IEE;yDCG,uED;2DEG;SFuB;KFC;IKC;KLG;C9cC;AodW;CpdM;AqdkB;CrdE;AsdC;CtdE;AudC;CvdE;AwdE;ICC;uBCG;4DCE,4ED;SDE;KDC;IIC;KJE;IKC;KLE;IMC;KNW;IOC;+DCS,oCD;KPW;CxdC;AieY;CjeM;AkeqB;ICC;KDG;IEC;KFG;IGC;KHQ;IIC;uDCK;SDE;KJG;IMC;KNS;IOC;KPE;IQC;KRO;CleC;A2ekB;C3ee;A4eE;uECC;KDkB;oCEU;KFG;yFCC;gBnVE,6BmV;KDC;C5eI;A+esB;C/eW;AgfW;ChfE;AifK;ICC;KDE;CjfC;AmfmB;ICC;KDE;CnfC;oCqfI,erf;AsfkB;CtfE;AufE;ICC;KDE;IEC;KFS;CvfC;A0fO;ICW;KDE;IEU;KFE;IGU;KHQ;C1fC;A8fK;ICC;KDK;IEE;KFE;IGE;KHE;IIE;KJO;IKE;KLQ;C9fC;AogBQ;ICE;KDQ;IEE;KFE;IGE;KHE;IIW;KJc;CpgBC;AygBE;CzgBE"}},"type":"js/module"}]}