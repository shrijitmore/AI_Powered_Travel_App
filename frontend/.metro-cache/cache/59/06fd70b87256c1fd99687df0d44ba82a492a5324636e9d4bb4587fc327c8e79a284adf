{"dependencies":[{"name":"./namespace","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":75},"end":{"line":5,"column":38,"index":97}}],"key":"u0P7tC+K1OWBPm2ZPzGRIU5NEKE=","exportNames":["*"]}},{"name":"./field","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":209},"end":{"line":8,"column":32,"index":227}}],"key":"NvI2xXoYDS7eVNBPYDi7RsbVioc=","exportNames":["*"]}},{"name":"./enum","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":14,"index":243},"end":{"line":9,"column":31,"index":260}}],"key":"gyum9HaiytxYUYAerYZvNHG09ko=","exportNames":["*"]}},{"name":"./oneof","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":14,"index":276},"end":{"line":10,"column":32,"index":294}}],"key":"6NmAiHUhkqvb6p1LAZJI/y3pbuA=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":14,"index":310},"end":{"line":11,"column":31,"index":327}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = Root;\n\n  // extends Namespace\n  var Namespace = require(_dependencyMap[0], \"./namespace\");\n  ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n  var Field = require(_dependencyMap[1], \"./field\"),\n    Enum = require(_dependencyMap[2], \"./enum\"),\n    OneOf = require(_dependencyMap[3], \"./oneof\"),\n    util = require(_dependencyMap[4], \"./util\");\n  var Type,\n    // cyclic\n    parse,\n    // might be excluded\n    common; // \"\n\n  /**\n   * Constructs a new root namespace instance.\n   * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n   * @extends NamespaceBase\n   * @constructor\n   * @param {Object.<string,*>} [options] Top level options\n   */\n  function Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n\n    /**\n     * Edition, defaults to proto2 if unspecified.\n     * @type {string}\n     * @private\n     */\n    this._edition = \"proto2\";\n\n    /**\n     * Global lookup cache of fully qualified names.\n     * @type {Object.<string,ReflectionObject>}\n     * @private\n     */\n    this._fullyQualifiedObjects = {};\n  }\n\n  /**\n   * Loads a namespace descriptor into a root namespace.\n   * @param {INamespace} json Namespace descriptor\n   * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n   * @returns {Root} Root namespace\n   */\n  Root.fromJSON = function fromJSON(json, root) {\n    if (!root) root = new Root();\n    if (json.options) root.setOptions(json.options);\n    return root.addJSON(json.nested).resolveAll();\n  };\n\n  /**\n   * Resolves the path of an imported file, relative to the importing origin.\n   * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n   * @function\n   * @param {string} origin The file name of the importing file\n   * @param {string} target The file name being imported\n   * @returns {string|null} Resolved path to `target` or `null` to skip the file\n   */\n  Root.prototype.resolvePath = util.path.resolve;\n\n  /**\n   * Fetch content from file path or url\n   * This method exists so you can override it with your own logic.\n   * @function\n   * @param {string} path File path or url\n   * @param {FetchCallback} callback Callback function\n   * @returns {undefined}\n   */\n  Root.prototype.fetch = util.fetch;\n\n  // A symbol-like function to safely signal synchronous loading\n  /* istanbul ignore next */\n  function SYNC() {} // eslint-disable-line no-empty-function\n\n  /**\n   * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n   * @param {string|string[]} filename Names of one or multiple files to load\n   * @param {IParseOptions} options Parse options\n   * @param {LoadCallback} callback Callback function\n   * @returns {undefined}\n   */\n  Root.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = undefined;\n    }\n    var self = this;\n    if (!callback) {\n      return util.asPromise(load, self, filename, options);\n    }\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n      /* istanbul ignore if */\n      if (!callback) {\n        return;\n      }\n      if (sync) {\n        throw err;\n      }\n      if (root) {\n        root.resolveAll();\n      }\n      var cb = callback;\n      callback = null;\n      cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n      var idx = filename.lastIndexOf(\"google/protobuf/\");\n      if (idx > -1) {\n        var altname = filename.substring(idx);\n        if (altname in common) return altname;\n      }\n      return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n      try {\n        if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n        if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n          parse.filename = filename;\n          var parsed = parse(source, self, options),\n            resolved,\n            i = 0;\n          if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n          if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n        }\n      } catch (err) {\n        finish(err);\n      }\n      if (!sync && !queued) {\n        finish(null, self); // only once anyway\n      }\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n      filename = getBundledFileName(filename) || filename;\n\n      // Skip if already loaded / attempted\n      if (self.files.indexOf(filename) > -1) {\n        return;\n      }\n      self.files.push(filename);\n\n      // Shortcut bundled definitions\n      if (filename in common) {\n        if (sync) {\n          process(filename, common[filename]);\n        } else {\n          ++queued;\n          setTimeout(function () {\n            --queued;\n            process(filename, common[filename]);\n          });\n        }\n        return;\n      }\n\n      // Otherwise fetch from disk or network\n      if (sync) {\n        var source;\n        try {\n          source = util.fs.readFileSync(filename).toString(\"utf8\");\n        } catch (err) {\n          if (!weak) finish(err);\n          return;\n        }\n        process(filename, source);\n      } else {\n        ++queued;\n        self.fetch(filename, function (err, source) {\n          --queued;\n          /* istanbul ignore if */\n          if (!callback) {\n            return; // terminated meanwhile\n          }\n          if (err) {\n            /* istanbul ignore else */\n            if (!weak) finish(err);else if (!queued)\n              // can't be covered reliably\n              finish(null, self);\n            return;\n          }\n          process(filename, source);\n        });\n      }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename)) {\n      filename = [filename];\n    }\n    for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n    if (sync) {\n      self.resolveAll();\n      return self;\n    }\n    if (!queued) {\n      finish(null, self);\n    }\n    return self;\n  };\n  // function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n  /**\n   * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n   * @function Root#load\n   * @param {string|string[]} filename Names of one or multiple files to load\n   * @param {LoadCallback} callback Callback function\n   * @returns {undefined}\n   * @variation 2\n   */\n  // function load(filename:string, callback:LoadCallback):undefined\n\n  /**\n   * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n   * @function Root#load\n   * @param {string|string[]} filename Names of one or multiple files to load\n   * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n   * @returns {Promise<Root>} Promise\n   * @variation 3\n   */\n  // function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n  /**\n   * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n   * @function Root#loadSync\n   * @param {string|string[]} filename Names of one or multiple files to load\n   * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n   * @returns {Root} Root namespace\n   * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n   */\n  Root.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode) throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n  };\n\n  /**\n   * @override\n   */\n  Root.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n      return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n    }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n  };\n\n  // only uppercased (and thus conflict-free) children are exposed, see below\n  var exposeRe = /^[A-Z]/;\n\n  /**\n   * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n   * @param {Root} root Root instance\n   * @param {Field} field Declaring extension field witin the declaring type\n   * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n   * @inner\n   * @ignore\n   */\n  function tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n      var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n      //do not allow to extend same field twice to prevent the error\n      if (extendedType.get(sisterField.name)) {\n        return true;\n      }\n      sisterField.declaringField = field;\n      field.extensionField = sisterField;\n      extendedType.add(sisterField);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Called when any object is added to this root or its sub-namespaces.\n   * @param {ReflectionObject} object Object added\n   * @returns {undefined}\n   * @private\n   */\n  Root.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n      if (/* an extension field (implies not part of a oneof) */object.extend !== undefined && /* not already handled */!object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n    } else if (object instanceof Enum) {\n      if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */{\n        if (object instanceof Type)\n          // Try to handle any deferred extensions\n          for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n        for (var j = 0; j < /* initializes */object.nestedArray.length; ++j)\n        // recurse into the namespace\n        this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n      }\n    if (object instanceof Type || object instanceof Enum || object instanceof Field) {\n      // Only store types and enums for quick lookup during resolve.\n      this._fullyQualifiedObjects[object.fullName] = object;\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n  };\n\n  /**\n   * Called when any object is removed from this root or its sub-namespaces.\n   * @param {ReflectionObject} object Object removed\n   * @returns {undefined}\n   * @private\n   */\n  Root.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n      if (/* an extension field */object.extend !== undefined) {\n        if (/* already handled */object.extensionField) {\n          // remove its sister field\n          object.extensionField.parent.remove(object.extensionField);\n          object.extensionField = null;\n        } else {\n          // cancel the extension\n          var index = this.deferred.indexOf(object);\n          /* istanbul ignore else */\n          if (index > -1) this.deferred.splice(index, 1);\n        }\n      }\n    } else if (object instanceof Enum) {\n      if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n    } else if (object instanceof Namespace) {\n      for (var i = 0; i < /* initializes */object.nestedArray.length; ++i)\n      // recurse into the namespace\n      this._handleRemove(object._nestedArray[i]);\n      if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n    }\n    delete this._fullyQualifiedObjects[object.fullName];\n  };\n\n  // Sets up cyclic dependencies (called in index-light)\n  Root._configure = function (Type_, parse_, common_) {\n    Type = Type_;\n    parse = parse_;\n    common = common_;\n  };\n});","lineCount":367,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"Root"],[4,23,2,21],[6,2,4,0],[7,2,5,0],[7,6,5,4,"Namespace"],[7,15,5,13],[7,18,5,16,"require"],[7,25,5,23],[7,26,5,23,"_dependencyMap"],[7,40,5,23],[7,58,5,37],[7,59,5,38],[8,2,6,0],[8,3,6,1],[8,4,6,2,"Root"],[8,8,6,6],[8,9,6,7,"prototype"],[8,18,6,16],[8,21,6,19,"Object"],[8,27,6,25],[8,28,6,26,"create"],[8,34,6,32],[8,35,6,33,"Namespace"],[8,44,6,42],[8,45,6,43,"prototype"],[8,54,6,52],[8,55,6,53],[8,57,6,55,"constructor"],[8,68,6,66],[8,71,6,69,"Root"],[8,75,6,73],[8,77,6,75,"className"],[8,86,6,84],[8,89,6,87],[8,95,6,93],[9,2,8,0],[9,6,8,4,"Field"],[9,11,8,9],[9,14,8,14,"require"],[9,21,8,21],[9,22,8,21,"_dependencyMap"],[9,36,8,21],[9,50,8,31],[9,51,8,32],[10,4,9,4,"Enum"],[10,8,9,8],[10,11,9,14,"require"],[10,18,9,21],[10,19,9,21,"_dependencyMap"],[10,33,9,21],[10,46,9,30],[10,47,9,31],[11,4,10,4,"OneOf"],[11,9,10,9],[11,12,10,14,"require"],[11,19,10,21],[11,20,10,21,"_dependencyMap"],[11,34,10,21],[11,48,10,31],[11,49,10,32],[12,4,11,4,"util"],[12,8,11,8],[12,11,11,14,"require"],[12,18,11,21],[12,19,11,21,"_dependencyMap"],[12,33,11,21],[12,46,11,30],[12,47,11,31],[13,2,13,0],[13,6,13,4,"Type"],[13,10,13,8],[14,4,13,12],[15,4,14,4,"parse"],[15,9,14,9],[16,4,14,12],[17,4,15,4,"common"],[17,10,15,10],[17,11,15,11],[17,12,15,12],[19,2,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,2,24,0],[26,11,24,9,"Root"],[26,15,24,13,"Root"],[26,16,24,14,"options"],[26,23,24,21],[26,25,24,23],[27,4,25,4,"Namespace"],[27,13,25,13],[27,14,25,14,"call"],[27,18,25,18],[27,19,25,19],[27,23,25,23],[27,25,25,25],[27,27,25,27],[27,29,25,29,"options"],[27,36,25,36],[27,37,25,37],[29,4,27,4],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,4,31,4],[33,8,31,8],[33,9,31,9,"deferred"],[33,17,31,17],[33,20,31,20],[33,22,31,22],[35,4,33,4],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,4,37,4],[39,8,37,8],[39,9,37,9,"files"],[39,14,37,14],[39,17,37,17],[39,19,37,19],[41,4,39,4],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,0,43,0],[46,4,44,4],[46,8,44,8],[46,9,44,9,"_edition"],[46,17,44,17],[46,20,44,20],[46,28,44,28],[48,4,46,4],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,4,51,4],[53,8,51,8],[53,9,51,9,"_fullyQualifiedObjects"],[53,31,51,31],[53,34,51,34],[53,35,51,35],[53,36,51,36],[54,2,52,0],[56,2,54,0],[57,0,55,0],[58,0,56,0],[59,0,57,0],[60,0,58,0],[61,0,59,0],[62,2,60,0,"Root"],[62,6,60,4],[62,7,60,5,"fromJSON"],[62,15,60,13],[62,18,60,16],[62,27,60,25,"fromJSON"],[62,35,60,33,"fromJSON"],[62,36,60,34,"json"],[62,40,60,38],[62,42,60,40,"root"],[62,46,60,44],[62,48,60,46],[63,4,61,4],[63,8,61,8],[63,9,61,9,"root"],[63,13,61,13],[63,15,62,8,"root"],[63,19,62,12],[63,22,62,15],[63,26,62,19,"Root"],[63,30,62,23],[63,31,62,24],[63,32,62,25],[64,4,63,4],[64,8,63,8,"json"],[64,12,63,12],[64,13,63,13,"options"],[64,20,63,20],[64,22,64,8,"root"],[64,26,64,12],[64,27,64,13,"setOptions"],[64,37,64,23],[64,38,64,24,"json"],[64,42,64,28],[64,43,64,29,"options"],[64,50,64,36],[64,51,64,37],[65,4,65,4],[65,11,65,11,"root"],[65,15,65,15],[65,16,65,16,"addJSON"],[65,23,65,23],[65,24,65,24,"json"],[65,28,65,28],[65,29,65,29,"nested"],[65,35,65,35],[65,36,65,36],[65,37,65,37,"resolveAll"],[65,47,65,47],[65,48,65,48],[65,49,65,49],[66,2,66,0],[66,3,66,1],[68,2,68,0],[69,0,69,0],[70,0,70,0],[71,0,71,0],[72,0,72,0],[73,0,73,0],[74,0,74,0],[75,0,75,0],[76,2,76,0,"Root"],[76,6,76,4],[76,7,76,5,"prototype"],[76,16,76,14],[76,17,76,15,"resolvePath"],[76,28,76,26],[76,31,76,29,"util"],[76,35,76,33],[76,36,76,34,"path"],[76,40,76,38],[76,41,76,39,"resolve"],[76,48,76,46],[78,2,78,0],[79,0,79,0],[80,0,80,0],[81,0,81,0],[82,0,82,0],[83,0,83,0],[84,0,84,0],[85,0,85,0],[86,2,86,0,"Root"],[86,6,86,4],[86,7,86,5,"prototype"],[86,16,86,14],[86,17,86,15,"fetch"],[86,22,86,20],[86,25,86,23,"util"],[86,29,86,27],[86,30,86,28,"fetch"],[86,35,86,33],[88,2,88,0],[89,2,89,0],[90,2,90,0],[90,11,90,9,"SYNC"],[90,15,90,13,"SYNC"],[90,16,90,13],[90,18,90,16],[90,19,90,17],[90,20,90,18],[90,21,90,19],[92,2,92,0],[93,0,93,0],[94,0,94,0],[95,0,95,0],[96,0,96,0],[97,0,97,0],[98,0,98,0],[99,2,99,0,"Root"],[99,6,99,4],[99,7,99,5,"prototype"],[99,16,99,14],[99,17,99,15,"load"],[99,21,99,19],[99,24,99,22],[99,33,99,31,"load"],[99,37,99,35,"load"],[99,38,99,36,"filename"],[99,46,99,44],[99,48,99,46,"options"],[99,55,99,53],[99,57,99,55,"callback"],[99,65,99,63],[99,67,99,65],[100,4,100,4],[100,8,100,8],[100,15,100,15,"options"],[100,22,100,22],[100,27,100,27],[100,37,100,37],[100,39,100,39],[101,6,101,8,"callback"],[101,14,101,16],[101,17,101,19,"options"],[101,24,101,26],[102,6,102,8,"options"],[102,13,102,15],[102,16,102,18,"undefined"],[102,25,102,27],[103,4,103,4],[104,4,104,4],[104,8,104,8,"self"],[104,12,104,12],[104,15,104,15],[104,19,104,19],[105,4,105,4],[105,8,105,8],[105,9,105,9,"callback"],[105,17,105,17],[105,19,105,19],[106,6,106,8],[106,13,106,15,"util"],[106,17,106,19],[106,18,106,20,"asPromise"],[106,27,106,29],[106,28,106,30,"load"],[106,32,106,34],[106,34,106,36,"self"],[106,38,106,40],[106,40,106,42,"filename"],[106,48,106,50],[106,50,106,52,"options"],[106,57,106,59],[106,58,106,60],[107,4,107,4],[108,4,109,4],[108,8,109,8,"sync"],[108,12,109,12],[108,15,109,15,"callback"],[108,23,109,23],[108,28,109,28,"SYNC"],[108,32,109,32],[108,33,109,33],[108,34,109,34],[110,4,111,4],[111,4,112,4],[111,13,112,13,"finish"],[111,19,112,19,"finish"],[111,20,112,20,"err"],[111,23,112,23],[111,25,112,25,"root"],[111,29,112,29],[111,31,112,31],[112,6,113,8],[113,6,114,8],[113,10,114,12],[113,11,114,13,"callback"],[113,19,114,21],[113,21,114,23],[114,8,115,12],[115,6,116,8],[116,6,117,8],[116,10,117,12,"sync"],[116,14,117,16],[116,16,117,18],[117,8,118,12],[117,14,118,18,"err"],[117,17,118,21],[118,6,119,8],[119,6,120,8],[119,10,120,12,"root"],[119,14,120,16],[119,16,120,18],[120,8,121,12,"root"],[120,12,121,16],[120,13,121,17,"resolveAll"],[120,23,121,27],[120,24,121,28],[120,25,121,29],[121,6,122,8],[122,6,123,8],[122,10,123,12,"cb"],[122,12,123,14],[122,15,123,17,"callback"],[122,23,123,25],[123,6,124,8,"callback"],[123,14,124,16],[123,17,124,19],[123,21,124,23],[124,6,125,8,"cb"],[124,8,125,10],[124,9,125,11,"err"],[124,12,125,14],[124,14,125,16,"root"],[124,18,125,20],[124,19,125,21],[125,4,126,4],[127,4,128,4],[128,4,129,4],[128,13,129,13,"getBundledFileName"],[128,31,129,31,"getBundledFileName"],[128,32,129,32,"filename"],[128,40,129,40],[128,42,129,42],[129,6,130,8],[129,10,130,12,"idx"],[129,13,130,15],[129,16,130,18,"filename"],[129,24,130,26],[129,25,130,27,"lastIndexOf"],[129,36,130,38],[129,37,130,39],[129,55,130,57],[129,56,130,58],[130,6,131,8],[130,10,131,12,"idx"],[130,13,131,15],[130,16,131,18],[130,17,131,19],[130,18,131,20],[130,20,131,22],[131,8,132,12],[131,12,132,16,"altname"],[131,19,132,23],[131,22,132,26,"filename"],[131,30,132,34],[131,31,132,35,"substring"],[131,40,132,44],[131,41,132,45,"idx"],[131,44,132,48],[131,45,132,49],[132,8,133,12],[132,12,133,16,"altname"],[132,19,133,23],[132,23,133,27,"common"],[132,29,133,33],[132,31,133,35],[132,38,133,42,"altname"],[132,45,133,49],[133,6,134,8],[134,6,135,8],[134,13,135,15],[134,17,135,19],[135,4,136,4],[137,4,138,4],[138,4,139,4],[138,13,139,13,"process"],[138,20,139,20,"process"],[138,21,139,21,"filename"],[138,29,139,29],[138,31,139,31,"source"],[138,37,139,37],[138,39,139,39],[139,6,140,8],[139,10,140,12],[140,8,141,12],[140,12,141,16,"util"],[140,16,141,20],[140,17,141,21,"isString"],[140,25,141,29],[140,26,141,30,"source"],[140,32,141,36],[140,33,141,37],[140,37,141,41,"source"],[140,43,141,47],[140,44,141,48,"charAt"],[140,50,141,54],[140,51,141,55],[140,52,141,56],[140,53,141,57],[140,58,141,62],[140,61,141,65],[140,63,142,16,"source"],[140,69,142,22],[140,72,142,25,"JSON"],[140,76,142,29],[140,77,142,30,"parse"],[140,82,142,35],[140,83,142,36,"source"],[140,89,142,42],[140,90,142,43],[141,8,143,12],[141,12,143,16],[141,13,143,17,"util"],[141,17,143,21],[141,18,143,22,"isString"],[141,26,143,30],[141,27,143,31,"source"],[141,33,143,37],[141,34,143,38],[141,36,144,16,"self"],[141,40,144,20],[141,41,144,21,"setOptions"],[141,51,144,31],[141,52,144,32,"source"],[141,58,144,38],[141,59,144,39,"options"],[141,66,144,46],[141,67,144,47],[141,68,144,48,"addJSON"],[141,75,144,55],[141,76,144,56,"source"],[141,82,144,62],[141,83,144,63,"nested"],[141,89,144,69],[141,90,144,70],[141,91,144,71],[141,96,145,17],[142,10,146,16,"parse"],[142,15,146,21],[142,16,146,22,"filename"],[142,24,146,30],[142,27,146,33,"filename"],[142,35,146,41],[143,10,147,16],[143,14,147,20,"parsed"],[143,20,147,26],[143,23,147,29,"parse"],[143,28,147,34],[143,29,147,35,"source"],[143,35,147,41],[143,37,147,43,"self"],[143,41,147,47],[143,43,147,49,"options"],[143,50,147,56],[143,51,147,57],[144,12,148,20,"resolved"],[144,20,148,28],[145,12,149,20,"i"],[145,13,149,21],[145,16,149,24],[145,17,149,25],[146,10,150,16],[146,14,150,20,"parsed"],[146,20,150,26],[146,21,150,27,"imports"],[146,28,150,34],[146,30,151,20],[146,37,151,27,"i"],[146,38,151,28],[146,41,151,31,"parsed"],[146,47,151,37],[146,48,151,38,"imports"],[146,55,151,45],[146,56,151,46,"length"],[146,62,151,52],[146,64,151,54],[146,66,151,56,"i"],[146,67,151,57],[146,69,152,24],[146,73,152,28,"resolved"],[146,81,152,36],[146,84,152,39,"getBundledFileName"],[146,102,152,57],[146,103,152,58,"parsed"],[146,109,152,64],[146,110,152,65,"imports"],[146,117,152,72],[146,118,152,73,"i"],[146,119,152,74],[146,120,152,75],[146,121,152,76],[146,125,152,80,"self"],[146,129,152,84],[146,130,152,85,"resolvePath"],[146,141,152,96],[146,142,152,97,"filename"],[146,150,152,105],[146,152,152,107,"parsed"],[146,158,152,113],[146,159,152,114,"imports"],[146,166,152,121],[146,167,152,122,"i"],[146,168,152,123],[146,169,152,124],[146,170,152,125],[146,172,153,28,"fetch"],[146,177,153,33],[146,178,153,34,"resolved"],[146,186,153,42],[146,187,153,43],[147,10,154,16],[147,14,154,20,"parsed"],[147,20,154,26],[147,21,154,27,"weakImports"],[147,32,154,38],[147,34,155,20],[147,39,155,25,"i"],[147,40,155,26],[147,43,155,29],[147,44,155,30],[147,46,155,32,"i"],[147,47,155,33],[147,50,155,36,"parsed"],[147,56,155,42],[147,57,155,43,"weakImports"],[147,68,155,54],[147,69,155,55,"length"],[147,75,155,61],[147,77,155,63],[147,79,155,65,"i"],[147,80,155,66],[147,82,156,24],[147,86,156,28,"resolved"],[147,94,156,36],[147,97,156,39,"getBundledFileName"],[147,115,156,57],[147,116,156,58,"parsed"],[147,122,156,64],[147,123,156,65,"weakImports"],[147,134,156,76],[147,135,156,77,"i"],[147,136,156,78],[147,137,156,79],[147,138,156,80],[147,142,156,84,"self"],[147,146,156,88],[147,147,156,89,"resolvePath"],[147,158,156,100],[147,159,156,101,"filename"],[147,167,156,109],[147,169,156,111,"parsed"],[147,175,156,117],[147,176,156,118,"weakImports"],[147,187,156,129],[147,188,156,130,"i"],[147,189,156,131],[147,190,156,132],[147,191,156,133],[147,193,157,28,"fetch"],[147,198,157,33],[147,199,157,34,"resolved"],[147,207,157,42],[147,209,157,44],[147,213,157,48],[147,214,157,49],[148,8,158,12],[149,6,159,8],[149,7,159,9],[149,8,159,10],[149,15,159,17,"err"],[149,18,159,20],[149,20,159,22],[150,8,160,12,"finish"],[150,14,160,18],[150,15,160,19,"err"],[150,18,160,22],[150,19,160,23],[151,6,161,8],[152,6,162,8],[152,10,162,12],[152,11,162,13,"sync"],[152,15,162,17],[152,19,162,21],[152,20,162,22,"queued"],[152,26,162,28],[152,28,162,30],[153,8,163,12,"finish"],[153,14,163,18],[153,15,163,19],[153,19,163,23],[153,21,163,25,"self"],[153,25,163,29],[153,26,163,30],[153,27,163,31],[153,28,163,32],[154,6,164,8],[155,4,165,4],[157,4,167,4],[158,4,168,4],[158,13,168,13,"fetch"],[158,18,168,18,"fetch"],[158,19,168,19,"filename"],[158,27,168,27],[158,29,168,29,"weak"],[158,33,168,33],[158,35,168,35],[159,6,169,8,"filename"],[159,14,169,16],[159,17,169,19,"getBundledFileName"],[159,35,169,37],[159,36,169,38,"filename"],[159,44,169,46],[159,45,169,47],[159,49,169,51,"filename"],[159,57,169,59],[161,6,171,8],[162,6,172,8],[162,10,172,12,"self"],[162,14,172,16],[162,15,172,17,"files"],[162,20,172,22],[162,21,172,23,"indexOf"],[162,28,172,30],[162,29,172,31,"filename"],[162,37,172,39],[162,38,172,40],[162,41,172,43],[162,42,172,44],[162,43,172,45],[162,45,172,47],[163,8,173,12],[164,6,174,8],[165,6,175,8,"self"],[165,10,175,12],[165,11,175,13,"files"],[165,16,175,18],[165,17,175,19,"push"],[165,21,175,23],[165,22,175,24,"filename"],[165,30,175,32],[165,31,175,33],[167,6,177,8],[168,6,178,8],[168,10,178,12,"filename"],[168,18,178,20],[168,22,178,24,"common"],[168,28,178,30],[168,30,178,32],[169,8,179,12],[169,12,179,16,"sync"],[169,16,179,20],[169,18,179,22],[170,10,180,16,"process"],[170,17,180,23],[170,18,180,24,"filename"],[170,26,180,32],[170,28,180,34,"common"],[170,34,180,40],[170,35,180,41,"filename"],[170,43,180,49],[170,44,180,50],[170,45,180,51],[171,8,181,12],[171,9,181,13],[171,15,181,19],[172,10,182,16],[172,12,182,18,"queued"],[172,18,182,24],[173,10,183,16,"setTimeout"],[173,20,183,26],[173,21,183,27],[173,33,183,38],[174,12,184,20],[174,14,184,22,"queued"],[174,20,184,28],[175,12,185,20,"process"],[175,19,185,27],[175,20,185,28,"filename"],[175,28,185,36],[175,30,185,38,"common"],[175,36,185,44],[175,37,185,45,"filename"],[175,45,185,53],[175,46,185,54],[175,47,185,55],[176,10,186,16],[176,11,186,17],[176,12,186,18],[177,8,187,12],[178,8,188,12],[179,6,189,8],[181,6,191,8],[182,6,192,8],[182,10,192,12,"sync"],[182,14,192,16],[182,16,192,18],[183,8,193,12],[183,12,193,16,"source"],[183,18,193,22],[184,8,194,12],[184,12,194,16],[185,10,195,16,"source"],[185,16,195,22],[185,19,195,25,"util"],[185,23,195,29],[185,24,195,30,"fs"],[185,26,195,32],[185,27,195,33,"readFileSync"],[185,39,195,45],[185,40,195,46,"filename"],[185,48,195,54],[185,49,195,55],[185,50,195,56,"toString"],[185,58,195,64],[185,59,195,65],[185,65,195,71],[185,66,195,72],[186,8,196,12],[186,9,196,13],[186,10,196,14],[186,17,196,21,"err"],[186,20,196,24],[186,22,196,26],[187,10,197,16],[187,14,197,20],[187,15,197,21,"weak"],[187,19,197,25],[187,21,198,20,"finish"],[187,27,198,26],[187,28,198,27,"err"],[187,31,198,30],[187,32,198,31],[188,10,199,16],[189,8,200,12],[190,8,201,12,"process"],[190,15,201,19],[190,16,201,20,"filename"],[190,24,201,28],[190,26,201,30,"source"],[190,32,201,36],[190,33,201,37],[191,6,202,8],[191,7,202,9],[191,13,202,15],[192,8,203,12],[192,10,203,14,"queued"],[192,16,203,20],[193,8,204,12,"self"],[193,12,204,16],[193,13,204,17,"fetch"],[193,18,204,22],[193,19,204,23,"filename"],[193,27,204,31],[193,29,204,33],[193,39,204,42,"err"],[193,42,204,45],[193,44,204,47,"source"],[193,50,204,53],[193,52,204,55],[194,10,205,16],[194,12,205,18,"queued"],[194,18,205,24],[195,10,206,16],[196,10,207,16],[196,14,207,20],[196,15,207,21,"callback"],[196,23,207,29],[196,25,207,31],[197,12,208,20],[197,19,208,27],[197,20,208,28],[198,10,209,16],[199,10,210,16],[199,14,210,20,"err"],[199,17,210,23],[199,19,210,25],[200,12,211,20],[201,12,212,20],[201,16,212,24],[201,17,212,25,"weak"],[201,21,212,29],[201,23,213,24,"finish"],[201,29,213,30],[201,30,213,31,"err"],[201,33,213,34],[201,34,213,35],[201,35,213,36],[201,40,214,25],[201,44,214,29],[201,45,214,30,"queued"],[201,51,214,36],[202,14,214,38],[203,14,215,24,"finish"],[203,20,215,30],[203,21,215,31],[203,25,215,35],[203,27,215,37,"self"],[203,31,215,41],[203,32,215,42],[204,12,216,20],[205,10,217,16],[206,10,218,16,"process"],[206,17,218,23],[206,18,218,24,"filename"],[206,26,218,32],[206,28,218,34,"source"],[206,34,218,40],[206,35,218,41],[207,8,219,12],[207,9,219,13],[207,10,219,14],[208,6,220,8],[209,4,221,4],[210,4,222,4],[210,8,222,8,"queued"],[210,14,222,14],[210,17,222,17],[210,18,222,18],[212,4,224,4],[213,4,225,4],[214,4,226,4],[214,8,226,8,"util"],[214,12,226,12],[214,13,226,13,"isString"],[214,21,226,21],[214,22,226,22,"filename"],[214,30,226,30],[214,31,226,31],[214,33,226,33],[215,6,227,8,"filename"],[215,14,227,16],[215,17,227,19],[215,18,227,21,"filename"],[215,26,227,29],[215,27,227,31],[216,4,228,4],[217,4,229,4],[217,9,229,9],[217,13,229,13,"i"],[217,14,229,14],[217,17,229,17],[217,18,229,18],[217,20,229,20,"resolved"],[217,28,229,28],[217,30,229,30,"i"],[217,31,229,31],[217,34,229,34,"filename"],[217,42,229,42],[217,43,229,43,"length"],[217,49,229,49],[217,51,229,51],[217,53,229,53,"i"],[217,54,229,54],[217,56,230,8],[217,60,230,12,"resolved"],[217,68,230,20],[217,71,230,23,"self"],[217,75,230,27],[217,76,230,28,"resolvePath"],[217,87,230,39],[217,88,230,40],[217,90,230,42],[217,92,230,44,"filename"],[217,100,230,52],[217,101,230,53,"i"],[217,102,230,54],[217,103,230,55],[217,104,230,56],[217,106,231,12,"fetch"],[217,111,231,17],[217,112,231,18,"resolved"],[217,120,231,26],[217,121,231,27],[218,4,232,4],[218,8,232,8,"sync"],[218,12,232,12],[218,14,232,14],[219,6,233,8,"self"],[219,10,233,12],[219,11,233,13,"resolveAll"],[219,21,233,23],[219,22,233,24],[219,23,233,25],[220,6,234,8],[220,13,234,15,"self"],[220,17,234,19],[221,4,235,4],[222,4,236,4],[222,8,236,8],[222,9,236,9,"queued"],[222,15,236,15],[222,17,236,17],[223,6,237,8,"finish"],[223,12,237,14],[223,13,237,15],[223,17,237,19],[223,19,237,21,"self"],[223,23,237,25],[223,24,237,26],[224,4,238,4],[225,4,240,4],[225,11,240,11,"self"],[225,15,240,15],[226,2,241,0],[226,3,241,1],[227,2,242,0],[229,2,244,0],[230,0,245,0],[231,0,246,0],[232,0,247,0],[233,0,248,0],[234,0,249,0],[235,0,250,0],[236,0,251,0],[237,2,252,0],[239,2,254,0],[240,0,255,0],[241,0,256,0],[242,0,257,0],[243,0,258,0],[244,0,259,0],[245,0,260,0],[246,0,261,0],[247,2,262,0],[249,2,264,0],[250,0,265,0],[251,0,266,0],[252,0,267,0],[253,0,268,0],[254,0,269,0],[255,0,270,0],[256,0,271,0],[257,2,272,0,"Root"],[257,6,272,4],[257,7,272,5,"prototype"],[257,16,272,14],[257,17,272,15,"loadSync"],[257,25,272,23],[257,28,272,26],[257,37,272,35,"loadSync"],[257,45,272,43,"loadSync"],[257,46,272,44,"filename"],[257,54,272,52],[257,56,272,54,"options"],[257,63,272,61],[257,65,272,63],[258,4,273,4],[258,8,273,8],[258,9,273,9,"util"],[258,13,273,13],[258,14,273,14,"isNode"],[258,20,273,20],[258,22,274,8],[258,28,274,14,"Error"],[258,33,274,19],[258,34,274,20],[258,49,274,35],[258,50,274,36],[259,4,275,4],[259,11,275,11],[259,15,275,15],[259,16,275,16,"load"],[259,20,275,20],[259,21,275,21,"filename"],[259,29,275,29],[259,31,275,31,"options"],[259,38,275,38],[259,40,275,40,"SYNC"],[259,44,275,44],[259,45,275,45],[260,2,276,0],[260,3,276,1],[262,2,278,0],[263,0,279,0],[264,0,280,0],[265,2,281,0,"Root"],[265,6,281,4],[265,7,281,5,"prototype"],[265,16,281,14],[265,17,281,15,"resolveAll"],[265,27,281,25],[265,30,281,28],[265,39,281,37,"resolveAll"],[265,49,281,47,"resolveAll"],[265,50,281,47],[265,52,281,50],[266,4,282,4],[266,8,282,8],[266,9,282,9],[266,13,282,13],[266,14,282,14,"_needsRecursiveResolve"],[266,36,282,36],[266,38,282,38],[266,45,282,45],[266,49,282,49],[267,4,284,4],[267,8,284,8],[267,12,284,12],[267,13,284,13,"deferred"],[267,21,284,21],[267,22,284,22,"length"],[267,28,284,28],[267,30,285,8],[267,36,285,14,"Error"],[267,41,285,19],[267,42,285,20],[267,69,285,47],[267,72,285,50],[267,76,285,54],[267,77,285,55,"deferred"],[267,85,285,63],[267,86,285,64,"map"],[267,89,285,67],[267,90,285,68],[267,100,285,77,"field"],[267,105,285,82],[267,107,285,84],[268,6,286,12],[268,13,286,19],[268,23,286,29],[268,26,286,32,"field"],[268,31,286,37],[268,32,286,38,"extend"],[268,38,286,44],[268,41,286,47],[268,48,286,54],[268,51,286,57,"field"],[268,56,286,62],[268,57,286,63,"parent"],[268,63,286,69],[268,64,286,70,"fullName"],[268,72,286,78],[269,4,287,8],[269,5,287,9],[269,6,287,10],[269,7,287,11,"join"],[269,11,287,15],[269,12,287,16],[269,16,287,20],[269,17,287,21],[269,18,287,22],[270,4,288,4],[270,11,288,11,"Namespace"],[270,20,288,20],[270,21,288,21,"prototype"],[270,30,288,30],[270,31,288,31,"resolveAll"],[270,41,288,41],[270,42,288,42,"call"],[270,46,288,46],[270,47,288,47],[270,51,288,51],[270,52,288,52],[271,2,289,0],[271,3,289,1],[273,2,291,0],[274,2,292,0],[274,6,292,4,"exposeRe"],[274,14,292,12],[274,17,292,15],[274,25,292,23],[276,2,294,0],[277,0,295,0],[278,0,296,0],[279,0,297,0],[280,0,298,0],[281,0,299,0],[282,0,300,0],[283,0,301,0],[284,2,302,0],[284,11,302,9,"tryHandleExtension"],[284,29,302,27,"tryHandleExtension"],[284,30,302,28,"root"],[284,34,302,32],[284,36,302,34,"field"],[284,41,302,39],[284,43,302,41],[285,4,303,4],[285,8,303,8,"extendedType"],[285,20,303,20],[285,23,303,23,"field"],[285,28,303,28],[285,29,303,29,"parent"],[285,35,303,35],[285,36,303,36,"lookup"],[285,42,303,42],[285,43,303,43,"field"],[285,48,303,48],[285,49,303,49,"extend"],[285,55,303,55],[285,56,303,56],[286,4,304,4],[286,8,304,8,"extendedType"],[286,20,304,20],[286,22,304,22],[287,6,305,8],[287,10,305,12,"sisterField"],[287,21,305,23],[287,24,305,26],[287,28,305,30,"Field"],[287,33,305,35],[287,34,305,36,"field"],[287,39,305,41],[287,40,305,42,"fullName"],[287,48,305,50],[287,50,305,52,"field"],[287,55,305,57],[287,56,305,58,"id"],[287,58,305,60],[287,60,305,62,"field"],[287,65,305,67],[287,66,305,68,"type"],[287,70,305,72],[287,72,305,74,"field"],[287,77,305,79],[287,78,305,80,"rule"],[287,82,305,84],[287,84,305,86,"undefined"],[287,93,305,95],[287,95,305,97,"field"],[287,100,305,102],[287,101,305,103,"options"],[287,108,305,110],[287,109,305,111],[288,6,306,8],[289,6,307,8],[289,10,307,12,"extendedType"],[289,22,307,24],[289,23,307,25,"get"],[289,26,307,28],[289,27,307,29,"sisterField"],[289,38,307,40],[289,39,307,41,"name"],[289,43,307,45],[289,44,307,46],[289,46,307,48],[290,8,308,12],[290,15,308,19],[290,19,308,23],[291,6,309,8],[292,6,310,8,"sisterField"],[292,17,310,19],[292,18,310,20,"declaringField"],[292,32,310,34],[292,35,310,37,"field"],[292,40,310,42],[293,6,311,8,"field"],[293,11,311,13],[293,12,311,14,"extensionField"],[293,26,311,28],[293,29,311,31,"sisterField"],[293,40,311,42],[294,6,312,8,"extendedType"],[294,18,312,20],[294,19,312,21,"add"],[294,22,312,24],[294,23,312,25,"sisterField"],[294,34,312,36],[294,35,312,37],[295,6,313,8],[295,13,313,15],[295,17,313,19],[296,4,314,4],[297,4,315,4],[297,11,315,11],[297,16,315,16],[298,2,316,0],[300,2,318,0],[301,0,319,0],[302,0,320,0],[303,0,321,0],[304,0,322,0],[305,0,323,0],[306,2,324,0,"Root"],[306,6,324,4],[306,7,324,5,"prototype"],[306,16,324,14],[306,17,324,15,"_handleAdd"],[306,27,324,25],[306,30,324,28],[306,39,324,37,"_handleAdd"],[306,49,324,47,"_handleAdd"],[306,50,324,48,"object"],[306,56,324,54],[306,58,324,56],[307,4,325,4],[307,8,325,8,"object"],[307,14,325,14],[307,26,325,26,"Field"],[307,31,325,31],[307,33,325,33],[308,6,327,8],[308,10,327,12],[308,64,327,67,"object"],[308,70,327,73],[308,71,327,74,"extend"],[308,77,327,80],[308,82,327,85,"undefined"],[308,91,327,94],[308,95,327,98],[308,120,327,124],[308,121,327,125,"object"],[308,127,327,131],[308,128,327,132,"extensionField"],[308,142,327,146],[308,144,328,12],[308,148,328,16],[308,149,328,17,"tryHandleExtension"],[308,167,328,35],[308,168,328,36],[308,172,328,40],[308,174,328,42,"object"],[308,180,328,48],[308,181,328,49],[308,183,329,16],[308,187,329,20],[308,188,329,21,"deferred"],[308,196,329,29],[308,197,329,30,"push"],[308,201,329,34],[308,202,329,35,"object"],[308,208,329,41],[308,209,329,42],[309,4,331,4],[309,5,331,5],[309,11,331,11],[309,15,331,15,"object"],[309,21,331,21],[309,33,331,33,"Enum"],[309,37,331,37],[309,39,331,39],[310,6,333,8],[310,10,333,12,"exposeRe"],[310,18,333,20],[310,19,333,21,"test"],[310,23,333,25],[310,24,333,26,"object"],[310,30,333,32],[310,31,333,33,"name"],[310,35,333,37],[310,36,333,38],[310,38,334,12,"object"],[310,44,334,18],[310,45,334,19,"parent"],[310,51,334,25],[310,52,334,26,"object"],[310,58,334,32],[310,59,334,33,"name"],[310,63,334,37],[310,64,334,38],[310,67,334,41,"object"],[310,73,334,47],[310,74,334,48,"values"],[310,80,334,54],[310,81,334,55],[310,82,334,56],[311,4,336,4],[311,5,336,5],[311,11,336,11],[311,15,336,15],[311,17,336,17,"object"],[311,23,336,23],[311,35,336,35,"OneOf"],[311,40,336,40],[311,41,336,41],[311,43,336,43],[311,79,336,80],[312,8,338,8],[312,12,338,12,"object"],[312,18,338,18],[312,30,338,30,"Type"],[312,34,338,34],[313,10,338,36],[314,10,339,12],[314,15,339,17],[314,19,339,21,"i"],[314,20,339,22],[314,23,339,25],[314,24,339,26],[314,26,339,28,"i"],[314,27,339,29],[314,30,339,32],[314,34,339,36],[314,35,339,37,"deferred"],[314,43,339,45],[314,44,339,46,"length"],[314,50,339,52],[314,53,340,16],[314,57,340,20,"tryHandleExtension"],[314,75,340,38],[314,76,340,39],[314,80,340,43],[314,82,340,45],[314,86,340,49],[314,87,340,50,"deferred"],[314,95,340,58],[314,96,340,59,"i"],[314,97,340,60],[314,98,340,61],[314,99,340,62],[314,101,341,20],[314,105,341,24],[314,106,341,25,"deferred"],[314,114,341,33],[314,115,341,34,"splice"],[314,121,341,40],[314,122,341,41,"i"],[314,123,341,42],[314,125,341,44],[314,126,341,45],[314,127,341,46],[314,128,341,47],[314,133,343,20],[314,135,343,22,"i"],[314,136,343,23],[315,8,344,8],[315,13,344,13],[315,17,344,17,"j"],[315,18,344,18],[315,21,344,21],[315,22,344,22],[315,24,344,24,"j"],[315,25,344,25],[315,28,344,28],[315,45,344,46,"object"],[315,51,344,52],[315,52,344,53,"nestedArray"],[315,63,344,64],[315,64,344,65,"length"],[315,70,344,71],[315,72,344,73],[315,74,344,75,"j"],[315,75,344,76],[316,8,344,78],[317,8,345,12],[317,12,345,16],[317,13,345,17,"_handleAdd"],[317,23,345,27],[317,24,345,28,"object"],[317,30,345,34],[317,31,345,35,"_nestedArray"],[317,43,345,47],[317,44,345,48,"j"],[317,45,345,49],[317,46,345,50],[317,47,345,51],[318,8,346,8],[318,12,346,12,"exposeRe"],[318,20,346,20],[318,21,346,21,"test"],[318,25,346,25],[318,26,346,26,"object"],[318,32,346,32],[318,33,346,33,"name"],[318,37,346,37],[318,38,346,38],[318,40,347,12,"object"],[318,46,347,18],[318,47,347,19,"parent"],[318,53,347,25],[318,54,347,26,"object"],[318,60,347,32],[318,61,347,33,"name"],[318,65,347,37],[318,66,347,38],[318,69,347,41,"object"],[318,75,347,47],[318,76,347,48],[318,77,347,49],[319,6,348,4],[320,4,350,4],[320,8,350,8,"object"],[320,14,350,14],[320,26,350,26,"Type"],[320,30,350,30],[320,34,350,34,"object"],[320,40,350,40],[320,52,350,52,"Enum"],[320,56,350,56],[320,60,350,60,"object"],[320,66,350,66],[320,78,350,78,"Field"],[320,83,350,83],[320,85,350,85],[321,6,351,8],[322,6,352,8],[322,10,352,12],[322,11,352,13,"_fullyQualifiedObjects"],[322,33,352,35],[322,34,352,36,"object"],[322,40,352,42],[322,41,352,43,"fullName"],[322,49,352,51],[322,50,352,52],[322,53,352,55,"object"],[322,59,352,61],[323,4,353,4],[325,4,355,4],[326,4,356,4],[327,4,357,4],[328,2,358,0],[328,3,358,1],[330,2,360,0],[331,0,361,0],[332,0,362,0],[333,0,363,0],[334,0,364,0],[335,0,365,0],[336,2,366,0,"Root"],[336,6,366,4],[336,7,366,5,"prototype"],[336,16,366,14],[336,17,366,15,"_handleRemove"],[336,30,366,28],[336,33,366,31],[336,42,366,40,"_handleRemove"],[336,55,366,53,"_handleRemove"],[336,56,366,54,"object"],[336,62,366,60],[336,64,366,62],[337,4,367,4],[337,8,367,8,"object"],[337,14,367,14],[337,26,367,26,"Field"],[337,31,367,31],[337,33,367,33],[338,6,369,8],[338,10,369,12],[338,34,369,37,"object"],[338,40,369,43],[338,41,369,44,"extend"],[338,47,369,50],[338,52,369,55,"undefined"],[338,61,369,64],[338,63,369,66],[339,8,370,12],[339,12,370,16],[339,33,370,38,"object"],[339,39,370,44],[339,40,370,45,"extensionField"],[339,54,370,59],[339,56,370,61],[340,10,370,63],[341,10,371,16,"object"],[341,16,371,22],[341,17,371,23,"extensionField"],[341,31,371,37],[341,32,371,38,"parent"],[341,38,371,44],[341,39,371,45,"remove"],[341,45,371,51],[341,46,371,52,"object"],[341,52,371,58],[341,53,371,59,"extensionField"],[341,67,371,73],[341,68,371,74],[342,10,372,16,"object"],[342,16,372,22],[342,17,372,23,"extensionField"],[342,31,372,37],[342,34,372,40],[342,38,372,44],[343,8,373,12],[343,9,373,13],[343,15,373,19],[344,10,373,21],[345,10,374,16],[345,14,374,20,"index"],[345,19,374,25],[345,22,374,28],[345,26,374,32],[345,27,374,33,"deferred"],[345,35,374,41],[345,36,374,42,"indexOf"],[345,43,374,49],[345,44,374,50,"object"],[345,50,374,56],[345,51,374,57],[346,10,375,16],[347,10,376,16],[347,14,376,20,"index"],[347,19,376,25],[347,22,376,28],[347,23,376,29],[347,24,376,30],[347,26,377,20],[347,30,377,24],[347,31,377,25,"deferred"],[347,39,377,33],[347,40,377,34,"splice"],[347,46,377,40],[347,47,377,41,"index"],[347,52,377,46],[347,54,377,48],[347,55,377,49],[347,56,377,50],[348,8,378,12],[349,6,379,8],[350,4,381,4],[350,5,381,5],[350,11,381,11],[350,15,381,15,"object"],[350,21,381,21],[350,33,381,33,"Enum"],[350,37,381,37],[350,39,381,39],[351,6,383,8],[351,10,383,12,"exposeRe"],[351,18,383,20],[351,19,383,21,"test"],[351,23,383,25],[351,24,383,26,"object"],[351,30,383,32],[351,31,383,33,"name"],[351,35,383,37],[351,36,383,38],[351,38,384,12],[351,45,384,19,"object"],[351,51,384,25],[351,52,384,26,"parent"],[351,58,384,32],[351,59,384,33,"object"],[351,65,384,39],[351,66,384,40,"name"],[351,70,384,44],[351,71,384,45],[351,72,384,46],[351,73,384,47],[352,4,386,4],[352,5,386,5],[352,11,386,11],[352,15,386,15,"object"],[352,21,386,21],[352,33,386,33,"Namespace"],[352,42,386,42],[352,44,386,44],[353,6,388,8],[353,11,388,13],[353,15,388,17,"i"],[353,16,388,18],[353,19,388,21],[353,20,388,22],[353,22,388,24,"i"],[353,23,388,25],[353,26,388,28],[353,43,388,46,"object"],[353,49,388,52],[353,50,388,53,"nestedArray"],[353,61,388,64],[353,62,388,65,"length"],[353,68,388,71],[353,70,388,73],[353,72,388,75,"i"],[353,73,388,76],[354,6,388,78],[355,6,389,12],[355,10,389,16],[355,11,389,17,"_handleRemove"],[355,24,389,30],[355,25,389,31,"object"],[355,31,389,37],[355,32,389,38,"_nestedArray"],[355,44,389,50],[355,45,389,51,"i"],[355,46,389,52],[355,47,389,53],[355,48,389,54],[356,6,391,8],[356,10,391,12,"exposeRe"],[356,18,391,20],[356,19,391,21,"test"],[356,23,391,25],[356,24,391,26,"object"],[356,30,391,32],[356,31,391,33,"name"],[356,35,391,37],[356,36,391,38],[356,38,392,12],[356,45,392,19,"object"],[356,51,392,25],[356,52,392,26,"parent"],[356,58,392,32],[356,59,392,33,"object"],[356,65,392,39],[356,66,392,40,"name"],[356,70,392,44],[356,71,392,45],[356,72,392,46],[356,73,392,47],[357,4,394,4],[358,4,396,4],[358,11,396,11],[358,15,396,15],[358,16,396,16,"_fullyQualifiedObjects"],[358,38,396,38],[358,39,396,39,"object"],[358,45,396,45],[358,46,396,46,"fullName"],[358,54,396,54],[358,55,396,55],[359,2,397,0],[359,3,397,1],[361,2,399,0],[362,2,400,0,"Root"],[362,6,400,4],[362,7,400,5,"_configure"],[362,17,400,15],[362,20,400,18],[362,30,400,27,"Type_"],[362,35,400,32],[362,37,400,34,"parse_"],[362,43,400,40],[362,45,400,42,"common_"],[362,52,400,49],[362,54,400,51],[363,4,401,4,"Type"],[363,8,401,8],[363,11,401,13,"Type_"],[363,16,401,18],[364,4,402,4,"parse"],[364,9,402,9],[364,12,402,13,"parse_"],[364,18,402,19],[365,4,403,4,"common"],[365,10,403,10],[365,13,403,13,"common_"],[365,20,403,20],[366,2,404,0],[366,3,404,1],[367,0,404,2],[367,3]],"functionMap":{"names":["<global>","Root","fromJSON","SYNC","load","finish","getBundledFileName","process","fetch","setTimeout$argument_0","self.fetch$argument_1","loadSync","resolveAll","deferred.map$argument_0","tryHandleExtension","_handleAdd","_handleRemove","Root._configure"],"mappings":"AAA;ACuB;CD4B;gBEQ;CFM;AGwB,kBH;sBIS;ICa;KDc;IEG;KFO;IGG;KH0B;IIG;2BCe;iBDG;iCEkB;aFe;KJE;CJoB;0BW+B;CXI;4BYK;oECI;SDE;CZE;Aca;Cdc;4BeQ;CfkC;+BgBQ;ChB+B;kBiBG;CjBI"}},"type":"js/module"}]}