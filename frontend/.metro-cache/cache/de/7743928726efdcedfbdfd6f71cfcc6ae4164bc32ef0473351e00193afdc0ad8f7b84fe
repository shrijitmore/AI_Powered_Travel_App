{"dependencies":[{"name":"./object","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":23,"index":90},"end":{"line":5,"column":42,"index":109}}],"key":"xOxKVS7k9wOBO7C50gqXbLVMn/0=","exportNames":["*"]}},{"name":"./enum","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":12,"index":229},"end":{"line":8,"column":29,"index":246}}],"key":"gyum9HaiytxYUYAerYZvNHG09ko=","exportNames":["*"]}},{"name":"./types","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":12,"index":260},"end":{"line":9,"column":30,"index":278}}],"key":"iU0PUTt27rZ09z7DeRf4jWGkzmo=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":12,"index":292},"end":{"line":10,"column":29,"index":309}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = Field;\n\n  // extends ReflectionObject\n  var ReflectionObject = require(_dependencyMap[0], \"./object\");\n  ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n  var Enum = require(_dependencyMap[1], \"./enum\"),\n    types = require(_dependencyMap[2], \"./types\"),\n    util = require(_dependencyMap[3], \"./util\");\n  var Type; // cyclic\n\n  var ruleRe = /^required|optional|repeated$/;\n\n  /**\n   * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n   * @name Field\n   * @classdesc Reflected message field.\n   * @extends FieldBase\n   * @constructor\n   * @param {string} name Unique name within its namespace\n   * @param {number} id Unique id within its namespace\n   * @param {string} type Value type\n   * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n   * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n   * @param {Object.<string,*>} [options] Declared options\n   */\n\n  /**\n   * Constructs a field from a field descriptor.\n   * @param {string} name Field name\n   * @param {IField} json Field descriptor\n   * @returns {Field} Created field\n   * @throws {TypeError} If arguments are invalid\n   */\n  Field.fromJSON = function fromJSON(name, json) {\n    var field = new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n    if (json.edition) field._edition = json.edition;\n    field._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return field;\n  };\n\n  /**\n   * Not an actual constructor. Use {@link Field} instead.\n   * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n   * @exports FieldBase\n   * @extends ReflectionObject\n   * @constructor\n   * @param {string} name Unique name within its namespace\n   * @param {number} id Unique id within its namespace\n   * @param {string} type Value type\n   * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n   * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n   * @param {Object.<string,*>} [options] Declared options\n   * @param {string} [comment] Comment associated with this field\n   */\n  function Field(name, id, type, rule, extend, options, comment) {\n    if (util.isObject(rule)) {\n      comment = extend;\n      options = rule;\n      rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n      comment = options;\n      options = extend;\n      extend = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n    if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n    if (!util.isString(type)) throw TypeError(\"type must be a string\");\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n    if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    if (rule === \"proto3_optional\") {\n      rule = \"optional\";\n    }\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n  }\n\n  /**\n   * Determines whether this field is required.\n   * @name Field#required\n   * @type {boolean}\n   * @readonly\n   */\n  Object.defineProperty(Field.prototype, \"required\", {\n    get: function () {\n      return this._features.field_presence === \"LEGACY_REQUIRED\";\n    }\n  });\n\n  /**\n   * Determines whether this field is not required.\n   * @name Field#optional\n   * @type {boolean}\n   * @readonly\n   */\n  Object.defineProperty(Field.prototype, \"optional\", {\n    get: function () {\n      return !this.required;\n    }\n  });\n\n  /**\n   * Determines whether this field uses tag-delimited encoding.  In proto2 this\n   * corresponded to group syntax.\n   * @name Field#delimited\n   * @type {boolean}\n   * @readonly\n   */\n  Object.defineProperty(Field.prototype, \"delimited\", {\n    get: function () {\n      return this.resolvedType instanceof Type && this._features.message_encoding === \"DELIMITED\";\n    }\n  });\n\n  /**\n   * Determines whether this field is packed. Only relevant when repeated.\n   * @name Field#packed\n   * @type {boolean}\n   * @readonly\n   */\n  Object.defineProperty(Field.prototype, \"packed\", {\n    get: function () {\n      return this._features.repeated_field_encoding === \"PACKED\";\n    }\n  });\n\n  /**\n   * Determines whether this field tracks presence.\n   * @name Field#hasPresence\n   * @type {boolean}\n   * @readonly\n   */\n  Object.defineProperty(Field.prototype, \"hasPresence\", {\n    get: function () {\n      if (this.repeated || this.map) {\n        return false;\n      }\n      return this.partOf ||\n      // oneofs\n      this.declaringField || this.extensionField ||\n      // extensions\n      this._features.field_presence !== \"IMPLICIT\";\n    }\n  });\n\n  /**\n   * @override\n   */\n  Field.prototype.setOption = function setOption(name, value, ifNotSet) {\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n  };\n\n  /**\n   * Field descriptor.\n   * @interface IField\n   * @property {string} [rule=\"optional\"] Field rule\n   * @property {string} type Field type\n   * @property {number} id Field id\n   * @property {Object.<string,*>} [options] Field options\n   */\n\n  /**\n   * Extension field descriptor.\n   * @interface IExtensionField\n   * @extends IField\n   * @property {string} extend Extended type\n   */\n\n  /**\n   * Converts this field to a field descriptor.\n   * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n   * @returns {IField} Field descriptor\n   */\n  Field.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\"edition\", this._editionToJSON(), \"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n  };\n\n  /**\n   * Resolves this field's type references.\n   * @returns {Field} `this`\n   * @throws {Error} If any reference cannot be resolved\n   */\n  Field.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n      // if not a basic type, resolve it\n      this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n      if (this.resolvedType instanceof Type) this.typeDefault = null;else\n        // instanceof Enum\n        this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    } else if (this.options && this.options.proto3_optional) {\n      // proto3 scalar value marked optional; should default to null\n      this.typeDefault = null;\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n      this.typeDefault = this.options[\"default\"];\n      if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n      if (this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n      if (!Object.keys(this.options).length) this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n      this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n      /* istanbul ignore else */\n      if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n      var buf;\n      if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n      this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n    return ReflectionObject.prototype.resolve.call(this);\n  };\n\n  /**\n   * Infers field features from legacy syntax that may have been specified differently.\n   * in older editions.\n   * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n   * @returns {object} The feature values to override\n   */\n  Field.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures(edition) {\n    if (edition !== \"proto2\" && edition !== \"proto3\") {\n      return {};\n    }\n    var features = {};\n    if (this.rule === \"required\") {\n      features.field_presence = \"LEGACY_REQUIRED\";\n    }\n    if (this.parent && types.defaults[this.type] === undefined) {\n      // We can't use resolvedType because types may not have been resolved yet.  However,\n      // legacy groups are always in the same scope as the field so we don't have to do a\n      // full scan of the tree.\n      var type = this.parent.get(this.type.split(\".\").pop());\n      if (type && type instanceof Type && type.group) {\n        features.message_encoding = \"DELIMITED\";\n      }\n    }\n    if (this.getOption(\"packed\") === true) {\n      features.repeated_field_encoding = \"PACKED\";\n    } else if (this.getOption(\"packed\") === false) {\n      features.repeated_field_encoding = \"EXPANDED\";\n    }\n    return features;\n  };\n\n  /**\n   * @override\n   */\n  Field.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    return ReflectionObject.prototype._resolveFeatures.call(this, this._edition || edition);\n  };\n\n  /**\n   * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n   * @typedef FieldDecorator\n   * @type {function}\n   * @param {Object} prototype Target prototype\n   * @param {string} fieldName Field name\n   * @returns {undefined}\n   */\n\n  /**\n   * Field decorator (TypeScript).\n   * @name Field.d\n   * @function\n   * @param {number} fieldId Field id\n   * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n   * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n   * @param {T} [defaultValue] Default value\n   * @returns {FieldDecorator} Decorator function\n   * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n   */\n  Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n    return function fieldDecorator(prototype, fieldName) {\n      util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n        \"default\": defaultValue\n      }));\n    };\n  };\n\n  /**\n   * Field decorator (TypeScript).\n   * @name Field.d\n   * @function\n   * @param {number} fieldId Field id\n   * @param {Constructor<T>|string} fieldType Field type\n   * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n   * @returns {FieldDecorator} Decorator function\n   * @template T extends Message<T>\n   * @variation 2\n   */\n  // like Field.d but without a default value\n\n  // Sets up cyclic dependencies (called in index-light)\n  Field._configure = function configure(Type_) {\n    Type = Type_;\n  };\n});","lineCount":413,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"Field"],[4,24,2,22],[6,2,4,0],[7,2,5,0],[7,6,5,4,"ReflectionObject"],[7,22,5,20],[7,25,5,23,"require"],[7,32,5,30],[7,33,5,30,"_dependencyMap"],[7,47,5,30],[7,62,5,41],[7,63,5,42],[8,2,6,0],[8,3,6,1],[8,4,6,2,"Field"],[8,9,6,7],[8,10,6,8,"prototype"],[8,19,6,17],[8,22,6,20,"Object"],[8,28,6,26],[8,29,6,27,"create"],[8,35,6,33],[8,36,6,34,"ReflectionObject"],[8,52,6,50],[8,53,6,51,"prototype"],[8,62,6,60],[8,63,6,61],[8,65,6,63,"constructor"],[8,76,6,74],[8,79,6,77,"Field"],[8,84,6,82],[8,86,6,84,"className"],[8,95,6,93],[8,98,6,96],[8,105,6,103],[9,2,8,0],[9,6,8,4,"Enum"],[9,10,8,8],[9,13,8,12,"require"],[9,20,8,19],[9,21,8,19,"_dependencyMap"],[9,35,8,19],[9,48,8,28],[9,49,8,29],[10,4,9,4,"types"],[10,9,9,9],[10,12,9,12,"require"],[10,19,9,19],[10,20,9,19,"_dependencyMap"],[10,34,9,19],[10,48,9,29],[10,49,9,30],[11,4,10,4,"util"],[11,8,10,8],[11,11,10,12,"require"],[11,18,10,19],[11,19,10,19,"_dependencyMap"],[11,33,10,19],[11,46,10,28],[11,47,10,29],[12,2,12,0],[12,6,12,4,"Type"],[12,10,12,8],[12,11,12,9],[12,12,12,10],[14,2,14,0],[14,6,14,4,"ruleRe"],[14,12,14,10],[14,15,14,13],[14,45,14,43],[16,2,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,0,20,0],[21,0,21,0],[22,0,22,0],[23,0,23,0],[24,0,24,0],[25,0,25,0],[26,0,26,0],[27,0,27,0],[28,0,28,0],[30,2,30,0],[31,0,31,0],[32,0,32,0],[33,0,33,0],[34,0,34,0],[35,0,35,0],[36,0,36,0],[37,2,37,0,"Field"],[37,7,37,5],[37,8,37,6,"fromJSON"],[37,16,37,14],[37,19,37,17],[37,28,37,26,"fromJSON"],[37,36,37,34,"fromJSON"],[37,37,37,35,"name"],[37,41,37,39],[37,43,37,41,"json"],[37,47,37,45],[37,49,37,47],[38,4,38,4],[38,8,38,8,"field"],[38,13,38,13],[38,16,38,16],[38,20,38,20,"Field"],[38,25,38,25],[38,26,38,26,"name"],[38,30,38,30],[38,32,38,32,"json"],[38,36,38,36],[38,37,38,37,"id"],[38,39,38,39],[38,41,38,41,"json"],[38,45,38,45],[38,46,38,46,"type"],[38,50,38,50],[38,52,38,52,"json"],[38,56,38,56],[38,57,38,57,"rule"],[38,61,38,61],[38,63,38,63,"json"],[38,67,38,67],[38,68,38,68,"extend"],[38,74,38,74],[38,76,38,76,"json"],[38,80,38,80],[38,81,38,81,"options"],[38,88,38,88],[38,90,38,90,"json"],[38,94,38,94],[38,95,38,95,"comment"],[38,102,38,102],[38,103,38,103],[39,4,39,4],[39,8,39,8,"json"],[39,12,39,12],[39,13,39,13,"edition"],[39,20,39,20],[39,22,40,8,"field"],[39,27,40,13],[39,28,40,14,"_edition"],[39,36,40,22],[39,39,40,25,"json"],[39,43,40,29],[39,44,40,30,"edition"],[39,51,40,37],[40,4,41,4,"field"],[40,9,41,9],[40,10,41,10,"_defaultEdition"],[40,25,41,25],[40,28,41,28],[40,36,41,36],[40,37,41,37],[40,38,41,39],[41,4,42,4],[41,11,42,11,"field"],[41,16,42,16],[42,2,43,0],[42,3,43,1],[44,2,45,0],[45,0,46,0],[46,0,47,0],[47,0,48,0],[48,0,49,0],[49,0,50,0],[50,0,51,0],[51,0,52,0],[52,0,53,0],[53,0,54,0],[54,0,55,0],[55,0,56,0],[56,0,57,0],[57,0,58,0],[58,2,59,0],[58,11,59,9,"Field"],[58,16,59,14,"Field"],[58,17,59,15,"name"],[58,21,59,19],[58,23,59,21,"id"],[58,25,59,23],[58,27,59,25,"type"],[58,31,59,29],[58,33,59,31,"rule"],[58,37,59,35],[58,39,59,37,"extend"],[58,45,59,43],[58,47,59,45,"options"],[58,54,59,52],[58,56,59,54,"comment"],[58,63,59,61],[58,65,59,63],[59,4,61,4],[59,8,61,8,"util"],[59,12,61,12],[59,13,61,13,"isObject"],[59,21,61,21],[59,22,61,22,"rule"],[59,26,61,26],[59,27,61,27],[59,29,61,29],[60,6,62,8,"comment"],[60,13,62,15],[60,16,62,18,"extend"],[60,22,62,24],[61,6,63,8,"options"],[61,13,63,15],[61,16,63,18,"rule"],[61,20,63,22],[62,6,64,8,"rule"],[62,10,64,12],[62,13,64,15,"extend"],[62,19,64,21],[62,22,64,24,"undefined"],[62,31,64,33],[63,4,65,4],[63,5,65,5],[63,11,65,11],[63,15,65,15,"util"],[63,19,65,19],[63,20,65,20,"isObject"],[63,28,65,28],[63,29,65,29,"extend"],[63,35,65,35],[63,36,65,36],[63,38,65,38],[64,6,66,8,"comment"],[64,13,66,15],[64,16,66,18,"options"],[64,23,66,25],[65,6,67,8,"options"],[65,13,67,15],[65,16,67,18,"extend"],[65,22,67,24],[66,6,68,8,"extend"],[66,12,68,14],[66,15,68,17,"undefined"],[66,24,68,26],[67,4,69,4],[68,4,71,4,"ReflectionObject"],[68,20,71,20],[68,21,71,21,"call"],[68,25,71,25],[68,26,71,26],[68,30,71,30],[68,32,71,32,"name"],[68,36,71,36],[68,38,71,38,"options"],[68,45,71,45],[68,46,71,46],[69,4,73,4],[69,8,73,8],[69,9,73,9,"util"],[69,13,73,13],[69,14,73,14,"isInteger"],[69,23,73,23],[69,24,73,24,"id"],[69,26,73,26],[69,27,73,27],[69,31,73,31,"id"],[69,33,73,33],[69,36,73,36],[69,37,73,37],[69,39,74,8],[69,45,74,14,"TypeError"],[69,54,74,23],[69,55,74,24],[69,90,74,59],[69,91,74,60],[70,4,76,4],[70,8,76,8],[70,9,76,9,"util"],[70,13,76,13],[70,14,76,14,"isString"],[70,22,76,22],[70,23,76,23,"type"],[70,27,76,27],[70,28,76,28],[70,30,77,8],[70,36,77,14,"TypeError"],[70,45,77,23],[70,46,77,24],[70,69,77,47],[70,70,77,48],[71,4,79,4],[71,8,79,8,"rule"],[71,12,79,12],[71,17,79,17,"undefined"],[71,26,79,26],[71,30,79,30],[71,31,79,31,"ruleRe"],[71,37,79,37],[71,38,79,38,"test"],[71,42,79,42],[71,43,79,43,"rule"],[71,47,79,47],[71,50,79,50,"rule"],[71,54,79,54],[71,55,79,55,"toString"],[71,63,79,63],[71,64,79,64],[71,65,79,65],[71,66,79,66,"toLowerCase"],[71,77,79,77],[71,78,79,78],[71,79,79,79],[71,80,79,80],[71,82,80,8],[71,88,80,14,"TypeError"],[71,97,80,23],[71,98,80,24],[71,126,80,52],[71,127,80,53],[72,4,82,4],[72,8,82,8,"extend"],[72,14,82,14],[72,19,82,19,"undefined"],[72,28,82,28],[72,32,82,32],[72,33,82,33,"util"],[72,37,82,37],[72,38,82,38,"isString"],[72,46,82,46],[72,47,82,47,"extend"],[72,53,82,53],[72,54,82,54],[72,56,83,8],[72,62,83,14,"TypeError"],[72,71,83,23],[72,72,83,24],[72,97,83,49],[72,98,83,50],[74,4,85,4],[75,0,86,0],[76,0,87,0],[77,0,88,0],[78,4,89,4],[78,8,89,8,"rule"],[78,12,89,12],[78,17,89,17],[78,34,89,34],[78,36,89,36],[79,6,90,8,"rule"],[79,10,90,12],[79,13,90,15],[79,23,90,25],[80,4,91,4],[81,4,92,4],[81,8,92,8],[81,9,92,9,"rule"],[81,13,92,13],[81,16,92,16,"rule"],[81,20,92,20],[81,24,92,24,"rule"],[81,28,92,28],[81,33,92,33],[81,43,92,43],[81,46,92,46,"rule"],[81,50,92,50],[81,53,92,53,"undefined"],[81,62,92,62],[81,63,92,63],[81,64,92,64],[83,4,94,4],[84,0,95,0],[85,0,96,0],[86,0,97,0],[87,4,98,4],[87,8,98,8],[87,9,98,9,"type"],[87,13,98,13],[87,16,98,16,"type"],[87,20,98,20],[87,21,98,21],[87,22,98,22],[89,4,100,4],[90,0,101,0],[91,0,102,0],[92,0,103,0],[93,4,104,4],[93,8,104,8],[93,9,104,9,"id"],[93,11,104,11],[93,14,104,14,"id"],[93,16,104,16],[93,17,104,17],[93,18,104,18],[95,4,106,4],[96,0,107,0],[97,0,108,0],[98,0,109,0],[99,4,110,4],[99,8,110,8],[99,9,110,9,"extend"],[99,15,110,15],[99,18,110,18,"extend"],[99,24,110,24],[99,28,110,28,"undefined"],[99,37,110,37],[99,38,110,38],[99,39,110,39],[101,4,112,4],[102,0,113,0],[103,0,114,0],[104,0,115,0],[105,4,116,4],[105,8,116,8],[105,9,116,9,"repeated"],[105,17,116,17],[105,20,116,20,"rule"],[105,24,116,24],[105,29,116,29],[105,39,116,39],[107,4,118,4],[108,0,119,0],[109,0,120,0],[110,0,121,0],[111,4,122,4],[111,8,122,8],[111,9,122,9,"map"],[111,12,122,12],[111,15,122,15],[111,20,122,20],[113,4,124,4],[114,0,125,0],[115,0,126,0],[116,0,127,0],[117,4,128,4],[117,8,128,8],[117,9,128,9,"message"],[117,16,128,16],[117,19,128,19],[117,23,128,23],[119,4,130,4],[120,0,131,0],[121,0,132,0],[122,0,133,0],[123,4,134,4],[123,8,134,8],[123,9,134,9,"partOf"],[123,15,134,15],[123,18,134,18],[123,22,134,22],[125,4,136,4],[126,0,137,0],[127,0,138,0],[128,0,139,0],[129,4,140,4],[129,8,140,8],[129,9,140,9,"typeDefault"],[129,20,140,20],[129,23,140,23],[129,27,140,27],[131,4,142,4],[132,0,143,0],[133,0,144,0],[134,0,145,0],[135,4,146,4],[135,8,146,8],[135,9,146,9,"defaultValue"],[135,21,146,21],[135,24,146,24],[135,28,146,28],[137,4,148,4],[138,0,149,0],[139,0,150,0],[140,0,151,0],[141,4,152,4],[141,8,152,8],[141,9,152,9,"long"],[141,13,152,13],[141,16,152,16,"util"],[141,20,152,20],[141,21,152,21,"Long"],[141,25,152,25],[141,28,152,28,"types"],[141,33,152,33],[141,34,152,34,"long"],[141,38,152,38],[141,39,152,39,"type"],[141,43,152,43],[141,44,152,44],[141,49,152,49,"undefined"],[141,58,152,58],[141,61,152,61],[141,87,152,88],[141,92,152,93],[143,4,154,4],[144,0,155,0],[145,0,156,0],[146,0,157,0],[147,4,158,4],[147,8,158,8],[147,9,158,9,"bytes"],[147,14,158,14],[147,17,158,17,"type"],[147,21,158,21],[147,26,158,26],[147,33,158,33],[149,4,160,4],[150,0,161,0],[151,0,162,0],[152,0,163,0],[153,4,164,4],[153,8,164,8],[153,9,164,9,"resolvedType"],[153,21,164,21],[153,24,164,24],[153,28,164,28],[155,4,166,4],[156,0,167,0],[157,0,168,0],[158,0,169,0],[159,4,170,4],[159,8,170,8],[159,9,170,9,"extensionField"],[159,23,170,23],[159,26,170,26],[159,30,170,30],[161,4,172,4],[162,0,173,0],[163,0,174,0],[164,0,175,0],[165,4,176,4],[165,8,176,8],[165,9,176,9,"declaringField"],[165,23,176,23],[165,26,176,26],[165,30,176,30],[167,4,178,4],[168,0,179,0],[169,0,180,0],[170,0,181,0],[171,4,182,4],[171,8,182,8],[171,9,182,9,"comment"],[171,16,182,16],[171,19,182,19,"comment"],[171,26,182,26],[172,2,183,0],[174,2,185,0],[175,0,186,0],[176,0,187,0],[177,0,188,0],[178,0,189,0],[179,0,190,0],[180,2,191,0,"Object"],[180,8,191,6],[180,9,191,7,"defineProperty"],[180,23,191,21],[180,24,191,22,"Field"],[180,29,191,27],[180,30,191,28,"prototype"],[180,39,191,37],[180,41,191,39],[180,51,191,49],[180,53,191,51],[181,4,192,4,"get"],[181,7,192,7],[181,9,192,9],[181,18,192,9,"get"],[181,19,192,9],[181,21,192,20],[182,6,193,8],[182,13,193,15],[182,17,193,19],[182,18,193,20,"_features"],[182,27,193,29],[182,28,193,30,"field_presence"],[182,42,193,44],[182,47,193,49],[182,64,193,66],[183,4,194,4],[184,2,195,0],[184,3,195,1],[184,4,195,2],[186,2,197,0],[187,0,198,0],[188,0,199,0],[189,0,200,0],[190,0,201,0],[191,0,202,0],[192,2,203,0,"Object"],[192,8,203,6],[192,9,203,7,"defineProperty"],[192,23,203,21],[192,24,203,22,"Field"],[192,29,203,27],[192,30,203,28,"prototype"],[192,39,203,37],[192,41,203,39],[192,51,203,49],[192,53,203,51],[193,4,204,4,"get"],[193,7,204,7],[193,9,204,9],[193,18,204,9,"get"],[193,19,204,9],[193,21,204,20],[194,6,205,8],[194,13,205,15],[194,14,205,16],[194,18,205,20],[194,19,205,21,"required"],[194,27,205,29],[195,4,206,4],[196,2,207,0],[196,3,207,1],[196,4,207,2],[198,2,209,0],[199,0,210,0],[200,0,211,0],[201,0,212,0],[202,0,213,0],[203,0,214,0],[204,0,215,0],[205,2,216,0,"Object"],[205,8,216,6],[205,9,216,7,"defineProperty"],[205,23,216,21],[205,24,216,22,"Field"],[205,29,216,27],[205,30,216,28,"prototype"],[205,39,216,37],[205,41,216,39],[205,52,216,50],[205,54,216,52],[206,4,217,4,"get"],[206,7,217,7],[206,9,217,9],[206,18,217,9,"get"],[206,19,217,9],[206,21,217,20],[207,6,218,8],[207,13,218,15],[207,17,218,19],[207,18,218,20,"resolvedType"],[207,30,218,32],[207,42,218,44,"Type"],[207,46,218,48],[207,50,219,12],[207,54,219,16],[207,55,219,17,"_features"],[207,64,219,26],[207,65,219,27,"message_encoding"],[207,81,219,43],[207,86,219,48],[207,97,219,59],[208,4,220,4],[209,2,221,0],[209,3,221,1],[209,4,221,2],[211,2,223,0],[212,0,224,0],[213,0,225,0],[214,0,226,0],[215,0,227,0],[216,0,228,0],[217,2,229,0,"Object"],[217,8,229,6],[217,9,229,7,"defineProperty"],[217,23,229,21],[217,24,229,22,"Field"],[217,29,229,27],[217,30,229,28,"prototype"],[217,39,229,37],[217,41,229,39],[217,49,229,47],[217,51,229,49],[218,4,230,4,"get"],[218,7,230,7],[218,9,230,9],[218,18,230,9,"get"],[218,19,230,9],[218,21,230,20],[219,6,231,8],[219,13,231,15],[219,17,231,19],[219,18,231,20,"_features"],[219,27,231,29],[219,28,231,30,"repeated_field_encoding"],[219,51,231,53],[219,56,231,58],[219,64,231,66],[220,4,232,4],[221,2,233,0],[221,3,233,1],[221,4,233,2],[223,2,235,0],[224,0,236,0],[225,0,237,0],[226,0,238,0],[227,0,239,0],[228,0,240,0],[229,2,241,0,"Object"],[229,8,241,6],[229,9,241,7,"defineProperty"],[229,23,241,21],[229,24,241,22,"Field"],[229,29,241,27],[229,30,241,28,"prototype"],[229,39,241,37],[229,41,241,39],[229,54,241,52],[229,56,241,54],[230,4,242,4,"get"],[230,7,242,7],[230,9,242,9],[230,18,242,9,"get"],[230,19,242,9],[230,21,242,20],[231,6,243,8],[231,10,243,12],[231,14,243,16],[231,15,243,17,"repeated"],[231,23,243,25],[231,27,243,29],[231,31,243,33],[231,32,243,34,"map"],[231,35,243,37],[231,37,243,39],[232,8,244,12],[232,15,244,19],[232,20,244,24],[233,6,245,8],[234,6,246,8],[234,13,246,15],[234,17,246,19],[234,18,246,20,"partOf"],[234,24,246,26],[235,6,246,30],[236,6,247,12],[236,10,247,16],[236,11,247,17,"declaringField"],[236,25,247,31],[236,29,247,35],[236,33,247,39],[236,34,247,40,"extensionField"],[236,48,247,54],[237,6,247,58],[238,6,248,12],[238,10,248,16],[238,11,248,17,"_features"],[238,20,248,26],[238,21,248,27,"field_presence"],[238,35,248,41],[238,40,248,46],[238,50,248,56],[239,4,249,4],[240,2,250,0],[240,3,250,1],[240,4,250,2],[242,2,252,0],[243,0,253,0],[244,0,254,0],[245,2,255,0,"Field"],[245,7,255,5],[245,8,255,6,"prototype"],[245,17,255,15],[245,18,255,16,"setOption"],[245,27,255,25],[245,30,255,28],[245,39,255,37,"setOption"],[245,48,255,46,"setOption"],[245,49,255,47,"name"],[245,53,255,51],[245,55,255,53,"value"],[245,60,255,58],[245,62,255,60,"ifNotSet"],[245,70,255,68],[245,72,255,70],[246,4,256,4],[246,11,256,11,"ReflectionObject"],[246,27,256,27],[246,28,256,28,"prototype"],[246,37,256,37],[246,38,256,38,"setOption"],[246,47,256,47],[246,48,256,48,"call"],[246,52,256,52],[246,53,256,53],[246,57,256,57],[246,59,256,59,"name"],[246,63,256,63],[246,65,256,65,"value"],[246,70,256,70],[246,72,256,72,"ifNotSet"],[246,80,256,80],[246,81,256,81],[247,2,257,0],[247,3,257,1],[249,2,259,0],[250,0,260,0],[251,0,261,0],[252,0,262,0],[253,0,263,0],[254,0,264,0],[255,0,265,0],[256,0,266,0],[258,2,268,0],[259,0,269,0],[260,0,270,0],[261,0,271,0],[262,0,272,0],[263,0,273,0],[265,2,275,0],[266,0,276,0],[267,0,277,0],[268,0,278,0],[269,0,279,0],[270,2,280,0,"Field"],[270,7,280,5],[270,8,280,6,"prototype"],[270,17,280,15],[270,18,280,16,"toJSON"],[270,24,280,22],[270,27,280,25],[270,36,280,34,"toJSON"],[270,42,280,40,"toJSON"],[270,43,280,41,"toJSONOptions"],[270,56,280,54],[270,58,280,56],[271,4,281,4],[271,8,281,8,"keepComments"],[271,20,281,20],[271,23,281,23,"toJSONOptions"],[271,36,281,36],[271,39,281,39,"Boolean"],[271,46,281,46],[271,47,281,47,"toJSONOptions"],[271,60,281,60],[271,61,281,61,"keepComments"],[271,73,281,73],[271,74,281,74],[271,77,281,77],[271,82,281,82],[272,4,282,4],[272,11,282,11,"util"],[272,15,282,15],[272,16,282,16,"toObject"],[272,24,282,24],[272,25,282,25],[272,26,283,8],[272,35,283,17],[272,37,283,20],[272,41,283,24],[272,42,283,25,"_editionToJSON"],[272,56,283,39],[272,57,283,40],[272,58,283,41],[272,60,284,8],[272,66,284,14],[272,68,284,20],[272,72,284,24],[272,73,284,25,"rule"],[272,77,284,29],[272,82,284,34],[272,92,284,44],[272,96,284,48],[272,100,284,52],[272,101,284,53,"rule"],[272,105,284,57],[272,109,284,61,"undefined"],[272,118,284,70],[272,120,285,8],[272,126,285,14],[272,128,285,20],[272,132,285,24],[272,133,285,25,"type"],[272,137,285,29],[272,139,286,8],[272,143,286,12],[272,145,286,20],[272,149,286,24],[272,150,286,25,"id"],[272,152,286,27],[272,154,287,8],[272,162,287,16],[272,164,287,20],[272,168,287,24],[272,169,287,25,"extend"],[272,175,287,31],[272,177,288,8],[272,186,288,17],[272,188,288,20],[272,192,288,24],[272,193,288,25,"options"],[272,200,288,32],[272,202,289,8],[272,211,289,17],[272,213,289,20,"keepComments"],[272,225,289,32],[272,228,289,35],[272,232,289,39],[272,233,289,40,"comment"],[272,240,289,47],[272,243,289,50,"undefined"],[272,252,289,59],[272,253,290,5],[272,254,290,6],[273,2,291,0],[273,3,291,1],[275,2,293,0],[276,0,294,0],[277,0,295,0],[278,0,296,0],[279,0,297,0],[280,2,298,0,"Field"],[280,7,298,5],[280,8,298,6,"prototype"],[280,17,298,15],[280,18,298,16,"resolve"],[280,25,298,23],[280,28,298,26],[280,37,298,35,"resolve"],[280,44,298,42,"resolve"],[280,45,298,42],[280,47,298,45],[281,4,300,4],[281,8,300,8],[281,12,300,12],[281,13,300,13,"resolved"],[281,21,300,21],[281,23,301,8],[281,30,301,15],[281,34,301,19],[282,4,303,4],[282,8,303,8],[282,9,303,9],[282,13,303,13],[282,14,303,14,"typeDefault"],[282,25,303,25],[282,28,303,28,"types"],[282,33,303,33],[282,34,303,34,"defaults"],[282,42,303,42],[282,43,303,43],[282,47,303,47],[282,48,303,48,"type"],[282,52,303,52],[282,53,303,53],[282,59,303,59,"undefined"],[282,68,303,68],[282,70,303,70],[283,6,303,72],[284,6,304,8],[284,10,304,12],[284,11,304,13,"resolvedType"],[284,23,304,25],[284,26,304,28],[284,27,304,29],[284,31,304,33],[284,32,304,34,"declaringField"],[284,46,304,48],[284,49,304,51],[284,53,304,55],[284,54,304,56,"declaringField"],[284,68,304,70],[284,69,304,71,"parent"],[284,75,304,77],[284,78,304,80],[284,82,304,84],[284,83,304,85,"parent"],[284,89,304,91],[284,91,304,93,"lookupTypeOrEnum"],[284,107,304,109],[284,108,304,110],[284,112,304,114],[284,113,304,115,"type"],[284,117,304,119],[284,118,304,120],[285,6,305,8],[285,10,305,12],[285,14,305,16],[285,15,305,17,"resolvedType"],[285,27,305,29],[285,39,305,41,"Type"],[285,43,305,45],[285,45,306,12],[285,49,306,16],[285,50,306,17,"typeDefault"],[285,61,306,28],[285,64,306,31],[285,68,306,35],[285,69,306,36],[286,8,307,13],[287,8,308,12],[287,12,308,16],[287,13,308,17,"typeDefault"],[287,24,308,28],[287,27,308,31],[287,31,308,35],[287,32,308,36,"resolvedType"],[287,44,308,48],[287,45,308,49,"values"],[287,51,308,55],[287,52,308,56,"Object"],[287,58,308,62],[287,59,308,63,"keys"],[287,63,308,67],[287,64,308,68],[287,68,308,72],[287,69,308,73,"resolvedType"],[287,81,308,85],[287,82,308,86,"values"],[287,88,308,92],[287,89,308,93],[287,90,308,94],[287,91,308,95],[287,92,308,96],[287,93,308,97],[287,94,308,98],[287,95,308,99],[288,4,309,4],[288,5,309,5],[288,11,309,11],[288,15,309,15],[288,19,309,19],[288,20,309,20,"options"],[288,27,309,27],[288,31,309,31],[288,35,309,35],[288,36,309,36,"options"],[288,43,309,43],[288,44,309,44,"proto3_optional"],[288,59,309,59],[288,61,309,61],[289,6,310,8],[290,6,311,8],[290,10,311,12],[290,11,311,13,"typeDefault"],[290,22,311,24],[290,25,311,27],[290,29,311,31],[291,4,312,4],[293,4,314,4],[294,4,315,4],[294,8,315,8],[294,12,315,12],[294,13,315,13,"options"],[294,20,315,20],[294,24,315,24],[294,28,315,28],[294,29,315,29,"options"],[294,36,315,36],[294,37,315,37],[294,46,315,46],[294,47,315,47],[294,51,315,51],[294,55,315,55],[294,57,315,57],[295,6,316,8],[295,10,316,12],[295,11,316,13,"typeDefault"],[295,22,316,24],[295,25,316,27],[295,29,316,31],[295,30,316,32,"options"],[295,37,316,39],[295,38,316,40],[295,47,316,49],[295,48,316,50],[296,6,317,8],[296,10,317,12],[296,14,317,16],[296,15,317,17,"resolvedType"],[296,27,317,29],[296,39,317,41,"Enum"],[296,43,317,45],[296,47,317,49],[296,54,317,56],[296,58,317,60],[296,59,317,61,"typeDefault"],[296,70,317,72],[296,75,317,77],[296,83,317,85],[296,85,318,12],[296,89,318,16],[296,90,318,17,"typeDefault"],[296,101,318,28],[296,104,318,31],[296,108,318,35],[296,109,318,36,"resolvedType"],[296,121,318,48],[296,122,318,49,"values"],[296,128,318,55],[296,129,318,56],[296,133,318,60],[296,134,318,61,"typeDefault"],[296,145,318,72],[296,146,318,73],[297,4,319,4],[299,4,321,4],[300,4,322,4],[300,8,322,8],[300,12,322,12],[300,13,322,13,"options"],[300,20,322,20],[300,22,322,22],[301,6,323,8],[301,10,323,12],[301,14,323,16],[301,15,323,17,"options"],[301,22,323,24],[301,23,323,25,"packed"],[301,29,323,31],[301,34,323,36,"undefined"],[301,43,323,45],[301,47,323,49],[301,51,323,53],[301,52,323,54,"resolvedType"],[301,64,323,66],[301,68,323,70],[301,70,323,72],[301,74,323,76],[301,75,323,77,"resolvedType"],[301,87,323,89],[301,99,323,101,"Enum"],[301,103,323,105],[301,104,323,106],[301,106,324,12],[301,113,324,19],[301,117,324,23],[301,118,324,24,"options"],[301,125,324,31],[301,126,324,32,"packed"],[301,132,324,38],[302,6,325,8],[302,10,325,12],[302,11,325,13,"Object"],[302,17,325,19],[302,18,325,20,"keys"],[302,22,325,24],[302,23,325,25],[302,27,325,29],[302,28,325,30,"options"],[302,35,325,37],[302,36,325,38],[302,37,325,39,"length"],[302,43,325,45],[302,45,326,12],[302,49,326,16],[302,50,326,17,"options"],[302,57,326,24],[302,60,326,27,"undefined"],[302,69,326,36],[303,4,327,4],[305,4,329,4],[306,4,330,4],[306,8,330,8],[306,12,330,12],[306,13,330,13,"long"],[306,17,330,17],[306,19,330,19],[307,6,331,8],[307,10,331,12],[307,11,331,13,"typeDefault"],[307,22,331,24],[307,25,331,27,"util"],[307,29,331,31],[307,30,331,32,"Long"],[307,34,331,36],[307,35,331,37,"fromNumber"],[307,45,331,47],[307,46,331,48],[307,50,331,52],[307,51,331,53,"typeDefault"],[307,62,331,64],[307,64,331,66],[307,68,331,70],[307,69,331,71,"type"],[307,73,331,75],[307,74,331,76,"charAt"],[307,80,331,82],[307,81,331,83],[307,82,331,84],[307,83,331,85],[307,88,331,90],[307,91,331,93],[307,92,331,94],[309,6,333,8],[310,6,334,8],[310,10,334,12,"Object"],[310,16,334,18],[310,17,334,19,"freeze"],[310,23,334,25],[310,25,335,12,"Object"],[310,31,335,18],[310,32,335,19,"freeze"],[310,38,335,25],[310,39,335,26],[310,43,335,30],[310,44,335,31,"typeDefault"],[310,55,335,42],[310,56,335,43],[310,57,335,44],[310,58,335,45],[311,4,337,4],[311,5,337,5],[311,11,337,11],[311,15,337,15],[311,19,337,19],[311,20,337,20,"bytes"],[311,25,337,25],[311,29,337,29],[311,36,337,36],[311,40,337,40],[311,41,337,41,"typeDefault"],[311,52,337,52],[311,57,337,57],[311,65,337,65],[311,67,337,67],[312,6,338,8],[312,10,338,12,"buf"],[312,13,338,15],[313,6,339,8],[313,10,339,12,"util"],[313,14,339,16],[313,15,339,17,"base64"],[313,21,339,23],[313,22,339,24,"test"],[313,26,339,28],[313,27,339,29],[313,31,339,33],[313,32,339,34,"typeDefault"],[313,43,339,45],[313,44,339,46],[313,46,340,12,"util"],[313,50,340,16],[313,51,340,17,"base64"],[313,57,340,23],[313,58,340,24,"decode"],[313,64,340,30],[313,65,340,31],[313,69,340,35],[313,70,340,36,"typeDefault"],[313,81,340,47],[313,83,340,49,"buf"],[313,86,340,52],[313,89,340,55,"util"],[313,93,340,59],[313,94,340,60,"newBuffer"],[313,103,340,69],[313,104,340,70,"util"],[313,108,340,74],[313,109,340,75,"base64"],[313,115,340,81],[313,116,340,82,"length"],[313,122,340,88],[313,123,340,89],[313,127,340,93],[313,128,340,94,"typeDefault"],[313,139,340,105],[313,140,340,106],[313,141,340,107],[313,143,340,109],[313,144,340,110],[313,145,340,111],[313,146,340,112],[313,151,342,12,"util"],[313,155,342,16],[313,156,342,17,"utf8"],[313,160,342,21],[313,161,342,22,"write"],[313,166,342,27],[313,167,342,28],[313,171,342,32],[313,172,342,33,"typeDefault"],[313,183,342,44],[313,185,342,46,"buf"],[313,188,342,49],[313,191,342,52,"util"],[313,195,342,56],[313,196,342,57,"newBuffer"],[313,205,342,66],[313,206,342,67,"util"],[313,210,342,71],[313,211,342,72,"utf8"],[313,215,342,76],[313,216,342,77,"length"],[313,222,342,83],[313,223,342,84],[313,227,342,88],[313,228,342,89,"typeDefault"],[313,239,342,100],[313,240,342,101],[313,241,342,102],[313,243,342,104],[313,244,342,105],[313,245,342,106],[314,6,343,8],[314,10,343,12],[314,11,343,13,"typeDefault"],[314,22,343,24],[314,25,343,27,"buf"],[314,28,343,30],[315,4,344,4],[317,4,346,4],[318,4,347,4],[318,8,347,8],[318,12,347,12],[318,13,347,13,"map"],[318,16,347,16],[318,18,348,8],[318,22,348,12],[318,23,348,13,"defaultValue"],[318,35,348,25],[318,38,348,28,"util"],[318,42,348,32],[318,43,348,33,"emptyObject"],[318,54,348,44],[318,55,348,45],[318,60,349,9],[318,64,349,13],[318,68,349,17],[318,69,349,18,"repeated"],[318,77,349,26],[318,79,350,8],[318,83,350,12],[318,84,350,13,"defaultValue"],[318,96,350,25],[318,99,350,28,"util"],[318,103,350,32],[318,104,350,33,"emptyArray"],[318,114,350,43],[318,115,350,44],[318,120,352,8],[318,124,352,12],[318,125,352,13,"defaultValue"],[318,137,352,25],[318,140,352,28],[318,144,352,32],[318,145,352,33,"typeDefault"],[318,156,352,44],[320,4,354,4],[321,4,355,4],[321,8,355,8],[321,12,355,12],[321,13,355,13,"parent"],[321,19,355,19],[321,31,355,31,"Type"],[321,35,355,35],[321,37,356,8],[321,41,356,12],[321,42,356,13,"parent"],[321,48,356,19],[321,49,356,20,"ctor"],[321,53,356,24],[321,54,356,25,"prototype"],[321,63,356,34],[321,64,356,35],[321,68,356,39],[321,69,356,40,"name"],[321,73,356,44],[321,74,356,45],[321,77,356,48],[321,81,356,52],[321,82,356,53,"defaultValue"],[321,94,356,65],[322,4,358,4],[322,11,358,11,"ReflectionObject"],[322,27,358,27],[322,28,358,28,"prototype"],[322,37,358,37],[322,38,358,38,"resolve"],[322,45,358,45],[322,46,358,46,"call"],[322,50,358,50],[322,51,358,51],[322,55,358,55],[322,56,358,56],[323,2,359,0],[323,3,359,1],[325,2,361,0],[326,0,362,0],[327,0,363,0],[328,0,364,0],[329,0,365,0],[330,0,366,0],[331,2,367,0,"Field"],[331,7,367,5],[331,8,367,6,"prototype"],[331,17,367,15],[331,18,367,16,"_inferLegacyProtoFeatures"],[331,43,367,41],[331,46,367,44],[331,55,367,53,"_inferLegacyProtoFeatures"],[331,80,367,78,"_inferLegacyProtoFeatures"],[331,81,367,79,"edition"],[331,88,367,86],[331,90,367,88],[332,4,368,4],[332,8,368,8,"edition"],[332,15,368,15],[332,20,368,20],[332,28,368,28],[332,32,368,32,"edition"],[332,39,368,39],[332,44,368,44],[332,52,368,52],[332,54,368,54],[333,6,369,8],[333,13,369,15],[333,14,369,16],[333,15,369,17],[334,4,370,4],[335,4,372,4],[335,8,372,8,"features"],[335,16,372,16],[335,19,372,19],[335,20,372,20],[335,21,372,21],[336,4,374,4],[336,8,374,8],[336,12,374,12],[336,13,374,13,"rule"],[336,17,374,17],[336,22,374,22],[336,32,374,32],[336,34,374,34],[337,6,375,8,"features"],[337,14,375,16],[337,15,375,17,"field_presence"],[337,29,375,31],[337,32,375,34],[337,49,375,51],[338,4,376,4],[339,4,377,4],[339,8,377,8],[339,12,377,12],[339,13,377,13,"parent"],[339,19,377,19],[339,23,377,23,"types"],[339,28,377,28],[339,29,377,29,"defaults"],[339,37,377,37],[339,38,377,38],[339,42,377,42],[339,43,377,43,"type"],[339,47,377,47],[339,48,377,48],[339,53,377,53,"undefined"],[339,62,377,62],[339,64,377,64],[340,6,378,8],[341,6,379,8],[342,6,380,8],[343,6,381,8],[343,10,381,12,"type"],[343,14,381,16],[343,17,381,19],[343,21,381,23],[343,22,381,24,"parent"],[343,28,381,30],[343,29,381,31,"get"],[343,32,381,34],[343,33,381,35],[343,37,381,39],[343,38,381,40,"type"],[343,42,381,44],[343,43,381,45,"split"],[343,48,381,50],[343,49,381,51],[343,52,381,54],[343,53,381,55],[343,54,381,56,"pop"],[343,57,381,59],[343,58,381,60],[343,59,381,61],[343,60,381,62],[344,6,382,8],[344,10,382,12,"type"],[344,14,382,16],[344,18,382,20,"type"],[344,22,382,24],[344,34,382,36,"Type"],[344,38,382,40],[344,42,382,44,"type"],[344,46,382,48],[344,47,382,49,"group"],[344,52,382,54],[344,54,382,56],[345,8,383,12,"features"],[345,16,383,20],[345,17,383,21,"message_encoding"],[345,33,383,37],[345,36,383,40],[345,47,383,51],[346,6,384,8],[347,4,385,4],[348,4,386,4],[348,8,386,8],[348,12,386,12],[348,13,386,13,"getOption"],[348,22,386,22],[348,23,386,23],[348,31,386,31],[348,32,386,32],[348,37,386,37],[348,41,386,41],[348,43,386,43],[349,6,387,8,"features"],[349,14,387,16],[349,15,387,17,"repeated_field_encoding"],[349,38,387,40],[349,41,387,43],[349,49,387,51],[350,4,388,4],[350,5,388,5],[350,11,388,11],[350,15,388,15],[350,19,388,19],[350,20,388,20,"getOption"],[350,29,388,29],[350,30,388,30],[350,38,388,38],[350,39,388,39],[350,44,388,44],[350,49,388,49],[350,51,388,51],[351,6,389,8,"features"],[351,14,389,16],[351,15,389,17,"repeated_field_encoding"],[351,38,389,40],[351,41,389,43],[351,51,389,53],[352,4,390,4],[353,4,391,4],[353,11,391,11,"features"],[353,19,391,19],[354,2,392,0],[354,3,392,1],[356,2,394,0],[357,0,395,0],[358,0,396,0],[359,2,397,0,"Field"],[359,7,397,5],[359,8,397,6,"prototype"],[359,17,397,15],[359,18,397,16,"_resolveFeatures"],[359,34,397,32],[359,37,397,35],[359,46,397,44,"_resolveFeatures"],[359,62,397,60,"_resolveFeatures"],[359,63,397,61,"edition"],[359,70,397,68],[359,72,397,70],[360,4,398,4],[360,11,398,11,"ReflectionObject"],[360,27,398,27],[360,28,398,28,"prototype"],[360,37,398,37],[360,38,398,38,"_resolveFeatures"],[360,54,398,54],[360,55,398,55,"call"],[360,59,398,59],[360,60,398,60],[360,64,398,64],[360,66,398,66],[360,70,398,70],[360,71,398,71,"_edition"],[360,79,398,79],[360,83,398,83,"edition"],[360,90,398,90],[360,91,398,91],[361,2,399,0],[361,3,399,1],[363,2,401,0],[364,0,402,0],[365,0,403,0],[366,0,404,0],[367,0,405,0],[368,0,406,0],[369,0,407,0],[370,0,408,0],[372,2,410,0],[373,0,411,0],[374,0,412,0],[375,0,413,0],[376,0,414,0],[377,0,415,0],[378,0,416,0],[379,0,417,0],[380,0,418,0],[381,0,419,0],[382,0,420,0],[383,2,421,0,"Field"],[383,7,421,5],[383,8,421,6,"d"],[383,9,421,7],[383,12,421,10],[383,21,421,19,"decorateField"],[383,34,421,32,"decorateField"],[383,35,421,33,"fieldId"],[383,42,421,40],[383,44,421,42,"fieldType"],[383,53,421,51],[383,55,421,53,"fieldRule"],[383,64,421,62],[383,66,421,64,"defaultValue"],[383,78,421,76],[383,80,421,78],[384,4,423,4],[385,4,424,4],[385,8,424,8],[385,15,424,15,"fieldType"],[385,24,424,24],[385,29,424,29],[385,39,424,39],[385,41,425,8,"fieldType"],[385,50,425,17],[385,53,425,20,"util"],[385,57,425,24],[385,58,425,25,"decorateType"],[385,70,425,37],[385,71,425,38,"fieldType"],[385,80,425,47],[385,81,425,48],[385,82,425,49,"name"],[385,86,425,53],[387,4,427,4],[388,4,427,4],[388,9,428,9],[388,13,428,13,"fieldType"],[388,22,428,22],[388,26,428,26],[388,33,428,33,"fieldType"],[388,42,428,42],[388,47,428,47],[388,55,428,55],[388,57,429,8,"fieldType"],[388,66,429,17],[388,69,429,20,"util"],[388,73,429,24],[388,74,429,25,"decorateEnum"],[388,86,429,37],[388,87,429,38,"fieldType"],[388,96,429,47],[388,97,429,48],[388,98,429,49,"name"],[388,102,429,53],[389,4,431,4],[389,11,431,11],[389,20,431,20,"fieldDecorator"],[389,34,431,34,"fieldDecorator"],[389,35,431,35,"prototype"],[389,44,431,44],[389,46,431,46,"fieldName"],[389,55,431,55],[389,57,431,57],[390,6,432,8,"util"],[390,10,432,12],[390,11,432,13,"decorateType"],[390,23,432,25],[390,24,432,26,"prototype"],[390,33,432,35],[390,34,432,36,"constructor"],[390,45,432,47],[390,46,432,48],[390,47,433,13,"add"],[390,50,433,16],[390,51,433,17],[390,55,433,21,"Field"],[390,60,433,26],[390,61,433,27,"fieldName"],[390,70,433,36],[390,72,433,38,"fieldId"],[390,79,433,45],[390,81,433,47,"fieldType"],[390,90,433,56],[390,92,433,58,"fieldRule"],[390,101,433,67],[390,103,433,69],[391,8,433,71],[391,17,433,80],[391,19,433,82,"defaultValue"],[392,6,433,95],[392,7,433,96],[392,8,433,97],[392,9,433,98],[393,4,434,4],[393,5,434,5],[394,2,435,0],[394,3,435,1],[396,2,437,0],[397,0,438,0],[398,0,439,0],[399,0,440,0],[400,0,441,0],[401,0,442,0],[402,0,443,0],[403,0,444,0],[404,0,445,0],[405,0,446,0],[406,0,447,0],[407,2,448,0],[409,2,450,0],[410,2,451,0,"Field"],[410,7,451,5],[410,8,451,6,"_configure"],[410,18,451,16],[410,21,451,19],[410,30,451,28,"configure"],[410,39,451,37,"configure"],[410,40,451,38,"Type_"],[410,45,451,43],[410,47,451,45],[411,4,452,4,"Type"],[411,8,452,8],[411,11,452,11,"Type_"],[411,16,452,16],[412,2,453,0],[412,3,453,1],[413,0,453,2],[413,3]],"functionMap":{"names":["<global>","fromJSON","Field","Object.defineProperty$argument_2.get","setOption","toJSON","resolve","_inferLegacyProtoFeatures","_resolveFeatures","decorateField","fieldDecorator","configure"],"mappings":"AAA;iBCoC;CDM;AEgB;CF4H;SGS;KHE;SGU;KHE;SGW;KHG;SGU;KHE;SGU;KHO;4BIM;CJE;yBKuB;CLW;0BMO;CN6D;4COQ;CPyB;mCQK;CRE;USsB;WCU;KDG;CTC;mBWgB;CXE"}},"type":"js/module"}]}