{"dependencies":[{"name":"./channel-options","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":26,"index":764},"end":{"line":20,"column":54,"index":792}}],"key":"1cJpQ91whmlI03qs01dziUmYuEw=","exportNames":["*"]}},{"name":"./subchannel","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":21,"index":815},"end":{"line":21,"column":44,"index":838}}],"key":"2NqMgElj9ImyaUKPjCzv4WJJ/l8=","exportNames":["*"]}},{"name":"./subchannel-address","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":29,"index":869},"end":{"line":22,"column":60,"index":900}}],"key":"s7maFfe6oUZ6E4vQAG2rWwUHpfM=","exportNames":["*"]}},{"name":"./uri-parser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":21,"index":923},"end":{"line":23,"column":44,"index":946}}],"key":"esiO732HplrDMf1oXKGdpawa/aM=","exportNames":["*"]}},{"name":"./transport","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":20,"index":968},"end":{"line":24,"column":42,"index":990}}],"key":"cHQvsGFlFCXS45r9C4O851n7Lf4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getSubchannelPool = exports.SubchannelPool = void 0;\n  const channel_options_1 = require(_dependencyMap[0], \"./channel-options\");\n  const subchannel_1 = require(_dependencyMap[1], \"./subchannel\");\n  const subchannel_address_1 = require(_dependencyMap[2], \"./subchannel-address\");\n  const uri_parser_1 = require(_dependencyMap[3], \"./uri-parser\");\n  const transport_1 = require(_dependencyMap[4], \"./transport\");\n  // 10 seconds in milliseconds. This value is arbitrary.\n  /**\n   * The amount of time in between checks for dropping subchannels that have no\n   * other references\n   */\n  const REF_CHECK_INTERVAL = 10000;\n  class SubchannelPool {\n    /**\n     * A pool of subchannels use for making connections. Subchannels with the\n     * exact same parameters will be reused.\n     */\n    constructor() {\n      this.pool = Object.create(null);\n      /**\n       * A timer of a task performing a periodic subchannel cleanup.\n       */\n      this.cleanupTimer = null;\n    }\n    /**\n     * Unrefs all unused subchannels and cancels the cleanup task if all\n     * subchannels have been unrefed.\n     */\n    unrefUnusedSubchannels() {\n      let allSubchannelsUnrefed = true;\n      /* These objects are created with Object.create(null), so they do not\n       * have a prototype, which means that for (... in ...) loops over them\n       * do not need to be filtered */\n      // eslint-disable-disable-next-line:forin\n      for (const channelTarget in this.pool) {\n        const subchannelObjArray = this.pool[channelTarget];\n        const refedSubchannels = subchannelObjArray.filter(value => !value.subchannel.unrefIfOneRef());\n        if (refedSubchannels.length > 0) {\n          allSubchannelsUnrefed = false;\n        }\n        /* For each subchannel in the pool, try to unref it if it has\n         * exactly one ref (which is the ref from the pool itself). If that\n         * does happen, remove the subchannel from the pool */\n        this.pool[channelTarget] = refedSubchannels;\n      }\n      /* Currently we do not delete keys with empty values. If that results\n       * in significant memory usage we should change it. */\n      // Cancel the cleanup task if all subchannels have been unrefed.\n      if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\n        clearInterval(this.cleanupTimer);\n        this.cleanupTimer = null;\n      }\n    }\n    /**\n     * Ensures that the cleanup task is spawned.\n     */\n    ensureCleanupTask() {\n      var _a, _b;\n      if (this.cleanupTimer === null) {\n        this.cleanupTimer = setInterval(() => {\n          this.unrefUnusedSubchannels();\n        }, REF_CHECK_INTERVAL);\n        // Unref because this timer should not keep the event loop running.\n        // Call unref only if it exists to address electron/electron#21162\n        (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    }\n    /**\n     * Get a subchannel if one already exists with exactly matching parameters.\n     * Otherwise, create and save a subchannel with those parameters.\n     * @param channelTarget\n     * @param subchannelTarget\n     * @param channelArguments\n     * @param channelCredentials\n     */\n    getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\n      this.ensureCleanupTask();\n      const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);\n      if (channelTarget in this.pool) {\n        const subchannelObjArray = this.pool[channelTarget];\n        for (const subchannelObj of subchannelObjArray) {\n          if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) && (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {\n            return subchannelObj.subchannel;\n          }\n        }\n      }\n      // If we get here, no matching subchannel was found\n      const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));\n      if (!(channelTarget in this.pool)) {\n        this.pool[channelTarget] = [];\n      }\n      this.pool[channelTarget].push({\n        subchannelAddress: subchannelTarget,\n        channelArguments,\n        channelCredentials,\n        subchannel\n      });\n      subchannel.ref();\n      return subchannel;\n    }\n  }\n  exports.SubchannelPool = SubchannelPool;\n  const globalSubchannelPool = new SubchannelPool();\n  /**\n   * Get either the global subchannel pool, or a new subchannel pool.\n   * @param global\n   */\n  function getSubchannelPool(global) {\n    if (global) {\n      return globalSubchannelPool;\n    } else {\n      return new SubchannelPool();\n    }\n  }\n  exports.getSubchannelPool = getSubchannelPool;\n});","lineCount":138,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"getSubchannelPool"],[23,27,19,25],[23,30,19,28,"exports"],[23,37,19,35],[23,38,19,36,"SubchannelPool"],[23,52,19,50],[23,55,19,53],[23,60,19,58],[23,61,19,59],[24,2,20,0],[24,8,20,6,"channel_options_1"],[24,25,20,23],[24,28,20,26,"require"],[24,35,20,33],[24,36,20,33,"_dependencyMap"],[24,50,20,33],[24,74,20,53],[24,75,20,54],[25,2,21,0],[25,8,21,6,"subchannel_1"],[25,20,21,18],[25,23,21,21,"require"],[25,30,21,28],[25,31,21,28,"_dependencyMap"],[25,45,21,28],[25,64,21,43],[25,65,21,44],[26,2,22,0],[26,8,22,6,"subchannel_address_1"],[26,28,22,26],[26,31,22,29,"require"],[26,38,22,36],[26,39,22,36,"_dependencyMap"],[26,53,22,36],[26,80,22,59],[26,81,22,60],[27,2,23,0],[27,8,23,6,"uri_parser_1"],[27,20,23,18],[27,23,23,21,"require"],[27,30,23,28],[27,31,23,28,"_dependencyMap"],[27,45,23,28],[27,64,23,43],[27,65,23,44],[28,2,24,0],[28,8,24,6,"transport_1"],[28,19,24,17],[28,22,24,20,"require"],[28,29,24,27],[28,30,24,27,"_dependencyMap"],[28,44,24,27],[28,62,24,41],[28,63,24,42],[29,2,25,0],[30,2,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,2,30,0],[34,8,30,6,"REF_CHECK_INTERVAL"],[34,26,30,24],[34,29,30,27],[34,34,30,32],[35,2,31,0],[35,8,31,6,"SubchannelPool"],[35,22,31,20],[35,23,31,21],[36,4,32,4],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,4,36,4,"constructor"],[40,15,36,15,"constructor"],[40,16,36,15],[40,18,36,18],[41,6,37,8],[41,10,37,12],[41,11,37,13,"pool"],[41,15,37,17],[41,18,37,20,"Object"],[41,24,37,26],[41,25,37,27,"create"],[41,31,37,33],[41,32,37,34],[41,36,37,38],[41,37,37,39],[42,6,38,8],[43,0,39,0],[44,0,40,0],[45,6,41,8],[45,10,41,12],[45,11,41,13,"cleanupTimer"],[45,23,41,25],[45,26,41,28],[45,30,41,32],[46,4,42,4],[47,4,43,4],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,4,47,4,"unrefUnusedSubchannels"],[51,26,47,26,"unrefUnusedSubchannels"],[51,27,47,26],[51,29,47,29],[52,6,48,8],[52,10,48,12,"allSubchannelsUnrefed"],[52,31,48,33],[52,34,48,36],[52,38,48,40],[53,6,49,8],[54,0,50,0],[55,0,51,0],[56,6,52,8],[57,6,53,8],[57,11,53,13],[57,17,53,19,"channelTarget"],[57,30,53,32],[57,34,53,36],[57,38,53,40],[57,39,53,41,"pool"],[57,43,53,45],[57,45,53,47],[58,8,54,12],[58,14,54,18,"subchannelObjArray"],[58,32,54,36],[58,35,54,39],[58,39,54,43],[58,40,54,44,"pool"],[58,44,54,48],[58,45,54,49,"channelTarget"],[58,58,54,62],[58,59,54,63],[59,8,55,12],[59,14,55,18,"refedSubchannels"],[59,30,55,34],[59,33,55,37,"subchannelObjArray"],[59,51,55,55],[59,52,55,56,"filter"],[59,58,55,62],[59,59,55,63,"value"],[59,64,55,68],[59,68,55,72],[59,69,55,73,"value"],[59,74,55,78],[59,75,55,79,"subchannel"],[59,85,55,89],[59,86,55,90,"unrefIfOneRef"],[59,99,55,103],[59,100,55,104],[59,101,55,105],[59,102,55,106],[60,8,56,12],[60,12,56,16,"refedSubchannels"],[60,28,56,32],[60,29,56,33,"length"],[60,35,56,39],[60,38,56,42],[60,39,56,43],[60,41,56,45],[61,10,57,16,"allSubchannelsUnrefed"],[61,31,57,37],[61,34,57,40],[61,39,57,45],[62,8,58,12],[63,8,59,12],[64,0,60,0],[65,0,61,0],[66,8,62,12],[66,12,62,16],[66,13,62,17,"pool"],[66,17,62,21],[66,18,62,22,"channelTarget"],[66,31,62,35],[66,32,62,36],[66,35,62,39,"refedSubchannels"],[66,51,62,55],[67,6,63,8],[68,6,64,8],[69,0,65,0],[70,6,66,8],[71,6,67,8],[71,10,67,12,"allSubchannelsUnrefed"],[71,31,67,33],[71,35,67,37],[71,39,67,41],[71,40,67,42,"cleanupTimer"],[71,52,67,54],[71,57,67,59],[71,61,67,63],[71,63,67,65],[72,8,68,12,"clearInterval"],[72,21,68,25],[72,22,68,26],[72,26,68,30],[72,27,68,31,"cleanupTimer"],[72,39,68,43],[72,40,68,44],[73,8,69,12],[73,12,69,16],[73,13,69,17,"cleanupTimer"],[73,25,69,29],[73,28,69,32],[73,32,69,36],[74,6,70,8],[75,4,71,4],[76,4,72,4],[77,0,73,0],[78,0,74,0],[79,4,75,4,"ensureCleanupTask"],[79,21,75,21,"ensureCleanupTask"],[79,22,75,21],[79,24,75,24],[80,6,76,8],[80,10,76,12,"_a"],[80,12,76,14],[80,14,76,16,"_b"],[80,16,76,18],[81,6,77,8],[81,10,77,12],[81,14,77,16],[81,15,77,17,"cleanupTimer"],[81,27,77,29],[81,32,77,34],[81,36,77,38],[81,38,77,40],[82,8,78,12],[82,12,78,16],[82,13,78,17,"cleanupTimer"],[82,25,78,29],[82,28,78,32,"setInterval"],[82,39,78,43],[82,40,78,44],[82,46,78,50],[83,10,79,16],[83,14,79,20],[83,15,79,21,"unrefUnusedSubchannels"],[83,37,79,43],[83,38,79,44],[83,39,79,45],[84,8,80,12],[84,9,80,13],[84,11,80,15,"REF_CHECK_INTERVAL"],[84,29,80,33],[84,30,80,34],[85,8,81,12],[86,8,82,12],[87,8,83,12],[87,9,83,13,"_b"],[87,11,83,15],[87,14,83,18],[87,15,83,19,"_a"],[87,17,83,21],[87,20,83,24],[87,24,83,28],[87,25,83,29,"cleanupTimer"],[87,37,83,41],[87,39,83,43,"unref"],[87,44,83,48],[87,50,83,54],[87,54,83,58],[87,58,83,62,"_b"],[87,60,83,64],[87,65,83,69],[87,70,83,74],[87,71,83,75],[87,74,83,78],[87,79,83,83],[87,80,83,84],[87,83,83,87,"_b"],[87,85,83,89],[87,86,83,90,"call"],[87,90,83,94],[87,91,83,95,"_a"],[87,93,83,97],[87,94,83,98],[88,6,84,8],[89,4,85,4],[90,4,86,4],[91,0,87,0],[92,0,88,0],[93,0,89,0],[94,0,90,0],[95,0,91,0],[96,0,92,0],[97,0,93,0],[98,4,94,4,"getOrCreateSubchannel"],[98,25,94,25,"getOrCreateSubchannel"],[98,26,94,26,"channelTargetUri"],[98,42,94,42],[98,44,94,44,"subchannelTarget"],[98,60,94,60],[98,62,94,62,"channelArguments"],[98,78,94,78],[98,80,94,80,"channelCredentials"],[98,98,94,98],[98,100,94,100],[99,6,95,8],[99,10,95,12],[99,11,95,13,"ensureCleanupTask"],[99,28,95,30],[99,29,95,31],[99,30,95,32],[100,6,96,8],[100,12,96,14,"channelTarget"],[100,25,96,27],[100,28,96,30],[100,29,96,31],[100,30,96,32],[100,32,96,34,"uri_parser_1"],[100,44,96,46],[100,45,96,47,"uriToString"],[100,56,96,58],[100,58,96,60,"channelTargetUri"],[100,74,96,76],[100,75,96,77],[101,6,97,8],[101,10,97,12,"channelTarget"],[101,23,97,25],[101,27,97,29],[101,31,97,33],[101,32,97,34,"pool"],[101,36,97,38],[101,38,97,40],[102,8,98,12],[102,14,98,18,"subchannelObjArray"],[102,32,98,36],[102,35,98,39],[102,39,98,43],[102,40,98,44,"pool"],[102,44,98,48],[102,45,98,49,"channelTarget"],[102,58,98,62],[102,59,98,63],[103,8,99,12],[103,13,99,17],[103,19,99,23,"subchannelObj"],[103,32,99,36],[103,36,99,40,"subchannelObjArray"],[103,54,99,58],[103,56,99,60],[104,10,100,16],[104,14,100,20],[104,15,100,21],[104,16,100,22],[104,18,100,24,"subchannel_address_1"],[104,38,100,44],[104,39,100,45,"subchannelAddressEqual"],[104,61,100,67],[104,63,100,69,"subchannelTarget"],[104,79,100,85],[104,81,100,87,"subchannelObj"],[104,94,100,100],[104,95,100,101,"subchannelAddress"],[104,112,100,118],[104,113,100,119],[104,117,101,20],[104,118,101,21],[104,119,101,22],[104,121,101,24,"channel_options_1"],[104,138,101,41],[104,139,101,42,"channelOptionsEqual"],[104,158,101,61],[104,160,101,63,"channelArguments"],[104,176,101,79],[104,178,101,81,"subchannelObj"],[104,191,101,94],[104,192,101,95,"channelArguments"],[104,208,101,111],[104,209,101,112],[104,213,102,20,"channelCredentials"],[104,231,102,38],[104,232,102,39,"_equals"],[104,239,102,46],[104,240,102,47,"subchannelObj"],[104,253,102,60],[104,254,102,61,"channelCredentials"],[104,272,102,79],[104,273,102,80],[104,275,102,82],[105,12,103,20],[105,19,103,27,"subchannelObj"],[105,32,103,40],[105,33,103,41,"subchannel"],[105,43,103,51],[106,10,104,16],[107,8,105,12],[108,6,106,8],[109,6,107,8],[110,6,108,8],[110,12,108,14,"subchannel"],[110,22,108,24],[110,25,108,27],[110,29,108,31,"subchannel_1"],[110,41,108,43],[110,42,108,44,"Subchannel"],[110,52,108,54],[110,53,108,55,"channelTargetUri"],[110,69,108,71],[110,71,108,73,"subchannelTarget"],[110,87,108,89],[110,89,108,91,"channelArguments"],[110,105,108,107],[110,107,108,109,"channelCredentials"],[110,125,108,127],[110,127,108,129],[110,131,108,133,"transport_1"],[110,142,108,144],[110,143,108,145,"Http2SubchannelConnector"],[110,167,108,169],[110,168,108,170,"channelTargetUri"],[110,184,108,186],[110,185,108,187],[110,186,108,188],[111,6,109,8],[111,10,109,12],[111,12,109,14,"channelTarget"],[111,25,109,27],[111,29,109,31],[111,33,109,35],[111,34,109,36,"pool"],[111,38,109,40],[111,39,109,41],[111,41,109,43],[112,8,110,12],[112,12,110,16],[112,13,110,17,"pool"],[112,17,110,21],[112,18,110,22,"channelTarget"],[112,31,110,35],[112,32,110,36],[112,35,110,39],[112,37,110,41],[113,6,111,8],[114,6,112,8],[114,10,112,12],[114,11,112,13,"pool"],[114,15,112,17],[114,16,112,18,"channelTarget"],[114,29,112,31],[114,30,112,32],[114,31,112,33,"push"],[114,35,112,37],[114,36,112,38],[115,8,113,12,"subchannelAddress"],[115,25,113,29],[115,27,113,31,"subchannelTarget"],[115,43,113,47],[116,8,114,12,"channelArguments"],[116,24,114,28],[117,8,115,12,"channelCredentials"],[117,26,115,30],[118,8,116,12,"subchannel"],[119,6,117,8],[119,7,117,9],[119,8,117,10],[120,6,118,8,"subchannel"],[120,16,118,18],[120,17,118,19,"ref"],[120,20,118,22],[120,21,118,23],[120,22,118,24],[121,6,119,8],[121,13,119,15,"subchannel"],[121,23,119,25],[122,4,120,4],[123,2,121,0],[124,2,122,0,"exports"],[124,9,122,7],[124,10,122,8,"SubchannelPool"],[124,24,122,22],[124,27,122,25,"SubchannelPool"],[124,41,122,39],[125,2,123,0],[125,8,123,6,"globalSubchannelPool"],[125,28,123,26],[125,31,123,29],[125,35,123,33,"SubchannelPool"],[125,49,123,47],[125,50,123,48],[125,51,123,49],[126,2,124,0],[127,0,125,0],[128,0,126,0],[129,0,127,0],[130,2,128,0],[130,11,128,9,"getSubchannelPool"],[130,28,128,26,"getSubchannelPool"],[130,29,128,27,"global"],[130,35,128,33],[130,37,128,35],[131,4,129,4],[131,8,129,8,"global"],[131,14,129,14],[131,16,129,16],[132,6,130,8],[132,13,130,15,"globalSubchannelPool"],[132,33,130,35],[133,4,131,4],[133,5,131,5],[133,11,132,9],[134,6,133,8],[134,13,133,15],[134,17,133,19,"SubchannelPool"],[134,31,133,33],[134,32,133,34],[134,33,133,35],[135,4,134,4],[136,2,135,0],[137,2,136,0,"exports"],[137,9,136,7],[137,10,136,8,"getSubchannelPool"],[137,27,136,25],[137,30,136,28,"getSubchannelPool"],[137,47,136,45],[138,0,136,46],[138,3]],"functionMap":{"names":["<global>","SubchannelPool","SubchannelPool#constructor","SubchannelPool#unrefUnusedSubchannels","subchannelObjArray.filter$argument_0","SubchannelPool#ensureCleanupTask","setInterval$argument_0","SubchannelPool#getOrCreateSubchannel","getSubchannelPool"],"mappings":"AAA;AC8B;ICK;KDM;IEK;+DCQ,0CD;KFgB;III;4CCG;aDE;KJK;IMS;KN0B;CDC;AQO;CRO"}},"type":"js/module"}]}