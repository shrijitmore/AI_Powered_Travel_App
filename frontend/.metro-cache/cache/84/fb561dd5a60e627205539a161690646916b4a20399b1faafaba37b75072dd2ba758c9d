{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\r\n   * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n   * @memberof util\r\n   * @namespace\r\n   */\n  var path = exports;\n  var isAbsolute =\n  /**\r\n   * Tests if the specified path is absolute.\r\n   * @param {string} path Path to test\r\n   * @returns {boolean} `true` if path is absolute\r\n   */\n  path.isAbsolute = function isAbsolute(path) {\n    return /^(?:\\/|\\w+:)/.test(path);\n  };\n  var normalize =\n  /**\r\n   * Normalizes the specified path.\r\n   * @param {string} path Path to normalize\r\n   * @returns {string} Normalized path\r\n   */\n  path.normalize = function normalize(path) {\n    path = path.replace(/\\\\/g, \"/\").replace(/\\/{2,}/g, \"/\");\n    var parts = path.split(\"/\"),\n      absolute = isAbsolute(path),\n      prefix = \"\";\n    if (absolute) prefix = parts.shift() + \"/\";\n    for (var i = 0; i < parts.length;) {\n      if (parts[i] === \"..\") {\n        if (i > 0 && parts[i - 1] !== \"..\") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;\n      } else if (parts[i] === \".\") parts.splice(i, 1);else ++i;\n    }\n    return prefix + parts.join(\"/\");\n  };\n\n  /**\r\n   * Resolves the specified include path against the specified origin path.\r\n   * @param {string} originPath Path to the origin file\r\n   * @param {string} includePath Include path relative to origin path\r\n   * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n   * @returns {string} Path to the include file\r\n   */\n  path.resolve = function resolve(originPath, includePath, alreadyNormalized) {\n    if (!alreadyNormalized) includePath = normalize(includePath);\n    if (isAbsolute(includePath)) return includePath;\n    if (!alreadyNormalized) originPath = normalize(originPath);\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\n  };\n});","lineCount":52,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,2,8,0],[9,6,8,4,"path"],[9,10,8,8],[9,13,8,11,"exports"],[9,20,8,18],[10,2,10,0],[10,6,10,4,"isAbsolute"],[10,16,10,14],[11,2,11,0],[12,0,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,2,16,0,"path"],[16,6,16,4],[16,7,16,5,"isAbsolute"],[16,17,16,15],[16,20,16,18],[16,29,16,27,"isAbsolute"],[16,39,16,37,"isAbsolute"],[16,40,16,38,"path"],[16,44,16,42],[16,46,16,44],[17,4,17,4],[17,11,17,11],[17,25,17,25],[17,26,17,26,"test"],[17,30,17,30],[17,31,17,31,"path"],[17,35,17,35],[17,36,17,36],[18,2,18,0],[18,3,18,1],[19,2,20,0],[19,6,20,4,"normalize"],[19,15,20,13],[20,2,21,0],[21,0,22,0],[22,0,23,0],[23,0,24,0],[24,0,25,0],[25,2,26,0,"path"],[25,6,26,4],[25,7,26,5,"normalize"],[25,16,26,14],[25,19,26,17],[25,28,26,26,"normalize"],[25,37,26,35,"normalize"],[25,38,26,36,"path"],[25,42,26,40],[25,44,26,42],[26,4,27,4,"path"],[26,8,27,8],[26,11,27,11,"path"],[26,15,27,15],[26,16,27,16,"replace"],[26,23,27,23],[26,24,27,24],[26,29,27,29],[26,31,27,31],[26,34,27,34],[26,35,27,35],[26,36,28,16,"replace"],[26,43,28,23],[26,44,28,24],[26,53,28,33],[26,55,28,35],[26,58,28,38],[26,59,28,39],[27,4,29,4],[27,8,29,8,"parts"],[27,13,29,13],[27,16,29,19,"path"],[27,20,29,23],[27,21,29,24,"split"],[27,26,29,29],[27,27,29,30],[27,30,29,33],[27,31,29,34],[28,6,30,8,"absolute"],[28,14,30,16],[28,17,30,19,"isAbsolute"],[28,27,30,29],[28,28,30,30,"path"],[28,32,30,34],[28,33,30,35],[29,6,31,8,"prefix"],[29,12,31,14],[29,15,31,19],[29,17,31,21],[30,4,32,4],[30,8,32,8,"absolute"],[30,16,32,16],[30,18,33,8,"prefix"],[30,24,33,14],[30,27,33,17,"parts"],[30,32,33,22],[30,33,33,23,"shift"],[30,38,33,28],[30,39,33,29],[30,40,33,30],[30,43,33,33],[30,46,33,36],[31,4,34,4],[31,9,34,9],[31,13,34,13,"i"],[31,14,34,14],[31,17,34,17],[31,18,34,18],[31,20,34,20,"i"],[31,21,34,21],[31,24,34,24,"parts"],[31,29,34,29],[31,30,34,30,"length"],[31,36,34,36],[31,39,34,39],[32,6,35,8],[32,10,35,12,"parts"],[32,15,35,17],[32,16,35,18,"i"],[32,17,35,19],[32,18,35,20],[32,23,35,25],[32,27,35,29],[32,29,35,31],[33,8,36,12],[33,12,36,16,"i"],[33,13,36,17],[33,16,36,20],[33,17,36,21],[33,21,36,25,"parts"],[33,26,36,30],[33,27,36,31,"i"],[33,28,36,32],[33,31,36,35],[33,32,36,36],[33,33,36,37],[33,38,36,42],[33,42,36,46],[33,44,37,16,"parts"],[33,49,37,21],[33,50,37,22,"splice"],[33,56,37,28],[33,57,37,29],[33,59,37,31,"i"],[33,60,37,32],[33,62,37,34],[33,63,37,35],[33,64,37,36],[33,65,37,37],[33,70,38,17],[33,74,38,21,"absolute"],[33,82,38,29],[33,84,39,16,"parts"],[33,89,39,21],[33,90,39,22,"splice"],[33,96,39,28],[33,97,39,29,"i"],[33,98,39,30],[33,100,39,32],[33,101,39,33],[33,102,39,34],[33,103,39,35],[33,108,41,16],[33,110,41,18,"i"],[33,111,41,19],[34,6,42,8],[34,7,42,9],[34,13,42,15],[34,17,42,19,"parts"],[34,22,42,24],[34,23,42,25,"i"],[34,24,42,26],[34,25,42,27],[34,30,42,32],[34,33,42,35],[34,35,43,12,"parts"],[34,40,43,17],[34,41,43,18,"splice"],[34,47,43,24],[34,48,43,25,"i"],[34,49,43,26],[34,51,43,28],[34,52,43,29],[34,53,43,30],[34,54,43,31],[34,59,45,12],[34,61,45,14,"i"],[34,62,45,15],[35,4,46,4],[36,4,47,4],[36,11,47,11,"prefix"],[36,17,47,17],[36,20,47,20,"parts"],[36,25,47,25],[36,26,47,26,"join"],[36,30,47,30],[36,31,47,31],[36,34,47,34],[36,35,47,35],[37,2,48,0],[37,3,48,1],[39,2,50,0],[40,0,51,0],[41,0,52,0],[42,0,53,0],[43,0,54,0],[44,0,55,0],[45,0,56,0],[46,2,57,0,"path"],[46,6,57,4],[46,7,57,5,"resolve"],[46,14,57,12],[46,17,57,15],[46,26,57,24,"resolve"],[46,33,57,31,"resolve"],[46,34,57,32,"originPath"],[46,44,57,42],[46,46,57,44,"includePath"],[46,57,57,55],[46,59,57,57,"alreadyNormalized"],[46,76,57,74],[46,78,57,76],[47,4,58,4],[47,8,58,8],[47,9,58,9,"alreadyNormalized"],[47,26,58,26],[47,28,59,8,"includePath"],[47,39,59,19],[47,42,59,22,"normalize"],[47,51,59,31],[47,52,59,32,"includePath"],[47,63,59,43],[47,64,59,44],[48,4,60,4],[48,8,60,8,"isAbsolute"],[48,18,60,18],[48,19,60,19,"includePath"],[48,30,60,30],[48,31,60,31],[48,33,61,8],[48,40,61,15,"includePath"],[48,51,61,26],[49,4,62,4],[49,8,62,8],[49,9,62,9,"alreadyNormalized"],[49,26,62,26],[49,28,63,8,"originPath"],[49,38,63,18],[49,41,63,21,"normalize"],[49,50,63,30],[49,51,63,31,"originPath"],[49,61,63,41],[49,62,63,42],[50,4,64,4],[50,11,64,11],[50,12,64,12,"originPath"],[50,22,64,22],[50,25,64,25,"originPath"],[50,35,64,35],[50,36,64,36,"replace"],[50,43,64,43],[50,44,64,44],[50,60,64,60],[50,62,64,62],[50,64,64,64],[50,65,64,65],[50,67,64,67,"length"],[50,73,64,73],[50,76,64,76,"normalize"],[50,85,64,85],[50,86,64,86,"originPath"],[50,96,64,96],[50,99,64,99],[50,102,64,102],[50,105,64,105,"includePath"],[50,116,64,116],[50,117,64,117],[50,120,64,120,"includePath"],[50,131,64,131],[51,2,65,0],[51,3,65,1],[52,0,65,2],[52,3]],"functionMap":{"names":["<global>","isAbsolute","normalize","resolve"],"mappings":"AAA;kBCe;CDE;iBEQ;CFsB;eGS;CHQ"}},"type":"js/module"}]}