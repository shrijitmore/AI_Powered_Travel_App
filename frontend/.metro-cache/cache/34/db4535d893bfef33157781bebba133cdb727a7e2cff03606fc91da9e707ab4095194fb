{"dependencies":[{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":11,"index":96},"end":{"line":9,"column":28,"index":113}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Common type constants.\n   * @namespace\n   */\n  var types = exports;\n  var util = require(_dependencyMap[0], \"./util\");\n  var s = [\"double\",\n  // 0\n  \"float\",\n  // 1\n  \"int32\",\n  // 2\n  \"uint32\",\n  // 3\n  \"sint32\",\n  // 4\n  \"fixed32\",\n  // 5\n  \"sfixed32\",\n  // 6\n  \"int64\",\n  // 7\n  \"uint64\",\n  // 8\n  \"sint64\",\n  // 9\n  \"fixed64\",\n  // 10\n  \"sfixed64\",\n  // 11\n  \"bool\",\n  // 12\n  \"string\",\n  // 13\n  \"bytes\" // 14\n  ];\n  function bake(values, offset) {\n    var i = 0,\n      o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n  }\n\n  /**\n   * Basic type wire types.\n   * @type {Object.<string,number>}\n   * @const\n   * @property {number} double=1 Fixed64 wire type\n   * @property {number} float=5 Fixed32 wire type\n   * @property {number} int32=0 Varint wire type\n   * @property {number} uint32=0 Varint wire type\n   * @property {number} sint32=0 Varint wire type\n   * @property {number} fixed32=5 Fixed32 wire type\n   * @property {number} sfixed32=5 Fixed32 wire type\n   * @property {number} int64=0 Varint wire type\n   * @property {number} uint64=0 Varint wire type\n   * @property {number} sint64=0 Varint wire type\n   * @property {number} fixed64=1 Fixed64 wire type\n   * @property {number} sfixed64=1 Fixed64 wire type\n   * @property {number} bool=0 Varint wire type\n   * @property {number} string=2 Ldelim wire type\n   * @property {number} bytes=2 Ldelim wire type\n   */\n  types.basic = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2, /* bytes    */2]);\n\n  /**\n   * Basic type defaults.\n   * @type {Object.<string,*>}\n   * @const\n   * @property {number} double=0 Double default\n   * @property {number} float=0 Float default\n   * @property {number} int32=0 Int32 default\n   * @property {number} uint32=0 Uint32 default\n   * @property {number} sint32=0 Sint32 default\n   * @property {number} fixed32=0 Fixed32 default\n   * @property {number} sfixed32=0 Sfixed32 default\n   * @property {number} int64=0 Int64 default\n   * @property {number} uint64=0 Uint64 default\n   * @property {number} sint64=0 Sint32 default\n   * @property {number} fixed64=0 Fixed64 default\n   * @property {number} sfixed64=0 Sfixed64 default\n   * @property {boolean} bool=false Bool default\n   * @property {string} string=\"\" String default\n   * @property {Array.<number>} bytes=Array(0) Bytes default\n   * @property {null} message=null Message default\n   */\n  types.defaults = bake([/* double   */0, /* float    */0, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */0, /* sfixed32 */0, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */0, /* sfixed64 */0, /* bool     */false, /* string   */\"\", /* bytes    */util.emptyArray, /* message  */null]);\n\n  /**\n   * Basic long type wire types.\n   * @type {Object.<string,number>}\n   * @const\n   * @property {number} int64=0 Varint wire type\n   * @property {number} uint64=0 Varint wire type\n   * @property {number} sint64=0 Varint wire type\n   * @property {number} fixed64=1 Fixed64 wire type\n   * @property {number} sfixed64=1 Fixed64 wire type\n   */\n  types.long = bake([/* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1], 7);\n\n  /**\n   * Allowed types for map keys with their associated wire type.\n   * @type {Object.<string,number>}\n   * @const\n   * @property {number} int32=0 Varint wire type\n   * @property {number} uint32=0 Varint wire type\n   * @property {number} sint32=0 Varint wire type\n   * @property {number} fixed32=5 Fixed32 wire type\n   * @property {number} sfixed32=5 Fixed32 wire type\n   * @property {number} int64=0 Varint wire type\n   * @property {number} uint64=0 Varint wire type\n   * @property {number} sint64=0 Varint wire type\n   * @property {number} fixed64=1 Fixed64 wire type\n   * @property {number} sfixed64=1 Fixed64 wire type\n   * @property {number} bool=0 Varint wire type\n   * @property {number} string=2 Ldelim wire type\n   */\n  types.mapKey = bake([/* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2], 2);\n\n  /**\n   * Allowed types for packed repeated fields with their associated wire type.\n   * @type {Object.<string,number>}\n   * @const\n   * @property {number} double=1 Fixed64 wire type\n   * @property {number} float=5 Fixed32 wire type\n   * @property {number} int32=0 Varint wire type\n   * @property {number} uint32=0 Varint wire type\n   * @property {number} sint32=0 Varint wire type\n   * @property {number} fixed32=5 Fixed32 wire type\n   * @property {number} sfixed32=5 Fixed32 wire type\n   * @property {number} int64=0 Varint wire type\n   * @property {number} uint64=0 Varint wire type\n   * @property {number} sint64=0 Varint wire type\n   * @property {number} fixed64=1 Fixed64 wire type\n   * @property {number} sfixed64=1 Fixed64 wire type\n   * @property {number} bool=0 Varint wire type\n   */\n  types.packed = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0]);\n});","lineCount":143,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,2,7,0],[8,6,7,4,"types"],[8,11,7,9],[8,14,7,12,"exports"],[8,21,7,19],[9,2,9,0],[9,6,9,4,"util"],[9,10,9,8],[9,13,9,11,"require"],[9,20,9,18],[9,21,9,18,"_dependencyMap"],[9,35,9,18],[9,48,9,27],[9,49,9,28],[10,2,11,0],[10,6,11,4,"s"],[10,7,11,5],[10,10,11,8],[10,11,12,4],[10,19,12,12],[11,2,12,16],[12,2,13,4],[12,9,13,11],[13,2,13,16],[14,2,14,4],[14,9,14,11],[15,2,14,16],[16,2,15,4],[16,10,15,12],[17,2,15,16],[18,2,16,4],[18,10,16,12],[19,2,16,16],[20,2,17,4],[20,11,17,13],[21,2,17,16],[22,2,18,4],[22,12,18,14],[23,2,18,16],[24,2,19,4],[24,9,19,11],[25,2,19,16],[26,2,20,4],[26,10,20,12],[27,2,20,16],[28,2,21,4],[28,10,21,12],[29,2,21,16],[30,2,22,4],[30,11,22,13],[31,2,22,16],[32,2,23,4],[32,12,23,14],[33,2,23,16],[34,2,24,4],[34,8,24,10],[35,2,24,16],[36,2,25,4],[36,10,25,12],[37,2,25,16],[38,2,26,4],[38,9,26,11],[38,10,26,16],[39,2,26,16],[39,3,27,1],[40,2,29,0],[40,11,29,9,"bake"],[40,15,29,13,"bake"],[40,16,29,14,"values"],[40,22,29,20],[40,24,29,22,"offset"],[40,30,29,28],[40,32,29,30],[41,4,30,4],[41,8,30,8,"i"],[41,9,30,9],[41,12,30,12],[41,13,30,13],[42,6,30,15,"o"],[42,7,30,16],[42,10,30,19],[42,11,30,20],[42,12,30,21],[43,4,31,4,"offset"],[43,10,31,10],[43,14,31,14],[43,15,31,15],[44,4,32,4],[44,11,32,11,"i"],[44,12,32,12],[44,15,32,15,"values"],[44,21,32,21],[44,22,32,22,"length"],[44,28,32,28],[44,30,32,30,"o"],[44,31,32,31],[44,32,32,32,"s"],[44,33,32,33],[44,34,32,34,"i"],[44,35,32,35],[44,38,32,38,"offset"],[44,44,32,44],[44,45,32,45],[44,46,32,46],[44,49,32,49,"values"],[44,55,32,55],[44,56,32,56,"i"],[44,57,32,57],[44,59,32,59],[44,60,32,60],[45,4,33,4],[45,11,33,11,"o"],[45,12,33,12],[46,2,34,0],[48,2,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,0,46,0],[59,0,47,0],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,2,56,0,"types"],[68,7,56,5],[68,8,56,6,"basic"],[68,13,56,11],[68,16,56,14,"bake"],[68,20,56,18],[68,21,56,19],[68,22,57,4],[68,36,57,19],[68,37,57,20],[68,39,58,4],[68,53,58,19],[68,54,58,20],[68,56,59,4],[68,70,59,19],[68,71,59,20],[68,73,60,4],[68,87,60,19],[68,88,60,20],[68,90,61,4],[68,104,61,19],[68,105,61,20],[68,107,62,4],[68,121,62,19],[68,122,62,20],[68,124,63,4],[68,138,63,19],[68,139,63,20],[68,141,64,4],[68,155,64,19],[68,156,64,20],[68,158,65,4],[68,172,65,19],[68,173,65,20],[68,175,66,4],[68,189,66,19],[68,190,66,20],[68,192,67,4],[68,206,67,19],[68,207,67,20],[68,209,68,4],[68,223,68,19],[68,224,68,20],[68,226,69,4],[68,240,69,19],[68,241,69,20],[68,243,70,4],[68,257,70,19],[68,258,70,20],[68,260,71,4],[68,274,71,19],[68,275,71,20],[68,276,72,1],[68,277,72,2],[70,2,74,0],[71,0,75,0],[72,0,76,0],[73,0,77,0],[74,0,78,0],[75,0,79,0],[76,0,80,0],[77,0,81,0],[78,0,82,0],[79,0,83,0],[80,0,84,0],[81,0,85,0],[82,0,86,0],[83,0,87,0],[84,0,88,0],[85,0,89,0],[86,0,90,0],[87,0,91,0],[88,0,92,0],[89,0,93,0],[90,0,94,0],[91,2,95,0,"types"],[91,7,95,5],[91,8,95,6,"defaults"],[91,16,95,14],[91,19,95,17,"bake"],[91,23,95,21],[91,24,95,22],[91,25,96,4],[91,39,96,19],[91,40,96,20],[91,42,97,4],[91,56,97,19],[91,57,97,20],[91,59,98,4],[91,73,98,19],[91,74,98,20],[91,76,99,4],[91,90,99,19],[91,91,99,20],[91,93,100,4],[91,107,100,19],[91,108,100,20],[91,110,101,4],[91,124,101,19],[91,125,101,20],[91,127,102,4],[91,141,102,19],[91,142,102,20],[91,144,103,4],[91,158,103,19],[91,159,103,20],[91,161,104,4],[91,175,104,19],[91,176,104,20],[91,178,105,4],[91,192,105,19],[91,193,105,20],[91,195,106,4],[91,209,106,19],[91,210,106,20],[91,212,107,4],[91,226,107,19],[91,227,107,20],[91,229,108,4],[91,243,108,19],[91,248,108,24],[91,250,109,4],[91,264,109,19],[91,266,109,21],[91,268,110,4],[91,282,110,19,"util"],[91,286,110,23],[91,287,110,24,"emptyArray"],[91,297,110,34],[91,299,111,4],[91,313,111,19],[91,317,111,23],[91,318,112,1],[91,319,112,2],[93,2,114,0],[94,0,115,0],[95,0,116,0],[96,0,117,0],[97,0,118,0],[98,0,119,0],[99,0,120,0],[100,0,121,0],[101,0,122,0],[102,0,123,0],[103,2,124,0,"types"],[103,7,124,5],[103,8,124,6,"long"],[103,12,124,10],[103,15,124,13,"bake"],[103,19,124,17],[103,20,124,18],[103,21,125,4],[103,35,125,19],[103,36,125,20],[103,38,126,4],[103,52,126,19],[103,53,126,20],[103,55,127,4],[103,69,127,19],[103,70,127,20],[103,72,128,4],[103,86,128,19],[103,87,128,20],[103,89,129,4],[103,103,129,19],[103,104,129,20],[103,105,130,1],[103,107,130,3],[103,108,130,4],[103,109,130,5],[105,2,132,0],[106,0,133,0],[107,0,134,0],[108,0,135,0],[109,0,136,0],[110,0,137,0],[111,0,138,0],[112,0,139,0],[113,0,140,0],[114,0,141,0],[115,0,142,0],[116,0,143,0],[117,0,144,0],[118,0,145,0],[119,0,146,0],[120,0,147,0],[121,0,148,0],[122,2,149,0,"types"],[122,7,149,5],[122,8,149,6,"mapKey"],[122,14,149,12],[122,17,149,15,"bake"],[122,21,149,19],[122,22,149,20],[122,23,150,4],[122,37,150,19],[122,38,150,20],[122,40,151,4],[122,54,151,19],[122,55,151,20],[122,57,152,4],[122,71,152,19],[122,72,152,20],[122,74,153,4],[122,88,153,19],[122,89,153,20],[122,91,154,4],[122,105,154,19],[122,106,154,20],[122,108,155,4],[122,122,155,19],[122,123,155,20],[122,125,156,4],[122,139,156,19],[122,140,156,20],[122,142,157,4],[122,156,157,19],[122,157,157,20],[122,159,158,4],[122,173,158,19],[122,174,158,20],[122,176,159,4],[122,190,159,19],[122,191,159,20],[122,193,160,4],[122,207,160,19],[122,208,160,20],[122,210,161,4],[122,224,161,19],[122,225,161,20],[122,226,162,1],[122,228,162,3],[122,229,162,4],[122,230,162,5],[124,2,164,0],[125,0,165,0],[126,0,166,0],[127,0,167,0],[128,0,168,0],[129,0,169,0],[130,0,170,0],[131,0,171,0],[132,0,172,0],[133,0,173,0],[134,0,174,0],[135,0,175,0],[136,0,176,0],[137,0,177,0],[138,0,178,0],[139,0,179,0],[140,0,180,0],[141,0,181,0],[142,2,182,0,"types"],[142,7,182,5],[142,8,182,6,"packed"],[142,14,182,12],[142,17,182,15,"bake"],[142,21,182,19],[142,22,182,20],[142,23,183,4],[142,37,183,19],[142,38,183,20],[142,40,184,4],[142,54,184,19],[142,55,184,20],[142,57,185,4],[142,71,185,19],[142,72,185,20],[142,74,186,4],[142,88,186,19],[142,89,186,20],[142,91,187,4],[142,105,187,19],[142,106,187,20],[142,108,188,4],[142,122,188,19],[142,123,188,20],[142,125,189,4],[142,139,189,19],[142,140,189,20],[142,142,190,4],[142,156,190,19],[142,157,190,20],[142,159,191,4],[142,173,191,19],[142,174,191,20],[142,176,192,4],[142,190,192,19],[142,191,192,20],[142,193,193,4],[142,207,193,19],[142,208,193,20],[142,210,194,4],[142,224,194,19],[142,225,194,20],[142,227,195,4],[142,241,195,19],[142,242,195,20],[142,243,196,1],[142,244,196,2],[143,0,196,3],[143,3]],"functionMap":{"names":["<global>","bake"],"mappings":"AAA;AC4B;CDK"}},"type":"js/module"}]}