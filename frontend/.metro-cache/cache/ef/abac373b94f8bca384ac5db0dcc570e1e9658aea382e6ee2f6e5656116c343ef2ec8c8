{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2020 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n  /*\n   * The groups correspond to URI parts as follows:\n   * 1. scheme\n   * 2. authority\n   * 3. path\n   */\n  const URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\n  function parseUri(uriString) {\n    const parsedUri = URI_REGEX.exec(uriString);\n    if (parsedUri === null) {\n      return null;\n    }\n    return {\n      scheme: parsedUri[1],\n      authority: parsedUri[2],\n      path: parsedUri[3]\n    };\n  }\n  exports.parseUri = parseUri;\n  const NUMBER_REGEX = /^\\d+$/;\n  function splitHostPort(path) {\n    if (path.startsWith('[')) {\n      const hostEnd = path.indexOf(']');\n      if (hostEnd === -1) {\n        return null;\n      }\n      const host = path.substring(1, hostEnd);\n      /* Only an IPv6 address should be in bracketed notation, and an IPv6\n       * address should have at least one colon */\n      if (host.indexOf(':') === -1) {\n        return null;\n      }\n      if (path.length > hostEnd + 1) {\n        if (path[hostEnd + 1] === ':') {\n          const portString = path.substring(hostEnd + 2);\n          if (NUMBER_REGEX.test(portString)) {\n            return {\n              host: host,\n              port: +portString\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        return {\n          host\n        };\n      }\n    } else {\n      const splitPath = path.split(':');\n      /* Exactly one colon means that this is host:port. Zero colons means that\n       * there is no port. And multiple colons means that this is a bare IPv6\n       * address with no port */\n      if (splitPath.length === 2) {\n        if (NUMBER_REGEX.test(splitPath[1])) {\n          return {\n            host: splitPath[0],\n            port: +splitPath[1]\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return {\n          host: path\n        };\n      }\n    }\n  }\n  exports.splitHostPort = splitHostPort;\n  function uriToString(uri) {\n    let result = '';\n    if (uri.scheme !== undefined) {\n      result += uri.scheme + ':';\n    }\n    if (uri.authority !== undefined) {\n      result += '//' + uri.authority + '/';\n    }\n    result += uri.path;\n    return result;\n  }\n  exports.uriToString = uriToString;\n});","lineCount":109,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"uriToString"],[23,21,19,19],[23,24,19,22,"exports"],[23,31,19,29],[23,32,19,30,"splitHostPort"],[23,45,19,43],[23,48,19,46,"exports"],[23,55,19,53],[23,56,19,54,"parseUri"],[23,64,19,62],[23,67,19,65],[23,72,19,70],[23,73,19,71],[24,2,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,2,26,0],[30,8,26,6,"URI_REGEX"],[30,17,26,15],[30,20,26,18],[30,69,26,67],[31,2,27,0],[31,11,27,9,"parseUri"],[31,19,27,17,"parseUri"],[31,20,27,18,"uriString"],[31,29,27,27],[31,31,27,29],[32,4,28,4],[32,10,28,10,"parsedUri"],[32,19,28,19],[32,22,28,22,"URI_REGEX"],[32,31,28,31],[32,32,28,32,"exec"],[32,36,28,36],[32,37,28,37,"uriString"],[32,46,28,46],[32,47,28,47],[33,4,29,4],[33,8,29,8,"parsedUri"],[33,17,29,17],[33,22,29,22],[33,26,29,26],[33,28,29,28],[34,6,30,8],[34,13,30,15],[34,17,30,19],[35,4,31,4],[36,4,32,4],[36,11,32,11],[37,6,33,8,"scheme"],[37,12,33,14],[37,14,33,16,"parsedUri"],[37,23,33,25],[37,24,33,26],[37,25,33,27],[37,26,33,28],[38,6,34,8,"authority"],[38,15,34,17],[38,17,34,19,"parsedUri"],[38,26,34,28],[38,27,34,29],[38,28,34,30],[38,29,34,31],[39,6,35,8,"path"],[39,10,35,12],[39,12,35,14,"parsedUri"],[39,21,35,23],[39,22,35,24],[39,23,35,25],[40,4,36,4],[40,5,36,5],[41,2,37,0],[42,2,38,0,"exports"],[42,9,38,7],[42,10,38,8,"parseUri"],[42,18,38,16],[42,21,38,19,"parseUri"],[42,29,38,27],[43,2,39,0],[43,8,39,6,"NUMBER_REGEX"],[43,20,39,18],[43,23,39,21],[43,30,39,28],[44,2,40,0],[44,11,40,9,"splitHostPort"],[44,24,40,22,"splitHostPort"],[44,25,40,23,"path"],[44,29,40,27],[44,31,40,29],[45,4,41,4],[45,8,41,8,"path"],[45,12,41,12],[45,13,41,13,"startsWith"],[45,23,41,23],[45,24,41,24],[45,27,41,27],[45,28,41,28],[45,30,41,30],[46,6,42,8],[46,12,42,14,"hostEnd"],[46,19,42,21],[46,22,42,24,"path"],[46,26,42,28],[46,27,42,29,"indexOf"],[46,34,42,36],[46,35,42,37],[46,38,42,40],[46,39,42,41],[47,6,43,8],[47,10,43,12,"hostEnd"],[47,17,43,19],[47,22,43,24],[47,23,43,25],[47,24,43,26],[47,26,43,28],[48,8,44,12],[48,15,44,19],[48,19,44,23],[49,6,45,8],[50,6,46,8],[50,12,46,14,"host"],[50,16,46,18],[50,19,46,21,"path"],[50,23,46,25],[50,24,46,26,"substring"],[50,33,46,35],[50,34,46,36],[50,35,46,37],[50,37,46,39,"hostEnd"],[50,44,46,46],[50,45,46,47],[51,6,47,8],[52,0,48,0],[53,6,49,8],[53,10,49,12,"host"],[53,14,49,16],[53,15,49,17,"indexOf"],[53,22,49,24],[53,23,49,25],[53,26,49,28],[53,27,49,29],[53,32,49,34],[53,33,49,35],[53,34,49,36],[53,36,49,38],[54,8,50,12],[54,15,50,19],[54,19,50,23],[55,6,51,8],[56,6,52,8],[56,10,52,12,"path"],[56,14,52,16],[56,15,52,17,"length"],[56,21,52,23],[56,24,52,26,"hostEnd"],[56,31,52,33],[56,34,52,36],[56,35,52,37],[56,37,52,39],[57,8,53,12],[57,12,53,16,"path"],[57,16,53,20],[57,17,53,21,"hostEnd"],[57,24,53,28],[57,27,53,31],[57,28,53,32],[57,29,53,33],[57,34,53,38],[57,37,53,41],[57,39,53,43],[58,10,54,16],[58,16,54,22,"portString"],[58,26,54,32],[58,29,54,35,"path"],[58,33,54,39],[58,34,54,40,"substring"],[58,43,54,49],[58,44,54,50,"hostEnd"],[58,51,54,57],[58,54,54,60],[58,55,54,61],[58,56,54,62],[59,10,55,16],[59,14,55,20,"NUMBER_REGEX"],[59,26,55,32],[59,27,55,33,"test"],[59,31,55,37],[59,32,55,38,"portString"],[59,42,55,48],[59,43,55,49],[59,45,55,51],[60,12,56,20],[60,19,56,27],[61,14,57,24,"host"],[61,18,57,28],[61,20,57,30,"host"],[61,24,57,34],[62,14,58,24,"port"],[62,18,58,28],[62,20,58,30],[62,21,58,31,"portString"],[63,12,59,20],[63,13,59,21],[64,10,60,16],[64,11,60,17],[64,17,61,21],[65,12,62,20],[65,19,62,27],[65,23,62,31],[66,10,63,16],[67,8,64,12],[67,9,64,13],[67,15,65,17],[68,10,66,16],[68,17,66,23],[68,21,66,27],[69,8,67,12],[70,6,68,8],[70,7,68,9],[70,13,69,13],[71,8,70,12],[71,15,70,19],[72,10,71,16,"host"],[73,8,72,12],[73,9,72,13],[74,6,73,8],[75,4,74,4],[75,5,74,5],[75,11,75,9],[76,6,76,8],[76,12,76,14,"splitPath"],[76,21,76,23],[76,24,76,26,"path"],[76,28,76,30],[76,29,76,31,"split"],[76,34,76,36],[76,35,76,37],[76,38,76,40],[76,39,76,41],[77,6,77,8],[78,0,78,0],[79,0,79,0],[80,6,80,8],[80,10,80,12,"splitPath"],[80,19,80,21],[80,20,80,22,"length"],[80,26,80,28],[80,31,80,33],[80,32,80,34],[80,34,80,36],[81,8,81,12],[81,12,81,16,"NUMBER_REGEX"],[81,24,81,28],[81,25,81,29,"test"],[81,29,81,33],[81,30,81,34,"splitPath"],[81,39,81,43],[81,40,81,44],[81,41,81,45],[81,42,81,46],[81,43,81,47],[81,45,81,49],[82,10,82,16],[82,17,82,23],[83,12,83,20,"host"],[83,16,83,24],[83,18,83,26,"splitPath"],[83,27,83,35],[83,28,83,36],[83,29,83,37],[83,30,83,38],[84,12,84,20,"port"],[84,16,84,24],[84,18,84,26],[84,19,84,27,"splitPath"],[84,28,84,36],[84,29,84,37],[84,30,84,38],[85,10,85,16],[85,11,85,17],[86,8,86,12],[86,9,86,13],[86,15,87,17],[87,10,88,16],[87,17,88,23],[87,21,88,27],[88,8,89,12],[89,6,90,8],[89,7,90,9],[89,13,91,13],[90,8,92,12],[90,15,92,19],[91,10,93,16,"host"],[91,14,93,20],[91,16,93,22,"path"],[92,8,94,12],[92,9,94,13],[93,6,95,8],[94,4,96,4],[95,2,97,0],[96,2,98,0,"exports"],[96,9,98,7],[96,10,98,8,"splitHostPort"],[96,23,98,21],[96,26,98,24,"splitHostPort"],[96,39,98,37],[97,2,99,0],[97,11,99,9,"uriToString"],[97,22,99,20,"uriToString"],[97,23,99,21,"uri"],[97,26,99,24],[97,28,99,26],[98,4,100,4],[98,8,100,8,"result"],[98,14,100,14],[98,17,100,17],[98,19,100,19],[99,4,101,4],[99,8,101,8,"uri"],[99,11,101,11],[99,12,101,12,"scheme"],[99,18,101,18],[99,23,101,23,"undefined"],[99,32,101,32],[99,34,101,34],[100,6,102,8,"result"],[100,12,102,14],[100,16,102,18,"uri"],[100,19,102,21],[100,20,102,22,"scheme"],[100,26,102,28],[100,29,102,31],[100,32,102,34],[101,4,103,4],[102,4,104,4],[102,8,104,8,"uri"],[102,11,104,11],[102,12,104,12,"authority"],[102,21,104,21],[102,26,104,26,"undefined"],[102,35,104,35],[102,37,104,37],[103,6,105,8,"result"],[103,12,105,14],[103,16,105,18],[103,20,105,22],[103,23,105,25,"uri"],[103,26,105,28],[103,27,105,29,"authority"],[103,36,105,38],[103,39,105,41],[103,42,105,44],[104,4,106,4],[105,4,107,4,"result"],[105,10,107,10],[105,14,107,14,"uri"],[105,17,107,17],[105,18,107,18,"path"],[105,22,107,22],[106,4,108,4],[106,11,108,11,"result"],[106,17,108,17],[107,2,109,0],[108,2,110,0,"exports"],[108,9,110,7],[108,10,110,8,"uriToString"],[108,21,110,19],[108,24,110,22,"uriToString"],[108,35,110,33],[109,0,110,34],[109,3]],"functionMap":{"names":["<global>","parseUri","splitHostPort","uriToString"],"mappings":"AAA;AC0B;CDU;AEG;CFyD;AGE;CHU"}},"type":"js/module"}]}