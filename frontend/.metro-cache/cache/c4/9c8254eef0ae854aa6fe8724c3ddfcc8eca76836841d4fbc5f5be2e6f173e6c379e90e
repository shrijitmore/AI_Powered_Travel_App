{"dependencies":[{"name":"@protobufjs/aspromise","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":58},"end":{"line":4,"column":48,"index":90}}],"key":"C4f2W3F6PBjioKQoxD1y8thijBU=","exportNames":["*"]}},{"name":"@protobufjs/inquire","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":109},"end":{"line":5,"column":46,"index":139}}],"key":"aDBJkAjWpS54bYl/bZ7imED2iz4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = fetch;\n  var asPromise = require(_dependencyMap[0], \"@protobufjs/aspromise\"),\n    inquire = require(_dependencyMap[1], \"@protobufjs/inquire\");\n  var fs = inquire(\"fs\");\n\n  /**\r\n   * Node-style callback as used by {@link util.fetch}.\r\n   * @typedef FetchCallback\r\n   * @type {function}\r\n   * @param {?Error} error Error, if any, otherwise `null`\r\n   * @param {string} [contents] File contents, if there hasn't been an error\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Options as used by {@link util.fetch}.\r\n   * @typedef FetchOptions\r\n   * @type {Object}\r\n   * @property {boolean} [binary=false] Whether expecting a binary response\r\n   * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n   */\n\n  /**\r\n   * Fetches the contents of a file.\r\n   * @memberof util\r\n   * @param {string} filename File path or url\r\n   * @param {FetchOptions} options Fetch options\r\n   * @param {FetchCallback} callback Callback function\r\n   * @returns {undefined}\r\n   */\n  function fetch(filename, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    } else if (!options) options = {};\n    if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\n\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\n    if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\n      return err && typeof XMLHttpRequest !== \"undefined\" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\n    });\n\n    // use the XHR version otherwise.\n    return fetch.xhr(filename, options, callback);\n  }\n\n  /**\r\n   * Fetches the contents of a file.\r\n   * @name util.fetch\r\n   * @function\r\n   * @param {string} path File path or url\r\n   * @param {FetchCallback} callback Callback function\r\n   * @returns {undefined}\r\n   * @variation 2\r\n   */\n\n  /**\r\n   * Fetches the contents of a file.\r\n   * @name util.fetch\r\n   * @function\r\n   * @param {string} path File path or url\r\n   * @param {FetchOptions} [options] Fetch options\r\n   * @returns {Promise<string|Uint8Array>} Promise\r\n   * @variation 3\r\n   */\n\n  /**/\n  fetch.xhr = function fetch_xhr(filename, options, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\n      if (xhr.readyState !== 4) return undefined;\n\n      // local cors security errors return status 0 / empty string, too. afaik this cannot be\n      // reliably distinguished from an actually empty file for security reasons. feel free\n      // to send a pull request if you are aware of a solution.\n      if (xhr.status !== 0 && xhr.status !== 200) return callback(Error(\"status \" + xhr.status));\n\n      // if binary data is expected, make sure that some sort of array is returned, even if\n      // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\n      if (options.binary) {\n        var buffer = xhr.response;\n        if (!buffer) {\n          buffer = [];\n          for (var i = 0; i < xhr.responseText.length; ++i) buffer.push(xhr.responseText.charCodeAt(i) & 255);\n        }\n        return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\n      }\n      return callback(null, xhr.responseText);\n    };\n    if (options.binary) {\n      // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\n      if (\"overrideMimeType\" in xhr) xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n      xhr.responseType = \"arraybuffer\";\n    }\n    xhr.open(\"GET\", filename);\n    xhr.send();\n  };\n});","lineCount":101,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"fetch"],[4,24,2,22],[5,2,4,0],[5,6,4,4,"asPromise"],[5,15,4,13],[5,18,4,16,"require"],[5,25,4,23],[5,26,4,23,"_dependencyMap"],[5,40,4,23],[5,68,4,47],[5,69,4,48],[6,4,5,4,"inquire"],[6,11,5,11],[6,14,5,16,"require"],[6,21,5,23],[6,22,5,23,"_dependencyMap"],[6,36,5,23],[6,62,5,45],[6,63,5,46],[7,2,7,0],[7,6,7,4,"fs"],[7,8,7,6],[7,11,7,9,"inquire"],[7,18,7,16],[7,19,7,17],[7,23,7,21],[7,24,7,22],[9,2,9,0],[10,0,10,0],[11,0,11,0],[12,0,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[18,2,18,0],[19,0,19,0],[20,0,20,0],[21,0,21,0],[22,0,22,0],[23,0,23,0],[24,0,24,0],[26,2,26,0],[27,0,27,0],[28,0,28,0],[29,0,29,0],[30,0,30,0],[31,0,31,0],[32,0,32,0],[33,0,33,0],[34,2,34,0],[34,11,34,9,"fetch"],[34,16,34,14,"fetch"],[34,17,34,15,"filename"],[34,25,34,23],[34,27,34,25,"options"],[34,34,34,32],[34,36,34,34,"callback"],[34,44,34,42],[34,46,34,44],[35,4,35,4],[35,8,35,8],[35,15,35,15,"options"],[35,22,35,22],[35,27,35,27],[35,37,35,37],[35,39,35,39],[36,6,36,8,"callback"],[36,14,36,16],[36,17,36,19,"options"],[36,24,36,26],[37,6,37,8,"options"],[37,13,37,15],[37,16,37,18],[37,17,37,19],[37,18,37,20],[38,4,38,4],[38,5,38,5],[38,11,38,11],[38,15,38,15],[38,16,38,16,"options"],[38,23,38,23],[38,25,39,8,"options"],[38,32,39,15],[38,35,39,18],[38,36,39,19],[38,37,39,20],[39,4,41,4],[39,8,41,8],[39,9,41,9,"callback"],[39,17,41,17],[39,19,42,8],[39,26,42,15,"asPromise"],[39,35,42,24],[39,36,42,25,"fetch"],[39,41,42,30],[39,43,42,32],[39,47,42,36],[39,49,42,38,"filename"],[39,57,42,46],[39,59,42,48,"options"],[39,66,42,55],[39,67,42,56],[39,68,42,57],[39,69,42,58],[41,4,44,4],[42,4,45,4],[42,8,45,8],[42,9,45,9,"options"],[42,16,45,16],[42,17,45,17,"xhr"],[42,20,45,20],[42,24,45,24,"fs"],[42,26,45,26],[42,30,45,30,"fs"],[42,32,45,32],[42,33,45,33,"readFile"],[42,41,45,41],[42,43,46,8],[42,50,46,15,"fs"],[42,52,46,17],[42,53,46,18,"readFile"],[42,61,46,26],[42,62,46,27,"filename"],[42,70,46,35],[42,72,46,37],[42,81,46,46,"fetchReadFileCallback"],[42,102,46,67,"fetchReadFileCallback"],[42,103,46,68,"err"],[42,106,46,71],[42,108,46,73,"contents"],[42,116,46,81],[42,118,46,83],[43,6,47,12],[43,13,47,19,"err"],[43,16,47,22],[43,20,47,26],[43,27,47,33,"XMLHttpRequest"],[43,41,47,47],[43,46,47,52],[43,57,47,63],[43,60,48,18,"fetch"],[43,65,48,23],[43,66,48,24,"xhr"],[43,69,48,27],[43,70,48,28,"filename"],[43,78,48,36],[43,80,48,38,"options"],[43,87,48,45],[43,89,48,47,"callback"],[43,97,48,55],[43,98,48,56],[43,101,49,18,"err"],[43,104,49,21],[43,107,50,18,"callback"],[43,115,50,26],[43,116,50,27,"err"],[43,119,50,30],[43,120,50,31],[43,123,51,18,"callback"],[43,131,51,26],[43,132,51,27],[43,136,51,31],[43,138,51,33,"options"],[43,145,51,40],[43,146,51,41,"binary"],[43,152,51,47],[43,155,51,50,"contents"],[43,163,51,58],[43,166,51,61,"contents"],[43,174,51,69],[43,175,51,70,"toString"],[43,183,51,78],[43,184,51,79],[43,190,51,85],[43,191,51,86],[43,192,51,87],[44,4,52,8],[44,5,52,9],[44,6,52,10],[46,4,54,4],[47,4,55,4],[47,11,55,11,"fetch"],[47,16,55,16],[47,17,55,17,"xhr"],[47,20,55,20],[47,21,55,21,"filename"],[47,29,55,29],[47,31,55,31,"options"],[47,38,55,38],[47,40,55,40,"callback"],[47,48,55,48],[47,49,55,49],[48,2,56,0],[50,2,58,0],[51,0,59,0],[52,0,60,0],[53,0,61,0],[54,0,62,0],[55,0,63,0],[56,0,64,0],[57,0,65,0],[58,0,66,0],[60,2,68,0],[61,0,69,0],[62,0,70,0],[63,0,71,0],[64,0,72,0],[65,0,73,0],[66,0,74,0],[67,0,75,0],[68,0,76,0],[70,2,78,0],[71,2,79,0,"fetch"],[71,7,79,5],[71,8,79,6,"xhr"],[71,11,79,9],[71,14,79,12],[71,23,79,21,"fetch_xhr"],[71,32,79,30,"fetch_xhr"],[71,33,79,31,"filename"],[71,41,79,39],[71,43,79,41,"options"],[71,50,79,48],[71,52,79,50,"callback"],[71,60,79,58],[71,62,79,60],[72,4,80,4],[72,8,80,8,"xhr"],[72,11,80,11],[72,14,80,14],[72,18,80,18,"XMLHttpRequest"],[72,32,80,32],[72,33,80,33],[72,34,80,34],[73,4,81,4,"xhr"],[73,7,81,7],[73,8,81,8,"onreadystatechange"],[73,26,81,26],[73,27,81,27],[73,52,81,52],[73,61,81,61,"fetchOnReadyStateChange"],[73,84,81,84,"fetchOnReadyStateChange"],[73,85,81,84],[73,87,81,87],[74,6,83,8],[74,10,83,12,"xhr"],[74,13,83,15],[74,14,83,16,"readyState"],[74,24,83,26],[74,29,83,31],[74,30,83,32],[74,32,84,12],[74,39,84,19,"undefined"],[74,48,84,28],[76,6,86,8],[77,6,87,8],[78,6,88,8],[79,6,89,8],[79,10,89,12,"xhr"],[79,13,89,15],[79,14,89,16,"status"],[79,20,89,22],[79,25,89,27],[79,26,89,28],[79,30,89,32,"xhr"],[79,33,89,35],[79,34,89,36,"status"],[79,40,89,42],[79,45,89,47],[79,48,89,50],[79,50,90,12],[79,57,90,19,"callback"],[79,65,90,27],[79,66,90,28,"Error"],[79,71,90,33],[79,72,90,34],[79,81,90,43],[79,84,90,46,"xhr"],[79,87,90,49],[79,88,90,50,"status"],[79,94,90,56],[79,95,90,57],[79,96,90,58],[81,6,92,8],[82,6,93,8],[83,6,94,8],[83,10,94,12,"options"],[83,17,94,19],[83,18,94,20,"binary"],[83,24,94,26],[83,26,94,28],[84,8,95,12],[84,12,95,16,"buffer"],[84,18,95,22],[84,21,95,25,"xhr"],[84,24,95,28],[84,25,95,29,"response"],[84,33,95,37],[85,8,96,12],[85,12,96,16],[85,13,96,17,"buffer"],[85,19,96,23],[85,21,96,25],[86,10,97,16,"buffer"],[86,16,97,22],[86,19,97,25],[86,21,97,27],[87,10,98,16],[87,15,98,21],[87,19,98,25,"i"],[87,20,98,26],[87,23,98,29],[87,24,98,30],[87,26,98,32,"i"],[87,27,98,33],[87,30,98,36,"xhr"],[87,33,98,39],[87,34,98,40,"responseText"],[87,46,98,52],[87,47,98,53,"length"],[87,53,98,59],[87,55,98,61],[87,57,98,63,"i"],[87,58,98,64],[87,60,99,20,"buffer"],[87,66,99,26],[87,67,99,27,"push"],[87,71,99,31],[87,72,99,32,"xhr"],[87,75,99,35],[87,76,99,36,"responseText"],[87,88,99,48],[87,89,99,49,"charCodeAt"],[87,99,99,59],[87,100,99,60,"i"],[87,101,99,61],[87,102,99,62],[87,105,99,65],[87,108,99,68],[87,109,99,69],[88,8,100,12],[89,8,101,12],[89,15,101,19,"callback"],[89,23,101,27],[89,24,101,28],[89,28,101,32],[89,30,101,34],[89,37,101,41,"Uint8Array"],[89,47,101,51],[89,52,101,56],[89,63,101,67],[89,66,101,70],[89,70,101,74,"Uint8Array"],[89,80,101,84],[89,81,101,85,"buffer"],[89,87,101,91],[89,88,101,92],[89,91,101,95,"buffer"],[89,97,101,101],[89,98,101,102],[90,6,102,8],[91,6,103,8],[91,13,103,15,"callback"],[91,21,103,23],[91,22,103,24],[91,26,103,28],[91,28,103,30,"xhr"],[91,31,103,33],[91,32,103,34,"responseText"],[91,44,103,46],[91,45,103,47],[92,4,104,4],[92,5,104,5],[93,4,106,4],[93,8,106,8,"options"],[93,15,106,15],[93,16,106,16,"binary"],[93,22,106,22],[93,24,106,24],[94,6,107,8],[95,6,108,8],[95,10,108,12],[95,28,108,30],[95,32,108,34,"xhr"],[95,35,108,37],[95,37,109,12,"xhr"],[95,40,109,15],[95,41,109,16,"overrideMimeType"],[95,57,109,32],[95,58,109,33],[95,94,109,69],[95,95,109,70],[96,6,110,8,"xhr"],[96,9,110,11],[96,10,110,12,"responseType"],[96,22,110,24],[96,25,110,27],[96,38,110,40],[97,4,111,4],[98,4,113,4,"xhr"],[98,7,113,7],[98,8,113,8,"open"],[98,12,113,12],[98,13,113,13],[98,18,113,18],[98,20,113,20,"filename"],[98,28,113,28],[98,29,113,29],[99,4,114,4,"xhr"],[99,7,114,7],[99,8,114,8,"send"],[99,12,114,12],[99,13,114,13],[99,14,114,14],[100,2,115,0],[100,3,115,1],[101,0,115,2],[101,3]],"functionMap":{"names":["<global>","fetch","fetchReadFileCallback","fetch_xhr","fetchOnReadyStateChange"],"mappings":"AAA;ACiC;qCCY;SDM;CDI;YGuB;oDCE;KDuB;CHW"}},"type":"js/module"}]}