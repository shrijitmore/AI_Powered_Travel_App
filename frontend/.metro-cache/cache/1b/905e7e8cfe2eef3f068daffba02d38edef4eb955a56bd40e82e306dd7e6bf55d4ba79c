{"dependencies":[{"name":"./object","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":23,"index":91},"end":{"line":5,"column":42,"index":110}}],"key":"xOxKVS7k9wOBO7C50gqXbLVMn/0=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":11,"index":232},"end":{"line":8,"column":28,"index":249}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = Method;\n\n  // extends ReflectionObject\n  var ReflectionObject = require(_dependencyMap[0], \"./object\");\n  ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n  var util = require(_dependencyMap[1], \"./util\");\n\n  /**\n   * Constructs a new service method instance.\n   * @classdesc Reflected service method.\n   * @extends ReflectionObject\n   * @constructor\n   * @param {string} name Method name\n   * @param {string|undefined} type Method type, usually `\"rpc\"`\n   * @param {string} requestType Request message type\n   * @param {string} responseType Response message type\n   * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n   * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n   * @param {Object.<string,*>} [options] Declared options\n   * @param {string} [comment] The comment for this method\n   * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n   */\n  function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n      options = requestStream;\n      requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n      options = responseStream;\n      responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n  }\n\n  /**\n   * Method descriptor.\n   * @interface IMethod\n   * @property {string} [type=\"rpc\"] Method type\n   * @property {string} requestType Request type\n   * @property {string} responseType Response type\n   * @property {boolean} [requestStream=false] Whether requests are streamed\n   * @property {boolean} [responseStream=false] Whether responses are streamed\n   * @property {Object.<string,*>} [options] Method options\n   * @property {string} comment Method comments\n   * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n   */\n\n  /**\n   * Constructs a method from a method descriptor.\n   * @param {string} name Method name\n   * @param {IMethod} json Method descriptor\n   * @returns {Method} Created method\n   * @throws {TypeError} If arguments are invalid\n   */\n  Method.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n  };\n\n  /**\n   * Converts this method to a method descriptor.\n   * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n   * @returns {IMethod} Method descriptor\n   */\n  Method.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\"type\", this.type !== \"rpc\" && /* istanbul ignore next */this.type || undefined, \"requestType\", this.requestType, \"requestStream\", this.requestStream, \"responseType\", this.responseType, \"responseStream\", this.responseStream, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined, \"parsedOptions\", this.parsedOptions]);\n  };\n\n  /**\n   * @override\n   */\n  Method.prototype.resolve = function resolve() {\n    /* istanbul ignore if */\n    if (this.resolved) return this;\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n    return ReflectionObject.prototype.resolve.call(this);\n  };\n});","lineCount":144,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"Method"],[4,25,2,23],[6,2,4,0],[7,2,5,0],[7,6,5,4,"ReflectionObject"],[7,22,5,20],[7,25,5,23,"require"],[7,32,5,30],[7,33,5,30,"_dependencyMap"],[7,47,5,30],[7,62,5,41],[7,63,5,42],[8,2,6,0],[8,3,6,1],[8,4,6,2,"Method"],[8,10,6,8],[8,11,6,9,"prototype"],[8,20,6,18],[8,23,6,21,"Object"],[8,29,6,27],[8,30,6,28,"create"],[8,36,6,34],[8,37,6,35,"ReflectionObject"],[8,53,6,51],[8,54,6,52,"prototype"],[8,63,6,61],[8,64,6,62],[8,66,6,64,"constructor"],[8,77,6,75],[8,80,6,78,"Method"],[8,86,6,84],[8,88,6,86,"className"],[8,97,6,95],[8,100,6,98],[8,108,6,106],[9,2,8,0],[9,6,8,4,"util"],[9,10,8,8],[9,13,8,11,"require"],[9,20,8,18],[9,21,8,18,"_dependencyMap"],[9,35,8,18],[9,48,8,27],[9,49,8,28],[11,2,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,2,25,0],[26,11,25,9,"Method"],[26,17,25,15,"Method"],[26,18,25,16,"name"],[26,22,25,20],[26,24,25,22,"type"],[26,28,25,26],[26,30,25,28,"requestType"],[26,41,25,39],[26,43,25,41,"responseType"],[26,55,25,53],[26,57,25,55,"requestStream"],[26,70,25,68],[26,72,25,70,"responseStream"],[26,86,25,84],[26,88,25,86,"options"],[26,95,25,93],[26,97,25,95,"comment"],[26,104,25,102],[26,106,25,104,"parsedOptions"],[26,119,25,117],[26,121,25,119],[27,4,27,4],[28,4,28,4],[28,8,28,8,"util"],[28,12,28,12],[28,13,28,13,"isObject"],[28,21,28,21],[28,22,28,22,"requestStream"],[28,35,28,35],[28,36,28,36],[28,38,28,38],[29,6,29,8,"options"],[29,13,29,15],[29,16,29,18,"requestStream"],[29,29,29,31],[30,6,30,8,"requestStream"],[30,19,30,21],[30,22,30,24,"responseStream"],[30,36,30,38],[30,39,30,41,"undefined"],[30,48,30,50],[31,4,31,4],[31,5,31,5],[31,11,31,11],[31,15,31,15,"util"],[31,19,31,19],[31,20,31,20,"isObject"],[31,28,31,28],[31,29,31,29,"responseStream"],[31,43,31,43],[31,44,31,44],[31,46,31,46],[32,6,32,8,"options"],[32,13,32,15],[32,16,32,18,"responseStream"],[32,30,32,32],[33,6,33,8,"responseStream"],[33,20,33,22],[33,23,33,25,"undefined"],[33,32,33,34],[34,4,34,4],[36,4,36,4],[37,4,37,4],[37,8,37,8],[37,10,37,10,"type"],[37,14,37,14],[37,19,37,19,"undefined"],[37,28,37,28],[37,32,37,32,"util"],[37,36,37,36],[37,37,37,37,"isString"],[37,45,37,45],[37,46,37,46,"type"],[37,50,37,50],[37,51,37,51],[37,52,37,52],[37,54,38,8],[37,60,38,14,"TypeError"],[37,69,38,23],[37,70,38,24],[37,93,38,47],[37,94,38,48],[39,4,40,4],[40,4,41,4],[40,8,41,8],[40,9,41,9,"util"],[40,13,41,13],[40,14,41,14,"isString"],[40,22,41,22],[40,23,41,23,"requestType"],[40,34,41,34],[40,35,41,35],[40,37,42,8],[40,43,42,14,"TypeError"],[40,52,42,23],[40,53,42,24],[40,83,42,54],[40,84,42,55],[42,4,44,4],[43,4,45,4],[43,8,45,8],[43,9,45,9,"util"],[43,13,45,13],[43,14,45,14,"isString"],[43,22,45,22],[43,23,45,23,"responseType"],[43,35,45,35],[43,36,45,36],[43,38,46,8],[43,44,46,14,"TypeError"],[43,53,46,23],[43,54,46,24],[43,85,46,55],[43,86,46,56],[44,4,48,4,"ReflectionObject"],[44,20,48,20],[44,21,48,21,"call"],[44,25,48,25],[44,26,48,26],[44,30,48,30],[44,32,48,32,"name"],[44,36,48,36],[44,38,48,38,"options"],[44,45,48,45],[44,46,48,46],[46,4,50,4],[47,0,51,0],[48,0,52,0],[49,0,53,0],[50,4,54,4],[50,8,54,8],[50,9,54,9,"type"],[50,13,54,13],[50,16,54,16,"type"],[50,20,54,20],[50,24,54,24],[50,29,54,29],[50,30,54,30],[50,31,54,31],[52,4,56,4],[53,0,57,0],[54,0,58,0],[55,0,59,0],[56,4,60,4],[56,8,60,8],[56,9,60,9,"requestType"],[56,20,60,20],[56,23,60,23,"requestType"],[56,34,60,34],[56,35,60,35],[56,36,60,36],[58,4,62,4],[59,0,63,0],[60,0,64,0],[61,0,65,0],[62,4,66,4],[62,8,66,8],[62,9,66,9,"requestStream"],[62,22,66,22],[62,25,66,25,"requestStream"],[62,38,66,38],[62,41,66,41],[62,45,66,45],[62,48,66,48,"undefined"],[62,57,66,57],[62,58,66,58],[62,59,66,59],[64,4,68,4],[65,0,69,0],[66,0,70,0],[67,0,71,0],[68,4,72,4],[68,8,72,8],[68,9,72,9,"responseType"],[68,21,72,21],[68,24,72,24,"responseType"],[68,36,72,36],[68,37,72,37],[68,38,72,38],[70,4,74,4],[71,0,75,0],[72,0,76,0],[73,0,77,0],[74,4,78,4],[74,8,78,8],[74,9,78,9,"responseStream"],[74,23,78,23],[74,26,78,26,"responseStream"],[74,40,78,40],[74,43,78,43],[74,47,78,47],[74,50,78,50,"undefined"],[74,59,78,59],[74,60,78,60],[74,61,78,61],[76,4,80,4],[77,0,81,0],[78,0,82,0],[79,0,83,0],[80,4,84,4],[80,8,84,8],[80,9,84,9,"resolvedRequestType"],[80,28,84,28],[80,31,84,31],[80,35,84,35],[82,4,86,4],[83,0,87,0],[84,0,88,0],[85,0,89,0],[86,4,90,4],[86,8,90,8],[86,9,90,9,"resolvedResponseType"],[86,29,90,29],[86,32,90,32],[86,36,90,36],[88,4,92,4],[89,0,93,0],[90,0,94,0],[91,0,95,0],[92,4,96,4],[92,8,96,8],[92,9,96,9,"comment"],[92,16,96,16],[92,19,96,19,"comment"],[92,26,96,26],[94,4,98,4],[95,0,99,0],[96,0,100,0],[97,4,101,4],[97,8,101,8],[97,9,101,9,"parsedOptions"],[97,22,101,22],[97,25,101,25,"parsedOptions"],[97,38,101,38],[98,2,102,0],[100,2,104,0],[101,0,105,0],[102,0,106,0],[103,0,107,0],[104,0,108,0],[105,0,109,0],[106,0,110,0],[107,0,111,0],[108,0,112,0],[109,0,113,0],[110,0,114,0],[111,0,115,0],[113,2,117,0],[114,0,118,0],[115,0,119,0],[116,0,120,0],[117,0,121,0],[118,0,122,0],[119,0,123,0],[120,2,124,0,"Method"],[120,8,124,6],[120,9,124,7,"fromJSON"],[120,17,124,15],[120,20,124,18],[120,29,124,27,"fromJSON"],[120,37,124,35,"fromJSON"],[120,38,124,36,"name"],[120,42,124,40],[120,44,124,42,"json"],[120,48,124,46],[120,50,124,48],[121,4,125,4],[121,11,125,11],[121,15,125,15,"Method"],[121,21,125,21],[121,22,125,22,"name"],[121,26,125,26],[121,28,125,28,"json"],[121,32,125,32],[121,33,125,33,"type"],[121,37,125,37],[121,39,125,39,"json"],[121,43,125,43],[121,44,125,44,"requestType"],[121,55,125,55],[121,57,125,57,"json"],[121,61,125,61],[121,62,125,62,"responseType"],[121,74,125,74],[121,76,125,76,"json"],[121,80,125,80],[121,81,125,81,"requestStream"],[121,94,125,94],[121,96,125,96,"json"],[121,100,125,100],[121,101,125,101,"responseStream"],[121,115,125,115],[121,117,125,117,"json"],[121,121,125,121],[121,122,125,122,"options"],[121,129,125,129],[121,131,125,131,"json"],[121,135,125,135],[121,136,125,136,"comment"],[121,143,125,143],[121,145,125,145,"json"],[121,149,125,149],[121,150,125,150,"parsedOptions"],[121,163,125,163],[121,164,125,164],[122,2,126,0],[122,3,126,1],[124,2,128,0],[125,0,129,0],[126,0,130,0],[127,0,131,0],[128,0,132,0],[129,2,133,0,"Method"],[129,8,133,6],[129,9,133,7,"prototype"],[129,18,133,16],[129,19,133,17,"toJSON"],[129,25,133,23],[129,28,133,26],[129,37,133,35,"toJSON"],[129,43,133,41,"toJSON"],[129,44,133,42,"toJSONOptions"],[129,57,133,55],[129,59,133,57],[130,4,134,4],[130,8,134,8,"keepComments"],[130,20,134,20],[130,23,134,23,"toJSONOptions"],[130,36,134,36],[130,39,134,39,"Boolean"],[130,46,134,46],[130,47,134,47,"toJSONOptions"],[130,60,134,60],[130,61,134,61,"keepComments"],[130,73,134,73],[130,74,134,74],[130,77,134,77],[130,82,134,82],[131,4,135,4],[131,11,135,11,"util"],[131,15,135,15],[131,16,135,16,"toObject"],[131,24,135,24],[131,25,135,25],[131,26,136,8],[131,32,136,14],[131,34,136,27],[131,38,136,31],[131,39,136,32,"type"],[131,43,136,36],[131,48,136,41],[131,53,136,46],[131,57,136,50],[131,83,136,77],[131,87,136,81],[131,88,136,82,"type"],[131,92,136,86],[131,96,136,90,"undefined"],[131,105,136,99],[131,107,137,8],[131,120,137,21],[131,122,137,27],[131,126,137,31],[131,127,137,32,"requestType"],[131,138,137,43],[131,140,138,8],[131,155,138,23],[131,157,138,27],[131,161,138,31],[131,162,138,32,"requestStream"],[131,175,138,45],[131,177,139,8],[131,191,139,22],[131,193,139,27],[131,197,139,31],[131,198,139,32,"responseType"],[131,210,139,44],[131,212,140,8],[131,228,140,24],[131,230,140,27],[131,234,140,31],[131,235,140,32,"responseStream"],[131,249,140,46],[131,251,141,8],[131,260,141,17],[131,262,141,27],[131,266,141,31],[131,267,141,32,"options"],[131,274,141,39],[131,276,142,8],[131,285,142,17],[131,287,142,27,"keepComments"],[131,299,142,39],[131,302,142,42],[131,306,142,46],[131,307,142,47,"comment"],[131,314,142,54],[131,317,142,57,"undefined"],[131,326,142,66],[131,328,143,8],[131,343,143,23],[131,345,143,27],[131,349,143,31],[131,350,143,32,"parsedOptions"],[131,363,143,45],[131,364,144,5],[131,365,144,6],[132,2,145,0],[132,3,145,1],[134,2,147,0],[135,0,148,0],[136,0,149,0],[137,2,150,0,"Method"],[137,8,150,6],[137,9,150,7,"prototype"],[137,18,150,16],[137,19,150,17,"resolve"],[137,26,150,24],[137,29,150,27],[137,38,150,36,"resolve"],[137,45,150,43,"resolve"],[137,46,150,43],[137,48,150,46],[138,4,152,4],[139,4,153,4],[139,8,153,8],[139,12,153,12],[139,13,153,13,"resolved"],[139,21,153,21],[139,23,154,8],[139,30,154,15],[139,34,154,19],[140,4,156,4],[140,8,156,8],[140,9,156,9,"resolvedRequestType"],[140,28,156,28],[140,31,156,31],[140,35,156,35],[140,36,156,36,"parent"],[140,42,156,42],[140,43,156,43,"lookupType"],[140,53,156,53],[140,54,156,54],[140,58,156,58],[140,59,156,59,"requestType"],[140,70,156,70],[140,71,156,71],[141,4,157,4],[141,8,157,8],[141,9,157,9,"resolvedResponseType"],[141,29,157,29],[141,32,157,32],[141,36,157,36],[141,37,157,37,"parent"],[141,43,157,43],[141,44,157,44,"lookupType"],[141,54,157,54],[141,55,157,55],[141,59,157,59],[141,60,157,60,"responseType"],[141,72,157,72],[141,73,157,73],[142,4,159,4],[142,11,159,11,"ReflectionObject"],[142,27,159,27],[142,28,159,28,"prototype"],[142,37,159,37],[142,38,159,38,"resolve"],[142,45,159,45],[142,46,159,46,"call"],[142,50,159,50],[142,51,159,51],[142,55,159,55],[142,56,159,56],[143,2,160,0],[143,3,160,1],[144,0,160,2],[144,3]],"functionMap":{"names":["<global>","Method","fromJSON","toJSON","resolve"],"mappings":"AAA;ACwB;CD6E;kBEsB;CFE;0BGO;CHY;2BIK;CJU"}},"type":"js/module"}]}