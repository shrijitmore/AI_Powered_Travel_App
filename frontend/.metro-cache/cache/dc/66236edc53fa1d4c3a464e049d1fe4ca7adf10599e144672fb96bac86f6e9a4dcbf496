{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // GENERATED FILE. DO NOT EDIT.\n  (function (global, factory) {\n    function preferDefault(exports) {\n      return exports.default || exports;\n    }\n    if (typeof define === \"function\" && define.amd) {\n      define([], function () {\n        var exports = {};\n        factory(exports);\n        return preferDefault(exports);\n      });\n    } else if (typeof exports === \"object\") {\n      factory(exports);\n      if (typeof module === \"object\") module.exports = preferDefault(exports);\n    } else {\n      (function () {\n        var exports = {};\n        factory(exports);\n        global.Long = preferDefault(exports);\n      })();\n    }\n  })(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports) {\n    \"use strict\";\n\n    Object.defineProperty(_exports, \"__esModule\", {\n      value: true\n    });\n    _exports.default = void 0;\n    /**\n     * @license\n     * Copyright 2009 The Closure Library Authors\n     * Copyright 2020 Daniel Wirtz / The long.js Authors.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *     http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     *\n     * SPDX-License-Identifier: Apache-2.0\n     */\n\n    // WebAssembly optimizations to do native i64 multiplication and divide\n    var wasm = null;\n    try {\n      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n      // \\0asm\n      0, 97, 115, 109,\n      // version 1\n      1, 0, 0, 0,\n      // section \"type\"\n      1, 13, 2,\n      // 0, () => i32\n      96, 0, 1, 127,\n      // 1, (i32, i32, i32, i32) => i32\n      96, 4, 127, 127, 127, 127, 1, 127,\n      // section \"function\"\n      3, 7, 6,\n      // 0, type 0\n      0,\n      // 1, type 1\n      1,\n      // 2, type 1\n      1,\n      // 3, type 1\n      1,\n      // 4, type 1\n      1,\n      // 5, type 1\n      1,\n      // section \"global\"\n      6, 6, 1,\n      // 0, \"high\", mutable i32\n      127, 1, 65, 0, 11,\n      // section \"export\"\n      7, 50, 6,\n      // 0, \"mul\"\n      3, 109, 117, 108, 0, 1,\n      // 1, \"div_s\"\n      5, 100, 105, 118, 95, 115, 0, 2,\n      // 2, \"div_u\"\n      5, 100, 105, 118, 95, 117, 0, 3,\n      // 3, \"rem_s\"\n      5, 114, 101, 109, 95, 115, 0, 4,\n      // 4, \"rem_u\"\n      5, 114, 101, 109, 95, 117, 0, 5,\n      // 5, \"get_high\"\n      8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n      // section \"code\"\n      10, 191, 1, 6,\n      // 0, \"get_high\"\n      4, 0, 35, 0, 11,\n      // 1, \"mul\"\n      36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n      // 2, \"div_s\"\n      36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n      // 3, \"div_u\"\n      36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n      // 4, \"rem_s\"\n      36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11,\n      // 5, \"rem_u\"\n      36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n    } catch {\n      // no wasm support :(\n    }\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @constructor\n     */\n    function Long(low, high, unsigned) {\n      /**\n       * The low 32 bits as a signed value.\n       * @type {number}\n       */\n      this.low = low | 0;\n\n      /**\n       * The high 32 bits as a signed value.\n       * @type {number}\n       */\n      this.high = high | 0;\n\n      /**\n       * Whether unsigned or not.\n       * @type {boolean}\n       */\n      this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @private\n     */\n    Long.prototype.__isLong__;\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n      value: true\n    });\n\n    /**\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @inner\n     */\n    function isLong(obj) {\n      return (obj && obj[\"__isLong__\"]) === true;\n    }\n\n    /**\n     * @function\n     * @param {*} value number\n     * @returns {number}\n     * @inner\n     */\n    function ctz32(value) {\n      var c = Math.clz32(value & -value);\n      return value ? 31 - c : c;\n    }\n\n    /**\n     * Tests if the specified object is a Long.\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     */\n    Long.isLong = isLong;\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromInt(value, unsigned) {\n      var obj, cachedObj, cache;\n      if (unsigned) {\n        value >>>= 0;\n        if (cache = 0 <= value && value < 256) {\n          cachedObj = UINT_CACHE[value];\n          if (cachedObj) return cachedObj;\n        }\n        obj = fromBits(value, 0, true);\n        if (cache) UINT_CACHE[value] = obj;\n        return obj;\n      } else {\n        value |= 0;\n        if (cache = -128 <= value && value < 128) {\n          cachedObj = INT_CACHE[value];\n          if (cachedObj) return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache) INT_CACHE[value] = obj;\n        return obj;\n      }\n    }\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @function\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromInt = fromInt;\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromNumber(value, unsigned) {\n      if (isNaN(value)) return unsigned ? UZERO : ZERO;\n      if (unsigned) {\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n      } else {\n        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n      }\n      if (value < 0) return fromNumber(-value, unsigned).neg();\n      return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @function\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromNumber = fromNumber;\n\n    /**\n     * @param {number} lowBits\n     * @param {number} highBits\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromBits(lowBits, highBits, unsigned) {\n      return new Long(lowBits, highBits, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @function\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromBits = fromBits;\n\n    /**\n     * @function\n     * @param {number} base\n     * @param {number} exponent\n     * @returns {number}\n     * @inner\n     */\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    /**\n     * @param {string} str\n     * @param {(boolean|number)=} unsigned\n     * @param {number=} radix\n     * @returns {!Long}\n     * @inner\n     */\n    function fromString(str, unsigned, radix) {\n      if (str.length === 0) throw Error(\"empty string\");\n      if (typeof unsigned === \"number\") {\n        // For goog.math.long compatibility\n        radix = unsigned;\n        unsigned = false;\n      } else {\n        unsigned = !!unsigned;\n      }\n      if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n      var p;\n      if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");else if (p === 0) {\n        return fromString(str.substring(1), unsigned, radix).neg();\n      }\n\n      // Do several (8) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n      var radixToPower = fromNumber(pow_dbl(radix, 8));\n      var result = ZERO;\n      for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n          var power = fromNumber(pow_dbl(radix, size));\n          result = result.mul(power).add(fromNumber(value));\n        } else {\n          result = result.mul(radixToPower);\n          result = result.add(fromNumber(value));\n        }\n      }\n      result.unsigned = unsigned;\n      return result;\n    }\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @function\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromString = fromString;\n\n    /**\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromValue(val, unsigned) {\n      if (typeof val === \"number\") return fromNumber(val, unsigned);\n      if (typeof val === \"string\") return fromString(val, unsigned);\n      // Throws for non-objects, converts non-instanceof Long:\n      return fromBits(val.low, val.high, typeof unsigned === \"boolean\" ? unsigned : val.unsigned);\n    }\n\n    /**\n     * Converts the specified value to a Long using the appropriate from* function for its type.\n     * @function\n     * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long}\n     */\n    Long.fromValue = fromValue;\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ZERO = fromInt(0);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     */\n    Long.ZERO = ZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UZERO = fromInt(0, true);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     */\n    Long.UZERO = UZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ONE = fromInt(1);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     */\n    Long.ONE = ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UONE = fromInt(1, true);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     */\n    Long.UONE = UONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var NEG_ONE = fromInt(-1);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     */\n    Long.NEG_ONE = NEG_ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     */\n    Long.MAX_VALUE = MAX_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     */\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     */\n    Long.MIN_VALUE = MIN_VALUE;\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.toInt = function toInt() {\n      return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.toNumber = function toNumber() {\n      if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @this {!Long}\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     */\n    LongPrototype.toString = function toString(radix) {\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n      if (this.isZero()) return \"0\";\n      if (this.isNegative()) {\n        // Unsigned Longs are never negative\n        if (this.eq(MIN_VALUE)) {\n          // We need to change the Long value before it can be negated, so we remove\n          // the bottom-most digit in this base and then recurse to do the rest.\n          var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n          return div.toString(radix) + rem1.toInt().toString(radix);\n        } else return \"-\" + this.neg().toString(radix);\n      }\n\n      // Do several (6) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n      var result = \"\";\n      while (true) {\n        var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n        rem = remDiv;\n        if (rem.isZero()) return digits + result;else {\n          while (digits.length < 6) digits = \"0\" + digits;\n          result = \"\" + digits + result;\n        }\n      }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed high bits\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n      return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned high bits\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n      return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed low bits\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n      return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned low bits\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n      return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n      if (this.isNegative())\n        // Unsigned Longs are never negative\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n      var val = this.high != 0 ? this.high : this.low;\n      for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n      return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long can be safely represented as a JavaScript number.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isSafeInteger = function isSafeInteger() {\n      // 2^53-1 is the maximum safe value\n      var top11Bits = this.high >> 21;\n      // [0, 2^53-1]\n      if (!top11Bits) return true;\n      // > 2^53-1\n      if (this.unsigned) return false;\n      // [-2^53, -1] except -2^53\n      return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isZero = function isZero() {\n      return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n     * @returns {boolean}\n     */\n    LongPrototype.eqz = LongPrototype.isZero;\n\n    /**\n     * Tests if this Long's value is negative.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isNegative = function isNegative() {\n      return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive or zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isPositive = function isPositive() {\n      return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isOdd = function isOdd() {\n      return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isEven = function isEven() {\n      return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.equals = function equals(other) {\n      if (!isLong(other)) other = fromValue(other);\n      if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n      return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n      return !this.eq(/* validates */other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.ne = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n      return this.comp(/* validates */other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n      return this.comp(/* validates */other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.le = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n      return this.comp(/* validates */other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n      return this.comp(/* validates */other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.compare = function compare(other) {\n      if (!isLong(other)) other = fromValue(other);\n      if (this.eq(other)) return 0;\n      var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n      if (thisNeg && !otherNeg) return -1;\n      if (!thisNeg && otherNeg) return 1;\n      // At this point the sign bits are the same\n      if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n      // Both are positive if at least one is unsigned\n      return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @this {!Long}\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.negate = function negate() {\n      if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n      return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} addend Addend\n     * @returns {!Long} Sum\n     */\n    LongPrototype.add = function add(addend) {\n      if (!isLong(addend)) addend = fromValue(addend);\n\n      // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = addend.high >>> 16;\n      var b32 = addend.high & 0xffff;\n      var b16 = addend.low >>> 16;\n      var b00 = addend.low & 0xffff;\n      var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n      c00 += a00 + b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 + b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 + b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 + b48;\n      c48 &= 0xffff;\n      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n      if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n      return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n      if (this.isZero()) return this;\n      if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n      // use wasm support if present\n      if (wasm) {\n        var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n      if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n      if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n      if (this.isNegative()) {\n        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n      } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n      // If both longs are small, use float multiplication\n      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n      // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n      // We can skip products that would overflow.\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = multiplier.high >>> 16;\n      var b32 = multiplier.high & 0xffff;\n      var b16 = multiplier.low >>> 16;\n      var b00 = multiplier.low & 0xffff;\n      var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n      c00 += a00 * b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 * b00;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c16 += a00 * b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 * b00;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a16 * b16;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a00 * b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n      c48 &= 0xffff;\n      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.divide = function divide(divisor) {\n      if (!isLong(divisor)) divisor = fromValue(divisor);\n      if (divisor.isZero()) throw Error(\"division by zero\");\n\n      // use wasm support if present\n      if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n          // be consistent with non-wasm code path\n          return this;\n        }\n        var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n      var approx, rem, res;\n      if (!this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (this.eq(MIN_VALUE)) {\n          if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n          else if (divisor.eq(MIN_VALUE)) return ONE;else {\n            // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n            var halfThis = this.shr(1);\n            approx = halfThis.div(divisor).shl(1);\n            if (approx.eq(ZERO)) {\n              return divisor.isNegative() ? ONE : NEG_ONE;\n            } else {\n              rem = this.sub(divisor.mul(approx));\n              res = approx.add(rem.div(divisor));\n              return res;\n            }\n          }\n        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n        if (this.isNegative()) {\n          if (divisor.isNegative()) return this.neg().div(divisor.neg());\n          return this.neg().div(divisor).neg();\n        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n        res = ZERO;\n      } else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned) divisor = divisor.toUnsigned();\n        if (divisor.gt(this)) return UZERO;\n        if (divisor.gt(this.shru(1)))\n          // 15 >>> 1 = 7 ; with divisor = 8 ; true\n          return UONE;\n        res = UZERO;\n      }\n\n      // Repeat the following until the remainder is less than other:  find a\n      // floating-point that approximates remainder / other *from below*, add this\n      // into the result, and subtract it from the remainder.  It is critical that\n      // the approximate value is less than or equal to the real value so that the\n      // remainder never becomes negative.\n      rem = this;\n      while (rem.gte(divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n          // that if it is too large, the product overflows and is negative.\n          approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\n          approx -= delta;\n          approxRes = fromNumber(approx, this.unsigned);\n          approxRem = approxRes.mul(divisor);\n        }\n\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (approxRes.isZero()) approxRes = ONE;\n        res = res.add(approxRes);\n        rem = rem.sub(approxRem);\n      }\n      return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n      if (!isLong(divisor)) divisor = fromValue(divisor);\n\n      // use wasm support if present\n      if (wasm) {\n        var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.rem = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @this {!Long}\n     * @returns {!Long}\n     */\n    LongPrototype.not = function not() {\n      return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns count leading zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.countLeadingZeros = function countLeadingZeros() {\n      return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n    };\n\n    /**\n     * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.clz = LongPrototype.countLeadingZeros;\n\n    /**\n     * Returns count trailing zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.countTrailingZeros = function countTrailingZeros() {\n      return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n    };\n\n    /**\n     * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.and = function and(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.or = function or(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.xor = function xor(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n      if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n      return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Returns this Long with bits rotated to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotateLeft = function rotateLeft(numBits) {\n      var b;\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n      if (numBits < 32) {\n        b = 32 - numBits;\n        return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n      }\n      numBits -= 32;\n      b = 32 - numBits;\n      return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotl = LongPrototype.rotateLeft;\n\n    /**\n     * Returns this Long with bits rotated to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotateRight = function rotateRight(numBits) {\n      var b;\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n      if (numBits < 32) {\n        b = 32 - numBits;\n        return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n      }\n      numBits -= 32;\n      b = 32 - numBits;\n      return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotr = LongPrototype.rotateRight;\n\n    /**\n     * Converts this Long to signed.\n     * @this {!Long}\n     * @returns {!Long} Signed long\n     */\n    LongPrototype.toSigned = function toSigned() {\n      if (!this.unsigned) return this;\n      return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @this {!Long}\n     * @returns {!Long} Unsigned long\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n      if (this.unsigned) return this;\n      return fromBits(this.low, this.high, true);\n    };\n\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @this {!Long}\n     * @returns {!Array.<number>} Byte representation\n     */\n    LongPrototype.toBytes = function toBytes(le) {\n      return le ? this.toBytesLE() : this.toBytesBE();\n    };\n\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Little endian byte representation\n     */\n    LongPrototype.toBytesLE = function toBytesLE() {\n      var hi = this.high,\n        lo = this.low;\n      return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n    };\n\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Big endian byte representation\n     */\n    LongPrototype.toBytesBE = function toBytesBE() {\n      var hi = this.high,\n        lo = this.low;\n      return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n    };\n\n    /**\n     * Creates a Long from its byte representation.\n     * @param {!Array.<number>} bytes Byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n      return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n    };\n\n    /**\n     * Creates a Long from its little endian byte representation.\n     * @param {!Array.<number>} bytes Little endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n      return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n    };\n\n    /**\n     * Creates a Long from its big endian byte representation.\n     * @param {!Array.<number>} bytes Big endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n      return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n    };\n\n    // Support conversion to/from BigInt where available\n    if (typeof BigInt === \"function\") {\n      /**\n       * Returns a Long representing the given big integer.\n       * @function\n       * @param {number} value The big integer value\n       * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n       * @returns {!Long} The corresponding Long value\n       */\n      Long.fromBigInt = function fromBigInt(value, unsigned) {\n        var lowBits = Number(BigInt.asIntN(32, value));\n        var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n        return fromBits(lowBits, highBits, unsigned);\n      };\n\n      // Override\n      Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n        if (typeof value === \"bigint\") return Long.fromBigInt(value, unsigned);\n        return fromValue(value, unsigned);\n      };\n\n      /**\n       * Converts the Long to its big integer representation.\n       * @this {!Long}\n       * @returns {bigint}\n       */\n      LongPrototype.toBigInt = function toBigInt() {\n        var lowBigInt = BigInt(this.low >>> 0);\n        var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n        return highBigInt << BigInt(32) | lowBigInt;\n      };\n    }\n    var _default = _exports.default = Long;\n  });\n});","lineCount":1468,"map":[[2,2,1,0],[3,2,2,0],[3,3,2,1],[3,13,2,11,"global"],[3,19,2,17],[3,21,2,19,"factory"],[3,28,2,26],[3,30,2,28],[4,4,3,2],[4,13,3,11,"preferDefault"],[4,26,3,24,"preferDefault"],[4,27,3,25,"exports"],[4,34,3,32],[4,36,3,34],[5,6,4,4],[5,13,4,11,"exports"],[5,20,4,18],[5,21,4,19,"default"],[5,28,4,26],[5,32,4,30,"exports"],[5,39,4,37],[6,4,5,2],[7,4,6,2],[7,8,6,6],[7,15,6,13,"define"],[7,21,6,19],[7,26,6,24],[7,36,6,34],[7,40,6,38,"define"],[7,46,6,44],[7,47,6,45,"amd"],[7,50,6,48],[7,52,6,50],[8,6,7,4,"define"],[8,12,7,10],[8,13,7,11],[8,15,7,13],[8,17,7,15],[8,29,7,27],[9,8,8,6],[9,12,8,10,"exports"],[9,19,8,17],[9,22,8,20],[9,23,8,21],[9,24,8,22],[10,8,9,6,"factory"],[10,15,9,13],[10,16,9,14,"exports"],[10,23,9,21],[10,24,9,22],[11,8,10,6],[11,15,10,13,"preferDefault"],[11,28,10,26],[11,29,10,27,"exports"],[11,36,10,34],[11,37,10,35],[12,6,11,4],[12,7,11,5],[12,8,11,6],[13,4,12,2],[13,5,12,3],[13,11,12,9],[13,15,12,13],[13,22,12,20,"exports"],[13,29,12,27],[13,34,12,32],[13,42,12,40],[13,44,12,42],[14,6,13,4,"factory"],[14,13,13,11],[14,14,13,12,"exports"],[14,21,13,19],[14,22,13,20],[15,6,14,4],[15,10,14,8],[15,17,14,15,"module"],[15,23,14,21],[15,28,14,26],[15,36,14,34],[15,38,14,36,"module"],[15,44,14,42],[15,45,14,43,"exports"],[15,52,14,50],[15,55,14,53,"preferDefault"],[15,68,14,66],[15,69,14,67,"exports"],[15,76,14,74],[15,77,14,75],[16,4,15,2],[16,5,15,3],[16,11,15,9],[17,6,16,4],[17,7,16,5],[17,19,16,17],[18,8,17,6],[18,12,17,10,"exports"],[18,19,17,17],[18,22,17,20],[18,23,17,21],[18,24,17,22],[19,8,18,6,"factory"],[19,15,18,13],[19,16,18,14,"exports"],[19,23,18,21],[19,24,18,22],[20,8,19,6,"global"],[20,14,19,12],[20,15,19,13,"Long"],[20,19,19,17],[20,22,19,20,"preferDefault"],[20,35,19,33],[20,36,19,34,"exports"],[20,43,19,41],[20,44,19,42],[21,6,20,4],[21,7,20,5],[21,9,20,7],[21,10,20,8],[22,4,21,2],[23,2,22,0],[23,3,22,1],[23,5,23,2],[23,12,23,9,"globalThis"],[23,22,23,19],[23,27,23,24],[23,38,23,35],[23,41,24,6,"globalThis"],[23,51,24,16],[23,54,25,6],[23,61,25,13,"self"],[23,65,25,17],[23,70,25,22],[23,81,25,33],[23,84,26,8,"self"],[23,88,26,12],[23,91,27,8],[23,95,27,12],[23,97,28,2],[23,107,28,12,"_exports"],[23,115,28,20],[23,117,28,22],[24,4,29,4],[24,16,29,16],[26,4,31,4,"Object"],[26,10,31,10],[26,11,31,11,"defineProperty"],[26,25,31,25],[26,26,31,26,"_exports"],[26,34,31,34],[26,36,31,36],[26,48,31,48],[26,50,31,50],[27,6,32,6,"value"],[27,11,32,11],[27,13,32,13],[28,4,33,4],[28,5,33,5],[28,6,33,6],[29,4,34,4,"_exports"],[29,12,34,12],[29,13,34,13,"default"],[29,20,34,20],[29,23,34,23],[29,28,34,28],[29,29,34,29],[30,4,35,4],[31,0,36,0],[32,0,37,0],[33,0,38,0],[34,0,39,0],[35,0,40,0],[36,0,41,0],[37,0,42,0],[38,0,43,0],[39,0,44,0],[40,0,45,0],[41,0,46,0],[42,0,47,0],[43,0,48,0],[44,0,49,0],[45,0,50,0],[46,0,51,0],[47,0,52,0],[48,0,53,0],[50,4,55,4],[51,4,56,4],[51,8,56,8,"wasm"],[51,12,56,12],[51,15,56,15],[51,19,56,19],[52,4,57,4],[52,8,57,8],[53,6,58,6,"wasm"],[53,10,58,10],[53,13,58,13],[53,17,58,17,"WebAssembly"],[53,28,58,28],[53,29,58,29,"Instance"],[53,37,58,37],[53,38,59,8],[53,42,59,12,"WebAssembly"],[53,53,59,23],[53,54,59,24,"Module"],[53,60,59,30],[53,61,60,10],[53,65,60,14,"Uint8Array"],[53,75,60,24],[53,76,60,25],[54,6,61,12],[55,6,62,12],[55,7,62,13],[55,9,62,15],[55,11,62,17],[55,13,62,19],[55,16,62,22],[55,18,62,24],[55,21,62,27],[56,6,63,12],[57,6,64,12],[57,7,64,13],[57,9,64,15],[57,10,64,16],[57,12,64,18],[57,13,64,19],[57,15,64,21],[57,16,64,22],[58,6,65,12],[59,6,66,12],[59,7,66,13],[59,9,66,15],[59,11,66,17],[59,13,66,19],[59,14,66,20],[60,6,67,12],[61,6,68,12],[61,8,68,14],[61,10,68,16],[61,11,68,17],[61,13,68,19],[61,14,68,20],[61,16,68,22],[61,19,68,25],[62,6,69,12],[63,6,70,12],[63,8,70,14],[63,10,70,16],[63,11,70,17],[63,13,70,19],[63,16,70,22],[63,18,70,24],[63,21,70,27],[63,23,70,29],[63,26,70,32],[63,28,70,34],[63,31,70,37],[63,33,70,39],[63,34,70,40],[63,36,70,42],[63,39,70,45],[64,6,71,12],[65,6,72,12],[65,7,72,13],[65,9,72,15],[65,10,72,16],[65,12,72,18],[65,13,72,19],[66,6,73,12],[67,6,74,12],[67,7,74,13],[68,6,75,12],[69,6,76,12],[69,7,76,13],[70,6,77,12],[71,6,78,12],[71,7,78,13],[72,6,79,12],[73,6,80,12],[73,7,80,13],[74,6,81,12],[75,6,82,12],[75,7,82,13],[76,6,83,12],[77,6,84,12],[77,7,84,13],[78,6,85,12],[79,6,86,12],[79,7,86,13],[79,9,86,15],[79,10,86,16],[79,12,86,18],[79,13,86,19],[80,6,87,12],[81,6,88,12],[81,9,88,15],[81,11,88,17],[81,12,88,18],[81,14,88,20],[81,16,88,22],[81,18,88,24],[81,19,88,25],[81,21,88,27],[81,23,88,29],[82,6,89,12],[83,6,90,12],[83,7,90,13],[83,9,90,15],[83,11,90,17],[83,13,90,19],[83,14,90,20],[84,6,91,12],[85,6,92,12],[85,7,92,13],[85,9,92,15],[85,12,92,18],[85,14,92,20],[85,17,92,23],[85,19,92,25],[85,22,92,28],[85,24,92,30],[85,25,92,31],[85,27,92,33],[85,28,92,34],[86,6,93,12],[87,6,94,12],[87,7,94,13],[87,9,94,15],[87,12,94,18],[87,14,94,20],[87,17,94,23],[87,19,94,25],[87,22,94,28],[87,24,94,30],[87,26,94,32],[87,28,94,34],[87,31,94,37],[87,33,94,39],[87,34,94,40],[87,36,94,42],[87,37,94,43],[88,6,95,12],[89,6,96,12],[89,7,96,13],[89,9,96,15],[89,12,96,18],[89,14,96,20],[89,17,96,23],[89,19,96,25],[89,22,96,28],[89,24,96,30],[89,26,96,32],[89,28,96,34],[89,31,96,37],[89,33,96,39],[89,34,96,40],[89,36,96,42],[89,37,96,43],[90,6,97,12],[91,6,98,12],[91,7,98,13],[91,9,98,15],[91,12,98,18],[91,14,98,20],[91,17,98,23],[91,19,98,25],[91,22,98,28],[91,24,98,30],[91,26,98,32],[91,28,98,34],[91,31,98,37],[91,33,98,39],[91,34,98,40],[91,36,98,42],[91,37,98,43],[92,6,99,12],[93,6,100,12],[93,7,100,13],[93,9,100,15],[93,12,100,18],[93,14,100,20],[93,17,100,23],[93,19,100,25],[93,22,100,28],[93,24,100,30],[93,26,100,32],[93,28,100,34],[93,31,100,37],[93,33,100,39],[93,34,100,40],[93,36,100,42],[93,37,100,43],[94,6,101,12],[95,6,102,12],[95,7,102,13],[95,9,102,15],[95,12,102,18],[95,14,102,20],[95,17,102,23],[95,19,102,25],[95,22,102,28],[95,24,102,30],[95,26,102,32],[95,28,102,34],[95,31,102,37],[95,33,102,39],[95,36,102,42],[95,38,102,44],[95,41,102,47],[95,43,102,49],[95,46,102,52],[95,48,102,54],[95,49,102,55],[95,51,102,57],[95,52,102,58],[96,6,103,12],[97,6,104,12],[97,8,104,14],[97,10,104,16],[97,13,104,19],[97,15,104,21],[97,16,104,22],[97,18,104,24],[97,19,104,25],[98,6,105,12],[99,6,106,12],[99,7,106,13],[99,9,106,15],[99,10,106,16],[99,12,106,18],[99,14,106,20],[99,16,106,22],[99,17,106,23],[99,19,106,25],[99,21,106,27],[100,6,107,12],[101,6,108,12],[101,8,108,14],[101,10,108,16],[101,11,108,17],[101,13,108,19],[101,14,108,20],[101,16,108,22],[101,19,108,25],[101,21,108,27],[101,23,108,29],[101,25,108,31],[101,26,108,32],[101,28,108,34],[101,31,108,37],[101,33,108,39],[101,35,108,41],[101,37,108,43],[101,38,108,44],[101,40,108,46],[101,43,108,49],[101,45,108,51],[101,47,108,53],[101,49,108,55],[101,51,108,57],[101,53,108,59],[101,56,108,62],[101,58,108,64],[101,61,108,67],[101,63,108,69],[101,65,108,71],[101,67,108,73],[101,68,108,74],[101,70,108,76],[101,73,108,79],[101,75,109,12],[101,77,109,14],[101,79,109,16],[101,80,109,17],[101,82,109,19],[101,85,109,22],[101,87,109,24],[101,89,109,26],[101,91,109,28],[101,93,109,30],[101,95,109,32],[101,98,109,35],[101,100,109,37],[101,103,109,40],[101,105,109,42],[101,108,109,45],[101,110,109,47],[101,112,109,49],[101,114,109,51],[101,115,109,52],[101,117,109,54],[101,119,109,56],[101,121,109,58],[101,123,109,60],[101,125,109,62],[101,128,109,65],[101,130,109,67],[101,133,109,70],[101,135,109,72],[101,137,109,74],[101,139,109,76],[101,140,109,77],[101,142,110,12],[101,144,110,14],[101,146,110,16],[101,147,110,17],[101,149,110,19],[101,152,110,22],[101,154,110,24],[101,156,110,26],[102,6,111,12],[103,6,112,12],[103,8,112,14],[103,10,112,16],[103,11,112,17],[103,13,112,19],[103,14,112,20],[103,16,112,22],[103,19,112,25],[103,21,112,27],[103,23,112,29],[103,25,112,31],[103,26,112,32],[103,28,112,34],[103,31,112,37],[103,33,112,39],[103,35,112,41],[103,37,112,43],[103,38,112,44],[103,40,112,46],[103,43,112,49],[103,45,112,51],[103,47,112,53],[103,49,112,55],[103,51,112,57],[103,53,112,59],[103,56,112,62],[103,58,112,64],[103,61,112,67],[103,63,112,69],[103,65,112,71],[103,67,112,73],[103,68,112,74],[103,70,112,76],[103,73,112,79],[103,75,113,12],[103,77,113,14],[103,79,113,16],[103,80,113,17],[103,82,113,19],[103,85,113,22],[103,87,113,24],[103,89,113,26],[103,91,113,28],[103,93,113,30],[103,95,113,32],[103,98,113,35],[103,100,113,37],[103,103,113,40],[103,105,113,42],[103,108,113,45],[103,110,113,47],[103,112,113,49],[103,114,113,51],[103,115,113,52],[103,117,113,54],[103,119,113,56],[103,121,113,58],[103,123,113,60],[103,125,113,62],[103,128,113,65],[103,130,113,67],[103,133,113,70],[103,135,113,72],[103,137,113,74],[103,139,113,76],[103,140,113,77],[103,142,114,12],[103,144,114,14],[103,146,114,16],[103,147,114,17],[103,149,114,19],[103,152,114,22],[103,154,114,24],[103,156,114,26],[104,6,115,12],[105,6,116,12],[105,8,116,14],[105,10,116,16],[105,11,116,17],[105,13,116,19],[105,14,116,20],[105,16,116,22],[105,19,116,25],[105,21,116,27],[105,23,116,29],[105,25,116,31],[105,26,116,32],[105,28,116,34],[105,31,116,37],[105,33,116,39],[105,35,116,41],[105,37,116,43],[105,38,116,44],[105,40,116,46],[105,43,116,49],[105,45,116,51],[105,47,116,53],[105,49,116,55],[105,51,116,57],[105,53,116,59],[105,56,116,62],[105,58,116,64],[105,61,116,67],[105,63,116,69],[105,65,116,71],[105,67,116,73],[105,68,116,74],[105,70,116,76],[105,73,116,79],[105,75,117,12],[105,77,117,14],[105,79,117,16],[105,80,117,17],[105,82,117,19],[105,85,117,22],[105,87,117,24],[105,89,117,26],[105,91,117,28],[105,93,117,30],[105,95,117,32],[105,98,117,35],[105,100,117,37],[105,103,117,40],[105,105,117,42],[105,108,117,45],[105,110,117,47],[105,112,117,49],[105,114,117,51],[105,115,117,52],[105,117,117,54],[105,119,117,56],[105,121,117,58],[105,123,117,60],[105,125,117,62],[105,128,117,65],[105,130,117,67],[105,133,117,70],[105,135,117,72],[105,137,117,74],[105,139,117,76],[105,140,117,77],[105,142,118,12],[105,144,118,14],[105,146,118,16],[105,147,118,17],[105,149,118,19],[105,152,118,22],[105,154,118,24],[105,156,118,26],[106,6,119,12],[107,6,120,12],[107,8,120,14],[107,10,120,16],[107,11,120,17],[107,13,120,19],[107,14,120,20],[107,16,120,22],[107,19,120,25],[107,21,120,27],[107,23,120,29],[107,25,120,31],[107,26,120,32],[107,28,120,34],[107,31,120,37],[107,33,120,39],[107,35,120,41],[107,37,120,43],[107,38,120,44],[107,40,120,46],[107,43,120,49],[107,45,120,51],[107,47,120,53],[107,49,120,55],[107,51,120,57],[107,53,120,59],[107,56,120,62],[107,58,120,64],[107,61,120,67],[107,63,120,69],[107,65,120,71],[107,67,120,73],[107,68,120,74],[107,70,120,76],[107,73,120,79],[107,75,121,12],[107,77,121,14],[107,79,121,16],[107,80,121,17],[107,82,121,19],[107,85,121,22],[107,87,121,24],[107,89,121,26],[107,91,121,28],[107,93,121,30],[107,95,121,32],[107,98,121,35],[107,100,121,37],[107,103,121,40],[107,105,121,42],[107,108,121,45],[107,110,121,47],[107,112,121,49],[107,114,121,51],[107,115,121,52],[107,117,121,54],[107,119,121,56],[107,121,121,58],[107,123,121,60],[107,125,121,62],[107,128,121,65],[107,130,121,67],[107,133,121,70],[107,135,121,72],[107,137,121,74],[107,139,121,76],[107,140,121,77],[107,142,122,12],[107,144,122,14],[107,146,122,16],[107,147,122,17],[107,149,122,19],[107,152,122,22],[107,154,122,24],[107,156,122,26],[108,6,123,12],[109,6,124,12],[109,8,124,14],[109,10,124,16],[109,11,124,17],[109,13,124,19],[109,14,124,20],[109,16,124,22],[109,19,124,25],[109,21,124,27],[109,23,124,29],[109,25,124,31],[109,26,124,32],[109,28,124,34],[109,31,124,37],[109,33,124,39],[109,35,124,41],[109,37,124,43],[109,38,124,44],[109,40,124,46],[109,43,124,49],[109,45,124,51],[109,47,124,53],[109,49,124,55],[109,51,124,57],[109,53,124,59],[109,56,124,62],[109,58,124,64],[109,61,124,67],[109,63,124,69],[109,65,124,71],[109,67,124,73],[109,68,124,74],[109,70,124,76],[109,73,124,79],[109,75,125,12],[109,77,125,14],[109,79,125,16],[109,80,125,17],[109,82,125,19],[109,85,125,22],[109,87,125,24],[109,89,125,26],[109,91,125,28],[109,93,125,30],[109,95,125,32],[109,98,125,35],[109,100,125,37],[109,103,125,40],[109,105,125,42],[109,108,125,45],[109,110,125,47],[109,112,125,49],[109,114,125,51],[109,115,125,52],[109,117,125,54],[109,119,125,56],[109,121,125,58],[109,123,125,60],[109,125,125,62],[109,128,125,65],[109,130,125,67],[109,133,125,70],[109,135,125,72],[109,137,125,74],[109,139,125,76],[109,140,125,77],[109,142,126,12],[109,144,126,14],[109,146,126,16],[109,147,126,17],[109,149,126,19],[109,152,126,22],[109,154,126,24],[109,156,126,26],[109,157,127,11],[109,158,128,8],[109,159,128,9],[109,161,129,8],[109,162,129,9],[109,163,130,6],[109,164,130,7],[109,165,130,8,"exports"],[109,172,130,15],[110,4,131,4],[110,5,131,5],[110,6,131,6],[110,12,131,12],[111,6,132,6],[112,4,132,6],[114,4,135,4],[115,0,136,0],[116,0,137,0],[117,0,138,0],[118,0,139,0],[119,0,140,0],[120,0,141,0],[121,0,142,0],[122,0,143,0],[123,0,144,0],[124,4,145,4],[124,13,145,13,"Long"],[124,17,145,17,"Long"],[124,18,145,18,"low"],[124,21,145,21],[124,23,145,23,"high"],[124,27,145,27],[124,29,145,29,"unsigned"],[124,37,145,37],[124,39,145,39],[125,6,146,6],[126,0,147,0],[127,0,148,0],[128,0,149,0],[129,6,150,6],[129,10,150,10],[129,11,150,11,"low"],[129,14,150,14],[129,17,150,17,"low"],[129,20,150,20],[129,23,150,23],[129,24,150,24],[131,6,152,6],[132,0,153,0],[133,0,154,0],[134,0,155,0],[135,6,156,6],[135,10,156,10],[135,11,156,11,"high"],[135,15,156,15],[135,18,156,18,"high"],[135,22,156,22],[135,25,156,25],[135,26,156,26],[137,6,158,6],[138,0,159,0],[139,0,160,0],[140,0,161,0],[141,6,162,6],[141,10,162,10],[141,11,162,11,"unsigned"],[141,19,162,19],[141,22,162,22],[141,23,162,23],[141,24,162,24,"unsigned"],[141,32,162,32],[142,4,163,4],[144,4,165,4],[145,4,166,4],[146,4,167,4],[147,4,168,4],[148,4,169,4],[149,4,170,4],[150,4,171,4],[151,4,172,4],[152,4,173,4],[153,4,174,4],[154,4,175,4],[155,4,176,4],[156,4,177,4],[157,4,178,4],[158,4,179,4],[159,4,180,4],[161,4,182,4],[162,0,183,0],[163,0,184,0],[164,0,185,0],[165,0,186,0],[166,0,187,0],[167,4,188,4,"Long"],[167,8,188,8],[167,9,188,9,"prototype"],[167,18,188,18],[167,19,188,19,"__isLong__"],[167,29,188,29],[168,4,189,4,"Object"],[168,10,189,10],[168,11,189,11,"defineProperty"],[168,25,189,25],[168,26,189,26,"Long"],[168,30,189,30],[168,31,189,31,"prototype"],[168,40,189,40],[168,42,189,42],[168,54,189,54],[168,56,189,56],[169,6,190,6,"value"],[169,11,190,11],[169,13,190,13],[170,4,191,4],[170,5,191,5],[170,6,191,6],[172,4,193,4],[173,0,194,0],[174,0,195,0],[175,0,196,0],[176,0,197,0],[177,0,198,0],[178,4,199,4],[178,13,199,13,"isLong"],[178,19,199,19,"isLong"],[178,20,199,20,"obj"],[178,23,199,23],[178,25,199,25],[179,6,200,6],[179,13,200,13],[179,14,200,14,"obj"],[179,17,200,17],[179,21,200,21,"obj"],[179,24,200,24],[179,25,200,25],[179,37,200,37],[179,38,200,38],[179,44,200,44],[179,48,200,48],[180,4,201,4],[182,4,203,4],[183,0,204,0],[184,0,205,0],[185,0,206,0],[186,0,207,0],[187,0,208,0],[188,4,209,4],[188,13,209,13,"ctz32"],[188,18,209,18,"ctz32"],[188,19,209,19,"value"],[188,24,209,24],[188,26,209,26],[189,6,210,6],[189,10,210,10,"c"],[189,11,210,11],[189,14,210,14,"Math"],[189,18,210,18],[189,19,210,19,"clz32"],[189,24,210,24],[189,25,210,25,"value"],[189,30,210,30],[189,33,210,33],[189,34,210,34,"value"],[189,39,210,39],[189,40,210,40],[190,6,211,6],[190,13,211,13,"value"],[190,18,211,18],[190,21,211,21],[190,23,211,23],[190,26,211,26,"c"],[190,27,211,27],[190,30,211,30,"c"],[190,31,211,31],[191,4,212,4],[193,4,214,4],[194,0,215,0],[195,0,216,0],[196,0,217,0],[197,0,218,0],[198,0,219,0],[199,4,220,4,"Long"],[199,8,220,8],[199,9,220,9,"isLong"],[199,15,220,15],[199,18,220,18,"isLong"],[199,24,220,24],[201,4,222,4],[202,0,223,0],[203,0,224,0],[204,0,225,0],[205,0,226,0],[206,4,227,4],[206,8,227,8,"INT_CACHE"],[206,17,227,17],[206,20,227,20],[206,21,227,21],[206,22,227,22],[208,4,229,4],[209,0,230,0],[210,0,231,0],[211,0,232,0],[212,0,233,0],[213,4,234,4],[213,8,234,8,"UINT_CACHE"],[213,18,234,18],[213,21,234,21],[213,22,234,22],[213,23,234,23],[215,4,236,4],[216,0,237,0],[217,0,238,0],[218,0,239,0],[219,0,240,0],[220,0,241,0],[221,4,242,4],[221,13,242,13,"fromInt"],[221,20,242,20,"fromInt"],[221,21,242,21,"value"],[221,26,242,26],[221,28,242,28,"unsigned"],[221,36,242,36],[221,38,242,38],[222,6,243,6],[222,10,243,10,"obj"],[222,13,243,13],[222,15,243,15,"cachedObj"],[222,24,243,24],[222,26,243,26,"cache"],[222,31,243,31],[223,6,244,6],[223,10,244,10,"unsigned"],[223,18,244,18],[223,20,244,20],[224,8,245,8,"value"],[224,13,245,13],[224,19,245,19],[224,20,245,20],[225,8,246,8],[225,12,246,13,"cache"],[225,17,246,18],[225,20,246,21],[225,21,246,22],[225,25,246,26,"value"],[225,30,246,31],[225,34,246,35,"value"],[225,39,246,40],[225,42,246,43],[225,45,246,46],[225,47,246,49],[226,10,247,10,"cachedObj"],[226,19,247,19],[226,22,247,22,"UINT_CACHE"],[226,32,247,32],[226,33,247,33,"value"],[226,38,247,38],[226,39,247,39],[227,10,248,10],[227,14,248,14,"cachedObj"],[227,23,248,23],[227,25,248,25],[227,32,248,32,"cachedObj"],[227,41,248,41],[228,8,249,8],[229,8,250,8,"obj"],[229,11,250,11],[229,14,250,14,"fromBits"],[229,22,250,22],[229,23,250,23,"value"],[229,28,250,28],[229,30,250,30],[229,31,250,31],[229,33,250,33],[229,37,250,37],[229,38,250,38],[230,8,251,8],[230,12,251,12,"cache"],[230,17,251,17],[230,19,251,19,"UINT_CACHE"],[230,29,251,29],[230,30,251,30,"value"],[230,35,251,35],[230,36,251,36],[230,39,251,39,"obj"],[230,42,251,42],[231,8,252,8],[231,15,252,15,"obj"],[231,18,252,18],[232,6,253,6],[232,7,253,7],[232,13,253,13],[233,8,254,8,"value"],[233,13,254,13],[233,17,254,17],[233,18,254,18],[234,8,255,8],[234,12,255,13,"cache"],[234,17,255,18],[234,20,255,21],[234,21,255,22],[234,24,255,25],[234,28,255,29,"value"],[234,33,255,34],[234,37,255,38,"value"],[234,42,255,43],[234,45,255,46],[234,48,255,49],[234,50,255,52],[235,10,256,10,"cachedObj"],[235,19,256,19],[235,22,256,22,"INT_CACHE"],[235,31,256,31],[235,32,256,32,"value"],[235,37,256,37],[235,38,256,38],[236,10,257,10],[236,14,257,14,"cachedObj"],[236,23,257,23],[236,25,257,25],[236,32,257,32,"cachedObj"],[236,41,257,41],[237,8,258,8],[238,8,259,8,"obj"],[238,11,259,11],[238,14,259,14,"fromBits"],[238,22,259,22],[238,23,259,23,"value"],[238,28,259,28],[238,30,259,30,"value"],[238,35,259,35],[238,38,259,38],[238,39,259,39],[238,42,259,42],[238,43,259,43],[238,44,259,44],[238,47,259,47],[238,48,259,48],[238,50,259,50],[238,55,259,55],[238,56,259,56],[239,8,260,8],[239,12,260,12,"cache"],[239,17,260,17],[239,19,260,19,"INT_CACHE"],[239,28,260,28],[239,29,260,29,"value"],[239,34,260,34],[239,35,260,35],[239,38,260,38,"obj"],[239,41,260,41],[240,8,261,8],[240,15,261,15,"obj"],[240,18,261,18],[241,6,262,6],[242,4,263,4],[244,4,265,4],[245,0,266,0],[246,0,267,0],[247,0,268,0],[248,0,269,0],[249,0,270,0],[250,0,271,0],[251,4,272,4,"Long"],[251,8,272,8],[251,9,272,9,"fromInt"],[251,16,272,16],[251,19,272,19,"fromInt"],[251,26,272,26],[253,4,274,4],[254,0,275,0],[255,0,276,0],[256,0,277,0],[257,0,278,0],[258,0,279,0],[259,4,280,4],[259,13,280,13,"fromNumber"],[259,23,280,23,"fromNumber"],[259,24,280,24,"value"],[259,29,280,29],[259,31,280,31,"unsigned"],[259,39,280,39],[259,41,280,41],[260,6,281,6],[260,10,281,10,"isNaN"],[260,15,281,15],[260,16,281,16,"value"],[260,21,281,21],[260,22,281,22],[260,24,281,24],[260,31,281,31,"unsigned"],[260,39,281,39],[260,42,281,42,"UZERO"],[260,47,281,47],[260,50,281,50,"ZERO"],[260,54,281,54],[261,6,282,6],[261,10,282,10,"unsigned"],[261,18,282,18],[261,20,282,20],[262,8,283,8],[262,12,283,12,"value"],[262,17,283,17],[262,20,283,20],[262,21,283,21],[262,23,283,23],[262,30,283,30,"UZERO"],[262,35,283,35],[263,8,284,8],[263,12,284,12,"value"],[263,17,284,17],[263,21,284,21,"TWO_PWR_64_DBL"],[263,35,284,35],[263,37,284,37],[263,44,284,44,"MAX_UNSIGNED_VALUE"],[263,62,284,62],[264,6,285,6],[264,7,285,7],[264,13,285,13],[265,8,286,8],[265,12,286,12,"value"],[265,17,286,17],[265,21,286,21],[265,22,286,22,"TWO_PWR_63_DBL"],[265,36,286,36],[265,38,286,38],[265,45,286,45,"MIN_VALUE"],[265,54,286,54],[266,8,287,8],[266,12,287,12,"value"],[266,17,287,17],[266,20,287,20],[266,21,287,21],[266,25,287,25,"TWO_PWR_63_DBL"],[266,39,287,39],[266,41,287,41],[266,48,287,48,"MAX_VALUE"],[266,57,287,57],[267,6,288,6],[268,6,289,6],[268,10,289,10,"value"],[268,15,289,15],[268,18,289,18],[268,19,289,19],[268,21,289,21],[268,28,289,28,"fromNumber"],[268,38,289,38],[268,39,289,39],[268,40,289,40,"value"],[268,45,289,45],[268,47,289,47,"unsigned"],[268,55,289,55],[268,56,289,56],[268,57,289,57,"neg"],[268,60,289,60],[268,61,289,61],[268,62,289,62],[269,6,290,6],[269,13,290,13,"fromBits"],[269,21,290,21],[269,22,291,8,"value"],[269,27,291,13],[269,30,291,16,"TWO_PWR_32_DBL"],[269,44,291,30],[269,47,291,33],[269,48,291,34],[269,50,292,9,"value"],[269,55,292,14],[269,58,292,17,"TWO_PWR_32_DBL"],[269,72,292,31],[269,75,292,35],[269,76,292,36],[269,78,293,8,"unsigned"],[269,86,294,6],[269,87,294,7],[270,4,295,4],[272,4,297,4],[273,0,298,0],[274,0,299,0],[275,0,300,0],[276,0,301,0],[277,0,302,0],[278,0,303,0],[279,4,304,4,"Long"],[279,8,304,8],[279,9,304,9,"fromNumber"],[279,19,304,19],[279,22,304,22,"fromNumber"],[279,32,304,32],[281,4,306,4],[282,0,307,0],[283,0,308,0],[284,0,309,0],[285,0,310,0],[286,0,311,0],[287,0,312,0],[288,4,313,4],[288,13,313,13,"fromBits"],[288,21,313,21,"fromBits"],[288,22,313,22,"lowBits"],[288,29,313,29],[288,31,313,31,"highBits"],[288,39,313,39],[288,41,313,41,"unsigned"],[288,49,313,49],[288,51,313,51],[289,6,314,6],[289,13,314,13],[289,17,314,17,"Long"],[289,21,314,21],[289,22,314,22,"lowBits"],[289,29,314,29],[289,31,314,31,"highBits"],[289,39,314,39],[289,41,314,41,"unsigned"],[289,49,314,49],[289,50,314,50],[290,4,315,4],[292,4,317,4],[293,0,318,0],[294,0,319,0],[295,0,320,0],[296,0,321,0],[297,0,322,0],[298,0,323,0],[299,0,324,0],[300,0,325,0],[301,4,326,4,"Long"],[301,8,326,8],[301,9,326,9,"fromBits"],[301,17,326,17],[301,20,326,20,"fromBits"],[301,28,326,28],[303,4,328,4],[304,0,329,0],[305,0,330,0],[306,0,331,0],[307,0,332,0],[308,0,333,0],[309,0,334,0],[310,4,335,4],[310,8,335,8,"pow_dbl"],[310,15,335,15],[310,18,335,18,"Math"],[310,22,335,22],[310,23,335,23,"pow"],[310,26,335,26],[310,27,335,27],[310,28,335,28],[312,4,337,4],[313,0,338,0],[314,0,339,0],[315,0,340,0],[316,0,341,0],[317,0,342,0],[318,0,343,0],[319,4,344,4],[319,13,344,13,"fromString"],[319,23,344,23,"fromString"],[319,24,344,24,"str"],[319,27,344,27],[319,29,344,29,"unsigned"],[319,37,344,37],[319,39,344,39,"radix"],[319,44,344,44],[319,46,344,46],[320,6,345,6],[320,10,345,10,"str"],[320,13,345,13],[320,14,345,14,"length"],[320,20,345,20],[320,25,345,25],[320,26,345,26],[320,28,345,28],[320,34,345,34,"Error"],[320,39,345,39],[320,40,345,40],[320,54,345,54],[320,55,345,55],[321,6,346,6],[321,10,346,10],[321,17,346,17,"unsigned"],[321,25,346,25],[321,30,346,30],[321,38,346,38],[321,40,346,40],[322,8,347,8],[323,8,348,8,"radix"],[323,13,348,13],[323,16,348,16,"unsigned"],[323,24,348,24],[324,8,349,8,"unsigned"],[324,16,349,16],[324,19,349,19],[324,24,349,24],[325,6,350,6],[325,7,350,7],[325,13,350,13],[326,8,351,8,"unsigned"],[326,16,351,16],[326,19,351,19],[326,20,351,20],[326,21,351,21,"unsigned"],[326,29,351,29],[327,6,352,6],[328,6,353,6],[328,10,354,8,"str"],[328,13,354,11],[328,18,354,16],[328,23,354,21],[328,27,355,8,"str"],[328,30,355,11],[328,35,355,16],[328,45,355,26],[328,49,356,8,"str"],[328,52,356,11],[328,57,356,16],[328,68,356,27],[328,72,357,8,"str"],[328,75,357,11],[328,80,357,16],[328,91,357,27],[328,93,359,8],[328,100,359,15,"unsigned"],[328,108,359,23],[328,111,359,26,"UZERO"],[328,116,359,31],[328,119,359,34,"ZERO"],[328,123,359,38],[329,6,360,6,"radix"],[329,11,360,11],[329,14,360,14,"radix"],[329,19,360,19],[329,23,360,23],[329,25,360,25],[330,6,361,6],[330,10,361,10,"radix"],[330,15,361,15],[330,18,361,18],[330,19,361,19],[330,23,361,23],[330,25,361,25],[330,28,361,28,"radix"],[330,33,361,33],[330,35,361,35],[330,41,361,41,"RangeError"],[330,51,361,51],[330,52,361,52],[330,59,361,59],[330,60,361,60],[331,6,362,6],[331,10,362,10,"p"],[331,11,362,11],[332,6,363,6],[332,10,363,10],[332,11,363,11,"p"],[332,12,363,12],[332,15,363,15,"str"],[332,18,363,18],[332,19,363,19,"indexOf"],[332,26,363,26],[332,27,363,27],[332,30,363,30],[332,31,363,31],[332,35,363,35],[332,36,363,36],[332,38,363,38],[332,44,363,44,"Error"],[332,49,363,49],[332,50,363,50],[332,67,363,67],[332,68,363,68],[332,69,363,69],[332,74,364,11],[332,78,364,15,"p"],[332,79,364,16],[332,84,364,21],[332,85,364,22],[332,87,364,24],[333,8,365,8],[333,15,365,15,"fromString"],[333,25,365,25],[333,26,365,26,"str"],[333,29,365,29],[333,30,365,30,"substring"],[333,39,365,39],[333,40,365,40],[333,41,365,41],[333,42,365,42],[333,44,365,44,"unsigned"],[333,52,365,52],[333,54,365,54,"radix"],[333,59,365,59],[333,60,365,60],[333,61,365,61,"neg"],[333,64,365,64],[333,65,365,65],[333,66,365,66],[334,6,366,6],[336,6,368,6],[337,6,369,6],[338,6,370,6],[338,10,370,10,"radixToPower"],[338,22,370,22],[338,25,370,25,"fromNumber"],[338,35,370,35],[338,36,370,36,"pow_dbl"],[338,43,370,43],[338,44,370,44,"radix"],[338,49,370,49],[338,51,370,51],[338,52,370,52],[338,53,370,53],[338,54,370,54],[339,6,371,6],[339,10,371,10,"result"],[339,16,371,16],[339,19,371,19,"ZERO"],[339,23,371,23],[340,6,372,6],[340,11,372,11],[340,15,372,15,"i"],[340,16,372,16],[340,19,372,19],[340,20,372,20],[340,22,372,22,"i"],[340,23,372,23],[340,26,372,26,"str"],[340,29,372,29],[340,30,372,30,"length"],[340,36,372,36],[340,38,372,38,"i"],[340,39,372,39],[340,43,372,43],[340,44,372,44],[340,46,372,46],[341,8,373,8],[341,12,373,12,"size"],[341,16,373,16],[341,19,373,19,"Math"],[341,23,373,23],[341,24,373,24,"min"],[341,27,373,27],[341,28,373,28],[341,29,373,29],[341,31,373,31,"str"],[341,34,373,34],[341,35,373,35,"length"],[341,41,373,41],[341,44,373,44,"i"],[341,45,373,45],[341,46,373,46],[342,10,374,10,"value"],[342,15,374,15],[342,18,374,18,"parseInt"],[342,26,374,26],[342,27,374,27,"str"],[342,30,374,30],[342,31,374,31,"substring"],[342,40,374,40],[342,41,374,41,"i"],[342,42,374,42],[342,44,374,44,"i"],[342,45,374,45],[342,48,374,48,"size"],[342,52,374,52],[342,53,374,53],[342,55,374,55,"radix"],[342,60,374,60],[342,61,374,61],[343,8,375,8],[343,12,375,12,"size"],[343,16,375,16],[343,19,375,19],[343,20,375,20],[343,22,375,22],[344,10,376,10],[344,14,376,14,"power"],[344,19,376,19],[344,22,376,22,"fromNumber"],[344,32,376,32],[344,33,376,33,"pow_dbl"],[344,40,376,40],[344,41,376,41,"radix"],[344,46,376,46],[344,48,376,48,"size"],[344,52,376,52],[344,53,376,53],[344,54,376,54],[345,10,377,10,"result"],[345,16,377,16],[345,19,377,19,"result"],[345,25,377,25],[345,26,377,26,"mul"],[345,29,377,29],[345,30,377,30,"power"],[345,35,377,35],[345,36,377,36],[345,37,377,37,"add"],[345,40,377,40],[345,41,377,41,"fromNumber"],[345,51,377,51],[345,52,377,52,"value"],[345,57,377,57],[345,58,377,58],[345,59,377,59],[346,8,378,8],[346,9,378,9],[346,15,378,15],[347,10,379,10,"result"],[347,16,379,16],[347,19,379,19,"result"],[347,25,379,25],[347,26,379,26,"mul"],[347,29,379,29],[347,30,379,30,"radixToPower"],[347,42,379,42],[347,43,379,43],[348,10,380,10,"result"],[348,16,380,16],[348,19,380,19,"result"],[348,25,380,25],[348,26,380,26,"add"],[348,29,380,29],[348,30,380,30,"fromNumber"],[348,40,380,40],[348,41,380,41,"value"],[348,46,380,46],[348,47,380,47],[348,48,380,48],[349,8,381,8],[350,6,382,6],[351,6,383,6,"result"],[351,12,383,12],[351,13,383,13,"unsigned"],[351,21,383,21],[351,24,383,24,"unsigned"],[351,32,383,32],[352,6,384,6],[352,13,384,13,"result"],[352,19,384,19],[353,4,385,4],[355,4,387,4],[356,0,388,0],[357,0,389,0],[358,0,390,0],[359,0,391,0],[360,0,392,0],[361,0,393,0],[362,0,394,0],[363,4,395,4,"Long"],[363,8,395,8],[363,9,395,9,"fromString"],[363,19,395,19],[363,22,395,22,"fromString"],[363,32,395,32],[365,4,397,4],[366,0,398,0],[367,0,399,0],[368,0,400,0],[369,0,401,0],[370,0,402,0],[371,0,403,0],[372,4,404,4],[372,13,404,13,"fromValue"],[372,22,404,22,"fromValue"],[372,23,404,23,"val"],[372,26,404,26],[372,28,404,28,"unsigned"],[372,36,404,36],[372,38,404,38],[373,6,405,6],[373,10,405,10],[373,17,405,17,"val"],[373,20,405,20],[373,25,405,25],[373,33,405,33],[373,35,405,35],[373,42,405,42,"fromNumber"],[373,52,405,52],[373,53,405,53,"val"],[373,56,405,56],[373,58,405,58,"unsigned"],[373,66,405,66],[373,67,405,67],[374,6,406,6],[374,10,406,10],[374,17,406,17,"val"],[374,20,406,20],[374,25,406,25],[374,33,406,33],[374,35,406,35],[374,42,406,42,"fromString"],[374,52,406,52],[374,53,406,53,"val"],[374,56,406,56],[374,58,406,58,"unsigned"],[374,66,406,66],[374,67,406,67],[375,6,407,6],[376,6,408,6],[376,13,408,13,"fromBits"],[376,21,408,21],[376,22,409,8,"val"],[376,25,409,11],[376,26,409,12,"low"],[376,29,409,15],[376,31,410,8,"val"],[376,34,410,11],[376,35,410,12,"high"],[376,39,410,16],[376,41,411,8],[376,48,411,15,"unsigned"],[376,56,411,23],[376,61,411,28],[376,70,411,37],[376,73,411,40,"unsigned"],[376,81,411,48],[376,84,411,51,"val"],[376,87,411,54],[376,88,411,55,"unsigned"],[376,96,412,6],[376,97,412,7],[377,4,413,4],[379,4,415,4],[380,0,416,0],[381,0,417,0],[382,0,418,0],[383,0,419,0],[384,0,420,0],[385,0,421,0],[386,4,422,4,"Long"],[386,8,422,8],[386,9,422,9,"fromValue"],[386,18,422,18],[386,21,422,21,"fromValue"],[386,30,422,30],[388,4,424,4],[389,4,425,4],[391,4,427,4],[392,0,428,0],[393,0,429,0],[394,0,430,0],[395,0,431,0],[396,4,432,4],[396,8,432,8,"TWO_PWR_16_DBL"],[396,22,432,22],[396,25,432,25],[396,26,432,26],[396,30,432,30],[396,32,432,32],[398,4,434,4],[399,0,435,0],[400,0,436,0],[401,0,437,0],[402,0,438,0],[403,4,439,4],[403,8,439,8,"TWO_PWR_24_DBL"],[403,22,439,22],[403,25,439,25],[403,26,439,26],[403,30,439,30],[403,32,439,32],[405,4,441,4],[406,0,442,0],[407,0,443,0],[408,0,444,0],[409,0,445,0],[410,4,446,4],[410,8,446,8,"TWO_PWR_32_DBL"],[410,22,446,22],[410,25,446,25,"TWO_PWR_16_DBL"],[410,39,446,39],[410,42,446,42,"TWO_PWR_16_DBL"],[410,56,446,56],[412,4,448,4],[413,0,449,0],[414,0,450,0],[415,0,451,0],[416,0,452,0],[417,4,453,4],[417,8,453,8,"TWO_PWR_64_DBL"],[417,22,453,22],[417,25,453,25,"TWO_PWR_32_DBL"],[417,39,453,39],[417,42,453,42,"TWO_PWR_32_DBL"],[417,56,453,56],[419,4,455,4],[420,0,456,0],[421,0,457,0],[422,0,458,0],[423,0,459,0],[424,4,460,4],[424,8,460,8,"TWO_PWR_63_DBL"],[424,22,460,22],[424,25,460,25,"TWO_PWR_64_DBL"],[424,39,460,39],[424,42,460,42],[424,43,460,43],[426,4,462,4],[427,0,463,0],[428,0,464,0],[429,0,465,0],[430,0,466,0],[431,4,467,4],[431,8,467,8,"TWO_PWR_24"],[431,18,467,18],[431,21,467,21,"fromInt"],[431,28,467,28],[431,29,467,29,"TWO_PWR_24_DBL"],[431,43,467,43],[431,44,467,44],[433,4,469,4],[434,0,470,0],[435,0,471,0],[436,0,472,0],[437,4,473,4],[437,8,473,8,"ZERO"],[437,12,473,12],[437,15,473,15,"fromInt"],[437,22,473,22],[437,23,473,23],[437,24,473,24],[437,25,473,25],[439,4,475,4],[440,0,476,0],[441,0,477,0],[442,0,478,0],[443,4,479,4,"Long"],[443,8,479,8],[443,9,479,9,"ZERO"],[443,13,479,13],[443,16,479,16,"ZERO"],[443,20,479,20],[445,4,481,4],[446,0,482,0],[447,0,483,0],[448,0,484,0],[449,4,485,4],[449,8,485,8,"UZERO"],[449,13,485,13],[449,16,485,16,"fromInt"],[449,23,485,23],[449,24,485,24],[449,25,485,25],[449,27,485,27],[449,31,485,31],[449,32,485,32],[451,4,487,4],[452,0,488,0],[453,0,489,0],[454,0,490,0],[455,4,491,4,"Long"],[455,8,491,8],[455,9,491,9,"UZERO"],[455,14,491,14],[455,17,491,17,"UZERO"],[455,22,491,22],[457,4,493,4],[458,0,494,0],[459,0,495,0],[460,0,496,0],[461,4,497,4],[461,8,497,8,"ONE"],[461,11,497,11],[461,14,497,14,"fromInt"],[461,21,497,21],[461,22,497,22],[461,23,497,23],[461,24,497,24],[463,4,499,4],[464,0,500,0],[465,0,501,0],[466,0,502,0],[467,4,503,4,"Long"],[467,8,503,8],[467,9,503,9,"ONE"],[467,12,503,12],[467,15,503,15,"ONE"],[467,18,503,18],[469,4,505,4],[470,0,506,0],[471,0,507,0],[472,0,508,0],[473,4,509,4],[473,8,509,8,"UONE"],[473,12,509,12],[473,15,509,15,"fromInt"],[473,22,509,22],[473,23,509,23],[473,24,509,24],[473,26,509,26],[473,30,509,30],[473,31,509,31],[475,4,511,4],[476,0,512,0],[477,0,513,0],[478,0,514,0],[479,4,515,4,"Long"],[479,8,515,8],[479,9,515,9,"UONE"],[479,13,515,13],[479,16,515,16,"UONE"],[479,20,515,20],[481,4,517,4],[482,0,518,0],[483,0,519,0],[484,0,520,0],[485,4,521,4],[485,8,521,8,"NEG_ONE"],[485,15,521,15],[485,18,521,18,"fromInt"],[485,25,521,25],[485,26,521,26],[485,27,521,27],[485,28,521,28],[485,29,521,29],[487,4,523,4],[488,0,524,0],[489,0,525,0],[490,0,526,0],[491,4,527,4,"Long"],[491,8,527,8],[491,9,527,9,"NEG_ONE"],[491,16,527,16],[491,19,527,19,"NEG_ONE"],[491,26,527,26],[493,4,529,4],[494,0,530,0],[495,0,531,0],[496,0,532,0],[497,4,533,4],[497,8,533,8,"MAX_VALUE"],[497,17,533,17],[497,20,533,20,"fromBits"],[497,28,533,28],[497,29,533,29],[497,39,533,39],[497,42,533,42],[497,43,533,43],[497,45,533,45],[497,55,533,55],[497,58,533,58],[497,59,533,59],[497,61,533,61],[497,66,533,66],[497,67,533,67],[499,4,535,4],[500,0,536,0],[501,0,537,0],[502,0,538,0],[503,4,539,4,"Long"],[503,8,539,8],[503,9,539,9,"MAX_VALUE"],[503,18,539,18],[503,21,539,21,"MAX_VALUE"],[503,30,539,30],[505,4,541,4],[506,0,542,0],[507,0,543,0],[508,0,544,0],[509,4,545,4],[509,8,545,8,"MAX_UNSIGNED_VALUE"],[509,26,545,26],[509,29,545,29,"fromBits"],[509,37,545,37],[509,38,545,38],[509,48,545,48],[509,51,545,51],[509,52,545,52],[509,54,545,54],[509,64,545,64],[509,67,545,67],[509,68,545,68],[509,70,545,70],[509,74,545,74],[509,75,545,75],[511,4,547,4],[512,0,548,0],[513,0,549,0],[514,0,550,0],[515,4,551,4,"Long"],[515,8,551,8],[515,9,551,9,"MAX_UNSIGNED_VALUE"],[515,27,551,27],[515,30,551,30,"MAX_UNSIGNED_VALUE"],[515,48,551,48],[517,4,553,4],[518,0,554,0],[519,0,555,0],[520,0,556,0],[521,4,557,4],[521,8,557,8,"MIN_VALUE"],[521,17,557,17],[521,20,557,20,"fromBits"],[521,28,557,28],[521,29,557,29],[521,30,557,30],[521,32,557,32],[521,42,557,42],[521,45,557,45],[521,46,557,46],[521,48,557,48],[521,53,557,53],[521,54,557,54],[523,4,559,4],[524,0,560,0],[525,0,561,0],[526,0,562,0],[527,4,563,4,"Long"],[527,8,563,8],[527,9,563,9,"MIN_VALUE"],[527,18,563,18],[527,21,563,21,"MIN_VALUE"],[527,30,563,30],[529,4,565,4],[530,0,566,0],[531,0,567,0],[532,0,568,0],[533,4,569,4],[533,8,569,8,"LongPrototype"],[533,21,569,21],[533,24,569,24,"Long"],[533,28,569,28],[533,29,569,29,"prototype"],[533,38,569,38],[535,4,571,4],[536,0,572,0],[537,0,573,0],[538,0,574,0],[539,0,575,0],[540,4,576,4,"LongPrototype"],[540,17,576,17],[540,18,576,18,"toInt"],[540,23,576,23],[540,26,576,26],[540,35,576,35,"toInt"],[540,40,576,40,"toInt"],[540,41,576,40],[540,43,576,43],[541,6,577,6],[541,13,577,13],[541,17,577,17],[541,18,577,18,"unsigned"],[541,26,577,26],[541,29,577,29],[541,33,577,33],[541,34,577,34,"low"],[541,37,577,37],[541,42,577,42],[541,43,577,43],[541,46,577,46],[541,50,577,50],[541,51,577,51,"low"],[541,54,577,54],[542,4,578,4],[542,5,578,5],[544,4,580,4],[545,0,581,0],[546,0,582,0],[547,0,583,0],[548,0,584,0],[549,4,585,4,"LongPrototype"],[549,17,585,17],[549,18,585,18,"toNumber"],[549,26,585,26],[549,29,585,29],[549,38,585,38,"toNumber"],[549,46,585,46,"toNumber"],[549,47,585,46],[549,49,585,49],[550,6,586,6],[550,10,586,10],[550,14,586,14],[550,15,586,15,"unsigned"],[550,23,586,23],[550,25,587,8],[550,32,587,15],[550,33,587,16],[550,37,587,20],[550,38,587,21,"high"],[550,42,587,25],[550,47,587,30],[550,48,587,31],[550,52,587,35,"TWO_PWR_32_DBL"],[550,66,587,49],[550,70,587,53],[550,74,587,57],[550,75,587,58,"low"],[550,78,587,61],[550,83,587,66],[550,84,587,67],[550,85,587,68],[551,6,588,6],[551,13,588,13],[551,17,588,17],[551,18,588,18,"high"],[551,22,588,22],[551,25,588,25,"TWO_PWR_32_DBL"],[551,39,588,39],[551,43,588,43],[551,47,588,47],[551,48,588,48,"low"],[551,51,588,51],[551,56,588,56],[551,57,588,57],[551,58,588,58],[552,4,589,4],[552,5,589,5],[554,4,591,4],[555,0,592,0],[556,0,593,0],[557,0,594,0],[558,0,595,0],[559,0,596,0],[560,0,597,0],[561,0,598,0],[562,4,599,4,"LongPrototype"],[562,17,599,17],[562,18,599,18,"toString"],[562,26,599,26],[562,29,599,29],[562,38,599,38,"toString"],[562,46,599,46,"toString"],[562,47,599,47,"radix"],[562,52,599,52],[562,54,599,54],[563,6,600,6,"radix"],[563,11,600,11],[563,14,600,14,"radix"],[563,19,600,19],[563,23,600,23],[563,25,600,25],[564,6,601,6],[564,10,601,10,"radix"],[564,15,601,15],[564,18,601,18],[564,19,601,19],[564,23,601,23],[564,25,601,25],[564,28,601,28,"radix"],[564,33,601,33],[564,35,601,35],[564,41,601,41,"RangeError"],[564,51,601,51],[564,52,601,52],[564,59,601,59],[564,60,601,60],[565,6,602,6],[565,10,602,10],[565,14,602,14],[565,15,602,15,"isZero"],[565,21,602,21],[565,22,602,22],[565,23,602,23],[565,25,602,25],[565,32,602,32],[565,35,602,35],[566,6,603,6],[566,10,603,10],[566,14,603,14],[566,15,603,15,"isNegative"],[566,25,603,25],[566,26,603,26],[566,27,603,27],[566,29,603,29],[567,8,604,8],[568,8,605,8],[568,12,605,12],[568,16,605,16],[568,17,605,17,"eq"],[568,19,605,19],[568,20,605,20,"MIN_VALUE"],[568,29,605,29],[568,30,605,30],[568,32,605,32],[569,10,606,10],[570,10,607,10],[571,10,608,10],[571,14,608,14,"radixLong"],[571,23,608,23],[571,26,608,26,"fromNumber"],[571,36,608,36],[571,37,608,37,"radix"],[571,42,608,42],[571,43,608,43],[572,12,609,12,"div"],[572,15,609,15],[572,18,609,18],[572,22,609,22],[572,23,609,23,"div"],[572,26,609,26],[572,27,609,27,"radixLong"],[572,36,609,36],[572,37,609,37],[573,12,610,12,"rem1"],[573,16,610,16],[573,19,610,19,"div"],[573,22,610,22],[573,23,610,23,"mul"],[573,26,610,26],[573,27,610,27,"radixLong"],[573,36,610,36],[573,37,610,37],[573,38,610,38,"sub"],[573,41,610,41],[573,42,610,42],[573,46,610,46],[573,47,610,47],[574,10,611,10],[574,17,611,17,"div"],[574,20,611,20],[574,21,611,21,"toString"],[574,29,611,29],[574,30,611,30,"radix"],[574,35,611,35],[574,36,611,36],[574,39,611,39,"rem1"],[574,43,611,43],[574,44,611,44,"toInt"],[574,49,611,49],[574,50,611,50],[574,51,611,51],[574,52,611,52,"toString"],[574,60,611,60],[574,61,611,61,"radix"],[574,66,611,66],[574,67,611,67],[575,8,612,8],[575,9,612,9],[575,15,612,15],[575,22,612,22],[575,25,612,25],[575,28,612,28],[575,32,612,32],[575,33,612,33,"neg"],[575,36,612,36],[575,37,612,37],[575,38,612,38],[575,39,612,39,"toString"],[575,47,612,47],[575,48,612,48,"radix"],[575,53,612,53],[575,54,612,54],[576,6,613,6],[578,6,615,6],[579,6,616,6],[580,6,617,6],[580,10,617,10,"radixToPower"],[580,22,617,22],[580,25,617,25,"fromNumber"],[580,35,617,35],[580,36,617,36,"pow_dbl"],[580,43,617,43],[580,44,617,44,"radix"],[580,49,617,49],[580,51,617,51],[580,52,617,52],[580,53,617,53],[580,55,617,55],[580,59,617,59],[580,60,617,60,"unsigned"],[580,68,617,68],[580,69,617,69],[581,8,618,8,"rem"],[581,11,618,11],[581,14,618,14],[581,18,618,18],[582,6,619,6],[582,10,619,10,"result"],[582,16,619,16],[582,19,619,19],[582,21,619,21],[583,6,620,6],[583,13,620,13],[583,17,620,17],[583,19,620,19],[584,8,621,8],[584,12,621,12,"remDiv"],[584,18,621,18],[584,21,621,21,"rem"],[584,24,621,24],[584,25,621,25,"div"],[584,28,621,28],[584,29,621,29,"radixToPower"],[584,41,621,41],[584,42,621,42],[585,10,622,10,"intval"],[585,16,622,16],[585,19,622,19,"rem"],[585,22,622,22],[585,23,622,23,"sub"],[585,26,622,26],[585,27,622,27,"remDiv"],[585,33,622,33],[585,34,622,34,"mul"],[585,37,622,37],[585,38,622,38,"radixToPower"],[585,50,622,50],[585,51,622,51],[585,52,622,52],[585,53,622,53,"toInt"],[585,58,622,58],[585,59,622,59],[585,60,622,60],[585,65,622,65],[585,66,622,66],[586,10,623,10,"digits"],[586,16,623,16],[586,19,623,19,"intval"],[586,25,623,25],[586,26,623,26,"toString"],[586,34,623,34],[586,35,623,35,"radix"],[586,40,623,40],[586,41,623,41],[587,8,624,8,"rem"],[587,11,624,11],[587,14,624,14,"remDiv"],[587,20,624,20],[588,8,625,8],[588,12,625,12,"rem"],[588,15,625,15],[588,16,625,16,"isZero"],[588,22,625,22],[588,23,625,23],[588,24,625,24],[588,26,625,26],[588,33,625,33,"digits"],[588,39,625,39],[588,42,625,42,"result"],[588,48,625,48],[588,49,625,49],[588,54,626,13],[589,10,627,10],[589,17,627,17,"digits"],[589,23,627,23],[589,24,627,24,"length"],[589,30,627,30],[589,33,627,33],[589,34,627,34],[589,36,627,36,"digits"],[589,42,627,42],[589,45,627,45],[589,48,627,48],[589,51,627,51,"digits"],[589,57,627,57],[590,10,628,10,"result"],[590,16,628,16],[590,19,628,19],[590,21,628,21],[590,24,628,24,"digits"],[590,30,628,30],[590,33,628,33,"result"],[590,39,628,39],[591,8,629,8],[592,6,630,6],[593,4,631,4],[593,5,631,5],[595,4,633,4],[596,0,634,0],[597,0,635,0],[598,0,636,0],[599,0,637,0],[600,4,638,4,"LongPrototype"],[600,17,638,17],[600,18,638,18,"getHighBits"],[600,29,638,29],[600,32,638,32],[600,41,638,41,"getHighBits"],[600,52,638,52,"getHighBits"],[600,53,638,52],[600,55,638,55],[601,6,639,6],[601,13,639,13],[601,17,639,17],[601,18,639,18,"high"],[601,22,639,22],[602,4,640,4],[602,5,640,5],[604,4,642,4],[605,0,643,0],[606,0,644,0],[607,0,645,0],[608,0,646,0],[609,4,647,4,"LongPrototype"],[609,17,647,17],[609,18,647,18,"getHighBitsUnsigned"],[609,37,647,37],[609,40,647,40],[609,49,647,49,"getHighBitsUnsigned"],[609,68,647,68,"getHighBitsUnsigned"],[609,69,647,68],[609,71,647,71],[610,6,648,6],[610,13,648,13],[610,17,648,17],[610,18,648,18,"high"],[610,22,648,22],[610,27,648,27],[610,28,648,28],[611,4,649,4],[611,5,649,5],[613,4,651,4],[614,0,652,0],[615,0,653,0],[616,0,654,0],[617,0,655,0],[618,4,656,4,"LongPrototype"],[618,17,656,17],[618,18,656,18,"getLowBits"],[618,28,656,28],[618,31,656,31],[618,40,656,40,"getLowBits"],[618,50,656,50,"getLowBits"],[618,51,656,50],[618,53,656,53],[619,6,657,6],[619,13,657,13],[619,17,657,17],[619,18,657,18,"low"],[619,21,657,21],[620,4,658,4],[620,5,658,5],[622,4,660,4],[623,0,661,0],[624,0,662,0],[625,0,663,0],[626,0,664,0],[627,4,665,4,"LongPrototype"],[627,17,665,17],[627,18,665,18,"getLowBitsUnsigned"],[627,36,665,36],[627,39,665,39],[627,48,665,48,"getLowBitsUnsigned"],[627,66,665,66,"getLowBitsUnsigned"],[627,67,665,66],[627,69,665,69],[628,6,666,6],[628,13,666,13],[628,17,666,17],[628,18,666,18,"low"],[628,21,666,21],[628,26,666,26],[628,27,666,27],[629,4,667,4],[629,5,667,5],[631,4,669,4],[632,0,670,0],[633,0,671,0],[634,0,672,0],[635,0,673,0],[636,4,674,4,"LongPrototype"],[636,17,674,17],[636,18,674,18,"getNumBitsAbs"],[636,31,674,31],[636,34,674,34],[636,43,674,43,"getNumBitsAbs"],[636,56,674,56,"getNumBitsAbs"],[636,57,674,56],[636,59,674,59],[637,6,675,6],[637,10,675,10],[637,14,675,14],[637,15,675,15,"isNegative"],[637,25,675,25],[637,26,675,26],[637,27,675,27],[638,8,676,8],[639,8,677,8],[639,15,677,15],[639,19,677,19],[639,20,677,20,"eq"],[639,22,677,22],[639,23,677,23,"MIN_VALUE"],[639,32,677,32],[639,33,677,33],[639,36,677,36],[639,38,677,38],[639,41,677,41],[639,45,677,45],[639,46,677,46,"neg"],[639,49,677,49],[639,50,677,50],[639,51,677,51],[639,52,677,52,"getNumBitsAbs"],[639,65,677,65],[639,66,677,66],[639,67,677,67],[640,6,678,6],[640,10,678,10,"val"],[640,13,678,13],[640,16,678,16],[640,20,678,20],[640,21,678,21,"high"],[640,25,678,25],[640,29,678,29],[640,30,678,30],[640,33,678,33],[640,37,678,37],[640,38,678,38,"high"],[640,42,678,42],[640,45,678,45],[640,49,678,49],[640,50,678,50,"low"],[640,53,678,53],[641,6,679,6],[641,11,679,11],[641,15,679,15,"bit"],[641,18,679,18],[641,21,679,21],[641,23,679,23],[641,25,679,25,"bit"],[641,28,679,28],[641,31,679,31],[641,32,679,32],[641,34,679,34,"bit"],[641,37,679,37],[641,39,679,39],[641,41,679,41],[641,45,679,45],[641,46,679,46,"val"],[641,49,679,49],[641,52,679,53],[641,53,679,54],[641,57,679,58,"bit"],[641,60,679,62],[641,65,679,67],[641,66,679,68],[641,68,679,70],[642,6,680,6],[642,13,680,13],[642,17,680,17],[642,18,680,18,"high"],[642,22,680,22],[642,26,680,26],[642,27,680,27],[642,30,680,30,"bit"],[642,33,680,33],[642,36,680,36],[642,38,680,38],[642,41,680,41,"bit"],[642,44,680,44],[642,47,680,47],[642,48,680,48],[643,4,681,4],[643,5,681,5],[645,4,683,4],[646,0,684,0],[647,0,685,0],[648,0,686,0],[649,0,687,0],[650,4,688,4,"LongPrototype"],[650,17,688,17],[650,18,688,18,"isSafeInteger"],[650,31,688,31],[650,34,688,34],[650,43,688,43,"isSafeInteger"],[650,56,688,56,"isSafeInteger"],[650,57,688,56],[650,59,688,59],[651,6,689,6],[652,6,690,6],[652,10,690,10,"top11Bits"],[652,19,690,19],[652,22,690,22],[652,26,690,26],[652,27,690,27,"high"],[652,31,690,31],[652,35,690,35],[652,37,690,37],[653,6,691,6],[654,6,692,6],[654,10,692,10],[654,11,692,11,"top11Bits"],[654,20,692,20],[654,22,692,22],[654,29,692,29],[654,33,692,33],[655,6,693,6],[656,6,694,6],[656,10,694,10],[656,14,694,14],[656,15,694,15,"unsigned"],[656,23,694,23],[656,25,694,25],[656,32,694,32],[656,37,694,37],[657,6,695,6],[658,6,696,6],[658,13,696,13,"top11Bits"],[658,22,696,22],[658,27,696,27],[658,28,696,28],[658,29,696,29],[658,33,696,33],[658,35,696,35],[658,39,696,39],[658,40,696,40,"low"],[658,43,696,43],[658,48,696,48],[658,49,696,49],[658,53,696,53],[658,57,696,57],[658,58,696,58,"high"],[658,62,696,62],[658,67,696,67],[658,68,696,68],[658,76,696,76],[658,77,696,77],[659,4,697,4],[659,5,697,5],[661,4,699,4],[662,0,700,0],[663,0,701,0],[664,0,702,0],[665,0,703,0],[666,4,704,4,"LongPrototype"],[666,17,704,17],[666,18,704,18,"isZero"],[666,24,704,24],[666,27,704,27],[666,36,704,36,"isZero"],[666,42,704,42,"isZero"],[666,43,704,42],[666,45,704,45],[667,6,705,6],[667,13,705,13],[667,17,705,17],[667,18,705,18,"high"],[667,22,705,22],[667,27,705,27],[667,28,705,28],[667,32,705,32],[667,36,705,36],[667,37,705,37,"low"],[667,40,705,40],[667,45,705,45],[667,46,705,46],[668,4,706,4],[668,5,706,5],[670,4,708,4],[671,0,709,0],[672,0,710,0],[673,0,711,0],[674,4,712,4,"LongPrototype"],[674,17,712,17],[674,18,712,18,"eqz"],[674,21,712,21],[674,24,712,24,"LongPrototype"],[674,37,712,37],[674,38,712,38,"isZero"],[674,44,712,44],[676,4,714,4],[677,0,715,0],[678,0,716,0],[679,0,717,0],[680,0,718,0],[681,4,719,4,"LongPrototype"],[681,17,719,17],[681,18,719,18,"isNegative"],[681,28,719,28],[681,31,719,31],[681,40,719,40,"isNegative"],[681,50,719,50,"isNegative"],[681,51,719,50],[681,53,719,53],[682,6,720,6],[682,13,720,13],[682,14,720,14],[682,18,720,18],[682,19,720,19,"unsigned"],[682,27,720,27],[682,31,720,31],[682,35,720,35],[682,36,720,36,"high"],[682,40,720,40],[682,43,720,43],[682,44,720,44],[683,4,721,4],[683,5,721,5],[685,4,723,4],[686,0,724,0],[687,0,725,0],[688,0,726,0],[689,0,727,0],[690,4,728,4,"LongPrototype"],[690,17,728,17],[690,18,728,18,"isPositive"],[690,28,728,28],[690,31,728,31],[690,40,728,40,"isPositive"],[690,50,728,50,"isPositive"],[690,51,728,50],[690,53,728,53],[691,6,729,6],[691,13,729,13],[691,17,729,17],[691,18,729,18,"unsigned"],[691,26,729,26],[691,30,729,30],[691,34,729,34],[691,35,729,35,"high"],[691,39,729,39],[691,43,729,43],[691,44,729,44],[692,4,730,4],[692,5,730,5],[694,4,732,4],[695,0,733,0],[696,0,734,0],[697,0,735,0],[698,0,736,0],[699,4,737,4,"LongPrototype"],[699,17,737,17],[699,18,737,18,"isOdd"],[699,23,737,23],[699,26,737,26],[699,35,737,35,"isOdd"],[699,40,737,40,"isOdd"],[699,41,737,40],[699,43,737,43],[700,6,738,6],[700,13,738,13],[700,14,738,14],[700,18,738,18],[700,19,738,19,"low"],[700,22,738,22],[700,25,738,25],[700,26,738,26],[700,32,738,32],[700,33,738,33],[701,4,739,4],[701,5,739,5],[703,4,741,4],[704,0,742,0],[705,0,743,0],[706,0,744,0],[707,0,745,0],[708,4,746,4,"LongPrototype"],[708,17,746,17],[708,18,746,18,"isEven"],[708,24,746,24],[708,27,746,27],[708,36,746,36,"isEven"],[708,42,746,42,"isEven"],[708,43,746,42],[708,45,746,45],[709,6,747,6],[709,13,747,13],[709,14,747,14],[709,18,747,18],[709,19,747,19,"low"],[709,22,747,22],[709,25,747,25],[709,26,747,26],[709,32,747,32],[709,33,747,33],[710,4,748,4],[710,5,748,5],[712,4,750,4],[713,0,751,0],[714,0,752,0],[715,0,753,0],[716,0,754,0],[717,0,755,0],[718,4,756,4,"LongPrototype"],[718,17,756,17],[718,18,756,18,"equals"],[718,24,756,24],[718,27,756,27],[718,36,756,36,"equals"],[718,42,756,42,"equals"],[718,43,756,43,"other"],[718,48,756,48],[718,50,756,50],[719,6,757,6],[719,10,757,10],[719,11,757,11,"isLong"],[719,17,757,17],[719,18,757,18,"other"],[719,23,757,23],[719,24,757,24],[719,26,757,26,"other"],[719,31,757,31],[719,34,757,34,"fromValue"],[719,43,757,43],[719,44,757,44,"other"],[719,49,757,49],[719,50,757,50],[720,6,758,6],[720,10,759,8],[720,14,759,12],[720,15,759,13,"unsigned"],[720,23,759,21],[720,28,759,26,"other"],[720,33,759,31],[720,34,759,32,"unsigned"],[720,42,759,40],[720,46,760,8],[720,50,760,12],[720,51,760,13,"high"],[720,55,760,17],[720,60,760,22],[720,62,760,24],[720,67,760,29],[720,68,760,30],[720,72,761,8,"other"],[720,77,761,13],[720,78,761,14,"high"],[720,82,761,18],[720,87,761,23],[720,89,761,25],[720,94,761,30],[720,95,761,31],[720,97,763,8],[720,104,763,15],[720,109,763,20],[721,6,764,6],[721,13,764,13],[721,17,764,17],[721,18,764,18,"high"],[721,22,764,22],[721,27,764,27,"other"],[721,32,764,32],[721,33,764,33,"high"],[721,37,764,37],[721,41,764,41],[721,45,764,45],[721,46,764,46,"low"],[721,49,764,49],[721,54,764,54,"other"],[721,59,764,59],[721,60,764,60,"low"],[721,63,764,63],[722,4,765,4],[722,5,765,5],[724,4,767,4],[725,0,768,0],[726,0,769,0],[727,0,770,0],[728,0,771,0],[729,0,772,0],[730,4,773,4,"LongPrototype"],[730,17,773,17],[730,18,773,18,"eq"],[730,20,773,20],[730,23,773,23,"LongPrototype"],[730,36,773,36],[730,37,773,37,"equals"],[730,43,773,43],[732,4,775,4],[733,0,776,0],[734,0,777,0],[735,0,778,0],[736,0,779,0],[737,0,780,0],[738,4,781,4,"LongPrototype"],[738,17,781,17],[738,18,781,18,"notEquals"],[738,27,781,27],[738,30,781,30],[738,39,781,39,"notEquals"],[738,48,781,48,"notEquals"],[738,49,781,49,"other"],[738,54,781,54],[738,56,781,56],[739,6,782,6],[739,13,782,13],[739,14,782,14],[739,18,782,18],[739,19,782,19,"eq"],[739,21,782,21],[739,22,782,22],[739,37,782,38,"other"],[739,42,782,43],[739,43,782,44],[740,4,783,4],[740,5,783,5],[742,4,785,4],[743,0,786,0],[744,0,787,0],[745,0,788,0],[746,0,789,0],[747,0,790,0],[748,4,791,4,"LongPrototype"],[748,17,791,17],[748,18,791,18,"neq"],[748,21,791,21],[748,24,791,24,"LongPrototype"],[748,37,791,37],[748,38,791,38,"notEquals"],[748,47,791,47],[750,4,793,4],[751,0,794,0],[752,0,795,0],[753,0,796,0],[754,0,797,0],[755,0,798,0],[756,4,799,4,"LongPrototype"],[756,17,799,17],[756,18,799,18,"ne"],[756,20,799,20],[756,23,799,23,"LongPrototype"],[756,36,799,36],[756,37,799,37,"notEquals"],[756,46,799,46],[758,4,801,4],[759,0,802,0],[760,0,803,0],[761,0,804,0],[762,0,805,0],[763,0,806,0],[764,4,807,4,"LongPrototype"],[764,17,807,17],[764,18,807,18,"lessThan"],[764,26,807,26],[764,29,807,29],[764,38,807,38,"lessThan"],[764,46,807,46,"lessThan"],[764,47,807,47,"other"],[764,52,807,52],[764,54,807,54],[765,6,808,6],[765,13,808,13],[765,17,808,17],[765,18,808,18,"comp"],[765,22,808,22],[765,23,808,23],[765,38,808,39,"other"],[765,43,808,44],[765,44,808,45],[765,47,808,48],[765,48,808,49],[766,4,809,4],[766,5,809,5],[768,4,811,4],[769,0,812,0],[770,0,813,0],[771,0,814,0],[772,0,815,0],[773,0,816,0],[774,4,817,4,"LongPrototype"],[774,17,817,17],[774,18,817,18,"lt"],[774,20,817,20],[774,23,817,23,"LongPrototype"],[774,36,817,36],[774,37,817,37,"lessThan"],[774,45,817,45],[776,4,819,4],[777,0,820,0],[778,0,821,0],[779,0,822,0],[780,0,823,0],[781,0,824,0],[782,4,825,4,"LongPrototype"],[782,17,825,17],[782,18,825,18,"lessThanOrEqual"],[782,33,825,33],[782,36,825,36],[782,45,825,45,"lessThanOrEqual"],[782,60,825,60,"lessThanOrEqual"],[782,61,825,61,"other"],[782,66,825,66],[782,68,825,68],[783,6,826,6],[783,13,826,13],[783,17,826,17],[783,18,826,18,"comp"],[783,22,826,22],[783,23,826,23],[783,38,826,39,"other"],[783,43,826,44],[783,44,826,45],[783,48,826,49],[783,49,826,50],[784,4,827,4],[784,5,827,5],[786,4,829,4],[787,0,830,0],[788,0,831,0],[789,0,832,0],[790,0,833,0],[791,0,834,0],[792,4,835,4,"LongPrototype"],[792,17,835,17],[792,18,835,18,"lte"],[792,21,835,21],[792,24,835,24,"LongPrototype"],[792,37,835,37],[792,38,835,38,"lessThanOrEqual"],[792,53,835,53],[794,4,837,4],[795,0,838,0],[796,0,839,0],[797,0,840,0],[798,0,841,0],[799,0,842,0],[800,4,843,4,"LongPrototype"],[800,17,843,17],[800,18,843,18,"le"],[800,20,843,20],[800,23,843,23,"LongPrototype"],[800,36,843,36],[800,37,843,37,"lessThanOrEqual"],[800,52,843,52],[802,4,845,4],[803,0,846,0],[804,0,847,0],[805,0,848,0],[806,0,849,0],[807,0,850,0],[808,4,851,4,"LongPrototype"],[808,17,851,17],[808,18,851,18,"greaterThan"],[808,29,851,29],[808,32,851,32],[808,41,851,41,"greaterThan"],[808,52,851,52,"greaterThan"],[808,53,851,53,"other"],[808,58,851,58],[808,60,851,60],[809,6,852,6],[809,13,852,13],[809,17,852,17],[809,18,852,18,"comp"],[809,22,852,22],[809,23,852,23],[809,38,852,39,"other"],[809,43,852,44],[809,44,852,45],[809,47,852,48],[809,48,852,49],[810,4,853,4],[810,5,853,5],[812,4,855,4],[813,0,856,0],[814,0,857,0],[815,0,858,0],[816,0,859,0],[817,0,860,0],[818,4,861,4,"LongPrototype"],[818,17,861,17],[818,18,861,18,"gt"],[818,20,861,20],[818,23,861,23,"LongPrototype"],[818,36,861,36],[818,37,861,37,"greaterThan"],[818,48,861,48],[820,4,863,4],[821,0,864,0],[822,0,865,0],[823,0,866,0],[824,0,867,0],[825,0,868,0],[826,4,869,4,"LongPrototype"],[826,17,869,17],[826,18,869,18,"greaterThanOrEqual"],[826,36,869,36],[826,39,869,39],[826,48,869,48,"greaterThanOrEqual"],[826,66,869,66,"greaterThanOrEqual"],[826,67,869,67,"other"],[826,72,869,72],[826,74,869,74],[827,6,870,6],[827,13,870,13],[827,17,870,17],[827,18,870,18,"comp"],[827,22,870,22],[827,23,870,23],[827,38,870,39,"other"],[827,43,870,44],[827,44,870,45],[827,48,870,49],[827,49,870,50],[828,4,871,4],[828,5,871,5],[830,4,873,4],[831,0,874,0],[832,0,875,0],[833,0,876,0],[834,0,877,0],[835,0,878,0],[836,4,879,4,"LongPrototype"],[836,17,879,17],[836,18,879,18,"gte"],[836,21,879,21],[836,24,879,24,"LongPrototype"],[836,37,879,37],[836,38,879,38,"greaterThanOrEqual"],[836,56,879,56],[838,4,881,4],[839,0,882,0],[840,0,883,0],[841,0,884,0],[842,0,885,0],[843,0,886,0],[844,4,887,4,"LongPrototype"],[844,17,887,17],[844,18,887,18,"ge"],[844,20,887,20],[844,23,887,23,"LongPrototype"],[844,36,887,36],[844,37,887,37,"greaterThanOrEqual"],[844,55,887,55],[846,4,889,4],[847,0,890,0],[848,0,891,0],[849,0,892,0],[850,0,893,0],[851,0,894,0],[852,0,895,0],[853,4,896,4,"LongPrototype"],[853,17,896,17],[853,18,896,18,"compare"],[853,25,896,25],[853,28,896,28],[853,37,896,37,"compare"],[853,44,896,44,"compare"],[853,45,896,45,"other"],[853,50,896,50],[853,52,896,52],[854,6,897,6],[854,10,897,10],[854,11,897,11,"isLong"],[854,17,897,17],[854,18,897,18,"other"],[854,23,897,23],[854,24,897,24],[854,26,897,26,"other"],[854,31,897,31],[854,34,897,34,"fromValue"],[854,43,897,43],[854,44,897,44,"other"],[854,49,897,49],[854,50,897,50],[855,6,898,6],[855,10,898,10],[855,14,898,14],[855,15,898,15,"eq"],[855,17,898,17],[855,18,898,18,"other"],[855,23,898,23],[855,24,898,24],[855,26,898,26],[855,33,898,33],[855,34,898,34],[856,6,899,6],[856,10,899,10,"thisNeg"],[856,17,899,17],[856,20,899,20],[856,24,899,24],[856,25,899,25,"isNegative"],[856,35,899,35],[856,36,899,36],[856,37,899,37],[857,8,900,8,"otherNeg"],[857,16,900,16],[857,19,900,19,"other"],[857,24,900,24],[857,25,900,25,"isNegative"],[857,35,900,35],[857,36,900,36],[857,37,900,37],[858,6,901,6],[858,10,901,10,"thisNeg"],[858,17,901,17],[858,21,901,21],[858,22,901,22,"otherNeg"],[858,30,901,30],[858,32,901,32],[858,39,901,39],[858,40,901,40],[858,41,901,41],[859,6,902,6],[859,10,902,10],[859,11,902,11,"thisNeg"],[859,18,902,18],[859,22,902,22,"otherNeg"],[859,30,902,30],[859,32,902,32],[859,39,902,39],[859,40,902,40],[860,6,903,6],[861,6,904,6],[861,10,904,10],[861,11,904,11],[861,15,904,15],[861,16,904,16,"unsigned"],[861,24,904,24],[861,26,904,26],[861,33,904,33],[861,37,904,37],[861,38,904,38,"sub"],[861,41,904,41],[861,42,904,42,"other"],[861,47,904,47],[861,48,904,48],[861,49,904,49,"isNegative"],[861,59,904,59],[861,60,904,60],[861,61,904,61],[861,64,904,64],[861,65,904,65],[861,66,904,66],[861,69,904,69],[861,70,904,70],[862,6,905,6],[863,6,906,6],[863,13,906,13,"other"],[863,18,906,18],[863,19,906,19,"high"],[863,23,906,23],[863,28,906,28],[863,29,906,29],[863,32,906,32],[863,36,906,36],[863,37,906,37,"high"],[863,41,906,41],[863,46,906,46],[863,47,906,47],[863,51,907,9,"other"],[863,56,907,14],[863,57,907,15,"high"],[863,61,907,19],[863,66,907,24],[863,70,907,28],[863,71,907,29,"high"],[863,75,907,33],[863,79,907,37,"other"],[863,84,907,42],[863,85,907,43,"low"],[863,88,907,46],[863,93,907,51],[863,94,907,52],[863,97,907,55],[863,101,907,59],[863,102,907,60,"low"],[863,105,907,63],[863,110,907,68],[863,111,907,70],[863,114,908,10],[863,115,908,11],[863,116,908,12],[863,119,909,10],[863,120,909,11],[864,4,910,4],[864,5,910,5],[866,4,912,4],[867,0,913,0],[868,0,914,0],[869,0,915,0],[870,0,916,0],[871,0,917,0],[872,0,918,0],[873,4,919,4,"LongPrototype"],[873,17,919,17],[873,18,919,18,"comp"],[873,22,919,22],[873,25,919,25,"LongPrototype"],[873,38,919,38],[873,39,919,39,"compare"],[873,46,919,46],[875,4,921,4],[876,0,922,0],[877,0,923,0],[878,0,924,0],[879,0,925,0],[880,4,926,4,"LongPrototype"],[880,17,926,17],[880,18,926,18,"negate"],[880,24,926,24],[880,27,926,27],[880,36,926,36,"negate"],[880,42,926,42,"negate"],[880,43,926,42],[880,45,926,45],[881,6,927,6],[881,10,927,10],[881,11,927,11],[881,15,927,15],[881,16,927,16,"unsigned"],[881,24,927,24],[881,28,927,28],[881,32,927,32],[881,33,927,33,"eq"],[881,35,927,35],[881,36,927,36,"MIN_VALUE"],[881,45,927,45],[881,46,927,46],[881,48,927,48],[881,55,927,55,"MIN_VALUE"],[881,64,927,64],[882,6,928,6],[882,13,928,13],[882,17,928,17],[882,18,928,18,"not"],[882,21,928,21],[882,22,928,22],[882,23,928,23],[882,24,928,24,"add"],[882,27,928,27],[882,28,928,28,"ONE"],[882,31,928,31],[882,32,928,32],[883,4,929,4],[883,5,929,5],[885,4,931,4],[886,0,932,0],[887,0,933,0],[888,0,934,0],[889,0,935,0],[890,4,936,4,"LongPrototype"],[890,17,936,17],[890,18,936,18,"neg"],[890,21,936,21],[890,24,936,24,"LongPrototype"],[890,37,936,37],[890,38,936,38,"negate"],[890,44,936,44],[892,4,938,4],[893,0,939,0],[894,0,940,0],[895,0,941,0],[896,0,942,0],[897,0,943,0],[898,4,944,4,"LongPrototype"],[898,17,944,17],[898,18,944,18,"add"],[898,21,944,21],[898,24,944,24],[898,33,944,33,"add"],[898,36,944,36,"add"],[898,37,944,37,"addend"],[898,43,944,43],[898,45,944,45],[899,6,945,6],[899,10,945,10],[899,11,945,11,"isLong"],[899,17,945,17],[899,18,945,18,"addend"],[899,24,945,24],[899,25,945,25],[899,27,945,27,"addend"],[899,33,945,33],[899,36,945,36,"fromValue"],[899,45,945,45],[899,46,945,46,"addend"],[899,52,945,52],[899,53,945,53],[901,6,947,6],[903,6,949,6],[903,10,949,10,"a48"],[903,13,949,13],[903,16,949,16],[903,20,949,20],[903,21,949,21,"high"],[903,25,949,25],[903,30,949,30],[903,32,949,32],[904,6,950,6],[904,10,950,10,"a32"],[904,13,950,13],[904,16,950,16],[904,20,950,20],[904,21,950,21,"high"],[904,25,950,25],[904,28,950,28],[904,34,950,34],[905,6,951,6],[905,10,951,10,"a16"],[905,13,951,13],[905,16,951,16],[905,20,951,20],[905,21,951,21,"low"],[905,24,951,24],[905,29,951,29],[905,31,951,31],[906,6,952,6],[906,10,952,10,"a00"],[906,13,952,13],[906,16,952,16],[906,20,952,20],[906,21,952,21,"low"],[906,24,952,24],[906,27,952,27],[906,33,952,33],[907,6,953,6],[907,10,953,10,"b48"],[907,13,953,13],[907,16,953,16,"addend"],[907,22,953,22],[907,23,953,23,"high"],[907,27,953,27],[907,32,953,32],[907,34,953,34],[908,6,954,6],[908,10,954,10,"b32"],[908,13,954,13],[908,16,954,16,"addend"],[908,22,954,22],[908,23,954,23,"high"],[908,27,954,27],[908,30,954,30],[908,36,954,36],[909,6,955,6],[909,10,955,10,"b16"],[909,13,955,13],[909,16,955,16,"addend"],[909,22,955,22],[909,23,955,23,"low"],[909,26,955,26],[909,31,955,31],[909,33,955,33],[910,6,956,6],[910,10,956,10,"b00"],[910,13,956,13],[910,16,956,16,"addend"],[910,22,956,22],[910,23,956,23,"low"],[910,26,956,26],[910,29,956,29],[910,35,956,35],[911,6,957,6],[911,10,957,10,"c48"],[911,13,957,13],[911,16,957,16],[911,17,957,17],[912,8,958,8,"c32"],[912,11,958,11],[912,14,958,14],[912,15,958,15],[913,8,959,8,"c16"],[913,11,959,11],[913,14,959,14],[913,15,959,15],[914,8,960,8,"c00"],[914,11,960,11],[914,14,960,14],[914,15,960,15],[915,6,961,6,"c00"],[915,9,961,9],[915,13,961,13,"a00"],[915,16,961,16],[915,19,961,19,"b00"],[915,22,961,22],[916,6,962,6,"c16"],[916,9,962,9],[916,13,962,13,"c00"],[916,16,962,16],[916,21,962,21],[916,23,962,23],[917,6,963,6,"c00"],[917,9,963,9],[917,13,963,13],[917,19,963,19],[918,6,964,6,"c16"],[918,9,964,9],[918,13,964,13,"a16"],[918,16,964,16],[918,19,964,19,"b16"],[918,22,964,22],[919,6,965,6,"c32"],[919,9,965,9],[919,13,965,13,"c16"],[919,16,965,16],[919,21,965,21],[919,23,965,23],[920,6,966,6,"c16"],[920,9,966,9],[920,13,966,13],[920,19,966,19],[921,6,967,6,"c32"],[921,9,967,9],[921,13,967,13,"a32"],[921,16,967,16],[921,19,967,19,"b32"],[921,22,967,22],[922,6,968,6,"c48"],[922,9,968,9],[922,13,968,13,"c32"],[922,16,968,16],[922,21,968,21],[922,23,968,23],[923,6,969,6,"c32"],[923,9,969,9],[923,13,969,13],[923,19,969,19],[924,6,970,6,"c48"],[924,9,970,9],[924,13,970,13,"a48"],[924,16,970,16],[924,19,970,19,"b48"],[924,22,970,22],[925,6,971,6,"c48"],[925,9,971,9],[925,13,971,13],[925,19,971,19],[926,6,972,6],[926,13,972,13,"fromBits"],[926,21,972,21],[926,22,972,23,"c16"],[926,25,972,26],[926,29,972,30],[926,31,972,32],[926,34,972,36,"c00"],[926,37,972,39],[926,39,972,42,"c48"],[926,42,972,45],[926,46,972,49],[926,48,972,51],[926,51,972,55,"c32"],[926,54,972,58],[926,56,972,60],[926,60,972,64],[926,61,972,65,"unsigned"],[926,69,972,73],[926,70,972,74],[927,4,973,4],[927,5,973,5],[929,4,975,4],[930,0,976,0],[931,0,977,0],[932,0,978,0],[933,0,979,0],[934,0,980,0],[935,4,981,4,"LongPrototype"],[935,17,981,17],[935,18,981,18,"subtract"],[935,26,981,26],[935,29,981,29],[935,38,981,38,"subtract"],[935,46,981,46,"subtract"],[935,47,981,47,"subtrahend"],[935,57,981,57],[935,59,981,59],[936,6,982,6],[936,10,982,10],[936,11,982,11,"isLong"],[936,17,982,17],[936,18,982,18,"subtrahend"],[936,28,982,28],[936,29,982,29],[936,31,982,31,"subtrahend"],[936,41,982,41],[936,44,982,44,"fromValue"],[936,53,982,53],[936,54,982,54,"subtrahend"],[936,64,982,64],[936,65,982,65],[937,6,983,6],[937,13,983,13],[937,17,983,17],[937,18,983,18,"add"],[937,21,983,21],[937,22,983,22,"subtrahend"],[937,32,983,32],[937,33,983,33,"neg"],[937,36,983,36],[937,37,983,37],[937,38,983,38],[937,39,983,39],[938,4,984,4],[938,5,984,5],[940,4,986,4],[941,0,987,0],[942,0,988,0],[943,0,989,0],[944,0,990,0],[945,0,991,0],[946,4,992,4,"LongPrototype"],[946,17,992,17],[946,18,992,18,"sub"],[946,21,992,21],[946,24,992,24,"LongPrototype"],[946,37,992,37],[946,38,992,38,"subtract"],[946,46,992,46],[948,4,994,4],[949,0,995,0],[950,0,996,0],[951,0,997,0],[952,0,998,0],[953,0,999,0],[954,4,1000,4,"LongPrototype"],[954,17,1000,17],[954,18,1000,18,"multiply"],[954,26,1000,26],[954,29,1000,29],[954,38,1000,38,"multiply"],[954,46,1000,46,"multiply"],[954,47,1000,47,"multiplier"],[954,57,1000,57],[954,59,1000,59],[955,6,1001,6],[955,10,1001,10],[955,14,1001,14],[955,15,1001,15,"isZero"],[955,21,1001,21],[955,22,1001,22],[955,23,1001,23],[955,25,1001,25],[955,32,1001,32],[955,36,1001,36],[956,6,1002,6],[956,10,1002,10],[956,11,1002,11,"isLong"],[956,17,1002,17],[956,18,1002,18,"multiplier"],[956,28,1002,28],[956,29,1002,29],[956,31,1002,31,"multiplier"],[956,41,1002,41],[956,44,1002,44,"fromValue"],[956,53,1002,53],[956,54,1002,54,"multiplier"],[956,64,1002,64],[956,65,1002,65],[958,6,1004,6],[959,6,1005,6],[959,10,1005,10,"wasm"],[959,14,1005,14],[959,16,1005,16],[960,8,1006,8],[960,12,1006,12,"low"],[960,15,1006,15],[960,18,1006,18,"wasm"],[960,22,1006,22],[960,23,1006,23],[960,28,1006,28],[960,29,1006,29],[960,30,1007,10],[960,34,1007,14],[960,35,1007,15,"low"],[960,38,1007,18],[960,40,1008,10],[960,44,1008,14],[960,45,1008,15,"high"],[960,49,1008,19],[960,51,1009,10,"multiplier"],[960,61,1009,20],[960,62,1009,21,"low"],[960,65,1009,24],[960,67,1010,10,"multiplier"],[960,77,1010,20],[960,78,1010,21,"high"],[960,82,1011,8],[960,83,1011,9],[961,8,1012,8],[961,15,1012,15,"fromBits"],[961,23,1012,23],[961,24,1012,24,"low"],[961,27,1012,27],[961,29,1012,29,"wasm"],[961,33,1012,33],[961,34,1012,34],[961,44,1012,44],[961,45,1012,45],[961,46,1012,46],[961,47,1012,47],[961,49,1012,49],[961,53,1012,53],[961,54,1012,54,"unsigned"],[961,62,1012,62],[961,63,1012,63],[962,6,1013,6],[963,6,1014,6],[963,10,1014,10,"multiplier"],[963,20,1014,20],[963,21,1014,21,"isZero"],[963,27,1014,27],[963,28,1014,28],[963,29,1014,29],[963,31,1014,31],[963,38,1014,38],[963,42,1014,42],[963,43,1014,43,"unsigned"],[963,51,1014,51],[963,54,1014,54,"UZERO"],[963,59,1014,59],[963,62,1014,62,"ZERO"],[963,66,1014,66],[964,6,1015,6],[964,10,1015,10],[964,14,1015,14],[964,15,1015,15,"eq"],[964,17,1015,17],[964,18,1015,18,"MIN_VALUE"],[964,27,1015,27],[964,28,1015,28],[964,30,1015,30],[964,37,1015,37,"multiplier"],[964,47,1015,47],[964,48,1015,48,"isOdd"],[964,53,1015,53],[964,54,1015,54],[964,55,1015,55],[964,58,1015,58,"MIN_VALUE"],[964,67,1015,67],[964,70,1015,70,"ZERO"],[964,74,1015,74],[965,6,1016,6],[965,10,1016,10,"multiplier"],[965,20,1016,20],[965,21,1016,21,"eq"],[965,23,1016,23],[965,24,1016,24,"MIN_VALUE"],[965,33,1016,33],[965,34,1016,34],[965,36,1016,36],[965,43,1016,43],[965,47,1016,47],[965,48,1016,48,"isOdd"],[965,53,1016,53],[965,54,1016,54],[965,55,1016,55],[965,58,1016,58,"MIN_VALUE"],[965,67,1016,67],[965,70,1016,70,"ZERO"],[965,74,1016,74],[966,6,1017,6],[966,10,1017,10],[966,14,1017,14],[966,15,1017,15,"isNegative"],[966,25,1017,25],[966,26,1017,26],[966,27,1017,27],[966,29,1017,29],[967,8,1018,8],[967,12,1018,12,"multiplier"],[967,22,1018,22],[967,23,1018,23,"isNegative"],[967,33,1018,33],[967,34,1018,34],[967,35,1018,35],[967,37,1018,37],[967,44,1018,44],[967,48,1018,48],[967,49,1018,49,"neg"],[967,52,1018,52],[967,53,1018,53],[967,54,1018,54],[967,55,1018,55,"mul"],[967,58,1018,58],[967,59,1018,59,"multiplier"],[967,69,1018,69],[967,70,1018,70,"neg"],[967,73,1018,73],[967,74,1018,74],[967,75,1018,75],[967,76,1018,76],[967,77,1018,77],[967,82,1019,13],[967,89,1019,20],[967,93,1019,24],[967,94,1019,25,"neg"],[967,97,1019,28],[967,98,1019,29],[967,99,1019,30],[967,100,1019,31,"mul"],[967,103,1019,34],[967,104,1019,35,"multiplier"],[967,114,1019,45],[967,115,1019,46],[967,116,1019,47,"neg"],[967,119,1019,50],[967,120,1019,51],[967,121,1019,52],[968,6,1020,6],[968,7,1020,7],[968,13,1020,13],[968,17,1020,17,"multiplier"],[968,27,1020,27],[968,28,1020,28,"isNegative"],[968,38,1020,38],[968,39,1020,39],[968,40,1020,40],[968,42,1021,8],[968,49,1021,15],[968,53,1021,19],[968,54,1021,20,"mul"],[968,57,1021,23],[968,58,1021,24,"multiplier"],[968,68,1021,34],[968,69,1021,35,"neg"],[968,72,1021,38],[968,73,1021,39],[968,74,1021,40],[968,75,1021,41],[968,76,1021,42,"neg"],[968,79,1021,45],[968,80,1021,46],[968,81,1021,47],[970,6,1023,6],[971,6,1024,6],[971,10,1024,10],[971,14,1024,14],[971,15,1024,15,"lt"],[971,17,1024,17],[971,18,1024,18,"TWO_PWR_24"],[971,28,1024,28],[971,29,1024,29],[971,33,1024,33,"multiplier"],[971,43,1024,43],[971,44,1024,44,"lt"],[971,46,1024,46],[971,47,1024,47,"TWO_PWR_24"],[971,57,1024,57],[971,58,1024,58],[971,60,1025,8],[971,67,1025,15,"fromNumber"],[971,77,1025,25],[971,78,1026,10],[971,82,1026,14],[971,83,1026,15,"toNumber"],[971,91,1026,23],[971,92,1026,24],[971,93,1026,25],[971,96,1026,28,"multiplier"],[971,106,1026,38],[971,107,1026,39,"toNumber"],[971,115,1026,47],[971,116,1026,48],[971,117,1026,49],[971,119,1027,10],[971,123,1027,14],[971,124,1027,15,"unsigned"],[971,132,1028,8],[971,133,1028,9],[973,6,1030,6],[974,6,1031,6],[976,6,1033,6],[976,10,1033,10,"a48"],[976,13,1033,13],[976,16,1033,16],[976,20,1033,20],[976,21,1033,21,"high"],[976,25,1033,25],[976,30,1033,30],[976,32,1033,32],[977,6,1034,6],[977,10,1034,10,"a32"],[977,13,1034,13],[977,16,1034,16],[977,20,1034,20],[977,21,1034,21,"high"],[977,25,1034,25],[977,28,1034,28],[977,34,1034,34],[978,6,1035,6],[978,10,1035,10,"a16"],[978,13,1035,13],[978,16,1035,16],[978,20,1035,20],[978,21,1035,21,"low"],[978,24,1035,24],[978,29,1035,29],[978,31,1035,31],[979,6,1036,6],[979,10,1036,10,"a00"],[979,13,1036,13],[979,16,1036,16],[979,20,1036,20],[979,21,1036,21,"low"],[979,24,1036,24],[979,27,1036,27],[979,33,1036,33],[980,6,1037,6],[980,10,1037,10,"b48"],[980,13,1037,13],[980,16,1037,16,"multiplier"],[980,26,1037,26],[980,27,1037,27,"high"],[980,31,1037,31],[980,36,1037,36],[980,38,1037,38],[981,6,1038,6],[981,10,1038,10,"b32"],[981,13,1038,13],[981,16,1038,16,"multiplier"],[981,26,1038,26],[981,27,1038,27,"high"],[981,31,1038,31],[981,34,1038,34],[981,40,1038,40],[982,6,1039,6],[982,10,1039,10,"b16"],[982,13,1039,13],[982,16,1039,16,"multiplier"],[982,26,1039,26],[982,27,1039,27,"low"],[982,30,1039,30],[982,35,1039,35],[982,37,1039,37],[983,6,1040,6],[983,10,1040,10,"b00"],[983,13,1040,13],[983,16,1040,16,"multiplier"],[983,26,1040,26],[983,27,1040,27,"low"],[983,30,1040,30],[983,33,1040,33],[983,39,1040,39],[984,6,1041,6],[984,10,1041,10,"c48"],[984,13,1041,13],[984,16,1041,16],[984,17,1041,17],[985,8,1042,8,"c32"],[985,11,1042,11],[985,14,1042,14],[985,15,1042,15],[986,8,1043,8,"c16"],[986,11,1043,11],[986,14,1043,14],[986,15,1043,15],[987,8,1044,8,"c00"],[987,11,1044,11],[987,14,1044,14],[987,15,1044,15],[988,6,1045,6,"c00"],[988,9,1045,9],[988,13,1045,13,"a00"],[988,16,1045,16],[988,19,1045,19,"b00"],[988,22,1045,22],[989,6,1046,6,"c16"],[989,9,1046,9],[989,13,1046,13,"c00"],[989,16,1046,16],[989,21,1046,21],[989,23,1046,23],[990,6,1047,6,"c00"],[990,9,1047,9],[990,13,1047,13],[990,19,1047,19],[991,6,1048,6,"c16"],[991,9,1048,9],[991,13,1048,13,"a16"],[991,16,1048,16],[991,19,1048,19,"b00"],[991,22,1048,22],[992,6,1049,6,"c32"],[992,9,1049,9],[992,13,1049,13,"c16"],[992,16,1049,16],[992,21,1049,21],[992,23,1049,23],[993,6,1050,6,"c16"],[993,9,1050,9],[993,13,1050,13],[993,19,1050,19],[994,6,1051,6,"c16"],[994,9,1051,9],[994,13,1051,13,"a00"],[994,16,1051,16],[994,19,1051,19,"b16"],[994,22,1051,22],[995,6,1052,6,"c32"],[995,9,1052,9],[995,13,1052,13,"c16"],[995,16,1052,16],[995,21,1052,21],[995,23,1052,23],[996,6,1053,6,"c16"],[996,9,1053,9],[996,13,1053,13],[996,19,1053,19],[997,6,1054,6,"c32"],[997,9,1054,9],[997,13,1054,13,"a32"],[997,16,1054,16],[997,19,1054,19,"b00"],[997,22,1054,22],[998,6,1055,6,"c48"],[998,9,1055,9],[998,13,1055,13,"c32"],[998,16,1055,16],[998,21,1055,21],[998,23,1055,23],[999,6,1056,6,"c32"],[999,9,1056,9],[999,13,1056,13],[999,19,1056,19],[1000,6,1057,6,"c32"],[1000,9,1057,9],[1000,13,1057,13,"a16"],[1000,16,1057,16],[1000,19,1057,19,"b16"],[1000,22,1057,22],[1001,6,1058,6,"c48"],[1001,9,1058,9],[1001,13,1058,13,"c32"],[1001,16,1058,16],[1001,21,1058,21],[1001,23,1058,23],[1002,6,1059,6,"c32"],[1002,9,1059,9],[1002,13,1059,13],[1002,19,1059,19],[1003,6,1060,6,"c32"],[1003,9,1060,9],[1003,13,1060,13,"a00"],[1003,16,1060,16],[1003,19,1060,19,"b32"],[1003,22,1060,22],[1004,6,1061,6,"c48"],[1004,9,1061,9],[1004,13,1061,13,"c32"],[1004,16,1061,16],[1004,21,1061,21],[1004,23,1061,23],[1005,6,1062,6,"c32"],[1005,9,1062,9],[1005,13,1062,13],[1005,19,1062,19],[1006,6,1063,6,"c48"],[1006,9,1063,9],[1006,13,1063,13,"a48"],[1006,16,1063,16],[1006,19,1063,19,"b00"],[1006,22,1063,22],[1006,25,1063,25,"a32"],[1006,28,1063,28],[1006,31,1063,31,"b16"],[1006,34,1063,34],[1006,37,1063,37,"a16"],[1006,40,1063,40],[1006,43,1063,43,"b32"],[1006,46,1063,46],[1006,49,1063,49,"a00"],[1006,52,1063,52],[1006,55,1063,55,"b48"],[1006,58,1063,58],[1007,6,1064,6,"c48"],[1007,9,1064,9],[1007,13,1064,13],[1007,19,1064,19],[1008,6,1065,6],[1008,13,1065,13,"fromBits"],[1008,21,1065,21],[1008,22,1065,23,"c16"],[1008,25,1065,26],[1008,29,1065,30],[1008,31,1065,32],[1008,34,1065,36,"c00"],[1008,37,1065,39],[1008,39,1065,42,"c48"],[1008,42,1065,45],[1008,46,1065,49],[1008,48,1065,51],[1008,51,1065,55,"c32"],[1008,54,1065,58],[1008,56,1065,60],[1008,60,1065,64],[1008,61,1065,65,"unsigned"],[1008,69,1065,73],[1008,70,1065,74],[1009,4,1066,4],[1009,5,1066,5],[1011,4,1068,4],[1012,0,1069,0],[1013,0,1070,0],[1014,0,1071,0],[1015,0,1072,0],[1016,0,1073,0],[1017,4,1074,4,"LongPrototype"],[1017,17,1074,17],[1017,18,1074,18,"mul"],[1017,21,1074,21],[1017,24,1074,24,"LongPrototype"],[1017,37,1074,37],[1017,38,1074,38,"multiply"],[1017,46,1074,46],[1019,4,1076,4],[1020,0,1077,0],[1021,0,1078,0],[1022,0,1079,0],[1023,0,1080,0],[1024,0,1081,0],[1025,0,1082,0],[1026,4,1083,4,"LongPrototype"],[1026,17,1083,17],[1026,18,1083,18,"divide"],[1026,24,1083,24],[1026,27,1083,27],[1026,36,1083,36,"divide"],[1026,42,1083,42,"divide"],[1026,43,1083,43,"divisor"],[1026,50,1083,50],[1026,52,1083,52],[1027,6,1084,6],[1027,10,1084,10],[1027,11,1084,11,"isLong"],[1027,17,1084,17],[1027,18,1084,18,"divisor"],[1027,25,1084,25],[1027,26,1084,26],[1027,28,1084,28,"divisor"],[1027,35,1084,35],[1027,38,1084,38,"fromValue"],[1027,47,1084,47],[1027,48,1084,48,"divisor"],[1027,55,1084,55],[1027,56,1084,56],[1028,6,1085,6],[1028,10,1085,10,"divisor"],[1028,17,1085,17],[1028,18,1085,18,"isZero"],[1028,24,1085,24],[1028,25,1085,25],[1028,26,1085,26],[1028,28,1085,28],[1028,34,1085,34,"Error"],[1028,39,1085,39],[1028,40,1085,40],[1028,58,1085,58],[1028,59,1085,59],[1030,6,1087,6],[1031,6,1088,6],[1031,10,1088,10,"wasm"],[1031,14,1088,14],[1031,16,1088,16],[1032,8,1089,8],[1033,8,1090,8],[1034,8,1091,8],[1035,8,1092,8],[1035,12,1093,10],[1035,13,1093,11],[1035,17,1093,15],[1035,18,1093,16,"unsigned"],[1035,26,1093,24],[1035,30,1094,10],[1035,34,1094,14],[1035,35,1094,15,"high"],[1035,39,1094,19],[1035,44,1094,24],[1035,45,1094,25],[1035,55,1094,35],[1035,59,1095,10,"divisor"],[1035,66,1095,17],[1035,67,1095,18,"low"],[1035,70,1095,21],[1035,75,1095,26],[1035,76,1095,27],[1035,77,1095,28],[1035,81,1096,10,"divisor"],[1035,88,1096,17],[1035,89,1096,18,"high"],[1035,93,1096,22],[1035,98,1096,27],[1035,99,1096,28],[1035,100,1096,29],[1035,102,1097,10],[1036,10,1098,10],[1037,10,1099,10],[1037,17,1099,17],[1037,21,1099,21],[1038,8,1100,8],[1039,8,1101,8],[1039,12,1101,12,"low"],[1039,15,1101,15],[1039,18,1101,18],[1039,19,1101,19],[1039,23,1101,23],[1039,24,1101,24,"unsigned"],[1039,32,1101,32],[1039,35,1101,35,"wasm"],[1039,39,1101,39],[1039,40,1101,40],[1039,47,1101,47],[1039,48,1101,48],[1039,51,1101,51,"wasm"],[1039,55,1101,55],[1039,56,1101,56],[1039,63,1101,63],[1039,64,1101,64],[1039,66,1102,10],[1039,70,1102,14],[1039,71,1102,15,"low"],[1039,74,1102,18],[1039,76,1103,10],[1039,80,1103,14],[1039,81,1103,15,"high"],[1039,85,1103,19],[1039,87,1104,10,"divisor"],[1039,94,1104,17],[1039,95,1104,18,"low"],[1039,98,1104,21],[1039,100,1105,10,"divisor"],[1039,107,1105,17],[1039,108,1105,18,"high"],[1039,112,1106,8],[1039,113,1106,9],[1040,8,1107,8],[1040,15,1107,15,"fromBits"],[1040,23,1107,23],[1040,24,1107,24,"low"],[1040,27,1107,27],[1040,29,1107,29,"wasm"],[1040,33,1107,33],[1040,34,1107,34],[1040,44,1107,44],[1040,45,1107,45],[1040,46,1107,46],[1040,47,1107,47],[1040,49,1107,49],[1040,53,1107,53],[1040,54,1107,54,"unsigned"],[1040,62,1107,62],[1040,63,1107,63],[1041,6,1108,6],[1042,6,1109,6],[1042,10,1109,10],[1042,14,1109,14],[1042,15,1109,15,"isZero"],[1042,21,1109,21],[1042,22,1109,22],[1042,23,1109,23],[1042,25,1109,25],[1042,32,1109,32],[1042,36,1109,36],[1042,37,1109,37,"unsigned"],[1042,45,1109,45],[1042,48,1109,48,"UZERO"],[1042,53,1109,53],[1042,56,1109,56,"ZERO"],[1042,60,1109,60],[1043,6,1110,6],[1043,10,1110,10,"approx"],[1043,16,1110,16],[1043,18,1110,18,"rem"],[1043,21,1110,21],[1043,23,1110,23,"res"],[1043,26,1110,26],[1044,6,1111,6],[1044,10,1111,10],[1044,11,1111,11],[1044,15,1111,15],[1044,16,1111,16,"unsigned"],[1044,24,1111,24],[1044,26,1111,26],[1045,8,1112,8],[1046,8,1113,8],[1047,8,1114,8],[1047,12,1114,12],[1047,16,1114,16],[1047,17,1114,17,"eq"],[1047,19,1114,19],[1047,20,1114,20,"MIN_VALUE"],[1047,29,1114,29],[1047,30,1114,30],[1047,32,1114,32],[1048,10,1115,10],[1048,14,1115,14,"divisor"],[1048,21,1115,21],[1048,22,1115,22,"eq"],[1048,24,1115,24],[1048,25,1115,25,"ONE"],[1048,28,1115,28],[1048,29,1115,29],[1048,33,1115,33,"divisor"],[1048,40,1115,40],[1048,41,1115,41,"eq"],[1048,43,1115,43],[1048,44,1115,44,"NEG_ONE"],[1048,51,1115,51],[1048,52,1115,52],[1048,54,1116,12],[1048,61,1116,19,"MIN_VALUE"],[1048,70,1116,28],[1048,71,1116,29],[1048,72,1116,30],[1049,10,1116,30],[1049,15,1117,15],[1049,19,1117,19,"divisor"],[1049,26,1117,26],[1049,27,1117,27,"eq"],[1049,29,1117,29],[1049,30,1117,30,"MIN_VALUE"],[1049,39,1117,39],[1049,40,1117,40],[1049,42,1117,42],[1049,49,1117,49,"ONE"],[1049,52,1117,52],[1049,53,1117,53],[1049,58,1118,15],[1050,12,1119,12],[1051,12,1120,12],[1051,16,1120,16,"halfThis"],[1051,24,1120,24],[1051,27,1120,27],[1051,31,1120,31],[1051,32,1120,32,"shr"],[1051,35,1120,35],[1051,36,1120,36],[1051,37,1120,37],[1051,38,1120,38],[1052,12,1121,12,"approx"],[1052,18,1121,18],[1052,21,1121,21,"halfThis"],[1052,29,1121,29],[1052,30,1121,30,"div"],[1052,33,1121,33],[1052,34,1121,34,"divisor"],[1052,41,1121,41],[1052,42,1121,42],[1052,43,1121,43,"shl"],[1052,46,1121,46],[1052,47,1121,47],[1052,48,1121,48],[1052,49,1121,49],[1053,12,1122,12],[1053,16,1122,16,"approx"],[1053,22,1122,22],[1053,23,1122,23,"eq"],[1053,25,1122,25],[1053,26,1122,26,"ZERO"],[1053,30,1122,30],[1053,31,1122,31],[1053,33,1122,33],[1054,14,1123,14],[1054,21,1123,21,"divisor"],[1054,28,1123,28],[1054,29,1123,29,"isNegative"],[1054,39,1123,39],[1054,40,1123,40],[1054,41,1123,41],[1054,44,1123,44,"ONE"],[1054,47,1123,47],[1054,50,1123,50,"NEG_ONE"],[1054,57,1123,57],[1055,12,1124,12],[1055,13,1124,13],[1055,19,1124,19],[1056,14,1125,14,"rem"],[1056,17,1125,17],[1056,20,1125,20],[1056,24,1125,24],[1056,25,1125,25,"sub"],[1056,28,1125,28],[1056,29,1125,29,"divisor"],[1056,36,1125,36],[1056,37,1125,37,"mul"],[1056,40,1125,40],[1056,41,1125,41,"approx"],[1056,47,1125,47],[1056,48,1125,48],[1056,49,1125,49],[1057,14,1126,14,"res"],[1057,17,1126,17],[1057,20,1126,20,"approx"],[1057,26,1126,26],[1057,27,1126,27,"add"],[1057,30,1126,30],[1057,31,1126,31,"rem"],[1057,34,1126,34],[1057,35,1126,35,"div"],[1057,38,1126,38],[1057,39,1126,39,"divisor"],[1057,46,1126,46],[1057,47,1126,47],[1057,48,1126,48],[1058,14,1127,14],[1058,21,1127,21,"res"],[1058,24,1127,24],[1059,12,1128,12],[1060,10,1129,10],[1061,8,1130,8],[1061,9,1130,9],[1061,15,1130,15],[1061,19,1130,19,"divisor"],[1061,26,1130,26],[1061,27,1130,27,"eq"],[1061,29,1130,29],[1061,30,1130,30,"MIN_VALUE"],[1061,39,1130,39],[1061,40,1130,40],[1061,42,1130,42],[1061,49,1130,49],[1061,53,1130,53],[1061,54,1130,54,"unsigned"],[1061,62,1130,62],[1061,65,1130,65,"UZERO"],[1061,70,1130,70],[1061,73,1130,73,"ZERO"],[1061,77,1130,77],[1062,8,1131,8],[1062,12,1131,12],[1062,16,1131,16],[1062,17,1131,17,"isNegative"],[1062,27,1131,27],[1062,28,1131,28],[1062,29,1131,29],[1062,31,1131,31],[1063,10,1132,10],[1063,14,1132,14,"divisor"],[1063,21,1132,21],[1063,22,1132,22,"isNegative"],[1063,32,1132,32],[1063,33,1132,33],[1063,34,1132,34],[1063,36,1132,36],[1063,43,1132,43],[1063,47,1132,47],[1063,48,1132,48,"neg"],[1063,51,1132,51],[1063,52,1132,52],[1063,53,1132,53],[1063,54,1132,54,"div"],[1063,57,1132,57],[1063,58,1132,58,"divisor"],[1063,65,1132,65],[1063,66,1132,66,"neg"],[1063,69,1132,69],[1063,70,1132,70],[1063,71,1132,71],[1063,72,1132,72],[1064,10,1133,10],[1064,17,1133,17],[1064,21,1133,21],[1064,22,1133,22,"neg"],[1064,25,1133,25],[1064,26,1133,26],[1064,27,1133,27],[1064,28,1133,28,"div"],[1064,31,1133,31],[1064,32,1133,32,"divisor"],[1064,39,1133,39],[1064,40,1133,40],[1064,41,1133,41,"neg"],[1064,44,1133,44],[1064,45,1133,45],[1064,46,1133,46],[1065,8,1134,8],[1065,9,1134,9],[1065,15,1134,15],[1065,19,1134,19,"divisor"],[1065,26,1134,26],[1065,27,1134,27,"isNegative"],[1065,37,1134,37],[1065,38,1134,38],[1065,39,1134,39],[1065,41,1134,41],[1065,48,1134,48],[1065,52,1134,52],[1065,53,1134,53,"div"],[1065,56,1134,56],[1065,57,1134,57,"divisor"],[1065,64,1134,64],[1065,65,1134,65,"neg"],[1065,68,1134,68],[1065,69,1134,69],[1065,70,1134,70],[1065,71,1134,71],[1065,72,1134,72,"neg"],[1065,75,1134,75],[1065,76,1134,76],[1065,77,1134,77],[1066,8,1135,8,"res"],[1066,11,1135,11],[1066,14,1135,14,"ZERO"],[1066,18,1135,18],[1067,6,1136,6],[1067,7,1136,7],[1067,13,1136,13],[1068,8,1137,8],[1069,8,1138,8],[1070,8,1139,8],[1070,12,1139,12],[1070,13,1139,13,"divisor"],[1070,20,1139,20],[1070,21,1139,21,"unsigned"],[1070,29,1139,29],[1070,31,1139,31,"divisor"],[1070,38,1139,38],[1070,41,1139,41,"divisor"],[1070,48,1139,48],[1070,49,1139,49,"toUnsigned"],[1070,59,1139,59],[1070,60,1139,60],[1070,61,1139,61],[1071,8,1140,8],[1071,12,1140,12,"divisor"],[1071,19,1140,19],[1071,20,1140,20,"gt"],[1071,22,1140,22],[1071,23,1140,23],[1071,27,1140,27],[1071,28,1140,28],[1071,30,1140,30],[1071,37,1140,37,"UZERO"],[1071,42,1140,42],[1072,8,1141,8],[1072,12,1141,12,"divisor"],[1072,19,1141,19],[1072,20,1141,20,"gt"],[1072,22,1141,22],[1072,23,1141,23],[1072,27,1141,27],[1072,28,1141,28,"shru"],[1072,32,1141,32],[1072,33,1141,33],[1072,34,1141,34],[1072,35,1141,35],[1072,36,1141,36],[1073,10,1142,10],[1074,10,1143,10],[1074,17,1143,17,"UONE"],[1074,21,1143,21],[1075,8,1144,8,"res"],[1075,11,1144,11],[1075,14,1144,14,"UZERO"],[1075,19,1144,19],[1076,6,1145,6],[1078,6,1147,6],[1079,6,1148,6],[1080,6,1149,6],[1081,6,1150,6],[1082,6,1151,6],[1083,6,1152,6,"rem"],[1083,9,1152,9],[1083,12,1152,12],[1083,16,1152,16],[1084,6,1153,6],[1084,13,1153,13,"rem"],[1084,16,1153,16],[1084,17,1153,17,"gte"],[1084,20,1153,20],[1084,21,1153,21,"divisor"],[1084,28,1153,28],[1084,29,1153,29],[1084,31,1153,31],[1085,8,1154,8],[1086,8,1155,8],[1087,8,1156,8,"approx"],[1087,14,1156,14],[1087,17,1156,17,"Math"],[1087,21,1156,21],[1087,22,1156,22,"max"],[1087,25,1156,25],[1087,26,1156,26],[1087,27,1156,27],[1087,29,1156,29,"Math"],[1087,33,1156,33],[1087,34,1156,34,"floor"],[1087,39,1156,39],[1087,40,1156,40,"rem"],[1087,43,1156,43],[1087,44,1156,44,"toNumber"],[1087,52,1156,52],[1087,53,1156,53],[1087,54,1156,54],[1087,57,1156,57,"divisor"],[1087,64,1156,64],[1087,65,1156,65,"toNumber"],[1087,73,1156,73],[1087,74,1156,74],[1087,75,1156,75],[1087,76,1156,76],[1087,77,1156,77],[1089,8,1158,8],[1090,8,1159,8],[1091,8,1160,8],[1091,12,1160,12,"log2"],[1091,16,1160,16],[1091,19,1160,19,"Math"],[1091,23,1160,23],[1091,24,1160,24,"ceil"],[1091,28,1160,28],[1091,29,1160,29,"Math"],[1091,33,1160,33],[1091,34,1160,34,"log"],[1091,37,1160,37],[1091,38,1160,38,"approx"],[1091,44,1160,44],[1091,45,1160,45],[1091,48,1160,48,"Math"],[1091,52,1160,52],[1091,53,1160,53,"LN2"],[1091,56,1160,56],[1091,57,1160,57],[1092,10,1161,10,"delta"],[1092,15,1161,15],[1092,18,1161,18,"log2"],[1092,22,1161,22],[1092,26,1161,26],[1092,28,1161,28],[1092,31,1161,31],[1092,32,1161,32],[1092,35,1161,35,"pow_dbl"],[1092,42,1161,42],[1092,43,1161,43],[1092,44,1161,44],[1092,46,1161,46,"log2"],[1092,50,1161,50],[1092,53,1161,53],[1092,55,1161,55],[1092,56,1161,56],[1093,10,1162,10],[1094,10,1163,10],[1095,10,1164,10,"approxRes"],[1095,19,1164,19],[1095,22,1164,22,"fromNumber"],[1095,32,1164,32],[1095,33,1164,33,"approx"],[1095,39,1164,39],[1095,40,1164,40],[1096,10,1165,10,"approxRem"],[1096,19,1165,19],[1096,22,1165,22,"approxRes"],[1096,31,1165,31],[1096,32,1165,32,"mul"],[1096,35,1165,35],[1096,36,1165,36,"divisor"],[1096,43,1165,43],[1096,44,1165,44],[1097,8,1166,8],[1097,15,1166,15,"approxRem"],[1097,24,1166,24],[1097,25,1166,25,"isNegative"],[1097,35,1166,35],[1097,36,1166,36],[1097,37,1166,37],[1097,41,1166,41,"approxRem"],[1097,50,1166,50],[1097,51,1166,51,"gt"],[1097,53,1166,53],[1097,54,1166,54,"rem"],[1097,57,1166,57],[1097,58,1166,58],[1097,60,1166,60],[1098,10,1167,10,"approx"],[1098,16,1167,16],[1098,20,1167,20,"delta"],[1098,25,1167,25],[1099,10,1168,10,"approxRes"],[1099,19,1168,19],[1099,22,1168,22,"fromNumber"],[1099,32,1168,32],[1099,33,1168,33,"approx"],[1099,39,1168,39],[1099,41,1168,41],[1099,45,1168,45],[1099,46,1168,46,"unsigned"],[1099,54,1168,54],[1099,55,1168,55],[1100,10,1169,10,"approxRem"],[1100,19,1169,19],[1100,22,1169,22,"approxRes"],[1100,31,1169,31],[1100,32,1169,32,"mul"],[1100,35,1169,35],[1100,36,1169,36,"divisor"],[1100,43,1169,43],[1100,44,1169,44],[1101,8,1170,8],[1103,8,1172,8],[1104,8,1173,8],[1105,8,1174,8],[1105,12,1174,12,"approxRes"],[1105,21,1174,21],[1105,22,1174,22,"isZero"],[1105,28,1174,28],[1105,29,1174,29],[1105,30,1174,30],[1105,32,1174,32,"approxRes"],[1105,41,1174,41],[1105,44,1174,44,"ONE"],[1105,47,1174,47],[1106,8,1175,8,"res"],[1106,11,1175,11],[1106,14,1175,14,"res"],[1106,17,1175,17],[1106,18,1175,18,"add"],[1106,21,1175,21],[1106,22,1175,22,"approxRes"],[1106,31,1175,31],[1106,32,1175,32],[1107,8,1176,8,"rem"],[1107,11,1176,11],[1107,14,1176,14,"rem"],[1107,17,1176,17],[1107,18,1176,18,"sub"],[1107,21,1176,21],[1107,22,1176,22,"approxRem"],[1107,31,1176,31],[1107,32,1176,32],[1108,6,1177,6],[1109,6,1178,6],[1109,13,1178,13,"res"],[1109,16,1178,16],[1110,4,1179,4],[1110,5,1179,5],[1112,4,1181,4],[1113,0,1182,0],[1114,0,1183,0],[1115,0,1184,0],[1116,0,1185,0],[1117,0,1186,0],[1118,4,1187,4,"LongPrototype"],[1118,17,1187,17],[1118,18,1187,18,"div"],[1118,21,1187,21],[1118,24,1187,24,"LongPrototype"],[1118,37,1187,37],[1118,38,1187,38,"divide"],[1118,44,1187,44],[1120,4,1189,4],[1121,0,1190,0],[1122,0,1191,0],[1123,0,1192,0],[1124,0,1193,0],[1125,0,1194,0],[1126,4,1195,4,"LongPrototype"],[1126,17,1195,17],[1126,18,1195,18,"modulo"],[1126,24,1195,24],[1126,27,1195,27],[1126,36,1195,36,"modulo"],[1126,42,1195,42,"modulo"],[1126,43,1195,43,"divisor"],[1126,50,1195,50],[1126,52,1195,52],[1127,6,1196,6],[1127,10,1196,10],[1127,11,1196,11,"isLong"],[1127,17,1196,17],[1127,18,1196,18,"divisor"],[1127,25,1196,25],[1127,26,1196,26],[1127,28,1196,28,"divisor"],[1127,35,1196,35],[1127,38,1196,38,"fromValue"],[1127,47,1196,47],[1127,48,1196,48,"divisor"],[1127,55,1196,55],[1127,56,1196,56],[1129,6,1198,6],[1130,6,1199,6],[1130,10,1199,10,"wasm"],[1130,14,1199,14],[1130,16,1199,16],[1131,8,1200,8],[1131,12,1200,12,"low"],[1131,15,1200,15],[1131,18,1200,18],[1131,19,1200,19],[1131,23,1200,23],[1131,24,1200,24,"unsigned"],[1131,32,1200,32],[1131,35,1200,35,"wasm"],[1131,39,1200,39],[1131,40,1200,40],[1131,47,1200,47],[1131,48,1200,48],[1131,51,1200,51,"wasm"],[1131,55,1200,55],[1131,56,1200,56],[1131,63,1200,63],[1131,64,1200,64],[1131,66,1201,10],[1131,70,1201,14],[1131,71,1201,15,"low"],[1131,74,1201,18],[1131,76,1202,10],[1131,80,1202,14],[1131,81,1202,15,"high"],[1131,85,1202,19],[1131,87,1203,10,"divisor"],[1131,94,1203,17],[1131,95,1203,18,"low"],[1131,98,1203,21],[1131,100,1204,10,"divisor"],[1131,107,1204,17],[1131,108,1204,18,"high"],[1131,112,1205,8],[1131,113,1205,9],[1132,8,1206,8],[1132,15,1206,15,"fromBits"],[1132,23,1206,23],[1132,24,1206,24,"low"],[1132,27,1206,27],[1132,29,1206,29,"wasm"],[1132,33,1206,33],[1132,34,1206,34],[1132,44,1206,44],[1132,45,1206,45],[1132,46,1206,46],[1132,47,1206,47],[1132,49,1206,49],[1132,53,1206,53],[1132,54,1206,54,"unsigned"],[1132,62,1206,62],[1132,63,1206,63],[1133,6,1207,6],[1134,6,1208,6],[1134,13,1208,13],[1134,17,1208,17],[1134,18,1208,18,"sub"],[1134,21,1208,21],[1134,22,1208,22],[1134,26,1208,26],[1134,27,1208,27,"div"],[1134,30,1208,30],[1134,31,1208,31,"divisor"],[1134,38,1208,38],[1134,39,1208,39],[1134,40,1208,40,"mul"],[1134,43,1208,43],[1134,44,1208,44,"divisor"],[1134,51,1208,51],[1134,52,1208,52],[1134,53,1208,53],[1135,4,1209,4],[1135,5,1209,5],[1137,4,1211,4],[1138,0,1212,0],[1139,0,1213,0],[1140,0,1214,0],[1141,0,1215,0],[1142,0,1216,0],[1143,4,1217,4,"LongPrototype"],[1143,17,1217,17],[1143,18,1217,18,"mod"],[1143,21,1217,21],[1143,24,1217,24,"LongPrototype"],[1143,37,1217,37],[1143,38,1217,38,"modulo"],[1143,44,1217,44],[1145,4,1219,4],[1146,0,1220,0],[1147,0,1221,0],[1148,0,1222,0],[1149,0,1223,0],[1150,0,1224,0],[1151,4,1225,4,"LongPrototype"],[1151,17,1225,17],[1151,18,1225,18,"rem"],[1151,21,1225,21],[1151,24,1225,24,"LongPrototype"],[1151,37,1225,37],[1151,38,1225,38,"modulo"],[1151,44,1225,44],[1153,4,1227,4],[1154,0,1228,0],[1155,0,1229,0],[1156,0,1230,0],[1157,0,1231,0],[1158,4,1232,4,"LongPrototype"],[1158,17,1232,17],[1158,18,1232,18,"not"],[1158,21,1232,21],[1158,24,1232,24],[1158,33,1232,33,"not"],[1158,36,1232,36,"not"],[1158,37,1232,36],[1158,39,1232,39],[1159,6,1233,6],[1159,13,1233,13,"fromBits"],[1159,21,1233,21],[1159,22,1233,22],[1159,23,1233,23],[1159,27,1233,27],[1159,28,1233,28,"low"],[1159,31,1233,31],[1159,33,1233,33],[1159,34,1233,34],[1159,38,1233,38],[1159,39,1233,39,"high"],[1159,43,1233,43],[1159,45,1233,45],[1159,49,1233,49],[1159,50,1233,50,"unsigned"],[1159,58,1233,58],[1159,59,1233,59],[1160,4,1234,4],[1160,5,1234,5],[1162,4,1236,4],[1163,0,1237,0],[1164,0,1238,0],[1165,0,1239,0],[1166,0,1240,0],[1167,4,1241,4,"LongPrototype"],[1167,17,1241,17],[1167,18,1241,18,"countLeadingZeros"],[1167,35,1241,35],[1167,38,1241,38],[1167,47,1241,47,"countLeadingZeros"],[1167,64,1241,64,"countLeadingZeros"],[1167,65,1241,64],[1167,67,1241,67],[1168,6,1242,6],[1168,13,1242,13],[1168,17,1242,17],[1168,18,1242,18,"high"],[1168,22,1242,22],[1168,25,1242,25,"Math"],[1168,29,1242,29],[1168,30,1242,30,"clz32"],[1168,35,1242,35],[1168,36,1242,36],[1168,40,1242,40],[1168,41,1242,41,"high"],[1168,45,1242,45],[1168,46,1242,46],[1168,49,1242,49,"Math"],[1168,53,1242,53],[1168,54,1242,54,"clz32"],[1168,59,1242,59],[1168,60,1242,60],[1168,64,1242,64],[1168,65,1242,65,"low"],[1168,68,1242,68],[1168,69,1242,69],[1168,72,1242,72],[1168,74,1242,74],[1169,4,1243,4],[1169,5,1243,5],[1171,4,1245,4],[1172,0,1246,0],[1173,0,1247,0],[1174,0,1248,0],[1175,0,1249,0],[1176,0,1250,0],[1177,4,1251,4,"LongPrototype"],[1177,17,1251,17],[1177,18,1251,18,"clz"],[1177,21,1251,21],[1177,24,1251,24,"LongPrototype"],[1177,37,1251,37],[1177,38,1251,38,"countLeadingZeros"],[1177,55,1251,55],[1179,4,1253,4],[1180,0,1254,0],[1181,0,1255,0],[1182,0,1256,0],[1183,0,1257,0],[1184,4,1258,4,"LongPrototype"],[1184,17,1258,17],[1184,18,1258,18,"countTrailingZeros"],[1184,36,1258,36],[1184,39,1258,39],[1184,48,1258,48,"countTrailingZeros"],[1184,66,1258,66,"countTrailingZeros"],[1184,67,1258,66],[1184,69,1258,69],[1185,6,1259,6],[1185,13,1259,13],[1185,17,1259,17],[1185,18,1259,18,"low"],[1185,21,1259,21],[1185,24,1259,24,"ctz32"],[1185,29,1259,29],[1185,30,1259,30],[1185,34,1259,34],[1185,35,1259,35,"low"],[1185,38,1259,38],[1185,39,1259,39],[1185,42,1259,42,"ctz32"],[1185,47,1259,47],[1185,48,1259,48],[1185,52,1259,52],[1185,53,1259,53,"high"],[1185,57,1259,57],[1185,58,1259,58],[1185,61,1259,61],[1185,63,1259,63],[1186,4,1260,4],[1186,5,1260,5],[1188,4,1262,4],[1189,0,1263,0],[1190,0,1264,0],[1191,0,1265,0],[1192,0,1266,0],[1193,0,1267,0],[1194,4,1268,4,"LongPrototype"],[1194,17,1268,17],[1194,18,1268,18,"ctz"],[1194,21,1268,21],[1194,24,1268,24,"LongPrototype"],[1194,37,1268,37],[1194,38,1268,38,"countTrailingZeros"],[1194,56,1268,56],[1196,4,1270,4],[1197,0,1271,0],[1198,0,1272,0],[1199,0,1273,0],[1200,0,1274,0],[1201,0,1275,0],[1202,4,1276,4,"LongPrototype"],[1202,17,1276,17],[1202,18,1276,18,"and"],[1202,21,1276,21],[1202,24,1276,24],[1202,33,1276,33,"and"],[1202,36,1276,36,"and"],[1202,37,1276,37,"other"],[1202,42,1276,42],[1202,44,1276,44],[1203,6,1277,6],[1203,10,1277,10],[1203,11,1277,11,"isLong"],[1203,17,1277,17],[1203,18,1277,18,"other"],[1203,23,1277,23],[1203,24,1277,24],[1203,26,1277,26,"other"],[1203,31,1277,31],[1203,34,1277,34,"fromValue"],[1203,43,1277,43],[1203,44,1277,44,"other"],[1203,49,1277,49],[1203,50,1277,50],[1204,6,1278,6],[1204,13,1278,13,"fromBits"],[1204,21,1278,21],[1204,22,1279,8],[1204,26,1279,12],[1204,27,1279,13,"low"],[1204,30,1279,16],[1204,33,1279,19,"other"],[1204,38,1279,24],[1204,39,1279,25,"low"],[1204,42,1279,28],[1204,44,1280,8],[1204,48,1280,12],[1204,49,1280,13,"high"],[1204,53,1280,17],[1204,56,1280,20,"other"],[1204,61,1280,25],[1204,62,1280,26,"high"],[1204,66,1280,30],[1204,68,1281,8],[1204,72,1281,12],[1204,73,1281,13,"unsigned"],[1204,81,1282,6],[1204,82,1282,7],[1205,4,1283,4],[1205,5,1283,5],[1207,4,1285,4],[1208,0,1286,0],[1209,0,1287,0],[1210,0,1288,0],[1211,0,1289,0],[1212,0,1290,0],[1213,4,1291,4,"LongPrototype"],[1213,17,1291,17],[1213,18,1291,18,"or"],[1213,20,1291,20],[1213,23,1291,23],[1213,32,1291,32,"or"],[1213,34,1291,34,"or"],[1213,35,1291,35,"other"],[1213,40,1291,40],[1213,42,1291,42],[1214,6,1292,6],[1214,10,1292,10],[1214,11,1292,11,"isLong"],[1214,17,1292,17],[1214,18,1292,18,"other"],[1214,23,1292,23],[1214,24,1292,24],[1214,26,1292,26,"other"],[1214,31,1292,31],[1214,34,1292,34,"fromValue"],[1214,43,1292,43],[1214,44,1292,44,"other"],[1214,49,1292,49],[1214,50,1292,50],[1215,6,1293,6],[1215,13,1293,13,"fromBits"],[1215,21,1293,21],[1215,22,1294,8],[1215,26,1294,12],[1215,27,1294,13,"low"],[1215,30,1294,16],[1215,33,1294,19,"other"],[1215,38,1294,24],[1215,39,1294,25,"low"],[1215,42,1294,28],[1215,44,1295,8],[1215,48,1295,12],[1215,49,1295,13,"high"],[1215,53,1295,17],[1215,56,1295,20,"other"],[1215,61,1295,25],[1215,62,1295,26,"high"],[1215,66,1295,30],[1215,68,1296,8],[1215,72,1296,12],[1215,73,1296,13,"unsigned"],[1215,81,1297,6],[1215,82,1297,7],[1216,4,1298,4],[1216,5,1298,5],[1218,4,1300,4],[1219,0,1301,0],[1220,0,1302,0],[1221,0,1303,0],[1222,0,1304,0],[1223,0,1305,0],[1224,4,1306,4,"LongPrototype"],[1224,17,1306,17],[1224,18,1306,18,"xor"],[1224,21,1306,21],[1224,24,1306,24],[1224,33,1306,33,"xor"],[1224,36,1306,36,"xor"],[1224,37,1306,37,"other"],[1224,42,1306,42],[1224,44,1306,44],[1225,6,1307,6],[1225,10,1307,10],[1225,11,1307,11,"isLong"],[1225,17,1307,17],[1225,18,1307,18,"other"],[1225,23,1307,23],[1225,24,1307,24],[1225,26,1307,26,"other"],[1225,31,1307,31],[1225,34,1307,34,"fromValue"],[1225,43,1307,43],[1225,44,1307,44,"other"],[1225,49,1307,49],[1225,50,1307,50],[1226,6,1308,6],[1226,13,1308,13,"fromBits"],[1226,21,1308,21],[1226,22,1309,8],[1226,26,1309,12],[1226,27,1309,13,"low"],[1226,30,1309,16],[1226,33,1309,19,"other"],[1226,38,1309,24],[1226,39,1309,25,"low"],[1226,42,1309,28],[1226,44,1310,8],[1226,48,1310,12],[1226,49,1310,13,"high"],[1226,53,1310,17],[1226,56,1310,20,"other"],[1226,61,1310,25],[1226,62,1310,26,"high"],[1226,66,1310,30],[1226,68,1311,8],[1226,72,1311,12],[1226,73,1311,13,"unsigned"],[1226,81,1312,6],[1226,82,1312,7],[1227,4,1313,4],[1227,5,1313,5],[1229,4,1315,4],[1230,0,1316,0],[1231,0,1317,0],[1232,0,1318,0],[1233,0,1319,0],[1234,0,1320,0],[1235,4,1321,4,"LongPrototype"],[1235,17,1321,17],[1235,18,1321,18,"shiftLeft"],[1235,27,1321,27],[1235,30,1321,30],[1235,39,1321,39,"shiftLeft"],[1235,48,1321,48,"shiftLeft"],[1235,49,1321,49,"numBits"],[1235,56,1321,56],[1235,58,1321,58],[1236,6,1322,6],[1236,10,1322,10,"isLong"],[1236,16,1322,16],[1236,17,1322,17,"numBits"],[1236,24,1322,24],[1236,25,1322,25],[1236,27,1322,27,"numBits"],[1236,34,1322,34],[1236,37,1322,37,"numBits"],[1236,44,1322,44],[1236,45,1322,45,"toInt"],[1236,50,1322,50],[1236,51,1322,51],[1236,52,1322,52],[1237,6,1323,6],[1237,10,1323,10],[1237,11,1323,11,"numBits"],[1237,18,1323,18],[1237,22,1323,22],[1237,24,1323,24],[1237,30,1323,30],[1237,31,1323,31],[1237,33,1323,33],[1237,40,1323,40],[1237,44,1323,44],[1237,45,1323,45],[1237,50,1324,11],[1237,54,1324,15,"numBits"],[1237,61,1324,22],[1237,64,1324,25],[1237,66,1324,27],[1237,68,1325,8],[1237,75,1325,15,"fromBits"],[1237,83,1325,23],[1237,84,1326,10],[1237,88,1326,14],[1237,89,1326,15,"low"],[1237,92,1326,18],[1237,96,1326,22,"numBits"],[1237,103,1326,29],[1237,105,1327,11],[1237,109,1327,15],[1237,110,1327,16,"high"],[1237,114,1327,20],[1237,118,1327,24,"numBits"],[1237,125,1327,31],[1237,128,1327,36],[1237,132,1327,40],[1237,133,1327,41,"low"],[1237,136,1327,44],[1237,141,1327,50],[1237,143,1327,52],[1237,146,1327,55,"numBits"],[1237,153,1327,64],[1237,155,1328,10],[1237,159,1328,14],[1237,160,1328,15,"unsigned"],[1237,168,1329,8],[1237,169,1329,9],[1237,170,1329,10],[1237,175,1330,11],[1237,182,1330,18,"fromBits"],[1237,190,1330,26],[1237,191,1330,27],[1237,192,1330,28],[1237,194,1330,30],[1237,198,1330,34],[1237,199,1330,35,"low"],[1237,202,1330,38],[1237,206,1330,43,"numBits"],[1237,213,1330,50],[1237,216,1330,53],[1237,218,1330,56],[1237,220,1330,58],[1237,224,1330,62],[1237,225,1330,63,"unsigned"],[1237,233,1330,71],[1237,234,1330,72],[1238,4,1331,4],[1238,5,1331,5],[1240,4,1333,4],[1241,0,1334,0],[1242,0,1335,0],[1243,0,1336,0],[1244,0,1337,0],[1245,0,1338,0],[1246,4,1339,4,"LongPrototype"],[1246,17,1339,17],[1246,18,1339,18,"shl"],[1246,21,1339,21],[1246,24,1339,24,"LongPrototype"],[1246,37,1339,37],[1246,38,1339,38,"shiftLeft"],[1246,47,1339,47],[1248,4,1341,4],[1249,0,1342,0],[1250,0,1343,0],[1251,0,1344,0],[1252,0,1345,0],[1253,0,1346,0],[1254,4,1347,4,"LongPrototype"],[1254,17,1347,17],[1254,18,1347,18,"shiftRight"],[1254,28,1347,28],[1254,31,1347,31],[1254,40,1347,40,"shiftRight"],[1254,50,1347,50,"shiftRight"],[1254,51,1347,51,"numBits"],[1254,58,1347,58],[1254,60,1347,60],[1255,6,1348,6],[1255,10,1348,10,"isLong"],[1255,16,1348,16],[1255,17,1348,17,"numBits"],[1255,24,1348,24],[1255,25,1348,25],[1255,27,1348,27,"numBits"],[1255,34,1348,34],[1255,37,1348,37,"numBits"],[1255,44,1348,44],[1255,45,1348,45,"toInt"],[1255,50,1348,50],[1255,51,1348,51],[1255,52,1348,52],[1256,6,1349,6],[1256,10,1349,10],[1256,11,1349,11,"numBits"],[1256,18,1349,18],[1256,22,1349,22],[1256,24,1349,24],[1256,30,1349,30],[1256,31,1349,31],[1256,33,1349,33],[1256,40,1349,40],[1256,44,1349,44],[1256,45,1349,45],[1256,50,1350,11],[1256,54,1350,15,"numBits"],[1256,61,1350,22],[1256,64,1350,25],[1256,66,1350,27],[1256,68,1351,8],[1256,75,1351,15,"fromBits"],[1256,83,1351,23],[1256,84,1352,11],[1256,88,1352,15],[1256,89,1352,16,"low"],[1256,92,1352,19],[1256,97,1352,24,"numBits"],[1256,104,1352,31],[1256,107,1352,36],[1256,111,1352,40],[1256,112,1352,41,"high"],[1256,116,1352,45],[1256,120,1352,50],[1256,122,1352,52],[1256,125,1352,55,"numBits"],[1256,132,1352,64],[1256,134,1353,10],[1256,138,1353,14],[1256,139,1353,15,"high"],[1256,143,1353,19],[1256,147,1353,23,"numBits"],[1256,154,1353,30],[1256,156,1354,10],[1256,160,1354,14],[1256,161,1354,15,"unsigned"],[1256,169,1355,8],[1256,170,1355,9],[1256,171,1355,10],[1256,176,1357,8],[1256,183,1357,15,"fromBits"],[1256,191,1357,23],[1256,192,1358,10],[1256,196,1358,14],[1256,197,1358,15,"high"],[1256,201,1358,19],[1256,205,1358,24,"numBits"],[1256,212,1358,31],[1256,215,1358,34],[1256,217,1358,37],[1256,219,1359,10],[1256,223,1359,14],[1256,224,1359,15,"high"],[1256,228,1359,19],[1256,232,1359,23],[1256,233,1359,24],[1256,236,1359,27],[1256,237,1359,28],[1256,240,1359,31],[1256,241,1359,32],[1256,242,1359,33],[1256,244,1360,10],[1256,248,1360,14],[1256,249,1360,15,"unsigned"],[1256,257,1361,8],[1256,258,1361,9],[1257,4,1362,4],[1257,5,1362,5],[1259,4,1364,4],[1260,0,1365,0],[1261,0,1366,0],[1262,0,1367,0],[1263,0,1368,0],[1264,0,1369,0],[1265,4,1370,4,"LongPrototype"],[1265,17,1370,17],[1265,18,1370,18,"shr"],[1265,21,1370,21],[1265,24,1370,24,"LongPrototype"],[1265,37,1370,37],[1265,38,1370,38,"shiftRight"],[1265,48,1370,48],[1267,4,1372,4],[1268,0,1373,0],[1269,0,1374,0],[1270,0,1375,0],[1271,0,1376,0],[1272,0,1377,0],[1273,4,1378,4,"LongPrototype"],[1273,17,1378,17],[1273,18,1378,18,"shiftRightUnsigned"],[1273,36,1378,36],[1273,39,1378,39],[1273,48,1378,48,"shiftRightUnsigned"],[1273,66,1378,66,"shiftRightUnsigned"],[1273,67,1378,67,"numBits"],[1273,74,1378,74],[1273,76,1378,76],[1274,6,1379,6],[1274,10,1379,10,"isLong"],[1274,16,1379,16],[1274,17,1379,17,"numBits"],[1274,24,1379,24],[1274,25,1379,25],[1274,27,1379,27,"numBits"],[1274,34,1379,34],[1274,37,1379,37,"numBits"],[1274,44,1379,44],[1274,45,1379,45,"toInt"],[1274,50,1379,50],[1274,51,1379,51],[1274,52,1379,52],[1275,6,1380,6],[1275,10,1380,10],[1275,11,1380,11,"numBits"],[1275,18,1380,18],[1275,22,1380,22],[1275,24,1380,24],[1275,30,1380,30],[1275,31,1380,31],[1275,33,1380,33],[1275,40,1380,40],[1275,44,1380,44],[1276,6,1381,6],[1276,10,1381,10,"numBits"],[1276,17,1381,17],[1276,20,1381,20],[1276,22,1381,22],[1276,24,1382,8],[1276,31,1382,15,"fromBits"],[1276,39,1382,23],[1276,40,1383,11],[1276,44,1383,15],[1276,45,1383,16,"low"],[1276,48,1383,19],[1276,53,1383,24,"numBits"],[1276,60,1383,31],[1276,63,1383,36],[1276,67,1383,40],[1276,68,1383,41,"high"],[1276,72,1383,45],[1276,76,1383,50],[1276,78,1383,52],[1276,81,1383,55,"numBits"],[1276,88,1383,64],[1276,90,1384,10],[1276,94,1384,14],[1276,95,1384,15,"high"],[1276,99,1384,19],[1276,104,1384,24,"numBits"],[1276,111,1384,31],[1276,113,1385,10],[1276,117,1385,14],[1276,118,1385,15,"unsigned"],[1276,126,1386,8],[1276,127,1386,9],[1277,6,1387,6],[1277,10,1387,10,"numBits"],[1277,17,1387,17],[1277,22,1387,22],[1277,24,1387,24],[1277,26,1387,26],[1277,33,1387,33,"fromBits"],[1277,41,1387,41],[1277,42,1387,42],[1277,46,1387,46],[1277,47,1387,47,"high"],[1277,51,1387,51],[1277,53,1387,53],[1277,54,1387,54],[1277,56,1387,56],[1277,60,1387,60],[1277,61,1387,61,"unsigned"],[1277,69,1387,69],[1277,70,1387,70],[1278,6,1388,6],[1278,13,1388,13,"fromBits"],[1278,21,1388,21],[1278,22,1388,22],[1278,26,1388,26],[1278,27,1388,27,"high"],[1278,31,1388,31],[1278,36,1388,37,"numBits"],[1278,43,1388,44],[1278,46,1388,47],[1278,48,1388,50],[1278,50,1388,52],[1278,51,1388,53],[1278,53,1388,55],[1278,57,1388,59],[1278,58,1388,60,"unsigned"],[1278,66,1388,68],[1278,67,1388,69],[1279,4,1389,4],[1279,5,1389,5],[1281,4,1391,4],[1282,0,1392,0],[1283,0,1393,0],[1284,0,1394,0],[1285,0,1395,0],[1286,0,1396,0],[1287,4,1397,4,"LongPrototype"],[1287,17,1397,17],[1287,18,1397,18,"shru"],[1287,22,1397,22],[1287,25,1397,25,"LongPrototype"],[1287,38,1397,38],[1287,39,1397,39,"shiftRightUnsigned"],[1287,57,1397,57],[1289,4,1399,4],[1290,0,1400,0],[1291,0,1401,0],[1292,0,1402,0],[1293,0,1403,0],[1294,0,1404,0],[1295,4,1405,4,"LongPrototype"],[1295,17,1405,17],[1295,18,1405,18,"shr_u"],[1295,23,1405,23],[1295,26,1405,26,"LongPrototype"],[1295,39,1405,39],[1295,40,1405,40,"shiftRightUnsigned"],[1295,58,1405,58],[1297,4,1407,4],[1298,0,1408,0],[1299,0,1409,0],[1300,0,1410,0],[1301,0,1411,0],[1302,0,1412,0],[1303,4,1413,4,"LongPrototype"],[1303,17,1413,17],[1303,18,1413,18,"rotateLeft"],[1303,28,1413,28],[1303,31,1413,31],[1303,40,1413,40,"rotateLeft"],[1303,50,1413,50,"rotateLeft"],[1303,51,1413,51,"numBits"],[1303,58,1413,58],[1303,60,1413,60],[1304,6,1414,6],[1304,10,1414,10,"b"],[1304,11,1414,11],[1305,6,1415,6],[1305,10,1415,10,"isLong"],[1305,16,1415,16],[1305,17,1415,17,"numBits"],[1305,24,1415,24],[1305,25,1415,25],[1305,27,1415,27,"numBits"],[1305,34,1415,34],[1305,37,1415,37,"numBits"],[1305,44,1415,44],[1305,45,1415,45,"toInt"],[1305,50,1415,50],[1305,51,1415,51],[1305,52,1415,52],[1306,6,1416,6],[1306,10,1416,10],[1306,11,1416,11,"numBits"],[1306,18,1416,18],[1306,22,1416,22],[1306,24,1416,24],[1306,30,1416,30],[1306,31,1416,31],[1306,33,1416,33],[1306,40,1416,40],[1306,44,1416,44],[1307,6,1417,6],[1307,10,1417,10,"numBits"],[1307,17,1417,17],[1307,22,1417,22],[1307,24,1417,24],[1307,26,1417,26],[1307,33,1417,33,"fromBits"],[1307,41,1417,41],[1307,42,1417,42],[1307,46,1417,46],[1307,47,1417,47,"high"],[1307,51,1417,51],[1307,53,1417,53],[1307,57,1417,57],[1307,58,1417,58,"low"],[1307,61,1417,61],[1307,63,1417,63],[1307,67,1417,67],[1307,68,1417,68,"unsigned"],[1307,76,1417,76],[1307,77,1417,77],[1308,6,1418,6],[1308,10,1418,10,"numBits"],[1308,17,1418,17],[1308,20,1418,20],[1308,22,1418,22],[1308,24,1418,24],[1309,8,1419,8,"b"],[1309,9,1419,9],[1309,12,1419,12],[1309,14,1419,14],[1309,17,1419,17,"numBits"],[1309,24,1419,24],[1310,8,1420,8],[1310,15,1420,15,"fromBits"],[1310,23,1420,23],[1310,24,1421,11],[1310,28,1421,15],[1310,29,1421,16,"low"],[1310,32,1421,19],[1310,36,1421,23,"numBits"],[1310,43,1421,30],[1310,46,1421,35],[1310,50,1421,39],[1310,51,1421,40,"high"],[1310,55,1421,44],[1310,60,1421,49,"b"],[1310,61,1421,51],[1310,63,1422,11],[1310,67,1422,15],[1310,68,1422,16,"high"],[1310,72,1422,20],[1310,76,1422,24,"numBits"],[1310,83,1422,31],[1310,86,1422,36],[1310,90,1422,40],[1310,91,1422,41,"low"],[1310,94,1422,44],[1310,99,1422,49,"b"],[1310,100,1422,51],[1310,102,1423,10],[1310,106,1423,14],[1310,107,1423,15,"unsigned"],[1310,115,1424,8],[1310,116,1424,9],[1311,6,1425,6],[1312,6,1426,6,"numBits"],[1312,13,1426,13],[1312,17,1426,17],[1312,19,1426,19],[1313,6,1427,6,"b"],[1313,7,1427,7],[1313,10,1427,10],[1313,12,1427,12],[1313,15,1427,15,"numBits"],[1313,22,1427,22],[1314,6,1428,6],[1314,13,1428,13,"fromBits"],[1314,21,1428,21],[1314,22,1429,9],[1314,26,1429,13],[1314,27,1429,14,"high"],[1314,31,1429,18],[1314,35,1429,22,"numBits"],[1314,42,1429,29],[1314,45,1429,34],[1314,49,1429,38],[1314,50,1429,39,"low"],[1314,53,1429,42],[1314,58,1429,47,"b"],[1314,59,1429,49],[1314,61,1430,9],[1314,65,1430,13],[1314,66,1430,14,"low"],[1314,69,1430,17],[1314,73,1430,21,"numBits"],[1314,80,1430,28],[1314,83,1430,33],[1314,87,1430,37],[1314,88,1430,38,"high"],[1314,92,1430,42],[1314,97,1430,47,"b"],[1314,98,1430,49],[1314,100,1431,8],[1314,104,1431,12],[1314,105,1431,13,"unsigned"],[1314,113,1432,6],[1314,114,1432,7],[1315,4,1433,4],[1315,5,1433,5],[1316,4,1434,4],[1317,0,1435,0],[1318,0,1436,0],[1319,0,1437,0],[1320,0,1438,0],[1321,0,1439,0],[1322,4,1440,4,"LongPrototype"],[1322,17,1440,17],[1322,18,1440,18,"rotl"],[1322,22,1440,22],[1322,25,1440,25,"LongPrototype"],[1322,38,1440,38],[1322,39,1440,39,"rotateLeft"],[1322,49,1440,49],[1324,4,1442,4],[1325,0,1443,0],[1326,0,1444,0],[1327,0,1445,0],[1328,0,1446,0],[1329,0,1447,0],[1330,4,1448,4,"LongPrototype"],[1330,17,1448,17],[1330,18,1448,18,"rotateRight"],[1330,29,1448,29],[1330,32,1448,32],[1330,41,1448,41,"rotateRight"],[1330,52,1448,52,"rotateRight"],[1330,53,1448,53,"numBits"],[1330,60,1448,60],[1330,62,1448,62],[1331,6,1449,6],[1331,10,1449,10,"b"],[1331,11,1449,11],[1332,6,1450,6],[1332,10,1450,10,"isLong"],[1332,16,1450,16],[1332,17,1450,17,"numBits"],[1332,24,1450,24],[1332,25,1450,25],[1332,27,1450,27,"numBits"],[1332,34,1450,34],[1332,37,1450,37,"numBits"],[1332,44,1450,44],[1332,45,1450,45,"toInt"],[1332,50,1450,50],[1332,51,1450,51],[1332,52,1450,52],[1333,6,1451,6],[1333,10,1451,10],[1333,11,1451,11,"numBits"],[1333,18,1451,18],[1333,22,1451,22],[1333,24,1451,24],[1333,30,1451,30],[1333,31,1451,31],[1333,33,1451,33],[1333,40,1451,40],[1333,44,1451,44],[1334,6,1452,6],[1334,10,1452,10,"numBits"],[1334,17,1452,17],[1334,22,1452,22],[1334,24,1452,24],[1334,26,1452,26],[1334,33,1452,33,"fromBits"],[1334,41,1452,41],[1334,42,1452,42],[1334,46,1452,46],[1334,47,1452,47,"high"],[1334,51,1452,51],[1334,53,1452,53],[1334,57,1452,57],[1334,58,1452,58,"low"],[1334,61,1452,61],[1334,63,1452,63],[1334,67,1452,67],[1334,68,1452,68,"unsigned"],[1334,76,1452,76],[1334,77,1452,77],[1335,6,1453,6],[1335,10,1453,10,"numBits"],[1335,17,1453,17],[1335,20,1453,20],[1335,22,1453,22],[1335,24,1453,24],[1336,8,1454,8,"b"],[1336,9,1454,9],[1336,12,1454,12],[1336,14,1454,14],[1336,17,1454,17,"numBits"],[1336,24,1454,24],[1337,8,1455,8],[1337,15,1455,15,"fromBits"],[1337,23,1455,23],[1337,24,1456,11],[1337,28,1456,15],[1337,29,1456,16,"high"],[1337,33,1456,20],[1337,37,1456,24,"b"],[1337,38,1456,25],[1337,41,1456,30],[1337,45,1456,34],[1337,46,1456,35,"low"],[1337,49,1456,38],[1337,54,1456,43,"numBits"],[1337,61,1456,51],[1337,63,1457,11],[1337,67,1457,15],[1337,68,1457,16,"low"],[1337,71,1457,19],[1337,75,1457,23,"b"],[1337,76,1457,24],[1337,79,1457,29],[1337,83,1457,33],[1337,84,1457,34,"high"],[1337,88,1457,38],[1337,93,1457,43,"numBits"],[1337,100,1457,51],[1337,102,1458,10],[1337,106,1458,14],[1337,107,1458,15,"unsigned"],[1337,115,1459,8],[1337,116,1459,9],[1338,6,1460,6],[1339,6,1461,6,"numBits"],[1339,13,1461,13],[1339,17,1461,17],[1339,19,1461,19],[1340,6,1462,6,"b"],[1340,7,1462,7],[1340,10,1462,10],[1340,12,1462,12],[1340,15,1462,15,"numBits"],[1340,22,1462,22],[1341,6,1463,6],[1341,13,1463,13,"fromBits"],[1341,21,1463,21],[1341,22,1464,9],[1341,26,1464,13],[1341,27,1464,14,"low"],[1341,30,1464,17],[1341,34,1464,21,"b"],[1341,35,1464,22],[1341,38,1464,27],[1341,42,1464,31],[1341,43,1464,32,"high"],[1341,47,1464,36],[1341,52,1464,41,"numBits"],[1341,59,1464,49],[1341,61,1465,9],[1341,65,1465,13],[1341,66,1465,14,"high"],[1341,70,1465,18],[1341,74,1465,22,"b"],[1341,75,1465,23],[1341,78,1465,28],[1341,82,1465,32],[1341,83,1465,33,"low"],[1341,86,1465,36],[1341,91,1465,41,"numBits"],[1341,98,1465,49],[1341,100,1466,8],[1341,104,1466,12],[1341,105,1466,13,"unsigned"],[1341,113,1467,6],[1341,114,1467,7],[1342,4,1468,4],[1342,5,1468,5],[1343,4,1469,4],[1344,0,1470,0],[1345,0,1471,0],[1346,0,1472,0],[1347,0,1473,0],[1348,0,1474,0],[1349,4,1475,4,"LongPrototype"],[1349,17,1475,17],[1349,18,1475,18,"rotr"],[1349,22,1475,22],[1349,25,1475,25,"LongPrototype"],[1349,38,1475,38],[1349,39,1475,39,"rotateRight"],[1349,50,1475,50],[1351,4,1477,4],[1352,0,1478,0],[1353,0,1479,0],[1354,0,1480,0],[1355,0,1481,0],[1356,4,1482,4,"LongPrototype"],[1356,17,1482,17],[1356,18,1482,18,"toSigned"],[1356,26,1482,26],[1356,29,1482,29],[1356,38,1482,38,"toSigned"],[1356,46,1482,46,"toSigned"],[1356,47,1482,46],[1356,49,1482,49],[1357,6,1483,6],[1357,10,1483,10],[1357,11,1483,11],[1357,15,1483,15],[1357,16,1483,16,"unsigned"],[1357,24,1483,24],[1357,26,1483,26],[1357,33,1483,33],[1357,37,1483,37],[1358,6,1484,6],[1358,13,1484,13,"fromBits"],[1358,21,1484,21],[1358,22,1484,22],[1358,26,1484,26],[1358,27,1484,27,"low"],[1358,30,1484,30],[1358,32,1484,32],[1358,36,1484,36],[1358,37,1484,37,"high"],[1358,41,1484,41],[1358,43,1484,43],[1358,48,1484,48],[1358,49,1484,49],[1359,4,1485,4],[1359,5,1485,5],[1361,4,1487,4],[1362,0,1488,0],[1363,0,1489,0],[1364,0,1490,0],[1365,0,1491,0],[1366,4,1492,4,"LongPrototype"],[1366,17,1492,17],[1366,18,1492,18,"toUnsigned"],[1366,28,1492,28],[1366,31,1492,31],[1366,40,1492,40,"toUnsigned"],[1366,50,1492,50,"toUnsigned"],[1366,51,1492,50],[1366,53,1492,53],[1367,6,1493,6],[1367,10,1493,10],[1367,14,1493,14],[1367,15,1493,15,"unsigned"],[1367,23,1493,23],[1367,25,1493,25],[1367,32,1493,32],[1367,36,1493,36],[1368,6,1494,6],[1368,13,1494,13,"fromBits"],[1368,21,1494,21],[1368,22,1494,22],[1368,26,1494,26],[1368,27,1494,27,"low"],[1368,30,1494,30],[1368,32,1494,32],[1368,36,1494,36],[1368,37,1494,37,"high"],[1368,41,1494,41],[1368,43,1494,43],[1368,47,1494,47],[1368,48,1494,48],[1369,4,1495,4],[1369,5,1495,5],[1371,4,1497,4],[1372,0,1498,0],[1373,0,1499,0],[1374,0,1500,0],[1375,0,1501,0],[1376,0,1502,0],[1377,4,1503,4,"LongPrototype"],[1377,17,1503,17],[1377,18,1503,18,"toBytes"],[1377,25,1503,25],[1377,28,1503,28],[1377,37,1503,37,"toBytes"],[1377,44,1503,44,"toBytes"],[1377,45,1503,45,"le"],[1377,47,1503,47],[1377,49,1503,49],[1378,6,1504,6],[1378,13,1504,13,"le"],[1378,15,1504,15],[1378,18,1504,18],[1378,22,1504,22],[1378,23,1504,23,"toBytesLE"],[1378,32,1504,32],[1378,33,1504,33],[1378,34,1504,34],[1378,37,1504,37],[1378,41,1504,41],[1378,42,1504,42,"toBytesBE"],[1378,51,1504,51],[1378,52,1504,52],[1378,53,1504,53],[1379,4,1505,4],[1379,5,1505,5],[1381,4,1507,4],[1382,0,1508,0],[1383,0,1509,0],[1384,0,1510,0],[1385,0,1511,0],[1386,4,1512,4,"LongPrototype"],[1386,17,1512,17],[1386,18,1512,18,"toBytesLE"],[1386,27,1512,27],[1386,30,1512,30],[1386,39,1512,39,"toBytesLE"],[1386,48,1512,48,"toBytesLE"],[1386,49,1512,48],[1386,51,1512,51],[1387,6,1513,6],[1387,10,1513,10,"hi"],[1387,12,1513,12],[1387,15,1513,15],[1387,19,1513,19],[1387,20,1513,20,"high"],[1387,24,1513,24],[1388,8,1514,8,"lo"],[1388,10,1514,10],[1388,13,1514,13],[1388,17,1514,17],[1388,18,1514,18,"low"],[1388,21,1514,21],[1389,6,1515,6],[1389,13,1515,13],[1389,14,1516,8,"lo"],[1389,16,1516,10],[1389,19,1516,13],[1389,23,1516,17],[1389,25,1517,9,"lo"],[1389,27,1517,11],[1389,32,1517,16],[1389,33,1517,17],[1389,36,1517,21],[1389,40,1517,25],[1389,42,1518,9,"lo"],[1389,44,1518,11],[1389,49,1518,16],[1389,51,1518,18],[1389,54,1518,22],[1389,58,1518,26],[1389,60,1519,8,"lo"],[1389,62,1519,10],[1389,67,1519,15],[1389,69,1519,17],[1389,71,1520,8,"hi"],[1389,73,1520,10],[1389,76,1520,13],[1389,80,1520,17],[1389,82,1521,9,"hi"],[1389,84,1521,11],[1389,89,1521,16],[1389,90,1521,17],[1389,93,1521,21],[1389,97,1521,25],[1389,99,1522,9,"hi"],[1389,101,1522,11],[1389,106,1522,16],[1389,108,1522,18],[1389,111,1522,22],[1389,115,1522,26],[1389,117,1523,8,"hi"],[1389,119,1523,10],[1389,124,1523,15],[1389,126,1523,17],[1389,127,1524,7],[1390,4,1525,4],[1390,5,1525,5],[1392,4,1527,4],[1393,0,1528,0],[1394,0,1529,0],[1395,0,1530,0],[1396,0,1531,0],[1397,4,1532,4,"LongPrototype"],[1397,17,1532,17],[1397,18,1532,18,"toBytesBE"],[1397,27,1532,27],[1397,30,1532,30],[1397,39,1532,39,"toBytesBE"],[1397,48,1532,48,"toBytesBE"],[1397,49,1532,48],[1397,51,1532,51],[1398,6,1533,6],[1398,10,1533,10,"hi"],[1398,12,1533,12],[1398,15,1533,15],[1398,19,1533,19],[1398,20,1533,20,"high"],[1398,24,1533,24],[1399,8,1534,8,"lo"],[1399,10,1534,10],[1399,13,1534,13],[1399,17,1534,17],[1399,18,1534,18,"low"],[1399,21,1534,21],[1400,6,1535,6],[1400,13,1535,13],[1400,14,1536,8,"hi"],[1400,16,1536,10],[1400,21,1536,15],[1400,23,1536,17],[1400,25,1537,9,"hi"],[1400,27,1537,11],[1400,32,1537,16],[1400,34,1537,18],[1400,37,1537,22],[1400,41,1537,26],[1400,43,1538,9,"hi"],[1400,45,1538,11],[1400,50,1538,16],[1400,51,1538,17],[1400,54,1538,21],[1400,58,1538,25],[1400,60,1539,8,"hi"],[1400,62,1539,10],[1400,65,1539,13],[1400,69,1539,17],[1400,71,1540,8,"lo"],[1400,73,1540,10],[1400,78,1540,15],[1400,80,1540,17],[1400,82,1541,9,"lo"],[1400,84,1541,11],[1400,89,1541,16],[1400,91,1541,18],[1400,94,1541,22],[1400,98,1541,26],[1400,100,1542,9,"lo"],[1400,102,1542,11],[1400,107,1542,16],[1400,108,1542,17],[1400,111,1542,21],[1400,115,1542,25],[1400,117,1543,8,"lo"],[1400,119,1543,10],[1400,122,1543,13],[1400,126,1543,17],[1400,127,1544,7],[1401,4,1545,4],[1401,5,1545,5],[1403,4,1547,4],[1404,0,1548,0],[1405,0,1549,0],[1406,0,1550,0],[1407,0,1551,0],[1408,0,1552,0],[1409,0,1553,0],[1410,4,1554,4,"Long"],[1410,8,1554,8],[1410,9,1554,9,"fromBytes"],[1410,18,1554,18],[1410,21,1554,21],[1410,30,1554,30,"fromBytes"],[1410,39,1554,39,"fromBytes"],[1410,40,1554,40,"bytes"],[1410,45,1554,45],[1410,47,1554,47,"unsigned"],[1410,55,1554,55],[1410,57,1554,57,"le"],[1410,59,1554,59],[1410,61,1554,61],[1411,6,1555,6],[1411,13,1555,13,"le"],[1411,15,1555,15],[1411,18,1556,10,"Long"],[1411,22,1556,14],[1411,23,1556,15,"fromBytesLE"],[1411,34,1556,26],[1411,35,1556,27,"bytes"],[1411,40,1556,32],[1411,42,1556,34,"unsigned"],[1411,50,1556,42],[1411,51,1556,43],[1411,54,1557,10,"Long"],[1411,58,1557,14],[1411,59,1557,15,"fromBytesBE"],[1411,70,1557,26],[1411,71,1557,27,"bytes"],[1411,76,1557,32],[1411,78,1557,34,"unsigned"],[1411,86,1557,42],[1411,87,1557,43],[1412,4,1558,4],[1412,5,1558,5],[1414,4,1560,4],[1415,0,1561,0],[1416,0,1562,0],[1417,0,1563,0],[1418,0,1564,0],[1419,0,1565,0],[1420,4,1566,4,"Long"],[1420,8,1566,8],[1420,9,1566,9,"fromBytesLE"],[1420,20,1566,20],[1420,23,1566,23],[1420,32,1566,32,"fromBytesLE"],[1420,43,1566,43,"fromBytesLE"],[1420,44,1566,44,"bytes"],[1420,49,1566,49],[1420,51,1566,51,"unsigned"],[1420,59,1566,59],[1420,61,1566,61],[1421,6,1567,6],[1421,13,1567,13],[1421,17,1567,17,"Long"],[1421,21,1567,21],[1421,22,1568,8,"bytes"],[1421,27,1568,13],[1421,28,1568,14],[1421,29,1568,15],[1421,30,1568,16],[1421,33,1568,20,"bytes"],[1421,38,1568,25],[1421,39,1568,26],[1421,40,1568,27],[1421,41,1568,28],[1421,45,1568,32],[1421,46,1568,34],[1421,49,1568,38,"bytes"],[1421,54,1568,43],[1421,55,1568,44],[1421,56,1568,45],[1421,57,1568,46],[1421,61,1568,50],[1421,63,1568,53],[1421,66,1568,57,"bytes"],[1421,71,1568,62],[1421,72,1568,63],[1421,73,1568,64],[1421,74,1568,65],[1421,78,1568,69],[1421,80,1568,72],[1421,82,1569,8,"bytes"],[1421,87,1569,13],[1421,88,1569,14],[1421,89,1569,15],[1421,90,1569,16],[1421,93,1569,20,"bytes"],[1421,98,1569,25],[1421,99,1569,26],[1421,100,1569,27],[1421,101,1569,28],[1421,105,1569,32],[1421,106,1569,34],[1421,109,1569,38,"bytes"],[1421,114,1569,43],[1421,115,1569,44],[1421,116,1569,45],[1421,117,1569,46],[1421,121,1569,50],[1421,123,1569,53],[1421,126,1569,57,"bytes"],[1421,131,1569,62],[1421,132,1569,63],[1421,133,1569,64],[1421,134,1569,65],[1421,138,1569,69],[1421,140,1569,72],[1421,142,1570,8,"unsigned"],[1421,150,1571,6],[1421,151,1571,7],[1422,4,1572,4],[1422,5,1572,5],[1424,4,1574,4],[1425,0,1575,0],[1426,0,1576,0],[1427,0,1577,0],[1428,0,1578,0],[1429,0,1579,0],[1430,4,1580,4,"Long"],[1430,8,1580,8],[1430,9,1580,9,"fromBytesBE"],[1430,20,1580,20],[1430,23,1580,23],[1430,32,1580,32,"fromBytesBE"],[1430,43,1580,43,"fromBytesBE"],[1430,44,1580,44,"bytes"],[1430,49,1580,49],[1430,51,1580,51,"unsigned"],[1430,59,1580,59],[1430,61,1580,61],[1431,6,1581,6],[1431,13,1581,13],[1431,17,1581,17,"Long"],[1431,21,1581,21],[1431,22,1582,9,"bytes"],[1431,27,1582,14],[1431,28,1582,15],[1431,29,1582,16],[1431,30,1582,17],[1431,34,1582,21],[1431,36,1582,23],[1431,39,1582,28,"bytes"],[1431,44,1582,33],[1431,45,1582,34],[1431,46,1582,35],[1431,47,1582,36],[1431,51,1582,40],[1431,53,1582,43],[1431,56,1582,47,"bytes"],[1431,61,1582,52],[1431,62,1582,53],[1431,63,1582,54],[1431,64,1582,55],[1431,68,1582,59],[1431,69,1582,61],[1431,72,1582,64,"bytes"],[1431,77,1582,69],[1431,78,1582,70],[1431,79,1582,71],[1431,80,1582,72],[1431,82,1583,9,"bytes"],[1431,87,1583,14],[1431,88,1583,15],[1431,89,1583,16],[1431,90,1583,17],[1431,94,1583,21],[1431,96,1583,23],[1431,99,1583,28,"bytes"],[1431,104,1583,33],[1431,105,1583,34],[1431,106,1583,35],[1431,107,1583,36],[1431,111,1583,40],[1431,113,1583,43],[1431,116,1583,47,"bytes"],[1431,121,1583,52],[1431,122,1583,53],[1431,123,1583,54],[1431,124,1583,55],[1431,128,1583,59],[1431,129,1583,61],[1431,132,1583,64,"bytes"],[1431,137,1583,69],[1431,138,1583,70],[1431,139,1583,71],[1431,140,1583,72],[1431,142,1584,8,"unsigned"],[1431,150,1585,6],[1431,151,1585,7],[1432,4,1586,4],[1432,5,1586,5],[1434,4,1588,4],[1435,4,1589,4],[1435,8,1589,8],[1435,15,1589,15,"BigInt"],[1435,21,1589,21],[1435,26,1589,26],[1435,36,1589,36],[1435,38,1589,38],[1436,6,1590,6],[1437,0,1591,0],[1438,0,1592,0],[1439,0,1593,0],[1440,0,1594,0],[1441,0,1595,0],[1442,0,1596,0],[1443,6,1597,6,"Long"],[1443,10,1597,10],[1443,11,1597,11,"fromBigInt"],[1443,21,1597,21],[1443,24,1597,24],[1443,33,1597,33,"fromBigInt"],[1443,43,1597,43,"fromBigInt"],[1443,44,1597,44,"value"],[1443,49,1597,49],[1443,51,1597,51,"unsigned"],[1443,59,1597,59],[1443,61,1597,61],[1444,8,1598,8],[1444,12,1598,12,"lowBits"],[1444,19,1598,19],[1444,22,1598,22,"Number"],[1444,28,1598,28],[1444,29,1598,29,"BigInt"],[1444,35,1598,35],[1444,36,1598,36,"asIntN"],[1444,42,1598,42],[1444,43,1598,43],[1444,45,1598,45],[1444,47,1598,47,"value"],[1444,52,1598,52],[1444,53,1598,53],[1444,54,1598,54],[1445,8,1599,8],[1445,12,1599,12,"highBits"],[1445,20,1599,20],[1445,23,1599,23,"Number"],[1445,29,1599,29],[1445,30,1599,30,"BigInt"],[1445,36,1599,36],[1445,37,1599,37,"asIntN"],[1445,43,1599,43],[1445,44,1599,44],[1445,46,1599,46],[1445,48,1599,48,"value"],[1445,53,1599,53],[1445,57,1599,57,"BigInt"],[1445,63,1599,63],[1445,64,1599,64],[1445,66,1599,66],[1445,67,1599,67],[1445,68,1599,68],[1445,69,1599,69],[1446,8,1600,8],[1446,15,1600,15,"fromBits"],[1446,23,1600,23],[1446,24,1600,24,"lowBits"],[1446,31,1600,31],[1446,33,1600,33,"highBits"],[1446,41,1600,41],[1446,43,1600,43,"unsigned"],[1446,51,1600,51],[1446,52,1600,52],[1447,6,1601,6],[1447,7,1601,7],[1449,6,1603,6],[1450,6,1604,6,"Long"],[1450,10,1604,10],[1450,11,1604,11,"fromValue"],[1450,20,1604,20],[1450,23,1604,23],[1450,32,1604,32,"fromValueWithBigInt"],[1450,51,1604,51,"fromValueWithBigInt"],[1450,52,1604,52,"value"],[1450,57,1604,57],[1450,59,1604,59,"unsigned"],[1450,67,1604,67],[1450,69,1604,69],[1451,8,1605,8],[1451,12,1605,12],[1451,19,1605,19,"value"],[1451,24,1605,24],[1451,29,1605,29],[1451,37,1605,37],[1451,39,1605,39],[1451,46,1605,46,"Long"],[1451,50,1605,50],[1451,51,1605,51,"fromBigInt"],[1451,61,1605,61],[1451,62,1605,62,"value"],[1451,67,1605,67],[1451,69,1605,69,"unsigned"],[1451,77,1605,77],[1451,78,1605,78],[1452,8,1606,8],[1452,15,1606,15,"fromValue"],[1452,24,1606,24],[1452,25,1606,25,"value"],[1452,30,1606,30],[1452,32,1606,32,"unsigned"],[1452,40,1606,40],[1452,41,1606,41],[1453,6,1607,6],[1453,7,1607,7],[1455,6,1609,6],[1456,0,1610,0],[1457,0,1611,0],[1458,0,1612,0],[1459,0,1613,0],[1460,6,1614,6,"LongPrototype"],[1460,19,1614,19],[1460,20,1614,20,"toBigInt"],[1460,28,1614,28],[1460,31,1614,31],[1460,40,1614,40,"toBigInt"],[1460,48,1614,48,"toBigInt"],[1460,49,1614,48],[1460,51,1614,51],[1461,8,1615,8],[1461,12,1615,12,"lowBigInt"],[1461,21,1615,21],[1461,24,1615,24,"BigInt"],[1461,30,1615,30],[1461,31,1615,31],[1461,35,1615,35],[1461,36,1615,36,"low"],[1461,39,1615,39],[1461,44,1615,44],[1461,45,1615,45],[1461,46,1615,46],[1462,8,1616,8],[1462,12,1616,12,"highBigInt"],[1462,22,1616,22],[1462,25,1616,25,"BigInt"],[1462,31,1616,31],[1462,32,1616,32],[1462,36,1616,36],[1462,37,1616,37,"unsigned"],[1462,45,1616,45],[1462,48,1616,48],[1462,52,1616,52],[1462,53,1616,53,"high"],[1462,57,1616,57],[1462,62,1616,62],[1462,63,1616,63],[1462,66,1616,66],[1462,70,1616,70],[1462,71,1616,71,"high"],[1462,75,1616,75],[1462,76,1616,76],[1463,8,1617,8],[1463,15,1617,16,"highBigInt"],[1463,25,1617,26],[1463,29,1617,30,"BigInt"],[1463,35,1617,36],[1463,36,1617,37],[1463,38,1617,39],[1463,39,1617,40],[1463,42,1617,44,"lowBigInt"],[1463,51,1617,53],[1464,6,1618,6],[1464,7,1618,7],[1465,4,1619,4],[1466,4,1620,4],[1466,8,1620,8,"_default"],[1466,16,1620,16],[1466,19,1620,20,"_exports"],[1466,27,1620,28],[1466,28,1620,29,"default"],[1466,35,1620,36],[1466,38,1620,39,"Long"],[1466,42,1620,44],[1467,2,1621,2],[1467,3,1622,0],[1467,4,1622,1],[1468,0,1622,2],[1468,3]],"functionMap":{"names":["<global>","<anonymous>","preferDefault","define$argument_1","Long","isLong","ctz32","fromInt","fromNumber","fromBits","fromString","fromValue","toInt","toNumber","toString","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","isSafeInteger","isZero","isNegative","isPositive","isOdd","isEven","equals","notEquals","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","compare","negate","add","subtract","multiply","divide","modulo","not","countLeadingZeros","countTrailingZeros","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","rotateLeft","rotateRight","toSigned","toUnsigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","fromBigInt","fromValueWithBigInt","toBigInt"],"mappings":"AAA;CCC;ECC;GDE;eEE;KFI;CDW;ECM;IGqH;KHkB;IIoC;KJE;IKQ;KLG;IM8B;KNqB;IOiB;KPe;IQkB;KRE;IS6B;KTyC;IUmB;KVS;0BWmK;KXE;6BYO;KZI;6BaU;KbgC;gCcO;KdE;wCeO;KfE;+BgBO;KhBE;uCiBO;KjBE;kCkBO;KlBO;kCmBO;KnBS;2BoBO;KpBE;+BqBa;KrBE;+BsBO;KtBE;0BuBO;KvBE;2BwBO;KxBE;2ByBQ;KzBS;8B0BgB;K1BE;6B2BwB;K3BE;oC4BgB;K5BE;gC6BwB;K7BE;uC8BgB;K9BE;4B+ByB;K/Bc;2BgCgB;KhCG;wBiCe;KjC6B;6BkCQ;KlCG;6BmCgB;KnCkE;2BoCiB;KpCgG;2BqCgB;KrCc;wBsCuB;KtCE;sCuCO;KvCE;uCwCe;KxCE;wByCgB;KzCO;uB0CQ;K1CO;wB2CQ;K3CO;8B4CQ;K5CU;+B6CgB;K7Ce;uC8CgB;K9CW;+B+CwB;K/CoB;gCgDe;KhDoB;6BiDc;KjDG;+BkDO;KlDG;4BmDQ;KnDE;8BoDO;KpDa;8BqDO;KrDa;qBsDS;KtDI;uBuDQ;KvDM;uBwDQ;KxDM;wByDW;OzDI;uB0DG;O1DG;+B2DO;O3DI;GDG"}},"type":"js/module"}]}