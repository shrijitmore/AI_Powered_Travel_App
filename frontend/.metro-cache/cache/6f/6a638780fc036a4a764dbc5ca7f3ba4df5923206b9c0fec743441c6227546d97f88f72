{"dependencies":[{"name":"./resolver","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":19,"column":19,"index":740},"end":{"line":19,"column":40,"index":761}}],"key":"sRT48ZY0MO9jzJf+yVj+EkuLSJg=","exportNames":["*"]}},{"name":"dns","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":12,"index":775},"end":{"line":20,"column":26,"index":789}}],"key":"m4vM3artDTTVIQ0fH4Jm2om1bsc=","exportNames":["*"]}},{"name":"util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":13,"index":804},"end":{"line":21,"column":28,"index":819}}],"key":"plO20G0zye191TqKMAMeOagk9EI=","exportNames":["*"]}},{"name":"./service-config","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":25,"index":846},"end":{"line":22,"column":52,"index":873}}],"key":"R+J4+XLDT49whwlwEFQEDXG5pMc=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":23,"column":20,"index":895},"end":{"line":23,"column":42,"index":917}},{"start":{"line":26,"column":20,"index":1019},"end":{"line":26,"column":42,"index":1041}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./metadata","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":24,"column":19,"index":938},"end":{"line":24,"column":40,"index":959}}],"key":"6KRjstwF8yWfkztxpqnIypQq1mI=","exportNames":["*"]}},{"name":"./logging","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":25,"column":16,"index":977},"end":{"line":25,"column":36,"index":997}}],"key":"IuCQ7u+XFj9mcNQiMAuOpQn/EDM=","exportNames":["*"]}},{"name":"./uri-parser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":21,"index":1064},"end":{"line":27,"column":44,"index":1087}}],"key":"esiO732HplrDMf1oXKGdpawa/aM=","exportNames":["*"]}},{"name":"net","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":28,"column":14,"index":1103},"end":{"line":28,"column":28,"index":1117}}],"key":"VaJ41XPkzAfy8SiomkwZkgq4Twc=","exportNames":["*"]}},{"name":"./backoff-timeout","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":29,"column":26,"index":1145},"end":{"line":29,"column":54,"index":1173}}],"key":"2lhPQUNStqxtTZnZ5ZoNGEFu/ZQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.setup = exports.DEFAULT_PORT = void 0;\n  const resolver_1 = require(_dependencyMap[0], \"./resolver\");\n  const dns = require(_dependencyMap[1], \"dns\");\n  const util = require(_dependencyMap[2], \"util\");\n  const service_config_1 = require(_dependencyMap[3], \"./service-config\");\n  const constants_1 = require(_dependencyMap[4], \"./constants\");\n  const metadata_1 = require(_dependencyMap[5], \"./metadata\");\n  const logging = require(_dependencyMap[6], \"./logging\");\n  const constants_2 = require(_dependencyMap[4], \"./constants\");\n  const uri_parser_1 = require(_dependencyMap[7], \"./uri-parser\");\n  const net_1 = require(_dependencyMap[8], \"net\");\n  const backoff_timeout_1 = require(_dependencyMap[9], \"./backoff-timeout\");\n  const TRACER_NAME = 'dns_resolver';\n  function trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n  }\n  /**\n   * The default TCP port to connect to if not explicitly specified in the target.\n   */\n  exports.DEFAULT_PORT = 443;\n  const DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\n  const resolveTxtPromise = util.promisify(dns.resolveTxt);\n  const dnsLookupPromise = util.promisify(dns.lookup);\n  /**\n   * Merge any number of arrays into a single alternating array\n   * @param arrays\n   */\n  function mergeArrays(...arrays) {\n    const result = [];\n    for (let i = 0; i < Math.max.apply(null, arrays.map(array => array.length)); i++) {\n      for (const array of arrays) {\n        if (i < array.length) {\n          result.push(array[i]);\n        }\n      }\n    }\n    return result;\n  }\n  /**\n   * Resolver implementation that handles DNS names and IP addresses.\n   */\n  class DnsResolver {\n    constructor(target, listener, channelOptions) {\n      var _a, _b, _c;\n      this.target = target;\n      this.listener = listener;\n      this.pendingLookupPromise = null;\n      this.pendingTxtPromise = null;\n      this.latestLookupResult = null;\n      this.latestServiceConfig = null;\n      this.latestServiceConfigError = null;\n      this.continueResolving = false;\n      this.isNextResolutionTimerRunning = false;\n      this.isServiceConfigEnabled = true;\n      this.returnedIpResult = false;\n      trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n      const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n      if (hostPort === null) {\n        this.ipResult = null;\n        this.dnsHostname = null;\n        this.port = null;\n      } else {\n        if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\n          this.ipResult = [{\n            host: hostPort.host,\n            port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT\n          }];\n          this.dnsHostname = null;\n          this.port = null;\n        } else {\n          this.ipResult = null;\n          this.dnsHostname = hostPort.host;\n          this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;\n        }\n      }\n      this.percentage = Math.random() * 100;\n      if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n        this.isServiceConfigEnabled = false;\n      }\n      this.defaultResolutionError = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\n        metadata: new metadata_1.Metadata()\n      };\n      const backoffOptions = {\n        initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n        maxDelay: channelOptions['grpc.max_reconnect_backoff_ms']\n      };\n      this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\n        if (this.continueResolving) {\n          this.startResolutionWithBackoff();\n        }\n      }, backoffOptions);\n      this.backoff.unref();\n      this.minTimeBetweenResolutionsMs = (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n      this.nextResolutionTimer = setTimeout(() => {}, 0);\n      clearTimeout(this.nextResolutionTimer);\n    }\n    /**\n     * If the target is an IP address, just provide that address as a result.\n     * Otherwise, initiate A, AAAA, and TXT lookups\n     */\n    startResolution() {\n      if (this.ipResult !== null) {\n        if (!this.returnedIpResult) {\n          trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\n          setImmediate(() => {\n            this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n          });\n          this.returnedIpResult = true;\n        }\n        this.backoff.stop();\n        this.backoff.reset();\n        this.stopNextResolutionTimer();\n        return;\n      }\n      if (this.dnsHostname === null) {\n        trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\n        setImmediate(() => {\n          this.listener.onError({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\n            metadata: new metadata_1.Metadata()\n          });\n        });\n        this.stopNextResolutionTimer();\n      } else {\n        if (this.pendingLookupPromise !== null) {\n          return;\n        }\n        trace('Looking up DNS hostname ' + this.dnsHostname);\n        /* We clear out latestLookupResult here to ensure that it contains the\n         * latest result since the last time we started resolving. That way, the\n         * TXT resolution handler can use it, but only if it finishes second. We\n         * don't clear out any previous service config results because it's\n         * better to use a service config that's slightly out of date than to\n         * revert to an effectively blank one. */\n        this.latestLookupResult = null;\n        const hostname = this.dnsHostname;\n        /* We lookup both address families here and then split them up later\n         * because when looking up a single family, dns.lookup outputs an error\n         * if the name exists but there are no records for that family, and that\n         * error is indistinguishable from other kinds of errors */\n        this.pendingLookupPromise = dnsLookupPromise(hostname, {\n          all: true\n        });\n        this.pendingLookupPromise.then(addressList => {\n          if (this.pendingLookupPromise === null) {\n            return;\n          }\n          this.pendingLookupPromise = null;\n          this.backoff.reset();\n          this.backoff.stop();\n          const ip4Addresses = addressList.filter(addr => addr.family === 4);\n          const ip6Addresses = addressList.filter(addr => addr.family === 6);\n          this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map(addr => ({\n            host: addr.address,\n            port: +this.port\n          }));\n          const allAddressesString = '[' + this.latestLookupResult.map(addr => addr.host + ':' + addr.port).join(',') + ']';\n          trace('Resolved addresses for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + allAddressesString);\n          if (this.latestLookupResult.length === 0) {\n            this.listener.onError(this.defaultResolutionError);\n            return;\n          }\n          /* If the TXT lookup has not yet finished, both of the last two\n           * arguments will be null, which is the equivalent of getting an\n           * empty TXT response. When the TXT lookup does finish, its handler\n           * can update the service config by using the same address list */\n          this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n        }, err => {\n          if (this.pendingLookupPromise === null) {\n            return;\n          }\n          trace('Resolution error for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + err.message);\n          this.pendingLookupPromise = null;\n          this.stopNextResolutionTimer();\n          this.listener.onError(this.defaultResolutionError);\n        });\n        /* If there already is a still-pending TXT resolution, we can just use\n         * that result when it comes in */\n        if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n          /* We handle the TXT query promise differently than the others because\n           * the name resolution attempt as a whole is a success even if the TXT\n           * lookup fails */\n          this.pendingTxtPromise = resolveTxtPromise(hostname);\n          this.pendingTxtPromise.then(txtRecord => {\n            if (this.pendingTxtPromise === null) {\n              return;\n            }\n            this.pendingTxtPromise = null;\n            try {\n              this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\n            } catch (err) {\n              this.latestServiceConfigError = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Parsing service config failed with error ${err.message}`,\n                metadata: new metadata_1.Metadata()\n              };\n            }\n            if (this.latestLookupResult !== null) {\n              /* We rely here on the assumption that calling this function with\n               * identical parameters will be essentialy idempotent, and calling\n               * it with the same address list and a different service config\n               * should result in a fast and seamless switchover. */\n              this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n            }\n          }, err => {\n            /* If TXT lookup fails we should do nothing, which means that we\n             * continue to use the result of the most recent successful lookup,\n             * or the default null config object if there has never been a\n             * successful lookup. We do not set the latestServiceConfigError\n             * here because that is specifically used for response validation\n             * errors. We still need to handle this error so that it does not\n             * bubble up as an unhandled promise rejection. */\n          });\n        }\n      }\n    }\n    startNextResolutionTimer() {\n      var _a, _b;\n      clearTimeout(this.nextResolutionTimer);\n      this.nextResolutionTimer = (_b = (_a = setTimeout(() => {\n        this.stopNextResolutionTimer();\n        if (this.continueResolving) {\n          this.startResolutionWithBackoff();\n        }\n      }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n      this.isNextResolutionTimerRunning = true;\n    }\n    stopNextResolutionTimer() {\n      clearTimeout(this.nextResolutionTimer);\n      this.isNextResolutionTimerRunning = false;\n    }\n    startResolutionWithBackoff() {\n      if (this.pendingLookupPromise === null) {\n        this.continueResolving = false;\n        this.backoff.runOnce();\n        this.startNextResolutionTimer();\n        this.startResolution();\n      }\n    }\n    updateResolution() {\n      /* If there is a pending lookup, just let it finish. Otherwise, if the\n       * nextResolutionTimer or backoff timer is running, set the\n       * continueResolving flag to resolve when whichever of those timers\n       * fires. Otherwise, start resolving immediately. */\n      if (this.pendingLookupPromise === null) {\n        if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n          if (this.isNextResolutionTimerRunning) {\n            trace('resolution update delayed by \"min time between resolutions\" rate limit');\n          } else {\n            trace('resolution update delayed by backoff timer until ' + this.backoff.getEndTime().toISOString());\n          }\n          this.continueResolving = true;\n        } else {\n          this.startResolutionWithBackoff();\n        }\n      }\n    }\n    /**\n     * Reset the resolver to the same state it had when it was created. In-flight\n     * DNS requests cannot be cancelled, but they are discarded and their results\n     * will be ignored.\n     */\n    destroy() {\n      this.continueResolving = false;\n      this.backoff.reset();\n      this.backoff.stop();\n      this.stopNextResolutionTimer();\n      this.pendingLookupPromise = null;\n      this.pendingTxtPromise = null;\n      this.latestLookupResult = null;\n      this.latestServiceConfig = null;\n      this.latestServiceConfigError = null;\n      this.returnedIpResult = false;\n    }\n    /**\n     * Get the default authority for the given target. For IP targets, that is\n     * the IP address. For DNS targets, it is the hostname.\n     * @param target\n     */\n    static getDefaultAuthority(target) {\n      return target.path;\n    }\n  }\n  /**\n   * Set up the DNS resolver class by registering it as the handler for the\n   * \"dns:\" prefix and as the default resolver.\n   */\n  function setup() {\n    (0, resolver_1.registerResolver)('dns', DnsResolver);\n    (0, resolver_1.registerDefaultScheme)('dns');\n  }\n  exports.setup = setup;\n});","lineCount":317,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,2,17,0,"Object"],[19,8,17,6],[19,9,17,7,"defineProperty"],[19,23,17,21],[19,24,17,22,"exports"],[19,31,17,29],[19,33,17,31],[19,45,17,43],[19,47,17,45],[20,4,17,47,"value"],[20,9,17,52],[20,11,17,54],[21,2,17,59],[21,3,17,60],[21,4,17,61],[22,2,18,0,"exports"],[22,9,18,7],[22,10,18,8,"setup"],[22,15,18,13],[22,18,18,16,"exports"],[22,25,18,23],[22,26,18,24,"DEFAULT_PORT"],[22,38,18,36],[22,41,18,39],[22,46,18,44],[22,47,18,45],[23,2,19,0],[23,8,19,6,"resolver_1"],[23,18,19,16],[23,21,19,19,"require"],[23,28,19,26],[23,29,19,26,"_dependencyMap"],[23,43,19,26],[23,60,19,39],[23,61,19,40],[24,2,20,0],[24,8,20,6,"dns"],[24,11,20,9],[24,14,20,12,"require"],[24,21,20,19],[24,22,20,19,"_dependencyMap"],[24,36,20,19],[24,46,20,25],[24,47,20,26],[25,2,21,0],[25,8,21,6,"util"],[25,12,21,10],[25,15,21,13,"require"],[25,22,21,20],[25,23,21,20,"_dependencyMap"],[25,37,21,20],[25,48,21,27],[25,49,21,28],[26,2,22,0],[26,8,22,6,"service_config_1"],[26,24,22,22],[26,27,22,25,"require"],[26,34,22,32],[26,35,22,32,"_dependencyMap"],[26,49,22,32],[26,72,22,51],[26,73,22,52],[27,2,23,0],[27,8,23,6,"constants_1"],[27,19,23,17],[27,22,23,20,"require"],[27,29,23,27],[27,30,23,27,"_dependencyMap"],[27,44,23,27],[27,62,23,41],[27,63,23,42],[28,2,24,0],[28,8,24,6,"metadata_1"],[28,18,24,16],[28,21,24,19,"require"],[28,28,24,26],[28,29,24,26,"_dependencyMap"],[28,43,24,26],[28,60,24,39],[28,61,24,40],[29,2,25,0],[29,8,25,6,"logging"],[29,15,25,13],[29,18,25,16,"require"],[29,25,25,23],[29,26,25,23,"_dependencyMap"],[29,40,25,23],[29,56,25,35],[29,57,25,36],[30,2,26,0],[30,8,26,6,"constants_2"],[30,19,26,17],[30,22,26,20,"require"],[30,29,26,27],[30,30,26,27,"_dependencyMap"],[30,44,26,27],[30,62,26,41],[30,63,26,42],[31,2,27,0],[31,8,27,6,"uri_parser_1"],[31,20,27,18],[31,23,27,21,"require"],[31,30,27,28],[31,31,27,28,"_dependencyMap"],[31,45,27,28],[31,64,27,43],[31,65,27,44],[32,2,28,0],[32,8,28,6,"net_1"],[32,13,28,11],[32,16,28,14,"require"],[32,23,28,21],[32,24,28,21,"_dependencyMap"],[32,38,28,21],[32,48,28,27],[32,49,28,28],[33,2,29,0],[33,8,29,6,"backoff_timeout_1"],[33,25,29,23],[33,28,29,26,"require"],[33,35,29,33],[33,36,29,33,"_dependencyMap"],[33,50,29,33],[33,74,29,53],[33,75,29,54],[34,2,30,0],[34,8,30,6,"TRACER_NAME"],[34,19,30,17],[34,22,30,20],[34,36,30,34],[35,2,31,0],[35,11,31,9,"trace"],[35,16,31,14,"trace"],[35,17,31,15,"text"],[35,21,31,19],[35,23,31,21],[36,4,32,4,"logging"],[36,11,32,11],[36,12,32,12,"trace"],[36,17,32,17],[36,18,32,18,"constants_2"],[36,29,32,29],[36,30,32,30,"LogVerbosity"],[36,42,32,42],[36,43,32,43,"DEBUG"],[36,48,32,48],[36,50,32,50,"TRACER_NAME"],[36,61,32,61],[36,63,32,63,"text"],[36,67,32,67],[36,68,32,68],[37,2,33,0],[38,2,34,0],[39,0,35,0],[40,0,36,0],[41,2,37,0,"exports"],[41,9,37,7],[41,10,37,8,"DEFAULT_PORT"],[41,22,37,20],[41,25,37,23],[41,28,37,26],[42,2,38,0],[42,8,38,6,"DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS"],[42,47,38,45],[42,50,38,48],[42,55,38,53],[43,2,39,0],[43,8,39,6,"resolveTxtPromise"],[43,25,39,23],[43,28,39,26,"util"],[43,32,39,30],[43,33,39,31,"promisify"],[43,42,39,40],[43,43,39,41,"dns"],[43,46,39,44],[43,47,39,45,"resolveTxt"],[43,57,39,55],[43,58,39,56],[44,2,40,0],[44,8,40,6,"dnsLookupPromise"],[44,24,40,22],[44,27,40,25,"util"],[44,31,40,29],[44,32,40,30,"promisify"],[44,41,40,39],[44,42,40,40,"dns"],[44,45,40,43],[44,46,40,44,"lookup"],[44,52,40,50],[44,53,40,51],[45,2,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,2,45,0],[49,11,45,9,"mergeArrays"],[49,22,45,20,"mergeArrays"],[49,23,45,21],[49,26,45,24,"arrays"],[49,32,45,30],[49,34,45,32],[50,4,46,4],[50,10,46,10,"result"],[50,16,46,16],[50,19,46,19],[50,21,46,21],[51,4,47,4],[51,9,47,9],[51,13,47,13,"i"],[51,14,47,14],[51,17,47,17],[51,18,47,18],[51,20,47,20,"i"],[51,21,47,21],[51,24,48,8,"Math"],[51,28,48,12],[51,29,48,13,"max"],[51,32,48,16],[51,33,48,17,"apply"],[51,38,48,22],[51,39,48,23],[51,43,48,27],[51,45,48,29,"arrays"],[51,51,48,35],[51,52,48,36,"map"],[51,55,48,39],[51,56,48,40,"array"],[51,61,48,45],[51,65,48,49,"array"],[51,70,48,54],[51,71,48,55,"length"],[51,77,48,61],[51,78,48,62],[51,79,48,63],[51,81,48,65,"i"],[51,82,48,66],[51,84,48,68],[51,86,48,70],[52,6,49,8],[52,11,49,13],[52,17,49,19,"array"],[52,22,49,24],[52,26,49,28,"arrays"],[52,32,49,34],[52,34,49,36],[53,8,50,12],[53,12,50,16,"i"],[53,13,50,17],[53,16,50,20,"array"],[53,21,50,25],[53,22,50,26,"length"],[53,28,50,32],[53,30,50,34],[54,10,51,16,"result"],[54,16,51,22],[54,17,51,23,"push"],[54,21,51,27],[54,22,51,28,"array"],[54,27,51,33],[54,28,51,34,"i"],[54,29,51,35],[54,30,51,36],[54,31,51,37],[55,8,52,12],[56,6,53,8],[57,4,54,4],[58,4,55,4],[58,11,55,11,"result"],[58,17,55,17],[59,2,56,0],[60,2,57,0],[61,0,58,0],[62,0,59,0],[63,2,60,0],[63,8,60,6,"DnsResolver"],[63,19,60,17],[63,20,60,18],[64,4,61,4,"constructor"],[64,15,61,15,"constructor"],[64,16,61,16,"target"],[64,22,61,22],[64,24,61,24,"listener"],[64,32,61,32],[64,34,61,34,"channelOptions"],[64,48,61,48],[64,50,61,50],[65,6,62,8],[65,10,62,12,"_a"],[65,12,62,14],[65,14,62,16,"_b"],[65,16,62,18],[65,18,62,20,"_c"],[65,20,62,22],[66,6,63,8],[66,10,63,12],[66,11,63,13,"target"],[66,17,63,19],[66,20,63,22,"target"],[66,26,63,28],[67,6,64,8],[67,10,64,12],[67,11,64,13,"listener"],[67,19,64,21],[67,22,64,24,"listener"],[67,30,64,32],[68,6,65,8],[68,10,65,12],[68,11,65,13,"pendingLookupPromise"],[68,31,65,33],[68,34,65,36],[68,38,65,40],[69,6,66,8],[69,10,66,12],[69,11,66,13,"pendingTxtPromise"],[69,28,66,30],[69,31,66,33],[69,35,66,37],[70,6,67,8],[70,10,67,12],[70,11,67,13,"latestLookupResult"],[70,29,67,31],[70,32,67,34],[70,36,67,38],[71,6,68,8],[71,10,68,12],[71,11,68,13,"latestServiceConfig"],[71,30,68,32],[71,33,68,35],[71,37,68,39],[72,6,69,8],[72,10,69,12],[72,11,69,13,"latestServiceConfigError"],[72,35,69,37],[72,38,69,40],[72,42,69,44],[73,6,70,8],[73,10,70,12],[73,11,70,13,"continueResolving"],[73,28,70,30],[73,31,70,33],[73,36,70,38],[74,6,71,8],[74,10,71,12],[74,11,71,13,"isNextResolutionTimerRunning"],[74,39,71,41],[74,42,71,44],[74,47,71,49],[75,6,72,8],[75,10,72,12],[75,11,72,13,"isServiceConfigEnabled"],[75,33,72,35],[75,36,72,38],[75,40,72,42],[76,6,73,8],[76,10,73,12],[76,11,73,13,"returnedIpResult"],[76,27,73,29],[76,30,73,32],[76,35,73,37],[77,6,74,8,"trace"],[77,11,74,13],[77,12,74,14],[77,46,74,48],[77,49,74,51],[77,50,74,52],[77,51,74,53],[77,53,74,55,"uri_parser_1"],[77,65,74,67],[77,66,74,68,"uriToString"],[77,77,74,79],[77,79,74,81,"target"],[77,85,74,87],[77,86,74,88],[77,87,74,89],[78,6,75,8],[78,12,75,14,"hostPort"],[78,20,75,22],[78,23,75,25],[78,24,75,26],[78,25,75,27],[78,27,75,29,"uri_parser_1"],[78,39,75,41],[78,40,75,42,"splitHostPort"],[78,53,75,55],[78,55,75,57,"target"],[78,61,75,63],[78,62,75,64,"path"],[78,66,75,68],[78,67,75,69],[79,6,76,8],[79,10,76,12,"hostPort"],[79,18,76,20],[79,23,76,25],[79,27,76,29],[79,29,76,31],[80,8,77,12],[80,12,77,16],[80,13,77,17,"ipResult"],[80,21,77,25],[80,24,77,28],[80,28,77,32],[81,8,78,12],[81,12,78,16],[81,13,78,17,"dnsHostname"],[81,24,78,28],[81,27,78,31],[81,31,78,35],[82,8,79,12],[82,12,79,16],[82,13,79,17,"port"],[82,17,79,21],[82,20,79,24],[82,24,79,28],[83,6,80,8],[83,7,80,9],[83,13,81,13],[84,8,82,12],[84,12,82,16],[84,13,82,17],[84,14,82,18],[84,16,82,20,"net_1"],[84,21,82,25],[84,22,82,26,"isIPv4"],[84,28,82,32],[84,30,82,34,"hostPort"],[84,38,82,42],[84,39,82,43,"host"],[84,43,82,47],[84,44,82,48],[84,48,82,52],[84,49,82,53],[84,50,82,54],[84,52,82,56,"net_1"],[84,57,82,61],[84,58,82,62,"isIPv6"],[84,64,82,68],[84,66,82,70,"hostPort"],[84,74,82,78],[84,75,82,79,"host"],[84,79,82,83],[84,80,82,84],[84,82,82,86],[85,10,83,16],[85,14,83,20],[85,15,83,21,"ipResult"],[85,23,83,29],[85,26,83,32],[85,27,84,20],[86,12,85,24,"host"],[86,16,85,28],[86,18,85,30,"hostPort"],[86,26,85,38],[86,27,85,39,"host"],[86,31,85,43],[87,12,86,24,"port"],[87,16,86,28],[87,18,86,30],[87,19,86,31,"_a"],[87,21,86,33],[87,24,86,36,"hostPort"],[87,32,86,44],[87,33,86,45,"port"],[87,37,86,49],[87,43,86,55],[87,47,86,59],[87,51,86,63,"_a"],[87,53,86,65],[87,58,86,70],[87,63,86,75],[87,64,86,76],[87,67,86,79,"_a"],[87,69,86,81],[87,72,86,84,"exports"],[87,79,86,91],[87,80,86,92,"DEFAULT_PORT"],[88,10,87,20],[88,11,87,21],[88,12,88,17],[89,10,89,16],[89,14,89,20],[89,15,89,21,"dnsHostname"],[89,26,89,32],[89,29,89,35],[89,33,89,39],[90,10,90,16],[90,14,90,20],[90,15,90,21,"port"],[90,19,90,25],[90,22,90,28],[90,26,90,32],[91,8,91,12],[91,9,91,13],[91,15,92,17],[92,10,93,16],[92,14,93,20],[92,15,93,21,"ipResult"],[92,23,93,29],[92,26,93,32],[92,30,93,36],[93,10,94,16],[93,14,94,20],[93,15,94,21,"dnsHostname"],[93,26,94,32],[93,29,94,35,"hostPort"],[93,37,94,43],[93,38,94,44,"host"],[93,42,94,48],[94,10,95,16],[94,14,95,20],[94,15,95,21,"port"],[94,19,95,25],[94,22,95,28],[94,23,95,29,"_b"],[94,25,95,31],[94,28,95,34,"hostPort"],[94,36,95,42],[94,37,95,43,"port"],[94,41,95,47],[94,47,95,53],[94,51,95,57],[94,55,95,61,"_b"],[94,57,95,63],[94,62,95,68],[94,67,95,73],[94,68,95,74],[94,71,95,77,"_b"],[94,73,95,79],[94,76,95,82,"exports"],[94,83,95,89],[94,84,95,90,"DEFAULT_PORT"],[94,96,95,102],[95,8,96,12],[96,6,97,8],[97,6,98,8],[97,10,98,12],[97,11,98,13,"percentage"],[97,21,98,23],[97,24,98,26,"Math"],[97,28,98,30],[97,29,98,31,"random"],[97,35,98,37],[97,36,98,38],[97,37,98,39],[97,40,98,42],[97,43,98,45],[98,6,99,8],[98,10,99,12,"channelOptions"],[98,24,99,26],[98,25,99,27],[98,65,99,67],[98,66,99,68],[98,71,99,73],[98,72,99,74],[98,74,99,76],[99,8,100,12],[99,12,100,16],[99,13,100,17,"isServiceConfigEnabled"],[99,35,100,39],[99,38,100,42],[99,43,100,47],[100,6,101,8],[101,6,102,8],[101,10,102,12],[101,11,102,13,"defaultResolutionError"],[101,33,102,35],[101,36,102,38],[102,8,103,12,"code"],[102,12,103,16],[102,14,103,18,"constants_1"],[102,25,103,29],[102,26,103,30,"Status"],[102,32,103,36],[102,33,103,37,"UNAVAILABLE"],[102,44,103,48],[103,8,104,12,"details"],[103,15,104,19],[103,17,104,21],[103,54,104,58],[103,55,104,59],[103,56,104,60],[103,58,104,62,"uri_parser_1"],[103,70,104,74],[103,71,104,75,"uriToString"],[103,82,104,86],[103,84,104,88],[103,88,104,92],[103,89,104,93,"target"],[103,95,104,99],[103,96,104,100],[103,98,104,102],[104,8,105,12,"metadata"],[104,16,105,20],[104,18,105,22],[104,22,105,26,"metadata_1"],[104,32,105,36],[104,33,105,37,"Metadata"],[104,41,105,45],[104,42,105,46],[105,6,106,8],[105,7,106,9],[106,6,107,8],[106,12,107,14,"backoffOptions"],[106,26,107,28],[106,29,107,31],[107,8,108,12,"initialDelay"],[107,20,108,24],[107,22,108,26,"channelOptions"],[107,36,108,40],[107,37,108,41],[107,72,108,76],[107,73,108,77],[108,8,109,12,"maxDelay"],[108,16,109,20],[108,18,109,22,"channelOptions"],[108,32,109,36],[108,33,109,37],[108,64,109,68],[109,6,110,8],[109,7,110,9],[110,6,111,8],[110,10,111,12],[110,11,111,13,"backoff"],[110,18,111,20],[110,21,111,23],[110,25,111,27,"backoff_timeout_1"],[110,42,111,44],[110,43,111,45,"BackoffTimeout"],[110,57,111,59],[110,58,111,60],[110,64,111,66],[111,8,112,12],[111,12,112,16],[111,16,112,20],[111,17,112,21,"continueResolving"],[111,34,112,38],[111,36,112,40],[112,10,113,16],[112,14,113,20],[112,15,113,21,"startResolutionWithBackoff"],[112,41,113,47],[112,42,113,48],[112,43,113,49],[113,8,114,12],[114,6,115,8],[114,7,115,9],[114,9,115,11,"backoffOptions"],[114,23,115,25],[114,24,115,26],[115,6,116,8],[115,10,116,12],[115,11,116,13,"backoff"],[115,18,116,20],[115,19,116,21,"unref"],[115,24,116,26],[115,25,116,27],[115,26,116,28],[116,6,117,8],[116,10,117,12],[116,11,117,13,"minTimeBetweenResolutionsMs"],[116,38,117,40],[116,41,118,12],[116,42,118,13,"_c"],[116,44,118,15],[116,47,118,18,"channelOptions"],[116,61,118,32],[116,62,118,33],[116,104,118,75],[116,105,118,76],[116,111,118,82],[116,115,118,86],[116,119,118,90,"_c"],[116,121,118,92],[116,126,118,97],[116,131,118,102],[116,132,118,103],[116,135,118,106,"_c"],[116,137,118,108],[116,140,118,111,"DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS"],[116,179,118,150],[117,6,119,8],[117,10,119,12],[117,11,119,13,"nextResolutionTimer"],[117,30,119,32],[117,33,119,35,"setTimeout"],[117,43,119,45],[117,44,119,46],[117,50,119,52],[117,51,119,54],[117,52,119,55],[117,54,119,57],[117,55,119,58],[117,56,119,59],[118,6,120,8,"clearTimeout"],[118,18,120,20],[118,19,120,21],[118,23,120,25],[118,24,120,26,"nextResolutionTimer"],[118,43,120,45],[118,44,120,46],[119,4,121,4],[120,4,122,4],[121,0,123,0],[122,0,124,0],[123,0,125,0],[124,4,126,4,"startResolution"],[124,19,126,19,"startResolution"],[124,20,126,19],[124,22,126,22],[125,6,127,8],[125,10,127,12],[125,14,127,16],[125,15,127,17,"ipResult"],[125,23,127,25],[125,28,127,30],[125,32,127,34],[125,34,127,36],[126,8,128,12],[126,12,128,16],[126,13,128,17],[126,17,128,21],[126,18,128,22,"returnedIpResult"],[126,34,128,38],[126,36,128,40],[127,10,129,16,"trace"],[127,15,129,21],[127,16,129,22],[127,50,129,56],[127,53,129,59],[127,54,129,60],[127,55,129,61],[127,57,129,63,"uri_parser_1"],[127,69,129,75],[127,70,129,76,"uriToString"],[127,81,129,87],[127,83,129,89],[127,87,129,93],[127,88,129,94,"target"],[127,94,129,100],[127,95,129,101],[127,96,129,102],[128,10,130,16,"setImmediate"],[128,22,130,28],[128,23,130,29],[128,29,130,35],[129,12,131,20],[129,16,131,24],[129,17,131,25,"listener"],[129,25,131,33],[129,26,131,34,"onSuccessfulResolution"],[129,48,131,56],[129,49,131,57],[129,53,131,61],[129,54,131,62,"ipResult"],[129,62,131,70],[129,64,131,72],[129,68,131,76],[129,70,131,78],[129,74,131,82],[129,76,131,84],[129,80,131,88],[129,82,131,90],[129,83,131,91],[129,84,131,92],[129,85,131,93],[130,10,132,16],[130,11,132,17],[130,12,132,18],[131,10,133,16],[131,14,133,20],[131,15,133,21,"returnedIpResult"],[131,31,133,37],[131,34,133,40],[131,38,133,44],[132,8,134,12],[133,8,135,12],[133,12,135,16],[133,13,135,17,"backoff"],[133,20,135,24],[133,21,135,25,"stop"],[133,25,135,29],[133,26,135,30],[133,27,135,31],[134,8,136,12],[134,12,136,16],[134,13,136,17,"backoff"],[134,20,136,24],[134,21,136,25,"reset"],[134,26,136,30],[134,27,136,31],[134,28,136,32],[135,8,137,12],[135,12,137,16],[135,13,137,17,"stopNextResolutionTimer"],[135,36,137,40],[135,37,137,41],[135,38,137,42],[136,8,138,12],[137,6,139,8],[138,6,140,8],[138,10,140,12],[138,14,140,16],[138,15,140,17,"dnsHostname"],[138,26,140,28],[138,31,140,33],[138,35,140,37],[138,37,140,39],[139,8,141,12,"trace"],[139,13,141,17],[139,14,141,18],[139,44,141,48],[139,47,141,51],[139,48,141,52],[139,49,141,53],[139,51,141,55,"uri_parser_1"],[139,63,141,67],[139,64,141,68,"uriToString"],[139,75,141,79],[139,77,141,81],[139,81,141,85],[139,82,141,86,"target"],[139,88,141,92],[139,89,141,93],[139,90,141,94],[140,8,142,12,"setImmediate"],[140,20,142,24],[140,21,142,25],[140,27,142,31],[141,10,143,16],[141,14,143,20],[141,15,143,21,"listener"],[141,23,143,29],[141,24,143,30,"onError"],[141,31,143,37],[141,32,143,38],[142,12,144,20,"code"],[142,16,144,24],[142,18,144,26,"constants_1"],[142,29,144,37],[142,30,144,38,"Status"],[142,36,144,44],[142,37,144,45,"UNAVAILABLE"],[142,48,144,56],[143,12,145,20,"details"],[143,19,145,27],[143,21,145,29],[143,52,145,60],[143,53,145,61],[143,54,145,62],[143,56,145,64,"uri_parser_1"],[143,68,145,76],[143,69,145,77,"uriToString"],[143,80,145,88],[143,82,145,90],[143,86,145,94],[143,87,145,95,"target"],[143,93,145,101],[143,94,145,102],[143,96,145,104],[144,12,146,20,"metadata"],[144,20,146,28],[144,22,146,30],[144,26,146,34,"metadata_1"],[144,36,146,44],[144,37,146,45,"Metadata"],[144,45,146,53],[144,46,146,54],[145,10,147,16],[145,11,147,17],[145,12,147,18],[146,8,148,12],[146,9,148,13],[146,10,148,14],[147,8,149,12],[147,12,149,16],[147,13,149,17,"stopNextResolutionTimer"],[147,36,149,40],[147,37,149,41],[147,38,149,42],[148,6,150,8],[148,7,150,9],[148,13,151,13],[149,8,152,12],[149,12,152,16],[149,16,152,20],[149,17,152,21,"pendingLookupPromise"],[149,37,152,41],[149,42,152,46],[149,46,152,50],[149,48,152,52],[150,10,153,16],[151,8,154,12],[152,8,155,12,"trace"],[152,13,155,17],[152,14,155,18],[152,40,155,44],[152,43,155,47],[152,47,155,51],[152,48,155,52,"dnsHostname"],[152,59,155,63],[152,60,155,64],[153,8,156,12],[154,0,157,0],[155,0,158,0],[156,0,159,0],[157,0,160,0],[158,0,161,0],[159,8,162,12],[159,12,162,16],[159,13,162,17,"latestLookupResult"],[159,31,162,35],[159,34,162,38],[159,38,162,42],[160,8,163,12],[160,14,163,18,"hostname"],[160,22,163,26],[160,25,163,29],[160,29,163,33],[160,30,163,34,"dnsHostname"],[160,41,163,45],[161,8,164,12],[162,0,165,0],[163,0,166,0],[164,0,167,0],[165,8,168,12],[165,12,168,16],[165,13,168,17,"pendingLookupPromise"],[165,33,168,37],[165,36,168,40,"dnsLookupPromise"],[165,52,168,56],[165,53,168,57,"hostname"],[165,61,168,65],[165,63,168,67],[166,10,168,69,"all"],[166,13,168,72],[166,15,168,74],[167,8,168,79],[167,9,168,80],[167,10,168,81],[168,8,169,12],[168,12,169,16],[168,13,169,17,"pendingLookupPromise"],[168,33,169,37],[168,34,169,38,"then"],[168,38,169,42],[168,39,169,43,"addressList"],[168,50,169,54],[168,54,169,58],[169,10,170,16],[169,14,170,20],[169,18,170,24],[169,19,170,25,"pendingLookupPromise"],[169,39,170,45],[169,44,170,50],[169,48,170,54],[169,50,170,56],[170,12,171,20],[171,10,172,16],[172,10,173,16],[172,14,173,20],[172,15,173,21,"pendingLookupPromise"],[172,35,173,41],[172,38,173,44],[172,42,173,48],[173,10,174,16],[173,14,174,20],[173,15,174,21,"backoff"],[173,22,174,28],[173,23,174,29,"reset"],[173,28,174,34],[173,29,174,35],[173,30,174,36],[174,10,175,16],[174,14,175,20],[174,15,175,21,"backoff"],[174,22,175,28],[174,23,175,29,"stop"],[174,27,175,33],[174,28,175,34],[174,29,175,35],[175,10,176,16],[175,16,176,22,"ip4Addresses"],[175,28,176,34],[175,31,176,37,"addressList"],[175,42,176,48],[175,43,176,49,"filter"],[175,49,176,55],[175,50,176,56,"addr"],[175,54,176,60],[175,58,176,64,"addr"],[175,62,176,68],[175,63,176,69,"family"],[175,69,176,75],[175,74,176,80],[175,75,176,81],[175,76,176,82],[176,10,177,16],[176,16,177,22,"ip6Addresses"],[176,28,177,34],[176,31,177,37,"addressList"],[176,42,177,48],[176,43,177,49,"filter"],[176,49,177,55],[176,50,177,56,"addr"],[176,54,177,60],[176,58,177,64,"addr"],[176,62,177,68],[176,63,177,69,"family"],[176,69,177,75],[176,74,177,80],[176,75,177,81],[176,76,177,82],[177,10,178,16],[177,14,178,20],[177,15,178,21,"latestLookupResult"],[177,33,178,39],[177,36,178,42,"mergeArrays"],[177,47,178,53],[177,48,178,54,"ip6Addresses"],[177,60,178,66],[177,62,178,68,"ip4Addresses"],[177,74,178,80],[177,75,178,81],[177,76,178,82,"map"],[177,79,178,85],[177,80,178,86,"addr"],[177,84,178,90],[177,89,178,95],[178,12,178,97,"host"],[178,16,178,101],[178,18,178,103,"addr"],[178,22,178,107],[178,23,178,108,"address"],[178,30,178,115],[179,12,178,117,"port"],[179,16,178,121],[179,18,178,123],[179,19,178,124],[179,23,178,128],[179,24,178,129,"port"],[180,10,178,134],[180,11,178,135],[180,12,178,136],[180,13,178,137],[181,10,179,16],[181,16,179,22,"allAddressesString"],[181,34,179,40],[181,37,179,43],[181,40,179,46],[181,43,180,20],[181,47,180,24],[181,48,180,25,"latestLookupResult"],[181,66,180,43],[181,67,181,25,"map"],[181,70,181,28],[181,71,181,29,"addr"],[181,75,181,33],[181,79,181,37,"addr"],[181,83,181,41],[181,84,181,42,"host"],[181,88,181,46],[181,91,181,49],[181,94,181,52],[181,97,181,55,"addr"],[181,101,181,59],[181,102,181,60,"port"],[181,106,181,64],[181,107,181,65],[181,108,182,25,"join"],[181,112,182,29],[181,113,182,30],[181,116,182,33],[181,117,182,34],[181,120,183,20],[181,123,183,23],[182,10,184,16,"trace"],[182,15,184,21],[182,16,184,22],[182,48,184,54],[182,51,185,20],[182,52,185,21],[182,53,185,22],[182,55,185,24,"uri_parser_1"],[182,67,185,36],[182,68,185,37,"uriToString"],[182,79,185,48],[182,81,185,50],[182,85,185,54],[182,86,185,55,"target"],[182,92,185,61],[182,93,185,62],[182,96,186,20],[182,100,186,24],[182,103,187,20,"allAddressesString"],[182,121,187,38],[182,122,187,39],[183,10,188,16],[183,14,188,20],[183,18,188,24],[183,19,188,25,"latestLookupResult"],[183,37,188,43],[183,38,188,44,"length"],[183,44,188,50],[183,49,188,55],[183,50,188,56],[183,52,188,58],[184,12,189,20],[184,16,189,24],[184,17,189,25,"listener"],[184,25,189,33],[184,26,189,34,"onError"],[184,33,189,41],[184,34,189,42],[184,38,189,46],[184,39,189,47,"defaultResolutionError"],[184,61,189,69],[184,62,189,70],[185,12,190,20],[186,10,191,16],[187,10,192,16],[188,0,193,0],[189,0,194,0],[190,0,195,0],[191,10,196,16],[191,14,196,20],[191,15,196,21,"listener"],[191,23,196,29],[191,24,196,30,"onSuccessfulResolution"],[191,46,196,52],[191,47,196,53],[191,51,196,57],[191,52,196,58,"latestLookupResult"],[191,70,196,76],[191,72,196,78],[191,76,196,82],[191,77,196,83,"latestServiceConfig"],[191,96,196,102],[191,98,196,104],[191,102,196,108],[191,103,196,109,"latestServiceConfigError"],[191,127,196,133],[191,129,196,135],[191,133,196,139],[191,135,196,141],[191,136,196,142],[191,137,196,143],[191,138,196,144],[192,8,197,12],[192,9,197,13],[192,11,197,15,"err"],[192,14,197,18],[192,18,197,22],[193,10,198,16],[193,14,198,20],[193,18,198,24],[193,19,198,25,"pendingLookupPromise"],[193,39,198,45],[193,44,198,50],[193,48,198,54],[193,50,198,56],[194,12,199,20],[195,10,200,16],[196,10,201,16,"trace"],[196,15,201,21],[196,16,201,22],[196,46,201,52],[196,49,202,20],[196,50,202,21],[196,51,202,22],[196,53,202,24,"uri_parser_1"],[196,65,202,36],[196,66,202,37,"uriToString"],[196,77,202,48],[196,79,202,50],[196,83,202,54],[196,84,202,55,"target"],[196,90,202,61],[196,91,202,62],[196,94,203,20],[196,98,203,24],[196,101,204,20,"err"],[196,104,204,23],[196,105,204,24,"message"],[196,112,204,31],[196,113,204,32],[197,10,205,16],[197,14,205,20],[197,15,205,21,"pendingLookupPromise"],[197,35,205,41],[197,38,205,44],[197,42,205,48],[198,10,206,16],[198,14,206,20],[198,15,206,21,"stopNextResolutionTimer"],[198,38,206,44],[198,39,206,45],[198,40,206,46],[199,10,207,16],[199,14,207,20],[199,15,207,21,"listener"],[199,23,207,29],[199,24,207,30,"onError"],[199,31,207,37],[199,32,207,38],[199,36,207,42],[199,37,207,43,"defaultResolutionError"],[199,59,207,65],[199,60,207,66],[200,8,208,12],[200,9,208,13],[200,10,208,14],[201,8,209,12],[202,0,210,0],[203,8,211,12],[203,12,211,16],[203,16,211,20],[203,17,211,21,"isServiceConfigEnabled"],[203,39,211,43],[203,43,211,47],[203,47,211,51],[203,48,211,52,"pendingTxtPromise"],[203,65,211,69],[203,70,211,74],[203,74,211,78],[203,76,211,80],[204,10,212,16],[205,0,213,0],[206,0,214,0],[207,10,215,16],[207,14,215,20],[207,15,215,21,"pendingTxtPromise"],[207,32,215,38],[207,35,215,41,"resolveTxtPromise"],[207,52,215,58],[207,53,215,59,"hostname"],[207,61,215,67],[207,62,215,68],[208,10,216,16],[208,14,216,20],[208,15,216,21,"pendingTxtPromise"],[208,32,216,38],[208,33,216,39,"then"],[208,37,216,43],[208,38,216,44,"txtRecord"],[208,47,216,53],[208,51,216,57],[209,12,217,20],[209,16,217,24],[209,20,217,28],[209,21,217,29,"pendingTxtPromise"],[209,38,217,46],[209,43,217,51],[209,47,217,55],[209,49,217,57],[210,14,218,24],[211,12,219,20],[212,12,220,20],[212,16,220,24],[212,17,220,25,"pendingTxtPromise"],[212,34,220,42],[212,37,220,45],[212,41,220,49],[213,12,221,20],[213,16,221,24],[214,14,222,24],[214,18,222,28],[214,19,222,29,"latestServiceConfig"],[214,38,222,48],[214,41,222,51],[214,42,222,52],[214,43,222,53],[214,45,222,55,"service_config_1"],[214,61,222,71],[214,62,222,72,"extractAndSelectServiceConfig"],[214,91,222,101],[214,93,222,103,"txtRecord"],[214,102,222,112],[214,104,222,114],[214,108,222,118],[214,109,222,119,"percentage"],[214,119,222,129],[214,120,222,130],[215,12,223,20],[215,13,223,21],[215,14,224,20],[215,21,224,27,"err"],[215,24,224,30],[215,26,224,32],[216,14,225,24],[216,18,225,28],[216,19,225,29,"latestServiceConfigError"],[216,43,225,53],[216,46,225,56],[217,16,226,28,"code"],[217,20,226,32],[217,22,226,34,"constants_1"],[217,33,226,45],[217,34,226,46,"Status"],[217,40,226,52],[217,41,226,53,"UNAVAILABLE"],[217,52,226,64],[218,16,227,28,"details"],[218,23,227,35],[218,25,227,37],[218,69,227,81,"err"],[218,72,227,84],[218,73,227,85,"message"],[218,80,227,92],[218,82,227,94],[219,16,228,28,"metadata"],[219,24,228,36],[219,26,228,38],[219,30,228,42,"metadata_1"],[219,40,228,52],[219,41,228,53,"Metadata"],[219,49,228,61],[219,50,228,62],[220,14,229,24],[220,15,229,25],[221,12,230,20],[222,12,231,20],[222,16,231,24],[222,20,231,28],[222,21,231,29,"latestLookupResult"],[222,39,231,47],[222,44,231,52],[222,48,231,56],[222,50,231,58],[223,14,232,24],[224,0,233,0],[225,0,234,0],[226,0,235,0],[227,14,236,24],[227,18,236,28],[227,19,236,29,"listener"],[227,27,236,37],[227,28,236,38,"onSuccessfulResolution"],[227,50,236,60],[227,51,236,61],[227,55,236,65],[227,56,236,66,"latestLookupResult"],[227,74,236,84],[227,76,236,86],[227,80,236,90],[227,81,236,91,"latestServiceConfig"],[227,100,236,110],[227,102,236,112],[227,106,236,116],[227,107,236,117,"latestServiceConfigError"],[227,131,236,141],[227,133,236,143],[227,137,236,147],[227,139,236,149],[227,140,236,150],[227,141,236,151],[227,142,236,152],[228,12,237,20],[229,10,238,16],[229,11,238,17],[229,13,238,19,"err"],[229,16,238,22],[229,20,238,26],[230,12,239,20],[231,0,240,0],[232,0,241,0],[233,0,242,0],[234,0,243,0],[235,0,244,0],[236,0,245,0],[237,10,239,20],[237,11,246,17],[237,12,246,18],[238,8,247,12],[239,6,248,8],[240,4,249,4],[241,4,250,4,"startNextResolutionTimer"],[241,28,250,28,"startNextResolutionTimer"],[241,29,250,28],[241,31,250,31],[242,6,251,8],[242,10,251,12,"_a"],[242,12,251,14],[242,14,251,16,"_b"],[242,16,251,18],[243,6,252,8,"clearTimeout"],[243,18,252,20],[243,19,252,21],[243,23,252,25],[243,24,252,26,"nextResolutionTimer"],[243,43,252,45],[243,44,252,46],[244,6,253,8],[244,10,253,12],[244,11,253,13,"nextResolutionTimer"],[244,30,253,32],[244,33,253,35],[244,34,253,36,"_b"],[244,36,253,38],[244,39,253,41],[244,40,253,42,"_a"],[244,42,253,44],[244,45,253,47,"setTimeout"],[244,55,253,57],[244,56,253,58],[244,62,253,64],[245,8,254,12],[245,12,254,16],[245,13,254,17,"stopNextResolutionTimer"],[245,36,254,40],[245,37,254,41],[245,38,254,42],[246,8,255,12],[246,12,255,16],[246,16,255,20],[246,17,255,21,"continueResolving"],[246,34,255,38],[246,36,255,40],[247,10,256,16],[247,14,256,20],[247,15,256,21,"startResolutionWithBackoff"],[247,41,256,47],[247,42,256,48],[247,43,256,49],[248,8,257,12],[249,6,258,8],[249,7,258,9],[249,9,258,11],[249,13,258,15],[249,14,258,16,"minTimeBetweenResolutionsMs"],[249,41,258,43],[249,42,258,44],[249,44,258,46,"unref"],[249,49,258,51],[249,55,258,57],[249,59,258,61],[249,63,258,65,"_b"],[249,65,258,67],[249,70,258,72],[249,75,258,77],[249,76,258,78],[249,79,258,81],[249,84,258,86],[249,85,258,87],[249,88,258,90,"_b"],[249,90,258,92],[249,91,258,93,"call"],[249,95,258,97],[249,96,258,98,"_a"],[249,98,258,100],[249,99,258,101],[250,6,259,8],[250,10,259,12],[250,11,259,13,"isNextResolutionTimerRunning"],[250,39,259,41],[250,42,259,44],[250,46,259,48],[251,4,260,4],[252,4,261,4,"stopNextResolutionTimer"],[252,27,261,27,"stopNextResolutionTimer"],[252,28,261,27],[252,30,261,30],[253,6,262,8,"clearTimeout"],[253,18,262,20],[253,19,262,21],[253,23,262,25],[253,24,262,26,"nextResolutionTimer"],[253,43,262,45],[253,44,262,46],[254,6,263,8],[254,10,263,12],[254,11,263,13,"isNextResolutionTimerRunning"],[254,39,263,41],[254,42,263,44],[254,47,263,49],[255,4,264,4],[256,4,265,4,"startResolutionWithBackoff"],[256,30,265,30,"startResolutionWithBackoff"],[256,31,265,30],[256,33,265,33],[257,6,266,8],[257,10,266,12],[257,14,266,16],[257,15,266,17,"pendingLookupPromise"],[257,35,266,37],[257,40,266,42],[257,44,266,46],[257,46,266,48],[258,8,267,12],[258,12,267,16],[258,13,267,17,"continueResolving"],[258,30,267,34],[258,33,267,37],[258,38,267,42],[259,8,268,12],[259,12,268,16],[259,13,268,17,"backoff"],[259,20,268,24],[259,21,268,25,"runOnce"],[259,28,268,32],[259,29,268,33],[259,30,268,34],[260,8,269,12],[260,12,269,16],[260,13,269,17,"startNextResolutionTimer"],[260,37,269,41],[260,38,269,42],[260,39,269,43],[261,8,270,12],[261,12,270,16],[261,13,270,17,"startResolution"],[261,28,270,32],[261,29,270,33],[261,30,270,34],[262,6,271,8],[263,4,272,4],[264,4,273,4,"updateResolution"],[264,20,273,20,"updateResolution"],[264,21,273,20],[264,23,273,23],[265,6,274,8],[266,0,275,0],[267,0,276,0],[268,0,277,0],[269,6,278,8],[269,10,278,12],[269,14,278,16],[269,15,278,17,"pendingLookupPromise"],[269,35,278,37],[269,40,278,42],[269,44,278,46],[269,46,278,48],[270,8,279,12],[270,12,279,16],[270,16,279,20],[270,17,279,21,"isNextResolutionTimerRunning"],[270,45,279,49],[270,49,279,53],[270,53,279,57],[270,54,279,58,"backoff"],[270,61,279,65],[270,62,279,66,"isRunning"],[270,71,279,75],[270,72,279,76],[270,73,279,77],[270,75,279,79],[271,10,280,16],[271,14,280,20],[271,18,280,24],[271,19,280,25,"isNextResolutionTimerRunning"],[271,47,280,53],[271,49,280,55],[272,12,281,20,"trace"],[272,17,281,25],[272,18,281,26],[272,90,281,98],[272,91,281,99],[273,10,282,16],[273,11,282,17],[273,17,283,21],[274,12,284,20,"trace"],[274,17,284,25],[274,18,284,26],[274,69,284,77],[274,72,284,80],[274,76,284,84],[274,77,284,85,"backoff"],[274,84,284,92],[274,85,284,93,"getEndTime"],[274,95,284,103],[274,96,284,104],[274,97,284,105],[274,98,284,106,"toISOString"],[274,109,284,117],[274,110,284,118],[274,111,284,119],[274,112,284,120],[275,10,285,16],[276,10,286,16],[276,14,286,20],[276,15,286,21,"continueResolving"],[276,32,286,38],[276,35,286,41],[276,39,286,45],[277,8,287,12],[277,9,287,13],[277,15,288,17],[278,10,289,16],[278,14,289,20],[278,15,289,21,"startResolutionWithBackoff"],[278,41,289,47],[278,42,289,48],[278,43,289,49],[279,8,290,12],[280,6,291,8],[281,4,292,4],[282,4,293,4],[283,0,294,0],[284,0,295,0],[285,0,296,0],[286,0,297,0],[287,4,298,4,"destroy"],[287,11,298,11,"destroy"],[287,12,298,11],[287,14,298,14],[288,6,299,8],[288,10,299,12],[288,11,299,13,"continueResolving"],[288,28,299,30],[288,31,299,33],[288,36,299,38],[289,6,300,8],[289,10,300,12],[289,11,300,13,"backoff"],[289,18,300,20],[289,19,300,21,"reset"],[289,24,300,26],[289,25,300,27],[289,26,300,28],[290,6,301,8],[290,10,301,12],[290,11,301,13,"backoff"],[290,18,301,20],[290,19,301,21,"stop"],[290,23,301,25],[290,24,301,26],[290,25,301,27],[291,6,302,8],[291,10,302,12],[291,11,302,13,"stopNextResolutionTimer"],[291,34,302,36],[291,35,302,37],[291,36,302,38],[292,6,303,8],[292,10,303,12],[292,11,303,13,"pendingLookupPromise"],[292,31,303,33],[292,34,303,36],[292,38,303,40],[293,6,304,8],[293,10,304,12],[293,11,304,13,"pendingTxtPromise"],[293,28,304,30],[293,31,304,33],[293,35,304,37],[294,6,305,8],[294,10,305,12],[294,11,305,13,"latestLookupResult"],[294,29,305,31],[294,32,305,34],[294,36,305,38],[295,6,306,8],[295,10,306,12],[295,11,306,13,"latestServiceConfig"],[295,30,306,32],[295,33,306,35],[295,37,306,39],[296,6,307,8],[296,10,307,12],[296,11,307,13,"latestServiceConfigError"],[296,35,307,37],[296,38,307,40],[296,42,307,44],[297,6,308,8],[297,10,308,12],[297,11,308,13,"returnedIpResult"],[297,27,308,29],[297,30,308,32],[297,35,308,37],[298,4,309,4],[299,4,310,4],[300,0,311,0],[301,0,312,0],[302,0,313,0],[303,0,314,0],[304,4,315,4],[304,11,315,11,"getDefaultAuthority"],[304,30,315,30,"getDefaultAuthority"],[304,31,315,31,"target"],[304,37,315,37],[304,39,315,39],[305,6,316,8],[305,13,316,15,"target"],[305,19,316,21],[305,20,316,22,"path"],[305,24,316,26],[306,4,317,4],[307,2,318,0],[308,2,319,0],[309,0,320,0],[310,0,321,0],[311,0,322,0],[312,2,323,0],[312,11,323,9,"setup"],[312,16,323,14,"setup"],[312,17,323,14],[312,19,323,17],[313,4,324,4],[313,5,324,5],[313,6,324,6],[313,8,324,8,"resolver_1"],[313,18,324,18],[313,19,324,19,"registerResolver"],[313,35,324,35],[313,37,324,37],[313,42,324,42],[313,44,324,44,"DnsResolver"],[313,55,324,55],[313,56,324,56],[314,4,325,4],[314,5,325,5],[314,6,325,6],[314,8,325,8,"resolver_1"],[314,18,325,18],[314,19,325,19,"registerDefaultScheme"],[314,40,325,40],[314,42,325,42],[314,47,325,47],[314,48,325,48],[315,2,326,0],[316,2,327,0,"exports"],[316,9,327,7],[316,10,327,8,"setup"],[316,15,327,13],[316,18,327,16,"setup"],[316,23,327,21],[317,0,327,22],[317,3]],"functionMap":{"names":["<global>","trace","mergeArrays","arrays.map$argument_0","DnsResolver","DnsResolver#constructor","backoff_timeout_1.BackoffTimeout$argument_0","setTimeout$argument_0","DnsResolver#startResolution","setImmediate$argument_0","pendingLookupPromise.then$argument_0","addressList.filter$argument_0","mergeArrays.map$argument_0","latestLookupResult.map$argument_0","pendingLookupPromise.then$argument_1","pendingTxtPromise.then$argument_0","pendingTxtPromise.then$argument_1","DnsResolver#startNextResolutionTimer","DnsResolver#stopNextResolutionTimer","DnsResolver#startResolutionWithBackoff","DnsResolver#updateResolution","DnsResolver#destroy","DnsResolver.getDefaultAuthority","setup"],"mappings":"AAA;AC8B;CDE;AEY;wCCG,qBD;CFQ;AII;ICC;4DCkD;SDI;8CEI,SF;KDE;IIK;6BCI;iBDE;yBCU;aDM;2CEqB;wDCO,yBD;wDCC,yBD;sFEC,kDF;6BGG,mCH;aFgB,EM;aNW;4COQ;iBPsB,EQ;iBRQ;KJG;IaC;0DVG;SUK;KbE;IcC;KdG;IeC;KfO;IgBC;KhBmB;IiBM;KjBW;IkBM;KlBE;CJC;AuBK;CvBG"}},"type":"js/module"}]}