{"dependencies":[{"name":"@firebase/util","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":42,"index":42}}],"key":"BkBYK9w6fHruAfQL7S4qWsYds2s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Provider = exports.ComponentContainer = exports.Component = void 0;\n  var _util = require(_dependencyMap[0], \"@firebase/util\");\n  /**\n   * Component for service name T, e.g. `auth`, `auth-internal`\n   */\n  class Component {\n    /**\n     *\n     * @param name The public service name, e.g. app, auth, firestore, database\n     * @param instanceFactory Service factory responsible for creating the public interface\n     * @param type whether the service provided by the component is public or private\n     */\n    constructor(name, instanceFactory, type) {\n      this.name = name;\n      this.instanceFactory = instanceFactory;\n      this.type = type;\n      this.multipleInstances = false;\n      /**\n       * Properties to be added to the service namespace\n       */\n      this.serviceProps = {};\n      this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\n      this.onInstanceCreated = null;\n    }\n    setInstantiationMode(mode) {\n      this.instantiationMode = mode;\n      return this;\n    }\n    setMultipleInstances(multipleInstances) {\n      this.multipleInstances = multipleInstances;\n      return this;\n    }\n    setServiceProps(props) {\n      this.serviceProps = props;\n      return this;\n    }\n    setInstanceCreatedCallback(callback) {\n      this.onInstanceCreated = callback;\n      return this;\n    }\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports.Component = Component;\n  const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n   * NameServiceMapping[T] is an alias for the type of the instance\n   */\n  class Provider {\n    constructor(name, container) {\n      this.name = name;\n      this.container = container;\n      this.component = null;\n      this.instances = new Map();\n      this.instancesDeferred = new Map();\n      this.instancesOptions = new Map();\n      this.onInitCallbacks = new Map();\n    }\n    /**\n     * @param identifier A provider can provide multiple instances of a service\n     * if this.component.multipleInstances is true.\n     */\n    get(identifier) {\n      // if multipleInstances is not supported, use the default name\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      if (!this.instancesDeferred.has(normalizedIdentifier)) {\n        const deferred = new _util.Deferred();\n        this.instancesDeferred.set(normalizedIdentifier, deferred);\n        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n          // initialize the service if it can be auto-initialized\n          try {\n            const instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n            if (instance) {\n              deferred.resolve(instance);\n            }\n          } catch (e) {\n            // when the instance factory throws an exception during get(), it should not cause\n            // a fatal error. We just return the unresolved promise in this case.\n          }\n        }\n      }\n      return this.instancesDeferred.get(normalizedIdentifier).promise;\n    }\n    getImmediate(options) {\n      // if multipleInstances is not supported, use the default name\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(options?.identifier);\n      const optional = options?.optional ?? false;\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        try {\n          return this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n        } catch (e) {\n          if (optional) {\n            return null;\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n        if (optional) {\n          return null;\n        } else {\n          throw Error(`Service ${this.name} is not available`);\n        }\n      }\n    }\n    getComponent() {\n      return this.component;\n    }\n    setComponent(component) {\n      if (component.name !== this.name) {\n        throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\n      }\n      if (this.component) {\n        throw Error(`Component for ${this.name} has already been provided`);\n      }\n      this.component = component;\n      // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n      if (!this.shouldAutoInitialize()) {\n        return;\n      }\n      // if the service is eager, initialize the default instance\n      if (isComponentEager(component)) {\n        try {\n          this.getOrInitializeService({\n            instanceIdentifier: DEFAULT_ENTRY_NAME\n          });\n        } catch (e) {\n          // when the instance factory for an eager Component throws an exception during the eager\n          // initialization, it should not cause a fatal error.\n          // TODO: Investigate if we need to make it configurable, because some component may want to cause\n          // a fatal error in this case?\n        }\n      }\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {\n          // when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    }\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\n      this.instancesDeferred.delete(identifier);\n      this.instancesOptions.delete(identifier);\n      this.instances.delete(identifier);\n    }\n    // app.delete() will call this method on every provider to delete the services\n    // TODO: should we mark the provider as deleted?\n    async delete() {\n      const services = Array.from(this.instances.values());\n      await Promise.all([...services.filter(service => 'INTERNAL' in service) // legacy services\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .map(service => service.INTERNAL.delete()), ...services.filter(service => '_delete' in service) // modularized services\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .map(service => service._delete())]);\n    }\n    isComponentSet() {\n      return this.component != null;\n    }\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\n      return this.instances.has(identifier);\n    }\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\n      return this.instancesOptions.get(identifier) || {};\n    }\n    initialize(opts = {}) {\n      const {\n        options = {}\n      } = opts;\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n      if (this.isInitialized(normalizedIdentifier)) {\n        throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\n      }\n      if (!this.isComponentSet()) {\n        throw Error(`Component ${this.name} has not been registered yet`);\n      }\n      const instance = this.getOrInitializeService({\n        instanceIdentifier: normalizedIdentifier,\n        options\n      });\n      // resolve any pending promise waiting for the service instance\n      for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n        const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n      return instance;\n    }\n    /**\n     *\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n     *\n     * @param identifier An optional instance identifier\n     * @returns a function to unregister the callback\n     */\n    onInit(callback, identifier) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      const existingCallbacks = this.onInitCallbacks.get(normalizedIdentifier) ?? new Set();\n      existingCallbacks.add(callback);\n      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n      const existingInstance = this.instances.get(normalizedIdentifier);\n      if (existingInstance) {\n        callback(existingInstance, normalizedIdentifier);\n      }\n      return () => {\n        existingCallbacks.delete(callback);\n      };\n    }\n    /**\n     * Invoke onInit callbacks synchronously\n     * @param instance the service instance`\n     */\n    invokeOnInitCallbacks(instance, identifier) {\n      const callbacks = this.onInitCallbacks.get(identifier);\n      if (!callbacks) {\n        return;\n      }\n      for (const callback of callbacks) {\n        try {\n          callback(instance, identifier);\n        } catch {\n          // ignore errors in the onInit callback\n        }\n      }\n    }\n    getOrInitializeService({\n      instanceIdentifier,\n      options = {}\n    }) {\n      let instance = this.instances.get(instanceIdentifier);\n      if (!instance && this.component) {\n        instance = this.component.instanceFactory(this.container, {\n          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n          options\n        });\n        this.instances.set(instanceIdentifier, instance);\n        this.instancesOptions.set(instanceIdentifier, options);\n        /**\n         * Invoke onInit listeners.\n         * Note this.component.onInstanceCreated is different, which is used by the component creator,\n         * while onInit listeners are registered by consumers of the provider.\n         */\n        this.invokeOnInitCallbacks(instance, instanceIdentifier);\n        /**\n         * Order is important\n         * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n         * makes `isInitialized()` return true.\n         */\n        if (this.component.onInstanceCreated) {\n          try {\n            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n          } catch {\n            // ignore errors in the onInstanceCreatedCallback\n          }\n        }\n      }\n      return instance || null;\n    }\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\n      if (this.component) {\n        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n      } else {\n        return identifier; // assume multiple instances are supported before the component is provided.\n      }\n    }\n    shouldAutoInitialize() {\n      return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */;\n    }\n  }\n  // undefined should be passed to the service factory for the default instance\n  exports.Provider = Provider;\n  function normalizeIdentifierForFactory(identifier) {\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n  }\n  function isComponentEager(component) {\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\n  }\n\n  /**\n   * @license\n   * Copyright 2019 Google LLC\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *   http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  /**\n   * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n   */\n  class ComponentContainer {\n    constructor(name) {\n      this.name = name;\n      this.providers = new Map();\n    }\n    /**\n     *\n     * @param component Component being added\n     * @param overwrite When a component with the same name has already been registered,\n     * if overwrite is true: overwrite the existing component with the new component and create a new\n     * provider with the new component. It can be useful in tests where you want to use different mocks\n     * for different tests.\n     * if overwrite is false: throw an exception\n     */\n    addComponent(component) {\n      const provider = this.getProvider(component.name);\n      if (provider.isComponentSet()) {\n        throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\n      }\n      provider.setComponent(component);\n    }\n    addOrOverwriteComponent(component) {\n      const provider = this.getProvider(component.name);\n      if (provider.isComponentSet()) {\n        // delete the existing provider from the container, so we can register the new component\n        this.providers.delete(component.name);\n      }\n      this.addComponent(component);\n    }\n    /**\n     * getProvider provides a type safe interface where it can only be called with a field name\n     * present in NameServiceMapping interface.\n     *\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\n     * themselves.\n     */\n    getProvider(name) {\n      if (this.providers.has(name)) {\n        return this.providers.get(name);\n      }\n      // create a Provider for a service that hasn't registered with Firebase\n      const provider = new Provider(name, this);\n      this.providers.set(name, provider);\n      return provider;\n    }\n    getProviders() {\n      return Array.from(this.providers.values());\n    }\n  }\n  exports.ComponentContainer = ComponentContainer;\n});","lineCount":401,"map":[[6,2,1,0],[6,6,1,0,"_util"],[6,11,1,0],[6,14,1,0,"require"],[6,21,1,0],[6,22,1,0,"_dependencyMap"],[6,36,1,0],[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,2,6,0],[10,8,6,6,"Component"],[10,17,6,15],[10,18,6,16],[11,4,7,4],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,4,13,4,"constructor"],[17,15,13,15,"constructor"],[17,16,13,16,"name"],[17,20,13,20],[17,22,13,22,"instanceFactory"],[17,37,13,37],[17,39,13,39,"type"],[17,43,13,43],[17,45,13,45],[18,6,14,8],[18,10,14,12],[18,11,14,13,"name"],[18,15,14,17],[18,18,14,20,"name"],[18,22,14,24],[19,6,15,8],[19,10,15,12],[19,11,15,13,"instanceFactory"],[19,26,15,28],[19,29,15,31,"instanceFactory"],[19,44,15,46],[20,6,16,8],[20,10,16,12],[20,11,16,13,"type"],[20,15,16,17],[20,18,16,20,"type"],[20,22,16,24],[21,6,17,8],[21,10,17,12],[21,11,17,13,"multipleInstances"],[21,28,17,30],[21,31,17,33],[21,36,17,38],[22,6,18,8],[23,0,19,0],[24,0,20,0],[25,6,21,8],[25,10,21,12],[25,11,21,13,"serviceProps"],[25,23,21,25],[25,26,21,28],[25,27,21,29],[25,28,21,30],[26,6,22,8],[26,10,22,12],[26,11,22,13,"instantiationMode"],[26,28,22,30],[26,31,22,33],[26,37,22,39],[26,38,22,40],[27,6,23,8],[27,10,23,12],[27,11,23,13,"onInstanceCreated"],[27,28,23,30],[27,31,23,33],[27,35,23,37],[28,4,24,4],[29,4,25,4,"setInstantiationMode"],[29,24,25,24,"setInstantiationMode"],[29,25,25,25,"mode"],[29,29,25,29],[29,31,25,31],[30,6,26,8],[30,10,26,12],[30,11,26,13,"instantiationMode"],[30,28,26,30],[30,31,26,33,"mode"],[30,35,26,37],[31,6,27,8],[31,13,27,15],[31,17,27,19],[32,4,28,4],[33,4,29,4,"setMultipleInstances"],[33,24,29,24,"setMultipleInstances"],[33,25,29,25,"multipleInstances"],[33,42,29,42],[33,44,29,44],[34,6,30,8],[34,10,30,12],[34,11,30,13,"multipleInstances"],[34,28,30,30],[34,31,30,33,"multipleInstances"],[34,48,30,50],[35,6,31,8],[35,13,31,15],[35,17,31,19],[36,4,32,4],[37,4,33,4,"setServiceProps"],[37,19,33,19,"setServiceProps"],[37,20,33,20,"props"],[37,25,33,25],[37,27,33,27],[38,6,34,8],[38,10,34,12],[38,11,34,13,"serviceProps"],[38,23,34,25],[38,26,34,28,"props"],[38,31,34,33],[39,6,35,8],[39,13,35,15],[39,17,35,19],[40,4,36,4],[41,4,37,4,"setInstanceCreatedCallback"],[41,30,37,30,"setInstanceCreatedCallback"],[41,31,37,31,"callback"],[41,39,37,39],[41,41,37,41],[42,6,38,8],[42,10,38,12],[42,11,38,13,"onInstanceCreated"],[42,28,38,30],[42,31,38,33,"callback"],[42,39,38,41],[43,6,39,8],[43,13,39,15],[43,17,39,19],[44,4,40,4],[45,2,41,0],[47,2,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,0,52,0],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[62,0,58,0],[63,2,43,0,"exports"],[63,9,43,0],[63,10,43,0,"Component"],[63,19,43,0],[63,22,43,0,"Component"],[63,31,43,0],[64,2,59,0],[64,8,59,6,"DEFAULT_ENTRY_NAME"],[64,26,59,24],[64,29,59,27],[64,40,59,38],[66,2,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,0,70,0],[76,0,71,0],[77,0,72,0],[78,0,73,0],[79,0,74,0],[80,0,75,0],[81,0,76,0],[82,2,77,0],[83,0,78,0],[84,0,79,0],[85,0,80,0],[86,2,81,0],[86,8,81,6,"Provider"],[86,16,81,14],[86,17,81,15],[87,4,82,4,"constructor"],[87,15,82,15,"constructor"],[87,16,82,16,"name"],[87,20,82,20],[87,22,82,22,"container"],[87,31,82,31],[87,33,82,33],[88,6,83,8],[88,10,83,12],[88,11,83,13,"name"],[88,15,83,17],[88,18,83,20,"name"],[88,22,83,24],[89,6,84,8],[89,10,84,12],[89,11,84,13,"container"],[89,20,84,22],[89,23,84,25,"container"],[89,32,84,34],[90,6,85,8],[90,10,85,12],[90,11,85,13,"component"],[90,20,85,22],[90,23,85,25],[90,27,85,29],[91,6,86,8],[91,10,86,12],[91,11,86,13,"instances"],[91,20,86,22],[91,23,86,25],[91,27,86,29,"Map"],[91,30,86,32],[91,31,86,33],[91,32,86,34],[92,6,87,8],[92,10,87,12],[92,11,87,13,"instancesDeferred"],[92,28,87,30],[92,31,87,33],[92,35,87,37,"Map"],[92,38,87,40],[92,39,87,41],[92,40,87,42],[93,6,88,8],[93,10,88,12],[93,11,88,13,"instancesOptions"],[93,27,88,29],[93,30,88,32],[93,34,88,36,"Map"],[93,37,88,39],[93,38,88,40],[93,39,88,41],[94,6,89,8],[94,10,89,12],[94,11,89,13,"onInitCallbacks"],[94,26,89,28],[94,29,89,31],[94,33,89,35,"Map"],[94,36,89,38],[94,37,89,39],[94,38,89,40],[95,4,90,4],[96,4,91,4],[97,0,92,0],[98,0,93,0],[99,0,94,0],[100,4,95,4,"get"],[100,7,95,7,"get"],[100,8,95,8,"identifier"],[100,18,95,18],[100,20,95,20],[101,6,96,8],[102,6,97,8],[102,12,97,14,"normalizedIdentifier"],[102,32,97,34],[102,35,97,37],[102,39,97,41],[102,40,97,42,"normalizeInstanceIdentifier"],[102,67,97,69],[102,68,97,70,"identifier"],[102,78,97,80],[102,79,97,81],[103,6,98,8],[103,10,98,12],[103,11,98,13],[103,15,98,17],[103,16,98,18,"instancesDeferred"],[103,33,98,35],[103,34,98,36,"has"],[103,37,98,39],[103,38,98,40,"normalizedIdentifier"],[103,58,98,60],[103,59,98,61],[103,61,98,63],[104,8,99,12],[104,14,99,18,"deferred"],[104,22,99,26],[104,25,99,29],[104,29,99,33,"Deferred"],[104,43,99,41],[104,44,99,42],[104,45,99,43],[105,8,100,12],[105,12,100,16],[105,13,100,17,"instancesDeferred"],[105,30,100,34],[105,31,100,35,"set"],[105,34,100,38],[105,35,100,39,"normalizedIdentifier"],[105,55,100,59],[105,57,100,61,"deferred"],[105,65,100,69],[105,66,100,70],[106,8,101,12],[106,12,101,16],[106,16,101,20],[106,17,101,21,"isInitialized"],[106,30,101,34],[106,31,101,35,"normalizedIdentifier"],[106,51,101,55],[106,52,101,56],[106,56,102,16],[106,60,102,20],[106,61,102,21,"shouldAutoInitialize"],[106,81,102,41],[106,82,102,42],[106,83,102,43],[106,85,102,45],[107,10,103,16],[108,10,104,16],[108,14,104,20],[109,12,105,20],[109,18,105,26,"instance"],[109,26,105,34],[109,29,105,37],[109,33,105,41],[109,34,105,42,"getOrInitializeService"],[109,56,105,64],[109,57,105,65],[110,14,106,24,"instanceIdentifier"],[110,32,106,42],[110,34,106,44,"normalizedIdentifier"],[111,12,107,20],[111,13,107,21],[111,14,107,22],[112,12,108,20],[112,16,108,24,"instance"],[112,24,108,32],[112,26,108,34],[113,14,109,24,"deferred"],[113,22,109,32],[113,23,109,33,"resolve"],[113,30,109,40],[113,31,109,41,"instance"],[113,39,109,49],[113,40,109,50],[114,12,110,20],[115,10,111,16],[115,11,111,17],[115,12,112,16],[115,19,112,23,"e"],[115,20,112,24],[115,22,112,26],[116,12,113,20],[117,12,114,20],[118,10,114,20],[119,8,116,12],[120,6,117,8],[121,6,118,8],[121,13,118,15],[121,17,118,19],[121,18,118,20,"instancesDeferred"],[121,35,118,37],[121,36,118,38,"get"],[121,39,118,41],[121,40,118,42,"normalizedIdentifier"],[121,60,118,62],[121,61,118,63],[121,62,118,64,"promise"],[121,69,118,71],[122,4,119,4],[123,4,120,4,"getImmediate"],[123,16,120,16,"getImmediate"],[123,17,120,17,"options"],[123,24,120,24],[123,26,120,26],[124,6,121,8],[125,6,122,8],[125,12,122,14,"normalizedIdentifier"],[125,32,122,34],[125,35,122,37],[125,39,122,41],[125,40,122,42,"normalizeInstanceIdentifier"],[125,67,122,69],[125,68,122,70,"options"],[125,75,122,77],[125,77,122,79,"identifier"],[125,87,122,89],[125,88,122,90],[126,6,123,8],[126,12,123,14,"optional"],[126,20,123,22],[126,23,123,25,"options"],[126,30,123,32],[126,32,123,34,"optional"],[126,40,123,42],[126,44,123,46],[126,49,123,51],[127,6,124,8],[127,10,124,12],[127,14,124,16],[127,15,124,17,"isInitialized"],[127,28,124,30],[127,29,124,31,"normalizedIdentifier"],[127,49,124,51],[127,50,124,52],[127,54,125,12],[127,58,125,16],[127,59,125,17,"shouldAutoInitialize"],[127,79,125,37],[127,80,125,38],[127,81,125,39],[127,83,125,41],[128,8,126,12],[128,12,126,16],[129,10,127,16],[129,17,127,23],[129,21,127,27],[129,22,127,28,"getOrInitializeService"],[129,44,127,50],[129,45,127,51],[130,12,128,20,"instanceIdentifier"],[130,30,128,38],[130,32,128,40,"normalizedIdentifier"],[131,10,129,16],[131,11,129,17],[131,12,129,18],[132,8,130,12],[132,9,130,13],[132,10,131,12],[132,17,131,19,"e"],[132,18,131,20],[132,20,131,22],[133,10,132,16],[133,14,132,20,"optional"],[133,22,132,28],[133,24,132,30],[134,12,133,20],[134,19,133,27],[134,23,133,31],[135,10,134,16],[135,11,134,17],[135,17,135,21],[136,12,136,20],[136,18,136,26,"e"],[136,19,136,27],[137,10,137,16],[138,8,138,12],[139,6,139,8],[139,7,139,9],[139,13,140,13],[140,8,141,12],[141,8,142,12],[141,12,142,16,"optional"],[141,20,142,24],[141,22,142,26],[142,10,143,16],[142,17,143,23],[142,21,143,27],[143,8,144,12],[143,9,144,13],[143,15,145,17],[144,10,146,16],[144,16,146,22,"Error"],[144,21,146,27],[144,22,146,28],[144,33,146,39],[144,37,146,43],[144,38,146,44,"name"],[144,42,146,48],[144,61,146,67],[144,62,146,68],[145,8,147,12],[146,6,148,8],[147,4,149,4],[148,4,150,4,"getComponent"],[148,16,150,16,"getComponent"],[148,17,150,16],[148,19,150,19],[149,6,151,8],[149,13,151,15],[149,17,151,19],[149,18,151,20,"component"],[149,27,151,29],[150,4,152,4],[151,4,153,4,"setComponent"],[151,16,153,16,"setComponent"],[151,17,153,17,"component"],[151,26,153,26],[151,28,153,28],[152,6,154,8],[152,10,154,12,"component"],[152,19,154,21],[152,20,154,22,"name"],[152,24,154,26],[152,29,154,31],[152,33,154,35],[152,34,154,36,"name"],[152,38,154,40],[152,40,154,42],[153,8,155,12],[153,14,155,18,"Error"],[153,19,155,23],[153,20,155,24],[153,45,155,49,"component"],[153,54,155,58],[153,55,155,59,"name"],[153,59,155,63],[153,76,155,80],[153,80,155,84],[153,81,155,85,"name"],[153,85,155,89],[153,88,155,92],[153,89,155,93],[154,6,156,8],[155,6,157,8],[155,10,157,12],[155,14,157,16],[155,15,157,17,"component"],[155,24,157,26],[155,26,157,28],[156,8,158,12],[156,14,158,18,"Error"],[156,19,158,23],[156,20,158,24],[156,37,158,41],[156,41,158,45],[156,42,158,46,"name"],[156,46,158,50],[156,74,158,78],[156,75,158,79],[157,6,159,8],[158,6,160,8],[158,10,160,12],[158,11,160,13,"component"],[158,20,160,22],[158,23,160,25,"component"],[158,32,160,34],[159,6,161,8],[160,6,162,8],[160,10,162,12],[160,11,162,13],[160,15,162,17],[160,16,162,18,"shouldAutoInitialize"],[160,36,162,38],[160,37,162,39],[160,38,162,40],[160,40,162,42],[161,8,163,12],[162,6,164,8],[163,6,165,8],[164,6,166,8],[164,10,166,12,"isComponentEager"],[164,26,166,28],[164,27,166,29,"component"],[164,36,166,38],[164,37,166,39],[164,39,166,41],[165,8,167,12],[165,12,167,16],[166,10,168,16],[166,14,168,20],[166,15,168,21,"getOrInitializeService"],[166,37,168,43],[166,38,168,44],[167,12,168,46,"instanceIdentifier"],[167,30,168,64],[167,32,168,66,"DEFAULT_ENTRY_NAME"],[168,10,168,85],[168,11,168,86],[168,12,168,87],[169,8,169,12],[169,9,169,13],[169,10,170,12],[169,17,170,19,"e"],[169,18,170,20],[169,20,170,22],[170,10,171,16],[171,10,172,16],[172,10,173,16],[173,10,174,16],[174,8,174,16],[175,6,176,8],[176,6,177,8],[177,6,178,8],[178,6,179,8],[179,6,180,8],[179,11,180,13],[179,17,180,19],[179,18,180,20,"instanceIdentifier"],[179,36,180,38],[179,38,180,40,"instanceDeferred"],[179,54,180,56],[179,55,180,57],[179,59,180,61],[179,63,180,65],[179,64,180,66,"instancesDeferred"],[179,81,180,83],[179,82,180,84,"entries"],[179,89,180,91],[179,90,180,92],[179,91,180,93],[179,93,180,95],[180,8,181,12],[180,14,181,18,"normalizedIdentifier"],[180,34,181,38],[180,37,181,41],[180,41,181,45],[180,42,181,46,"normalizeInstanceIdentifier"],[180,69,181,73],[180,70,181,74,"instanceIdentifier"],[180,88,181,92],[180,89,181,93],[181,8,182,12],[181,12,182,16],[182,10,183,16],[183,10,184,16],[183,16,184,22,"instance"],[183,24,184,30],[183,27,184,33],[183,31,184,37],[183,32,184,38,"getOrInitializeService"],[183,54,184,60],[183,55,184,61],[184,12,185,20,"instanceIdentifier"],[184,30,185,38],[184,32,185,40,"normalizedIdentifier"],[185,10,186,16],[185,11,186,17],[185,12,186,18],[186,10,187,16,"instanceDeferred"],[186,26,187,32],[186,27,187,33,"resolve"],[186,34,187,40],[186,35,187,41,"instance"],[186,43,187,49],[186,44,187,50],[187,8,188,12],[187,9,188,13],[187,10,189,12],[187,17,189,19,"e"],[187,18,189,20],[187,20,189,22],[188,10,190,16],[189,10,191,16],[190,8,191,16],[191,6,193,8],[192,4,194,4],[193,4,195,4,"clearInstance"],[193,17,195,17,"clearInstance"],[193,18,195,18,"identifier"],[193,28,195,28],[193,31,195,31,"DEFAULT_ENTRY_NAME"],[193,49,195,49],[193,51,195,51],[194,6,196,8],[194,10,196,12],[194,11,196,13,"instancesDeferred"],[194,28,196,30],[194,29,196,31,"delete"],[194,35,196,37],[194,36,196,38,"identifier"],[194,46,196,48],[194,47,196,49],[195,6,197,8],[195,10,197,12],[195,11,197,13,"instancesOptions"],[195,27,197,29],[195,28,197,30,"delete"],[195,34,197,36],[195,35,197,37,"identifier"],[195,45,197,47],[195,46,197,48],[196,6,198,8],[196,10,198,12],[196,11,198,13,"instances"],[196,20,198,22],[196,21,198,23,"delete"],[196,27,198,29],[196,28,198,30,"identifier"],[196,38,198,40],[196,39,198,41],[197,4,199,4],[198,4,200,4],[199,4,201,4],[200,4,202,4],[200,10,202,10,"delete"],[200,16,202,16,"delete"],[200,17,202,16],[200,19,202,19],[201,6,203,8],[201,12,203,14,"services"],[201,20,203,22],[201,23,203,25,"Array"],[201,28,203,30],[201,29,203,31,"from"],[201,33,203,35],[201,34,203,36],[201,38,203,40],[201,39,203,41,"instances"],[201,48,203,50],[201,49,203,51,"values"],[201,55,203,57],[201,56,203,58],[201,57,203,59],[201,58,203,60],[202,6,204,8],[202,12,204,14,"Promise"],[202,19,204,21],[202,20,204,22,"all"],[202,23,204,25],[202,24,204,26],[202,25,205,12],[202,28,205,15,"services"],[202,36,205,23],[202,37,206,17,"filter"],[202,43,206,23],[202,44,206,24,"service"],[202,51,206,31],[202,55,206,35],[202,65,206,45],[202,69,206,49,"service"],[202,76,206,56],[202,77,206,57],[202,78,206,58],[203,6,207,16],[204,6,207,16],[204,7,208,17,"map"],[204,10,208,20],[204,11,208,21,"service"],[204,18,208,28],[204,22,208,32,"service"],[204,29,208,39],[204,30,208,40,"INTERNAL"],[204,38,208,48],[204,39,208,49,"delete"],[204,45,208,55],[204,46,208,56],[204,47,208,57],[204,48,208,58],[204,50,209,12],[204,53,209,15,"services"],[204,61,209,23],[204,62,210,17,"filter"],[204,68,210,23],[204,69,210,24,"service"],[204,76,210,31],[204,80,210,35],[204,89,210,44],[204,93,210,48,"service"],[204,100,210,55],[204,101,210,56],[204,102,210,57],[205,6,211,16],[206,6,211,16],[206,7,212,17,"map"],[206,10,212,20],[206,11,212,21,"service"],[206,18,212,28],[206,22,212,32,"service"],[206,29,212,39],[206,30,212,40,"_delete"],[206,37,212,47],[206,38,212,48],[206,39,212,49],[206,40,212,50],[206,41,213,9],[206,42,213,10],[207,4,214,4],[208,4,215,4,"isComponentSet"],[208,18,215,18,"isComponentSet"],[208,19,215,18],[208,21,215,21],[209,6,216,8],[209,13,216,15],[209,17,216,19],[209,18,216,20,"component"],[209,27,216,29],[209,31,216,33],[209,35,216,37],[210,4,217,4],[211,4,218,4,"isInitialized"],[211,17,218,17,"isInitialized"],[211,18,218,18,"identifier"],[211,28,218,28],[211,31,218,31,"DEFAULT_ENTRY_NAME"],[211,49,218,49],[211,51,218,51],[212,6,219,8],[212,13,219,15],[212,17,219,19],[212,18,219,20,"instances"],[212,27,219,29],[212,28,219,30,"has"],[212,31,219,33],[212,32,219,34,"identifier"],[212,42,219,44],[212,43,219,45],[213,4,220,4],[214,4,221,4,"getOptions"],[214,14,221,14,"getOptions"],[214,15,221,15,"identifier"],[214,25,221,25],[214,28,221,28,"DEFAULT_ENTRY_NAME"],[214,46,221,46],[214,48,221,48],[215,6,222,8],[215,13,222,15],[215,17,222,19],[215,18,222,20,"instancesOptions"],[215,34,222,36],[215,35,222,37,"get"],[215,38,222,40],[215,39,222,41,"identifier"],[215,49,222,51],[215,50,222,52],[215,54,222,56],[215,55,222,57],[215,56,222,58],[216,4,223,4],[217,4,224,4,"initialize"],[217,14,224,14,"initialize"],[217,15,224,15,"opts"],[217,19,224,19],[217,22,224,22],[217,23,224,23],[217,24,224,24],[217,26,224,26],[218,6,225,8],[218,12,225,14],[219,8,225,16,"options"],[219,15,225,23],[219,18,225,26],[219,19,225,27],[220,6,225,29],[220,7,225,30],[220,10,225,33,"opts"],[220,14,225,37],[221,6,226,8],[221,12,226,14,"normalizedIdentifier"],[221,32,226,34],[221,35,226,37],[221,39,226,41],[221,40,226,42,"normalizeInstanceIdentifier"],[221,67,226,69],[221,68,226,70,"opts"],[221,72,226,74],[221,73,226,75,"instanceIdentifier"],[221,91,226,93],[221,92,226,94],[222,6,227,8],[222,10,227,12],[222,14,227,16],[222,15,227,17,"isInitialized"],[222,28,227,30],[222,29,227,31,"normalizedIdentifier"],[222,49,227,51],[222,50,227,52],[222,52,227,54],[223,8,228,12],[223,14,228,18,"Error"],[223,19,228,23],[223,20,228,24],[223,23,228,27],[223,27,228,31],[223,28,228,32,"name"],[223,32,228,36],[223,36,228,40,"normalizedIdentifier"],[223,56,228,60],[223,88,228,92],[223,89,228,93],[224,6,229,8],[225,6,230,8],[225,10,230,12],[225,11,230,13],[225,15,230,17],[225,16,230,18,"isComponentSet"],[225,30,230,32],[225,31,230,33],[225,32,230,34],[225,34,230,36],[226,8,231,12],[226,14,231,18,"Error"],[226,19,231,23],[226,20,231,24],[226,33,231,37],[226,37,231,41],[226,38,231,42,"name"],[226,42,231,46],[226,72,231,76],[226,73,231,77],[227,6,232,8],[228,6,233,8],[228,12,233,14,"instance"],[228,20,233,22],[228,23,233,25],[228,27,233,29],[228,28,233,30,"getOrInitializeService"],[228,50,233,52],[228,51,233,53],[229,8,234,12,"instanceIdentifier"],[229,26,234,30],[229,28,234,32,"normalizedIdentifier"],[229,48,234,52],[230,8,235,12,"options"],[231,6,236,8],[231,7,236,9],[231,8,236,10],[232,6,237,8],[233,6,238,8],[233,11,238,13],[233,17,238,19],[233,18,238,20,"instanceIdentifier"],[233,36,238,38],[233,38,238,40,"instanceDeferred"],[233,54,238,56],[233,55,238,57],[233,59,238,61],[233,63,238,65],[233,64,238,66,"instancesDeferred"],[233,81,238,83],[233,82,238,84,"entries"],[233,89,238,91],[233,90,238,92],[233,91,238,93],[233,93,238,95],[234,8,239,12],[234,14,239,18,"normalizedDeferredIdentifier"],[234,42,239,46],[234,45,239,49],[234,49,239,53],[234,50,239,54,"normalizeInstanceIdentifier"],[234,77,239,81],[234,78,239,82,"instanceIdentifier"],[234,96,239,100],[234,97,239,101],[235,8,240,12],[235,12,240,16,"normalizedIdentifier"],[235,32,240,36],[235,37,240,41,"normalizedDeferredIdentifier"],[235,65,240,69],[235,67,240,71],[236,10,241,16,"instanceDeferred"],[236,26,241,32],[236,27,241,33,"resolve"],[236,34,241,40],[236,35,241,41,"instance"],[236,43,241,49],[236,44,241,50],[237,8,242,12],[238,6,243,8],[239,6,244,8],[239,13,244,15,"instance"],[239,21,244,23],[240,4,245,4],[241,4,246,4],[242,0,247,0],[243,0,248,0],[244,0,249,0],[245,0,250,0],[246,0,251,0],[247,0,252,0],[248,0,253,0],[249,4,254,4,"onInit"],[249,10,254,10,"onInit"],[249,11,254,11,"callback"],[249,19,254,19],[249,21,254,21,"identifier"],[249,31,254,31],[249,33,254,33],[250,6,255,8],[250,12,255,14,"normalizedIdentifier"],[250,32,255,34],[250,35,255,37],[250,39,255,41],[250,40,255,42,"normalizeInstanceIdentifier"],[250,67,255,69],[250,68,255,70,"identifier"],[250,78,255,80],[250,79,255,81],[251,6,256,8],[251,12,256,14,"existingCallbacks"],[251,29,256,31],[251,32,256,34],[251,36,256,38],[251,37,256,39,"onInitCallbacks"],[251,52,256,54],[251,53,256,55,"get"],[251,56,256,58],[251,57,256,59,"normalizedIdentifier"],[251,77,256,79],[251,78,256,80],[251,82,257,12],[251,86,257,16,"Set"],[251,89,257,19],[251,90,257,20],[251,91,257,21],[252,6,258,8,"existingCallbacks"],[252,23,258,25],[252,24,258,26,"add"],[252,27,258,29],[252,28,258,30,"callback"],[252,36,258,38],[252,37,258,39],[253,6,259,8],[253,10,259,12],[253,11,259,13,"onInitCallbacks"],[253,26,259,28],[253,27,259,29,"set"],[253,30,259,32],[253,31,259,33,"normalizedIdentifier"],[253,51,259,53],[253,53,259,55,"existingCallbacks"],[253,70,259,72],[253,71,259,73],[254,6,260,8],[254,12,260,14,"existingInstance"],[254,28,260,30],[254,31,260,33],[254,35,260,37],[254,36,260,38,"instances"],[254,45,260,47],[254,46,260,48,"get"],[254,49,260,51],[254,50,260,52,"normalizedIdentifier"],[254,70,260,72],[254,71,260,73],[255,6,261,8],[255,10,261,12,"existingInstance"],[255,26,261,28],[255,28,261,30],[256,8,262,12,"callback"],[256,16,262,20],[256,17,262,21,"existingInstance"],[256,33,262,37],[256,35,262,39,"normalizedIdentifier"],[256,55,262,59],[256,56,262,60],[257,6,263,8],[258,6,264,8],[258,13,264,15],[258,19,264,21],[259,8,265,12,"existingCallbacks"],[259,25,265,29],[259,26,265,30,"delete"],[259,32,265,36],[259,33,265,37,"callback"],[259,41,265,45],[259,42,265,46],[260,6,266,8],[260,7,266,9],[261,4,267,4],[262,4,268,4],[263,0,269,0],[264,0,270,0],[265,0,271,0],[266,4,272,4,"invokeOnInitCallbacks"],[266,25,272,25,"invokeOnInitCallbacks"],[266,26,272,26,"instance"],[266,34,272,34],[266,36,272,36,"identifier"],[266,46,272,46],[266,48,272,48],[267,6,273,8],[267,12,273,14,"callbacks"],[267,21,273,23],[267,24,273,26],[267,28,273,30],[267,29,273,31,"onInitCallbacks"],[267,44,273,46],[267,45,273,47,"get"],[267,48,273,50],[267,49,273,51,"identifier"],[267,59,273,61],[267,60,273,62],[268,6,274,8],[268,10,274,12],[268,11,274,13,"callbacks"],[268,20,274,22],[268,22,274,24],[269,8,275,12],[270,6,276,8],[271,6,277,8],[271,11,277,13],[271,17,277,19,"callback"],[271,25,277,27],[271,29,277,31,"callbacks"],[271,38,277,40],[271,40,277,42],[272,8,278,12],[272,12,278,16],[273,10,279,16,"callback"],[273,18,279,24],[273,19,279,25,"instance"],[273,27,279,33],[273,29,279,35,"identifier"],[273,39,279,45],[273,40,279,46],[274,8,280,12],[274,9,280,13],[274,10,281,12],[274,16,281,18],[275,10,282,16],[276,8,282,16],[277,6,284,8],[278,4,285,4],[279,4,286,4,"getOrInitializeService"],[279,26,286,26,"getOrInitializeService"],[279,27,286,27],[280,6,286,29,"instanceIdentifier"],[280,24,286,47],[281,6,286,49,"options"],[281,13,286,56],[281,16,286,59],[281,17,286,60],[282,4,286,62],[282,5,286,63],[282,7,286,65],[283,6,287,8],[283,10,287,12,"instance"],[283,18,287,20],[283,21,287,23],[283,25,287,27],[283,26,287,28,"instances"],[283,35,287,37],[283,36,287,38,"get"],[283,39,287,41],[283,40,287,42,"instanceIdentifier"],[283,58,287,60],[283,59,287,61],[284,6,288,8],[284,10,288,12],[284,11,288,13,"instance"],[284,19,288,21],[284,23,288,25],[284,27,288,29],[284,28,288,30,"component"],[284,37,288,39],[284,39,288,41],[285,8,289,12,"instance"],[285,16,289,20],[285,19,289,23],[285,23,289,27],[285,24,289,28,"component"],[285,33,289,37],[285,34,289,38,"instanceFactory"],[285,49,289,53],[285,50,289,54],[285,54,289,58],[285,55,289,59,"container"],[285,64,289,68],[285,66,289,70],[286,10,290,16,"instanceIdentifier"],[286,28,290,34],[286,30,290,36,"normalizeIdentifierForFactory"],[286,59,290,65],[286,60,290,66,"instanceIdentifier"],[286,78,290,84],[286,79,290,85],[287,10,291,16,"options"],[288,8,292,12],[288,9,292,13],[288,10,292,14],[289,8,293,12],[289,12,293,16],[289,13,293,17,"instances"],[289,22,293,26],[289,23,293,27,"set"],[289,26,293,30],[289,27,293,31,"instanceIdentifier"],[289,45,293,49],[289,47,293,51,"instance"],[289,55,293,59],[289,56,293,60],[290,8,294,12],[290,12,294,16],[290,13,294,17,"instancesOptions"],[290,29,294,33],[290,30,294,34,"set"],[290,33,294,37],[290,34,294,38,"instanceIdentifier"],[290,52,294,56],[290,54,294,58,"options"],[290,61,294,65],[290,62,294,66],[291,8,295,12],[292,0,296,0],[293,0,297,0],[294,0,298,0],[295,0,299,0],[296,8,300,12],[296,12,300,16],[296,13,300,17,"invokeOnInitCallbacks"],[296,34,300,38],[296,35,300,39,"instance"],[296,43,300,47],[296,45,300,49,"instanceIdentifier"],[296,63,300,67],[296,64,300,68],[297,8,301,12],[298,0,302,0],[299,0,303,0],[300,0,304,0],[301,0,305,0],[302,8,306,12],[302,12,306,16],[302,16,306,20],[302,17,306,21,"component"],[302,26,306,30],[302,27,306,31,"onInstanceCreated"],[302,44,306,48],[302,46,306,50],[303,10,307,16],[303,14,307,20],[304,12,308,20],[304,16,308,24],[304,17,308,25,"component"],[304,26,308,34],[304,27,308,35,"onInstanceCreated"],[304,44,308,52],[304,45,308,53],[304,49,308,57],[304,50,308,58,"container"],[304,59,308,67],[304,61,308,69,"instanceIdentifier"],[304,79,308,87],[304,81,308,89,"instance"],[304,89,308,97],[304,90,308,98],[305,10,309,16],[305,11,309,17],[305,12,310,16],[305,18,310,22],[306,12,311,20],[307,10,311,20],[308,8,313,12],[309,6,314,8],[310,6,315,8],[310,13,315,15,"instance"],[310,21,315,23],[310,25,315,27],[310,29,315,31],[311,4,316,4],[312,4,317,4,"normalizeInstanceIdentifier"],[312,31,317,31,"normalizeInstanceIdentifier"],[312,32,317,32,"identifier"],[312,42,317,42],[312,45,317,45,"DEFAULT_ENTRY_NAME"],[312,63,317,63],[312,65,317,65],[313,6,318,8],[313,10,318,12],[313,14,318,16],[313,15,318,17,"component"],[313,24,318,26],[313,26,318,28],[314,8,319,12],[314,15,319,19],[314,19,319,23],[314,20,319,24,"component"],[314,29,319,33],[314,30,319,34,"multipleInstances"],[314,47,319,51],[314,50,319,54,"identifier"],[314,60,319,64],[314,63,319,67,"DEFAULT_ENTRY_NAME"],[314,81,319,85],[315,6,320,8],[315,7,320,9],[315,13,321,13],[316,8,322,12],[316,15,322,19,"identifier"],[316,25,322,29],[316,26,322,30],[316,27,322,31],[317,6,323,8],[318,4,324,4],[319,4,325,4,"shouldAutoInitialize"],[319,24,325,24,"shouldAutoInitialize"],[319,25,325,24],[319,27,325,27],[320,6,326,8],[320,13,326,16],[320,14,326,17],[320,15,326,18],[320,19,326,22],[320,20,326,23,"component"],[320,29,326,32],[320,33,327,12],[320,37,327,16],[320,38,327,17,"component"],[320,47,327,26],[320,48,327,27,"instantiationMode"],[320,65,327,44],[320,70,327,49],[320,80,327,59],[320,81,327,60],[321,4,328,4],[322,2,329,0],[323,2,330,0],[324,2,330,0,"exports"],[324,9,330,0],[324,10,330,0,"Provider"],[324,18,330,0],[324,21,330,0,"Provider"],[324,29,330,0],[325,2,331,0],[325,11,331,9,"normalizeIdentifierForFactory"],[325,40,331,38,"normalizeIdentifierForFactory"],[325,41,331,39,"identifier"],[325,51,331,49],[325,53,331,51],[326,4,332,4],[326,11,332,11,"identifier"],[326,21,332,21],[326,26,332,26,"DEFAULT_ENTRY_NAME"],[326,44,332,44],[326,47,332,47,"undefined"],[326,56,332,56],[326,59,332,59,"identifier"],[326,69,332,69],[327,2,333,0],[328,2,334,0],[328,11,334,9,"isComponentEager"],[328,27,334,25,"isComponentEager"],[328,28,334,26,"component"],[328,37,334,35],[328,39,334,37],[329,4,335,4],[329,11,335,11,"component"],[329,20,335,20],[329,21,335,21,"instantiationMode"],[329,38,335,38],[329,43,335,43],[329,50,335,50],[329,51,335,51],[330,2,336,0],[332,2,338,0],[333,0,339,0],[334,0,340,0],[335,0,341,0],[336,0,342,0],[337,0,343,0],[338,0,344,0],[339,0,345,0],[340,0,346,0],[341,0,347,0],[342,0,348,0],[343,0,349,0],[344,0,350,0],[345,0,351,0],[346,0,352,0],[347,0,353,0],[348,2,354,0],[349,0,355,0],[350,0,356,0],[351,2,357,0],[351,8,357,6,"ComponentContainer"],[351,26,357,24],[351,27,357,25],[352,4,358,4,"constructor"],[352,15,358,15,"constructor"],[352,16,358,16,"name"],[352,20,358,20],[352,22,358,22],[353,6,359,8],[353,10,359,12],[353,11,359,13,"name"],[353,15,359,17],[353,18,359,20,"name"],[353,22,359,24],[354,6,360,8],[354,10,360,12],[354,11,360,13,"providers"],[354,20,360,22],[354,23,360,25],[354,27,360,29,"Map"],[354,30,360,32],[354,31,360,33],[354,32,360,34],[355,4,361,4],[356,4,362,4],[357,0,363,0],[358,0,364,0],[359,0,365,0],[360,0,366,0],[361,0,367,0],[362,0,368,0],[363,0,369,0],[364,0,370,0],[365,4,371,4,"addComponent"],[365,16,371,16,"addComponent"],[365,17,371,17,"component"],[365,26,371,26],[365,28,371,28],[366,6,372,8],[366,12,372,14,"provider"],[366,20,372,22],[366,23,372,25],[366,27,372,29],[366,28,372,30,"getProvider"],[366,39,372,41],[366,40,372,42,"component"],[366,49,372,51],[366,50,372,52,"name"],[366,54,372,56],[366,55,372,57],[367,6,373,8],[367,10,373,12,"provider"],[367,18,373,20],[367,19,373,21,"isComponentSet"],[367,33,373,35],[367,34,373,36],[367,35,373,37],[367,37,373,39],[368,8,374,12],[368,14,374,18],[368,18,374,22,"Error"],[368,23,374,27],[368,24,374,28],[368,37,374,41,"component"],[368,46,374,50],[368,47,374,51,"name"],[368,51,374,55],[368,88,374,92],[368,92,374,96],[368,93,374,97,"name"],[368,97,374,101],[368,99,374,103],[368,100,374,104],[369,6,375,8],[370,6,376,8,"provider"],[370,14,376,16],[370,15,376,17,"setComponent"],[370,27,376,29],[370,28,376,30,"component"],[370,37,376,39],[370,38,376,40],[371,4,377,4],[372,4,378,4,"addOrOverwriteComponent"],[372,27,378,27,"addOrOverwriteComponent"],[372,28,378,28,"component"],[372,37,378,37],[372,39,378,39],[373,6,379,8],[373,12,379,14,"provider"],[373,20,379,22],[373,23,379,25],[373,27,379,29],[373,28,379,30,"getProvider"],[373,39,379,41],[373,40,379,42,"component"],[373,49,379,51],[373,50,379,52,"name"],[373,54,379,56],[373,55,379,57],[374,6,380,8],[374,10,380,12,"provider"],[374,18,380,20],[374,19,380,21,"isComponentSet"],[374,33,380,35],[374,34,380,36],[374,35,380,37],[374,37,380,39],[375,8,381,12],[376,8,382,12],[376,12,382,16],[376,13,382,17,"providers"],[376,22,382,26],[376,23,382,27,"delete"],[376,29,382,33],[376,30,382,34,"component"],[376,39,382,43],[376,40,382,44,"name"],[376,44,382,48],[376,45,382,49],[377,6,383,8],[378,6,384,8],[378,10,384,12],[378,11,384,13,"addComponent"],[378,23,384,25],[378,24,384,26,"component"],[378,33,384,35],[378,34,384,36],[379,4,385,4],[380,4,386,4],[381,0,387,0],[382,0,388,0],[383,0,389,0],[384,0,390,0],[385,0,391,0],[386,0,392,0],[387,4,393,4,"getProvider"],[387,15,393,15,"getProvider"],[387,16,393,16,"name"],[387,20,393,20],[387,22,393,22],[388,6,394,8],[388,10,394,12],[388,14,394,16],[388,15,394,17,"providers"],[388,24,394,26],[388,25,394,27,"has"],[388,28,394,30],[388,29,394,31,"name"],[388,33,394,35],[388,34,394,36],[388,36,394,38],[389,8,395,12],[389,15,395,19],[389,19,395,23],[389,20,395,24,"providers"],[389,29,395,33],[389,30,395,34,"get"],[389,33,395,37],[389,34,395,38,"name"],[389,38,395,42],[389,39,395,43],[390,6,396,8],[391,6,397,8],[392,6,398,8],[392,12,398,14,"provider"],[392,20,398,22],[392,23,398,25],[392,27,398,29,"Provider"],[392,35,398,37],[392,36,398,38,"name"],[392,40,398,42],[392,42,398,44],[392,46,398,48],[392,47,398,49],[393,6,399,8],[393,10,399,12],[393,11,399,13,"providers"],[393,20,399,22],[393,21,399,23,"set"],[393,24,399,26],[393,25,399,27,"name"],[393,29,399,31],[393,31,399,33,"provider"],[393,39,399,41],[393,40,399,42],[394,6,400,8],[394,13,400,15,"provider"],[394,21,400,23],[395,4,401,4],[396,4,402,4,"getProviders"],[396,16,402,16,"getProviders"],[396,17,402,16],[396,19,402,19],[397,6,403,8],[397,13,403,15,"Array"],[397,18,403,20],[397,19,403,21,"from"],[397,23,403,25],[397,24,403,26],[397,28,403,30],[397,29,403,31,"providers"],[397,38,403,40],[397,39,403,41,"values"],[397,45,403,47],[397,46,403,48],[397,47,403,49],[397,48,403,50],[398,4,404,4],[399,2,405,0],[400,2,405,1,"exports"],[400,9,405,1],[400,10,405,1,"ComponentContainer"],[400,28,405,1],[400,31,405,1,"ComponentContainer"],[400,49,405,1],[401,0,405,1],[401,3]],"functionMap":{"names":["<global>","Component","Component#constructor","Component#setInstantiationMode","Component#setMultipleInstances","Component#setServiceProps","Component#setInstanceCreatedCallback","Provider","Provider#constructor","Provider#get","Provider#getImmediate","Provider#getComponent","Provider#setComponent","Provider#clearInstance","Provider#_delete","services.filter$argument_0","services.filter.map$argument_0","Provider#isComponentSet","Provider#isInitialized","Provider#getOptions","Provider#initialize","Provider#onInit","<anonymous>","Provider#invokeOnInitCallbacks","Provider#getOrInitializeService","Provider#normalizeInstanceIdentifier","Provider#shouldAutoInitialize","normalizeIdentifierForFactory","isComponentEager","ComponentContainer","ComponentContainer#constructor","ComponentContainer#addComponent","ComponentContainer#addOrOverwriteComponent","ComponentContainer#getProvider","ComponentContainer#getProviders"],"mappings":"AAA;ACK;ICO;KDW;IEC;KFG;IGC;KHG;IIC;KJG;IKC;KLG;CDC;AOwC;ICC;KDQ;IEK;KFwB;IGC;KH6B;IIC;KJE;IKC;KLyC;IMC;KNI;IOG;wBCI,gCD;qBEE,oCF;wBCE,+BD;qBEE,4BF;KPE;IUC;KVE;IWC;KXE;IYC;KZE;IaC;KbqB;IcS;eCU;SDE;KdC;IgBK;KhBa;IiBC;KjB8B;IkBC;KlBO;ImBC;KnBG;CPC;A2BE;C3BE;A4BC;C5BE;A6BqB;ICC;KDG;IEU;KFM;IGC;KHO;IIQ;KJQ;IKC;KLE;C7BC"}},"type":"js/module"}]}