{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = codegen;\n\n  /**\r\n   * Begins generating a function.\r\n   * @memberof util\r\n   * @param {string[]} functionParams Function parameter names\r\n   * @param {string} [functionName] Function name if not anonymous\r\n   * @returns {Codegen} Appender that appends code to the function's body\r\n   */\n  function codegen(functionParams, functionName) {\n    /* istanbul ignore if */\n    if (typeof functionParams === \"string\") {\n      functionName = functionParams;\n      functionParams = undefined;\n    }\n    var body = [];\n\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\n\n    function Codegen(formatStringOrScope) {\n      // note that explicit array handling below makes this ~50% faster\n\n      // finish the function\n      if (typeof formatStringOrScope !== \"string\") {\n        var source = toString();\n        if (codegen.verbose) console.log(\"codegen: \" + source); // eslint-disable-line no-console\n        source = \"return \" + source;\n        if (formatStringOrScope) {\n          var scopeKeys = Object.keys(formatStringOrScope),\n            scopeParams = new Array(scopeKeys.length + 1),\n            scopeValues = new Array(scopeKeys.length),\n            scopeOffset = 0;\n          while (scopeOffset < scopeKeys.length) {\n            scopeParams[scopeOffset] = scopeKeys[scopeOffset];\n            scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\n          }\n          scopeParams[scopeOffset] = source;\n          return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\n        }\n        return Function(source)(); // eslint-disable-line no-new-func\n      }\n\n      // otherwise append to body\n      var formatParams = new Array(arguments.length - 1),\n        formatOffset = 0;\n      while (formatOffset < formatParams.length) formatParams[formatOffset] = arguments[++formatOffset];\n      formatOffset = 0;\n      formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\n        var value = formatParams[formatOffset++];\n        switch ($1) {\n          case \"d\":\n          case \"f\":\n            return String(Number(value));\n          case \"i\":\n            return String(Math.floor(value));\n          case \"j\":\n            return JSON.stringify(value);\n          case \"s\":\n            return String(value);\n        }\n        return \"%\";\n      });\n      if (formatOffset !== formatParams.length) throw Error(\"parameter count mismatch\");\n      body.push(formatStringOrScope);\n      return Codegen;\n    }\n    function toString(functionNameOverride) {\n      return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\n    }\n    Codegen.toString = toString;\n    return Codegen;\n  }\n\n  /**\r\n   * Begins generating a function.\r\n   * @memberof util\r\n   * @function codegen\r\n   * @param {string} [functionName] Function name if not anonymous\r\n   * @returns {Codegen} Appender that appends code to the function's body\r\n   * @variation 2\r\n   */\n\n  /**\r\n   * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n   * @name util.codegen.verbose\r\n   * @type {boolean}\r\n   */\n  codegen.verbose = false;\n});","lineCount":100,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"codegen"],[4,26,2,24],[6,2,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,2,11,0],[13,11,11,9,"codegen"],[13,18,11,16,"codegen"],[13,19,11,17,"functionParams"],[13,33,11,31],[13,35,11,33,"functionName"],[13,47,11,45],[13,49,11,47],[14,4,13,4],[15,4,14,4],[15,8,14,8],[15,15,14,15,"functionParams"],[15,29,14,29],[15,34,14,34],[15,42,14,42],[15,44,14,44],[16,6,15,8,"functionName"],[16,18,15,20],[16,21,15,23,"functionParams"],[16,35,15,37],[17,6,16,8,"functionParams"],[17,20,16,22],[17,23,16,25,"undefined"],[17,32,16,34],[18,4,17,4],[19,4,19,4],[19,8,19,8,"body"],[19,12,19,12],[19,15,19,15],[19,17,19,17],[21,4,21,4],[22,0,22,0],[23,0,23,0],[24,0,24,0],[25,0,25,0],[26,0,26,0],[27,0,27,0],[28,0,28,0],[29,0,29,0],[31,4,31,4],[31,13,31,13,"Codegen"],[31,20,31,20,"Codegen"],[31,21,31,21,"formatStringOrScope"],[31,40,31,40],[31,42,31,42],[32,6,32,8],[34,6,34,8],[35,6,35,8],[35,10,35,12],[35,17,35,19,"formatStringOrScope"],[35,36,35,38],[35,41,35,43],[35,49,35,51],[35,51,35,53],[36,8,36,12],[36,12,36,16,"source"],[36,18,36,22],[36,21,36,25,"toString"],[36,29,36,33],[36,30,36,34],[36,31,36,35],[37,8,37,12],[37,12,37,16,"codegen"],[37,19,37,23],[37,20,37,24,"verbose"],[37,27,37,31],[37,29,38,16,"console"],[37,36,38,23],[37,37,38,24,"log"],[37,40,38,27],[37,41,38,28],[37,52,38,39],[37,55,38,42,"source"],[37,61,38,48],[37,62,38,49],[37,63,38,50],[37,64,38,51],[38,8,39,12,"source"],[38,14,39,18],[38,17,39,21],[38,26,39,30],[38,29,39,33,"source"],[38,35,39,39],[39,8,40,12],[39,12,40,16,"formatStringOrScope"],[39,31,40,35],[39,33,40,37],[40,10,41,16],[40,14,41,20,"scopeKeys"],[40,23,41,29],[40,26,41,34,"Object"],[40,32,41,40],[40,33,41,41,"keys"],[40,37,41,45],[40,38,41,46,"formatStringOrScope"],[40,57,41,65],[40,58,41,66],[41,12,42,20,"scopeParams"],[41,23,42,31],[41,26,42,34],[41,30,42,38,"Array"],[41,35,42,43],[41,36,42,44,"scopeKeys"],[41,45,42,53],[41,46,42,54,"length"],[41,52,42,60],[41,55,42,63],[41,56,42,64],[41,57,42,65],[42,12,43,20,"scopeValues"],[42,23,43,31],[42,26,43,34],[42,30,43,38,"Array"],[42,35,43,43],[42,36,43,44,"scopeKeys"],[42,45,43,53],[42,46,43,54,"length"],[42,52,43,60],[42,53,43,61],[43,12,44,20,"scopeOffset"],[43,23,44,31],[43,26,44,34],[43,27,44,35],[44,10,45,16],[44,17,45,23,"scopeOffset"],[44,28,45,34],[44,31,45,37,"scopeKeys"],[44,40,45,46],[44,41,45,47,"length"],[44,47,45,53],[44,49,45,55],[45,12,46,20,"scopeParams"],[45,23,46,31],[45,24,46,32,"scopeOffset"],[45,35,46,43],[45,36,46,44],[45,39,46,47,"scopeKeys"],[45,48,46,56],[45,49,46,57,"scopeOffset"],[45,60,46,68],[45,61,46,69],[46,12,47,20,"scopeValues"],[46,23,47,31],[46,24,47,32,"scopeOffset"],[46,35,47,43],[46,36,47,44],[46,39,47,47,"formatStringOrScope"],[46,58,47,66],[46,59,47,67,"scopeKeys"],[46,68,47,76],[46,69,47,77,"scopeOffset"],[46,80,47,88],[46,82,47,90],[46,83,47,91],[46,84,47,92],[47,10,48,16],[48,10,49,16,"scopeParams"],[48,21,49,27],[48,22,49,28,"scopeOffset"],[48,33,49,39],[48,34,49,40],[48,37,49,43,"source"],[48,43,49,49],[49,10,50,16],[49,17,50,23,"Function"],[49,25,50,31],[49,26,50,32,"apply"],[49,31,50,37],[49,32,50,38],[49,36,50,42],[49,38,50,44,"scopeParams"],[49,49,50,55],[49,50,50,56],[49,51,50,57,"apply"],[49,56,50,62],[49,57,50,63],[49,61,50,67],[49,63,50,69,"scopeValues"],[49,74,50,80],[49,75,50,81],[49,76,50,82],[49,77,50,83],[50,8,51,12],[51,8,52,12],[51,15,52,19,"Function"],[51,23,52,27],[51,24,52,28,"source"],[51,30,52,34],[51,31,52,35],[51,32,52,36],[51,33,52,37],[51,34,52,38],[51,35,52,39],[52,6,53,8],[54,6,55,8],[55,6,56,8],[55,10,56,12,"formatParams"],[55,22,56,24],[55,25,56,27],[55,29,56,31,"Array"],[55,34,56,36],[55,35,56,37,"arguments"],[55,44,56,46],[55,45,56,47,"length"],[55,51,56,53],[55,54,56,56],[55,55,56,57],[55,56,56,58],[56,8,57,12,"formatOffset"],[56,20,57,24],[56,23,57,27],[56,24,57,28],[57,6,58,8],[57,13,58,15,"formatOffset"],[57,25,58,27],[57,28,58,30,"formatParams"],[57,40,58,42],[57,41,58,43,"length"],[57,47,58,49],[57,49,59,12,"formatParams"],[57,61,59,24],[57,62,59,25,"formatOffset"],[57,74,59,37],[57,75,59,38],[57,78,59,41,"arguments"],[57,87,59,50],[57,88,59,51],[57,90,59,53,"formatOffset"],[57,102,59,65],[57,103,59,66],[58,6,60,8,"formatOffset"],[58,18,60,20],[58,21,60,23],[58,22,60,24],[59,6,61,8,"formatStringOrScope"],[59,25,61,27],[59,28,61,30,"formatStringOrScope"],[59,47,61,49],[59,48,61,50,"replace"],[59,55,61,57],[59,56,61,58],[59,70,61,72],[59,72,61,74],[59,81,61,83,"replace"],[59,88,61,90,"replace"],[59,89,61,91,"$0"],[59,91,61,93],[59,93,61,95,"$1"],[59,95,61,97],[59,97,61,99],[60,8,62,12],[60,12,62,16,"value"],[60,17,62,21],[60,20,62,24,"formatParams"],[60,32,62,36],[60,33,62,37,"formatOffset"],[60,45,62,49],[60,47,62,51],[60,48,62,52],[61,8,63,12],[61,16,63,20,"$1"],[61,18,63,22],[62,10,64,16],[62,15,64,21],[62,18,64,24],[63,10,64,26],[63,15,64,31],[63,18,64,34],[64,12,64,36],[64,19,64,43,"String"],[64,25,64,49],[64,26,64,50,"Number"],[64,32,64,56],[64,33,64,57,"value"],[64,38,64,62],[64,39,64,63],[64,40,64,64],[65,10,65,16],[65,15,65,21],[65,18,65,24],[66,12,65,26],[66,19,65,33,"String"],[66,25,65,39],[66,26,65,40,"Math"],[66,30,65,44],[66,31,65,45,"floor"],[66,36,65,50],[66,37,65,51,"value"],[66,42,65,56],[66,43,65,57],[66,44,65,58],[67,10,66,16],[67,15,66,21],[67,18,66,24],[68,12,66,26],[68,19,66,33,"JSON"],[68,23,66,37],[68,24,66,38,"stringify"],[68,33,66,47],[68,34,66,48,"value"],[68,39,66,53],[68,40,66,54],[69,10,67,16],[69,15,67,21],[69,18,67,24],[70,12,67,26],[70,19,67,33,"String"],[70,25,67,39],[70,26,67,40,"value"],[70,31,67,45],[70,32,67,46],[71,8,68,12],[72,8,69,12],[72,15,69,19],[72,18,69,22],[73,6,70,8],[73,7,70,9],[73,8,70,10],[74,6,71,8],[74,10,71,12,"formatOffset"],[74,22,71,24],[74,27,71,29,"formatParams"],[74,39,71,41],[74,40,71,42,"length"],[74,46,71,48],[74,48,72,12],[74,54,72,18,"Error"],[74,59,72,23],[74,60,72,24],[74,86,72,50],[74,87,72,51],[75,6,73,8,"body"],[75,10,73,12],[75,11,73,13,"push"],[75,15,73,17],[75,16,73,18,"formatStringOrScope"],[75,35,73,37],[75,36,73,38],[76,6,74,8],[76,13,74,15,"Codegen"],[76,20,74,22],[77,4,75,4],[78,4,77,4],[78,13,77,13,"toString"],[78,21,77,21,"toString"],[78,22,77,22,"functionNameOverride"],[78,42,77,42],[78,44,77,44],[79,6,78,8],[79,13,78,15],[79,24,78,26],[79,28,78,30,"functionNameOverride"],[79,48,78,50],[79,52,78,54,"functionName"],[79,64,78,66],[79,68,78,70],[79,70,78,72],[79,71,78,73],[79,74,78,76],[79,77,78,79],[79,81,78,83,"functionParams"],[79,95,78,97],[79,99,78,101,"functionParams"],[79,113,78,115],[79,114,78,116,"join"],[79,118,78,120],[79,119,78,121],[79,122,78,124],[79,123,78,125],[79,127,78,129],[79,129,78,131],[79,130,78,132],[79,133,78,135],[79,141,78,143],[79,144,78,146,"body"],[79,148,78,150],[79,149,78,151,"join"],[79,153,78,155],[79,154,78,156],[79,160,78,162],[79,161,78,163],[79,164,78,166],[79,169,78,171],[80,4,79,4],[81,4,81,4,"Codegen"],[81,11,81,11],[81,12,81,12,"toString"],[81,20,81,20],[81,23,81,23,"toString"],[81,31,81,31],[82,4,82,4],[82,11,82,11,"Codegen"],[82,18,82,18],[83,2,83,0],[85,2,85,0],[86,0,86,0],[87,0,87,0],[88,0,88,0],[89,0,89,0],[90,0,90,0],[91,0,91,0],[92,0,92,0],[94,2,94,0],[95,0,95,0],[96,0,96,0],[97,0,97,0],[98,0,98,0],[99,2,99,0,"codegen"],[99,9,99,7],[99,10,99,8,"verbose"],[99,17,99,15],[99,20,99,18],[99,25,99,23],[100,0,99,24],[100,3]],"functionMap":{"names":["<global>","codegen","Codegen","replace","toString"],"mappings":"AAA;ACU;ICoB;0EC8B;SDS;KDK;IGE;KHE;CDI"}},"type":"js/module"}]}