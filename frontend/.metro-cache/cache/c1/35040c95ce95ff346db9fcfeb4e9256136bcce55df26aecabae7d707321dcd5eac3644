{"dependencies":[{"name":"./logging","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":20,"column":18,"index":722},"end":{"line":20,"column":38,"index":742}}],"key":"IuCQ7u+XFj9mcNQiMAuOpQn/EDM=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":21,"column":20,"index":764},"end":{"line":21,"column":42,"index":786}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./error","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":22,"column":16,"index":804},"end":{"line":22,"column":34,"index":822}}],"key":"ABL1W5lBwNEqpjG9q/KVa7squiQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /*\n   * Copyright 2019 gRPC authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Metadata = void 0;\n  const logging_1 = require(_dependencyMap[0], \"./logging\");\n  const constants_1 = require(_dependencyMap[1], \"./constants\");\n  const error_1 = require(_dependencyMap[2], \"./error\");\n  const LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\n  const LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\n  function isLegalKey(key) {\n    return LEGAL_KEY_REGEX.test(key);\n  }\n  function isLegalNonBinaryValue(value) {\n    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n  }\n  function isBinaryKey(key) {\n    return key.endsWith('-bin');\n  }\n  function isCustomMetadata(key) {\n    return !key.startsWith('grpc-');\n  }\n  function normalizeKey(key) {\n    return key.toLowerCase();\n  }\n  function validate(key, value) {\n    if (!isLegalKey(key)) {\n      throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n    }\n    if (value !== null && value !== undefined) {\n      if (isBinaryKey(key)) {\n        if (!Buffer.isBuffer(value)) {\n          throw new Error(\"keys that end with '-bin' must have Buffer values\");\n        }\n      } else {\n        if (Buffer.isBuffer(value)) {\n          throw new Error(\"keys that don't end with '-bin' must have String values\");\n        }\n        if (!isLegalNonBinaryValue(value)) {\n          throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n        }\n      }\n    }\n  }\n  /**\n   * A class for storing metadata. Keys are normalized to lowercase ASCII.\n   */\n  class Metadata {\n    constructor(options = {}) {\n      this.internalRepr = new Map();\n      this.options = options;\n    }\n    /**\n     * Sets the given value for the given key by replacing any other values\n     * associated with that key. Normalizes the key.\n     * @param key The key to whose value should be set.\n     * @param value The value to set. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */\n    set(key, value) {\n      key = normalizeKey(key);\n      validate(key, value);\n      this.internalRepr.set(key, [value]);\n    }\n    /**\n     * Adds the given value for the given key by appending to a list of previous\n     * values associated with that key. Normalizes the key.\n     * @param key The key for which a new value should be appended.\n     * @param value The value to add. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */\n    add(key, value) {\n      key = normalizeKey(key);\n      validate(key, value);\n      const existingValue = this.internalRepr.get(key);\n      if (existingValue === undefined) {\n        this.internalRepr.set(key, [value]);\n      } else {\n        existingValue.push(value);\n      }\n    }\n    /**\n     * Removes the given key and any associated values. Normalizes the key.\n     * @param key The key whose values should be removed.\n     */\n    remove(key) {\n      key = normalizeKey(key);\n      // validate(key);\n      this.internalRepr.delete(key);\n    }\n    /**\n     * Gets a list of all values associated with the key. Normalizes the key.\n     * @param key The key whose value should be retrieved.\n     * @return A list of values associated with the given key.\n     */\n    get(key) {\n      key = normalizeKey(key);\n      // validate(key);\n      return this.internalRepr.get(key) || [];\n    }\n    /**\n     * Gets a plain object mapping each key to the first value associated with it.\n     * This reflects the most common way that people will want to see metadata.\n     * @return A key/value mapping of the metadata.\n     */\n    getMap() {\n      const result = {};\n      for (const [key, values] of this.internalRepr) {\n        if (values.length > 0) {\n          const v = values[0];\n          result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n        }\n      }\n      return result;\n    }\n    /**\n     * Clones the metadata object.\n     * @return The newly cloned object.\n     */\n    clone() {\n      const newMetadata = new Metadata(this.options);\n      const newInternalRepr = newMetadata.internalRepr;\n      for (const [key, value] of this.internalRepr) {\n        const clonedValue = value.map(v => {\n          if (Buffer.isBuffer(v)) {\n            return Buffer.from(v);\n          } else {\n            return v;\n          }\n        });\n        newInternalRepr.set(key, clonedValue);\n      }\n      return newMetadata;\n    }\n    /**\n     * Merges all key-value pairs from a given Metadata object into this one.\n     * If both this object and the given object have values in the same key,\n     * values from the other Metadata object will be appended to this object's\n     * values.\n     * @param other A Metadata object.\n     */\n    merge(other) {\n      for (const [key, values] of other.internalRepr) {\n        const mergedValue = (this.internalRepr.get(key) || []).concat(values);\n        this.internalRepr.set(key, mergedValue);\n      }\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    getOptions() {\n      return this.options;\n    }\n    /**\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n     */\n    toHttp2Headers() {\n      // NOTE: Node <8.9 formats http2 headers incorrectly.\n      const result = {};\n      for (const [key, values] of this.internalRepr) {\n        // We assume that the user's interaction with this object is limited to\n        // through its public API (i.e. keys and values are already validated).\n        result[key] = values.map(bufToString);\n      }\n      return result;\n    }\n    /**\n     * This modifies the behavior of JSON.stringify to show an object\n     * representation of the metadata map.\n     */\n    toJSON() {\n      const result = {};\n      for (const [key, values] of this.internalRepr) {\n        result[key] = values;\n      }\n      return result;\n    }\n    /**\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n     * object.\n     * @param headers An IncomingHttpHeaders object.\n     */\n    static fromHttp2Headers(headers) {\n      const result = new Metadata();\n      for (const key of Object.keys(headers)) {\n        // Reserved headers (beginning with `:`) are not valid keys.\n        if (key.charAt(0) === ':') {\n          continue;\n        }\n        const values = headers[key];\n        try {\n          if (isBinaryKey(key)) {\n            if (Array.isArray(values)) {\n              values.forEach(value => {\n                result.add(key, Buffer.from(value, 'base64'));\n              });\n            } else if (values !== undefined) {\n              if (isCustomMetadata(key)) {\n                values.split(',').forEach(v => {\n                  result.add(key, Buffer.from(v.trim(), 'base64'));\n                });\n              } else {\n                result.add(key, Buffer.from(values, 'base64'));\n              }\n            }\n          } else {\n            if (Array.isArray(values)) {\n              values.forEach(value => {\n                result.add(key, value);\n              });\n            } else if (values !== undefined) {\n              result.add(key, values);\n            }\n          }\n        } catch (error) {\n          const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n          (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\n        }\n      }\n      return result;\n    }\n  }\n  exports.Metadata = Metadata;\n  const bufToString = val => {\n    return Buffer.isBuffer(val) ? val.toString('base64') : val;\n  };\n});","lineCount":245,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,0,6,0],[9,0,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0,"Object"],[20,8,18,6],[20,9,18,7,"defineProperty"],[20,23,18,21],[20,24,18,22,"exports"],[20,31,18,29],[20,33,18,31],[20,45,18,43],[20,47,18,45],[21,4,18,47,"value"],[21,9,18,52],[21,11,18,54],[22,2,18,59],[22,3,18,60],[22,4,18,61],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"Metadata"],[23,18,19,16],[23,21,19,19],[23,26,19,24],[23,27,19,25],[24,2,20,0],[24,8,20,6,"logging_1"],[24,17,20,15],[24,20,20,18,"require"],[24,27,20,25],[24,28,20,25,"_dependencyMap"],[24,42,20,25],[24,58,20,37],[24,59,20,38],[25,2,21,0],[25,8,21,6,"constants_1"],[25,19,21,17],[25,22,21,20,"require"],[25,29,21,27],[25,30,21,27,"_dependencyMap"],[25,44,21,27],[25,62,21,41],[25,63,21,42],[26,2,22,0],[26,8,22,6,"error_1"],[26,15,22,13],[26,18,22,16,"require"],[26,25,22,23],[26,26,22,23,"_dependencyMap"],[26,40,22,23],[26,54,22,33],[26,55,22,34],[27,2,23,0],[27,8,23,6,"LEGAL_KEY_REGEX"],[27,23,23,21],[27,26,23,24],[27,42,23,40],[28,2,24,0],[28,8,24,6,"LEGAL_NON_BINARY_VALUE_REGEX"],[28,36,24,34],[28,39,24,37],[28,49,24,47],[29,2,25,0],[29,11,25,9,"isLegalKey"],[29,21,25,19,"isLegalKey"],[29,22,25,20,"key"],[29,25,25,23],[29,27,25,25],[30,4,26,4],[30,11,26,11,"LEGAL_KEY_REGEX"],[30,26,26,26],[30,27,26,27,"test"],[30,31,26,31],[30,32,26,32,"key"],[30,35,26,35],[30,36,26,36],[31,2,27,0],[32,2,28,0],[32,11,28,9,"isLegalNonBinaryValue"],[32,32,28,30,"isLegalNonBinaryValue"],[32,33,28,31,"value"],[32,38,28,36],[32,40,28,38],[33,4,29,4],[33,11,29,11,"LEGAL_NON_BINARY_VALUE_REGEX"],[33,39,29,39],[33,40,29,40,"test"],[33,44,29,44],[33,45,29,45,"value"],[33,50,29,50],[33,51,29,51],[34,2,30,0],[35,2,31,0],[35,11,31,9,"isBinaryKey"],[35,22,31,20,"isBinaryKey"],[35,23,31,21,"key"],[35,26,31,24],[35,28,31,26],[36,4,32,4],[36,11,32,11,"key"],[36,14,32,14],[36,15,32,15,"endsWith"],[36,23,32,23],[36,24,32,24],[36,30,32,30],[36,31,32,31],[37,2,33,0],[38,2,34,0],[38,11,34,9,"isCustomMetadata"],[38,27,34,25,"isCustomMetadata"],[38,28,34,26,"key"],[38,31,34,29],[38,33,34,31],[39,4,35,4],[39,11,35,11],[39,12,35,12,"key"],[39,15,35,15],[39,16,35,16,"startsWith"],[39,26,35,26],[39,27,35,27],[39,34,35,34],[39,35,35,35],[40,2,36,0],[41,2,37,0],[41,11,37,9,"normalizeKey"],[41,23,37,21,"normalizeKey"],[41,24,37,22,"key"],[41,27,37,25],[41,29,37,27],[42,4,38,4],[42,11,38,11,"key"],[42,14,38,14],[42,15,38,15,"toLowerCase"],[42,26,38,26],[42,27,38,27],[42,28,38,28],[43,2,39,0],[44,2,40,0],[44,11,40,9,"validate"],[44,19,40,17,"validate"],[44,20,40,18,"key"],[44,23,40,21],[44,25,40,23,"value"],[44,30,40,28],[44,32,40,30],[45,4,41,4],[45,8,41,8],[45,9,41,9,"isLegalKey"],[45,19,41,19],[45,20,41,20,"key"],[45,23,41,23],[45,24,41,24],[45,26,41,26],[46,6,42,8],[46,12,42,14],[46,16,42,18,"Error"],[46,21,42,23],[46,22,42,24],[46,38,42,40],[46,41,42,43,"key"],[46,44,42,46],[46,47,42,49],[46,78,42,80],[46,79,42,81],[47,4,43,4],[48,4,44,4],[48,8,44,8,"value"],[48,13,44,13],[48,18,44,18],[48,22,44,22],[48,26,44,26,"value"],[48,31,44,31],[48,36,44,36,"undefined"],[48,45,44,45],[48,47,44,47],[49,6,45,8],[49,10,45,12,"isBinaryKey"],[49,21,45,23],[49,22,45,24,"key"],[49,25,45,27],[49,26,45,28],[49,28,45,30],[50,8,46,12],[50,12,46,16],[50,13,46,17,"Buffer"],[50,19,46,23],[50,20,46,24,"isBuffer"],[50,28,46,32],[50,29,46,33,"value"],[50,34,46,38],[50,35,46,39],[50,37,46,41],[51,10,47,16],[51,16,47,22],[51,20,47,26,"Error"],[51,25,47,31],[51,26,47,32],[51,77,47,83],[51,78,47,84],[52,8,48,12],[53,6,49,8],[53,7,49,9],[53,13,50,13],[54,8,51,12],[54,12,51,16,"Buffer"],[54,18,51,22],[54,19,51,23,"isBuffer"],[54,27,51,31],[54,28,51,32,"value"],[54,33,51,37],[54,34,51,38],[54,36,51,40],[55,10,52,16],[55,16,52,22],[55,20,52,26,"Error"],[55,25,52,31],[55,26,52,32],[55,83,52,89],[55,84,52,90],[56,8,53,12],[57,8,54,12],[57,12,54,16],[57,13,54,17,"isLegalNonBinaryValue"],[57,34,54,38],[57,35,54,39,"value"],[57,40,54,44],[57,41,54,45],[57,43,54,47],[58,10,55,16],[58,16,55,22],[58,20,55,26,"Error"],[58,25,55,31],[58,26,55,32],[58,51,55,57],[58,54,55,60,"value"],[58,59,55,65],[58,62,55,68],[58,93,55,99],[58,94,55,100],[59,8,56,12],[60,6,57,8],[61,4,58,4],[62,2,59,0],[63,2,60,0],[64,0,61,0],[65,0,62,0],[66,2,63,0],[66,8,63,6,"Metadata"],[66,16,63,14],[66,17,63,15],[67,4,64,4,"constructor"],[67,15,64,15,"constructor"],[67,16,64,16,"options"],[67,23,64,23],[67,26,64,26],[67,27,64,27],[67,28,64,28],[67,30,64,30],[68,6,65,8],[68,10,65,12],[68,11,65,13,"internalRepr"],[68,23,65,25],[68,26,65,28],[68,30,65,32,"Map"],[68,33,65,35],[68,34,65,36],[68,35,65,37],[69,6,66,8],[69,10,66,12],[69,11,66,13,"options"],[69,18,66,20],[69,21,66,23,"options"],[69,28,66,30],[70,4,67,4],[71,4,68,4],[72,0,69,0],[73,0,70,0],[74,0,71,0],[75,0,72,0],[76,0,73,0],[77,0,74,0],[78,4,75,4,"set"],[78,7,75,7,"set"],[78,8,75,8,"key"],[78,11,75,11],[78,13,75,13,"value"],[78,18,75,18],[78,20,75,20],[79,6,76,8,"key"],[79,9,76,11],[79,12,76,14,"normalizeKey"],[79,24,76,26],[79,25,76,27,"key"],[79,28,76,30],[79,29,76,31],[80,6,77,8,"validate"],[80,14,77,16],[80,15,77,17,"key"],[80,18,77,20],[80,20,77,22,"value"],[80,25,77,27],[80,26,77,28],[81,6,78,8],[81,10,78,12],[81,11,78,13,"internalRepr"],[81,23,78,25],[81,24,78,26,"set"],[81,27,78,29],[81,28,78,30,"key"],[81,31,78,33],[81,33,78,35],[81,34,78,36,"value"],[81,39,78,41],[81,40,78,42],[81,41,78,43],[82,4,79,4],[83,4,80,4],[84,0,81,0],[85,0,82,0],[86,0,83,0],[87,0,84,0],[88,0,85,0],[89,0,86,0],[90,4,87,4,"add"],[90,7,87,7,"add"],[90,8,87,8,"key"],[90,11,87,11],[90,13,87,13,"value"],[90,18,87,18],[90,20,87,20],[91,6,88,8,"key"],[91,9,88,11],[91,12,88,14,"normalizeKey"],[91,24,88,26],[91,25,88,27,"key"],[91,28,88,30],[91,29,88,31],[92,6,89,8,"validate"],[92,14,89,16],[92,15,89,17,"key"],[92,18,89,20],[92,20,89,22,"value"],[92,25,89,27],[92,26,89,28],[93,6,90,8],[93,12,90,14,"existingValue"],[93,25,90,27],[93,28,90,30],[93,32,90,34],[93,33,90,35,"internalRepr"],[93,45,90,47],[93,46,90,48,"get"],[93,49,90,51],[93,50,90,52,"key"],[93,53,90,55],[93,54,90,56],[94,6,91,8],[94,10,91,12,"existingValue"],[94,23,91,25],[94,28,91,30,"undefined"],[94,37,91,39],[94,39,91,41],[95,8,92,12],[95,12,92,16],[95,13,92,17,"internalRepr"],[95,25,92,29],[95,26,92,30,"set"],[95,29,92,33],[95,30,92,34,"key"],[95,33,92,37],[95,35,92,39],[95,36,92,40,"value"],[95,41,92,45],[95,42,92,46],[95,43,92,47],[96,6,93,8],[96,7,93,9],[96,13,94,13],[97,8,95,12,"existingValue"],[97,21,95,25],[97,22,95,26,"push"],[97,26,95,30],[97,27,95,31,"value"],[97,32,95,36],[97,33,95,37],[98,6,96,8],[99,4,97,4],[100,4,98,4],[101,0,99,0],[102,0,100,0],[103,0,101,0],[104,4,102,4,"remove"],[104,10,102,10,"remove"],[104,11,102,11,"key"],[104,14,102,14],[104,16,102,16],[105,6,103,8,"key"],[105,9,103,11],[105,12,103,14,"normalizeKey"],[105,24,103,26],[105,25,103,27,"key"],[105,28,103,30],[105,29,103,31],[106,6,104,8],[107,6,105,8],[107,10,105,12],[107,11,105,13,"internalRepr"],[107,23,105,25],[107,24,105,26,"delete"],[107,30,105,32],[107,31,105,33,"key"],[107,34,105,36],[107,35,105,37],[108,4,106,4],[109,4,107,4],[110,0,108,0],[111,0,109,0],[112,0,110,0],[113,0,111,0],[114,4,112,4,"get"],[114,7,112,7,"get"],[114,8,112,8,"key"],[114,11,112,11],[114,13,112,13],[115,6,113,8,"key"],[115,9,113,11],[115,12,113,14,"normalizeKey"],[115,24,113,26],[115,25,113,27,"key"],[115,28,113,30],[115,29,113,31],[116,6,114,8],[117,6,115,8],[117,13,115,15],[117,17,115,19],[117,18,115,20,"internalRepr"],[117,30,115,32],[117,31,115,33,"get"],[117,34,115,36],[117,35,115,37,"key"],[117,38,115,40],[117,39,115,41],[117,43,115,45],[117,45,115,47],[118,4,116,4],[119,4,117,4],[120,0,118,0],[121,0,119,0],[122,0,120,0],[123,0,121,0],[124,4,122,4,"getMap"],[124,10,122,10,"getMap"],[124,11,122,10],[124,13,122,13],[125,6,123,8],[125,12,123,14,"result"],[125,18,123,20],[125,21,123,23],[125,22,123,24],[125,23,123,25],[126,6,124,8],[126,11,124,13],[126,17,124,19],[126,18,124,20,"key"],[126,21,124,23],[126,23,124,25,"values"],[126,29,124,31],[126,30,124,32],[126,34,124,36],[126,38,124,40],[126,39,124,41,"internalRepr"],[126,51,124,53],[126,53,124,55],[127,8,125,12],[127,12,125,16,"values"],[127,18,125,22],[127,19,125,23,"length"],[127,25,125,29],[127,28,125,32],[127,29,125,33],[127,31,125,35],[128,10,126,16],[128,16,126,22,"v"],[128,17,126,23],[128,20,126,26,"values"],[128,26,126,32],[128,27,126,33],[128,28,126,34],[128,29,126,35],[129,10,127,16,"result"],[129,16,127,22],[129,17,127,23,"key"],[129,20,127,26],[129,21,127,27],[129,24,127,30,"Buffer"],[129,30,127,36],[129,31,127,37,"isBuffer"],[129,39,127,45],[129,40,127,46,"v"],[129,41,127,47],[129,42,127,48],[129,45,127,51,"Buffer"],[129,51,127,57],[129,52,127,58,"from"],[129,56,127,62],[129,57,127,63,"v"],[129,58,127,64],[129,59,127,65],[129,62,127,68,"v"],[129,63,127,69],[130,8,128,12],[131,6,129,8],[132,6,130,8],[132,13,130,15,"result"],[132,19,130,21],[133,4,131,4],[134,4,132,4],[135,0,133,0],[136,0,134,0],[137,0,135,0],[138,4,136,4,"clone"],[138,9,136,9,"clone"],[138,10,136,9],[138,12,136,12],[139,6,137,8],[139,12,137,14,"newMetadata"],[139,23,137,25],[139,26,137,28],[139,30,137,32,"Metadata"],[139,38,137,40],[139,39,137,41],[139,43,137,45],[139,44,137,46,"options"],[139,51,137,53],[139,52,137,54],[140,6,138,8],[140,12,138,14,"newInternalRepr"],[140,27,138,29],[140,30,138,32,"newMetadata"],[140,41,138,43],[140,42,138,44,"internalRepr"],[140,54,138,56],[141,6,139,8],[141,11,139,13],[141,17,139,19],[141,18,139,20,"key"],[141,21,139,23],[141,23,139,25,"value"],[141,28,139,30],[141,29,139,31],[141,33,139,35],[141,37,139,39],[141,38,139,40,"internalRepr"],[141,50,139,52],[141,52,139,54],[142,8,140,12],[142,14,140,18,"clonedValue"],[142,25,140,29],[142,28,140,32,"value"],[142,33,140,37],[142,34,140,38,"map"],[142,37,140,41],[142,38,140,42,"v"],[142,39,140,43],[142,43,140,47],[143,10,141,16],[143,14,141,20,"Buffer"],[143,20,141,26],[143,21,141,27,"isBuffer"],[143,29,141,35],[143,30,141,36,"v"],[143,31,141,37],[143,32,141,38],[143,34,141,40],[144,12,142,20],[144,19,142,27,"Buffer"],[144,25,142,33],[144,26,142,34,"from"],[144,30,142,38],[144,31,142,39,"v"],[144,32,142,40],[144,33,142,41],[145,10,143,16],[145,11,143,17],[145,17,144,21],[146,12,145,20],[146,19,145,27,"v"],[146,20,145,28],[147,10,146,16],[148,8,147,12],[148,9,147,13],[148,10,147,14],[149,8,148,12,"newInternalRepr"],[149,23,148,27],[149,24,148,28,"set"],[149,27,148,31],[149,28,148,32,"key"],[149,31,148,35],[149,33,148,37,"clonedValue"],[149,44,148,48],[149,45,148,49],[150,6,149,8],[151,6,150,8],[151,13,150,15,"newMetadata"],[151,24,150,26],[152,4,151,4],[153,4,152,4],[154,0,153,0],[155,0,154,0],[156,0,155,0],[157,0,156,0],[158,0,157,0],[159,0,158,0],[160,4,159,4,"merge"],[160,9,159,9,"merge"],[160,10,159,10,"other"],[160,15,159,15],[160,17,159,17],[161,6,160,8],[161,11,160,13],[161,17,160,19],[161,18,160,20,"key"],[161,21,160,23],[161,23,160,25,"values"],[161,29,160,31],[161,30,160,32],[161,34,160,36,"other"],[161,39,160,41],[161,40,160,42,"internalRepr"],[161,52,160,54],[161,54,160,56],[162,8,161,12],[162,14,161,18,"mergedValue"],[162,25,161,29],[162,28,161,32],[162,29,161,33],[162,33,161,37],[162,34,161,38,"internalRepr"],[162,46,161,50],[162,47,161,51,"get"],[162,50,161,54],[162,51,161,55,"key"],[162,54,161,58],[162,55,161,59],[162,59,161,63],[162,61,161,65],[162,63,161,67,"concat"],[162,69,161,73],[162,70,161,74,"values"],[162,76,161,80],[162,77,161,81],[163,8,162,12],[163,12,162,16],[163,13,162,17,"internalRepr"],[163,25,162,29],[163,26,162,30,"set"],[163,29,162,33],[163,30,162,34,"key"],[163,33,162,37],[163,35,162,39,"mergedValue"],[163,46,162,50],[163,47,162,51],[164,6,163,8],[165,4,164,4],[166,4,165,4,"setOptions"],[166,14,165,14,"setOptions"],[166,15,165,15,"options"],[166,22,165,22],[166,24,165,24],[167,6,166,8],[167,10,166,12],[167,11,166,13,"options"],[167,18,166,20],[167,21,166,23,"options"],[167,28,166,30],[168,4,167,4],[169,4,168,4,"getOptions"],[169,14,168,14,"getOptions"],[169,15,168,14],[169,17,168,17],[170,6,169,8],[170,13,169,15],[170,17,169,19],[170,18,169,20,"options"],[170,25,169,27],[171,4,170,4],[172,4,171,4],[173,0,172,0],[174,0,173,0],[175,4,174,4,"toHttp2Headers"],[175,18,174,18,"toHttp2Headers"],[175,19,174,18],[175,21,174,21],[176,6,175,8],[177,6,176,8],[177,12,176,14,"result"],[177,18,176,20],[177,21,176,23],[177,22,176,24],[177,23,176,25],[178,6,177,8],[178,11,177,13],[178,17,177,19],[178,18,177,20,"key"],[178,21,177,23],[178,23,177,25,"values"],[178,29,177,31],[178,30,177,32],[178,34,177,36],[178,38,177,40],[178,39,177,41,"internalRepr"],[178,51,177,53],[178,53,177,55],[179,8,178,12],[180,8,179,12],[181,8,180,12,"result"],[181,14,180,18],[181,15,180,19,"key"],[181,18,180,22],[181,19,180,23],[181,22,180,26,"values"],[181,28,180,32],[181,29,180,33,"map"],[181,32,180,36],[181,33,180,37,"bufToString"],[181,44,180,48],[181,45,180,49],[182,6,181,8],[183,6,182,8],[183,13,182,15,"result"],[183,19,182,21],[184,4,183,4],[185,4,184,4],[186,0,185,0],[187,0,186,0],[188,0,187,0],[189,4,188,4,"toJSON"],[189,10,188,10,"toJSON"],[189,11,188,10],[189,13,188,13],[190,6,189,8],[190,12,189,14,"result"],[190,18,189,20],[190,21,189,23],[190,22,189,24],[190,23,189,25],[191,6,190,8],[191,11,190,13],[191,17,190,19],[191,18,190,20,"key"],[191,21,190,23],[191,23,190,25,"values"],[191,29,190,31],[191,30,190,32],[191,34,190,36],[191,38,190,40],[191,39,190,41,"internalRepr"],[191,51,190,53],[191,53,190,55],[192,8,191,12,"result"],[192,14,191,18],[192,15,191,19,"key"],[192,18,191,22],[192,19,191,23],[192,22,191,26,"values"],[192,28,191,32],[193,6,192,8],[194,6,193,8],[194,13,193,15,"result"],[194,19,193,21],[195,4,194,4],[196,4,195,4],[197,0,196,0],[198,0,197,0],[199,0,198,0],[200,0,199,0],[201,4,200,4],[201,11,200,11,"fromHttp2Headers"],[201,27,200,27,"fromHttp2Headers"],[201,28,200,28,"headers"],[201,35,200,35],[201,37,200,37],[202,6,201,8],[202,12,201,14,"result"],[202,18,201,20],[202,21,201,23],[202,25,201,27,"Metadata"],[202,33,201,35],[202,34,201,36],[202,35,201,37],[203,6,202,8],[203,11,202,13],[203,17,202,19,"key"],[203,20,202,22],[203,24,202,26,"Object"],[203,30,202,32],[203,31,202,33,"keys"],[203,35,202,37],[203,36,202,38,"headers"],[203,43,202,45],[203,44,202,46],[203,46,202,48],[204,8,203,12],[205,8,204,12],[205,12,204,16,"key"],[205,15,204,19],[205,16,204,20,"charAt"],[205,22,204,26],[205,23,204,27],[205,24,204,28],[205,25,204,29],[205,30,204,34],[205,33,204,37],[205,35,204,39],[206,10,205,16],[207,8,206,12],[208,8,207,12],[208,14,207,18,"values"],[208,20,207,24],[208,23,207,27,"headers"],[208,30,207,34],[208,31,207,35,"key"],[208,34,207,38],[208,35,207,39],[209,8,208,12],[209,12,208,16],[210,10,209,16],[210,14,209,20,"isBinaryKey"],[210,25,209,31],[210,26,209,32,"key"],[210,29,209,35],[210,30,209,36],[210,32,209,38],[211,12,210,20],[211,16,210,24,"Array"],[211,21,210,29],[211,22,210,30,"isArray"],[211,29,210,37],[211,30,210,38,"values"],[211,36,210,44],[211,37,210,45],[211,39,210,47],[212,14,211,24,"values"],[212,20,211,30],[212,21,211,31,"forEach"],[212,28,211,38],[212,29,211,39,"value"],[212,34,211,44],[212,38,211,48],[213,16,212,28,"result"],[213,22,212,34],[213,23,212,35,"add"],[213,26,212,38],[213,27,212,39,"key"],[213,30,212,42],[213,32,212,44,"Buffer"],[213,38,212,50],[213,39,212,51,"from"],[213,43,212,55],[213,44,212,56,"value"],[213,49,212,61],[213,51,212,63],[213,59,212,71],[213,60,212,72],[213,61,212,73],[214,14,213,24],[214,15,213,25],[214,16,213,26],[215,12,214,20],[215,13,214,21],[215,19,215,25],[215,23,215,29,"values"],[215,29,215,35],[215,34,215,40,"undefined"],[215,43,215,49],[215,45,215,51],[216,14,216,24],[216,18,216,28,"isCustomMetadata"],[216,34,216,44],[216,35,216,45,"key"],[216,38,216,48],[216,39,216,49],[216,41,216,51],[217,16,217,28,"values"],[217,22,217,34],[217,23,217,35,"split"],[217,28,217,40],[217,29,217,41],[217,32,217,44],[217,33,217,45],[217,34,217,46,"forEach"],[217,41,217,53],[217,42,217,54,"v"],[217,43,217,55],[217,47,217,59],[218,18,218,32,"result"],[218,24,218,38],[218,25,218,39,"add"],[218,28,218,42],[218,29,218,43,"key"],[218,32,218,46],[218,34,218,48,"Buffer"],[218,40,218,54],[218,41,218,55,"from"],[218,45,218,59],[218,46,218,60,"v"],[218,47,218,61],[218,48,218,62,"trim"],[218,52,218,66],[218,53,218,67],[218,54,218,68],[218,56,218,70],[218,64,218,78],[218,65,218,79],[218,66,218,80],[219,16,219,28],[219,17,219,29],[219,18,219,30],[220,14,220,24],[220,15,220,25],[220,21,221,29],[221,16,222,28,"result"],[221,22,222,34],[221,23,222,35,"add"],[221,26,222,38],[221,27,222,39,"key"],[221,30,222,42],[221,32,222,44,"Buffer"],[221,38,222,50],[221,39,222,51,"from"],[221,43,222,55],[221,44,222,56,"values"],[221,50,222,62],[221,52,222,64],[221,60,222,72],[221,61,222,73],[221,62,222,74],[222,14,223,24],[223,12,224,20],[224,10,225,16],[224,11,225,17],[224,17,226,21],[225,12,227,20],[225,16,227,24,"Array"],[225,21,227,29],[225,22,227,30,"isArray"],[225,29,227,37],[225,30,227,38,"values"],[225,36,227,44],[225,37,227,45],[225,39,227,47],[226,14,228,24,"values"],[226,20,228,30],[226,21,228,31,"forEach"],[226,28,228,38],[226,29,228,39,"value"],[226,34,228,44],[226,38,228,48],[227,16,229,28,"result"],[227,22,229,34],[227,23,229,35,"add"],[227,26,229,38],[227,27,229,39,"key"],[227,30,229,42],[227,32,229,44,"value"],[227,37,229,49],[227,38,229,50],[228,14,230,24],[228,15,230,25],[228,16,230,26],[229,12,231,20],[229,13,231,21],[229,19,232,25],[229,23,232,29,"values"],[229,29,232,35],[229,34,232,40,"undefined"],[229,43,232,49],[229,45,232,51],[230,14,233,24,"result"],[230,20,233,30],[230,21,233,31,"add"],[230,24,233,34],[230,25,233,35,"key"],[230,28,233,38],[230,30,233,40,"values"],[230,36,233,46],[230,37,233,47],[231,12,234,20],[232,10,235,16],[233,8,236,12],[233,9,236,13],[233,10,237,12],[233,17,237,19,"error"],[233,22,237,24],[233,24,237,26],[234,10,238,16],[234,16,238,22,"message"],[234,23,238,29],[234,26,238,32],[234,58,238,64,"key"],[234,61,238,67],[234,66,238,72,"values"],[234,72,238,78],[234,77,238,83],[234,78,238,84],[234,79,238,85],[234,81,238,87,"error_1"],[234,88,238,94],[234,89,238,95,"getErrorMessage"],[234,104,238,110],[234,106,238,112,"error"],[234,111,238,117],[234,112,238,118],[234,186,238,192],[235,10,239,16],[235,11,239,17],[235,12,239,18],[235,14,239,20,"logging_1"],[235,23,239,29],[235,24,239,30,"log"],[235,27,239,33],[235,29,239,35,"constants_1"],[235,40,239,46],[235,41,239,47,"LogVerbosity"],[235,53,239,59],[235,54,239,60,"ERROR"],[235,59,239,65],[235,61,239,67,"message"],[235,68,239,74],[235,69,239,75],[236,8,240,12],[237,6,241,8],[238,6,242,8],[238,13,242,15,"result"],[238,19,242,21],[239,4,243,4],[240,2,244,0],[241,2,245,0,"exports"],[241,9,245,7],[241,10,245,8,"Metadata"],[241,18,245,16],[241,21,245,19,"Metadata"],[241,29,245,27],[242,2,246,0],[242,8,246,6,"bufToString"],[242,19,246,17],[242,22,246,21,"val"],[242,25,246,24],[242,29,246,29],[243,4,247,4],[243,11,247,11,"Buffer"],[243,17,247,17],[243,18,247,18,"isBuffer"],[243,26,247,26],[243,27,247,27,"val"],[243,30,247,30],[243,31,247,31],[243,34,247,34,"val"],[243,37,247,37],[243,38,247,38,"toString"],[243,46,247,46],[243,47,247,47],[243,55,247,55],[243,56,247,56],[243,59,247,59,"val"],[243,62,247,62],[244,2,248,0],[244,3,248,1],[245,0,248,2],[245,3]],"functionMap":{"names":["<global>","isLegalKey","isLegalNonBinaryValue","isBinaryKey","isCustomMetadata","normalizeKey","validate","Metadata","Metadata#constructor","Metadata#set","Metadata#add","Metadata#remove","Metadata#get","Metadata#getMap","Metadata#clone","value.map$argument_0","Metadata#merge","Metadata#setOptions","Metadata#getOptions","Metadata#toHttp2Headers","Metadata#toJSON","Metadata.fromHttp2Headers","values.forEach$argument_0","values.split.forEach$argument_0","bufToString"],"mappings":"AAA;ACwB;CDE;AEC;CFE;AGC;CHE;AIC;CJE;AKC;CLE;AMC;CNmB;AOI;ICC;KDG;IEQ;KFI;IGQ;KHU;IIK;KJI;IKM;KLI;IMM;KNS;IOK;0CCI;aDO;KPI;ISQ;KTK;IUC;KVE;IWC;KXE;IYI;KZS;IaK;KbM;IcM;uCCW;yBDE;sDEI;6BFE;uCCS;yBDE;Kda;CPC;oBwBE;CxBE"}},"type":"js/module"}]}