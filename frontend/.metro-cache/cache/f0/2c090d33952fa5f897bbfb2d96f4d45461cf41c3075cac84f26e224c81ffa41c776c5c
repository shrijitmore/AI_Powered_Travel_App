{"dependencies":[{"name":"./util/minimal","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":56},"end":{"line":4,"column":41,"index":81}}],"key":"lbVPmRyLj/Ai/u8LmEyLBVy/L2I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  module.exports = Reader;\n  var util = require(_dependencyMap[0], \"./util/minimal\");\n  var BufferReader; // cyclic\n\n  var LongBits = util.LongBits,\n    utf8 = util.utf8;\n\n  /* istanbul ignore next */\n  function indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n  }\n\n  /**\n   * Constructs a new reader instance using the specified buffer.\n   * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n   * @constructor\n   * @param {Uint8Array} buffer Buffer to read from\n   */\n  function Reader(buffer) {\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n  }\n  var create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n  }\n  /* istanbul ignore next */ : function create_array(buffer) {\n    if (Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n  };\n  var create = function create() {\n    return util.Buffer ? function create_buffer_setup(buffer) {\n      return (Reader.create = function create_buffer(buffer) {\n        return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n        /* istanbul ignore next */ : create_array(buffer);\n      })(buffer);\n    }\n    /* istanbul ignore next */ : create_array;\n  };\n\n  /**\n   * Creates a new reader using the specified buffer.\n   * @function\n   * @param {Uint8Array|Buffer} buffer Buffer to read from\n   * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n   * @throws {Error} If `buffer` is not a valid buffer\n   */\n  Reader.create = create();\n  Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n  /**\n   * Reads a varint as an unsigned 32 bit value.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.uint32 = function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n      value = (this.buf[this.pos] & 127) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n\n      /* istanbul ignore if */\n      if ((this.pos += 5) > this.len) {\n        this.pos = this.len;\n        throw indexOutOfRange(this, 10);\n      }\n      return value;\n    };\n  }();\n\n  /**\n   * Reads a varint as a signed 32 bit value.\n   * @returns {number} Value read\n   */\n  Reader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n  };\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 32 bit value.\n   * @returns {number} Value read\n   */\n  Reader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n  };\n\n  /* eslint-disable no-invalid-this */\n\n  function readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) {\n      // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n      // 5th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n      i = 0;\n    } else {\n      for (; i < 3; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n        // 1st..3th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n      // 4th\n      bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n      return bits;\n    }\n    if (this.len - this.pos > 4) {\n      // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n    } else {\n      for (; i < 5; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n  }\n\n  /* eslint-enable no-invalid-this */\n\n  /**\n   * Reads a varint as a signed 64 bit value.\n   * @name Reader#int64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a varint as an unsigned 64 bit value.\n   * @name Reader#uint64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value.\n   * @name Reader#sint64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a varint as a boolean.\n   * @returns {boolean} Value read\n   */\n  Reader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n  };\n  function readFixed32_end(buf, end) {\n    // note that this uses `end`, not `pos`\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n  }\n\n  /**\n   * Reads fixed 32 bits as an unsigned 32 bit integer.\n   * @returns {number} Value read\n   */\n  Reader.prototype.fixed32 = function read_fixed32() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4);\n  };\n\n  /**\n   * Reads fixed 32 bits as a signed 32 bit integer.\n   * @returns {number} Value read\n   */\n  Reader.prototype.sfixed32 = function read_sfixed32() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n  };\n\n  /* eslint-disable no-invalid-this */\n\n  function readFixed64(/* this: Reader */\n  ) {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n  }\n\n  /* eslint-enable no-invalid-this */\n\n  /**\n   * Reads fixed 64 bits.\n   * @name Reader#fixed64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits.\n   * @name Reader#sfixed64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a float (32 bit) as a number.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.float = function read_float() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n  };\n\n  /**\n   * Reads a double (64 bit float) as a number.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.double = function read_double() {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n  };\n\n  /**\n   * Reads a sequence of bytes preceeded by its length as a varint.\n   * @returns {Uint8Array} Value read\n   */\n  Reader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n      start = this.pos,\n      end = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n    if (Array.isArray(this.buf))\n      // plain array\n      return this.buf.slice(start, end);\n    if (start === end) {\n      // fix for IE 10/Win8 and others' subarray returning array of size 1\n      var nativeBuffer = util.Buffer;\n      return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n  };\n\n  /**\n   * Reads a string preceeded by its byte length as a varint.\n   * @returns {string} Value read\n   */\n  Reader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n  };\n\n  /**\n   * Skips the specified number of bytes if specified, otherwise skips a varint.\n   * @param {number} [length] Length if known, otherwise a varint is assumed\n   * @returns {Reader} `this`\n   */\n  Reader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n      /* istanbul ignore if */\n      if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n      this.pos += length;\n    } else {\n      do {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n      } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n  };\n\n  /**\n   * Skips the next element of the specified wire type.\n   * @param {number} wireType Wire type received\n   * @returns {Reader} `this`\n   */\n  Reader.prototype.skipType = function (wireType) {\n    switch (wireType) {\n      case 0:\n        this.skip();\n        break;\n      case 1:\n        this.skip(8);\n        break;\n      case 2:\n        this.skip(this.uint32());\n        break;\n      case 3:\n        while ((wireType = this.uint32() & 7) !== 4) {\n          this.skipType(wireType);\n        }\n        break;\n      case 5:\n        this.skip(4);\n        break;\n\n      /* istanbul ignore next */\n      default:\n        throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n  };\n  Reader._configure = function (BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n    util.merge(Reader.prototype, {\n      int64: function read_int64() {\n        return readLongVarint.call(this)[fn](false);\n      },\n      uint64: function read_uint64() {\n        return readLongVarint.call(this)[fn](true);\n      },\n      sint64: function read_sint64() {\n        return readLongVarint.call(this).zzDecode()[fn](false);\n      },\n      fixed64: function read_fixed64() {\n        return readFixed64.call(this)[fn](true);\n      },\n      sfixed64: function read_sfixed64() {\n        return readFixed64.call(this)[fn](false);\n      }\n    });\n  };\n});","lineCount":375,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"module"],[4,8,2,6],[4,9,2,7,"exports"],[4,16,2,14],[4,19,2,17,"Reader"],[4,25,2,23],[5,2,4,0],[5,6,4,4,"util"],[5,10,4,8],[5,13,4,16,"require"],[5,20,4,23],[5,21,4,23,"_dependencyMap"],[5,35,4,23],[5,56,4,40],[5,57,4,41],[6,2,6,0],[6,6,6,4,"BufferReader"],[6,18,6,16],[6,19,6,17],[6,20,6,18],[8,2,8,0],[8,6,8,4,"LongBits"],[8,14,8,12],[8,17,8,16,"util"],[8,21,8,20],[8,22,8,21,"LongBits"],[8,30,8,29],[9,4,9,4,"utf8"],[9,8,9,8],[9,11,9,16,"util"],[9,15,9,20],[9,16,9,21,"utf8"],[9,20,9,25],[11,2,11,0],[12,2,12,0],[12,11,12,9,"indexOutOfRange"],[12,26,12,24,"indexOutOfRange"],[12,27,12,25,"reader"],[12,33,12,31],[12,35,12,33,"writeLength"],[12,46,12,44],[12,48,12,46],[13,4,13,4],[13,11,13,11,"RangeError"],[13,21,13,21],[13,22,13,22],[13,44,13,44],[13,47,13,47,"reader"],[13,53,13,53],[13,54,13,54,"pos"],[13,57,13,57],[13,60,13,60],[13,65,13,65],[13,69,13,69,"writeLength"],[13,80,13,80],[13,84,13,84],[13,85,13,85],[13,86,13,86],[13,89,13,89],[13,94,13,94],[13,97,13,97,"reader"],[13,103,13,103],[13,104,13,104,"len"],[13,107,13,107],[13,108,13,108],[14,2,14,0],[16,2,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,0,20,0],[21,0,21,0],[22,2,22,0],[22,11,22,9,"Reader"],[22,17,22,15,"Reader"],[22,18,22,16,"buffer"],[22,24,22,22],[22,26,22,24],[23,4,24,4],[24,0,25,0],[25,0,26,0],[26,0,27,0],[27,4,28,4],[27,8,28,8],[27,9,28,9,"buf"],[27,12,28,12],[27,15,28,15,"buffer"],[27,21,28,21],[29,4,30,4],[30,0,31,0],[31,0,32,0],[32,0,33,0],[33,4,34,4],[33,8,34,8],[33,9,34,9,"pos"],[33,12,34,12],[33,15,34,15],[33,16,34,16],[35,4,36,4],[36,0,37,0],[37,0,38,0],[38,0,39,0],[39,4,40,4],[39,8,40,8],[39,9,40,9,"len"],[39,12,40,12],[39,15,40,15,"buffer"],[39,21,40,21],[39,22,40,22,"length"],[39,28,40,28],[40,2,41,0],[41,2,43,0],[41,6,43,4,"create_array"],[41,18,43,16],[41,21,43,19],[41,28,43,26,"Uint8Array"],[41,38,43,36],[41,43,43,41],[41,54,43,52],[41,57,44,6],[41,66,44,15,"create_typed_array"],[41,84,44,33,"create_typed_array"],[41,85,44,34,"buffer"],[41,91,44,40],[41,93,44,42],[42,4,45,8],[42,8,45,12,"buffer"],[42,14,45,18],[42,26,45,30,"Uint8Array"],[42,36,45,40],[42,40,45,44,"Array"],[42,45,45,49],[42,46,45,50,"isArray"],[42,53,45,57],[42,54,45,58,"buffer"],[42,60,45,64],[42,61,45,65],[42,63,46,12],[42,70,46,19],[42,74,46,23,"Reader"],[42,80,46,29],[42,81,46,30,"buffer"],[42,87,46,36],[42,88,46,37],[43,4,47,8],[43,10,47,14,"Error"],[43,15,47,19],[43,16,47,20],[43,32,47,36],[43,33,47,37],[44,2,48,4],[45,2,49,4],[45,31,50,6],[45,40,50,15,"create_array"],[45,52,50,27,"create_array"],[45,53,50,28,"buffer"],[45,59,50,34],[45,61,50,36],[46,4,51,8],[46,8,51,12,"Array"],[46,13,51,17],[46,14,51,18,"isArray"],[46,21,51,25],[46,22,51,26,"buffer"],[46,28,51,32],[46,29,51,33],[46,31,52,12],[46,38,52,19],[46,42,52,23,"Reader"],[46,48,52,29],[46,49,52,30,"buffer"],[46,55,52,36],[46,56,52,37],[47,4,53,8],[47,10,53,14,"Error"],[47,15,53,19],[47,16,53,20],[47,32,53,36],[47,33,53,37],[48,2,54,4],[48,3,54,5],[49,2,56,0],[49,6,56,4,"create"],[49,12,56,10],[49,15,56,13],[49,24,56,22,"create"],[49,30,56,28,"create"],[49,31,56,28],[49,33,56,31],[50,4,57,4],[50,11,57,11,"util"],[50,15,57,15],[50,16,57,16,"Buffer"],[50,22,57,22],[50,25,58,10],[50,34,58,19,"create_buffer_setup"],[50,53,58,38,"create_buffer_setup"],[50,54,58,39,"buffer"],[50,60,58,45],[50,62,58,47],[51,6,59,12],[51,13,59,19],[51,14,59,20,"Reader"],[51,20,59,26],[51,21,59,27,"create"],[51,27,59,33],[51,30,59,36],[51,39,59,45,"create_buffer"],[51,52,59,58,"create_buffer"],[51,53,59,59,"buffer"],[51,59,59,65],[51,61,59,67],[52,8,60,16],[52,15,60,23,"util"],[52,19,60,27],[52,20,60,28,"Buffer"],[52,26,60,34],[52,27,60,35,"isBuffer"],[52,35,60,43],[52,36,60,44,"buffer"],[52,42,60,50],[52,43,60,51],[52,46,61,22],[52,50,61,26,"BufferReader"],[52,62,61,38],[52,63,61,39,"buffer"],[52,69,61,45],[53,8,62,20],[53,37,63,22,"create_array"],[53,49,63,34],[53,50,63,35,"buffer"],[53,56,63,41],[53,57,63,42],[54,6,64,12],[54,7,64,13],[54,9,64,15,"buffer"],[54,15,64,21],[54,16,64,22],[55,4,65,8],[56,4,66,8],[56,33,67,10,"create_array"],[56,45,67,22],[57,2,68,0],[57,3,68,1],[59,2,70,0],[60,0,71,0],[61,0,72,0],[62,0,73,0],[63,0,74,0],[64,0,75,0],[65,0,76,0],[66,2,77,0,"Reader"],[66,8,77,6],[66,9,77,7,"create"],[66,15,77,13],[66,18,77,16,"create"],[66,24,77,22],[66,25,77,23],[66,26,77,24],[67,2,79,0,"Reader"],[67,8,79,6],[67,9,79,7,"prototype"],[67,18,79,16],[67,19,79,17,"_slice"],[67,25,79,23],[67,28,79,26,"util"],[67,32,79,30],[67,33,79,31,"Array"],[67,38,79,36],[67,39,79,37,"prototype"],[67,48,79,46],[67,49,79,47,"subarray"],[67,57,79,55],[67,61,79,59],[67,87,79,86,"util"],[67,91,79,90],[67,92,79,91,"Array"],[67,97,79,96],[67,98,79,97,"prototype"],[67,107,79,106],[67,108,79,107,"slice"],[67,113,79,112],[69,2,81,0],[70,0,82,0],[71,0,83,0],[72,0,84,0],[73,0,85,0],[74,2,86,0,"Reader"],[74,8,86,6],[74,9,86,7,"prototype"],[74,18,86,16],[74,19,86,17,"uint32"],[74,25,86,23],[74,28,86,27],[74,37,86,36,"read_uint32_setup"],[74,54,86,53,"read_uint32_setup"],[74,55,86,53],[74,57,86,56],[75,4,87,4],[75,8,87,8,"value"],[75,13,87,13],[75,16,87,16],[75,26,87,26],[75,27,87,27],[75,28,87,28],[76,4,88,4],[76,11,88,11],[76,20,88,20,"read_uint32"],[76,31,88,31,"read_uint32"],[76,32,88,31],[76,34,88,34],[77,6,89,8,"value"],[77,11,89,13],[77,14,89,16],[77,15,89,26],[77,19,89,30],[77,20,89,31,"buf"],[77,23,89,34],[77,24,89,35],[77,28,89,39],[77,29,89,40,"pos"],[77,32,89,43],[77,33,89,44],[77,36,89,47],[77,39,89,50],[77,45,89,63],[77,46,89,64],[78,6,89,66],[78,10,89,70],[78,14,89,74],[78,15,89,75,"buf"],[78,18,89,78],[78,19,89,79],[78,23,89,83],[78,24,89,84,"pos"],[78,27,89,87],[78,29,89,89],[78,30,89,90],[78,33,89,93],[78,36,89,96],[78,38,89,98],[78,45,89,105,"value"],[78,50,89,110],[79,6,90,8,"value"],[79,11,90,13],[79,14,90,16],[79,15,90,17,"value"],[79,20,90,22],[79,23,90,25],[79,24,90,26],[79,28,90,30],[79,29,90,31,"buf"],[79,32,90,34],[79,33,90,35],[79,37,90,39],[79,38,90,40,"pos"],[79,41,90,43],[79,42,90,44],[79,45,90,47],[79,48,90,50],[79,53,90,56],[79,54,90,57],[79,60,90,63],[79,61,90,64],[80,6,90,66],[80,10,90,70],[80,14,90,74],[80,15,90,75,"buf"],[80,18,90,78],[80,19,90,79],[80,23,90,83],[80,24,90,84,"pos"],[80,27,90,87],[80,29,90,89],[80,30,90,90],[80,33,90,93],[80,36,90,96],[80,38,90,98],[80,45,90,105,"value"],[80,50,90,110],[81,6,91,8,"value"],[81,11,91,13],[81,14,91,16],[81,15,91,17,"value"],[81,20,91,22],[81,23,91,25],[81,24,91,26],[81,28,91,30],[81,29,91,31,"buf"],[81,32,91,34],[81,33,91,35],[81,37,91,39],[81,38,91,40,"pos"],[81,41,91,43],[81,42,91,44],[81,45,91,47],[81,48,91,50],[81,53,91,55],[81,55,91,57],[81,61,91,63],[81,62,91,64],[82,6,91,66],[82,10,91,70],[82,14,91,74],[82,15,91,75,"buf"],[82,18,91,78],[82,19,91,79],[82,23,91,83],[82,24,91,84,"pos"],[82,27,91,87],[82,29,91,89],[82,30,91,90],[82,33,91,93],[82,36,91,96],[82,38,91,98],[82,45,91,105,"value"],[82,50,91,110],[83,6,92,8,"value"],[83,11,92,13],[83,14,92,16],[83,15,92,17,"value"],[83,20,92,22],[83,23,92,25],[83,24,92,26],[83,28,92,30],[83,29,92,31,"buf"],[83,32,92,34],[83,33,92,35],[83,37,92,39],[83,38,92,40,"pos"],[83,41,92,43],[83,42,92,44],[83,45,92,47],[83,48,92,50],[83,53,92,55],[83,55,92,57],[83,61,92,63],[83,62,92,64],[84,6,92,66],[84,10,92,70],[84,14,92,74],[84,15,92,75,"buf"],[84,18,92,78],[84,19,92,79],[84,23,92,83],[84,24,92,84,"pos"],[84,27,92,87],[84,29,92,89],[84,30,92,90],[84,33,92,93],[84,36,92,96],[84,38,92,98],[84,45,92,105,"value"],[84,50,92,110],[85,6,93,8,"value"],[85,11,93,13],[85,14,93,16],[85,15,93,17,"value"],[85,20,93,22],[85,23,93,25],[85,24,93,26],[85,28,93,30],[85,29,93,31,"buf"],[85,32,93,34],[85,33,93,35],[85,37,93,39],[85,38,93,40,"pos"],[85,41,93,43],[85,42,93,44],[85,45,93,48],[85,47,93,50],[85,52,93,55],[85,54,93,57],[85,60,93,63],[85,61,93,64],[86,6,93,66],[86,10,93,70],[86,14,93,74],[86,15,93,75,"buf"],[86,18,93,78],[86,19,93,79],[86,23,93,83],[86,24,93,84,"pos"],[86,27,93,87],[86,29,93,89],[86,30,93,90],[86,33,93,93],[86,36,93,96],[86,38,93,98],[86,45,93,105,"value"],[86,50,93,110],[88,6,95,8],[89,6,96,8],[89,10,96,12],[89,11,96,13],[89,15,96,17],[89,16,96,18,"pos"],[89,19,96,21],[89,23,96,25],[89,24,96,26],[89,28,96,30],[89,32,96,34],[89,33,96,35,"len"],[89,36,96,38],[89,38,96,40],[90,8,97,12],[90,12,97,16],[90,13,97,17,"pos"],[90,16,97,20],[90,19,97,23],[90,23,97,27],[90,24,97,28,"len"],[90,27,97,31],[91,8,98,12],[91,14,98,18,"indexOutOfRange"],[91,29,98,33],[91,30,98,34],[91,34,98,38],[91,36,98,40],[91,38,98,42],[91,39,98,43],[92,6,99,8],[93,6,100,8],[93,13,100,15,"value"],[93,18,100,20],[94,4,101,4],[94,5,101,5],[95,2,102,0],[95,3,102,1],[95,4,102,3],[95,5,102,4],[97,2,104,0],[98,0,105,0],[99,0,106,0],[100,0,107,0],[101,2,108,0,"Reader"],[101,8,108,6],[101,9,108,7,"prototype"],[101,18,108,16],[101,19,108,17,"int32"],[101,24,108,22],[101,27,108,25],[101,36,108,34,"read_int32"],[101,46,108,44,"read_int32"],[101,47,108,44],[101,49,108,47],[102,4,109,4],[102,11,109,11],[102,15,109,15],[102,16,109,16,"uint32"],[102,22,109,22],[102,23,109,23],[102,24,109,24],[102,27,109,27],[102,28,109,28],[103,2,110,0],[103,3,110,1],[105,2,112,0],[106,0,113,0],[107,0,114,0],[108,0,115,0],[109,2,116,0,"Reader"],[109,8,116,6],[109,9,116,7,"prototype"],[109,18,116,16],[109,19,116,17,"sint32"],[109,25,116,23],[109,28,116,26],[109,37,116,35,"read_sint32"],[109,48,116,46,"read_sint32"],[109,49,116,46],[109,51,116,49],[110,4,117,4],[110,8,117,8,"value"],[110,13,117,13],[110,16,117,16],[110,20,117,20],[110,21,117,21,"uint32"],[110,27,117,27],[110,28,117,28],[110,29,117,29],[111,4,118,4],[111,11,118,11,"value"],[111,16,118,16],[111,21,118,21],[111,22,118,22],[111,25,118,25],[111,27,118,27,"value"],[111,32,118,32],[111,35,118,35],[111,36,118,36],[111,37,118,37],[111,40,118,40],[111,41,118,41],[112,2,119,0],[112,3,119,1],[114,2,121,0],[116,2,123,0],[116,11,123,9,"readLongVarint"],[116,25,123,23,"readLongVarint"],[116,26,123,23],[116,28,123,26],[117,4,124,4],[118,4,125,4],[118,8,125,8,"bits"],[118,12,125,12],[118,15,125,15],[118,19,125,19,"LongBits"],[118,27,125,27],[118,28,125,28],[118,29,125,29],[118,31,125,31],[118,32,125,32],[118,33,125,33],[119,4,126,4],[119,8,126,8,"i"],[119,9,126,9],[119,12,126,12],[119,13,126,13],[120,4,127,4],[120,8,127,8],[120,12,127,12],[120,13,127,13,"len"],[120,16,127,16],[120,19,127,19],[120,23,127,23],[120,24,127,24,"pos"],[120,27,127,27],[120,30,127,30],[120,31,127,31],[120,33,127,33],[121,6,127,35],[122,6,128,8],[122,13,128,15,"i"],[122,14,128,16],[122,17,128,19],[122,18,128,20],[122,20,128,22],[122,22,128,24,"i"],[122,23,128,25],[122,25,128,27],[123,8,129,12],[124,8,130,12,"bits"],[124,12,130,16],[124,13,130,17,"lo"],[124,15,130,19],[124,18,130,22],[124,19,130,23,"bits"],[124,23,130,27],[124,24,130,28,"lo"],[124,26,130,30],[124,29,130,33],[124,30,130,34],[124,34,130,38],[124,35,130,39,"buf"],[124,38,130,42],[124,39,130,43],[124,43,130,47],[124,44,130,48,"pos"],[124,47,130,51],[124,48,130,52],[124,51,130,55],[124,54,130,58],[124,59,130,63,"i"],[124,60,130,64],[124,63,130,67],[124,64,130,68],[124,70,130,74],[124,71,130,75],[125,8,131,12],[125,12,131,16],[125,16,131,20],[125,17,131,21,"buf"],[125,20,131,24],[125,21,131,25],[125,25,131,29],[125,26,131,30,"pos"],[125,29,131,33],[125,31,131,35],[125,32,131,36],[125,35,131,39],[125,38,131,42],[125,40,132,16],[125,47,132,23,"bits"],[125,51,132,27],[126,6,133,8],[127,6,134,8],[128,6,135,8,"bits"],[128,10,135,12],[128,11,135,13,"lo"],[128,13,135,15],[128,16,135,18],[128,17,135,19,"bits"],[128,21,135,23],[128,22,135,24,"lo"],[128,24,135,26],[128,27,135,29],[128,28,135,30],[128,32,135,34],[128,33,135,35,"buf"],[128,36,135,38],[128,37,135,39],[128,41,135,43],[128,42,135,44,"pos"],[128,45,135,47],[128,46,135,48],[128,49,135,51],[128,52,135,54],[128,57,135,59],[128,59,135,61],[128,65,135,67],[128,66,135,68],[129,6,136,8,"bits"],[129,10,136,12],[129,11,136,13,"hi"],[129,13,136,15],[129,16,136,18],[129,17,136,19,"bits"],[129,21,136,23],[129,22,136,24,"hi"],[129,24,136,26],[129,27,136,29],[129,28,136,30],[129,32,136,34],[129,33,136,35,"buf"],[129,36,136,38],[129,37,136,39],[129,41,136,43],[129,42,136,44,"pos"],[129,45,136,47],[129,46,136,48],[129,49,136,51],[129,52,136,54],[129,57,136,60],[129,58,136,61],[129,64,136,67],[129,65,136,68],[130,6,137,8],[130,10,137,12],[130,14,137,16],[130,15,137,17,"buf"],[130,18,137,20],[130,19,137,21],[130,23,137,25],[130,24,137,26,"pos"],[130,27,137,29],[130,29,137,31],[130,30,137,32],[130,33,137,35],[130,36,137,38],[130,38,138,12],[130,45,138,19,"bits"],[130,49,138,23],[131,6,139,8,"i"],[131,7,139,9],[131,10,139,12],[131,11,139,13],[132,4,140,4],[132,5,140,5],[132,11,140,11],[133,6,141,8],[133,13,141,15,"i"],[133,14,141,16],[133,17,141,19],[133,18,141,20],[133,20,141,22],[133,22,141,24,"i"],[133,23,141,25],[133,25,141,27],[134,8,142,12],[135,8,143,12],[135,12,143,16],[135,16,143,20],[135,17,143,21,"pos"],[135,20,143,24],[135,24,143,28],[135,28,143,32],[135,29,143,33,"len"],[135,32,143,36],[135,34,144,16],[135,40,144,22,"indexOutOfRange"],[135,55,144,37],[135,56,144,38],[135,60,144,42],[135,61,144,43],[136,8,145,12],[137,8,146,12,"bits"],[137,12,146,16],[137,13,146,17,"lo"],[137,15,146,19],[137,18,146,22],[137,19,146,23,"bits"],[137,23,146,27],[137,24,146,28,"lo"],[137,26,146,30],[137,29,146,33],[137,30,146,34],[137,34,146,38],[137,35,146,39,"buf"],[137,38,146,42],[137,39,146,43],[137,43,146,47],[137,44,146,48,"pos"],[137,47,146,51],[137,48,146,52],[137,51,146,55],[137,54,146,58],[137,59,146,63,"i"],[137,60,146,64],[137,63,146,67],[137,64,146,68],[137,70,146,74],[137,71,146,75],[138,8,147,12],[138,12,147,16],[138,16,147,20],[138,17,147,21,"buf"],[138,20,147,24],[138,21,147,25],[138,25,147,29],[138,26,147,30,"pos"],[138,29,147,33],[138,31,147,35],[138,32,147,36],[138,35,147,39],[138,38,147,42],[138,40,148,16],[138,47,148,23,"bits"],[138,51,148,27],[139,6,149,8],[140,6,150,8],[141,6,151,8,"bits"],[141,10,151,12],[141,11,151,13,"lo"],[141,13,151,15],[141,16,151,18],[141,17,151,19,"bits"],[141,21,151,23],[141,22,151,24,"lo"],[141,24,151,26],[141,27,151,29],[141,28,151,30],[141,32,151,34],[141,33,151,35,"buf"],[141,36,151,38],[141,37,151,39],[141,41,151,43],[141,42,151,44,"pos"],[141,45,151,47],[141,47,151,49],[141,48,151,50],[141,51,151,53],[141,54,151,56],[141,59,151,61,"i"],[141,60,151,62],[141,63,151,65],[141,64,151,66],[141,70,151,72],[141,71,151,73],[142,6,152,8],[142,13,152,15,"bits"],[142,17,152,19],[143,4,153,4],[144,4,154,4],[144,8,154,8],[144,12,154,12],[144,13,154,13,"len"],[144,16,154,16],[144,19,154,19],[144,23,154,23],[144,24,154,24,"pos"],[144,27,154,27],[144,30,154,30],[144,31,154,31],[144,33,154,33],[145,6,154,35],[146,6,155,8],[146,13,155,15,"i"],[146,14,155,16],[146,17,155,19],[146,18,155,20],[146,20,155,22],[146,22,155,24,"i"],[146,23,155,25],[146,25,155,27],[147,8,156,12],[148,8,157,12,"bits"],[148,12,157,16],[148,13,157,17,"hi"],[148,15,157,19],[148,18,157,22],[148,19,157,23,"bits"],[148,23,157,27],[148,24,157,28,"hi"],[148,26,157,30],[148,29,157,33],[148,30,157,34],[148,34,157,38],[148,35,157,39,"buf"],[148,38,157,42],[148,39,157,43],[148,43,157,47],[148,44,157,48,"pos"],[148,47,157,51],[148,48,157,52],[148,51,157,55],[148,54,157,58],[148,59,157,63,"i"],[148,60,157,64],[148,63,157,67],[148,64,157,68],[148,67,157,71],[148,68,157,72],[148,74,157,78],[148,75,157,79],[149,8,158,12],[149,12,158,16],[149,16,158,20],[149,17,158,21,"buf"],[149,20,158,24],[149,21,158,25],[149,25,158,29],[149,26,158,30,"pos"],[149,29,158,33],[149,31,158,35],[149,32,158,36],[149,35,158,39],[149,38,158,42],[149,40,159,16],[149,47,159,23,"bits"],[149,51,159,27],[150,6,160,8],[151,4,161,4],[151,5,161,5],[151,11,161,11],[152,6,162,8],[152,13,162,15,"i"],[152,14,162,16],[152,17,162,19],[152,18,162,20],[152,20,162,22],[152,22,162,24,"i"],[152,23,162,25],[152,25,162,27],[153,8,163,12],[154,8,164,12],[154,12,164,16],[154,16,164,20],[154,17,164,21,"pos"],[154,20,164,24],[154,24,164,28],[154,28,164,32],[154,29,164,33,"len"],[154,32,164,36],[154,34,165,16],[154,40,165,22,"indexOutOfRange"],[154,55,165,37],[154,56,165,38],[154,60,165,42],[154,61,165,43],[155,8,166,12],[156,8,167,12,"bits"],[156,12,167,16],[156,13,167,17,"hi"],[156,15,167,19],[156,18,167,22],[156,19,167,23,"bits"],[156,23,167,27],[156,24,167,28,"hi"],[156,26,167,30],[156,29,167,33],[156,30,167,34],[156,34,167,38],[156,35,167,39,"buf"],[156,38,167,42],[156,39,167,43],[156,43,167,47],[156,44,167,48,"pos"],[156,47,167,51],[156,48,167,52],[156,51,167,55],[156,54,167,58],[156,59,167,63,"i"],[156,60,167,64],[156,63,167,67],[156,64,167,68],[156,67,167,71],[156,68,167,72],[156,74,167,78],[156,75,167,79],[157,8,168,12],[157,12,168,16],[157,16,168,20],[157,17,168,21,"buf"],[157,20,168,24],[157,21,168,25],[157,25,168,29],[157,26,168,30,"pos"],[157,29,168,33],[157,31,168,35],[157,32,168,36],[157,35,168,39],[157,38,168,42],[157,40,169,16],[157,47,169,23,"bits"],[157,51,169,27],[158,6,170,8],[159,4,171,4],[160,4,172,4],[161,4,173,4],[161,10,173,10,"Error"],[161,15,173,15],[161,16,173,16],[161,41,173,41],[161,42,173,42],[162,2,174,0],[164,2,176,0],[166,2,178,0],[167,0,179,0],[168,0,180,0],[169,0,181,0],[170,0,182,0],[171,0,183,0],[173,2,185,0],[174,0,186,0],[175,0,187,0],[176,0,188,0],[177,0,189,0],[178,0,190,0],[180,2,192,0],[181,0,193,0],[182,0,194,0],[183,0,195,0],[184,0,196,0],[185,0,197,0],[187,2,199,0],[188,0,200,0],[189,0,201,0],[190,0,202,0],[191,2,203,0,"Reader"],[191,8,203,6],[191,9,203,7,"prototype"],[191,18,203,16],[191,19,203,17,"bool"],[191,23,203,21],[191,26,203,24],[191,35,203,33,"read_bool"],[191,44,203,42,"read_bool"],[191,45,203,42],[191,47,203,45],[192,4,204,4],[192,11,204,11],[192,15,204,15],[192,16,204,16,"uint32"],[192,22,204,22],[192,23,204,23],[192,24,204,24],[192,29,204,29],[192,30,204,30],[193,2,205,0],[193,3,205,1],[194,2,207,0],[194,11,207,9,"readFixed32_end"],[194,26,207,24,"readFixed32_end"],[194,27,207,25,"buf"],[194,30,207,28],[194,32,207,30,"end"],[194,35,207,33],[194,37,207,35],[195,4,207,37],[196,4,208,4],[196,11,208,11],[196,12,208,12,"buf"],[196,15,208,15],[196,16,208,16,"end"],[196,19,208,19],[196,22,208,22],[196,23,208,23],[196,24,208,24],[196,27,209,12,"buf"],[196,30,209,15],[196,31,209,16,"end"],[196,34,209,19],[196,37,209,22],[196,38,209,23],[196,39,209,24],[196,43,209,28],[196,44,209,29],[196,47,210,12,"buf"],[196,50,210,15],[196,51,210,16,"end"],[196,54,210,19],[196,57,210,22],[196,58,210,23],[196,59,210,24],[196,63,210,28],[196,65,210,30],[196,68,211,12,"buf"],[196,71,211,15],[196,72,211,16,"end"],[196,75,211,19],[196,78,211,22],[196,79,211,23],[196,80,211,24],[196,84,211,28],[196,86,211,30],[196,92,211,36],[196,93,211,37],[197,2,212,0],[199,2,214,0],[200,0,215,0],[201,0,216,0],[202,0,217,0],[203,2,218,0,"Reader"],[203,8,218,6],[203,9,218,7,"prototype"],[203,18,218,16],[203,19,218,17,"fixed32"],[203,26,218,24],[203,29,218,27],[203,38,218,36,"read_fixed32"],[203,50,218,48,"read_fixed32"],[203,51,218,48],[203,53,218,51],[204,4,220,4],[205,4,221,4],[205,8,221,8],[205,12,221,12],[205,13,221,13,"pos"],[205,16,221,16],[205,19,221,19],[205,20,221,20],[205,23,221,23],[205,27,221,27],[205,28,221,28,"len"],[205,31,221,31],[205,33,222,8],[205,39,222,14,"indexOutOfRange"],[205,54,222,29],[205,55,222,30],[205,59,222,34],[205,61,222,36],[205,62,222,37],[205,63,222,38],[206,4,224,4],[206,11,224,11,"readFixed32_end"],[206,26,224,26],[206,27,224,27],[206,31,224,31],[206,32,224,32,"buf"],[206,35,224,35],[206,37,224,37],[206,41,224,41],[206,42,224,42,"pos"],[206,45,224,45],[206,49,224,49],[206,50,224,50],[206,51,224,51],[207,2,225,0],[207,3,225,1],[209,2,227,0],[210,0,228,0],[211,0,229,0],[212,0,230,0],[213,2,231,0,"Reader"],[213,8,231,6],[213,9,231,7,"prototype"],[213,18,231,16],[213,19,231,17,"sfixed32"],[213,27,231,25],[213,30,231,28],[213,39,231,37,"read_sfixed32"],[213,52,231,50,"read_sfixed32"],[213,53,231,50],[213,55,231,53],[214,4,233,4],[215,4,234,4],[215,8,234,8],[215,12,234,12],[215,13,234,13,"pos"],[215,16,234,16],[215,19,234,19],[215,20,234,20],[215,23,234,23],[215,27,234,27],[215,28,234,28,"len"],[215,31,234,31],[215,33,235,8],[215,39,235,14,"indexOutOfRange"],[215,54,235,29],[215,55,235,30],[215,59,235,34],[215,61,235,36],[215,62,235,37],[215,63,235,38],[216,4,237,4],[216,11,237,11,"readFixed32_end"],[216,26,237,26],[216,27,237,27],[216,31,237,31],[216,32,237,32,"buf"],[216,35,237,35],[216,37,237,37],[216,41,237,41],[216,42,237,42,"pos"],[216,45,237,45],[216,49,237,49],[216,50,237,50],[216,51,237,51],[216,54,237,54],[216,55,237,55],[217,2,238,0],[217,3,238,1],[219,2,240,0],[221,2,242,0],[221,11,242,9,"readFixed64"],[221,22,242,20,"readFixed64"],[221,23,242,21],[222,2,242,21],[222,4,242,41],[223,4,244,4],[224,4,245,4],[224,8,245,8],[224,12,245,12],[224,13,245,13,"pos"],[224,16,245,16],[224,19,245,19],[224,20,245,20],[224,23,245,23],[224,27,245,27],[224,28,245,28,"len"],[224,31,245,31],[224,33,246,8],[224,39,246,14,"indexOutOfRange"],[224,54,246,29],[224,55,246,30],[224,59,246,34],[224,61,246,36],[224,62,246,37],[224,63,246,38],[225,4,248,4],[225,11,248,11],[225,15,248,15,"LongBits"],[225,23,248,23],[225,24,248,24,"readFixed32_end"],[225,39,248,39],[225,40,248,40],[225,44,248,44],[225,45,248,45,"buf"],[225,48,248,48],[225,50,248,50],[225,54,248,54],[225,55,248,55,"pos"],[225,58,248,58],[225,62,248,62],[225,63,248,63],[225,64,248,64],[225,66,248,66,"readFixed32_end"],[225,81,248,81],[225,82,248,82],[225,86,248,86],[225,87,248,87,"buf"],[225,90,248,90],[225,92,248,92],[225,96,248,96],[225,97,248,97,"pos"],[225,100,248,100],[225,104,248,104],[225,105,248,105],[225,106,248,106],[225,107,248,107],[226,2,249,0],[228,2,251,0],[230,2,253,0],[231,0,254,0],[232,0,255,0],[233,0,256,0],[234,0,257,0],[235,0,258,0],[237,2,260,0],[238,0,261,0],[239,0,262,0],[240,0,263,0],[241,0,264,0],[242,0,265,0],[244,2,267,0],[245,0,268,0],[246,0,269,0],[247,0,270,0],[248,0,271,0],[249,2,272,0,"Reader"],[249,8,272,6],[249,9,272,7,"prototype"],[249,18,272,16],[249,19,272,17,"float"],[249,24,272,22],[249,27,272,25],[249,36,272,34,"read_float"],[249,46,272,44,"read_float"],[249,47,272,44],[249,49,272,47],[250,4,274,4],[251,4,275,4],[251,8,275,8],[251,12,275,12],[251,13,275,13,"pos"],[251,16,275,16],[251,19,275,19],[251,20,275,20],[251,23,275,23],[251,27,275,27],[251,28,275,28,"len"],[251,31,275,31],[251,33,276,8],[251,39,276,14,"indexOutOfRange"],[251,54,276,29],[251,55,276,30],[251,59,276,34],[251,61,276,36],[251,62,276,37],[251,63,276,38],[252,4,278,4],[252,8,278,8,"value"],[252,13,278,13],[252,16,278,16,"util"],[252,20,278,20],[252,21,278,21,"float"],[252,26,278,26],[252,27,278,27,"readFloatLE"],[252,38,278,38],[252,39,278,39],[252,43,278,43],[252,44,278,44,"buf"],[252,47,278,47],[252,49,278,49],[252,53,278,53],[252,54,278,54,"pos"],[252,57,278,57],[252,58,278,58],[253,4,279,4],[253,8,279,8],[253,9,279,9,"pos"],[253,12,279,12],[253,16,279,16],[253,17,279,17],[254,4,280,4],[254,11,280,11,"value"],[254,16,280,16],[255,2,281,0],[255,3,281,1],[257,2,283,0],[258,0,284,0],[259,0,285,0],[260,0,286,0],[261,0,287,0],[262,2,288,0,"Reader"],[262,8,288,6],[262,9,288,7,"prototype"],[262,18,288,16],[262,19,288,17,"double"],[262,25,288,23],[262,28,288,26],[262,37,288,35,"read_double"],[262,48,288,46,"read_double"],[262,49,288,46],[262,51,288,49],[263,4,290,4],[264,4,291,4],[264,8,291,8],[264,12,291,12],[264,13,291,13,"pos"],[264,16,291,16],[264,19,291,19],[264,20,291,20],[264,23,291,23],[264,27,291,27],[264,28,291,28,"len"],[264,31,291,31],[264,33,292,8],[264,39,292,14,"indexOutOfRange"],[264,54,292,29],[264,55,292,30],[264,59,292,34],[264,61,292,36],[264,62,292,37],[264,63,292,38],[265,4,294,4],[265,8,294,8,"value"],[265,13,294,13],[265,16,294,16,"util"],[265,20,294,20],[265,21,294,21,"float"],[265,26,294,26],[265,27,294,27,"readDoubleLE"],[265,39,294,39],[265,40,294,40],[265,44,294,44],[265,45,294,45,"buf"],[265,48,294,48],[265,50,294,50],[265,54,294,54],[265,55,294,55,"pos"],[265,58,294,58],[265,59,294,59],[266,4,295,4],[266,8,295,8],[266,9,295,9,"pos"],[266,12,295,12],[266,16,295,16],[266,17,295,17],[267,4,296,4],[267,11,296,11,"value"],[267,16,296,16],[268,2,297,0],[268,3,297,1],[270,2,299,0],[271,0,300,0],[272,0,301,0],[273,0,302,0],[274,2,303,0,"Reader"],[274,8,303,6],[274,9,303,7,"prototype"],[274,18,303,16],[274,19,303,17,"bytes"],[274,24,303,22],[274,27,303,25],[274,36,303,34,"read_bytes"],[274,46,303,44,"read_bytes"],[274,47,303,44],[274,49,303,47],[275,4,304,4],[275,8,304,8,"length"],[275,14,304,14],[275,17,304,17],[275,21,304,21],[275,22,304,22,"uint32"],[275,28,304,28],[275,29,304,29],[275,30,304,30],[276,6,305,8,"start"],[276,11,305,13],[276,14,305,17],[276,18,305,21],[276,19,305,22,"pos"],[276,22,305,25],[277,6,306,8,"end"],[277,9,306,11],[277,12,306,17],[277,16,306,21],[277,17,306,22,"pos"],[277,20,306,25],[277,23,306,28,"length"],[277,29,306,34],[279,4,308,4],[280,4,309,4],[280,8,309,8,"end"],[280,11,309,11],[280,14,309,14],[280,18,309,18],[280,19,309,19,"len"],[280,22,309,22],[280,24,310,8],[280,30,310,14,"indexOutOfRange"],[280,45,310,29],[280,46,310,30],[280,50,310,34],[280,52,310,36,"length"],[280,58,310,42],[280,59,310,43],[281,4,312,4],[281,8,312,8],[281,9,312,9,"pos"],[281,12,312,12],[281,16,312,16,"length"],[281,22,312,22],[282,4,313,4],[282,8,313,8,"Array"],[282,13,313,13],[282,14,313,14,"isArray"],[282,21,313,21],[282,22,313,22],[282,26,313,26],[282,27,313,27,"buf"],[282,30,313,30],[282,31,313,31],[283,6,313,33],[284,6,314,8],[284,13,314,15],[284,17,314,19],[284,18,314,20,"buf"],[284,21,314,23],[284,22,314,24,"slice"],[284,27,314,29],[284,28,314,30,"start"],[284,33,314,35],[284,35,314,37,"end"],[284,38,314,40],[284,39,314,41],[285,4,316,4],[285,8,316,8,"start"],[285,13,316,13],[285,18,316,18,"end"],[285,21,316,21],[285,23,316,23],[286,6,316,25],[287,6,317,8],[287,10,317,12,"nativeBuffer"],[287,22,317,24],[287,25,317,27,"util"],[287,29,317,31],[287,30,317,32,"Buffer"],[287,36,317,38],[288,6,318,8],[288,13,318,15,"nativeBuffer"],[288,25,318,27],[288,28,319,14,"nativeBuffer"],[288,40,319,26],[288,41,319,27,"alloc"],[288,46,319,32],[288,47,319,33],[288,48,319,34],[288,49,319,35],[288,52,320,14],[288,56,320,18],[288,60,320,22],[288,61,320,23,"buf"],[288,64,320,26],[288,65,320,27,"constructor"],[288,76,320,38],[288,77,320,39],[288,78,320,40],[288,79,320,41],[289,4,321,4],[290,4,322,4],[290,11,322,11],[290,15,322,15],[290,16,322,16,"_slice"],[290,22,322,22],[290,23,322,23,"call"],[290,27,322,27],[290,28,322,28],[290,32,322,32],[290,33,322,33,"buf"],[290,36,322,36],[290,38,322,38,"start"],[290,43,322,43],[290,45,322,45,"end"],[290,48,322,48],[290,49,322,49],[291,2,323,0],[291,3,323,1],[293,2,325,0],[294,0,326,0],[295,0,327,0],[296,0,328,0],[297,2,329,0,"Reader"],[297,8,329,6],[297,9,329,7,"prototype"],[297,18,329,16],[297,19,329,17,"string"],[297,25,329,23],[297,28,329,26],[297,37,329,35,"read_string"],[297,48,329,46,"read_string"],[297,49,329,46],[297,51,329,49],[298,4,330,4],[298,8,330,8,"bytes"],[298,13,330,13],[298,16,330,16],[298,20,330,20],[298,21,330,21,"bytes"],[298,26,330,26],[298,27,330,27],[298,28,330,28],[299,4,331,4],[299,11,331,11,"utf8"],[299,15,331,15],[299,16,331,16,"read"],[299,20,331,20],[299,21,331,21,"bytes"],[299,26,331,26],[299,28,331,28],[299,29,331,29],[299,31,331,31,"bytes"],[299,36,331,36],[299,37,331,37,"length"],[299,43,331,43],[299,44,331,44],[300,2,332,0],[300,3,332,1],[302,2,334,0],[303,0,335,0],[304,0,336,0],[305,0,337,0],[306,0,338,0],[307,2,339,0,"Reader"],[307,8,339,6],[307,9,339,7,"prototype"],[307,18,339,16],[307,19,339,17,"skip"],[307,23,339,21],[307,26,339,24],[307,35,339,33,"skip"],[307,39,339,37,"skip"],[307,40,339,38,"length"],[307,46,339,44],[307,48,339,46],[308,4,340,4],[308,8,340,8],[308,15,340,15,"length"],[308,21,340,21],[308,26,340,26],[308,34,340,34],[308,36,340,36],[309,6,341,8],[310,6,342,8],[310,10,342,12],[310,14,342,16],[310,15,342,17,"pos"],[310,18,342,20],[310,21,342,23,"length"],[310,27,342,29],[310,30,342,32],[310,34,342,36],[310,35,342,37,"len"],[310,38,342,40],[310,40,343,12],[310,46,343,18,"indexOutOfRange"],[310,61,343,33],[310,62,343,34],[310,66,343,38],[310,68,343,40,"length"],[310,74,343,46],[310,75,343,47],[311,6,344,8],[311,10,344,12],[311,11,344,13,"pos"],[311,14,344,16],[311,18,344,20,"length"],[311,24,344,26],[312,4,345,4],[312,5,345,5],[312,11,345,11],[313,6,346,8],[313,9,346,11],[314,8,347,12],[315,8,348,12],[315,12,348,16],[315,16,348,20],[315,17,348,21,"pos"],[315,20,348,24],[315,24,348,28],[315,28,348,32],[315,29,348,33,"len"],[315,32,348,36],[315,34,349,16],[315,40,349,22,"indexOutOfRange"],[315,55,349,37],[315,56,349,38],[315,60,349,42],[315,61,349,43],[316,6,350,8],[316,7,350,9],[316,15,350,17],[316,19,350,21],[316,20,350,22,"buf"],[316,23,350,25],[316,24,350,26],[316,28,350,30],[316,29,350,31,"pos"],[316,32,350,34],[316,34,350,36],[316,35,350,37],[316,38,350,40],[316,41,350,43],[317,4,351,4],[318,4,352,4],[318,11,352,11],[318,15,352,15],[319,2,353,0],[319,3,353,1],[321,2,355,0],[322,0,356,0],[323,0,357,0],[324,0,358,0],[325,0,359,0],[326,2,360,0,"Reader"],[326,8,360,6],[326,9,360,7,"prototype"],[326,18,360,16],[326,19,360,17,"skipType"],[326,27,360,25],[326,30,360,28],[326,40,360,37,"wireType"],[326,48,360,45],[326,50,360,47],[327,4,361,4],[327,12,361,12,"wireType"],[327,20,361,20],[328,6,362,8],[328,11,362,13],[328,12,362,14],[329,8,363,12],[329,12,363,16],[329,13,363,17,"skip"],[329,17,363,21],[329,18,363,22],[329,19,363,23],[330,8,364,12],[331,6,365,8],[331,11,365,13],[331,12,365,14],[332,8,366,12],[332,12,366,16],[332,13,366,17,"skip"],[332,17,366,21],[332,18,366,22],[332,19,366,23],[332,20,366,24],[333,8,367,12],[334,6,368,8],[334,11,368,13],[334,12,368,14],[335,8,369,12],[335,12,369,16],[335,13,369,17,"skip"],[335,17,369,21],[335,18,369,22],[335,22,369,26],[335,23,369,27,"uint32"],[335,29,369,33],[335,30,369,34],[335,31,369,35],[335,32,369,36],[336,8,370,12],[337,6,371,8],[337,11,371,13],[337,12,371,14],[338,8,372,12],[338,15,372,19],[338,16,372,20,"wireType"],[338,24,372,28],[338,27,372,31],[338,31,372,35],[338,32,372,36,"uint32"],[338,38,372,42],[338,39,372,43],[338,40,372,44],[338,43,372,47],[338,44,372,48],[338,50,372,54],[338,51,372,55],[338,53,372,57],[339,10,373,16],[339,14,373,20],[339,15,373,21,"skipType"],[339,23,373,29],[339,24,373,30,"wireType"],[339,32,373,38],[339,33,373,39],[340,8,374,12],[341,8,375,12],[342,6,376,8],[342,11,376,13],[342,12,376,14],[343,8,377,12],[343,12,377,16],[343,13,377,17,"skip"],[343,17,377,21],[343,18,377,22],[343,19,377,23],[343,20,377,24],[344,8,378,12],[346,6,380,8],[347,6,381,8],[348,8,382,12],[348,14,382,18,"Error"],[348,19,382,23],[348,20,382,24],[348,40,382,44],[348,43,382,47,"wireType"],[348,51,382,55],[348,54,382,58],[348,67,382,71],[348,70,382,74],[348,74,382,78],[348,75,382,79,"pos"],[348,78,382,82],[348,79,382,83],[349,4,383,4],[350,4,384,4],[350,11,384,11],[350,15,384,15],[351,2,385,0],[351,3,385,1],[352,2,387,0,"Reader"],[352,8,387,6],[352,9,387,7,"_configure"],[352,19,387,17],[352,22,387,20],[352,32,387,29,"BufferReader_"],[352,45,387,42],[352,47,387,44],[353,4,388,4,"BufferReader"],[353,16,388,16],[353,19,388,19,"BufferReader_"],[353,32,388,32],[354,4,389,4,"Reader"],[354,10,389,10],[354,11,389,11,"create"],[354,17,389,17],[354,20,389,20,"create"],[354,26,389,26],[354,27,389,27],[354,28,389,28],[355,4,390,4,"BufferReader"],[355,16,390,16],[355,17,390,17,"_configure"],[355,27,390,27],[355,28,390,28],[355,29,390,29],[356,4,392,4],[356,8,392,8,"fn"],[356,10,392,10],[356,13,392,13,"util"],[356,17,392,17],[356,18,392,18,"Long"],[356,22,392,22],[356,25,392,25],[356,33,392,33],[356,36,392,36],[356,62,392,63],[356,72,392,73],[357,4,393,4,"util"],[357,8,393,8],[357,9,393,9,"merge"],[357,14,393,14],[357,15,393,15,"Reader"],[357,21,393,21],[357,22,393,22,"prototype"],[357,31,393,31],[357,33,393,33],[358,6,395,8,"int64"],[358,11,395,13],[358,13,395,15],[358,22,395,24,"read_int64"],[358,32,395,34,"read_int64"],[358,33,395,34],[358,35,395,37],[359,8,396,12],[359,15,396,19,"readLongVarint"],[359,29,396,33],[359,30,396,34,"call"],[359,34,396,38],[359,35,396,39],[359,39,396,43],[359,40,396,44],[359,41,396,45,"fn"],[359,43,396,47],[359,44,396,48],[359,45,396,49],[359,50,396,54],[359,51,396,55],[360,6,397,8],[360,7,397,9],[361,6,399,8,"uint64"],[361,12,399,14],[361,14,399,16],[361,23,399,25,"read_uint64"],[361,34,399,36,"read_uint64"],[361,35,399,36],[361,37,399,39],[362,8,400,12],[362,15,400,19,"readLongVarint"],[362,29,400,33],[362,30,400,34,"call"],[362,34,400,38],[362,35,400,39],[362,39,400,43],[362,40,400,44],[362,41,400,45,"fn"],[362,43,400,47],[362,44,400,48],[362,45,400,49],[362,49,400,53],[362,50,400,54],[363,6,401,8],[363,7,401,9],[364,6,403,8,"sint64"],[364,12,403,14],[364,14,403,16],[364,23,403,25,"read_sint64"],[364,34,403,36,"read_sint64"],[364,35,403,36],[364,37,403,39],[365,8,404,12],[365,15,404,19,"readLongVarint"],[365,29,404,33],[365,30,404,34,"call"],[365,34,404,38],[365,35,404,39],[365,39,404,43],[365,40,404,44],[365,41,404,45,"zzDecode"],[365,49,404,53],[365,50,404,54],[365,51,404,55],[365,52,404,56,"fn"],[365,54,404,58],[365,55,404,59],[365,56,404,60],[365,61,404,65],[365,62,404,66],[366,6,405,8],[366,7,405,9],[367,6,407,8,"fixed64"],[367,13,407,15],[367,15,407,17],[367,24,407,26,"read_fixed64"],[367,36,407,38,"read_fixed64"],[367,37,407,38],[367,39,407,41],[368,8,408,12],[368,15,408,19,"readFixed64"],[368,26,408,30],[368,27,408,31,"call"],[368,31,408,35],[368,32,408,36],[368,36,408,40],[368,37,408,41],[368,38,408,42,"fn"],[368,40,408,44],[368,41,408,45],[368,42,408,46],[368,46,408,50],[368,47,408,51],[369,6,409,8],[369,7,409,9],[370,6,411,8,"sfixed64"],[370,14,411,16],[370,16,411,18],[370,25,411,27,"read_sfixed64"],[370,38,411,40,"read_sfixed64"],[370,39,411,40],[370,41,411,43],[371,8,412,12],[371,15,412,19,"readFixed64"],[371,26,412,30],[371,27,412,31,"call"],[371,31,412,35],[371,32,412,36],[371,36,412,40],[371,37,412,41],[371,38,412,42,"fn"],[371,40,412,44],[371,41,412,45],[371,42,412,46],[371,47,412,51],[371,48,412,52],[372,6,413,8],[373,4,415,4],[373,5,415,5],[373,6,415,6],[374,2,416,0],[374,3,416,1],[375,0,416,2],[375,3]],"functionMap":{"names":["<global>","indexOutOfRange","Reader","create_typed_array","create_array","create","create_buffer_setup","create_buffer","read_uint32_setup","read_uint32","read_int32","read_sint32","readLongVarint","read_bool","readFixed32_end","read_fixed32","read_sfixed32","readFixed64","read_float","read_double","read_bytes","read_string","skip","Reader.prototype.skipType","Reader._configure","read_int64","read_uint64","read_sint64","read_fixed64","read_sfixed64"],"mappings":"AAA;ACW;CDE;AEQ;CFmB;MGG;KHI;MIE;KJI;aKE;UCE;oCCC;aDK;SDC;CLG;2BQkB;WCE;KDa;CRC;yBUM;CVE;0BWM;CXG;AYI;CZmD;wBa6B;CbE;AcE;CdK;2BeM;CfO;4BgBM;ChBO;AiBI;CjBO;yBkBuB;ClBS;0BmBO;CnBS;yBoBM;CpBoB;0BqBM;CrBG;wBsBO;CtBc;4BuBO;CvByB;oBwBE;eCQ;SDE;gBEE;SFE;gBGE;SHE;iBIE;SJE;kBKE;SLE;CxBG"}},"type":"js/module"}]}